<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>javascript学习</title>
      <link href="/2022/05319399.html"/>
      <url>/2022/05319399.html</url>
      
        <content type="html"><![CDATA[<h1 id="js"><a href="#js" class="headerlink" title="js"></a>js</h1><p><a href="https://www.yuque.com/yashujs/bfug6u/ntxhzu#cc4dd1da">https://www.yuque.com/yashujs/bfug6u/ntxhzu#cc4dd1da</a></p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>单行注释//<br>块注释/**/</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">addValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> item.value + val</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 请使用对象方法的简写方式, 属性不可简写, 方法可以简写  </span></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue (val) {</span><br><span class="line">    <span class="keyword">return</span> item.value + val</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>arr.push()<br>arr.sort()</p><h3 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// join() 方法可以把数组转换为字符串，不过它可以指定分隔符。在调用 join() 方法时，可以传递一个参数作为分隔符来连接每个元素。如果省略参数，默认使用逗号作为分隔符</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];  <span class="comment">//定义数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = a.join(<span class="string">""</span>);  <span class="comment">//指定分隔符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">//返回字符串“12345”</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用数组的多个值时"><a href="#使用数组的多个值时" class="headerlink" title="使用数组的多个值时"></a>使用数组的多个值时</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当需要使用数组的多个值时，请使用解构赋值  </span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr</span><br></pre></td></tr></tbody></table></figure><h3 id="调用数组每个元素"><a href="#调用数组每个元素" class="headerlink" title="调用数组每个元素"></a>调用数组每个元素</h3><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{<span class="built_in">console</span>.log(i);})</span><br></pre></td></tr></tbody></table></figure><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>var 存在变量提升的情况，即 var 声明会被提升至该作用域的顶部，但是他们的赋值并不会。而 const 和 let 并不存在这种情况，</p><p>在作用域顶部声明变量，避免变量声明和赋值引起的相关问题。<br>var的作用域被规定为一个函数作用域，<br>而let则被规定为块作用域，块作用域要比函数作用域小一些<br>但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在 JavaScript 函数内部声明的变量是局部变量，所以只能在函数内部访问它，局部变量生命期从被声明的时间开始。在函数运行以后被删除。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>字符串太长的时候，请不要使用字符串连接符换行 \，而是使用 + </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'牙叔教程 牙叔教程 牙叔教程'</span> +</span><br><span class="line">  <span class="string">'牙叔教程 牙叔教程 牙叔教程'</span> +</span><br><span class="line">  <span class="string">'牙叔教程 牙叔教程'</span></span><br></pre></td></tr></tbody></table></figure><p>编程时使用join而不是字符串连接来构建字符串  </p><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.show();</span><br><span class="line"><span class="keyword">var</span> i = { <span class="attr">name</span>: <span class="string">"小明"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">height</span>: <span class="number">1.72</span> }; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"大家好, 我叫%s, 今年%d岁, 身高%d米"</span>, i.name, i.age, i.height);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实际上我是一个对象啦，长这样子: %j"</span>, i);</span><br></pre></td></tr></tbody></table></figure><h3 id="随机字符"><a href="#随机字符" class="headerlink" title="随机字符"></a>随机字符</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Radom</span>(<span class="params">n</span>)</span>{</span><br><span class="line">    <span class="comment">//如果不传参就是n=8</span></span><br><span class="line">    <span class="keyword">var</span> n= n || <span class="number">8</span></span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">        str+=<span class="built_in">String</span>.fromCharCode(random(<span class="number">0</span>,<span class="number">65535</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">log(Radom(<span class="number">8</span>))</span><br></pre></td></tr></tbody></table></figure><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/dy5mld">autojs之递归</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历文件夹, 获取文件列表</span></span><br><span class="line"><span class="keyword">let</span> dirPath = <span class="string">"/sdcard/脚本"</span>;</span><br><span class="line"><span class="keyword">let</span> filePathList = getFilePathList(dirPath);</span><br><span class="line">log(filePathList);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilePathList</span>(<span class="params">dirPath, filePathList</span>) </span>{</span><br><span class="line">  filePathList = filePathList || [];</span><br><span class="line">  <span class="keyword">var</span> fileNameList = files.listDir(dirPath);</span><br><span class="line">  <span class="keyword">var</span> len = fileNameList.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">    <span class="keyword">let</span> filepath = files.join(dirPath, fileNameList[i]);</span><br><span class="line">    <span class="keyword">if</span> (files.isFile(filepath)) {</span><br><span class="line">      filePathList.push(filepath);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 文件夹, 继续向下递  </span></span><br><span class="line">      getFilePathList(filepath, filePathList);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 文件遍历完成, 终止条件, 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> filePathList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置默认参数</span></span><br><span class="line"><span class="keyword">var</span> n= n || <span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有名函数表达式(在一个非函数块里声明一个函数)</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) {</span><br><span class="line">  <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自执行匿名函数 </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数(使用函数表达式（传递匿名函数）时)</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>相比于其他面向对象语言，JavaScript对象的构造函数比较特殊，它可以是任何一个普通的函数，而且无需在对象中定义。只有两个约定：<br>构造函数的命名通常以大写开头；<br>构造函数只能由new操作符执行；</p><p>当使用new调用一个函数时，这个函数就会变成构造函数<br>使用new调用函数后，函数是有返回值的，即使在定义函数时没有return语句。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xiaoming = <span class="keyword">new</span> People(<span class="string">'xiaoming'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单独运行一个匿名函数，由于不符合语法要求，报错啦！解决方法只需要给匿名函数包裹一个括号即可：</span></span><br><span class="line"><span class="comment">//匿名函数在其它应用场景括号可以省略</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">//由于没有执行该匿名函数，所以不会执行匿名函数体内的语句。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"张培跃"</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如果需要执行匿名函数，在匿名函数后面加上一个括号即可立即执行！</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"张培跃"</span>);</span><br><span class="line">})()</span><br></pre></td></tr></tbody></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.经典格式： 函数名 = ( 参数 ) =&gt; { 方法体 } </span></span><br><span class="line"><span class="keyword">const</span> sum3 = <span class="function">(<span class="params">x,y</span>)=&gt;</span>{ </span><br><span class="line">  <span class="keyword">return</span> x+y; </span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(sum3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.当方法体只有一行时，花括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> sum4 = <span class="function">(<span class="params">x,y</span>) =&gt;</span> x+y;  </span><br><span class="line"><span class="built_in">console</span>.log(sum4) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只有一个参数时，括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> sum4 = <span class="function"><span class="params">x</span> =&gt;</span> x+<span class="number">1</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(sum4) </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。<br>stringObject.split(separator,howmany) 方法用于把一个字符串分割成字符串数组。<br>    separator    必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>1.== 双等号 返回值只有true 和false 类型为布尔型，只比较左右的值，若相等则返回true，反之false<br>2.=== 全等号 返回值为true或false 若左右两边的值和类型均相等，则返回true，反之false<br>3.!= 不相等号 返回值为true或false 不比较类型，只比较值，若左边不等于右边则返回true，反正false</p><p>●  使用 === 和 !== 而非 == 和 !=，eslint: eqeqeq<br>●  条件声明例如 if 会用 ToBoolean 这个抽象方法将表达式转成布尔值并遵循如下规则<br>    Objects 等于 true<br>    Undefined 等于 false<br>    Null 等于 false<br>    Booleans 等于 布尔值<br>    Numbers 在 +0, -0, 或者 NaN 的情况下等于 false, 其他情况是 true<br>    Strings 为 ‘’ 时等于 false, 否则是 true  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果等于 ==</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>){toastLog(<span class="string">"正确"</span>)};</span><br><span class="line"><span class="comment">//如果 不等于 !=</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> != <span class="number">2</span>){toastLog(<span class="string">"正确"</span>)};</span><br><span class="line"><span class="comment">//如果 大于小于 &gt; &lt; 不举例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="literal">true</span>;b=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//如果真判断简写 正常写 if(a == true){ }</span></span><br><span class="line"><span class="keyword">if</span>(a){toastLog(<span class="string">"a=真"</span>)}</span><br><span class="line"><span class="comment">//如果假判断简写 正常写 if(b == false){ }</span></span><br><span class="line"><span class="keyword">if</span>(!b){toastLog(<span class="string">"b=假"</span>)}</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;&amp; = 并且</span></span><br><span class="line"><span class="keyword">if</span>( a==<span class="literal">true</span> &amp;&amp; b==<span class="literal">false</span> ){</span><br><span class="line">toastLog(<span class="string">"a为真-b为假"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// || = 或者</span></span><br><span class="line"><span class="keyword">if</span>( a==<span class="literal">false</span> || b==<span class="literal">false</span> ){</span><br><span class="line">toastLog(<span class="string">"a或者b其中为假"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="多重判断"><a href="#多重判断" class="headerlink" title="多重判断"></a>多重判断</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(){</span><br><span class="line"></span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(){</span><br><span class="line"></span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(){</span><br><span class="line"></span><br><span class="line">}<span class="keyword">else</span>()</span><br></pre></td></tr></tbody></table></figure><p><strong>Switch 语句</strong><br>计算一次 switch 表达式<br>把表达式的值与每个 case 的值进行对比<br>如果存在匹配，则执行关联代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(表达式) {</span><br><span class="line">     <span class="keyword">case</span> n:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> n:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        默认代码块</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1)</span><br><span class="line">{</span><br><span class="line">    当条件 <span class="number">1</span> 为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2)</span><br><span class="line">{</span><br><span class="line">    当条件 <span class="number">2</span> 为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">  当条件 <span class="number">1</span> 和 条件 <span class="number">2</span> 都不为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong>for语句</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">    被执行的代码块</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>for/in - 循环遍历对象的属性</p><p><strong>while</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件)</span><br><span class="line">{</span><br><span class="line">    需要执行的代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>do/while</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">    需要执行的代码</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (条件);</span><br></pre></td></tr></tbody></table></figure><h2 id="js正则"><a href="#js正则" class="headerlink" title="js正则"></a>js正则</h2><p>autojspro不支持正则前向断言</p><h2 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h2><h3 id="CJS模块管理"><a href="#CJS模块管理" class="headerlink" title="CJS模块管理"></a>CJS模块管理</h3><p><strong>模块化</strong>主要是用于管理代码，解决解耦与复用问题<br>命名冲突，全局污染<br>模块内部逻辑的封装性隔离<br>模块之间的通讯（依赖引用、循环引用、引用顺序）</p><p>CJSCommonJS，主要用于服务器端如node.js，主要使用如下：</p><p><strong>CommonJS规范缺点</strong><br>CommonJS加载模块是同步的：同步的意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行。<br>这个在服务器不会有什么问题，因为服务器加载的js文件都是本地文件，加载速度非常快。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在模块文件中导出</span></span><br><span class="line"><span class="keyword">const</span> object = {</span><br><span class="line">    <span class="attr">HaoranOcrClick</span>: HaoranOcrClick,</span><br><span class="line">    <span class="attr">BdOcrClick</span>: BdOcrClick,</span><br><span class="line">};</span><br><span class="line"><span class="built_in">module</span>.exports = object;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在使用文件引入</span></span><br><span class="line"><span class="keyword">const</span> ocr = <span class="built_in">require</span>(<span class="string">"/sdcard/脚本/模块/ocr模块.js"</span>);</span><br><span class="line"><span class="comment">// "/storage/emulated/0/"</span></span><br><span class="line">ocr.HaoranOcrClick(<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="ESM"><a href="#ESM" class="headerlink" title="ESM"></a>ESM</h3><p>ESM是ESModule，是ECMAScript自己的模块体系，于ES6引入，基本上可以完全取代CJS和AMD。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出：export命令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = {<span class="attr">name</span>: <span class="string">'E1e'</span>}；</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 默认导出 export default命令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {<span class="attr">name</span>: <span class="string">'E1e'</span>};</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 引入接口：import命令</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 引入普通导出</span></span><br><span class="line"><span class="keyword">import</span> { obj } <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 引入默认导出</span></span><br><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><p>initXX：初始化相关方法，使用 init 为前缀标识，如初始化布局 initView<br>isXX：方法返回值为 boolean 型的请使用 is 或 check 为前缀标识<br>getXX：返回某个值的方法，使用 get 为前缀标识，例如 getName<br>setXX：设置某个属性值，使用 set 为前缀标识，例如 setName<br>handleXX/processXX：对数据进行处理的方法，例如 handleMessage<br>displayXX/showXX：弹出提示框和提示信息，例如 showDialog<br>updateXX：更新某个东西，例如 updateData<br>saveXX：保存某个东西，例如 saveData<br>resetXX：重置某个东西，例如 resetData<br>clearXX：清除某个东西，例如 clearData<br>removeXX：移除数据或者视图等，例如 removeView<br>drawXX：绘制数据或效果相关的，使用 draw 前缀标识，例如 drawText</p><h3 id="避免单个字符名，让你的变量名有描述意义。"><a href="#避免单个字符名，让你的变量名有描述意义。" class="headerlink" title="避免单个字符名，让你的变量名有描述意义。"></a>避免单个字符名，让你的变量名有描述意义。</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="当命名对象、函数和实例时使用驼峰命名规则"><a href="#当命名对象、函数和实例时使用驼峰命名规则" class="headerlink" title="当命名对象、函数和实例时使用驼峰命名规则"></a>当命名对象、函数和实例时使用驼峰命名规则</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> OBJEcttsssss = {};</span><br><span class="line"><span class="keyword">var</span> this_is_my_object = {};</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">this</span>-is-my-object = {};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>{};</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user({</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> thisIsMyObject = {};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>{};</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User({</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h1 id="浏览器中运行js"><a href="#浏览器中运行js" class="headerlink" title="浏览器中运行js"></a>浏览器中运行js</h1><p>Chrome浏览器运行环境包括V8引擎，内置API<br>  V8引擎负责解析和执行js代码<br>  内置API是由运行环境提供的特殊接口</p><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。电脑安装了Node.js后， Node.js 相当于浏览器，也可以在里面运行 JavaScript 了！</p><h2 id="Nodejs的组成："><a href="#Nodejs的组成：" class="headerlink" title="Nodejs的组成："></a>Nodejs的组成：</h2><p>ECMAScript(语言基础，如：语法、数据类型结构以及一些内置对象)</p><p>os(操作系统)</p><p>file(文件系统)</p><p>net(网络系统)</p><p>database(数据库)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://nodejs.org/en/">Node.js下载地址</a></p><p>打开cmd输入命令检查是否安装成功：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v  #查看node版本</span><br><span class="line">npm -v   #查看npm版本</span><br></pre></td></tr></tbody></table></figure><p>Node.js 安装成功时也默认安装了 npm， npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。是用来安装/卸载Node.js需要装的东西</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>1.修改全局模块路径和缓存路径<br>当我们在执行<code>npm install express -g</code>命令时，会默认下载到c盘，更改下载盘<br>在nodejs安装目录下创建创建两个文件夹，名称分别为：node_global(全局模块)和node_cache(缓存)，在node_global文件夹下再建一个node_modules文件夹，配置环境变量用</p><p>2.win+R打开运行窗口，输入cmd，再输入以下两条指令<br>npm config set prefix “创建的node_global文件夹所在路径”<br>npm config set cache “创建的node_cache文件夹所在路径”</p><p>3.修改完毕后，再配置环境变量<br>右键此电脑——&gt;高级系统设置——&gt;环境变量<br>在系统变量中，新建，变量名：NODE_PATH<br>变量值：node_global文件夹下的node_modules文件夹。如：E:\develop\nodejs\node_global\node_modules</p><p>修改用户变量中的Path变量，将默认的npm路径修改为新建的node_global路径<br>如：D:\ruanjian\nodejs\node_global</p><h2 id="nodejs执行js代码"><a href="#nodejs执行js代码" class="headerlink" title="nodejs执行js代码"></a>nodejs执行js代码</h2><h3 id="命令行运行nodejs文件"><a href="#命令行运行nodejs文件" class="headerlink" title="命令行运行nodejs文件"></a>命令行运行nodejs文件</h3><p>打开命令行窗口，把当前目录切换到.js所在目录  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 文件名.js</span><br></pre></td></tr></tbody></table></figure><h3 id="vscode搭建node开发环境"><a href="#vscode搭建node开发环境" class="headerlink" title="vscode搭建node开发环境"></a>vscode搭建node开发环境</h3><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><a href="https://yafine-blog.cn/posts/8094.html">参考</a><br>npm (node package manager) 是 JavaScript 世界的包管理工具，是 Node.js 平台的默认包管理工具，简单地说，就是通过 npm 下载模块，复用已有的代码，提高工作效率。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>npm 由三个独立的部分组成：</p><ul><li>网站</li><li>注册表（registry）</li><li>命令行工具 (CLI)</li></ul><p><a href="https://www.npmjs.com/">网站</a> 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。</p><p>注册表 是一个巨大的数据库，保存了每个包（package）的信息。</p><p>CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。<br> <a href="https://www.axihe.com/api/npm/api/api.html">npm中文文档</a> </p><h3 id="切换为-taobao-镜像源"><a href="#切换为-taobao-镜像源" class="headerlink" title="切换为 taobao 镜像源"></a>切换为 taobao 镜像源</h3><p>国内使用 npm 可能很慢。你可以考虑切换为 taobao 镜像源。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">npm uninstall</span><br><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">npm cache clean -f</span><br></pre></td></tr></tbody></table></figure><h2 id="cnpm-是什么？"><a href="#cnpm-是什么？" class="headerlink" title="cnpm 是什么？"></a>cnpm 是什么？</h2><p>简单的讲就是中国版的 NPM，因为 npm 安装插件是从国外服务器下载，受网络影响大，可能出现异常，<br>需要安装 cnpm 模块，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>cnpm 支持可以使用支持 npm 除 publish 之外的所有命令。</p><p>因为 cnpm 的仓库只是 npm 仓库的一个拷贝，它不承担 publish 工作，所以执行 cnpm publish 命令会失败的。</p><h2 id="yarn-是什么？"><a href="#yarn-是什么？" class="headerlink" title="yarn 是什么？"></a>yarn 是什么？</h2><p>Yarn 是一个软件包管理器，还可以作为项目管理工具，你可以通过它使用全世界开发者的代码， 或者分享自己的代码。</p><p>从 npm 安装软件包并保持相同的包管理流程。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>1.速度超快。<br>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p>2.超级安全<br>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p><p>3.超级可靠<br>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。<br>通过命令安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></tbody></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>yarn init：初始化项目，会在根目录下生成一个 package.json，与 npm 类似具体不做解释</p><p>yarn add <package name="">：安装依赖包，会自动安装最新版本，会覆盖指定版本号</package></p><p>yarn add <package name1=""> <package name1="">：一次性添加多个包</package></package></p><p>yarn add <package name="">@version：添加指定版本的包</package></p><p>yarn upgrade <package name="">@version：将包更新到指定版本</package></p><p>yarn upgrade –latest <package name="">：将包更新到最新版本</package></p><p>yarn remove <package name="">：删除包</package></p><p>yarn remove <package name1=""> <package name2="">：一次性删除多个包</package></package></p><p>yarn info <packagename> ：可以用来查看某个模块的最新版本信息</packagename></p><p>yarn install：安装 package.json 里所有包，并将包及它的所有依赖项保存进 yarn.lock</p><p>yarn install –force ：强制重新下载所有包</p><p>yarn install –flat：安装一个包的单一版本</p><p>yarn install –production：只安装 dependencies 里的包</p><p>yarn install –no-lockfile：不读取或生成 yarn.lock</p><p>yarn install –pure-lockfile：不生成 yarn.lock</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>安装npm模块时，没有权限<br>解决方法：打开nodejs安装目录的属性把权限全部勾上 </p><p>npm的包安装分为本地安装（local）、全局安装（global）两种<br> 本地安装: npm install xxx 安装到命令行所在目录的node_module目录。<br> 全局安装: npm install xxx -g 安装到 \AppData\Roaming\npm\node_modules目录。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机原理</title>
      <link href="/2022/051717870.html"/>
      <url>/2022/051717870.html</url>
      
        <content type="html"><![CDATA[<h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><h2 id="二进制、八进制和十六进制向十进制转换"><a href="#二进制、八进制和十六进制向十进制转换" class="headerlink" title="二进制、八进制和十六进制向十进制转换"></a>二进制、八进制和十六进制向十进制转换</h2><p>按权相加<br>将八进制数字 53627 转换成十进制：<br>53627 = 5×84 + 3×83 + 6×82 + 2×81 + 7×80 = 22423（十进制）<br>从右往左看，第1位的位权为 80=1，第2位的位权为 81=8，第3位的位权为 82=64，第4位的位权为 83=512，第5位的位权为 84=4096 …… 第n位的位权就为 8n-1。将各个位的数字乘以位权，然后再相加，就得到了十进制形式。</p><p>注意，这里我们需要以十进制形式来表示位权。</p><h2 id="十进制转二进制、八进制和十六进制"><a href="#十进制转二进制、八进制和十六进制" class="headerlink" title="十进制转二进制、八进制和十六进制"></a>十进制转二进制、八进制和十六进制</h2><p><a href="https://blog.csdn.net/final__static/article/details/89405945">https://blog.csdn.net/final__static/article/details/89405945</a><br>方法为：十进制数除2取余法，即十进制数除2，余数为权位上的数，得到的商值继续除，直到商为0为止。<br>余数从下往上开始读即为所求进制数</p><p>注意16进制A<del>F表示10</del>15</p><h1 id="路径相关"><a href="#路径相关" class="headerlink" title="路径相关"></a>路径相关</h1><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。</p><h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p><p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，</p><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><h1 id="图像相关"><a href="#图像相关" class="headerlink" title="图像相关"></a>图像相关</h1><p>我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。</p><table><thead><tr><th align="center">名称</th><th align="center">RGBA值</th><th align="center">名称</th><th align="center">RGBA值</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">(255, 255, 255, 255)</td><td align="center">Red</td><td align="center">(255, 0, 0, 255)</td></tr><tr><td align="center">Green</td><td align="center">(0, 255, 0, 255)</td><td align="center">Blue</td><td align="center">(0, 0, 255, 255)</td></tr><tr><td align="center">Gray</td><td align="center">(128, 128, 128, 255)</td><td align="center">Yellow</td><td align="center">(255, 255, 0, 255)</td></tr><tr><td align="center">Black</td><td align="center">(0, 0, 0, 255)</td><td align="center">Purple</td><td align="center">(128, 0, 128, 255)</td></tr></tbody></table><ol start="2"><li>像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/2022/050513105.html"/>
      <url>/2022/050513105.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a></p><p>正则表达式是一种工具<br>验证字符串是否与指定模式匹配(例如，字符串具有电子邮件地址的格式)<br>在字符串中执行替换(例如，将所有美国拼写更改为英国拼写)。</p><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.匹配除换行符 (\n)以外的任意字符</span><br><span class="line">\w匹配字母或数字或下划线或汉字</span><br><span class="line"></span><br><span class="line">\b匹配单词的开始或结束，只匹配一个位置。</span><br><span class="line"></span><br><span class="line">"/" 是表达式开始和结束的标记</span><br><span class="line"></span><br><span class="line">^ 脱字符表示字符串的开始</span><br><span class="line">$表示字符串的结束</span><br><span class="line">\w匹配字母/数字/下划线</span><br><span class="line">\W匹配非字母/非数字/非下划线</span><br><span class="line">[]匹配来自括号内字符集的任意单一字符</span><br><span class="line">[^]匹配不在字符集中的任意单一字符，^在[]表示取反</span><br><span class="line">\d匹配数字</span><br><span class="line">\s匹配空白字符（包括\r、\n、\t等）</span><br></pre></td></tr></tbody></table></figure><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*重复零次或更多次</span><br><span class="line">+重复一次或更多次</span><br><span class="line">?重复零次或一次</span><br><span class="line">{n}重复n次</span><br><span class="line">{n,}重复n次或更多次</span><br><span class="line">{n,m}重复n到m次</span><br></pre></td></tr></tbody></table></figure><p>当?    字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串<br>而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</p><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则<strong>圆括号被视为正则表达式中的分组。</strong></p></blockquote><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><strong>从高到底</strong><br>\    转义符<br>(), (?:), (?=), []    圆括号和方括号<br>*, +, ?, {n}, {n,}, {n,m}    限定符<br>^, $, \任何元字符、任何字符    定位点和序列（即：位置和顺序）<br>|    替换，”或”操作字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>从浏览器拷贝出来请求头后， 需要手动的一个个加引号和逗号。现在我们利用Pycharm来进行批量替换。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: read_mode=day; default_font=font2; locale=zh-CN; remember_user_token=W1231sxMzYwNzkwMF0sIiQyYSQxMSRnNVl5MWpmZ0JINXJVazFreXlzQ0V1IiwiMTU0MDI1NTAzNS4xMDE5NDAyIl0%3D--10326e210f857747d9a7c9ace127cab6cdf8d947e; Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1540276756,1540284104,1540301802,1540371744; _m7e_session=dbf3985c991afa4c90bb79228626ed6e; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1540453366; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%221663393b621590-01c145ebcced4d-8383268-2073600-1663393b62272c%22%2C%22%24device_id%22%3A%221663393b621590-01c145ebcced4d-8383268-2073600-1663393b62272c%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E8%87%AA%E7%84%B6%E6%90%9C%E7%B4%A2%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22https%3A%2F%2Fwww.baidu.com%2Flink%22%2C%22%24latest_referrer_host%22%3A%22www.baidu.com%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC%22%2C%22%24latest_utm_source%22%3A%22desktop%22%2C%22%24latest_utm_medium%22%3A%22not-signed-in-like-button%22%2C%22%24latest_utm_campaign%22%3A%22maleskine%22%2C%22%24latest_utm_content%22%3A%22note%22%7D%2C%22first_id%22%3A%22%22%7D</span><br><span class="line">Host: www.jianshu.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Referer: https://www.jianshu.com/c/068668542235</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">勾选Regex使用正则来对数据进行匹配批量修改</span><br><span class="line">//利用冒号做分割</span><br><span class="line">正则表达式：(.*?): ?(.*)</span><br><span class="line">//给冒号两边的数据都加上单引号， 并且在末尾增加逗号</span><br><span class="line">//$1表示第一组</span><br><span class="line">需要替换成：'$1':'$2',    </span><br></pre></td></tr></tbody></table></figure><h1 id="js的正则"><a href="#js的正则" class="headerlink" title="js的正则"></a>js的正则</h1><p>exec    一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。</p><p>matchAll    一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</p><p>search    一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。</p><p>replace    一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</p><p>split    一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</p><h2 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a>match()方法</h2><p>stringObj.match(regExp)<br>一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。<br>    stringObj是必选项，对其进行查找的string对象或字符串文字；<br>    regExp是必选项，为包含正则表达式模式和可用标志的正则表达式对象。</p><h2 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h2><p>一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。<br>RegExpObject.test(string)<br>    string是必需。要检测的字符串。</p><h1 id="python的re正则模块"><a href="#python的re正则模块" class="headerlink" title="python的re正则模块"></a>python的re正则模块</h1><p>Python提供了re模块来支持正则表达式相关操作</p><h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><p>pattern : 一个字符串形式的正则表达式 </p><p>string : 要匹配的内容</p><p>flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：<br>  re.I 忽略大小写<br>  re.L 表示特殊字符集 w, W, 方形, B, s, S 依赖于当前环境<br>  re.M 多行模式<br>  re.S 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）<br>  re.U 表示特殊字符集 w, W,方形, B, d, D, s, S 依赖于 Unicode 字符属性数据库<br>  re.X 为了增加可读性，忽略空格和 # 后面的注释<br>如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p><h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h2><p>re.compile(pattern, flags=0)<br>将正则表达式转化为对象。需要和findall(), search(), match(）搭配使用</p><p>re.search(pattern, string)的调用方式就转换为 pattern.search(string)的调用方式，多次调用一个正则表达式就重复利用这个正则对象，可以实现更有效率的匹配   </p><h2 id="返回Match-object"><a href="#返回Match-object" class="headerlink" title="返回Match object"></a>返回Match object</h2><h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search()"></a>re.search()</h3><p>search(pattern, string, flags=0)<br>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象(Match object) 否则返回None<br>    pattern: 匹配的规则,<br>    string : 要匹配的内容<br>    flags : 可选，表示匹配模式，</p><h3 id="re-match"><a href="#re-match" class="headerlink" title="re.match()"></a>re.match()</h3><p>必须从字符串开头匹配,如果不是起始位置匹配成功的话，match()就返回none<br>    match函数的第一个参数是正则表达式字符串或正则表达式对象<br>    第二个参数是要跟正则表达式做匹配的字符串对象   </p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名必须由字母、数字或下划线构成且长度在6~20个字符之间</span></span><br><span class="line">m1 = re.match(<span class="string">r'^[0-9a-zA-Z_]{6,20}$'</span>, username)</span><br><span class="line"><span class="comment"># QQ号是5~12的数字且首位不能为0</span></span><br><span class="line">m2 = re.match(<span class="string">r'^[1-9]\d{4,11}$'</span>, qq)</span><br><span class="line">```   </span><br><span class="line">&gt; **提示：** 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\\\，例如表示数字的\\d得书写成\\\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</span><br><span class="line"></span><br><span class="line"><span class="comment">### re.fullmatch()  </span></span><br><span class="line">re.fullmatch(pattern, string, flags=<span class="number">0</span>)        </span><br><span class="line"> match函数的完全匹配（从字符串开头到结尾）版本   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### .group()</span></span><br><span class="line">```py</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"abc123def"</span></span><br><span class="line">rex_compile = re.<span class="built_in">compile</span>(<span class="string">"([a-z]*)([0-9]*)([a-z]*)"</span>)</span><br><span class="line">rex = rex_compile.search(content)</span><br><span class="line"><span class="built_in">print</span>(rex.group(<span class="number">0</span>))  <span class="comment"># group()和group(0) 一样匹配的是整体</span></span><br><span class="line"><span class="built_in">print</span>(rex.group(<span class="number">1</span>))  <span class="comment"># 匹配第一个小括号的内容  abc</span></span><br><span class="line"><span class="built_in">print</span>(rex.group(<span class="number">2</span>))  <span class="comment"># 匹配第二个小括号的内容   123</span></span><br></pre></td></tr></tbody></table></figure><h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><p>findall(pattern, string, flags=0)<br>查找字符串所有与正则表达式匹配的模式 返回字符串的列表  </p><h2 id="finditer-pattern-string-flags-0"><a href="#finditer-pattern-string-flags-0" class="headerlink" title="finditer(pattern, string, flags=0)"></a>finditer(pattern, string, flags=0)</h2><p>函数re.finditer与re.findall做同样的事情，只是它返回一个迭代器，而不是列表。<br>查找字符串所有与正则表达式匹配的模式 返回一个迭代器    </p><h2 id="split-pattern-string-maxsplit-0-flags-0"><a href="#split-pattern-string-maxsplit-0-flags-0" class="headerlink" title="split(pattern, string, maxsplit=0, flags=0)"></a>split(pattern, string, maxsplit=0, flags=0)</h2><p>用正则表达式指定的模式分隔符拆分字符串 返回列表        </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分长字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[，。, .]'</span>, poem)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)</span><br><span class="line">        <span class="comment"># 删除列表中的空字符串</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)  <span class="comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>re.sub(pattern, repl, string, count=0, flags=0)<br>用指定的字符串替换原字符串中与正则表达式匹配的模式 </p><p>  pattern : 正则中的模式字符串。<br>  repl : 替换的字符串，也可为一个函数。<br>  string : 要被查找替换的原始字符串。<br>  count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。<br>  flags : 编译时用的匹配模式，数字形式。</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h3 id="查找字符串中有多少个af"><a href="#查找字符串中有多少个af" class="headerlink" title="查找字符串中有多少个af"></a>查找字符串中有多少个af</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找字符串中有多少个af</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">s = <span class="string">"asdfjvjadsffvaadfkfasaffdsasdffadsafafsafdadsfaafd"</span></span><br><span class="line"> </span><br><span class="line">ret = re.findall(<span class="string">r'(af)'</span> , s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ret))</span><br><span class="line">```  </span><br><span class="line"><span class="comment">### 提取国内手机号码。</span></span><br><span class="line">```Python, </span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r'(?&lt;=\D)1[34578]\d{9}(?=\D)'</span>)</span><br><span class="line">    sentence = <span class="string">'''</span></span><br><span class="line"><span class="string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span></span><br><span class="line"><span class="string">    不是15600998765，也不是110或119，是不是13512346789，王大锤的手机号才是15600998765。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'查找所有匹配并保存到一个列表中'</span>)</span><br><span class="line">    mylist = re.findall(pattern, sentence)</span><br><span class="line">    <span class="built_in">print</span>(mylist)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'--------通过迭代器取出匹配对象并获得匹配的内容--------'</span>)</span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> pattern.finditer(sentence):</span><br><span class="line">        <span class="built_in">print</span>(temp.group())</span><br><span class="line">    <span class="comment"># 搜索字符串中第一次出现正则表达式的模式 </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'--------通过search函数指定搜索位置找出所有匹配--------'</span>)</span><br><span class="line">    m = pattern.search(sentence)</span><br><span class="line">    <span class="keyword">while</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m.group())</span><br><span class="line">        m = pattern.search(sentence, m.end())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d{9}|14[57]\d{8}|15[0-35-9]\d{8}|17[678]\d{8})(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h3 id="替换字符串中的不良内容"><a href="#替换字符串中的不良内容" class="headerlink" title="替换字符串中的不良内容"></a>替换字符串中的不良内容</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    sentence = <span class="string">'你丫是傻叉吗? 我操你大爷的. Fuck you.'</span></span><br><span class="line">    purified = re.sub(<span class="string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,</span><br><span class="line">                      <span class="string">'*'</span>, sentence, flags=re.IGNORECASE)</span><br><span class="line">    <span class="built_in">print</span>(purified)  <span class="comment"># 你丫是*吗? 我*你大爷的. * you.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h3 id="按规则拆分长字符串"><a href="#按规则拆分长字符串" class="headerlink" title="按规则拆分长字符串"></a>按规则拆分长字符串</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[，。, .]'</span>, poem)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)</span><br><span class="line">        <span class="comment"># 删除列表中的空字符串</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)  <span class="comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h1 id="正则表达式在线工具"><a href="#正则表达式在线工具" class="headerlink" title="正则表达式在线工具"></a>正则表达式在线工具</h1><p><a href="https://c.runoob.com/front-end/854/">https://c.runoob.com/front-end/854/</a></p><p><a href="https://deerchao.cn/tools/wegester/">https://deerchao.cn/tools/wegester/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-SQLite</title>
      <link href="/2022/042334747.html"/>
      <url>/2022/042334747.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h1><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库不一样，您不需要在系统中配置。</p><h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><h3 id="Insert-语句"><a href="#Insert-语句" class="headerlink" title="Insert 语句"></a>Insert 语句</h3><h3 id="Delete-语句"><a href="#Delete-语句" class="headerlink" title="Delete 语句"></a>Delete 语句</h3><h3 id="Update-语句"><a href="#Update-语句" class="headerlink" title="Update 语句"></a>Update 语句</h3><h3 id="Select-语句"><a href="#Select-语句" class="headerlink" title="Select 语句"></a>Select 语句</h3><h2 id="SQLite-Python接口"><a href="#SQLite-Python接口" class="headerlink" title="SQLite - Python接口"></a>SQLite - Python接口</h2><p>SQLite3 可使用 sqlite3 模块与 Python 进行集成</p><h3 id="connection对象"><a href="#connection对象" class="headerlink" title="connection对象"></a>connection对象</h3><p>sqlite3.connect(database [,timeout ,other optional arguments])<br>返回一个连接对象。<br><strong>connection对象方法</strong><br>close()    关闭数据库连接<br>commit()    提交事务<br>rollback()    回滚数据库事务<br>cursor()    获得cursor游标对象</p><h3 id="cursor游标对象"><a href="#cursor游标对象" class="headerlink" title="cursor游标对象"></a>cursor游标对象</h3><p>connection.cursor([cursorClass])</p><p><strong>游标对象方法</strong><br>cursor.execute(sql [, optional parameters])<br>cursor.executemany(sql, seq_of_parameters)<br>cursor.executescript(sql_script)</p><p>cursor.fetchone()<br>返回结果集的下一行(Row对象)，返回一个序列，无数据时，则返回 None。</p><p>cursor.fetchmany([size=cursor.arraysize])<br>返回结果集的多行(Row对象列表)，返回一个列表。无数据时，则返回一个空的列表。该方法尝试获取由 size 参数指定的尽可能多的行。</p><p>cursor.fetchall()<br>返回结果集中所有（剩余）的行(Row对象列表)，返回一个列表。无数据时，则返回一个空的列表。</p><h3 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"数据库打开成功"</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line">c.execute(<span class="string">'''CREATE TABLE COMPANY</span></span><br><span class="line"><span class="string">       (ID INT PRIMARY KEY     NOT NULL,</span></span><br><span class="line"><span class="string">       NAME           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">       AGE            INT     NOT NULL,</span></span><br><span class="line"><span class="string">       ADDRESS        CHAR(50),</span></span><br><span class="line"><span class="string">       SALARY         REAL);'''</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"数据表创建成功"</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></tbody></table></figure><h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">cursor.execute(<span class="string">'CREATE TABLE [exam] ([question] VARCHAR(80)  NULL,[Answer_A] VARCHAR(1)  NULL,[Answer_B] VARCHAR(1)  NULL,[Answer_C] VARCHAR(1)  NULL,[Answer_D] VARCHAR(1)  NULL,[right_Answer] VARCHAR(1)  NULL)'</span>)</span><br><span class="line"><span class="comment">#插入一条数据</span></span><br><span class="line">cursor.execute(<span class="string">"insert into exam (question, Answer_A,Answer_B,Answer_C,Answer_D,right_Answer) values ('哈雷慧星的平均周期为', '54年', '56年', '73年', '83年', 'C')"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入SQLite驱动:</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">path=<span class="string">'test.db'</span></span><br><span class="line">conn = sqlite3.connect(path) <span class="comment"># 建立数据库连接，返回一个连接对象。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"连接<span class="subst">{path}</span>数据库成功"</span>)</span><br><span class="line">cursor = conn.cursor()  <span class="comment">#创建游标对象</span></span><br><span class="line"></span><br><span class="line">cursor.close()  <span class="comment"># 关闭Cursor:</span></span><br><span class="line">conn.commit()   <span class="comment"># 提交事务:</span></span><br><span class="line">conn.close()   <span class="comment"># 关闭Connection:</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web测试</title>
      <link href="/2022/04205354.html"/>
      <url>/2022/04205354.html</url>
      
        <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>抓包（packet capture）就是将网络传输发送与接收的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包也经常被用来进行数据截取等。抓包的目的就是为了获取到想要的原始数据，拿到数据以后，我们就可以做以下一些事情:  </p><ol><li><p>分析数据传输协议。 </p></li><li><p>定位网络协议的问题。 </p></li><li><p>从数据包中获取想要的信息。 </p></li><li><p>将截取到的数据包进行修改，伪造，重发。</p><h2 id="为什么抓包？"><a href="#为什么抓包？" class="headerlink" title="为什么抓包？"></a>为什么抓包？</h2></li><li><p>从功能测试角度，通过抓包查看隐藏字段</p></li></ol><p>Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。</p><ol start="2"><li>通过抓包工具了解协议内容，方便开展接口和性能测试</li></ol><p>性能测试方面，性能测试其实就是大量模拟用户的请求，所以我们必须要知道请求中的协议内容和特点，才能更好的模拟用户请求，分析协议就需要用到抓包工具；接口测试方面，在接口测试时，虽然我们尽量要求有完善的接口文档。但很多时候接口文档不可能覆盖所有的情况，或者因为文档滞后，在接口测试过程中，还时需要借助抓包工具来辅助我们进行接口测试。</p><ol start="3"><li>需要通过抓包工具，检查数据加密</li></ol><p>安全测试方面，我们需要检查敏感数据在传输过程中是否加密，也需要借助抓包工具才能检查。</p><ol start="4"><li>处理前后端 bug 归属之争</li></ol><p>在我们提交bug的时候，经常会出现前端（客户端展示）和后端（服务端的逻辑）的争议，那么可以通过抓包工具，确实是数据传递问题还是前端显示的问题。如果抓出来的数据就有问题的话，那么一般是后端的问题；如果抓出来的数据是正确的，那么基本上可以断定是前端显示的问题。</p><ol start="5"><li>通过抓包分析，可以更好的理解整个系统</li></ol><p>经常使用抓包工具辅助测试，可以很好的了解整个系统，比如数据传输过程前后端的关系，以及整个系统的结构。特别是对现在的微服务架构的产品，抓包能够更好的梳理和掌握整个系统各个服务之间的关系，大大增加测试的覆盖度。另外还可以增进对代码、HTTP协议方面知识的理解。</p><h2 id="浏览器抓包"><a href="#浏览器抓包" class="headerlink" title="浏览器抓包"></a>浏览器抓包</h2><p>最简单的抓包工具——浏览器开发者工具</p><h1 id="开放api"><a href="#开放api" class="headerlink" title="开放api"></a>开放api</h1><h2 id="API-Hub"><a href="#API-Hub" class="headerlink" title="API Hub"></a>API Hub</h2><h1 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h1><h2 id="Apifox"><a href="#Apifox" class="headerlink" title="Apifox"></a>Apifox</h2><p>API 文档、API 调试、API Mock、API 自动化测试</p><p>和市面上的老牌调试工具Postman相比，Apifox毫不逊色——Postman支持的功能它都能支持，并且Apifox还提供了支持可视化断言，连接数据库，调用外部函数与脚本，支持多种语言，环境变量设置等功能，调试起来也很快捷方便。</p><h2 id="postman接口测试"><a href="#postman接口测试" class="headerlink" title="postman接口测试"></a>postman接口测试</h2><p>responseCode ：包含请求的返回的状态信息(如：code)<br>responseBody：为接口请求放回的数据内容（类型为字符串）<br>tests ：为键值对形式，用于表示我们的测试结果是成功与否，最终展示在 Test Results 中。<br>key ：（如：code 200）我们可以用来当做结果的一个描述<br>value：其值为布尔型，ture 表示测试通过， false 表示测试失败。<br>所以上述代码应该不难理解了，而有了返回结果的数据以及表示结果成功与否</p><h2 id="预请求脚本-Pre-request-Script"><a href="#预请求脚本-Pre-request-Script" class="headerlink" title="(预请求脚本)Pre-request Script"></a>(预请求脚本)Pre-request Script</h2>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-redis</title>
      <link href="/2022/041918402.html"/>
      <url>/2022/041918402.html</url>
      
        <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>Redis 是键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><h1 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h1><h2 id="安装-Redis的docker环境"><a href="#安装-Redis的docker环境" class="headerlink" title="安装 Redis的docker环境"></a>安装 Redis的docker环境</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要确保docker环境已经安装成功</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">docker search redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取最新版本</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d：使用指定的镜像在后台运行容器，（使用守护进程运行）通过 docker ps查看不到的。因为在 docker 中，后台服务必须要有一个前台服务才能运行（前台服务即使用 -it 选项启动的服务）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -it 表示已交互模式运行容器,为容器重新分配一个伪输入终端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 6379:6379 将容器的6379端口映射到主机的6379端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name=<span class="string">"myredis"</span> 表示自定义容器名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --requirepass <span class="string">"root"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v /docker/redis/data:/data: 将主机中当前目录下的data挂载到容器的/data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis-server : 在容器执行redis-server启动命令，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --appendonly yes  打开redis持久化配置</span></span><br><span class="line">docker run -d redis:latest -p 6379:6379  redis-server --appendonly yes --name="myredis" --requirepass "root"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker start 容器名或容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis容器并启动一个redis交互式会话</span></span><br><span class="line">docker exec -it redis容器名 /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在redis交互式会话中连接 redis 服务</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理容器(停止 docker-redis 容器并删除)：</span></span><br><span class="line"></span><br><span class="line">docker stop redis容器名</span><br><span class="line">docker rm redis容器名</span><br></pre></td></tr></tbody></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis-cli  #在redis交互式会话中连接 redis 服务</span><br><span class="line"></span><br><span class="line">config get requirepass  #查看现有的redis密码</span><br><span class="line"></span><br><span class="line">config set requirepass pass_123456 #设置redis密码</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习</title>
      <link href="/2022/040423525.html"/>
      <url>/2022/040423525.html</url>
      
        <content type="html"><![CDATA[<p>学习框架首先要先了解它是干什么的，然后了解它的项目结构即每个文件有什么用</p><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><p>springboot是一个用来简化spring应用的初始搭建以及开发过程的框架<br>简化依赖配置，简化常用工程相关配置，内置服务器</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>1.通过idea创建，可以更改成阿里云镜像服务：<a href="https://start.aliyun.com/">https://start.aliyun.com</a><br>spring默认服务器：<a href="https://start.spring.io/">https://start.spring.io</a></p><p>2.若idea不能联网，通过spring boot官网创建</p><h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><h3 id="数据源与数据库连接池"><a href="#数据源与数据库连接池" class="headerlink" title="数据源与数据库连接池"></a>数据源与数据库连接池</h3><h4 id="什么是数据源？"><a href="#什么是数据源？" class="headerlink" title="什么是数据源？"></a>什么是数据源？</h4><p>JDBC2.0提供了javax.sql.DataSource接口，它负责建立与数据库的连接，当在应用程序中访问数据库时，不必编写连接数据库的代码，直接引用DataSource获取数据库的连接对象即可。用于获取操作数据的Connection对象。</p><h4 id="什么是数据库连接池？"><a href="#什么是数据库连接池？" class="headerlink" title="什么是数据库连接池？"></a>什么是数据库连接池？</h4><p>数据库连接池的思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。可通过设定连接池的最大连接数来防止系统无尽的与数据库连接。更重要的是我们可以通过连接池的管理机制监视数据库的连接的数量、使用情况，为系统开发、测试以及性能调整提供依据。</p><h4 id="数据源和数据库连接池的关系？"><a href="#数据源和数据库连接池的关系？" class="headerlink" title="数据源和数据库连接池的关系？"></a>数据源和数据库连接池的关系？</h4><p>数据源建立多个数据库连接，这些数据库连接将会保存在数据库连接池中，当需要访问数据库时，只需要从数据库连接池中获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。</p><h4 id="为什么要使用数据库连接池？"><a href="#为什么要使用数据库连接池？" class="headerlink" title="为什么要使用数据库连接池？"></a>为什么要使用数据库连接池？</h4><p>传统的JDBC访问数据库技术，每次访问数据库都需要通过数据库驱动器Driver和数据库名称以及密码等等资源建立数据库连接。</p><p>如此就会存在两大问题：</p><p>频繁的建立与断开数据库连接，会降低执行效率，增加系统资源的开销。<br>数据库的连接需要用户名和密码等资源，这些也需要一定的内存和CPU的开销。<br>而数据库连接池很好地解决了这些问题。</p><h3 id="加载依赖"><a href="#加载依赖" class="headerlink" title="加载依赖"></a>加载依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><p>数据库框架：Mybatis Plus &gt; Mybatis<br>代码生成器：Mybatis Plus Generator &gt; Mybatis Generator</p><p>Mybatis Plus 针对单表的基本CRUD操作，只需要创建好实体类，并创建一个继承自BaseMapper的接口即可，可谓非常简洁。并且，我们注意到，User类中的managerId，createTime属性，自动和数据库表中的manager_id，create_time对应了起来，这是因为mp自动做了数据库下划线命名，到Java类的驼峰命名之间的转化。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.导入依赖<br>2.配置application.yml<br>3.在数据库中创建表<br>4.在entity层根据数据库表创建相应实体类<br>5.在dao层创建对应mapper接口<br>6.在SpringBoot启动类上配置mapper接口的扫描路径<br>7.编写一个SpringBoot测试类</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml  </span></span><br><span class="line">   <span class="attr">spring:</span>  </span><br><span class="line">     <span class="attr">datasource:</span>  </span><br><span class="line">       <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  </span><br><span class="line">       <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?serverTimezone=Asia/Shanghai</span>  </span><br><span class="line">       <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">       <span class="attr">password:</span> <span class="string">root</span>  </span><br><span class="line">         </span><br><span class="line">   <span class="attr">mybatis-plus:</span>  </span><br><span class="line">     <span class="attr">configuration:</span>  </span><br><span class="line">       <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#开启SQL语句打印</span></span><br></pre></td></tr></tbody></table></figure><h3 id="mybatisplus分页工具类-IPage"><a href="#mybatisplus分页工具类-IPage" class="headerlink" title="mybatisplus分页工具类 IPage"></a>mybatisplus分页工具类 IPage</h3><h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p>最常用的用法就是在实体类中使用它的@Data注解，这样实体类就不用写set、get、toString等方法</p><p>@Data注解包含了 @ToString、@EqualsAndHashCode、@Getter / @Setter和@RequiredArgsConstructor的功能</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p>REST(Representational State Transfer),表现形式状态转换。它是一种针对网络应用的设计风格</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.隐藏资源的访问行为，无法通过地址得知对资源是何种操作<br>2.书写简化</p><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><p>根据REST风格对资源进行访问称为RESTful</p><h6 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h6><p>类型：类注解<br>位置：springMVC控制器类定义上方<br>作用：设置当前控制器类为RESTful风格，等同于@Controller + @ResponseBody两个注解组合功能</p><h6 id="请求动作映射"><a href="#请求动作映射" class="headerlink" title="请求动作映射"></a>请求动作映射</h6><p>名称：@GetMapping   @PostMapping  @PutMapping  @DeleteMapping<br>类型：方法注解<br>位置：基于SpringMVC的RESTful开发控制器方法定义上方<br>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求</p><h6 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h6><p>类型：形参注解<br>位置：springMVC控制器方法形参定义前面<br>作用：绑定路径参数与处理器方法形参间的关系</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>区别<br>@RequestParam用于接收url地址传参或表单传参<br>@RequestBody用于接收json数据<br>@PathVariable用于接收路径参数，使用{参数名称）描述路径参数</p><p>应用<br>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody,应用较广<br>如果发送非json格式数据，选用@RequestParam接收请求参数<br>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1.设定http请求动作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@ResponseBody</span> User user)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"user save"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'save'}"</span>;</span><br></pre></td></tr></tbody></table></figure><p>2.设定请求参数(路径变量)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径上要有参数占位{id}</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 在形参上加@PathVariable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"user save"</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'delete'}"</span>;</span><br></pre></td></tr></tbody></table></figure><p>controller调用service,service调用dao</p><h2 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h2><p>DAO(Data Access Object) 是数据访问层，也被称为mapper层。<br>即数据持久层，对数据做持久化操作。dao层的作用为访问数据库，向数据库发送sql语句，完成数据的增删改查任务。</p><p>使用mybatis-plus后不用写mapper.xml文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dao/接口名.java</span></span><br><span class="line"><span class="comment">// 定义数据层接口与映射配置，继承BaseMapper&lt;把实体类作为泛型传入&gt;</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;实体类&gt; </span>{       </span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="entity层"><a href="#entity层" class="headerlink" title="entity层"></a>entity层</h2><p>即数据库实体层，也被称为model层，pojo层，domain层存放的是实体类，属性值与数据库中的属性值保持一致。 实现set和get方法。</p><p>一般数据库一张表对应一个实体类，类属性同表字段一一对应</p><p>使用了 Lombok 简化代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entity:</span></span><br><span class="line"><span class="meta">@TableName(value = "user")</span>  <span class="comment">//value指定表名</span></span><br><span class="line"><span class="meta">@Date</span>     <span class="comment">//使用Lombok插件，这样实体类就不用写set、get、toString等方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">//value与数据库主键列名一致，若实体类属性名与表主键列名一致可省略value</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.AUTO)</span>  <span class="comment">//指定自增策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">     <span class="comment">//若没有开启驼峰命名，或者表中列名不符合驼峰规则，可通过该注解指定数据库表中的列名，exist标明数据表中有没有对应列</span></span><br><span class="line">    <span class="meta">@TableField(value = "last_name",exist = true)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">  </span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="业务层-service"><a href="#业务层-service" class="headerlink" title="业务层(service)"></a>业务层(service)</h2><p>业务层，service层的作用为完成功能设计。存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类(定义一个接口，然后再一个或多个类去实现),提供controller层调用的方法。调用dao层接口，接收dao层返回的数据，完成项目的基本功能设计。（也就是说对于项目中的功能的需求就是在这里完成的）</p><h4 id="快速开发方案"><a href="#快速开发方案" class="headerlink" title="快速开发方案"></a>快速开发方案</h4><p>使用MyBatisPlus提供有业务层通用接口(ISerivce<t>)与业务层通用实现类(ServiceImpl&lt;M,T&gt;)<br>在通用类基础上做功能重载或功能追加<br>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</t></p><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>在java内的项目包下 新建 service包（一般接口都放在其中） 然后再其中新建XXXService接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于mybatisplus快速开发，ctrl+o查看mp帮你重写或覆盖的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookService</span> <span class="keyword">extends</span> <span class="title">IService</span> &lt;实体类&gt;</span>{ }</span><br></pre></td></tr></tbody></table></figure><h4 id="创建接口实现类"><a href="#创建接口实现类" class="headerlink" title="创建接口实现类"></a>创建接口实现类</h4><p>service 包内 新建 impl 包（实现类全部在impl包内）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类</span></span><br><span class="line"><span class="comment">// extends ServiceImpl&lt;BookDao,Book&gt;  //传入两个泛型(dao层,实体类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IBookServiceImpl</span>  <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BookDao</span>,<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">IBookService</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><h4 id="单元测试类"><a href="#单元测试类" class="headerlink" title="单元测试类"></a>单元测试类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ke.bookm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wenke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BookServiceTestCasde</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 20:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceTestCase</span> </span>{</span><br><span class="line">    <span class="comment">// 接口有多个实现类时使用@Qualifier注解指定实现类：</span></span><br><span class="line">    <span class="comment">// @Qualifier("qualifierServiceImpl2")</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span></span>{</span><br><span class="line">        bookService.getById(<span class="number">4</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="控制器层-controller"><a href="#控制器层-controller" class="headerlink" title="控制器层(controller)"></a>控制器层(controller)</h2><p>表现层，控制器层，controller层的功能为请求和响应控制。controller层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端。</p><h3 id="Controller和-ResponseBody注解"><a href="#Controller和-ResponseBody注解" class="headerlink" title="@Controller和@ResponseBody注解"></a>@Controller和@ResponseBody注解</h3><p>在一个类上添加@Controller注解，表明了这个类是一个控制器类<br>在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面,若返回json等内容到页面，则需要加@ResponseBody注解</p><p>@ResponseBody表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径。<br>格式的转换是通过HttpMessageConverter中的方法实现的，因为它是一个接口，因此由其实现类完成转换。</p><h3 id="RestController-1"><a href="#RestController-1" class="headerlink" title="@RestController"></a>@RestController</h3><p>如果需要返回的是数据（如：JSON、XML或自定义的metatype等数据类型）时，@RestController完全等同于@Controller+@Responsebody<br>如果要求方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注@RestController，而不用在每个方法中标注@ResponseBody，简化了开发过程。但使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>@RequestMapping注解是用来映射请求的，即指明处理器可以处理哪些URL请求，该注解既可以用在类上，也可以用在方法上。</p><p>当使用@RequestMapping标记控制器类时，方法的请求地址是相对类的请求地址而言的；当没有使用@RequestMapping标记类时，方法的请求地址是绝对路径。</p><p>@RequestMapping的地址可以是url变量，并且通过@PathVariable注解获取作为方法的参数。也可以是通配符来筛选请求地址。</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p><p>在使用@Autowired时，首先在容器中查询对应类型的bean<br>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据<br>如果查询的结果不止一个，那么@Autowired会根据名称来查找。</p><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><p>@Override 注解是用来指定方法重写的，只能修饰方法并且只能用于方法重写，不能修饰其它的元素。它可以强制一个子类必须重写父类方法或者实现接口的方法。</p><h3 id="创建控制器类"><a href="#创建控制器类" class="headerlink" title="创建控制器类"></a>创建控制器类</h3><p>创建控制器类com.controller.UserController.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{ </span><br><span class="line">    <span class="comment">// 添加业务层对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;        </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="controller-utils"><a href="#controller-utils" class="headerlink" title="controller.utils"></a>controller.utils</h3><p>表现层数据一致性处理</p><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mp;  </span><br><span class="line">   <span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;  </span><br><span class="line">   <span class="keyword">import</span> org.springframework.boot.SpringApplication;  </span><br><span class="line">   <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  </span><br><span class="line">   <span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="comment">//    在SpringBoot启动类上配置mapper接口的扫描路径</span></span><br><span class="line">   <span class="meta">@MapperScan("com.example.mp.mappers")</span>  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplication</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">//        定义容器对象，并启动</span></span><br><span class="line">     SpringApplication.run(MybatisPlusApplication.class, args);  </span><br><span class="line">    }  </span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目<br>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot04JunitApplicationTests</span> </span>{</span><br><span class="line">    <span class="comment">//注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">"two..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>在官方文档里找到application.properties文件，可查看可修改的配置<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">官方文档</a></p><p>默认是application.properties，我们将application.properties改为application.yaml</p><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>后缀使用.yml或者.yaml都行</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>易阅读<br>易于脚本语言交互<br>以数据为核心，重数据轻格式</p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>大小写敏感<br>属性层级关系使用多行描述，每行结尾使用冒号结束<br>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格(不允许使用Tab键)<br>属性值前面添加空格(属性名与属性值之间使用冒号+空格作为分隔)<br>#表示注释<br>使用” “括住的内容可以使用转义字符</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>用$进行变量引用<br>path: c:\user\bin</p><p>temp: ${path}\temp</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h4><p>键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)</p><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><p>一组按次序排列的值，又称为序列(sequence) / 列表(list)</p><p>使用一个短横线加一个空格代表一个数组项：<br>hobby:</p><ul><li>Java<br>jdk</li><li>python<br>py<h4 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h4>(scalars)：单个的、不可再分的值</li></ul>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习</title>
      <link href="/2022/040312750.html"/>
      <url>/2022/040312750.html</url>
      
        <content type="html"><![CDATA[<h1 id="好用的网站"><a href="#好用的网站" class="headerlink" title="好用的网站"></a>好用的网站</h1><h2 id="CODEPEN"><a href="#CODEPEN" class="headerlink" title="CODEPEN"></a>CODEPEN</h2><p>CodePen 是一个基于 Web 的开发平台，允许用户在网页编写 HTML、CSS 和 JavaScript 等前端语言。并且它是实时可见的，这会使故障排除更加容易。开发人员和设计人员还可以与世界其他地方交换代码示例。</p><h2 id="Responsively"><a href="#Responsively" class="headerlink" title="Responsively"></a>Responsively</h2><p>这是一个基于开源项目的网站，它能够将各个设备屏幕展现在同一个页面上，能够让你非常方便的开发响应式网站，大幅提高前端开发的效率。</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML:（HyperText Markup Language）【超文本标记语言】<br>狭义的HTML指的是网页；<br>广义的HTML指的是前端技术（html,css,js,以及各种框架）——网页，移动端网页，小程序，公众号，移动端的app，快应用等。</p><p>HTML是一门标记语言，标记语言由一套标记标签组成，学习HTML，就是学习标签。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>HTML注释符号是以 &lt;– 开始以 –&gt; 结束的</p><h2 id="vscode编辑html"><a href="#vscode编辑html" class="headerlink" title="vscode编辑html"></a>vscode编辑html</h2><p>open in brower<br>按下快捷键ALT+B 即可在浏览器运行html</p><p>HTMLHint<br>错误提示</p><p>html snippets<br>常用html代码片段模板</p><p>live server<br>实时预览html文件</p><p>beautify<br>格式化代码工具，美化javascript，JSON，CSS，Sass，和HTML</p><h2 id="HTML文件的规范"><a href="#HTML文件的规范" class="headerlink" title="HTML文件的规范"></a>HTML文件的规范</h2><p>html文件以开始，以结尾，其他任何标签，需要写在和之间；<br>Html标签只包含两个子标签：head和body；<br>和网页设置相关的内容都写在head标签里；<br>需要显示的内容都写在body标签里；</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><code>由尖括号包裹单词构成，如：&lt;html&gt;，所以标签不可能以数字开头。</code><br>标签不区分大小写，但推荐小写。<br>标签也称为元素。</p><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单标签有两种写法：</span><br><span class="line">   写法一：只写开标签即可&lt;br&gt;</span><br><span class="line">   写法二：在开标签的结尾写一个/，如&lt;br/&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="双标签："><a href="#双标签：" class="headerlink" title="双标签："></a>双标签：</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开始标签又称开放标签<span class="tag">&lt;<span class="name">a</span>&gt;</span>标签体<span class="tag">&lt;/<span class="name">a</span>&gt;</span>结束标签又称闭合标签或关标签</span><br><span class="line">自闭合标签/单标签，如：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>，<span class="tag">&lt;<span class="name">br</span>&gt;</span>等</span><br></pre></td></tr></tbody></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>指向 w3school 的超链接：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>  &gt;</span>文字说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">rel：规定当前文档与被链接文档之间的关系。</span><br></pre></td></tr></tbody></table></figure><h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h2><p>表单数据可以作为 URL 变量（method=”get”）或者 HTTP post （method=”post”）的方式来发送。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个简单的 HTML 表单，包含两个文本输入框和一个提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_action.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">  First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> /&gt;</span></span><br><span class="line">  Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lname"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h3><p>action 属性规定当提交表单时，向何处发送表单数据。<br>method属性规定如何发送表单数据（表单数据发送到 action 属性所规定的页面）。</p><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p>input 标签用于搜集用户信息。<br>根据不同的 type 属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。<br><code>&lt;input type="表单元素的类型" name="名称" value="默认值" size="宽度"&gt; </code></p><h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>text    单行文本框    省略时默认就是text<br>password    密码框    输入时以点号显示，安全<br>redio    单选按钮    只能选择其中一个<br>checkbox    复选框    可以同时选择多个<br>submit    提交按钮    提交表单数据<br>reset    重置按钮    重置表单元素的初始值<br>image    图像按钮    可以使用图片作为按钮<br>button    普通按钮    默认情况下无功能<br>file    文件选择器    选择要上传的文件<br>hidden    隐藏域    在页面上不显示，但是会提交，可以用来存储数据</p><h4 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h4><p>placeholder属性提供可描述输入字段预期值的提示信息</p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="div标签中id、class属性的使用与区别"><a href="#div标签中id、class属性的使用与区别" class="headerlink" title="div标签中id、class属性的使用与区别"></a>div标签中id、class属性的使用与区别</h2><p>div用于标示块级元素，而span标示行内元素。</p><p>1、语法区别<br>id对应CSS是用样式选择符“#”（井号）；<br>class对应CSS是用样式选择符“.”(英文半角输入句号)。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p>对应CSS应该是：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>{...} </span><br><span class="line"><span class="selector-class">.abc</span>{...} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>id：在同一个页面，只可以被调用一次，在CSS里用“#”表示。<br>class：是类标签，在同一个页面可以调用无数次（没限制的），在CSS里用“.”表示。</p><h3 id="使用css"><a href="#使用css" class="headerlink" title="使用css"></a>使用css</h3><p>三种使用 CSS 的方法</p><p>外部 CSS<br>内部 CSS<br>行内 CSS</p><h3 id="外部-CSS"><a href="#外部-CSS" class="headerlink" title="外部 CSS"></a>外部 CSS</h3><p>外部样式表可以在任何文本编辑器中编写，并且必须以 .css 扩展名保存。<br>外部样式在 HTML 页面  部分内的 <link> 元素中进行定义：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p>CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。</p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器:"></a>id选择器:</h3><p>#id</p><p>id 名称不能以数字开头。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这条CSS 规则将应用于 id="para1" 的 HTML 元素 */</span></span><br><span class="line"><span class="selector-id">#para1</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器:"></a>类选择器:</h3><p>如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在此例中，所有带有 class="center" 的 HTML 元素将为红色且居中对齐： */</span></span><br><span class="line"><span class="selector-class">.center</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="CSS-通用选择器"><a href="#CSS-通用选择器" class="headerlink" title="CSS 通用选择器"></a>CSS 通用选择器</h4><p>通用选择器（*）选择页面上的所有的 HTML 元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面的 CSS 规则会影响页面上的每个 HTML 元素： */</span></span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="CSS-分组选择器"><a href="#CSS-分组选择器" class="headerlink" title="CSS 分组选择器"></a>CSS 分组选择器</h4><p>分组选择器选取所有具有相同样式定义的 HTML 元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="组合器选择器（根据它们之间的特定关系来选取元素）"><a href="#组合器选择器（根据它们之间的特定关系来选取元素）" class="headerlink" title="组合器选择器（根据它们之间的特定关系来选取元素）"></a>组合器选择器（根据它们之间的特定关系来选取元素）</h2><h2 id="伪类选择器（根据特定状态选取元素）"><a href="#伪类选择器（根据特定状态选取元素）" class="headerlink" title="伪类选择器（根据特定状态选取元素）"></a>伪类选择器（根据特定状态选取元素）</h2><h2 id="伪元素选择器（选取元素的一部分并设置其样式）"><a href="#伪元素选择器（选取元素的一部分并设置其样式）" class="headerlink" title="伪元素选择器（选取元素的一部分并设置其样式）"></a>伪元素选择器（选取元素的一部分并设置其样式）</h2><h2 id="属性选择器（根据属性或属性值来选取元素）"><a href="#属性选择器（根据属性或属性值来选取元素）" class="headerlink" title="属性选择器（根据属性或属性值来选取元素）"></a>属性选择器（根据属性或属性值来选取元素）</h2><h2 id="css基础属性"><a href="#css基础属性" class="headerlink" title="css基础属性"></a>css基础属性</h2><h3 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h3><p>color<br>font-size<br>text-decoration<br>text-align</p><h3 id="尺寸类"><a href="#尺寸类" class="headerlink" title="尺寸类"></a>尺寸类</h3><p>width<br>height</p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>background-color<br>background-image<br>background-size:cover</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h3><h4 id="CSS-Overview"><a href="#CSS-Overview" class="headerlink" title="CSS Overview"></a>CSS Overview</h4><p>在 Chrome 的管理面板中，开启CSS Overview面板之后，就可以查看当前网站的样式信息了，包括颜色信息、字体信息、媒体查询等</p><p>1.在任意页面打开 Chrome 浏览器的 DevTools；<br>2.单击更多选项 -&gt; More tools -&gt; CSS Overview。</p><h4 id="新的字体编辑器工具"><a href="#新的字体编辑器工具" class="headerlink" title="新的字体编辑器工具"></a>新的字体编辑器工具</h4><p>Chrome DevTools 提供了一个实验性的字体编辑器工具，可以用来改变字体设置。可以用它来改变字体、大小、粗细、行高、字符间距，并实时看到变化</p><p>1.在任意页面打开 Chrome 浏览器的 DevTools；<br>2.点击右上角设置图标 -&gt; 选中左侧 Experiments -&gt; 勾选 Enable New Font Editor Tools within Styles Pane；<br>3.重启浏览器的 DevTools；<br>4.选择HTML元素，其中包括想改变的字体，点击字体图标即可。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript是一种轻量级的脚本语言。</p><p>JavaScript 插入 HTML 页面后，由浏览器执行。JavaScript 控制了网页的行为</p><p>推荐<a href="https://www.w3school.com.cn/js/index.asp">w3school</a>或者<a href="https://www.runoob.com/js/js-tutorial.html">runoob</a></p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Gates"</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">"Porsche"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> x = {<span class="attr">firstName</span>:<span class="string">"Bill"</span>, <span class="attr">lastName</span>:<span class="string">"Gates"</span>};    <span class="comment">// 对象</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 [ n, m ) 范围内的随机数（大于等于n，小于m）</span></span><br><span class="line"><span class="comment">// var random = Math.random()*(m-n)+n</span></span><br><span class="line">    a=<span class="built_in">Math</span>.random()*<span class="number">5</span>+<span class="number">1</span></span><br><span class="line">    toastLog (a)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 生成 [ min, max ] 范围内的随机整数（大于等于min，小于等于max）</span></span><br><span class="line"><span class="comment">// var random =Math.floor(Math.random()*(max-min+1))+min</span></span><br><span class="line">    b=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(<span class="number">5</span>))+<span class="number">1</span></span><br><span class="line">    toastLog(b)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>在字符串中换行，需要加一个反斜杠(非ECMAScript标准）：</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello \</span></span><br><span class="line"><span class="string">Kitty!"</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>String</code>和<code>Number</code>相加时，会将数字转为字符串；<code>String</code>和<code>Number</code>相减时，会将字符串转为数字；</p></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript 对象是变量的容器。但是，我们通常认为 “JavaScript 对象是键值对的容器”。<br>对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 name:value 对呈现。<br>总结：JavaScript 对象是属性和方法的容器。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = {<span class="attr">name</span>:<span class="string">"Fiat"</span>, <span class="attr">model</span>:<span class="number">500</span>, <span class="attr">color</span>:<span class="string">"white"</span>};</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>null</code>：类型是对象，不存在的事物。</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>            <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>             <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4><p>键值对在 JavaScript 对象通常称为 对象属性。<br>访问对象属性<br>你可以通过两种方式访问对象属性:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>person.lastName;</span><br><span class="line"><span class="number">2.</span>person[<span class="string">"lastName"</span>];</span><br></pre></td></tr></tbody></table></figure><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><pre><code><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以通过person.firstName="..."的方式初始化</span></span><br><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">"Bill"</span>,</span><br><span class="line"><span class="attr">lastName</span> : <span class="string">"Gates"</span>,</span><br><span class="line"><span class="attr">id</span>       : <span class="number">678</span>,</span><br><span class="line"><span class="attr">fullName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{   <span class="comment">//成员函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">" "</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></code></pre><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>脚本放置 HTML 的  或  部分中，或者同时存在于两个部分中。位于<script> 与 </script> 标签之间。</p><p>也可以把脚本保存到外部文件中，在 <script> 标签的 "src" 属性中设置该 .js 文件：</p><h1 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h1><p><a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的html文档。</p><p>将模板设计好之后直接填充数据即可而不需要重新设计整个页面。让网站实现界面和数据分离，提高页面、代码的复用性。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎</p><p>特点<br>1.动静分离： Thymeleaf选用html作为模板页，这是任何一款其他模板引擎做不到的！Thymeleaf使用html通过一些特定标签语法代表其含义，但并未破坏html结构，即使无网络、不通过后端渲染也能在浏览器成功打开，大大方便界面的测试和修改。</p><p>2.开箱即用： Thymeleaf提供标准和Spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p><p>3.Springboot官方大力推荐和支持，Springboot官方做了很多默认配置，开发者只需编写对应html即可，大大减轻了上手难度和配置复杂度。</p><h2 id="第一个Thymeleaf程序"><a href="#第一个Thymeleaf程序" class="headerlink" title="第一个Thymeleaf程序"></a>第一个Thymeleaf程序</h2><p>步骤</p><h2 id="创建程序，添加依赖"><a href="#创建程序，添加依赖" class="headerlink" title="创建程序，添加依赖"></a>创建程序，添加依赖</h2><p>首先，打开你的IDEA创建新项目，选择Spring Initializr方式创建Springboot项目 ，然后点击next，然后填写项目名</p><p>勾选其中Web 模块的Spring web依赖以及Template 模块的Thymeleaf依赖。finish 即可：</p><p>如果你创建项目时没有勾选依赖也不要紧，在pom.xml中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><p>pom.xml：是项目中的Maven依赖，因为Springboot使用Maven来管理外部jar包依赖，我们只需填写依赖名称配置即可引入该依赖，在本系统中引入Spring web模块(Springmvc)和Thymeleaf的依赖.我们不需要自己去招相关jar包。<br>application.properties: 编写Springboot与各框架整合的一些配置内容。<br>controller：用来编写控制器，主要负责处理请求以及和视图(Thymeleaf)绑定。<br>static：用于存放静态资源，例如html、JavaScript、css以及图片等。<br>templates：用来存放模板引擎Thymeleaf(本质依然是.html文件)</p><h2 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h2><p>项目基于Springboot框架，且选了Spring web(Springmvc)作为mvc框架，其中Thymeleaf就是v(view)视图层，我们需要在controller中指定Thymeleaf页面的url，然后再Model中绑定数据。</p><p>我们在com.Thymeleaf文件下创建controller文件夹，在其中创建urlController.java的controller文件，文件内容(代码)为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thymeleaf.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">urlController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;index&quot;)</span><span class="comment">//页面的url地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bigsai&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分含义如下：<br>@controller 注解的意思就是声明这个java文件为一个controller控制器。<br>@GetMapping(“index”) 其中@GetMapping的意思是请求的方式为get方式(即可通过浏览器直接请求)，而里面的index表示这个页面(接口)的url地址(路径)。即在浏览器对项目网页访问的地址。<br>getindex() 是@GetMapping(“index”)注解对应的函数，其类型为String类型返回一个字符串，参数Model类型即用来储存数据供我们Thymeleaf页面使用。<br>model.addAttribute(“name”,”bigsai”) 就是Model存入数据的书写方式，Model是一个特殊的类，相当于维护一个Map一样，而Model中的数据通过controller层的关联绑定在view层(即Thymeleaf中)可以直接使用。<br>return “hello”：这个index就是在templates目录下对应模板(本次为Thymeleaf模板)的名称，即应该对应hello.html这个Thymeleaf文件(与页面关联默认规则为：templates目录下返回字符串.html)。</p><h2 id="编写Thymeleaf页面"><a href="#编写Thymeleaf页面" class="headerlink" title="编写Thymeleaf页面"></a>编写Thymeleaf页面</h2><p>咱们在项目的resources目录下的templates文件夹下面创建一个叫index.html的文件，咱们在这个html文件中的<html>标签修改为<html xmlns:th="http://www.thymeleaf.org">这样在Thymeleaf中就可以使用Thymeleaf的语法和规范啦。</p><p>对于第一个Thymelaf程序，你只需将index.html文件改成这样即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello 第一个Thymeleaf程序</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span>name是bigsai(我是离线数据)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Thymeleaf语法详解"><a href="#Thymeleaf语法详解" class="headerlink" title="Thymeleaf语法详解"></a>Thymeleaf语法详解</h2><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h2 id="链接表达式-…"><a href="#链接表达式-…" class="headerlink" title="链接表达式: @{…}"></a>链接表达式: @{…}</h2><h2 id="变量表达式-…"><a href="#变量表达式-…" class="headerlink" title="变量表达式: ${…}"></a>变量表达式: ${…}</h2><h2 id="选择变量表达式-…"><a href="#选择变量表达式-…" class="headerlink" title="选择变量表达式: *{…}"></a>选择变量表达式: *{…}</h2><h2 id="消息表达-…"><a href="#消息表达-…" class="headerlink" title="消息表达: #{…}"></a>消息表达: #{…}</h2><h1 id="Bootstrap组件库"><a href="#Bootstrap组件库" class="headerlink" title="Bootstrap组件库"></a>Bootstrap组件库</h1><p>Bootstrap:前端页面框架，用于快速开发响应式页面，一套代码就可以适应平板和PC</p><p>Bootstrap 3 是移动设备优先的，在这个意义上，Bootstrap 代码从小屏幕设备（比如移动设备、平板电脑）开始，然后扩展到大屏幕设备（比如笔记本电脑、台式电脑）上的组件和网格。</p><p><a href="https://www.runoob.com/bootstrap/bootstrap-tutorial.html">教程</a></p><p><a href="https://www.runoob.com/try/bootstrap/layoutit/">Bootstrap 可视化布局系统！</a></p><h2 id="引入bootstrap框架"><a href="#引入bootstrap框架" class="headerlink" title="引入bootstrap框架"></a>引入bootstrap框架</h2><p>1、直接引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：方便，简单；</p><p>缺点：使网页加载缓慢，需要有网络的情况；</p><p>2.下载好库再进行引入：<br>优点：加载网页会快点，没有网络的情况也可用；</p><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p><a href="https://www.runoob.com/jquery/jquery-tutorial.html">jQuery菜鸟教程</a><br>jQuery ：是一个 JavaScript 函数库。使用选择器（$）选取DOM对象，并对其进行赋值、取值、事件绑定等操作；主要是操作DOM</p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>国内用百度CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h2><p>基础语法： $(selector).action()</p><p>美元符号定义 jQuery<br>选择符（selector）”查询”和”查找” HTML 元素<br>jQuery 的 action() 执行对元素的操作</p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h2><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>可实现页面无刷新更新数据</p><p>Ajax相当于浏览器发送请求与接受响应的代理人，以实现在不重新加载整个页面下，与服务器交换数据并局部更新网页数据</p><h2 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h2><p>open(method,url,async)<br>规定请求的类型、URL 以及是否异步处理请求。<br>参数<br>    method：请求的类型；GET 或 POST<br>    url：文件在服务器上的位置<br>    async：true（异步）或 false（同步）</p><p>send(string)<br>    将请求发送到服务器。</p><pre><code>string：仅用于 POST 请求</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 XMLHttpRequest 对象</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">xmlhttp.send();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;loadXMLDoc()&quot;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios实现了对ajax的封装。<br>Axios 是可以发出 http 请求的 JavaScript 库，在 浏览器 和 node.js 环境中都可以运行。</p><h2 id="axios与ajax的优缺点"><a href="#axios与ajax的优缺点" class="headerlink" title="axios与ajax的优缺点"></a>axios与ajax的优缺点</h2><p>1.axios优点：<br>（1）从浏览器中创建 XMLHttpRequest；<br>（2）支持 Promise API；<br>（3）从 node.js 创建 http 请求；<br>（4）转换请求和响应数据；<br>（5）自动转换JSON数据。</p><p>1.ajax缺点:<br>（1）基于原生的XHR开发，XHR本身的架构不清晰；<br>（2）JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理；<br>（3）不符合关注分离（Separation of Concerns）的原则；<br>（4）配置和调用方式非常混乱，而且基于事件的异步模型不友好。</p><h2 id="GET-请求和POST-请求"><a href="#GET-请求和POST-请求" class="headerlink" title="GET 请求和POST 请求"></a>GET 请求和POST 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1、向给定ID的用户发起GET 请求</span></span></span><br><span class="line"><span class="javascript">axios.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理成功情况</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理错误情况</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 总是会执行</span></span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.POST 请求</span></span></span><br><span class="line"><span class="javascript">axios.post(<span class="string">&#x27;/user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><p>官方文档：<a href="http://vuejs.org/v2/guide/syntax.html">http://vuejs.org/v2/guide/syntax.html</a></p><p>中文文档: <a href="https://cn.vuejs.org/v2/guide/syntax.html">https://cn.vuejs.org/v2/guide/syntax.html</a></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="直接引入"><a href="#直接引入" class="headerlink" title="直接引入"></a>直接引入</h3><h2 id="js表达式与js代码-语句-的区别"><a href="#js表达式与js代码-语句-的区别" class="headerlink" title="js表达式与js代码(语句)的区别"></a>js表达式与js代码(语句)的区别</h2><p>1.表达式：一个表达式会生成一个值<br>  (1)a+b<br>  (2)x===y ‘a’ ? ‘b’</p><p>2.代码<br>  (1)if (){}  </p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><p>功能：用于解析标签体内容<br>写法：容器中的是js表达式，可以自动读取vue实例中data的所有属性 </p><h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><p>功能：用于解析标签(包括标签属性，标签体内容，绑定事件)</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h4><p>v-bind用于单向绑定数据和元素属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可简写为： --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>双向数据绑定,一般用在表单类元素如：input，select</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">双向<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;school.name&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 因为v-model默认收集的就是value值，所以可简写为 --&gt;</span></span><br><span class="line">双向<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;school.name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; &#125;&#125; 用于输出对象属性和函数返回值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对于制作原型或学习，你可以这样导入最新版本： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// el 参数的两种写法</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vm.$mount(&#x27;#rood&#x27;),</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#rood&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// data参数用于定义属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.data参数的对象式写法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">site</span>: <span class="string">&quot;菜鸟教程&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&quot;www.runoob.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">alexa</span>: <span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.data参数的函数式写法(vue管理的函数，不能用箭头函数)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data:function()&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   return&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     name:&#x27;菜鸟&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// methods参数用于定义函数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">details</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>  <span class="built_in">this</span>.site + <span class="string">&quot; - 学的不仅是技术，更是梦想！&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>created() {}<br>VUE对象初始化完成后自动执行</p><h2 id="Element-UI组件库"><a href="#Element-UI组件库" class="headerlink" title="Element UI组件库"></a>Element UI组件库</h2><p>Element UI 是一套采用 Vue 2.0 作为基础框架实现的组件库</p><p><a href="https://element.eleme.cn/#/zh-CN/component/installation">组件</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h3><p>Layout 布局<br>Container 布局容器<br>Color 色彩<br>Typography 字体<br>Border 边框<br>Icon 图标<br>Button 按钮<br>Link 文字链接<br>Form</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><p>Radio 单选框<br>Checkbox 多选框<br>Input 输入框<br>InputNumber 计数器<br>Select 选择器<br>Cascader 级联选择器<br>Switch 开关<br>Slider 滑块<br>TimePicker 时间选择器<br>DatePicker 日期选择器<br>DateTimePicker 日期时间选择器<br>Upload 上传<br>Rate 评分<br>ColorPicker 颜色选择器<br>Transfer 穿梭框<br>Form 表单</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>Table 表格<br>Tag 标签<br>Progress 进度条<br>Tree 树形控件<br>Pagination 分页<br>Badge 标记<br>Avatar 头像<br>Skeleton 骨架屏<br>Empty 空状态<br>Descriptions 描述列表<br>Result 结果</p><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p><code>  &lt;el-input v-model=&quot;input1&quot;&gt;&lt;/el-input&gt; 输入内容为：&#123;&#123;input1&#125;&#125;</code></p><h3 id="Table表格组件"><a href="#Table表格组件" class="headerlink" title="Table表格组件"></a>Table表格组件</h3><h4 id="el-table"><a href="#el-table" class="headerlink" title="el-table"></a>el-table</h4><p>:data属性   单向数据绑定</p><p>stripe属性可以创建带斑马纹的表格</p><p>Table 组件提供了单选的支持，只需要配置highlight-current-row属性即可实现单选。之后由current-change事件来管理选中时触发的事件，它会传入currentRow，oldCurrentRow。如果需要显示索引，可以增加一列el-table-column，设置type属性为index即可显示从 1 开始的索引号。</p><h4 id="el-table-column"><a href="#el-table-column" class="headerlink" title="el-table-column"></a>el-table-column</h4><p>prop属性来对应对象中的键名即可填入数据，<br>label属性来定义表格的列名。<br>width属性来定义列宽。<br>align=“center”：设置表格内居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">current-row-key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>Alert 警告<br>Loading 加载<br>Message 消息提示<br>MessageBox 弹框<br>Notification 通知<br>Navigation<br>NavMenu 导航菜单<br>Tabs 标签页<br>Breadcrumb 面包屑<br>PageHeader 页头<br>Dropdown 下拉菜单<br>Steps 步骤条</p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Dialog 对话框<br>Tooltip 文字提示<br>Popover 弹出框<br>Popconfirm 气泡确认框<br>Card 卡片<br>Carousel 走马灯<br>Collapse 折叠面板<br>Timeline 时间线<br>Divider 分割线<br>Calendar 日历<br>Image 图片<br>Backtop 回到顶部<br>InfiniteScroll 无限滚动<br>Drawer 抽屉<br>¶Button 按钮</p><h3 id="通过js触发按钮的点击事件"><a href="#通过js触发按钮的点击事件" class="headerlink" title="通过js触发按钮的点击事件"></a>通过js触发按钮的点击事件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//弹出编辑窗口</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleUpdate</span>(<span class="params">row</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        axios.get(<span class="string">&quot;/books/&quot;</span>+row.id).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(res.data.flag &amp;&amp; res.data.data != <span class="literal">null</span> )&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible4Edit = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.formData = res.data.data;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$message.error(<span class="string">&quot;数据同步失败，自动刷新&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;).finally(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.重新加载数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.getAll();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></script></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qq机器人</title>
      <link href="/2022/032659541.html"/>
      <url>/2022/032659541.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h1><h2 id="WebSocket协议"><a href="#WebSocket协议" class="headerlink" title="WebSocket协议"></a>WebSocket协议</h2><p>WebSocket 是HTML5 提供的一种在单个TCP连接上进行全双工通信的协议。</p><p>WebSocket 只需要完成一次握手，客户端和服务器之间就可以创建持久性的连接，并进行双向数据传输。这就使得客户端和服务器之间的数据交换变得更加简单。</p><h1 id="go-cqhttp"><a href="#go-cqhttp" class="headerlink" title="go-cqhttp"></a>go-cqhttp</h1><p><a href="https://onebot.dev/ecosystem.html#onebot-%E5%AE%9E%E7%8E%B0">OneBot</a><br>go-cqhttp（一个 QQ 平台的 OneBot 实现）<br><a href="https://docs.go-cqhttp.org/guide/quick_start.html#%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B"> go-cqhttp 文档</a></p><h2 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h2><p>建议使用ubuntu服务器<br>下载：64 位 Linux    Not available    go-cqhttp_linux_amd64.tar.gz</p><p>Linux下在命令行中输入 tar -xzvf [文件名] 解压到想要的文件夹内</p><p>进入对应目录 <code>./go-cqhttp</code>启动</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>1.第一次无法登录，隔了一天再登录又可以了</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>进入对应目录 <code>./go-cqhttp</code>前台运行。如果你操作其他命令或者关闭 ssh 工具，程序自然就关闭了</p><h1 id="Nonebot2框架"><a href="#Nonebot2框架" class="headerlink" title="Nonebot2框架"></a>Nonebot2框架</h1><p>是一个可扩展的 Python 异步机器人框架：<a href="https://docs.nonebot.dev/">https://docs.nonebot.dev/</a></p><p>Nonebot2需要先搭建go-cqhttp</p><h2 id="搭建-1"><a href="#搭建-1" class="headerlink" title="搭建"></a>搭建</h2><p>可以使用 pip 安装已发布的最新版本：<br><code>pip install nonebot</code></p><p>在提示选择通信方式时，选择「反向 Websocket 通信」，程序将会自动生成默认配置文件。</p><p>打开 go-cqhttp 默认配置文件 config.yml 进行简单配置，修改 QQ 账号以及密码。再次运行 go-cqhttp，可能需要根据提示进行扫码或滑块验证，如果得到以下提示则登录成功：</p><h3 id="使用脚手架"><a href="#使用脚手架" class="headerlink" title="使用脚手架"></a>使用脚手架</h3><p><a href="https://v2.nonebot.dev/docs/start/nb-cli">https://v2.nonebot.dev/docs/start/nb-cli</a></p><p>pip install nb-cli</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://v2.nonebot.dev/store">插件</a><br><a href="https://github.com/nonepkg/nonebot-plugin-manager">https://github.com/nonepkg/nonebot-plugin-manager</a></p><h1 id="Mirai"><a href="#Mirai" class="headerlink" title="Mirai"></a>Mirai</h1><p>使用 Kotlin 编写的高效率 QQ 机器人框架<br><a href="https://github.com/mamoe/mirai">github地址</a></p><p><a href="https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md">mirai官方生态文档</a></p><h2 id="下载-MCL-Installer"><a href="#下载-MCL-Installer" class="headerlink" title="下载 MCL Installer"></a>下载 MCL Installer</h2><p><a href="https://github.com/iTXTech/mcl-installer">MCL Installer</a><br>支持自动下载Java运行环境 和 Mirai Console Loader </p><p>MCL Installer安装时自动下载了 Mirai Console Loader（简称 MCL）。<br>Mirai Console Loader它的工作就是简化 console 启动流程，一键帮你下载 jar 文件，自动更新，文件损坏检查…… 你能在手动启动时担心的问题 mirai-console-loader 都帮你想到了</p><h2 id="了解运行环境"><a href="#了解运行环境" class="headerlink" title="了解运行环境"></a>了解运行环境</h2><p>文件夹名称    用途<br>scripts    存放启动器的脚本，一般不需要在意他们<br>plugins    存放插件<br>data    存放插件的数据，一般不需要在意它们<br>config    存放插件的配置，可以打开并修改配置<br>logs    存放运行时的日志，日志默认保留 7 天</p><h2 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h2><p>官方(chat-command，mirai-api-http，mirai-native）</p><p>刚刚装好的 Mirai Console 是没有任何功能的。功能将由插件提供。<br><a href="https://mirai.mamoe.net/category/11/%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83">插件发布</a><br>如果是 JAR 文件的插件，放入 plugins 即可。其他插件一般都有特殊说明如何使用，请参考它们的说明。</p><h3 id="Plum"><a href="#Plum" class="headerlink" title="Plum"></a>Plum</h3><p><a href="https://mirai.mamoe.net/topic/241/plum-%E6%A2%85%E8%8A%B1%E5%A8%98-%E6%8A%A5%E6%97%A9%E6%99%9A%E5%AE%89-%E6%99%BA%E8%83%BD%E7%82%B9%E6%AD%8C-%E4%B8%80%E8%A8%80-%E9%9A%8F%E6%9C%BA%E5%8A%A8%E6%BC%AB%E5%A3%81%E7%BA%B8-%E8%81%8A%E5%A4%A9ai/2">Plum</a></p><p>Plum-1.0-SNAPSHOT.mirai.jar<br>功能</p><p>每天5点：每日句子 + 倒计时（可自定义倒计时事件）<br>每天21点：每日诗词<br>戳一戳：随机一言<br>@ + 问题：AI聊天（默认实现是青云客API，可自行修改）<br>点歌：本插件支持3种主流音乐平台 网易云音乐，酷狗音乐，QQ音乐。默认按照 网易云音乐 -&gt; 酷狗音乐 -&gt; QQ音乐 顺序查找。通过“点歌”指令以卡片形式点歌，通过“唱歌”指令以语音条形式唱歌。</p><h3 id="自动定义回复插件"><a href="#自动定义回复插件" class="headerlink" title="自动定义回复插件"></a>自动定义回复插件</h3><p><a href="https://mirai.mamoe.net/topic/636/console-%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D%E6%8F%92%E4%BB%B6">https://mirai.mamoe.net/topic/636/console-%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D%E6%8F%92%E4%BB%B6</a></p><p>浏览器进入<a href="http://localhost:20044/index.html">http://localhost:20044/index.html</a></p><h3 id="思知机器人插件"><a href="#思知机器人插件" class="headerlink" title="思知机器人插件"></a>思知机器人插件</h3><p>自己跟自己聊天，不好用<br><a href="https://github.com/thetbw/my-bot">https://github.com/thetbw/my-bot</a> </p><h2 id="滑动验证助手"><a href="#滑动验证助手" class="headerlink" title="滑动验证助手"></a>滑动验证助手</h2><p><a href="https://github.com/mzdluo123/TxCaptchaHelper">https://github.com/mzdluo123/TxCaptchaHelper</a></p><p>下载手机客户端<br>在mcl控制台中使用命令<code>login &lt;qq&gt; [password] [protocol]</code><br>会弹出url,把它复制到滑动验证助手app中</p><p>第二种登录方式（将弹出的链接发送给手机QQ打开，会得到一个二维码，使用手机QQ扫码验证）</p><p>ANDROID_PAD是ipad</p><p>login 3385642151 密码 ANDROID_PAD</p><h2 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h2><h3 id="搭建在Centos-7错误"><a href="#搭建在Centos-7错误" class="headerlink" title="搭建在Centos 7错误"></a>搭建在Centos 7错误</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mcl-installer-d5a51f8-linux-amd64: /lib64/libc.so.6: version `GLIBC_2.25' not found (required by ./mcl-installer-d5a51f8-linux-amd64)</span><br></pre></td></tr></tbody></table></figure><p>根据一些研究，GLIBC_2.25 不能安装在 Centos 7 上</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/411513359">https://zhuanlan.zhihu.com/p/411513359</a></p><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p>下载插件：Mirai Console</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级</title>
      <link href="/2022/03267198.html"/>
      <url>/2022/03267198.html</url>
      
        <content type="html"><![CDATA[<h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h2 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h2><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。<br>Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    download_task(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    download_task(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>下面是运行程序得到的一次运行结果。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了6秒</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">总共耗费了13.01秒.</span><br></pre></td></tr></tbody></table></figure><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="comment"># Process类创建了进程对象</span></span><br><span class="line">    <span class="comment"># 通过target参数我们传入一个函数来表示进程启动后要执行的代码，后面的args是一个元组，它代表了传递给函数的参数。</span></span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">'Python从入门到住院.pdf'</span>, ))</span><br><span class="line">    p1.start()   <span class="comment">#启动进程</span></span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">'Peking Hot.avi'</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()  <span class="comment">#表示等待进程执行结束</span></span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动下载进程，进程号[1530].</span><br><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">启动下载进程，进程号[1531].</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了10秒</span><br><span class="line">总共耗费了10.01秒.</span><br></pre></td></tr></tbody></table></figure><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_task</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(string, end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Ping'</span>, )).start()</span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Pong'</span>, )).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h2 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h2><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="comment"># 使用threading模块的Thread类来创建线程</span></span><br><span class="line">    t1 = Thread(target=download, args=(<span class="string">'Python从入门到住院.pdf'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = Thread(target=download, args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.3f秒'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (self._filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, money</span>):</span></span><br><span class="line">        <span class="comment"># 计算存款后的余额</span></span><br><span class="line">        new_balance = self._balance + money</span><br><span class="line">        <span class="comment"># 模拟受理存款业务需要0.01秒的时间</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line">        <span class="comment"># 修改账户余额</span></span><br><span class="line">        self._balance = new_balance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account, money</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建100个存款的线程向同一个账户中存钱</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="comment"># 等所有存款的线程都执行完毕</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line">        self._lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, money</span>):</span></span><br><span class="line">        <span class="comment"># 先获取锁才能执行后续的代码</span></span><br><span class="line">        self._lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_balance = self._balance + money</span><br><span class="line">            sleep(<span class="number">0.01</span>)</span><br><span class="line">            self._balance = new_balance</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            self._lock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account, money</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h2 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h2><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到过Python中有嵌入C/C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。有一大类的任务都属于I/O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h2 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h2><p>现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，在后续的课程中会进行讲解。</p><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><h3 id="将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="将耗时间的任务放到线程中以获得更好的用户体验。"></a>将耗时间的任务放到线程中以获得更好的用户体验。</h3><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验</p><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadTaskHandler</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'下载完成!'</span>)</span><br><span class="line">            <span class="comment"># 启用下载按钮</span></span><br><span class="line">            button1.config(state=tkinter.NORMAL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">        <span class="comment"># 禁用下载按钮</span></span><br><span class="line">        button1.config(state=tkinter.DISABLED)</span><br><span class="line">        <span class="comment"># 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)</span></span><br><span class="line">        <span class="comment"># 在线程中处理耗时间的下载任务</span></span><br><span class="line">        DownloadTaskHandler(daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_about</span>():</span></span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">'关于'</span>, <span class="string">'作者: 骆昊(v1.0)'</span>)</span><br><span class="line"></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200x150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'下载'</span>, command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'关于'</span>, command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h3 id="使用多进程对复杂任务进行“分而治之”。"><a href="#使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="使用多进程对复杂任务进行“分而治之”。"></a>使用多进程对复杂任务进行“分而治之”。</h3><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br><span class="line">        total += number</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Execution time: %.3fs'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_handler</span>(<span class="params">curr_list, result_queue</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> curr_list:</span><br><span class="line">        total += number</span><br><span class="line">    result_queue.put(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    processes = []</span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 启动8个进程将数据切片后进行运算</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        p = Process(target=task_handler,</span><br><span class="line">                    args=(number_list[index:index + <span class="number">12500000</span>], result_queue))</span><br><span class="line">        index += <span class="number">12500000</span></span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># 开始记录所有进程执行完成花费的时间</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line">    <span class="comment"># 合并执行结果</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> result_queue.empty():</span><br><span class="line">        total += result_queue.get()</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Execution time: '</span>, (end - start), <span class="string">'s'</span>, sep=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p><h1 id="openpyxl模块处理Excel电子表格"><a href="#openpyxl模块处理Excel电子表格" class="headerlink" title="openpyxl模块处理Excel电子表格"></a>openpyxl模块处理Excel电子表格</h1><p><a href="https://zhuanlan.zhihu.com/p/351814769">https://zhuanlan.zhihu.com/p/351814769</a></p><p><a href="https://blog.csdn.net/weixin_44288604/article/details/120731317">https://blog.csdn.net/weixin_44288604/article/details/120731317</a></p><p>Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，由于微软从Office 2007开始使用了新的文件格式，这使得Office Excel和LibreOffice Calc、OpenOffice Calc是完全兼容的，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line">ws[<span class="string">'A1'</span>] = <span class="number">42</span></span><br><span class="line">ws.append([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">ws[<span class="string">'A2'</span>] = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">"sample.xlsx"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="excel文档和创建对象"><a href="#excel文档和创建对象" class="headerlink" title="excel文档和创建对象"></a>excel文档和创建对象</h2><ol><li>工作薄(workbook):一个EXCEL文件就称为一个工作薄,一个工作薄中可以包含若干张工作表。打开或者创建一个Excel需要创建一个<strong>Workbook对象</strong></li><li>工作表(sheet):工作薄中的每一张表格称为工作表,每张工作表都有一个标签,默认为sheet1\sheet2\sheet3来命名，(一个工作 薄默认为由3个工作表组成)。获取一个表则需要先创建一个Workbook对象，然后使用该对象的方法来得到一个<strong>Worksheet对象</strong></li><li>活动表(active sheet)：指当前正在操作的工作表</li><li>行(row): 工作表中的每一行行首数字(1、2、3、)称为行标题;一张工作表最多有65536行</li><li>列(column): 列标题:工作表中每一列列首的字母(A、B、C)称为列标题;一张工作表最多有256列</li><li>单元格(cell): 工作表的每一个格称为单元格。如果要获取表中的数据，那么得到Worksheet对象以后再从中获取代表单元格的<strong>Cell对象</strong></li></ol><h2 id="Workbook对象"><a href="#Workbook对象" class="headerlink" title="Workbook对象"></a>Workbook对象</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.创建</span></span><br><span class="line"><span class="keyword">from</span>  openpyxl <span class="keyword">import</span>  Workbook </span><br><span class="line"><span class="comment">#实例化Workbook对象</span></span><br><span class="line">wb = Workbook()</span><br><span class="line"><span class="comment"># 激活 worksheet</span></span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.打开已有的excel</span></span><br><span class="line"><span class="keyword">from</span> openpyxl  <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="comment">#实例化Workbook对象</span></span><br><span class="line">wb2 = load_workbook(<span class="string">'文件名称.xlsx'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="Workbook对象属性（工作簿操作）"><a href="#Workbook对象属性（工作簿操作）" class="headerlink" title="Workbook对象属性（工作簿操作）"></a>Workbook对象属性（工作簿操作）</h3><p>sheetnames：获取工作簿中的表（列表）<br>active：获取当前活跃的Worksheet<br>worksheets：以列表的形式返回所有的Worksheet(表格)<br>read_only：判断是否以read_only模式打开Excel文档<br>encoding：获取文档的字符集编码<br>properties：获取文档的元数据，如标题，创建者，创建日期等</p><h2 id="Worksheet对象-工作表操作"><a href="#Worksheet对象-工作表操作" class="headerlink" title="Worksheet对象(工作表操作)"></a>Worksheet对象(工作表操作)</h2><p>title：表格的标题<br>max_row：表格的最大行<br>min_row：表格的最小行<br>max_column：表格的最大列<br>min_column：表格的最小列<br>rows：按行获取单元格(Cell对象) - 生成器<br>columns：按列获取单元格(Cell对象) - 生成器<br>values：按行获取表格的内容(数据) - 生成器</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例化Worksheet对象</span></span><br><span class="line">worksheet = wb[<span class="string">'排序商品信息'</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="Cell对象（单元格）"><a href="#Cell对象（单元格）" class="headerlink" title="Cell对象（单元格）"></a>Cell对象（单元格）</h2><p>row：单元格所在的行<br>column：单元格坐在的列<br>value：单元格的值<br>coordinate：单元格的坐标</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例化Cell对象</span></span><br><span class="line">cell = sheet[<span class="string">'B1'</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="docx模块处理Word文档"><a href="#docx模块处理Word文档" class="headerlink" title="docx模块处理Word文档"></a>docx模块处理Word文档</h1><p><a href="https://blog.csdn.net/weixin_44374471/article/details/100010360">https://blog.csdn.net/weixin_44374471/article/details/100010360</a></p><h2 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h2><h1 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h1><h2 id="Time库"><a href="#Time库" class="headerlink" title="Time库"></a>Time库</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.time() <span class="comment">#获取当前时间戳（计算机内部时间）</span></span><br><span class="line"><span class="comment"># 1643336568.9237003</span></span><br><span class="line">time.ctime(time.time())  <span class="comment">#可以传入时间戳格式化时间</span></span><br><span class="line"><span class="comment">#'Sat Jan 29 15:21:48 2022'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.loaltime() <span class="comment">#本地时间  Sat Apr 16 22:34:40 2022</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime()))  <span class="comment">#格式化时间</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>获取时间：</p><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><p>time.strftime(tpl,ts)<br>    tpl：定义输出效果<br>    ts：struct_time元组</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.gmtime())</span><br><span class="line"><span class="comment">#'2022-01-28 03:04:00'</span></span><br><span class="line"></span><br><span class="line">time.strftime(<span class="string">"%a %b %d %H:%M:%S"</span>,time.gmtime())</span><br><span class="line"><span class="comment">#'Fri Jan 28 03:07:14'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="将格式化字符串转换为时间戳"><a href="#将格式化字符串转换为时间戳" class="headerlink" title="将格式化字符串转换为时间戳"></a>将格式化字符串转换为时间戳</h3><p>strptime(str,tpl)<br>    str:字符串形式的时间值<br>    tpl：定义输入效果</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timestr = <span class="string">'2022-01-28 03:04:00'</span></span><br><span class="line">                     </span><br><span class="line">time.strptime(timestr,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">                     </span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2022, tm_mon=1, tm_mday=28, tm_hour=3, tm_min=4, tm_sec=0, #tm_wday=4, tm_yday=28, tm_isdst=-1)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计时器功能"><a href="#计时器功能" class="headerlink" title="计时器功能"></a>计时器功能</h3><h2 id="datetime库"><a href="#datetime库" class="headerlink" title="datetime库"></a>datetime库</h2><p>datetime 基于 time 进行了封装，提供了更多实用的函数。</p><h3 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h3><p>只关注日期</p><h3 id="time类"><a href="#time类" class="headerlink" title="time类"></a>time类</h3><p>只关注时间</p><h3 id="datetime类"><a href="#datetime类" class="headerlink" title="datetime类"></a>datetime类</h3><p>同时有时间和日期</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">d=datetime.datetime.now()</span><br><span class="line">d.year</span><br><span class="line">d.month</span><br><span class="line">d.day</span><br><span class="line">d.hour</span><br><span class="line">d.minute</span><br><span class="line">d.second</span><br><span class="line">d.microsecond</span><br><span class="line">d.tzinfo</span><br><span class="line"> </span><br><span class="line">d.date() <span class="comment"># 返回 date 对象</span></span><br><span class="line">d.time() <span class="comment"># 返回 time 对象</span></span><br><span class="line">d.replace(name=value) <span class="comment"># 前面所述各项属性是 read-only 的，需要此方法才可更改</span></span><br><span class="line">d.timetuple() <span class="comment"># 返回time.struct_time 对象</span></span><br><span class="line">dattime.strftime(<span class="built_in">format</span>) <span class="comment"># 按照 format 进行格式化输出</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h3 id="timedelta类"><a href="#timedelta类" class="headerlink" title="timedelta类"></a>timedelta类</h3><p>主要用于计算时间跨度</p><h1 id="click命令行模块"><a href="#click命令行模块" class="headerlink" title="click命令行模块"></a>click命令行模块</h1><p>使用@click.command()装饰指定函数，使之成为命令行接口；<br>使用@click.argument()或者@click.option()装饰函数，为其添加命令行选项等。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> click </span><br><span class="line"><span class="comment"># 装饰器@click.command()会将函数包装成 click 对象</span></span><br><span class="line"><span class="meta">@click.command() </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    click.echo(<span class="string">"hello click"</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="打包跨平台可执行程序"><a href="#打包跨平台可执行程序" class="headerlink" title="打包跨平台可执行程序"></a>打包跨平台可执行程序</h2><p>通过click编写了简单的命令行方法后，还需要把.py文件转换成可以在控制台里运行的命令行程序。最简单的方法就是加上如下代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == '__main__':</span><br><span class="line">    command()</span><br></pre></td></tr></tbody></table></figure><p>click支持使用setuptools来更好的实现命令行程序打包，把源码文件打包成系统中的可执行程序，并且不限平台。一般可通过在源码根目录下创建setup.py脚本，下面是一段简单的打包代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from setuptools import setup</span><br><span class="line">setup(</span><br><span class="line">    name='hello',</span><br><span class="line">    version='0.1',</span><br><span class="line">    py_modules=['hello'],</span><br><span class="line">    install_requires=[</span><br><span class="line">        'click',</span><br><span class="line">    ],</span><br><span class="line">    entry_points='''</span><br><span class="line">        [console_scripts]</span><br><span class="line">        hello=hello:cli</span><br><span class="line">    ''',</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>)<br>留意entry_points字段，在console_scripts下，每一行都是一个控制台脚本，等号左边的是脚本的名称，右边的是click命令的导入路径。</p><h1 id="PyScript"><a href="#PyScript" class="headerlink" title="PyScript"></a>PyScript</h1><p><a href="https://pyscript.net/">PyScript</a>是 Anaconda 团队开发的一个 Javascipt 库，可以在 HTML 标签里嵌入 Python 代码，无需服务端就可以运行 Python 代码。</p><h2 id="如何使用-PyScript"><a href="#如何使用-PyScript" class="headerlink" title="如何使用 PyScript"></a>如何使用 PyScript</h2><p>PyScript 使用以下三个主要组件在 html 中编写 Python：</p><p>py-env 定义了运行 Python 代码所需的包。<br>py-script 是在网页中编写 Python 代码的地方。<br>py-repl 创建一个 REPL（读取-评估-打印循环）组件，用于评估用户输入的代码并显示结果。</p><h1 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h1><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime   <span class="comment">#导入datetime模块中的datetime类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将时间戳转换为有用的时间格式。</span></span><br><span class="line">time = datetime.fromtimestamp(<span class="string">"传入时间戳"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>程序运行时间</strong></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> b_tuple:</span><br><span class="line">  aa = b_tuple[<span class="number">20000</span>]</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Lookup time for TUPLE: "</span>, end_time - start_time)</span><br></pre></td></tr></tbody></table></figure><h1 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h1><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( random.randint(<span class="number">1</span>,<span class="number">10</span>) )        <span class="comment"># 产生 1 到 10 的一个整数型随机数  </span></span><br><span class="line"><span class="built_in">print</span>( random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) )   <span class="comment"># 生成从1到100的间隔为2的随机整数</span></span><br><span class="line"><span class="built_in">print</span>( random.random() )             <span class="comment"># 产生 0 到 1 之间的随机浮点数</span></span><br><span class="line"><span class="built_in">print</span>( random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>) )     <span class="comment"># 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span></span><br><span class="line"><span class="built_in">print</span>( random.choice(<span class="string">'tomorrow'</span>) )   <span class="comment"># 从序列中随机选取一个元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个字符中选取指定数量的字符组成新字符串：</span></span><br><span class="line"><span class="string">''</span>.join(random.sample([<span class="string">'z'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>,<span class="string">'w'</span>,<span class="string">'v'</span>,<span class="string">'u'</span>,<span class="string">'t'</span>,<span class="string">'s'</span>,<span class="string">'r'</span>,<span class="string">'q'</span>,<span class="string">'p'</span>,<span class="string">'o'</span>,<span class="string">'f'</span>,<span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>], <span class="number">5</span>))     </span><br><span class="line">random.shuffle([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])  <span class="comment"># 将序列a中的元素顺序打乱</span></span><br></pre></td></tr></tbody></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>文本文件：存储的是普通“字符”文本，默认为unicode字符集，可以使用记本事程序打开</p><p>二进制文件：把数据内容用“字节”进行存储，无法用记事本打开，必须使用专用的软件打开，举例：mp3音频文件，jpg图片。doc文档等<br>open(name[, mode[, buffering]])<br>参数：<br>    name : 一个包含了你要访问的文件名称的字符串值。<br>    mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</p><table><thead><tr><th>打开模式</th><th>描述</th></tr></thead><tbody><tr><td>r:</td><td>只读。这是<strong>默认模式</strong>。</td></tr><tr><td>r+:</td><td>用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w:</td><td>只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>wb:</td><td>以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>w+:</td><td>打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>wb+:</td><td>以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr><tr><td>a:</td><td>追加写入内容。如果该文件已存在，文件指针将会放在文件的结尾。新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td></tr><tr><td>a+:</td><td>打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td></tr></tbody></table><p>|ab+:|以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。|<br>|rb: |以二进制格式打开一个文件用于只读,默认模式。|<br>|ab:   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。|<br>|rb+:|以二进制格式打开一个文件用于读写|</p><p>要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可<br>以二进制的形式读取，禁用encoding编码格式；读取时，不知道读多少</p><h2 id="with-open"><a href="#with-open" class="headerlink" title="with open"></a>with open</h2><p>wth语句可以自动管理上下文资源，不论什么原因跳出with，都能确保文件正确的关闭，以此来达到释放资源的目的</p><p>read()会一次性读取文件的全部内容，如果文件有20G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。<br>调用readline()可以每次读取一行内容，<br>调用readlines()一次读取所有内容并按行返回list。</p><p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p><p>file.write(str)   将字符串写入文件<br>file.writelines(strings)   将字符串序列写入文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'Hi.text'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"Hello, there"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with file.open(encoding='utf-8') as f:</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p><strong>glob.glob</strong><br>同时返回所有匹配的文件路径列表。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定目录下的所有图片</span></span><br><span class="line"><span class="built_in">print</span> (glob.glob(<span class="string">r"/home/qiaoyunhao/*/*.png"</span>),<span class="string">"\n"</span>)<span class="comment">#加上r让字符串不转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取上级目录的所有.py文件</span></span><br><span class="line"><span class="built_in">print</span> (glob.glob(<span class="string">r'../*.py'</span>)) <span class="comment">#相对路径</span></span><br></pre></td></tr></tbody></table></figure><h3 id="glob-iglob"><a href="#glob-iglob" class="headerlink" title="glob.iglob"></a>glob.iglob</h3><p>获取一个可编历对象，使用它可以逐个获取匹配的文件路径名。</p><h3 id="os-listdir-path"><a href="#os-listdir-path" class="headerlink" title="os.listdir(path)"></a>os.listdir(path)</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(path)  <span class="comment">#返回指定路径下所有文件名的列表。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="os-walk"><a href="#os-walk" class="headerlink" title="os.walk"></a>os.walk</h3><p>遍历文件夹后产生三个参数：<br>当前文件夹路径<br>包含文件夹名称[列表形式]<br>包含文件名称[列表形式]</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'C:\\Program Files (x86)'</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'打开文件夹<span class="subst">{dirpath}</span>'</span>) <span class="comment"># 当前文件夹路径 </span></span><br><span class="line">    <span class="keyword">if</span> dirnames:</span><br><span class="line">        <span class="built_in">print</span>(dirnames) <span class="comment"># 包含文件夹名称[列表形式] </span></span><br><span class="line">    <span class="keyword">if</span> filenames:</span><br><span class="line">        <span class="built_in">print</span>(filenames) <span class="comment"># 包含文件名称[列表形式]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="os-scandir"><a href="#os-scandir" class="headerlink" title="os.scandir"></a>os.scandir</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">'.'</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.scandir(path): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"获取路径下文件名：<span class="subst">{file.name}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"获取路径下文件路径：<span class="subst">{file.path}</span>\n"</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment">#2.</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(path):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"获取路径下文件名：<span class="subst">{file}</span>"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="目录操作os库"><a href="#目录操作os库" class="headerlink" title="目录操作os库"></a>目录操作os库</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> os.path <span class="keyword">as</span> op</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">os.path.join()：  <span class="comment">#按照路径的方式拼接字符串</span></span><br><span class="line">os.rename(<span class="string">"要修改的目录名"</span>, <span class="string">"修改后的目录名"</span>)    <span class="comment">#重命名文件或目录，两个参数都要传入路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件不存在，创建文件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_path): </span><br><span class="line">    os.mkdir(folder_path)</span><br></pre></td></tr></tbody></table></figure><p><strong>shutil 模块</strong>(拷贝、删除、移动、压缩和解压)<br>shutil可以简单地理解为sh + util，shell工具的意思。shutil模块是对os模块的补充，主要针对文件的拷贝、删除、移动、压缩和解压操作。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br></pre></td></tr></tbody></table></figure><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><p>shutil会自动识别拷贝的到底是文件还是文件夹, 如果存在同名的文件将会自动进行覆盖。</p><p>shutil.copy($file_path, $dir_path)</p><h2 id="移动或重命名文件，但如果路径下已有重名的文件，将报错！"><a href="#移动或重命名文件，但如果路径下已有重名的文件，将报错！" class="headerlink" title="移动或重命名文件，但如果路径下已有重名的文件，将报错！"></a>移动或重命名文件，但如果路径下已有重名的文件，将报错！</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil </span><br><span class="line"></span><br><span class="line">shutil.move(<span class="string">r'.\practice.txt'</span>, <span class="string">r'.\文件夹1/'</span>)   <span class="comment"># 移动到另外一个文件夹中</span></span><br><span class="line">shutil.move(<span class="string">r'.\practice.txt'</span>, <span class="string">r'.\文件夹1/new.txt'</span>)    <span class="comment">#移动并重命名</span></span><br></pre></td></tr></tbody></table></figure><h2 id="拷贝文件夹-删除文件夹"><a href="#拷贝文件夹-删除文件夹" class="headerlink" title="拷贝文件夹/删除文件夹"></a>拷贝文件夹/删除文件夹</h2><p>shutil.copytree($file_path, $dir_path) # 拷贝所有文件到新的文件夹下，保持原有的文件结构。<br>shutil.rmtree($dir_path) # 删除此路径的文件夹</p><h2 id="生成压缩文件"><a href="#生成压缩文件" class="headerlink" title="生成压缩文件:"></a>生成压缩文件:</h2><p>shutil.make_archive(base_name, ‘gztar’, root_dir, [base_dir)<br>    base_name : 创建的目标文件名，包括路径，减去任何特定格式的扩展。<br>    format : 压缩包格式。”zip”, “tar”, “bztar”或”gztar”中的一个。<br>    root_dir : 需要打包的文件夹路径。打包完成时存储在上一级目录。<br>    base_dir : 使用后会将base_dir作为路径，解压后有个有层级的文件夹，而仅非只有单独的打包内容。</p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件:"></a>解压文件:</h2><p>shutil.unpack_archive(filename[, extract_dir[, format]])<br>    filename是压缩文档的完整路径<br>    extract_dir是解压缩路径，默认为当前目录。<br>    format是压缩格式。默认使用文件后缀名代码的压缩格式。”zip”, “tar”, “bztar”或”gztar”中的一个。</p><h2 id="pathlib模块"><a href="#pathlib模块" class="headerlink" title="pathlib模块"></a>pathlib模块</h2><p>多平台使用<br>对于多层文件夹的读取，用os模块只能一层一层读取出文件，要写多个for循环，效率不高，这时我们可以用 Path.glob(**/*) 大法，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime   <span class="comment">#导入datetime模块中的datetime类</span></span><br><span class="line"></span><br><span class="line">p = Path(<span class="string">'E:\github\python\自动化\打开所有网址.py'</span>)    <span class="comment">#实例化Path对象(可传入绝对路径，当前目录下文件名)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件名:<span class="subst">{p.name}</span>"</span>)     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件完整路径:<span class="subst">{p.resolve() }</span>"</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件后缀:<span class="subst">{p.suffix}</span>"</span>)     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件前缀:<span class="subst">{p.stem}</span>"</span>)    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="built_in">print</span>(p.stat())            <span class="comment"># 获取文件详细信息</span></span><br><span class="line"><span class="built_in">print</span>(p.stat().st_size)    <span class="comment"># 文件的字节大小</span></span><br><span class="line"><span class="built_in">print</span>(p.stat().st_ctime)   <span class="comment"># 文件创建时间戳</span></span><br><span class="line"><span class="built_in">print</span>(p.stat().st_mtime)   <span class="comment"># 上次修改文件的时间戳</span></span><br><span class="line">creat_time = datetime.fromtimestamp(p.stat().st_ctime)</span><br><span class="line">st_mtime = datetime.fromtimestamp(p.stat().st_mtime)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'该文件创建时间：<span class="subst">{creat_time}</span>'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'上次修改该文件的时间：<span class="subst">{st_mtime}</span>'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">p = Path(<span class="string">'E:\github\python\自动化\整理文件.ipynb'</span>)    <span class="comment">#实例化Path对象(可传入绝对路径，当前目录下文件名)</span></span><br><span class="line">p1 = Path .cwd()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"上级文件夹路径:<span class="subst">{p.parent}</span>"</span>) </span><br><span class="line"><span class="built_in">print</span>(p.parts)      <span class="comment"># 将路径通过分隔符分割成一个元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="comment"># 获取指定文件夹下所有文件和文件夹路径</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p1.iterdir():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="comment"># 返回一个iterable 包含所有父目录</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p.parents:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)    </span><br><span class="line"><span class="comment"># 获取该文件目录下所有.py文件路径</span></span><br><span class="line">file_name = p1.glob(<span class="string">'**/*.py'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_name:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h1 id="web自动化selenium"><a href="#web自动化selenium" class="headerlink" title="web自动化selenium"></a>web自动化selenium</h1><h2 id="安装webdriver"><a href="#安装webdriver" class="headerlink" title="安装webdriver"></a>安装webdriver</h2><p>各大浏览器webdriver地址可参见：<a href="https://docs.seleniumhq.org/download/">https://docs.seleniumhq.org/download/</a><br>Firefox：<a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a><br>Chrome：<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br><strong>webdriver安装路径</strong><br>Win：复制webdriver到Python安装目录下<br>Mac：复制webdriver到/usr/local/bin目录下</p><h2 id="定位页面元素"><a href="#定位页面元素" class="headerlink" title="定位页面元素"></a>定位页面元素</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位一个元素</span></span><br><span class="line">ele = driver.find_element(By.XPATH,<span class="string">''</span>)</span><br><span class="line"><span class="comment">#表示定位一组元素(元素相同时使用)</span></span><br><span class="line">lis = driver.find_elements(By.XPATH,<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lis)&gt;<span class="number">0</span>:</span><br><span class="line">  lis[<span class="number">0</span>].click()</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'没有元素'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="id-定位"><a href="#id-定位" class="headerlink" title="id 定位"></a>id 定位</h3><h3 id="name-定位"><a href="#name-定位" class="headerlink" title="name 定位"></a>name 定位</h3><h3 id="class-定位"><a href="#class-定位" class="headerlink" title="class 定位"></a>class 定位</h3><h3 id="link定位"><a href="#link定位" class="headerlink" title="link定位"></a>link定位</h3><p>find_element_by_link_text()<br>此种方法是专门用来定位文本链接的，</p><h3 id="partial-link定位："><a href="#partial-link定位：" class="headerlink" title="partial_link定位："></a>partial_link定位：</h3><p>find_element_by_partial_link_text()</p><p>有时候一个超链接的文本很长很长，我们如果全部输入，既麻烦，又显得代码很不美观，这时候我们就可以只截取一部分字符串，用这种方法模糊匹配了。</p><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>xpath定位：find_element_by_xpath()</p><p>前面介绍的几种定位方法都是在理想状态下，有一定使用范围的，那就是：在当前页面中，每个元素都有一个唯一的id或name或class或超链接文本的属性，那么我们就可以通过这个唯一的属性值来定位他们。</p><p>但是在实际工作中并非有这么美好，有时候我们要定位的元素并没有id,name,class属性，或者多个元素的这些属性值都相同，又或者刷新页面，这些属性值都会变化。那么这个时候我们就只能通过xpath或者CSS来定位了。</p><p>xpath 是一种在 XML 文档中定位元素的语言，它拥有多种定位方式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;<span class="name">head</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"csdn-toolbar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-inside"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container-left"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container-middle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-search onlySearch"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-search-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toolbar-search-input"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"C++难在哪里？"</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>根据上面的标签需要定位 最后一行 input 标签，以下列出了四种方式，xpath 定位的方式多样并不唯一，使用时根据情况进行解析即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对路径（层级关系）定位  （绝对路径以/开头）</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/div/div/div/div[2]/div/div/input[1]"</span>)</span><br><span class="line"><span class="comment"># 利用元素属性定位     （相对路径以//开头）</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='toolbar-search-input']"</span>))</span><br><span class="line"><span class="comment"># 层级+元素属性定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[@id='csdn-toolbar']/div/div/div[2]/div/div/input[1]"</span>)</span><br><span class="line"><span class="comment"># 逻辑运算符定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='toolbar-search-input' and @autocomplete='off']"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>1.相对路径+索引<br>先定位要找的元素，再找它唯一的父标签<br>2.相对路径+属性<br>3.相对路径+通配符定位<br>4.相对路径+部分属性值<br>5.相对路径+文本</p><h3 id="css-定位"><a href="#css-定位" class="headerlink" title="css 定位"></a>css 定位</h3><p>link 定位<br>partial_link 定位</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="下拉框的处理"><a href="#下拉框的处理" class="headerlink" title="下拉框的处理"></a>下拉框的处理</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--select标签--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">tabindex</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">tabindex</span>=<span class="string">"2"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">ele = driver.find_element_by_name(<span class="string">"city"</span>)</span><br><span class="line"><span class="comment">#创建Select类对象</span></span><br><span class="line">sel = Select(ele)</span><br><span class="line">sel.select_by_value(<span class="string">"3"</span>)  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="select类中的函数列表"><a href="#select类中的函数列表" class="headerlink" title="select类中的函数列表"></a>select类中的函数列表</h4><p>options    返回select元素所有的options<br>all_selected_options    返回select元素中所有已选中的选项<br>first_selected_option    返回select元素中选中的第一个选项<br>select_by_index(index)    通过索引定位，index索引是从“0”开始<br>select_by_value(value)    通过value属性值定位<br>select_by_visible_text(text)t    通过文本值定位，visible_text是在option标签中间的值，即显示在下拉框的值；<br>deselect_all()    取消全部的已选择项<br>deselect_by_index(index)    取消已选中的索引项<br>deselect_by_value(value)    取消已选中的value值<br>deselect_by_visible_text(text)    取消已选中的文本值</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>定位到元素后用.send_keys(r’文件路径’)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_name(<span class="string">"city"</span>).send_keys(<span class="string">r'文件路径'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="处理弹窗"><a href="#处理弹窗" class="headerlink" title="处理弹窗"></a>处理弹窗</h3><p>alert(只有确定)，confirm(有确认和取消)，prompt(有确认取消还可以输入值)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#alert是一个属性</span></span><br><span class="line"><span class="comment">#创建一个alert对象</span></span><br><span class="line">ale = driver.switch_to.alert</span><br><span class="line"></span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">ale.accept()</span><br><span class="line"><span class="comment">#点击取消</span></span><br><span class="line">ale.dismiss() </span><br><span class="line"><span class="comment">#获得文本</span></span><br><span class="line">ale.text()</span><br><span class="line"><span class="comment">#输入值</span></span><br><span class="line">ale.send_keys()</span><br></pre></td></tr></tbody></table></figure><h2 id="设计模式（封装）"><a href="#设计模式（封装）" class="headerlink" title="设计模式（封装）"></a>设计模式（封装）</h2><p>pom(page object model)页面对象模式</p><p>分三层<br>1.基础层：base 主要放seleni原生的方法<br>2.页面对象层：主要用于放页面的元素和页面的动作<br>3.测试用例层:testcase存放测试用例，测试数据</p><p>页面对象层调用基础层的方法，测试用例层调用页面对象的方法</p><h1 id="UIautomation"><a href="#UIautomation" class="headerlink" title="UIautomation"></a>UIautomation</h1><p><a href="https://blog.csdn.net/MicalChen/article/details/120296341">https://blog.csdn.net/MicalChen/article/details/120296341</a><br>最新版uiautomation2.0目前只支持Python 3版本，依赖comtypes和typing这两个包，但不要使用3.7.6和3.8.1这两个版本，comtypes在这两个版本中不能正常工作。</p><h2 id="UIautomation环境搭建"><a href="#UIautomation环境搭建" class="headerlink" title="UIautomation环境搭建"></a>UIautomation环境搭建</h2><h2 id="界面元素定位"><a href="#界面元素定位" class="headerlink" title="界面元素定位"></a>界面元素定位</h2><p>常用的控件类<br>控件类支持的参数<br>常用方法<br>窗口相关方法<br>程序关闭与打开相关方法<br>组合框相关方法<br>鼠标事件<br>键盘事件<br>延时等待<br>滚动条<br>日志<br>粘贴板<br>控件判断相关方法<br>控件矩形坐标<br>截图方法</p><h1 id="pyautogui"><a href="#pyautogui" class="headerlink" title="# pyautogui"></a># pyautogui</h1><p>是一个非常强大的库，可以操作鼠标和键盘   基于坐标操作</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://mp.weixin.qq.com/s/6OJYwnzC1fHyOj_rBFIGxg</span></span><br><span class="line"><span class="comment"># https://zhuanlan.zhihu.com/p/302592540</span></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler <span class="comment"># 阻塞当前进程的调度器</span></span><br><span class="line"><span class="comment"># blocking类型调度器会阻塞当前进程，若你想要后台运行的调度器，可以使用以下代码：</span></span><br><span class="line"><span class="comment"># from apscheduler.schedulers.background import BackgroundScheduler</span></span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span> <span class="comment"># 设置每一步操作的间隔（秒），可防止操作太快</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pyautogui.position()) <span class="comment"># 打印坐标，Point(x=148, y=879)</span></span><br><span class="line">icon_position = pyautogui.position() <span class="comment"># Point(x=148, y=879)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Tkinter库-内置GUI库"><a href="#Tkinter库-内置GUI库" class="headerlink" title="Tkinter库(内置GUI库)"></a>Tkinter库(内置GUI库)</h1><h2 id="窗口的创建和设置"><a href="#窗口的创建和设置" class="headerlink" title="窗口的创建和设置"></a>窗口的创建和设置</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line">root=Tk()<span class="comment">#生成主窗口</span></span><br><span class="line">root.geometry(<span class="string">'250x250'</span>)<span class="comment">#改变窗体大小（‘宽x高’），注意是x不是*</span></span><br><span class="line">root.geometry(<span class="string">'+450+450'</span>)<span class="comment">#改变窗体位置（‘+横坐标+纵坐标’）</span></span><br><span class="line">root.title(<span class="string">'标题'</span>)<span class="comment">#修改框体的名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root.mainloop()<span class="comment">#显示主窗口</span></span><br><span class="line"></span><br><span class="line">root.resizable(<span class="number">0</span>, <span class="number">0</span>)将窗口大小设置为不可变</span><br><span class="line">root.resizable(<span class="literal">False</span>, <span class="literal">False</span>)将窗口大小设置为不可变</span><br></pre></td></tr></tbody></table></figure><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><h3 id="控件的共同属性"><a href="#控件的共同属性" class="headerlink" title="控件的共同属性"></a>控件的共同属性</h3><pre><code>cursor    鼠标移动到框架时，光标的形状(参数值：arrow[默认箭头], circle, cross[十字], plus，watch[圈圈转动]等）justify    显示多行文本的时候,设置不同行之间的对齐方式（参数值：LEFT, RIGHT, CENTER）bg (background)    背景颜色bd    加粗（默认 2 像素）    无fg (foreground)    前景颜色(字体颜色)padx    设置按钮文本与按钮边框x轴方向的距离pady    设置按钮文本与按钮边框y轴方向的距离state    设置按钮状态,参数值：NORMAL、ACTIVE、 DISABLED。默认 NORMALanchor    控制按钮文本的位置(参数值：S,W,E,N,SE,SW,NW,NE,CENTER,默认为CENTER)image    显示图像与PhotoImage 一起使用，图片只能为gif格式relief    三维效果 （参数值：FLAT、SUNKEN、RAISED、GROOVE、RIDGE。默认为 FLAT）bitmap    位图anchor    文本起始位置    CENTER(默认)，E,S,W,N,NE,SE,SW,NWbitmap    黑白二值图标    网上查找cursor    鼠标悬停光标    网上查找font    字体    无height    高（文本控件的单位为行，不是像素）    无width    宽(文本控件的单位为行，不是像素)    无</code></pre><h3 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h3><p>用来显示文字或图片<br>tkinter.Label(text=”文字”)</p><h3 id="Button按钮"><a href="#Button按钮" class="headerlink" title="Button按钮"></a>Button按钮</h3><p>类似标签,但提供额外的功能,例如鼠标掠过、按下、释放以及键盘操作、事件</p><p><strong>参数</strong><br>command :按钮关联的函数，当按钮被点击时，执行该函数</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">button=Button(root,command=绑定的函数,text=<span class="string">"转换温度"</span>)</span><br><span class="line">button.pack()</span><br></pre></td></tr></tbody></table></figure><h3 id="Entry单行文字域"><a href="#Entry单行文字域" class="headerlink" title="Entry单行文字域"></a>Entry单行文字域</h3><p>单行文字域用来收集键盘输入</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">entry=Entry(窗口对象)     <span class="comment">#创建Entry对象</span></span><br><span class="line">entry.pack()  <span class="comment">#显示 </span></span><br><span class="line">entry.get()   <span class="comment">#获取输入内容</span></span><br><span class="line">entry.config()   <span class="comment">#修改相应属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eventhandler</span>(<span class="params">event</span>):</span></span><br><span class="line">    entry.focus() <span class="comment">#(聚焦)文本框</span></span><br><span class="line">entry=Entry(root,bd=<span class="number">4</span>)</span><br><span class="line">entry.bind_all(<span class="string">'&lt;Control-f&gt;'</span>, eventhandler ) <span class="comment"># 绑定快捷键Ctrl-f</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Text多行文字区域"><a href="#Text多行文字区域" class="headerlink" title="Text多行文字区域"></a>Text多行文字区域</h3><pre><code>可用来收集(或显示)用户输入的文字</code></pre><h3 id="Listbox列表框："><a href="#Listbox列表框：" class="headerlink" title="Listbox列表框："></a>Listbox列表框：</h3><p>一个选项列表,用户可以从中选择</p><h3 id="Menu菜单"><a href="#Menu菜单" class="headerlink" title="Menu菜单"></a>Menu菜单</h3><p>点下菜单按钮后弹出的一个选项列表,用户可以从中选择<br>菜单栏(menu bar)、菜单(menu)、菜单项(menu item)<br><strong>菜单属性</strong><br>tearoff的作用就是可以将每个菜单分离出去，单独形成一个子窗口。默认是打开的状态1，通常将tearoff设置为0。<br>activebackground设置活动背景色。当鼠标移动到菜单选项上时，该菜单项的背景色。<br>activeforeground设置活动前景色。当鼠标移动到菜单选项上时，该菜单项文字显示的颜色。<br><strong>菜单方法</strong><br>add_command() 通常用于 给菜单添加普通的菜单项。<br>add_cascade() 通常用于 给menu对象添加一个瀑布菜单，点击menu对象就会弹出多个菜单项。<br>add_radiobutton() 给菜单添加radiobutton菜单项。<br>add_checkbutton() 给菜单添加checkbutton菜单项<br>add_separator() 给菜单添加分割线<br>add() 给菜单添加指定类型的菜单项，前面5中添加菜单项的方法其实都是在add函数的基础上做一个封装。<br>type() 查看菜单项的类型。通常菜单项的类型有”cascade”, “checkbutton”, “command”, “radiobutton”, “separator”, “tearoff”。</p><h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><h3 id="Frame-框架-包含其他组件的纯容器"><a href="#Frame-框架-包含其他组件的纯容器" class="headerlink" title="Frame    框架    包含其他组件的纯容器"></a>Frame    框架    包含其他组件的纯容器</h3><h3 id="Checkbutton-选择按钮-一组方框-可以选择其中的任意个"><a href="#Checkbutton-选择按钮-一组方框-可以选择其中的任意个" class="headerlink" title="Checkbutton    选择按钮    一组方框,可以选择其中的任意个"></a>Checkbutton    选择按钮    一组方框,可以选择其中的任意个</h3><h3 id="Menubutton-菜单按钮-用来包含菜单的组件-有下拉式、层叠式等等"><a href="#Menubutton-菜单按钮-用来包含菜单的组件-有下拉式、层叠式等等" class="headerlink" title="Menubutton    菜单按钮    用来包含菜单的组件(有下拉式、层叠式等等)"></a>Menubutton    菜单按钮    用来包含菜单的组件(有下拉式、层叠式等等)</h3><h3 id="Message-消息框-类似于标签-但可以显示多行文本"><a href="#Message-消息框-类似于标签-但可以显示多行文本" class="headerlink" title="Message    消息框    类似于标签,但可以显示多行文本"></a>Message    消息框    类似于标签,但可以显示多行文本</h3><h3 id="Radiobutton-单选按钮-一组按钮-其中只有一个可被“按下”-类似-HTML-中的-radio"><a href="#Radiobutton-单选按钮-一组按钮-其中只有一个可被“按下”-类似-HTML-中的-radio" class="headerlink" title="Radiobutton    单选按钮    一组按钮,其中只有一个可被“按下” (类似 HTML 中的 radio)"></a>Radiobutton    单选按钮    一组按钮,其中只有一个可被“按下” (类似 HTML 中的 radio)</h3><h3 id="Scale-进度条-线性“滑块”组件-可设定起始值和结束值-会显示当前位置的精确值"><a href="#Scale-进度条-线性“滑块”组件-可设定起始值和结束值-会显示当前位置的精确值" class="headerlink" title="Scale    进度条    线性“滑块”组件,可设定起始值和结束值,会显示当前位置的精确值"></a>Scale    进度条    线性“滑块”组件,可设定起始值和结束值,会显示当前位置的精确值</h3><h3 id="Scrollbar-滚动条-对其支持的组件-文本域、画布、列表框、文本框-提供滚动功能"><a href="#Scrollbar-滚动条-对其支持的组件-文本域、画布、列表框、文本框-提供滚动功能" class="headerlink" title="Scrollbar    滚动条    对其支持的组件(文本域、画布、列表框、文本框)提供滚动功能"></a>Scrollbar    滚动条    对其支持的组件(文本域、画布、列表框、文本框)提供滚动功能</h3><h3 id="Toplevel-顶级-类似框架-但提供一个独立的窗口容器"><a href="#Toplevel-顶级-类似框架-但提供一个独立的窗口容器" class="headerlink" title="Toplevel    顶级    类似框架,但提供一个独立的窗口容器"></a>Toplevel    顶级    类似框架,但提供一个独立的窗口容器</h3><h3 id="弹窗messagebox"><a href="#弹窗messagebox" class="headerlink" title="弹窗messagebox"></a>弹窗messagebox</h3><p><code>from tkinter import messagebox</code></p><p>消息提示框    messagebox.showinfo(‘弹窗名称’,’弹窗内容 ‘)<br>消息警告框    messagebox.showwarning(‘弹窗名称’,’弹窗内容 ‘)<br>错误消息框    messagebox.showerror(‘弹窗名称’,’弹窗内容 ’ )<br>对话框    messagebox.askokcancel(‘弹窗名称’, ‘弹窗内容 ‘)    确定/取消，返回值true/false<br>对话框    messagebox.askquestion (‘弹窗名称’, ‘弹窗内容 ‘)    是/否，返回值yes/no<br>对话框    messagebox.askyesno (‘弹窗名称’,’弹窗内容 ‘)    是/否， 返回值true/false<br>对话框    messagebox.askretrycancel (‘弹窗名称’,’弹窗内容 ‘)    重试/取消，返回值true/false</p><h2 id="控件几何状态管理方法"><a href="#控件几何状态管理方法" class="headerlink" title="控件几何状态管理方法"></a>控件几何状态管理方法</h2><p>pack和grid请参考：<a href="https://www.jianshu.com/p/91844c5bca78">https://www.jianshu.com/p/91844c5bca78</a></p><h3 id="pack"><a href="#pack" class="headerlink" title="pack()"></a>pack()</h3><p>是一种简单的布局方法，如果不加参数的默认方式，将按布局语句的先后，以最小占用空间的方式自上而下地排列控件实例，并且保持控件本身的最小尺寸。</p><p>使用pack()方法可设置 fill、side 等属性参数。其中，参数fill 可取值：fill=X,fill=Y或fill=BOTH，分别表示允许控件向水平方向、垂直方向或二维伸展填充未被占用控件。参数 side 可取值：side=TOP(默认)，side=LEFT,side=RIGHT,side=BOTTOM,分别表示本控件实例的布局相对于下一个控件实例的方位。</p><p>Button(root,text=’A’).pack(side=LEFT,expand=YES,fill=Y)</p><h3 id="grid"><a href="#grid" class="headerlink" title="grid()"></a>grid()</h3><p>是基于网格的布局。先虚拟一个二维表格，再在该表格中布局控件实例。由于在虚拟表格的单元中所布局的控件实例大小不一，单元格也没有固定或均一的大小，因此其仅用于布局的定位。pack()方法与grid()方法不能混合使用。<br>grid()方法常用布局参数如下：</p><p>column: 控件实例的起始列，最左边为第0列。<br>columnspan: 控件实例所跨越的列数，默认为1列。<br>ipadx,ipady: 控件实例所呈现区域内部的像素数，用来设置控件实例的大小。<br>padx,pady: 控件实例所占据空间像素数，用来设置实例所在单元格的大小。<br>row: 控件实例的起始行，最上面为第0行。<br>rowspan: 控件实例的起始行数，默认为1行。</p><h3 id="place"><a href="#place" class="headerlink" title="place()"></a>place()</h3><p>根据控件实例在父容器中的绝对或相对位置参数进行布局。其常用布局参数如下：</p><p>x,y：控件实例在根窗体中水平和垂直方向上的其实位置（单位为像素）。注意，根窗体左上角为0,0,水平向右，垂直向下为正方向。</p><p>relx,rely：控件实例在根窗体中水平和垂直方向上起始布局的相对位置。即相对于根窗体宽和高的比例位置，取值在0.0~1.0之间。</p><p>height,width：控件实例本身的高度和宽度（单位为像素）。</p><p>relheight,relwidth：控件实例相对于根窗体的高度和宽度比例，取值在0.0~1.0之间。</p><p>利用place()方法配合relx,rely和relheight,relwidth参数所得的到的界面可自适应根窗体尺寸的大小。place()方法与grid()方法可以混合使用。</p><h1 id="图像处理库"><a href="#图像处理库" class="headerlink" title="图像处理库"></a>图像处理库</h1><h2 id="PIL，cv2，plt的使用与区别"><a href="#PIL，cv2，plt的使用与区别" class="headerlink" title="PIL，cv2，plt的使用与区别"></a>PIL，cv2，plt的使用与区别</h2><ol><li>建议使用opencv的库来进行图像处理的基本操作，数据格式为numpy，可以直接进行numpy的处理；</li><li>进行折线图这类图绘制的时候，一般使用matplotlib库。</li><li>Opencv默认为 BGR顺序，而其他软件（PIL、scopy.misc）一般使用RGB。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较三者的打开图片、显示图片、打开图片的类型</span></span><br><span class="line"><span class="comment"># ************PIL************</span></span><br><span class="line">PIL_img = Image.<span class="built_in">open</span>(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(PIL_img))  <span class="comment"># &lt;class 'PIL.JpegImagePlugin.JpegImageFile'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(PIL_img.size)   <span class="comment"># (1152, 720) (w,h)</span></span><br><span class="line"><span class="built_in">print</span>(np.array(PIL_img).shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">PIL_img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ************cv2************</span></span><br><span class="line">cv2_img = cv2.imread(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cv2_img))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(cv2_img.shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">cv2.imshow(<span class="string">'cv2'</span>, cv2_img)</span><br><span class="line"><span class="comment"># cv2.waitKey()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ************plt***********</span></span><br><span class="line">plt_img = plt.imread(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(plt_img))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(plt_img.shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">plt.imshow(plt_img)  <span class="comment"># PIL_img也可以显示</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>OpenCV中已经包含如下应用领域功能：二维和三维特征工具箱、运动估算、人脸识别系统、姿势识别、人机交互、移动机器人、运动理解、对象鉴别、分割与识别、立体视觉、运动跟踪、增强现实（AR技术）。基于上述功能实现需要，OpenCV中还包括以下基于统计学机器学习库：Boosting算法、Decision Tree(决策树)学习、Gradient Boosting算法、EM算法(期望最大化)、KNN算法、朴素贝叶斯分类、人工神经网络、随机森林、支掌向量机。</p><p>cv2默认为 BGR顺序，而其他（PIL、scopy.misc）一般使用RGB</p><p>导入的时候采用 import cv2。</p><h3 id="基本库函数"><a href="#基本库函数" class="headerlink" title="基本库函数"></a>基本库函数</h3><p>cv2.imread(filepath,flags) #读入一张图像</p><p>filepath：要读入图片的完整路径<br>flags：读入图片的标志<br>cv2.IMREAD_COLOR：默认参数，读入一副彩色图片，忽略alpha通道<br>cv2.IMREAD_GRAYSCALE：读入灰度图片<br>cv2.IMREAD_UNCHANGED：顾名思义，读入完整图片，包括alpha通道</p><p>cv2.imshow(wname,img) #显示图像</p><p>第一个参数是显示图像的窗口的名字<br>第二个参数是要显示的图像（imread读入的图像），窗口大小自动调整为图片大小<br>cv2.imshow(‘image’,img) cv2.waitKey(0) #等待键盘输入，单位为毫秒，即等待指定的毫秒数看是否有键盘输入，若在等待时间内按下任意键则返回按键的ASCII码，程序继续运行。 #若没有按下任何键，超时后返回-1。参数为0表示无限等待。不调用waitKey的话，窗口会一闪而逝，看不到显示的图片。 cv2.destroyAllWindow() #销毁所有窗口 cv2.destroyWindow(wname) #销毁指定窗口</p><p>cv2.imwrite(file，img，num) #保存一张图像</p><p>第一个参数是要保存的文件名<br>第二个参数是要保存的图像。可选的第三个参数，它针对特定的格式：对于JPEG，其表示的是图像的质量，用0 - 100的整数表示，默认95。<br>第三个参数表示的是压缩级别。默认为3.<br>img.copy() #图像复制</p><p>cv2.cvtColor() #图像颜色空间转换</p><p>img2 = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) #灰度化：彩色图像转为灰度图像<br>img3 = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB) #彩色化：灰度图像转为彩色图像</p><h3 id="cv2-COLOR-X2Y，其中X-Y-RGB-BGR-GRAY-HSV-YCrCb-XYZ-Lab-Luv-HLS"><a href="#cv2-COLOR-X2Y，其中X-Y-RGB-BGR-GRAY-HSV-YCrCb-XYZ-Lab-Luv-HLS" class="headerlink" title="cv2.COLOR_X2Y，其中X,Y = RGB, BGR, GRAY, HSV, YCrCb, XYZ, Lab, Luv, HLS"></a>cv2.COLOR_X2Y，其中X,Y = RGB, BGR, GRAY, HSV, YCrCb, XYZ, Lab, Luv, HLS</h3><p>cv2.resize(image, image2,dsize) #图像缩放：(输入原始图像，输出新图像，图像的大小)<br>cv2.flip(img,flipcode) #图像翻转，flipcode控制翻转效果。</p><p>flipcode = 0：沿x轴翻转；flipcode &gt; 0：沿y轴翻转；flipcode &lt; 0：x,y轴同时翻转<br>cv2.warpAffine(img, M, (400, 600)) #图像仿射变换 ：平移；裁剪、剪切、旋转、仿射变换，<br>M、M_crop、M_shear、M_rotate</p><p>cv2.putText(img,’text’,(50,150) #图像添加文字：(照片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细)</p><p>cv2.putText(image, caption, (b[0], b[1] - 10), cv2.FONT_HERSHEY_PLAIN, 1, (255, 0, 0), 1) cv2.putText(I,’there 0 error(s):’,(50,150),cv2.FONT_HERSHEY_COMPLEX,6,(0,0,255),25)</p><p>cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2) #画出矩行：img原图、(x，y)是矩阵的左上点坐标、(x+w，y+h)是矩阵的右下点坐标、(0,255,0)是画线对应的rgb颜色、2是所画的线的宽度。</p><p>cv2.boundingRect(img) #返回图像的四值属性：img是一个二值图，即是它的参数； 返回四个值，分别是x，y，w，h； x，y是矩阵左上点的坐标，w，h是矩阵的宽和高。</p><h2 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h2><p>PIL（Python Imaging Library）是Python常用的图像处理库，而Pillow是PIL的一个友好Fork，提供了了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。相比opencv更为轻巧。Image模块是在Python PIL图像处理中常见的模块，对图像进行基础操作的功能基本都包含于此模块内。如open、save、show等功能。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>#安装pillow<br>pip install pillow</p><p>from PIL import Image<br>Image 是 PIL 库中代表一个图像的类（对象）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1. 剪裁图像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">rect = <span class="number">80</span>, <span class="number">20</span>, <span class="number">310</span>, <span class="number">360</span></span><br><span class="line">image.crop(rect).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成缩略图</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">size = <span class="number">128</span>, <span class="number">128</span></span><br><span class="line">image.thumbnail(size)</span><br><span class="line">image.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 缩放和黏贴图像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image1 = Image.<span class="built_in">open</span>(<span class="string">'./res/luohao.png'</span>)</span><br><span class="line">image2 = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">rect = <span class="number">80</span>, <span class="number">20</span>, <span class="number">310</span>, <span class="number">360</span></span><br><span class="line">guido_head = image2.crop(rect)</span><br><span class="line">width, height = guido_head.size</span><br><span class="line">image1.paste(guido_head.resize((<span class="built_in">int</span>(width / <span class="number">1.5</span>), <span class="built_in">int</span>(height / <span class="number">1.5</span>))), (<span class="number">172</span>, <span class="number">40</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 旋转和翻转</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.png'</span>)</span><br><span class="line">     image.rotate(<span class="number">180</span>).show()</span><br><span class="line">     image.transpose(Image.FLIP_LEFT_RIGHT).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 操作像素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>, <span class="number">310</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">360</span>):</span><br><span class="line">          image.putpixel((x, y), (<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">     image.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 滤镜效果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">image.<span class="built_in">filter</span>(ImageFilter.CONTOUR).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h2><p>Matplotlib是一个Python 2D绘图库，它可以在不同的平台上以各种硬拷贝格式和交互环境生成发布质量数据。Matplotlib可以用于Python脚本、Python和IPython shell、Jupyter notebook、web应用服务器和四个图形用户界面工具包。对于简单的绘图，pyplot模块提供了一个类似于matlab的接口，特别是与IPython结合使用时。对于power用户，您可以通过面向对象的界面或通过MATLAB用户熟悉的一组函数来完全控制线样式、字体属性、轴属性等.</p><p>matplotlib.pylot是绘制各类可视化图形的命令字库</p><p>更多学习，可参考Matplotlib中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn</a></p><p>#安装<br>pip install matplotlib<br>#导库<br>import matplotlib.pyplot as plt</p><h2 id="pyplot模块方法"><a href="#pyplot模块方法" class="headerlink" title="pyplot模块方法"></a>pyplot模块方法</h2><p>1.plt.imread(fname， format=None)<br>将图像从文件读取到数组中。返回一个numpy.array<br>  fname:<br>    要读取的图像文件：文件名、URL 或以读取二进制模式打开的类似文件的对象。<br>    不推荐传递 URL。请打开URL进行阅读并将结果传递给Pillow<br>  format:<br>    用于读取数据而假定的图像文件格式。如果格式设置为”png”，如果 fname 是扩展名为”.png”的路径或打开的文件，或者如果它是 URL，则图像将作为 PNG 文件加载。在所有其他情况下，格式将被忽略，PIL 会自动检测格式</p><p>2.plt.imshow(numpy.array)<br>将数据显示为图像<br>3.plt.show()<br>显示所有打开的图表</p><h1 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h1><h2 id="数学矩阵知识"><a href="#数学矩阵知识" class="headerlink" title="数学矩阵知识"></a>数学矩阵知识</h2><p><a href="https://paul.pub/the-matrix/#id-%E6%A0%87%E9%87%8F%E5%90%91%E9%87%8F%E7%9F%A9%E9%98%B5%E5%92%8C%E5%BC%A0%E9%87%8F">https://paul.pub/the-matrix/#id-%E6%A0%87%E9%87%8F%E5%90%91%E9%87%8F%E7%9F%A9%E9%98%B5%E5%92%8C%E5%BC%A0%E9%87%8F</a></p><h3 id="矩阵算术"><a href="#矩阵算术" class="headerlink" title="矩阵算术"></a>矩阵算术</h3><h4 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h4><p>矩阵的加减法只在两个矩阵具有相同大小时才有意义。</p><p>两个矩阵的加（减）法通过对应元素相加（减）得到</p><h4 id="标量乘法"><a href="#标量乘法" class="headerlink" title="标量乘法"></a>标量乘法</h4><p>设A为一矩阵，b为一标量，则bA为将A中的每一个元素乘以b而构成的一个矩阵</p><h4 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h4><p>矩阵的转置是以对角线为轴的镜像。</p><p>这条从左上角到右下角的对角线被称之为主对角线</p><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><p>第一个矩阵的列要等于第二个矩阵的行，则两矩阵可以相乘。<br>一个m∗n的的A矩阵，和一个n∗p的B矩阵相乘，将得到一个m∗p的矩阵C</p><h3 id="逆"><a href="#逆" class="headerlink" title="逆"></a>逆</h3><p>逆(Inverse)<br>设A为n阶方阵，如果存在一个n阶方阵B，使得<br>AB=BA=In<br>AB=BA=In</p><p>则称A为可逆矩阵，B为A的逆阵，记作 B=A−1B=A−1<br>(A−1)−1=A(A−1)−1=A<br>(kA)−1=1kA−1(k≠0)(kA)−1=1kA−1(k≠0)<br>A、B均是同阶可逆矩阵，则(AB)−1=B−1A−1A、B均是同阶可逆矩阵，则(AB)−1=B−1A−1<br>(A−1)T=(AT)−1(A−1)T=(AT)−1</p><h4 id="求逆矩阵一般有三种方法。"><a href="#求逆矩阵一般有三种方法。" class="headerlink" title="求逆矩阵一般有三种方法。"></a>求逆矩阵一般有三种方法。</h4><p>1、方阵的逆矩阵等于方阵的伴随矩阵与方阵对应的行列式的值的倒数的积；</p><p>即A^-1=A*/(|A|).</p><p>只有当|A|≠0时，方阵A才可逆。</p><p>这种方法并不简便。</p><p>2、利用初等变换求逆矩阵；</p><p>一般是将矩阵(A,E)化为(E,A^-1)的形式；从而得到A逆矩阵；</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>为了创建一个2D（二维）数组，我们传递一个列表的列表（或者是一个序列的序列）给array()函数。如果我们想要一个3D（三维）数组，我们就要传递一个列表的列表的列表，如果是一个4D（四维）数组，那就是列表的列表的列表的列表，以此类推。</p><h3 id="多维数组切片"><a href="#多维数组切片" class="headerlink" title="多维数组切片"></a>多维数组切片</h3><p>通过对每个以逗号分隔的维度执行单独的切片，你可以对多维数组进行切片。因此，对于2D数组，我们的第一片定义了行的切片，第二片定义了列的切片。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>np.zeros():可以创建指定长度或者形状的全0数组</p><p>ones():可以创建指定长度或者形状的全1数组</p><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p><p>为了创建数字组成的数组，NumPy提供了一个类似于range的函数，该函数返回数组而不是列表。<br>array = np.arange( 10, 31,5 )   -&gt;array([10, 15, 20, 25, 30])</p><h3 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h3><p>array = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])</p><p>#数组维度<br>print(array.ndim)</p><p>#数组形状<br>print(array.shape)</p><p>#数组元素个数<br>print(array.size)</p><p>#数组元素类型<br>print(array.dtype)</p><h3 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h3><p>数组很重要，因为它可以使我们不用编写循环即可对数据执行批量运算。这通常叫做矢量化</p><h4 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h4><p>对应位置的数相运算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">arr2 = np.ones([<span class="number">2</span>,<span class="number">3</span>],dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 - arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 / arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 ** <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>print(np.dot(arr3,arr4))</p><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><p>pandas是python第三方库，提供高性能易用数据类型和分析工具。</p><p>pandas基于numpy实现，常与numpy和matplotlib一同使用</p><p>更多学习，请参考pandas中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类型）以及一组与之相关的数据标签（即索引）组成.</p><p>可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p><p>Seris中可以使用index设置索引列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#与字典不同的是：Series允许索引重复</span></span><br><span class="line">s = pd.Series([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>],index=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Series 可以用字典实例化</span></span><br><span class="line">d = {<span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'c'</span>: <span class="number">2</span>}</span><br><span class="line">pd.Series(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过Series的values和index属性获取其数组表示形式和索引对象</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s.values)</span><br><span class="line"><span class="built_in">print</span>(s.index)</span><br></pre></td></tr></tbody></table></figure><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame是一个表格型的数据结构，类似于Excel或sql表</p><p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）<br>DataFrame可以进行行索引和列索引，它可以被看做由Series组成的字典（共用同一个索引）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用多维数组字典、列表字典生成 DataFrame</span></span><br><span class="line">data = {<span class="string">'state'</span>: [<span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>, <span class="string">'Nevada'</span>, <span class="string">'Nevada'</span>], <span class="string">'year'</span>: [<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2001</span>, <span class="number">2002</span>], <span class="string">'pop'</span>: [<span class="number">1.5</span>, <span class="number">1.7</span>, <span class="number">3.6</span>, <span class="number">2.4</span>, <span class="number">2.9</span>]}</span><br><span class="line">frame = pd.DataFrame(data) </span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">frame2 = pd.DataFrame(data, columns=[<span class="string">'year'</span>, <span class="string">'state'</span>, <span class="string">'pop'</span>, <span class="string">'debt'</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>])</span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span></span><br><span class="line">frame2[<span class="string">'debt'</span>] = <span class="number">16.5</span></span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习</title>
      <link href="/2022/031717083.html"/>
      <url>/2022/031717083.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络数据采集概述"><a href="#网络数据采集概述" class="headerlink" title="网络数据采集概述"></a>网络数据采集概述</h1><p>爬虫（crawler）也经常被称为网络蜘蛛（spider），是按照一定的规则自动浏览网站并获取所需信息的机器人程序（自动化脚本代码），被广泛的应用于互联网搜索引擎和数据采集。使用过互联网和浏览器的人都知道，网页中除了供用户阅读的文字信息之外，还包含一些超链接，网络爬虫正是通过网页中的超链接信息，不断获得网络上其它页面的地址，然后持续的进行数据采集。正因如此，网络数据采集的过程就像一个爬虫或者蜘蛛在网络上漫游，所以才被形象的称为爬虫或者网络蜘蛛。</p><h2 id="爬虫的应用领域"><a href="#爬虫的应用领域" class="headerlink" title="爬虫的应用领域"></a>爬虫的应用领域</h2><p>爬虫的应用领域其实非常广泛，下面我们列举了其中的一部分</p><ol><li>搜索引擎</li><li>新闻聚合</li><li>社交应用</li><li>舆情监控</li><li>行业数据<h2 id="爬虫合法性探讨"><a href="#爬虫合法性探讨" class="headerlink" title="爬虫合法性探讨"></a>爬虫合法性探讨</h2></li></ol><p>经常听人说起“爬虫写得好，牢饭吃到饱”，那么编程爬虫程序是否违法呢？关于这个问题，我们可以从以下几个角度进行解读。</p><ol><li>网络爬虫这个领域目前还属于拓荒阶段，虽然互联网世界已经通过自己的游戏规则建立起了一定的道德规范，即 Robots 协议（全称是“网络爬虫排除标准”），但法律部分还在建立和完善中，也就是说，现在这个领域暂时还是灰色地带。</li><li>“法不禁止即为许可”，如果爬虫就像浏览器一样获取的是前端显示的数据（网页上的公开信息）而不是网站后台的私密敏感信息，就不太担心法律法规的约束，因为目前大数据产业链的发展速度远远超过了法律的完善程度。</li><li>在爬取网站的时候，需要限制自己的爬虫遵守 Robots 协议，同时控制网络爬虫程序的抓取数据的速度；在使用数据的时候，必须要尊重网站的知识产权（从Web 2.0时代开始，虽然Web上的数据很多都是由用户提供的，但是网站平台是投入了运营成本的，当用户在注册和发布内容时，平台通常就已经获得了对数据的所有权、使用权和分发权）。如果违反了这些规定，在打官司的时候败诉几率相当高。</li><li>适当的隐匿自己的身份在编写爬虫程序时必要的，而且最好不要被对方举证你的爬虫有破坏别人动产（例如服务器）的行为。</li><li>不要在公网（如代码托管平台）上去开源或者展示你的爬虫代码，这些行为通常会给自己带来不必要的麻烦。</li></ol><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><p>下面我们先介绍一些开发爬虫程序的辅助工具，这些工具相信能帮助你事半功倍。</p><ol><li><p>Chrome Developer Tools：谷歌浏览器内置的开发者工具。该工具最常用的几个功能模块是：</p><ul><li>元素（ELements）：用于查看或修改 HTML 元素的属性、CSS 属性、监听事件等。CSS 可以即时修改，即时显示，大大方便了开发者调试页面。</li><li>控制台（Console）：用于执行一次性代码，查看 JavaScript 对象，查看调试日志信息或异常信息。控制台其实就是一个执行 JavaScript 代码的交互式环境。</li><li>源代码（Sources）：用于查看页面的 HTML 文件源代码、JavaScript 源代码、CSS 源代码，此外最重要的是可以调试 JavaScript 源代码，可以给代码添加断点和单步执行。</li><li>网络（Network）：用于 HTTP 请求、HTTP 响应以及与网络连接相关的信息。</li><li>应用（Application）：用于查看浏览器本地存储、后台任务等内容，本地存储主要包括Cookie、Local Storage、Session Storage等。</li></ul><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004034.png" alt="chrome-developer-tools"></p></li><li><p>Postman：功能强大的网页调试与 RESTful 请求工具。Postman可以帮助我们模拟请求，非常方便的定制我们的请求以及查看服务器的响应。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004048.png" alt="postman"></p></li><li><p>HTTPie：命令行HTTP客户端。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install httpie</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http --header http --header https://movie.douban.com/</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 24 Aug 2021 16:48:00 GMT</span><br><span class="line">Keep-Alive: timeout=30</span><br><span class="line">Server: dae</span><br><span class="line">Set-Cookie: bid=58h4BdKC9lM; Expires=Wed, 24-Aug-22 16:48:00 GMT; Domain=.douban.com; Path=/</span><br><span class="line">Strict-Transport-Security: max-age=15552000</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-DOUBAN-NEWBID: 58h4BdKC9lM</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>builtwith</code>库：识别网站所用技术的工具。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install builtwith</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> builtwith</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"><span class="built_in">print</span>(builtwith.parse(<span class="string">'http://www.bootcss.com/'</span>))</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>python-whois</code>库：查询网站所有者的工具。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-whois</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> whois</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(whois.whois(<span class="string">'https://www.bootcss.com'</span>))</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="爬虫的基本工作流程"><a href="#爬虫的基本工作流程" class="headerlink" title="爬虫的基本工作流程"></a>爬虫的基本工作流程</h2><h3 id="获取网页"><a href="#获取网页" class="headerlink" title="获取网页"></a>获取网页</h3><p>获取网页源代码</p><h3 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h3><p>获取网也源代码后，接下来就是分析网页源代码，从中提取我们想要的数据。首先，最通用的方法便是采用正则表达式提取，这是一个万能的方法，但是在构造正则表达式时比较复杂且容易出错。</p><p>由于网页的结构有一定的规侧，所以还有一些根据网页节点属性、CSS选择器或XPath来提取网顶信息的库，如Beautifu1Soup、<br>pyquery、1xm1等。使用这些库，我们可以高效快速地从中提取网页信息，如节点的属性、文本值等。<br>提取信息是爬虫非常重要的部分，它可以使杂乱的数据变得条理清晰，以便我们后续处理和分析数据。</p><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>提取信息后，我们一般会将提取到的数据保存到某处以便后续使用。这里保存形式有多种多样，如可以简单保存为TXT文本或json文本，也可以保存到数据库，如MySQL和MongoDB等，也可保存至远程服务器，如借助SFTP进行操作等。</p><h1 id="代理ip"><a href="#代理ip" class="headerlink" title="代理ip"></a>代理ip</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>代理实际上指的就是代理服务器，英文叫作proxy server，它的功能是代理网络用户去取得网络信息。形象地说，它是网络信息的中转站。在我们正常请求一个网站时，是发送了请求给Web服务器，Web服务器把响应传回给我们。如果设置了代理服务器，实际上就是在本机和服务器之间搭建了一个桥，此时本机不是直接向Web服务器发起请求，而是向代理服务器发出请求，请求会发送给代理服务器，然后由代理服务器再发送给Web服务器，接着由代理服务器再把Web服务器返回的响应转发给本机。这样我们同样可以正常访问网页，但这个过程中Web服务器识别出的真实IP就不再是我们本机的IP了，就成功实现了IP伪装，这就是代理的基本原理。</p><h2 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h2><p>突破自身IP访问限制，访问一些平时不能访问的站点。<br>访问一些单位或团体内部资源：比如使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务。<br>提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。<br>隐藏真实IP：上网者也可以通过这种方法隐藏自己的IP，免受攻击。对于爬虫来说，我们用代理就是为了隐藏自身IP，防止自身的IP被封锁。</p><h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><h2 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h2><p>在发起一个 HTTP 请求的时候，会有一个请求头 Request Headers，<br>如果不设置Request Headers 信息，某些网站会发现这不是一个正常的浏览器发起的请求，网站可能会返回异常的结果，导致网页抓取失败。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 headers 参数来指定请求头</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">requests.get(url, headers=headers)</span><br></pre></td></tr></tbody></table></figure><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>r = requests.get(url)<br>是构造一个向服务器请求资源的Request对象 ,返回一个包含服务器资源的Response对象。</p><h3 id="Response对象的方法"><a href="#Response对象的方法" class="headerlink" title="Response对象的方法"></a>Response对象的方法</h3><p>r.text()</p><h3 id="Response对象的属性"><a href="#Response对象的属性" class="headerlink" title="Response对象的属性"></a>Response对象的属性</h3><p>r.status_code： HTTP请求的返回状态，200表示连接成功，404表示失败<br>r.text： HTTP响应内容的字符串形式，即，url对应的页面内容</p><p>r.encoding：从HTTP header中猜测的响应内容编码方式</p><p>r.apparent_encoding：从内容中分析出的响应内容编码方式（备选编码方式）</p><p>r.content： HTTP响应内容的二进制形式</p><h2 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h2><p>图片、音频、视频这些文件本质上都是由二进制码组成的，由于有特定的保存格式和对应的解析方式，我们才可以看到这些形形色色的多媒体。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests r = requests.get(<span class="string">'https://github.com/favicon.ico'</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   f.write(r.content)</span><br></pre></td></tr></tbody></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = {<span class="string">'file'</span>: <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)} </span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files) </span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></tbody></table></figure><h2 id="获取和设置-Cookies"><a href="#获取和设置-Cookies" class="headerlink" title="获取和设置 Cookies"></a>获取和设置 Cookies</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.baidu.com'</span>) </span><br><span class="line"><span class="comment"># 先调用 cookies 属性即可成功得到 Cookies，可以发现它是 RequestCookieJar 类型</span></span><br><span class="line"><span class="built_in">print</span>(r.cookies) </span><br><span class="line"><span class="comment"># 用 items 方法将其转化为元组组成的列表，遍历输出每一个 Cookie 的名称和值，实现 Cookie 的遍历解析。</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items(): </span><br><span class="line">   <span class="built_in">print</span>(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></tbody></table></figure><h2 id="Session维持"><a href="#Session维持" class="headerlink" title="Session维持"></a>Session维持</h2><p>在 requests 中，如果直接利用 get 或 post 等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的 Session，相当于你用两个浏览器打开了不同的页面。 设想这样一个场景，第一个请求利用 post 方法登录了某个网站，第二次想获取成功登录后的自己的个人信息，你又用了一次 get 方法去请求个人信息页面。实际上，这相当于打开了两个浏览器，是两个完全不 相关的 Session，能成功获取个人信息吗？当然不能。 有人会问，我在两次请求时设置一样的 Cookies 不就行了？可以，但这样做起来很烦琐，我们有更简单的解决方法。 解决这个问题的主要方法就是维持同一个 Session，相当于打开一个新的浏览器选项卡而不是新开一个浏览器。但我又不想每次设置 Cookies，那该怎么办呢？这时候就有了新的利器 ——Session对象。 利用它，我们可以方便地维护一个 Session，而且不用担心 Cookies 的问题，它会帮我们自动处理好。</p><h1 id="Beautifulsoup"><a href="#Beautifulsoup" class="headerlink" title="Beautifulsoup"></a>Beautifulsoup</h1><p><a href="https://beautifulsoup.cn/">Beautiful Soup 4.4.0 文档</a><br>一个灵活又方便的HTML解析库，处理高效，支持多种解析器，利用它不使用正则表达式也能抓取网页内容。<br>from bs4 import BeautifulSoup</p><h2 id="BeautifulSoup对象"><a href="#BeautifulSoup对象" class="headerlink" title="BeautifulSoup对象"></a>BeautifulSoup对象</h2><p>Tag , NavigableString ,  , Comment .</p><h1 id="urlllib库"><a href="#urlllib库" class="headerlink" title="urlllib库"></a>urlllib库</h1><p>Python urllib 库用于操作网页 URL，并对网页的内容进行抓取处理。、</p><h2 id="request-打开和读取-URL。"><a href="#request-打开和读取-URL。" class="headerlink" title="request - 打开和读取 URL。"></a>request - 打开和读取 URL。</h2><p>urllib.request 定义了一些打开 URL 的函数和类，包含授权验证、重定向、浏览器 cookies等。</p><h3 id="urlopen"><a href="#urlopen" class="headerlink" title="urlopen"></a>urlopen</h3><p>urllib.request.urlopen(url, data=None, [timeout, ]*, cafile=None, capath=None, cadefault=False, context=None)返回一个响应对象(respose)<br>   url：url 地址。<br>   data：发送到服务器的其他数据对象，默认为 None。<br>   timeout：设置访问超时时间。</p><p>然后使用 read() 函数获取网页的 HTML 实体代码。</p><h2 id="urllib-error-包含-urllib-request-抛出的异常。"><a href="#urllib-error-包含-urllib-request-抛出的异常。" class="headerlink" title="urllib.error - 包含 urllib.request 抛出的异常。"></a>urllib.error - 包含 urllib.request 抛出的异常。</h2><h2 id="urllib-parse-解析-URL。"><a href="#urllib-parse-解析-URL。" class="headerlink" title="urllib.parse - 解析 URL。"></a>urllib.parse - 解析 URL。</h2><h2 id="urllib-robotparser-解析-robots-txt-文件。"><a href="#urllib-robotparser-解析-robots-txt-文件。" class="headerlink" title="urllib.robotparser - 解析 robots.txt 文件。"></a>urllib.robotparser - 解析 robots.txt 文件。</h2><h1 id="json库"><a href="#json库" class="headerlink" title="json库"></a>json库</h1><p>JSON 的本质是字符串。</p><h2 id="json-dumps"><a href="#json-dumps" class="headerlink" title="json.dumps"></a>json.dumps</h2><h2 id="json-dump"><a href="#json-dump" class="headerlink" title="json.dump"></a>json.dump</h2><h2 id="json-loads"><a href="#json-loads" class="headerlink" title="json.loads"></a>json.loads</h2><p>将json字符串转换为python对象如字典</p><h2 id="json-load"><a href="#json-load" class="headerlink" title="json.load"></a>json.load</h2>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matlab学习</title>
      <link href="/2022/031551719.html"/>
      <url>/2022/031551719.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.w3cschool.cn/matlab/matlab-5use28gb.html">https://www.w3cschool.cn/matlab/matlab-5use28gb.html</a></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><a href="https://www.w3cschool.cn/matlab/matlab-by7428gf.html">matlab常用命令</a></p><p>% 这是一行注释  ,ctrl +r  快捷注释</p><p>在命令行中，以逗号或分号分隔多条命令</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量名长度不超过63位<br>区分大小写<br>在使用变量之前，必须进行赋值。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MATLAB可以多个赋值</span><br><span class="line">`a = 2; b = 7; c = a * b`</span><br><span class="line"></span><br><span class="line">显示所有已经使用的变量名。</span><br><span class="line">who</span><br><span class="line"></span><br><span class="line">显示变量信息</span><br><span class="line">whos</span><br><span class="line"></span><br><span class="line">删除所有（或指定）从内存中的变量（S）。</span><br><span class="line">clear</span><br><span class="line">clear s</span><br></pre></td></tr></tbody></table></figure><h1 id="matlab数据类型"><a href="#matlab数据类型" class="headerlink" title="matlab数据类型"></a>matlab数据类型</h1><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><p>单引号括起来</p><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>Matlab中结构体数组与python中字典概念差不多，使用方法也类似</p><h3 id="直接定义"><a href="#直接定义" class="headerlink" title="直接定义"></a>直接定义</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">students.name = 'John';</span><br><span class="line">students.sex = 'Boy';</span><br><span class="line"></span><br><span class="line">%输出结果为 包含以下字段的 struct:</span><br><span class="line"></span><br><span class="line">name: 'John'</span><br><span class="line">sex: 'Boy'</span><br></pre></td></tr></tbody></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><a href="https://blog.csdn.net/weixin_49167174/article/details/119939748">https://blog.csdn.net/weixin_49167174/article/details/119939748</a></p><h3 id="矩阵的规则"><a href="#矩阵的规则" class="headerlink" title="矩阵的规则"></a>矩阵的规则</h3><p>矩阵元素必须在”[ ]”内；</p><p>矩阵的同行元素之间用空格（或”,”）隔开；</p><p>矩阵的行与行之间用”;”（或回车符）隔开；</p><p>矩阵的元素可以是数值、变量、表达式或函数；</p><h3 id="利用函数创建矩阵"><a href="#利用函数创建矩阵" class="headerlink" title="利用函数创建矩阵"></a>利用函数创建矩阵</h3><p>(1) ones()函数：产生全为1的矩阵，ones(n)：产生n<em>n维的全1矩阵，ones(m,n)：产生m</em>n维的全1矩阵；</p><p>(2) zeros()函数：产生全为0的矩阵；</p><p>(3) rand()函数：产生在（0，1）区间均匀分布的随机阵；</p><p>(4) eye()函数：产生单位阵；</p><p>(5) randn()函数：产生均值为0，方差为1的标准正态分布随机矩阵。</p><p>冒号表达式<br>(初始值：步长：终止值）</p><p>linspace(a, b, n)产生行向量<br>（a：第一个元素, b：最后一个元素, n：元素总数）<br>若元素总数n省略，则自动默认产生100个元素</p><h3 id="矩阵元素的引用"><a href="#矩阵元素的引用" class="headerlink" title="矩阵元素的引用"></a>矩阵元素的引用</h3><p>1.通过下标引用矩阵元素：第几行，第几列</p><p>2.通过序号引用矩阵元素<br>在matlab中，矩阵的元素是按列存储的即首先存储第一列元素、第二列…一直到最后一列。</p><p>矩阵元素的序号就是矩阵元素在内存中的排列顺序。</p><h3 id="矩阵拆分"><a href="#矩阵拆分" class="headerlink" title="矩阵拆分"></a>矩阵拆分</h3><p>利用冒号表达式获得子矩阵：</p><p>(1) A(:,j)表示取A矩阵的第j列全部元素；A(i,:)表示A矩阵第i行的全部元素；A(i,j)表示取A矩阵第i行、第j列的元素。</p><p>(2) A(i:i+m,:)表示取A矩阵第i<del>i+m行的全部元素；A(:,k:k+m)表示取A矩阵第k</del>k+m列的全部元素，A(i:i+m,k:k+m)表示取A矩阵第i<del>i+m行内，并在第k</del>k+m列中的所有元素。此外，还可利用一般向量和end运算符来表示矩阵下标，从而获得子矩阵。end表示某一维的末尾元素下标。</p><p>利用空矩阵[]删除矩阵的元素：</p><p>在MATLAB中，定义[]为空矩阵。给变量X赋空矩阵的语句为X=[]。注意，X=[]与clear X不同，clear是将X从工作空间中删除，而空矩阵则存在于工作空间中，只是维数为0。</p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><p>求矩阵的大小<br>size()</p><p>求矩阵某个元素的下标<br>[row,col]=find(a==5)</p><p>(下标变序号)<br>D=sub2ind(size(a),[I],[J])  I是行下标，J是列下标   </p><p>(序号变下标)<br>[I,J]=ind2sub(S,D)<br>D是序号   </p><h3 id="结构矩阵"><a href="#结构矩阵" class="headerlink" title="结构矩阵"></a>结构矩阵</h3><p>结构矩阵名.成员名=表达式</p><h2 id="元胞数组-cell"><a href="#元胞数组-cell" class="headerlink" title="元胞数组(cell)"></a>元胞数组(cell)</h2><p>是由可以包括任何数据类型的元胞组成的数组。也叫单元矩阵通过元胞数组的使用，可以在同一个变量中存储不同数据类型的数据。<br>单元矩阵元素用大括号括起来</p><p>当要将数据放入一个元胞数组中时，请使用元胞数组构造运算符 {} 创建该数组。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><p>function [输出参数列表] = 函数名（输入参数列表）</p><h2 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h2><h2 id="函数文件"><a href="#函数文件" class="headerlink" title="函数文件"></a>函数文件</h2><p>文件第一行必须以function开头，文件名字必须以函数名.m命名<br>function 应变量名= 函数名(自变量名)</p><h1 id="基本绘图函数"><a href="#基本绘图函数" class="headerlink" title="基本绘图函数"></a>基本绘图函数</h1><h2 id="点运算"><a href="#点运算" class="headerlink" title="点运算"></a>点运算</h2><p>点运算是处理元素之间的运算<br>矩阵计算和作图都是点运算</p><h2 id="plot"><a href="#plot" class="headerlink" title="plot()"></a>plot()</h2><p>plot(xn,yn,sn,…)<br>s参数为线型</p><p>如果 X 和 Y 均为矩阵，则它们的大小必须相同。plot 函数绘制 Y 的列对 X 的列的图。 </p><h2 id="subplot"><a href="#subplot" class="headerlink" title="subplot()"></a>subplot()</h2><p>分割figure，创建子坐标系<br>subplot（m,n,p）<br>m表示是图排成m行，n表示图排成n列，</p><h2 id="ezplot-f"><a href="#ezplot-f" class="headerlink" title="ezplot(f)"></a>ezplot(f)</h2><p>ezplot(f)  在默认区间[-2pi,2pi]上绘制函数f=f(x)     f 可以是定义函数的M文件名或者一个匿名函数或者一个字符串</p><h2 id="图形标注"><a href="#图形标注" class="headerlink" title="图形标注"></a>图形标注</h2><h3 id="1-title设置图像标题"><a href="#1-title设置图像标题" class="headerlink" title="1.title设置图像标题"></a>1.title设置图像标题</h3><h3 id="2-annotate标注文字"><a href="#2-annotate标注文字" class="headerlink" title="2.annotate标注文字"></a>2.annotate标注文字</h3><h3 id="3-text设置文字说明"><a href="#3-text设置文字说明" class="headerlink" title="3.text设置文字说明"></a>3.text设置文字说明</h3><p>在绘制图形时，可以对图形加上一些说明，如图形的名称、坐标轴说明以及图形某一部分的含义等，这些操作称为添加图形标注。<br>title(‘图的题目’)<br>xlabel(‘横轴的名称’)<br>ylabel(‘纵轴的名称’)<br>text(0.5,25,’说明示例’)</p><h2 id="坐标、图形和图层窗口控制"><a href="#坐标、图形和图层窗口控制" class="headerlink" title="坐标、图形和图层窗口控制"></a>坐标、图形和图层窗口控制</h2><p>在绘制图形时，Matlab可以自动根据要绘制曲线数据的范围选择合适的坐标刻度，使得曲线能够尽可能清晰的显示出来。所以，一般情况下用户不必选择坐标轴的刻度范围。但是，如果用户对坐标不满意，可以利用axis函数对其重新设定。</p><p>axis equal  %纵横坐标轴采用等长刻度<br>axis square %产生正方形坐标系（默认为矩形）<br>axis auto   %使用默认设置<br>axis off    %取消坐标轴<br>axis on     %显示坐标轴<br>grid on     %显示网格<br>grid off    %不显示网格<br>box on      %显示其他轴(上、右)<br>box off     %不显示其他轴(上、右)<br>hold on     %继续在同一图层绘图<br>figure(1)   %新生成一个图层</p>]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深度学习</title>
      <link href="/2022/030811061.html"/>
      <url>/2022/030811061.html</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能、机器学习、深度学习的关系"><a href="#人工智能、机器学习、深度学习的关系" class="headerlink" title="人工智能、机器学习、深度学习的关系"></a>人工智能、机器学习、深度学习的关系</h1><p>人工智能 &gt; 机器学习 &gt; 深度学习。</p><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><p>神经网络需要用数据来训练，它从数据中获得信息，进而把它们转换成相应的权重。这些权重能够被提取出来，迁移到其他的神经网络中，我们“迁移”了这些学来的特征，就不需要从零开始训练一个神经网络了 </p><h2 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h2><p>预训练模型(pre-trained model)是前人为了解决类似问题所创造出来的模型。你在解决问题的时候，不用从零开始训练一个新模型，可以从在类似问题中训练过的模型入手。</p><p>当在训练经网络的时候我们的目标是什么？我们希望网络能够在多次正向反向迭代的过程中，找到合适的权重。</p><p>通过使用之前在大数据集上经过训练的预训练模型，我们可以直接使用相应的结构和权重，将它们应用到我们正在面对的问题上。这被称作是“迁移学习”，即将预训练的模型“迁移”到我们正在应对的特定问题中。</p><h2 id="实践平台"><a href="#实践平台" class="headerlink" title="实践平台"></a>实践平台</h2><p>如果学员想了解更多关于飞桨、深度学习、机器学习或Python课程，可以通过如下三个途径获取。</p><p>AI Studio：<a href="https://aistudio.baidu.com/">https://aistudio.baidu.com/</a><br>飞桨官网：<a href="https://www.paddlepaddle.org.cn/">https://www.paddlepaddle.org.cn/</a><br>百度技术学院：<a href="http://bit.baidu.com/index">http://bit.baidu.com/index</a></p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习是专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构，使之不断改善自身的性能。</p><p>机器学习的实现<br>机器学习的实现可以分成两步：训练和预测，类似于归纳和演绎：</p><p>归纳： 从具体案例中抽象一般规律，机器学习中的“训练”亦是如此。从一定数量的样本（已知模型输入XXX和模型输出YYY）中，学习输出YYY与输入XXX的关系（可以想象成是某种表达式）。<br>演绎： 从一般规律推导出具体案例的结果，机器学习中的“预测”亦是如此。基于训练得到的YYY与XXX之间的关系，如出现新的输入XXX，计算出输出YYY。通常情况下，如果通过模型计算的输出和真实场景的输出一致，则说明模型是有效的。</p><h1 id="预测问题"><a href="#预测问题" class="headerlink" title="预测问题"></a>预测问题</h1><p>对于预测问题，可以根据预测输出的类型是连续的实数值，还是离散的标签，区分为回归任务和分类任务。因为房价是一个连续值，所以房价预测显然是一个回归任务。下面我们尝试用最简单的线性回归模型解决这个问题，并用神经网络来实现这个模型。</p><h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><p><img src="https://gitee.com/wenkex/blogimage/raw/master/img/%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B5%E6%AD%A5-2022-3-1813:21:11.png"></p><p>模型结构三要素<br>（模型假设、评价函数和优化算法）</p><h1 id="paddleHub工具"><a href="#paddleHub工具" class="headerlink" title="paddleHub工具"></a>paddleHub工具</h1><p>端到端的预训练模型管理与迁移学习工具<br>模型一键下载、管理、预测,十行代码完成迁移学习,一键自动超参搜索,一键模型服务化部署</p><p>精选效果优秀的算法，提供了百亿级大数据训练的预训练模型，方便用户不用花费大量精力从头开始训练<br>一个模型。</p><p>#安装 -i指定镜像源<br>pip install paddlehub -i <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>#更新<br>pip install –upgrade paddlehub -i <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><h1 id="自然语言处理-NLP"><a href="#自然语言处理-NLP" class="headerlink" title="自然语言处理(NLP)"></a>自然语言处理(NLP)</h1><h2 id="NLP-的4个典型应用"><a href="#NLP-的4个典型应用" class="headerlink" title="NLP 的4个典型应用"></a>NLP 的4个典型应用</h2><p>情感分析</p><p>聊天机器人</p><p>语音识别</p><p>机器翻译</p><h2 id="paddlenlp"><a href="#paddlenlp" class="headerlink" title="paddlenlp"></a>paddlenlp</h2><p>安装<br>pip install –upgrade paddlenlp<br><a href="https://aistudio.baidu.com/aistudio/projectdetail/3696243?channelType=0&amp;channel=0">https://aistudio.baidu.com/aistudio/projectdetail/3696243?channelType=0&amp;channel=0</a></p><h3 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h3><p>分词作为许多NLP任务的第一道工序,Taskflow提供了多种中文分词模式供大家选择</p><h4 id="文档级输入"><a href="#文档级输入" class="headerlink" title="文档级输入"></a>文档级输入</h4><p>支持超长文本输入，无需担心『文本截断』问题</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次调用会有模型下载的额外时间开销</span></span><br><span class="line">seg = Taskflow(<span class="string">"word_segmentation"</span>)</span><br><span class="line"></span><br><span class="line">doc = <span class="string">"苏锦一直记得那个午后，明晃晃的光线穿过教室的窗玻璃洒到自己脸上，有种特别暖和的感觉。那阳光仿佛是能够钻进人的"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1. 输入长度："</span>, <span class="built_in">len</span>(doc))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"2. 分词结果："</span>, seg(doc))</span><br></pre></td></tr></tbody></table></figure><h4 id="快速模式分词"><a href="#快速模式分词" class="headerlink" title="快速模式分词"></a>快速模式分词</h4><p>示例如何通过快速模式分词对数据集进行词频统计、构建词表</p><h4 id="精确模式分词"><a href="#精确模式分词" class="headerlink" title="精确模式分词"></a>精确模式分词</h4><h4 id="用户词典"><a href="#用户词典" class="headerlink" title="用户词典"></a>用户词典</h4><p>快速配置用户词典来对分词结果进行干预</p><h3 id="词性标注，，依存句法分析"><a href="#词性标注，，依存句法分析" class="headerlink" title="词性标注，，依存句法分析"></a>词性标注，，依存句法分析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于百度词法分析工具LAC，训练语料包含近2200万句子，覆盖多种场景</span></span><br><span class="line"><span class="comment"># 词性标注</span></span><br><span class="line">tag = Taskflow(<span class="string">"pos_tagging"</span>)</span><br><span class="line"><span class="built_in">print</span>(tag(<span class="string">"第十四届全运会在西安举办"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h3><p>基于百度解语的精确模式：最全中文实体标签的命名实体识别工具</p><h4 id="精确模式"><a href="#精确模式" class="headerlink" title="精确模式"></a>精确模式</h4><p>基于百度解语的精确模式：最全中文实体标签的命名实体识别工具，不仅适用于通用领域，也适用于生物医疗、教育等垂类领域。包含66种词性及专名类别标签（同类产品的标签数是15个左右）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">ner = Taskflow(<span class="string">"ner"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ner([<span class="string">"李伟拿出具有科学性、可操作性的《陕西省高校管理体制改革实施方案》"</span>, <span class="string">"诺戴商务咨询（上海）有限公司于2016年08月22日成立"</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="快速模式"><a href="#快速模式" class="headerlink" title="快速模式"></a>快速模式</h4><p>基于百度词法分析工具LAC，训练语料包含近2200万句子，覆盖多种场景</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">ner_fast = Taskflow(<span class="string">"ner"</span>, mode=<span class="string">"fast"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ner_fast(<span class="string">"三亚是一个美丽的城市"</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="依存句法分析"><a href="#依存句法分析" class="headerlink" title="依存句法分析"></a>依存句法分析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用BiLSTM作为编码器，速度最快</span></span><br><span class="line">ddp = Taskflow(<span class="string">"dependency_parsing"</span>)</span><br><span class="line"><span class="built_in">print</span>(ddp(<span class="string">"2月8日谷爱凌夺得北京冬奥会第三金"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 编码器部分将BiLSTM替换为ERNIE，模型准确率更高！</span></span><br><span class="line"><span class="comment"># ddp = Taskflow("dependency_parsing", model="ddparser-ernie-1.0")</span></span><br><span class="line"><span class="comment"># print(ddp("2月8日谷爱凌夺得北京冬奥会第三金"))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出概率值和词性标签</span></span><br><span class="line">ddp = Taskflow(<span class="string">"dependency_parsing"</span>, prob=<span class="literal">True</span>, use_pos=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ddp(<span class="string">"2月8日谷爱凌夺得北京冬奥会第三金"</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="定制化训练"><a href="#定制化训练" class="headerlink" title="定制化训练"></a>定制化训练</h3><p>利用自己的数据训练/微调模型，通过Taskflow一键装载并使用</p><h4 id="数据准备和训练"><a href="#数据准备和训练" class="headerlink" title="数据准备和训练"></a>数据准备和训练</h4><p><a href="https://github.com/PaddlePaddle/PaddleNLP/tree/develop/examples/sentiment_analysis/skep">参考PaddleNLP SKEP情感分析训练示例</a>完成数据准备和模型训练。</p><h4 id="使用定制化模型"><a href="#使用定制化模型" class="headerlink" title="使用定制化模型"></a>使用定制化模型</h4><p>通过task_path指定自定义模型路径一键加载即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">my_senta = Taskflow(<span class="string">"sentiment_analysis"</span>, model=<span class="string">"skep_ernie_1.0_large_ch"</span>, task_path=<span class="string">"/home/aistudio/custom_model"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_senta(<span class="string">"不错的酒店,服务还可以,下次还会入住的~"</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>人工神经网络包括多个神经网络层，如：卷积层、全连接层、LSTM等，每一层又包括很多神经元，超过三层的非线性神经网络都可以被称为深度神经网络。通俗的讲，深度学习的模型可以视为是输入到输出的映射函数，如图像到高级语义（美女）的映射，足够深的神经网络理论上可以拟合任何复杂的函数。因此神经网络非常适合学习样本数据的内在规律和表示层次，对文字、图像和语音任务有很好的适用性。这几个领域的任务是人工智能的基础模块，因此深度学习被称为实现人工智能的基础也就不足为奇了。</p><p>神经元： 神经网络中每个节点称为神经元，由两部分组成：<br>  加权和：将所有输入加权求和。<br>  非线性变换（激活函数）：加权和的结果经过一个非线性函数变换，让神经元计算具备非线性的能力。</p><p>多层连接： 大量这样的节点按照不同的层次排布，形成多层的结构连接起来，即称为神经网络。</p><p>前向计算： 从输入计算输出的过程，顺序从网络前至后。</p><p>计算图： 以图形化的方式展现神经网络的计算逻辑又称为计算图，也可以将神经网络的计算图以公式的方式表达：<br>Y=f3(f2(f1(w1⋅x1+w2⋅x2+w3⋅x3+b)+…)…)…)<br>​神经网络并没有那么神秘，它的本质是一个含有很多参数的“大公式”</p><h2 id="构建神经网络-深度学习模型的基本步骤"><a href="#构建神经网络-深度学习模型的基本步骤" class="headerlink" title="构建神经网络/深度学习模型的基本步骤"></a>构建神经网络/深度学习模型的基本步骤</h2><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>数据导入、</p><p>数据形状变换、</p><p>数据集划分、</p><p>数据归一化处理</p><p>封装load data函数</p><h4 id="图像和文本数据处理"><a href="#图像和文本数据处理" class="headerlink" title="图像和文本数据处理"></a>图像和文本数据处理</h4><h3 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h3><p>（模型要素1）网络结构设计，相当于模型假设空间，即模型能够表达的关系集合。</p><h3 id="训练配置"><a href="#训练配置" class="headerlink" title="训练配置"></a>训练配置</h3><p>模型要素2）设定模型采用的寻解方法，即优化器，并指定计算资源。<br>PS：神经网络学习的目的是寻找合适的参数，使得损失函数的值尽可能小。解决这个问题的过程为称为最优化。解决这个问题使用的算法叫做优化器。接触到的优化器有：随机梯度下降法（Stachastic gradient desent 简称 SGD）和AdaGrad </p><p>AdaGard主要是为了解决 SGD 遇到鞍点或者极小值点后学习变慢的问题。我们知道超参数学习率是一个很重要的参数，不同的参数对学习结果的影响很大，如果设置的值较小，会导致学习花费较多的时间，学习率大了就会导致学习发散而不能正常的进行。所以我们可以考虑避免人为的介入，根据需要让程序自己动态地设置学习率。例如对于遇到鞍点的情况，参数变化很小，基本不会改变，那么这个方法就会设置一个较大的学习率，跨过鞍点。</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p>模型要素3）循环调用训练过程，每轮都包括前向计算、损失函数（优化目标）和后向传播三个步骤。</p><p>PS：前向计算是指把输入数据传入模型，然后得到输出；后向传播是指根据前向计算得到的输出通过梯度下降，从后向前优化网络中的参数。（因为梯度下降就是从后向前计算）</p><h3 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h3><p>将训练好的模型保存，模型预测是调用。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django学习</title>
      <link href="/2022/030664874.html"/>
      <url>/2022/030664874.html</url>
      
        <content type="html"><![CDATA[<p>Python 加 Django 是快速开发、设计、部署网站的最佳组合。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>pip install django -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>在想要创建的文件夹中，进入终端<br>执行命令创建项目<code>'django-admin startproject 项目名称 </code></p><h1 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h1><p>manage.py  项目的管理，启动项目，创建app,数据管理<br>urls.py  url和函数的对应关系<br>asgi.py 和wsgi.py  接受网络请求</p><h1 id="创建一个app"><a href="#创建一个app" class="headerlink" title="创建一个app"></a>创建一个app</h1><p>python manage.py startapp 名称 </p><h1 id="Uvicorn-运行-django"><a href="#Uvicorn-运行-django" class="headerlink" title="Uvicorn 运行 django"></a>Uvicorn 运行 django</h1><p>django 内置的开发服务器在修改代码后的热重载非常缓慢，我发现 uvicorn 的重载速度要快得多，所以新项目第一件事，就是使用在开发环境下使用 uvicorn 运行 django。</p><p>首先当然要安装 uvicorn。<br><code>pip install uvicorn</code></p><p>Uvicorn 安装好后，可以在命令行使用 uvicorn 命令来运行 django。但是，每次输命令启动 django 会非常麻烦！最好的做法是创建一个脚本，启动 django 只需要执行脚本就可以了。</p><p>在 项目根目录 创建一个 run_uvicorn.py 的脚本（脚本名可以自己随便取），代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"mysite.settings"</span>)</span><br><span class="line">    uvicorn.run(</span><br><span class="line">        <span class="string">"mysite.asgi:application"</span>,</span><br><span class="line">        host=<span class="string">"0.0.0.0"</span>,</span><br><span class="line">        port=<span class="number">8000</span>,</span><br><span class="line">        log_level=<span class="string">"debug"</span>,</span><br><span class="line">        reload=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行脚本后，应用已在 8000 端口启动，现在访问 localhost:8000，可以看到熟悉的 django 项目初始页面。</p><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>views.py  写函数</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/022615691.html"/>
      <url>/2022/022615691.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用linux的好处"><a href="#使用linux的好处" class="headerlink" title="使用linux的好处"></a>使用linux的好处</h1><p><a href="https://mp.weixin.qq.com/s/MP6gWfkyKaBLNCpEOHhk_g">使用linux的好处</a><br>在 linux 下，apt install 或者 yum install 之类的命令，就能搞定整个软件安装。</p><p>Linux 不需要选择软件是放 c 盘还是 d 盘，已经定义好了哪些文件该放在哪些地方，<br>不需要杀毒软件，不需要清理垃圾，不需要释放内存，不需要激活系统，它是开源免费的，不需要磁盘优化，没有烦人的弹窗，没有强制更新。</p><h1 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h1><h2 id="VMware搭建linux"><a href="#VMware搭建linux" class="headerlink" title="VMware搭建linux"></a>VMware搭建linux</h2><p><strong>安装Vmware Tools工具。</strong><br>可以为虚拟机提供更好的显卡性能（游戏玩家最爱的）<br>同步物理主机时间<br>自动捕获和释放鼠标光标（不用按下Ctrl + Alt键来释放鼠标）<br>实现物理主机和虚拟机或者虚拟机和虚拟机之间进行复制和粘贴操作（文件传输）<br>点击Vmware Workstation 菜单栏的“虚拟机”点击“安装 Vmware Tools（T）</p><p><strong>设置虚拟机快照。</strong><br>虚拟机的快照可以把当前虚拟机的状态保存下来，方便以后可以还原到这个状态，理论上快照可以设置很多个，但是设置过多的快照会影响虚拟机的性能，并在会增大物理磁盘的存储空间，快照的常见的应用是：安装大型专业软件时，害怕安装失败，那么在安装之前设置一个快照，方面以后还原虚拟机的状态，重新测试安装软件，或者是在虚拟机设置一系列很复杂的系统配置，担心设置不成功，那么在设置之前可以做一个快照，万一配置系统不顺，可以还原到快照之前的状态，重新做配置。</p><p><strong>虚拟机网络的使用网络模式：</strong><br><strong>映射网络驱动器</strong><br><strong>虚拟机的克隆</strong><br>克隆虚拟机可以把一个虚拟机复制成多个虚拟机，那么就不用重新安装虚拟机了，克隆虚拟机需要在虚拟机关机的状态下进行，在虚拟机关机的情况下，右键虚拟机》管理》克隆<br><strong>通过Vmware导出虚拟机</strong><br>有时候，我们设置好的虚拟机需要在其他电脑上面使用，那么可以使用虚拟机迁移功能，把自己电脑的虚拟机，导出，再到其他电脑上面使用Vmware Workstation进行导入（版本最好一致） 在菜单栏点击“文件”》点击“导出为OVF（E）…”</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>虚拟机VMware中的CentOS字符命令界面和图形界面切换</strong><br>ctrl+f1   ctrl+f2</p><h3 id="VMWare-和-Hyper-V-共存"><a href="#VMWare-和-Hyper-V-共存" class="headerlink" title="VMWare 和 Hyper-V 共存"></a>VMWare 和 Hyper-V 共存</h3><p>将 Windows 版本升级到 Windows 10 20H1 或更高版本。<br>将 VMWare Workstation/Player 升级到 15.5.5 或更高版本<br>在安装时，勾选“自动安装 Windows Hypervisor Platform (WHP)”。<br>打开虚拟机的设置选项，找到“处理器”，去掉如图所示的三个选项前面的钩，点击“确定”</p><h3 id="网络连接方式"><a href="#网络连接方式" class="headerlink" title="网络连接方式"></a>网络连接方式</h3><p>NAT模式（默认）：网络地址转换方式，linux可以访问外网，不会造成ip冲突</p><p>桥接模式：可以与其它系统进行通信，但可能造成ip冲突</p><p>主机模式：你的Linux是一个独立的主机，不能访问外网</p><h2 id="WSL2搭建Linux"><a href="#WSL2搭建Linux" class="headerlink" title="WSL2搭建Linux"></a>WSL2搭建Linux</h2><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/">官方文档</a><br>WSL2采用在Hyper-V虚拟机中运行的方案,实现了与 windows 的高度集成,wsl2 的开启速度有了非常明显的提升，几乎无需等待。</p><p>启用适用于 Linux 的 Windows 子系统</p><p><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p><p>启用虚拟机平台功能</p><p><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code></p><p>以管理者模式进入cmd安装<br><code>wsl --install</code> </p><p>切换WSL的默认版本为WSL2。<br><code>wsl --set-default-version 2 </code></p><p>以管理者cmd进行更新操作<br><code>wsl --update</code> </p><p>重启，更新才能生效<br><code>wsl --shutdown</code></p><p>Microsoft Store 中找一个 Linux 发行版进行安装</p><p>查看系统版本<br><code>wsl -l -v</code></p><h3 id="修改默认安装目录"><a href="#修改默认安装目录" class="headerlink" title="修改默认安装目录"></a>修改默认安装目录</h3><p>命令格式：wsl –import <distributionname>  &lt;文件位置&gt; &lt;安装位置&gt;  </distributionname></p><ol><li>查看已安装的linux发行版本<br> <code>wsl -l --all -v</code></li><li> 导出分发版为tar文件到d盘<br><code>wsl --export Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04.tar</code></li><li>注销当前分发版<br><code>wsl --unregister Ubuntu-20.04</code></li><li>重新导入并安装WSL在D盘<br><code>wsl --import Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04.tar --version 2 </code></li><li>设置默认登陆用户为安装时用户名<br><code>ubuntu config --default-user USERNAME</code></li><li>删除wsl-ubuntu20.04.tar<br><code>del d:\wsl-ubuntu.tar</code></li></ol><h3 id="设置-Linux-用户名和密码"><a href="#设置-Linux-用户名和密码" class="headerlink" title="设置 Linux 用户名和密码"></a>设置 Linux 用户名和密码</h3><p>若要更改或重置密码，请打开 Linux 发行版并输入命令：<code>passwd</code><br>如果忘记了 Linux 分发版的密码：<br>1.请打开 PowerShell，并使用以下命令进入默认 WSL 分发版的根目录：wsl -u root</p><p>如果需要在非默认分发版中更新忘记的密码，请使用命令：wsl -d Debian -u root，并将 Debian 替换为目标分发版的名称。</p><p>2.在 PowerShell 内的根级别打开 WSL 发行版后，可使用此命令更新密码：passwd <username>，其中 <username> 是发行版中帐户的用户名，而你忘记了它的密码。</username></username></p><h3 id="关闭WSL2"><a href="#关闭WSL2" class="headerlink" title="关闭WSL2"></a>关闭WSL2</h3><p>WSL2实际上是在虚拟机中运行。我们一旦进入WSL2 Linux的命令行，虚拟机会自动启动运行。如果我们查看任务管理器，会发现一个Vmmem进程,它比较占内存。不使用WSL2的时候我们可以关闭它以节省内存。关闭WSL2 Linux的方法如下。使用管理员打开CMD，运行：<code>wsl --shutdown</code></p><h3 id="为发行版linux更换国内源"><a href="#为发行版linux更换国内源" class="headerlink" title="为发行版linux更换国内源"></a>为发行版linux更换国内源</h3><p><a href="https://blog.csdn.net/weixin_41529012/article/details/117226884">https://blog.csdn.net/weixin_41529012/article/details/117226884</a></p><p>打开\wsl.localhost\Ubuntu\etc\apt地址下的sources.list文件，更改国内源<br>中科大</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade  #更新镜像源列表</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="使用vscode操作wsl"><a href="#使用vscode操作wsl" class="headerlink" title="使用vscode操作wsl"></a>使用vscode操作wsl</h3><p>在window的vscode上安装Remote Development扩展包<br>包括Remote - SSH ， Remote - Containers ，Remote - WSL扩展</p><p>Remote - WSL 扩展：使你能够打开容器中、远程计算机上或 WSL 中的任何文件夹。</p><h4 id="打开-WSL-项目"><a href="#打开-WSL-项目" class="headerlink" title="打开 WSL 项目"></a>打开 WSL 项目</h4><p>1.从 WSL 发行版打开项目，请打开发行版的命令行并输入：code .</p><p>2.从 VS Code 中打开项目，通过使用 VS Code 中的快捷方式 CTRL+SHIFT+P 调出命令面板，以访问更多 VS Code 远程选项。 如果随后键入 Remote-WSL，将看到可用的 VS Code 远程选项列表，使你可以在远程会话中重新打开文件夹，指定要在哪个发行版中打开，等等。</p><h3 id="wsl安装Docker"><a href="#wsl安装Docker" class="headerlink" title="wsl安装Docker"></a>wsl安装Docker</h3><p>1.下载 <a href="https://docs.docker.com/desktop/windows/wsl/">Docker Desktop</a> 并按照安装说明进行操作。</p><p>2.安装后，从 Windows 开始菜单启动 Docker Desktop，然后从任务栏的隐藏图标菜单中选择 Docker 图标。 右键单击该图标以显示 Docker 命令菜单，然后选择“设置”。</p><p>3.确保在“设置”“常规”中选中“使用基于 WSL 2 的引擎”。</p><p>4.通过转到“设置”“资源”“WSL 集成”，从要启用 Docker 集成的已安装 WSL 2 发行版中进行选择。</p><p>5.若要确认已安装 Docker，请打开 WSL 发行版（例如 Ubuntu），并通过输入 docker –version 来显示版本和内部版本号</p><h2 id="linux云服务器"><a href="#linux云服务器" class="headerlink" title="linux云服务器"></a>linux云服务器</h2><p><a href="https://developer.aliyun.com/article/767041">云服务器可以做什么</a></p><p>云服务器（Elastic Compute Service, 简称ECS），是一种简单高效，处理能力可以弹性伸缩的计算服务。ECS的相关术语说明如下：</p><p>实例（Instance）：是一个虚拟的计算环境，由CPU、内存、系统盘和运行的操作系统组成；ECS实例作为云服务器最为核心的概念，其他资源，比如磁盘、IP、镜像、快照等，只有与ECS结合后才具有使用意义。</p><p>地域（Region）：指ECS实例所在的物理位置。地域内的ECS实例内网是互通的，不同的地域之间ECS实例内网不互通。</p><p>可用区（Zone）：指在同一地域内，电力和网络互相独立的物理区域。</p><p>磁盘（Disk）：是为ECS实例提供数据块级别的数据存储。可以分为4类： 普通云盘、SSD云盘、高效云盘和本地SSD磁盘</p><p>快照（Snapshot）：是某一个时间点上某个磁盘的数据拷贝。</p><p>镜像（Image）：是ECS实例运行环境的模板，一般包括操作系统和预装的软件。</p><p>安全组（Security Group）：是一种虚拟防火墙，具备状态检测包过滤功能。每个实例至少属于一个安全组。同一个安全组内的实例之间网络互通，不同安全组的实例之间默认内网不通，但是可以授权两个安全组之间互访。</p><h3 id="虚拟主机、ECS云服务器、VPS区别汇总"><a href="#虚拟主机、ECS云服务器、VPS区别汇总" class="headerlink" title="虚拟主机、ECS云服务器、VPS区别汇总"></a>虚拟主机、ECS云服务器、VPS区别汇总</h3><p>1、虚拟主机</p><p>虚拟主机就是利用虚拟化的技术，将一台服务器划分出一定大小的空间，每个空间都给予单独的 FTP 权限和 Web 访问权限，多个用户共同平均使用这台服务器的硬件资源。不同配置的虚拟主机主要是在磁盘空间、数据库大小、流量上面的区别。虚拟主机也有可以分为独享的虚拟主机，和共享的虚拟主机。顾名思义，两者之间的区别在于服务器资源的独享和共享。网站主机、空间、都是一个意思。这一类的主机用户的权限很低，没有远程桌面，只有FTP权限供用户上传文档等操作。优势是比较价格便宜。</p><p>2、VPS</p><p>先说一下vps，Virtual Private Server 虚拟专用服务器,一般是将一个独立服务器通过虚拟化技术虚拟成多个虚拟专用服务器。与虚拟主机不同的是，你拥有的是一台虚拟的服务器，类似于Windows上的虚拟机一样，虽然是虚拟的，但是使用起来，和使用客户机没有什么区别。同理，VPS可以使用远程桌面登录对服务器进行维护操作。</p><p>3、ECS云服务器</p><p>现在的主流的服务器解决方案，一般理解云服务器和VPS一样，同样是虚拟化的技术虚拟出来的服务器。也有人说以前的VPS就是现在的ECS，其实不然，云服务器是一个计算，网络，存储的组合。简单点说就是通过多个CPU，内存，硬盘组成的计算池和存储池和网络的组合；在这样的平台上虚拟出的服务器，用户可以根据自己的运算需要选择配置不同的云服务器。具体区别总结如下：<br><img src="https://gitee.com/wenkex/blogimage/raw/master/img/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E3%80%81ECS%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81VPS%E5%8C%BA%E5%88%AB-2022-3-1809:16:23.png"></p><h3 id="使用VScode连接阿里云远程服务器"><a href="#使用VScode连接阿里云远程服务器" class="headerlink" title="使用VScode连接阿里云远程服务器"></a>使用VScode连接阿里云远程服务器</h3><p>安装Remote-ssh插件<br>在云服务器控制台选择安全组配置，加入ssh(22)的端口</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>常见的 Shell 有 sh、bash、csh、tcsh、ash 等。<br>#!/bin/bash是指此脚本使用/bin/bash来解释执行。<br>脚本文件后缀是.sh<br><a href="https://mp.weixin.qq.com/s/A_K9Uikkq6OHHthj1EIbVQ">100个shell脚本</a></p><h1 id="linux使用"><a href="#linux使用" class="headerlink" title="linux使用"></a>linux使用</h1><h2 id="linux文件目录理解"><a href="#linux文件目录理解" class="headerlink" title="linux文件目录理解"></a>linux文件目录理解</h2><h3 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h3><p>存放所有用户文件的根目录，是用户主目录的基点</p><p>比如用户user的主目录就是/home/user，可以用~user表示</p><h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h3><p>用于存放系统应用程序，可以理解为C:/Windows/ </p><h4 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local"></a>/usr/local</h4><p>用户级的程序目录，可以理解为C:/Progrem Files/</p><p>用户自己编译的软件默认会安装到这个目录下</p><p>本地系统管理员软件安装目录（安装系统级的应用）</p><p>这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录</p><p>用的是root的空间。</p><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">su root  #切换到 root 用户</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 增加用户，并创建主目录</span></span><br><span class="line">useradd -m 用户名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户，并删除主目录</span></span><br><span class="line">userdel -r 用户名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">在root 账户修改普通用户的密码</span></span><br><span class="line">passwd [选项] 用户名</span><br><span class="line"></span><br><span class="line">passwd  #修改root密码</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">使用sudo命令可简单快速禁用用户</span></span><br><span class="line">sudo passwd -l new</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"> </span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新启用用户账户</span></span><br><span class="line">sudo passwd -u new</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>linux区分大小写，使用tab来自动补全命令</p><p>如果想要输入和执行多条命令，用分号分隔命令</p><p>mkdir 创建文件夹<br>touch 创建文件<br>rm -r 强制删除</p><p>cp [选项] 源文件 目标文件<br>    选项：<br>    -a：相当于 -d、-p、-r 选项的集合，这几个选项我们一一介绍；<br>    -d：如果源文件为软链接（对硬链接无效），则复制出的目标文件也为软链接；<br>    -i：询问，如果目标文件已经存在，则会询问是否覆盖；<br>    -l：把目标文件建立为源文件的硬链接文件，而不是复制源文件；<br>    -s：把目标文件建立为源文件的软链接文件，而不是复制源文件；<br>    -p：复制后目标文件保留源文件的属性（包括所有者、所属组、权限和时间）；<br>    -r：递归复制，用于复制目录；<br>    -u：若目标文件比源文件有差异，则使用该选项可以更新目标文件，此选项可用于对文件的升级和备用。</p><h2 id="Linux开机自动启动软件-可执行程序"><a href="#Linux开机自动启动软件-可执行程序" class="headerlink" title="Linux开机自动启动软件/可执行程序"></a>Linux开机自动启动软件/可执行程序</h2><h3 id="首先关注几个脚本"><a href="#首先关注几个脚本" class="headerlink" title="首先关注几个脚本"></a>首先关注几个脚本</h3><p>/etc/rc.d/rc.local：该脚本在系统启动时被执行一次；<br>/etc/profile:该脚本在所有用户登陆时会被执行一次；<br>~/.bashrc:该脚本在用户登陆时被执行一次，与/etc/profile不同的是，bashrc文件每个用户拥有独立的一个。</p><p>若设置开机启动，应该修改：/etc/rc.d/rc.local文件。</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux删除文件夹命令</span></span><br><span class="line"></span><br><span class="line">rm -rf /var/log/httpd/access</span><br><span class="line">将会删除/var/log/httpd/access目录以及其下所有文件、文件夹</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux删除文件命令</span></span><br><span class="line"></span><br><span class="line">rm -f /var/log/httpd/access.log</span><br><span class="line">将会强制删除/var/log/httpd/access.log这个文件</span><br></pre></td></tr></tbody></table></figure><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>linux系统基本上分两大类：</p><ol><li><p>RedHat系列：Redhat、Centos、Fedora等<br>常见的安装包格式 rpm 包，安装rpm包的命令是 “rpm -参数”<br>包管理工具 yum<br>支持tar包</p></li><li><p>Debian系列：Debian、Ubuntu等<br>常见的安装包格式 deb 包，安装deb包的命令是 “dpkg -参数”<br>包管理工具 apt-get<br>支持tar包</p></li></ol><h4 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h4><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。<br>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. 列出所有可更新的软件清单命令：yum check-update</span><br><span class="line"></span><br><span class="line">2. 更新所有软件命令：yum update</span><br><span class="line"></span><br><span class="line">3. 仅安装指定的软件命令：yum install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">4. 仅更新指定的软件命令：yum update &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">5. 列出所有可安裝的软件清单命令：yum list</span><br><span class="line"></span><br><span class="line">6. 删除软件包命令：yum remove &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">7. 查找软件包命令：yum search &lt;keyword&gt;</span><br><span class="line"></span><br><span class="line">8. 清除缓存命令:</span><br><span class="line"></span><br><span class="line">yum clean packages: 清除缓存目录下的软件包</span><br><span class="line">yum clean headers: 清除缓存目录下的 headers</span><br><span class="line">yum clean oldheaders: 清除缓存目录下旧的 headers</span><br><span class="line">yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的 headers</span><br></pre></td></tr></tbody></table></figure><h5 id="配置yum仓库"><a href="#配置yum仓库" class="headerlink" title="配置yum仓库"></a>配置yum仓库</h5><p>yum就是一个硕大的软件仓库，里面保存了几乎所有的常用工具，只需要为系统提供软件包名称即可。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先切换到yum源中的配置目录</span></span><br><span class="line">cd /etc/yum.repos.d/ </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="yum无法使用"><a href="#yum无法使用" class="headerlink" title="yum无法使用"></a>yum无法使用</h5><p>yum服务使用的默认python版本是python2<br>更换yum源</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/yum  #先看下/usr/bin/yum文件内容</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统默认安装的yum</span></span><br><span class="line">rpm -qa|grep yum</span><br><span class="line"></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><p>wget是Linux中的一个下载文件的工具，后来被移植到包括Windows在内的各个平台上。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="meta">#</span><span class="bash">查看帮助手册</span></span><br><span class="line">wget --help</span><br></pre></td></tr></tbody></table></figure><h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p><a href="https://www.jianshu.com/p/8b679b35c9d5">https://www.jianshu.com/p/8b679b35c9d5</a><br>Vim可以分为三种模式，分别为：</p><h3 id="命令行模式（Command-mode）"><a href="#命令行模式（Command-mode）" class="headerlink" title="命令行模式（Command mode）"></a>命令行模式（Command mode）</h3><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。<br>进入vim之后，是处于「命令行模式」，要按i切换到「插入模式」才能够输入文字。</p><h3 id="插入模式（Insert-mode）"><a href="#插入模式（Insert-mode）" class="headerlink" title="插入模式（Insert mode）"></a>插入模式（Insert mode）</h3><p>只有在插入模式下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><h3 id="底行模式（Lastline-mode）"><a href="#底行模式（Lastline-mode）" class="headerlink" title="底行模式（Lastline mode）"></a>底行模式（Lastline mode）</h3><p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。<br>在命令行模式下，按冒号「:」键，进入底行模式</p><p>:w filename 文件以filename为文件名保存</p><p>:wq 文件存盘并退出vim</p><p>:q 文件不存盘并退出vim</p><p>:q! 文件不存盘强制退出vim</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>命令行模式下 ？</p><p>:s 命令来替换字符串<br>    :s/gald/glad/<br>    :s/java/Linux/g </p><p>:X  设置密码</p><h2 id="linux压缩文件"><a href="#linux压缩文件" class="headerlink" title="linux压缩文件"></a>linux压缩文件</h2><h3 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h3><p>gzip是用来压缩和解压.gz文件的命令。<br>gzip命令只能压缩单个文件，而不能把一个文件夹压缩成一个文件（与打包命令的区别）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">会将文件压缩为文件 test.txt.gz，原来的文件则没有了</span></span><br><span class="line">gzip /home/aistudio/work/test.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压文件,原来的文件则没有了</span></span><br><span class="line">gzip -d /home/aistudio/test.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-r或--recursive：递归压缩指定文件夹下的文件（该文件夹下的所有文件被压缩成单独的.gz文件）；</span><br><span class="line">-v或--verbose：显示指令执行过程。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>用来打包或者解包后缀名为.tar</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-c或--create：建立新的备份文件；</span><br><span class="line">-x或--extract或--get：从备份文件中还原文件；</span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-f或--file：指定备份文件；</span><br><span class="line">-C：指定目的目录；</span><br><span class="line">-z：通过gzip指令处理备份文件；</span><br><span class="line">-j：通过bzip2指令处理备份文件。</span><br></pre></td></tr></tbody></table></figure><h3 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h3><p>zip命令和unzip命令用在在Linux上处理.zip的压缩文件。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">常用参数</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">zip:</span></span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-m：不保留原文件；</span><br><span class="line">-r：递归处理。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">unzip:</span></span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-d：解压到指定目录。</span><br></pre></td></tr></tbody></table></figure><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录下所有文件权限</span></span><br><span class="line">ls -l      #简写 ll </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看指定文件权限</span></span><br><span class="line">ll |grep 文件名</span><br></pre></td></tr></tbody></table></figure><p>在linux下，文件权限分为三种：可读权限(read)、可写权限(write)以及可执行权限(execute)，三者分别对应的字符为r、w和x；</p><p>Linux/Unix 的文件调用权限分为三级 : 文件所有者（Owner）、用户组（Group）、其它用户（Other Users）。</p><p>r –&gt; 4<br>w –&gt; 2<br>x –&gt; 1</p><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><p>要通过su进入到root权限中<br><code>chmod abc filename</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777</span><br></pre></td></tr></tbody></table></figure><p>指令中的a、b、c分别表示一个数字，其中a对应文件所有者权限，b对应文件所有者所在组权限，c对应其他身份权限。</p><p>对于a、b、c各自来讲，它们都是0~7的数字，对应r、w、x三个二进制位按序组成的二进制数，举个例子，如果是只可读，对应的二进制数就是“100”，也就是4；如果是可读可写不可执行，那么对应二进制数为“110”，也就是6……</p><p>再举个最常见的chmod 777 xxxx指令，这里有3个7，但是每个7的含义是不同的。7的二进制形式为111，表示可读可写可执行，第1个7表示文件对于文件所有者来说可读可写可执行；第2个7表示文件对于文件所有者所在组来说可读可写可执行；第3个7表示文件对于其他身份的用户来说可读可写可执行。也就是说，通过chmod 777，文件就没有了读写执行权限限制了。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>1、修改 /etc/profile 文件，如果你的计算机仅仅作为开发使用时推存使用这种方法，因为所有用户的shell都有权使用这个环境变量，可能会给系统带来安全性问题。这里是针对所有的用户的，所有的shell</p><p>vi /etc/profile</p><p>在/etc/profile的最下面添加：  export  PATH=”$PATH:/NEW_PATH”</p><p>针对当前特定的用户起作用的环境变量</p><p>2、修改bashrc文件，这种方法更为安全，它可以把使用这些环境变量的权限控制到用户级别，这里是针对某一特定的用户，如果你需要给某个用户权限使用这些环境变量，你只需要修改其个人用户主目录下的 .bashrc文件就可以了。</p><p>vi ~/.bashrc</p><p>在下面添加：</p><p>Export  PATH=”$PATH:/NEW_PATH”</p><h2 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h2><p>XShell是一个强大的安全终端模拟软件,可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。<br><a href="https://xshell.en.softonic.com/">安装</a><br><a href="https://www.jianshu.com/p/4716cc35750f">参考</a></p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>选择导航菜单的文件 –&gt; 新建，输入名称和主机IP，协议默认SSH，端口默认22，如果不知道主机IP可以登录虚拟机的Linux系统，输入命令ifconfig查看(inet addr)</p><p>然后在左侧用户身份验证中输入用户名和密码，这样下次就可以直接连接了，当然如果为了安全考虑也可以不输入密码，在每次连接时再输入。</p><h3 id="Xshell怎么与云服务器连接"><a href="#Xshell怎么与云服务器连接" class="headerlink" title="Xshell怎么与云服务器连接"></a>Xshell怎么与云服务器连接</h3><p>打开Xshell，新建一个会话</p><p>主机填服务器ip,点击连接</p><p>用户名默认为root,而不是实例名，也不是你服务器中Linux的用户名；<br>密码则为服务器实例密码</p><h2 id="centos内核"><a href="#centos内核" class="headerlink" title="centos内核"></a>centos内核</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  版本信息</span></span><br><span class="line">cat /etc/centos-release </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Linux内核信息</span></span><br><span class="line">uname -a  </span><br></pre></td></tr></tbody></table></figure><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用图形界面配置网络命令</span></span><br><span class="line">nmtui</span><br><span class="line"><span class="meta">#</span><span class="bash">重新启动网络服务命令</span></span><br><span class="line">systemctl restart network</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示你所有操作的历史命令</span></span><br><span class="line">history</span><br></pre></td></tr></tbody></table></figure><h2 id="NAT配置"><a href="#NAT配置" class="headerlink" title="NAT配置"></a>NAT配置</h2><h3 id="检查环境-能上网，安装了net-tools"><a href="#检查环境-能上网，安装了net-tools" class="headerlink" title="检查环境: 能上网，安装了net-tools."></a>检查环境: 能上网，安装了net-tools.</h3><p>（1）能否上网（ping <a href="http://www.baidu.com/">www.baidu.com</a>)<br>如不能上网。配置/etc/sysconfig/network-scripts/ifcfg-ens33<br>（2）是否安装了 net-tools.  (因为需要使用命令 route )<br>如没有， yum -y install net-tools</p><h3 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h3><p>一台Sever (2张网卡） + 一台 Client（一张网卡）</p><p>安装（或克隆）一台虚拟机名为：Client. 原来那台可改名叫（Server)。<br>Server 上再安装一张网卡，并配成“仅主机模式”。（原来应该那一张应该为NAT模式）。<br>Client 网卡配成 “仅主机模式”</p><h3 id="配置NAT"><a href="#配置NAT" class="headerlink" title="配置NAT"></a>配置NAT</h3><p>（1）开启Server 和 Client, 用 root 登录。<br>（2）在Server 上运行： <code>ip addr</code>记录下 ens37 (也就是Server 的第二张网卡） 的ip：192.168.221.128<br>（3）设置Client网关，在Client 上 运行:<br><code>route add default gw 192.168.221.128  #添加一条默认网关</code><br>（如要查看网关 是否设置成功，可以运行：route -n)</p><p>（4）在Server设置地址伪装 ， 运行：</p><p>(5）重启防火墙<code>systemctl restart firewalld.service</code></p><p>(6)在Client 上ping测试是否成功</p><p>(7)在Client上配置本地DNS:去到目录 /etc 下， 用vi 编辑 文件 “resolv.conf” </p><h1 id="搭建云上博客"><a href="#搭建云上博客" class="headerlink" title="搭建云上博客"></a>搭建云上博客</h1><p>不知道教程是不是太旧了，跟着做，都是报错</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><h3 id="安装Apache服务及其扩展包"><a href="#安装Apache服务及其扩展包" class="headerlink" title="安装Apache服务及其扩展包"></a>安装Apache服务及其扩展包</h3><p>跟着官网做发现安装失败</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql</span><br><span class="line"></span><br><span class="line">Last metadata expiration check: 0:30:48 ago on Thu 17 Mar 2022 08:21:43 AM CST.</span><br><span class="line">No match for argument: mod_auth_mysql</span><br><span class="line">Error: Unable to find a match: mod_auth_mysql</span><br></pre></td></tr></tbody></table></figure><p>搜索到的解决方案</p><ol><li><p> yum -y install httpd httpd-manual mod_ssl mod_perl</p></li><li><p> yum -y install httpd httpd-devel</p><h3 id="启动Apache服务。"><a href="#启动Apache服务。" class="headerlink" title="启动Apache服务。"></a>启动Apache服务。</h3><p>systemctl start httpd.service</p><h3 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h3><p>教程上没有说清楚</p></li></ol><p>进入实例，点击安全组链接进去</p><p>然后点击快速添加<br>选端口范围为http(80)</p><p>打开浏览器输入ECS服务器的公网IP，显示测试页面表示Apache服务安装成功。</p><h1 id="搭建网盘Cloudreve"><a href="#搭建网盘Cloudreve" class="headerlink" title="搭建网盘Cloudreve"></a>搭建网盘Cloudreve</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>官网：</p><p>cloudreve.org</p><p>github：</p><p><a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p><p>下载：</p><p><a href="https://github.com/cloudreve/Cloudreve/releases">https://github.com/cloudreve/Cloudreve/releases</a></p><p>安装文档：</p><p><a href="https://docs.cloudreve.org/getting-started/install">https://docs.cloudreve.org/getting-started/install</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd /opt #选定/opt作为安装目录</span><br><span class="line">wget https://github.com/cloudreve/Cloudreve/releases/download/3.1.1/cloudreve_3.1.1_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf cloudreve_3.1.1_linux_amd64.tar.gz   #解压获取到的主程序</span><br><span class="line">chmod +x ./cloudreve  #赋予执行权限</span><br><span class="line">./cloudreve   #启动 Cloudreve</span><br></pre></td></tr></tbody></table></figure><p>Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的“cloudreve.db”，重新启动主程序以初始化新的管理员账户。</p><p>Cloudreve 默认会监听“5212”端口。你可以在浏览器中访问  http://服务器ip:5212  进入 Cloudreve。如果宝塔面板需要在安全中放行“5212”端口。注意用默认的管理账号和密码登录。</p><h2 id="添加守护进程"><a href="#添加守护进程" class="headerlink" title="添加守护进程"></a>添加守护进程</h2><p>软件商店→系统工具 ，找到Supervisor管理器安装<br>打开Supervisor管理器添加守护进程</p><h2 id="什么是反向代理"><a href="#什么是反向代理" class="headerlink" title="什么是反向代理"></a>什么是反向代理</h2><p>反向代理是充当Web服务器网关的代理服务器。当您将请求发送到使用反向代理的Web服务器时，他们将先转到反向代理，由该代理将确定是将其路由到Web服务器还是将其阻止。</p><p>这意味着有了反向代理，您永远不会与使用它的Web服务器进行直接通信。可以将它们看作web服务器或服务器集群的某种包装器。通过负载平衡和缓存，它们可以保护web免遭攻击，并提供更好的web性能。</p><h1 id="宝塔Linux面板"><a href="#宝塔Linux面板" class="headerlink" title="宝塔Linux面板"></a>宝塔Linux面板</h1><p><a href="https://blog.csdn.net/vpssws/article/details/117136583?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/vpssws/article/details/117136583?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Centos安装命令：</span></span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu/Deepin安装命令：</span></span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示面板的使用帮助菜单选项。</span></span><br><span class="line">bt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载面板</span></span><br><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行脚本：</span></span><br><span class="line">sh bt-uninstall.sh</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>安装软件时，推荐使用编译安装</p><h2 id="面板特色功能："><a href="#面板特色功能：" class="headerlink" title="面板特色功能："></a>面板特色功能：</h2><p>一键配置服务器环境（LAMP/LNMP）<br>一键安全重启<br>一键创建管理网站、ftp、数据库<br>一键部署SSL证书<br>一键部署源码（discuz、wordpress、dedecms、z-blog、微擎等等）<br>一键配置（定期备份、数据导入、伪静态、301、SSL、子目录、反向代理、切换PHP版本）<br>一键安装常用PHP扩展(fileinfo、intl、opcache、imap、memcache、apc、redis、ioncube、imagick)<br>数据库一键导入导出<br>系统监控（CPU、内存、磁盘IO、网络IO）<br>防火墙端口放行<br>SSH开启与关闭及SSH端口更改<br>禁PING开启或关闭<br>方便高效的文件管理器（上传、下载、压缩、解压、查看、编辑等等）<br>计划任务（定期备份、日志切割、shell脚本）<br>软件管理（一键安装、卸载、版本切换）</p><h2 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h2><p>添加站点就是添加一个域名进去，通过这个域名可以访问你的网页，或者直接填写你的ip进去，然后浏览器输入你的ip访问一下就看到结果了</p><h2 id="LNMP-环境"><a href="#LNMP-环境" class="headerlink" title="LNMP 环境"></a>LNMP 环境</h2><p>LNMP 是 Linux、Nginx、MariaDB 和 PHP 的缩写，这个组合是最常见的 Web 服务器的运行环境之一。用宝塔面板一键安装</p><h2 id="ftp服务"><a href="#ftp服务" class="headerlink" title="ftp服务"></a>ftp服务</h2><h1 id="python自动化部署"><a href="#python自动化部署" class="headerlink" title="python自动化部署"></a>python自动化部署</h1><p>Python提供了一个paramiko库，能够支持SSH和SFTP协议，可以取代Xshell和Xftp，下面是把本机的jar文件上传到服务器并运行的Python脚本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"> </span><br><span class="line">IP = <span class="string">'106.14.19.127'</span></span><br><span class="line">user = <span class="string">'root'</span></span><br><span class="line">password = <span class="string">'server-pwd'</span></span><br><span class="line"> </span><br><span class="line">local_jar = <span class="string">'/target/ser1-1.0.jar'</span></span><br><span class="line">server_jar = <span class="string">'/root/ser1-1.0.jar'</span></span><br><span class="line">server_property = <span class="string">'/root/ser1.properties'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmds</span>(<span class="params">ip, name, pwd, cmd</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssh = paramiko.SSHClient()</span><br><span class="line">        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">        ssh.connect(ip, <span class="number">22</span>, name, pwd, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'连接成功'</span></span><br><span class="line">        sftp = ssh.open_sftp()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'正在上传...'</span></span><br><span class="line">        sftp.put(local_jar, server_jar)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'jar上传成功'</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> cmd:</span><br><span class="line">            <span class="built_in">print</span> m</span><br><span class="line">            stdin, stdout, stderr = ssh.exec_command(m)</span><br><span class="line">            out = stdout.readlines()</span><br><span class="line">            <span class="keyword">for</span> o <span class="keyword">in</span> out:</span><br><span class="line">                <span class="built_in">print</span> o,</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'运行成功'</span></span><br><span class="line">        ssh.close()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'关闭连接'</span></span><br><span class="line">    <span class="keyword">except</span> Exception, error:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'错误:  %s'</span> % (error)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'Start deploying %s to server %s'</span> % (server_jar, IP)</span><br><span class="line">    cmd = [</span><br><span class="line">        <span class="string">'echo Start spring...'</span>,</span><br><span class="line">        <span class="string">'nohup java -jar -Dspring.config.location='</span> + server_property + <span class="string">' '</span> + server_jar + <span class="string">' &amp;'</span>,</span><br><span class="line">        <span class="string">'echo All done.'</span></span><br><span class="line">    ]</span><br><span class="line">    a = threading.Thread(target=execute_cmds, args=(IP, user, password, cmd))</span><br><span class="line">    a.start()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python数据结构</title>
      <link href="/2022/02191106.html"/>
      <url>/2022/02191106.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.yiibai.com/python/py_data_structure/python_data_structure_introduction.html">https://www.yiibai.com/python/py_data_structure/python_data_structure_introduction.html</a></p><h1 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h1><p>这些是以顺序方式存储数据元素的数据结构。例如 - </p><h2 id="数组-它是与数据元素的索引配对的数据元素的顺序排列。"><a href="#数组-它是与数据元素的索引配对的数据元素的顺序排列。" class="headerlink" title="数组: 它是与数据元素的索引配对的数据元素的顺序排列。"></a>数组: 它是与数据元素的索引配对的数据元素的顺序排列。</h2><h2 id="链表-每个数据元素都包含一个指向另一个元素的链接及其中的数据。"><a href="#链表-每个数据元素都包含一个指向另一个元素的链接及其中的数据。" class="headerlink" title="链表: 每个数据元素都包含一个指向另一个元素的链接及其中的数据。"></a>链表: 每个数据元素都包含一个指向另一个元素的链接及其中的数据。</h2><p>链表相较于数组，除了数据域，还增加了指针域用于构建链式的存储数据。链表中每一个节点都包含此节点的数据和指向下一节点地址的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。</p><p>这表现在对节点进行增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点。不过事物皆有两极，指针带来高自由度的同时，自然会牺牲数据查找的效率和多余空间的使用。</p><p>一般常见的是有头有尾的单链表，对指针域进行反向链接，还可以形成双向链表或者循环链表。</p><p>链表和数组对比<br>链表和数组在实际的使用过程中需要根据自身的优劣势进行选择。链表和数组的异同点也是面试中高频的考察点之一。这里对单链表和数组的区别进行了对比和总结。</p><h2 id="堆栈-这是一种仅遵循特定操作顺序的数据结构。LIFO-后进先出-或FILO-先进先出-。"><a href="#堆栈-这是一种仅遵循特定操作顺序的数据结构。LIFO-后进先出-或FILO-先进先出-。" class="headerlink" title="堆栈: 这是一种仅遵循特定操作顺序的数据结构。LIFO(后进先出)或FILO(先进先出)。"></a>堆栈: 这是一种仅遵循特定操作顺序的数据结构。LIFO(后进先出)或FILO(先进先出)。</h2><p>队列: 与堆栈(Stack)类似，但操作顺序仅为FIFO(先进先出)。<br>矩阵: 它是二维数据结构，其中数据元素由一对索引引用。</p><h1 id="非线性数据结构"><a href="#非线性数据结构" class="headerlink" title="非线性数据结构"></a>非线性数据结构</h1><p>这些数据结构中没有数据元素的顺序链接。任何一对或一组数据元素都可以相互关联，并且可以在没有严格顺序的情况下进行访问。</p><p>二叉树:它是一个数据结构，每个数据元素可以连接到最多两个其他数据元素，并以一个根节点开始。<br>堆: 这是树形数据结构的特殊情况，其中父节点中的数据严格大于/等于子节点或严格小于其子节点。<br>哈希表: 它是一个数据结构，它由使用散列函数相互关联的数组构成。它使用键而不是数据元素的索引来检索值。<br>图: 它是顶点和节点的排列，其中一些节点通过链接彼此连接。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。</p><h1 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h1><p>从上面的对比中可以看出，链表虽然通过增加指针域提升了自由度，但是却导致数据的查询效率恶化。特别是当链表长度很长的时候，对数据的查询还得从头依次查询，这样的效率会更低。跳表的产生就是为了解决链表过长的问题，通过增加链表的多级索引来加快原始链表的查询效率。这样的方式可以让查询的时间复杂度从O(n)提升至O(logn)。</p><p>图片</p><p>跳表通过增加的多级索引能够实现高效的动态插入和删除，其效率和红黑树和平衡二叉树不相上下。目前redis和levelDB都有用到跳表。</p><p>从上图可以看出，索引级的指针域除了指向下一个索引位置的指针，还有一个down指针指向低一级的链表位置，这样才能实现跳跃查询的目的。</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一种比较简单的数据结构，常用一句话描述其特性，后进先出。栈本身是一个线性表，但是在这个表中只有一个口子允许数据的进出。这种模式可以参考腔肠动物…即进食和排泄都用一个口…</p><p>栈的常用操作包括入栈push和出栈pop，对应于数据的压入和压出。还有访问栈顶数据、判断栈是否为空和判断栈的大小等。由于栈后进先出的特性，常可以作为数据操作的临时容器，对数据的顺序进行调控，与其它数据结构相结合可获得许多灵活的处理。</p><p>图片</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是栈的兄弟结构，与栈的后进先出相对应，队列是一种先进先出的数据结构。顾名思义，队列的数据存储是如同排队一般，先存入的数据先被压出。常与栈一同配合，可发挥最大的实力。</p><p>图片</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树作为一种树状的数据结构，其数据节点之间的关系也如大树一样，将有限个节点根据不同层次关系进行排列，从而形成数据与数据之间的父子关系。常见的数的表示形式更接近“倒挂的树”，因为它将根朝上，叶朝下。</p><p>树的数据存储在结点中，每个结点有零个或者多个子结点。没有父结点的结点在最顶端，成为根节点；没有非根结点有且只有一个父节点；每个非根节点又可以分为多个不相交的子树。</p><p>这意味着树是具备层次关系的，父子关系清晰，家庭血缘关系明朗；这也是树与图之间最主要的区别。</p><p>图片</p><p>别看树好像很高级，其实可看作是链表的高配版。树的实现就是对链表的指针域进行了扩充，增加了多个地址指向子结点。同时将“链表”竖起来，从而凸显了结点之间的层次关系，更便于分析和理解。</p><p>树可以衍生出许多的结构，若将指针域设置为双指针，那么即可形成最常见的二叉树，即每个结点最多有两个子树的树结构。二叉树根据结点的排列和数量还可进一度划分为完全二叉树、满二叉树、平衡二叉树、红黑树等。</p><p>图片</p><p>完全二叉树：除了最后一层结点，其它层的结点数都达到了最大值；同时最后一层的结点都是按照从左到右依次排布。</p><p>满二叉树：除了最后一层，其它层的结点都有两个子结点。</p><p>平衡二叉树<br>平衡二叉树又被称为AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>二叉排序树：是一棵空树，或者：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；它的左、右子树也分别为二叉排序树。</p><p>树的高度：结点层次的最大值</p><p>平衡因子：左子树高度 - 右子树高度</p><p>二叉排序树意味着二叉树中的数据是排好序的，顺序为左结点&lt;根节点&lt;右结点，这表明二叉排序树的中序遍历结果是有序的。（还不懂二叉树四种遍历方式[前序遍历、中序遍历、后序遍历、层序遍历]的同学赶紧补习！）</p><p>图片</p><p>平衡二叉树的产生是为了解决二叉排序树在插入时发生线性排列的现象。由于二叉排序树本身为有序，当插入一个有序程度十分高的序列时，生成的二叉排序树会持续在某个方向的字数上插入数据，导致最终的二叉排序树会退化为链表，从而使得二叉树的查询和插入效率恶化。</p><p>图片</p><p>平衡二叉树的出现能够解决上述问题，但是在构造平衡二叉树时，却需要采用不同的调整方式，使得二叉树在插入数据后保持平衡。主要的四种调整方式有LL（左旋）、RR（右旋）、LR（先左旋再右旋）、RL（先右旋再左旋）。这里先给大家介绍下简单的单旋转操作，左旋和右旋。LR和RL本质上只是LL和RR的组合。</p><p>在插入一个结点后应该沿搜索路径将路径上的结点平衡因子进行修改，当平衡因子大于1时，就需要进行平衡化处理。从发生不平衡的结点起，沿刚才回溯的路径取直接下两层的结点，如果这三个结点在一条直线上，则采用单旋转进行平衡化，如果这三个结点位于一条折线上，则采用双旋转进行平衡化。</p><p>左旋：S为当前需要左旋的结点，E为当前结点的父节点。</p><p>图片</p><p>左旋的操作可以用一句话简单表示：将当前结点S的左孩子旋转为当前结点父结点E的右孩子，同时将父结点E旋转为当前结点S的左孩子。可用动画表示：</p><p>图片</p><p>右旋：S为当前需要左旋的结点，E为当前结点的父节点。右单旋是左单旋的镜像旋转。</p><p>图片</p><p>左旋的操作同样可以用一句话简单表示：将当前结点S的左孩子E的右孩子旋转为当前结点S的左孩子，同时将当前结点S旋转为左孩子E的右孩子。可用动画表示：</p><p>图片</p><p>红黑树<br>平衡二叉树（AVL）为了追求高度平衡，需要通过平衡处理使得左右子树的高度差必须小于等于1。高度平衡带来的好处是能够提供更高的搜索效率，其最坏的查找时间复杂度都是O(logN)。但是由于需要维持这份高度平衡，所付出的代价就是当对树种结点进行插入和删除时，需要经过多次旋转实现复衡。这导致AVL的插入和删除效率并不高。</p><p>为了解决这样的问题，能不能找一种结构能够兼顾搜索和插入删除的效率呢？这时候红黑树便申请出战了。</p><p>红黑树具有五个特性：</p><p>每个结点要么是红的要么是黑的。<br>根结点是黑的。<br>每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。<br>如果一个结点是红的，那么它的两个儿子都是黑的。<br>对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。<br>图片红黑树通过将结点进行红黑着色，使得原本高度平衡的树结构被稍微打乱，平衡程度降低。红黑树不追求完全平衡，只要求达到部分平衡。这是一种折中的方案，大大提高了结点删除和插入的效率。C++中的STL就常用到红黑树作为底层的数据结构。</p><p>红黑树VS平衡二叉树<br>图片</p><p>除了上面所提及的树结构，还有许多广泛应用在数据库、磁盘存储等场景下的树结构。比如B树、B+树等。这里就先不介绍了诶，下次在讲述相关存储原理的时候将会着重介绍。（其实是因为懒）</p><p> 7  堆<br>了解完二叉树，再来理解堆就不是什么难事了。堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。</p><p>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1，2n+2，因此可以直接用数组来表示一个堆。</p><p>不仅如此，堆还有一个性质：堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</p><p>图片</p><p>堆常用来实现优先队列，在面试中经常考的问题都是与排序有关，比如堆排序、topK问题等。由于堆的根节点是序列中最大或者最小值，因而可以在建堆以及重建堆的过程中，筛选出数据序列中的极值，从而达到排序或者挑选topK值的目的。</p><p> 8  散列表<br>散列表也叫哈希表，是一种通过键值对直接访问数据的机构。在初中，我们就学过一种能够将一个x值通过一个函数获得对应的一个y值的操作，叫做映射。散列表的实现原理正是映射的原理，通过设定的一个关键字和一个映射函数，就可以直接获得访问数据的地址，实现O(1)的数据访问效率。在映射的过程中，事先设定的函数就是一个映射表，也可以称作散列函数或者哈希函数。</p><p>图片</p><p>散列表的实现最关键的就是散列函数的定义和选择。一般常用的有以下几种散列函数：</p><p>直接寻址法：取关键字或关键字的某个线性函数值为散列地址。</p><p>数字分析法：通过对数据的分析，发现数据中冲突较少的部分，并构造散列地址。例如同学们的学号，通常同一届学生的学号，其中前面的部分差别不太大，所以用后面的部分来构造散列地址。</p><p>平方取中法：当无法确定关键字里哪几位的分布相对比较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为散列地址。这是因为：计算平方之后的中间几位和关键字中的每一位都相关，所以不同的关键字会以较高的概率产生不同的散列地址。</p><p>取随机数法：使用一个随机函数，取关键字的随机值作为散列地址，这种方式通常用于关键字长度不同的场合。</p><p>除留取余法：取关键字被某个不大于散列表的表长 n 的数 m 除后所得的余数 p 为散列地址。这种方式也可以在用过其他方法后再使用。该函数对 m 的选择很重要，一般取素数或者直接用 n。</p><p>确定好散列函数之后，通过某个key值的确会得到一个唯一的value地址。但是却会出现一些特殊情况。即通过不同的key值可能会访问到同一个地址，这个现象称之为冲突。</p><p>冲突在发生之后，当在对不同的key值进行操作时会使得造成相同地址的数据发生覆盖或者丢失，是非常危险的。所以在设计散列表往往还需要采用冲突解决的办法。</p><p>常用的冲突处理方式有很多，常用的包括以下几种：</p><p>开放地址法（也叫开放寻址法）：实际上就是当需要存储值时，对Key哈希之后，发现这个地址已经有值了，这时该怎么办？不能放在这个地址，不然之前的映射会被覆盖。这时对计算出来的地址进行一个探测再哈希，比如往后移动一个地址，如果没人占用，就用这个地址。如果超过最大长度，则可以对总长度取余。这里移动的地址是产生冲突时的增列序量。</p><p>再哈希法：在产生冲突之后，使用关键字的其他部分继续计算地址，如果还是有冲突，则继续使用其他部分再计算地址。这种方式的缺点是时间增加了。</p><p>链地址法：链地址法其实就是对Key通过哈希之后落在同一个地址上的值，做一个链表。其实在很多高级语言的实现当中，也是使用这种方式处理冲突的。</p><p>公共溢出区：这种方式是建立一个公共溢出区，当地址存在冲突时，把新的地址放在公共溢出区里。</p><p>目前比较常用的冲突解决方法是链地址法，一般可以通过数组和链表的结合达到冲突数据缓存的目的。</p><p>图片</p><p>左侧数组的每个成员包括一个指针，指向一个链表的头。每发生一个冲突的数据，就将该数据作为链表的节点链接到链表尾部。这样一来，就可以保证冲突的数据能够区分并顺利访问。<br>考虑到链表过长造成的问题，还可以使用红黑树替换链表进行冲突数据的处理操作，来提高散列表的查询稳定性。</p><p> 9  图<br>图相较于上文的几个结构可能接触的不多，但是在实际的应用场景中却经常出现。比方说交通中的线路图，常见的思维导图都可以看作是图的具体表现形式。</p><p>图结构一般包括顶点和边，顶点通常用圆圈来表示，边就是这些圆圈之间的连线。边还可以根据顶点之间的关系设置不同的权重，默认权重相同皆为1。此外根据边的方向性，还可将图分为有向图和无向图。</p><p>图片</p><p>图结构用抽象的图线来表示十分简单，顶点和边之间的关系非常清晰明了。但是在具体的代码实现中，为了将各个顶点和边的关系存储下来，却不是一件易事。</p><p>邻接矩阵<br>目前常用的图存储方式为邻接矩阵，通过所有顶点的二维矩阵来存储两个顶点之间是否相连，或者存储两顶点间的边权重。</p><p>图片</p><p>无向图的邻接矩阵是一个对称矩阵，是因为边不具有方向性，若能从此顶点能够到达彼顶点，那么彼顶点自然也能够达到此顶点。此外，由于顶点本身与本身相连没有意义，所以在邻接矩阵中对角线上皆为0。</p><p>图片</p><p>有向图由于边具有方向性，因此彼此顶点之间并不能相互达到，所以其邻接矩阵的对称性不再。<br>用邻接矩阵可以直接从二维关系中获得任意两个顶点的关系，可直接判断是否相连。但是在对矩阵进行存储时，却需要完整的一个二维数组。若图中顶点数过多，会导致二维数组的大小剧增，从而占用大量的内存空间。</p><p>而根据实际情况可以分析得，图中的顶点并不是任意两个顶点间都会相连，不是都需要对其边上权重进行存储。那么存储的邻接矩阵实际上会存在大量的0。虽然可以通过稀疏表示等方式对稀疏性高的矩阵进行关键信息的存储，但是却增加了图存储的复杂性。</p><p>因此，为了解决上述问题，一种可以只存储相连顶点关系的邻接表应运而生。</p><p>邻接表<br>在邻接表中，图的每一个顶点都是一个链表的头节点，其后连接着该顶点能够直接达到的相邻顶点。相较于无向图，有向图的情况更为复杂，因此这里采用有向图进行实例分析。</p><p>图片在邻接表中，每一个顶点都对应着一条链表，链表中存储的是顶点能够达到的相邻顶点。存储的顺序可以按照顶点的编号顺序进行。比如上图中对于顶点B来说，其通过有向边可以到达顶点A和顶点E，那么其对应的邻接表中的顺序即B-&gt;A-&gt;E，其它顶点亦如此。</p><p>通过邻接表可以获得从某个顶点出发能够到达的顶点，从而省去了对不相连顶点的存储空间。然而，这还不够。对于有向图而言，图中有效信息除了从顶点“指出去”的信息，还包括从别的顶点“指进来”的信息。这里的“指出去”和“指进来”可以用出度和入度来表示。</p><p>入度：有向图的某个顶点作为终点的次数和。</p><p>出度：有向图的某个顶点作为起点的次数和。</p><p>由此看出，在对有向图进行表示时，邻接表只能求出图的出度，而无法求出入度。这个问题很好解决，那就是增加一个表用来存储能够到达某个顶点的相邻顶点。这个表称作逆邻接表。</p><p>逆邻接表<br>逆邻接表与邻接表结构类似，只不过图的顶点链接着能够到达该顶点的相邻顶点。也就是说，邻接表时顺着图中的箭头寻找相邻顶点，而逆邻接表时逆着图中的箭头寻找相邻顶点。</p><p>图片</p><p>邻接表和逆邻接表的共同使用下，就能够把一个完整的有向图结构进行表示。可以发现，邻接表和逆邻接表实际上有一部分数据时重合的，因此可以将两个表合二为一，从而得到了所谓的十字链表。</p><p>十字链表<br>十字链表似乎很简单，只需要通过相同的顶点分别链向以该顶点为终点和起点的相邻顶点即可。</p><p>图片</p><p>但这并不是最优的表示方式。虽然这样的方式共用了中间的顶点存储空间，但是邻接表和逆邻接表的链表节点中重复出现的顶点并没有得到重复利用，反而是进行了再次存储。因此，上图的表示方式还可以进行进一步优化。</p><p>十字链表优化后，可通过扩展的顶点结构和边结构来进行正逆邻接表的存储：（下面的弧头可看作是边的箭头那端，弧尾可看作是边的圆点那端）</p><p>data：用于存储该顶点中的数据；</p><p>firstin指针：用于连接以当前顶点为弧头的其他顶点构成的链表，即从别的顶点指进来的顶点；</p><p>firstout指针：用于连接以当前顶点为弧尾的其他顶点构成的链表，即从该顶点指出去的顶点；</p><p>边结构通过存储两个顶点来确定一条边，同时通过分别代表这两个顶点的指针来与相邻顶点进行链接：</p><p>tailvex：用于存储作为弧尾的顶点的编号；</p><p>headvex：用于存储作为弧头的顶点的编号；</p><p>headlink 指针：用于链接下一个存储作为弧头的顶点的节点；</p><p>taillink 指针：用于链接下一个存储作为弧尾的顶点的节点；</p><p>图片</p><p>以上图为例子，对于顶点A而言，其作为起点能够到达顶点E。因此在邻接表中顶点A要通过边AE（即边04）指向顶点E，顶点A的firstout指针需要指向边04的tailvex。同时，从B出发能够到达A，所以在逆邻接表中顶点A要通过边AB（即边10）指向B，顶点A的firstin指针需要指向边10的弧头，即headlink指针。依次类推。</p><p>十字链表采用了一种看起来比较繁乱的方式对边的方向性进行了表示，能够在尽可能降低存储空间的情况下增加指针保留顶点之间的方向性。具体的操作可能一时间不好弄懂，建议多看几次上图，弄清指针指向的意义，明白正向和逆向邻接表的表示。</p><p> 10  总结<br>数据结构博大精深，没有高等数学的讳莫如深，也没有量子力学的玄乎其神，但是其在计算机科学的各个领域都具有强大的力量。本文试图采用图解的方式对九种数据结构进行理论上的介绍，但是其实这都是不够的。</p><p>即便是简单的数组、栈、队列等结构，在实际使用以及底层实现上都会有许多优化设计以及使用技巧，这意味着还需要真正把它们灵活的用起来，才能够算是真正意义上的熟悉和精通。但是本文可以作为常见数据结构的一个总结，当你对某些结构有些淡忘的时候，不妨重新回来看看。</p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。<br>动态规划最<strong>核心的思想</strong>，就在于拆分子问题，记住过往，减少重复计算。</p>]]></content>
      
      
      <categories>
          
          <category> pytohn </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信小程序</title>
      <link href="/2022/012435506.html"/>
      <url>/2022/012435506.html</url>
      
        <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>pages用来存放所有小程序的页面<br>utils用来存放工具性质的模块(例如：格式化时间的自定义模块)<br>app. js小程序项目的入口文件<br>app.json小程序项目的全局配置文件<br>app.Wxss小程序项目的全局样式文件<br>project. config. json项目的配置文件<br>sitemap json用来配置小程序及其页面是否允许被微信索引 </p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window使用</title>
      <link href="/2022/012246677.html"/>
      <url>/2022/012246677.html</url>
      
        <content type="html"><![CDATA[<h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><h2 id="不认识的汉字怎么打"><a href="#不认识的汉字怎么打" class="headerlink" title="不认识的汉字怎么打"></a>不认识的汉字怎么打</h2><p>u+汉字各部分的拼音</p><h1 id="扩展屏幕"><a href="#扩展屏幕" class="headerlink" title="扩展屏幕"></a>扩展屏幕</h1><p>如何在笔记本盖上盖子时，扩展显示屏也能显示。<br>在设置中搜索打开控制面板，然后找到电源选项打开，找到选择关闭笔记本计算机盖的功能<br><img src="https://gitee.com/wenkex/blogimage/raw/master/Quicker_20220122_091908.png"></p><h1 id="文件无法删除"><a href="#文件无法删除" class="headerlink" title="文件无法删除"></a>文件无法删除</h1><p>解决Windows10中“其中文件夹或文件已在另一程序中打开”引起的文件删不掉问题</p><h2 id="打开任务管理器"><a href="#打开任务管理器" class="headerlink" title="打开任务管理器"></a>打开任务管理器</h2><h2 id="打开资源监视器"><a href="#打开资源监视器" class="headerlink" title="打开资源监视器"></a>打开资源监视器</h2><p>1.切换任务管理器到“性能”选项页，点击最下方的“打开资源监视器”字。<br><img src="https://gitee.com/wenkex/blogimage/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220104192240.png"><br>2.搜索与该文件关联的程序并关闭</p><p>以删除word文件“文件123.docx”为例：删除桌面上“文件123.docx”文件，显示该文件已被其他程序打开，暂时无法删除。</p><p>此时在资源监视器搜索句柄处填上文件123，即可搜索与这个文件相关联的应用程序句柄。<br><img src="https://gitee.com/wenkex/blogimage/raw/master/v2-48385ce4a09d453981e9b06b1202065d_r.jpg"><br>点击与文件123相关联的句柄，然后点击鼠标右键，选择结束进程<br>此时会弹出结束进程确认对话框。<br>点击“结束进程”关闭与“文件123.docx”关联的进程。</p><p>怎样关闭Win10安装软件、改变设置时的弹窗？<br>打开更改用户账户设置  </p><p>Windows系统hosts文件路径为：C:\Windows\System32\drivers\etc</p><p>Win10电脑设置定时关机命令：<br>Win +r  输入：shutdown -s -t 3600            一小时后关机</p><p>Win10进入开机自启文件夹<br>Win+r进入运行，输入shell:startup</p><h1 id="快捷键汇总"><a href="#快捷键汇总" class="headerlink" title="快捷键汇总"></a>快捷键汇总</h1><p>win+上下箭头键：【最大化】【还原】【最小化】当前窗口</p><p>win+左右箭头键：将窗口靠左、靠右。如果有两个窗口则并列</p><p>按住ctrl 可多选文件</p><p>Win+Shift+S 截图、</p><p>Win+g  截图录屏</p><p>在英文输入状态下，按住shift输入字母可以大写</p><p>按住alt双击文件   快速打开属性</p><p>Ctrl+shift+Esc 一键打开任务管理器</p><p>Ctrl +shift+n 快速新建文件夹</p><p>按住ctrl拖动文件 就是复制</p><p>Alt+F4键：关闭当前窗口，如果没有活动窗口就带开【关闭计算机】对话框</p><p>win+A键：快速打开【系统通知和控制中心】</p><p>Win+E键：快速打开【资源管理器】</p><p>win+G键：快速打开【Xbox工具】，这个工具非常实用，包含了截图、录屏等功能</p><p>win+I键：快速打开【计算机设置】</p><p>win+K键：快速打开【无线连接】</p><p>win+L键：快速【锁定屏幕】，如果你要暂时离开电脑，这个快捷键一定要知道</p><p>win+P键：快速打开【投影】，如果你要连接第二块屏幕或投影，这是最快捷的方法</p><p>win+Q键或者win+S键：快速打开【搜索】</p><p>win+R键：快速打开【运行】</p><p>win+T键：在【任务栏程序】中进行切换</p><p>win+V键：快速打开【剪贴板】</p><p>win+W键：快速打开【全屏截图】</p><p>win+X键：打开【系统快捷菜单】，这个菜单继承了巨大部分的系统功能。</p><p>win+数字键：打开【任务栏】上相应顺序的应用程序</p><p>win+加号：启动【放大镜】，加号放大，减号缩小</p><p>win+Tab键：打开【任务视图】，还可以按时间线查看近期任务</p><p>Alt+Tab键：在打开的程序间进行切换，这是笔者最常用的快捷键</p><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><p>ctrl + w      关闭一个网页<br>Ctrl + Tab    切换网页<br>Ctrl+h 打开历史记录</p><h1 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h1><h2 id="微软自带的远程连接"><a href="#微软自带的远程连接" class="headerlink" title="微软自带的远程连接"></a>微软自带的远程连接</h2><p>联想小新pro16<br>win10专业版<br>两台设备都连着校园网，测试时，控制端不能连着电脑的热点。<br>控制端要下载：RDclient<br>成功后，你就可以不用带上你的电脑去机房上课了，直接在机房控制你的电脑，体验感翻倍</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.window要用微软账号登录<br>2.用户名是自己设置的，可以是中文，打开图二密码中的更新安全问题选项也可以看到<br>3. 密码是你的账户密码，不是PIN码哦<br>4. 显示屏关闭后，微软远程就连接不上的原因</p><ul><li>联想小新pro16可能是因为开了智能感知功能的原因，因此显示屏关闭或者盖上屏幕，控制端就无法连接上电脑</li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>打开远程桌面，win+r 输入mstsc<br>查询ip地址：win+r进入cmd,输入ipconfig</p><h2 id="ToDesk"><a href="#ToDesk" class="headerlink" title="ToDesk"></a>ToDesk</h2><p>ToDesk目前还是免费的且支持三台设备，而且界面简洁大气。</p><h2 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h2><p>特点<br>1.控制端和被控制端使用同一账号即可<br>2.可以实时查看远程主机摄像头周围的情况<br>3.方便快捷的让远程文件或本地文件互相传输和同步，安全稳定。<br>4.无需内网穿透即可实现外网连接。<br>需求<br>①是在需要被控的电脑上安装被控端;<br>②在手机上安装向日葵主控端<br>③注册一个向日葵账号。在两端同时登录就可以远程控制了。</p><h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><p>是管理各种命令行的工具，它把目前 Windows 上的 PowerShell、CMD 以及 Windows Linux 子系统（WSL）三大环境实现了统一。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开系统自带的 Microsoft Store，搜索 Windows Terminal 直接安装就可以了。</p><h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><p>是命令行程序，真正执行指令的程序，</p><h2 id="在-Windows-上安装-PowerShell"><a href="#在-Windows-上安装-PowerShell" class="headerlink" title="在 Windows 上安装 PowerShell"></a>在 Windows 上安装 PowerShell</h2><p><a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.1">https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.1</a></p><h2 id="安装-oh-my-posh-和-posh-git"><a href="#安装-oh-my-posh-和-posh-git" class="headerlink" title="安装 oh-my-posh 和 posh-git"></a>安装 oh-my-posh 和 posh-git</h2><p>oh-my-posh 是 PowerShell 主题管理工具<br>posh-git 可以实现类似 oh-my-zsh 一样的 Git 命令增强工具（命令别名和显示分支信息等）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git</span><br><span class="line">Install-Module oh-my-posh</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-PowerShell"><a href="#配置-PowerShell" class="headerlink" title="配置 PowerShell"></a>配置 PowerShell</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这是开启默认配置的</span><br><span class="line">Set-Prompt</span><br><span class="line"># 设置主题，Agnoster 是主题名</span><br><span class="line">Set-Theme Agnoster</span><br></pre></td></tr></tbody></table></figure><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="安装Scoop"><a href="#安装Scoop" class="headerlink" title="安装Scoop"></a>安装Scoop</h2><p>强大的 Windows 包管理工具 Scoop<br>Scoop 可以帮你一行命令安装 git 工具、java 环境、chrome 浏览器、vscode 等等，统一目录管理，而且自动配置环境变量，卸载也只需要一行命令，方便的不能在方便了<br>设置安装路径（可选）。默认 Scoop 是安装在 C 盘的，以及通过 Scoop 安装的软件也是在 C 盘的。如果你的 C 盘空间不够或想安装到其他盘，可以执行以下操作。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置 scoop 安装路径为 D:\scoop</span><br><span class="line">$env:SCOOP='D:\scoop'</span><br><span class="line">[environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')</span><br></pre></td></tr></tbody></table></figure><p>安装 Scoop</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将执行权限改为本地无需签名</span><br><span class="line">Set-ExecutionPolicy RemoteSigned -scope CurrentUser</span><br><span class="line"># 下载并执行脚本</span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br></pre></td></tr></tbody></table></figure><h1 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h1><p>是Windows下的命令行工具。有git分布式版本控制工具，也主要用于git。</p><p>1 在windows下使用linux命令操作</p><p>2 登陆远程linux服务器&nbsp;ssh</p><h2 id="在window-terminal中添加git-bash"><a href="#在window-terminal中添加git-bash" class="headerlink" title="在window terminal中添加git bash"></a>在window terminal中添加git bash</h2><p><a href="https://www.cnblogs.com/cong-wang/p/15026535.html">https://www.cnblogs.com/cong-wang/p/15026535.html</a><br>打开设置文件settings.json，在profiles的list中添加一项：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"guid"</span> : <span class="string">"{5D1F95DF-36E8-56AD-C203-EA75CE06422C}"</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"Git Bash"</span>,</span><br><span class="line">  <span class="attr">"commandline"</span> : <span class="string">"D:\\ruanjian\\Git\\bin\\bash.exe --login -i"</span>,</span><br><span class="line">  <span class="attr">"icon"</span> : <span class="string">"D:\\ruanjian\\Git\\git-bash.png"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>guid：唯一标识本命令行配置，可以使用在线guid工具随机生成一个和list中其他配置不一样的guid即可<br>name：本命令行配置的名字，会显示在菜单中<br>commandline：表示怎么启动一个命令行，这里填的是”E:\Git\bin\bash.exe –login -i”，需要找到你的Git的安装目录，将E:\Git\bin\bash.exe替换成你自己的路径<br>icon：显示在菜单中的图标</p><h1 id="沙盒"><a href="#沙盒" class="headerlink" title="沙盒"></a>沙盒</h1><p>控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能</p><p>打开沙盒（在开始菜单中）,直接将要运行的程序，不确定安全性的程序复制粘贴进去就行,关机就清空数据了</p><h1 id="Win10家庭版升级成专业版"><a href="#Win10家庭版升级成专业版" class="headerlink" title="Win10家庭版升级成专业版"></a>Win10家庭版升级成专业版</h1><p>首先用360c盘搬家软件，转移大文件，然后用dism制作系统镜像，进行备份。</p><p>最后用HEU软件更改win10版本信息为专业版 ，再上这个网站进行kms服务器激活<br>果核剥壳KMS激活服务器 - 果核剥壳 (ghxi.com)</p><p>win10版本有哪些_w10版本区别是什么_win10版本号大全－系统城 (xitongcheng.com)</p><p>Consumer editions零售版本包括：家庭版、教育版、专业版<br>Business editionsVOL 版本包括：企业版、教育版、专业版   ，KMS方式激活 请用business_editions！</p><p>密钥网站：<a href="https://pkeytools.azurewebsites.net/ShareKeys">https://pkeytools.azurewebsites.net/ShareKeys</a></p><p>成功经验<br>在下面网址找密钥，输入了专业工作站版密钥，然后重启电脑，再输入专业版密钥</p><p><a href="https://mp.weixin.qq.com/s/Cpi41y4vh4IvHOKKCLDWvw">https://mp.weixin.qq.com/s/Cpi41y4vh4IvHOKKCLDWvw</a></p><p>查看密钥情况：cmd 中slmgr.vbs -dlv</p><h1 id="Win10进入开机自启文件夹"><a href="#Win10进入开机自启文件夹" class="headerlink" title="Win10进入开机自启文件夹"></a>Win10进入开机自启文件夹</h1><p>Win+r进入运行，输入shell:startup</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2022/010947193.html"/>
      <url>/2022/010947193.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://markdown.com.cn/basic-syntax/">官方文档</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</p><p>Markdown 是 HTML 的一种简写，在显示时会『解压缩』成 HTML。理论上你可以在 Markdown 里直接插入合法的 HTML 块，他们会成为最终的 HTML 的一部分，做到 Markdown 本身做不到的事。<br>Markdown 的格式可以由 CSS 描述</p><h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>要创建标题，请在单词或短语前面添加# 。#的数量代表了标题的级别<br>用一个空格在#和标题之间进行分隔。</p><h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><p>粗体（Bold）加斜体（Italic）</p><p>要加粗文本，请在单词或短语的前后各添加三个星号（asterisks）</p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>删除线就是给文本加上删除线，在文本两端使用两个波浪线~</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~文本~~</span><br></pre></td></tr></tbody></table></figure><p><del>文本</del></p><h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><p>要创建块引用，请在段落前添加一个&gt;符号。</p><h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><p>在代码块之前和之后的行上使用三个反引号（(```）或三个波浪号（~~~）。</p><p>在反引号后面加上语言的名字就可以享受到对应语言的语法高亮。</p><p>用反引号括起来，反引号是英文输入下，tab的上一个键</p><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。为了兼容性，请在分隔线的前后均添加空白行</p><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><p>超链接Markdown语法代码：[超链接显示名](超链接地址 “超链接title”)<br>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![ddfdfd](图片链接 "图片title")</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><a href="https://tableconvert.com/zh-CN/">Markdown表格工具</a><br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><h2 id="hexo文章"><a href="#hexo文章" class="headerlink" title="hexo文章"></a>hexo文章</h2><p>表格要与正文空两行才可以渲染</p><h2 id="表格的对齐方式"><a href="#表格的对齐方式" class="headerlink" title="表格的对齐方式"></a>表格的对齐方式</h2><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure><h1 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h1><p>任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。</p><ul><li><input checked="" disabled="" type="checkbox"> Write the press release</li><li><input disabled="" type="checkbox"> Update the website</li><li><input disabled="" type="checkbox"> Contact the media<h1 id="使用-Emoji-表情"><a href="#使用-Emoji-表情" class="headerlink" title="使用 Emoji 表情"></a>使用 Emoji 表情</h1>复制使用<br><a href="https://emojipedia.org/">https://emojipedia.org/</a></li></ul><p><a href="https://gist.github.com/rxaviers/7360908">https://gist.github.com/rxaviers/7360908</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><h2 id="微信Markdown编辑器"><a href="#微信Markdown编辑器" class="headerlink" title="微信Markdown编辑器"></a>微信Markdown编辑器</h2><p>这个项目名doocs-md，在编写时，Markdown 文档自动即时渲染为微信图文，让你不再为微信文章排版而发愁！<br>项目地址：<a href="https://github.com/doocs/md">https://github.com/doocs/md</a></p><p>在线体验地址：</p><p>• Gitee Pages：<a href="https://doocs.gitee.io/md">https://doocs.gitee.io/md</a></p><p>• GitHub Pages：<a href="https://doocs.github.io/md">https://doocs.github.io/md</a></p><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><p>• 支持自定义 CSS 样式</p><p>• 支持 Markdown 所有基础语法</p><p>• 支持浅色、暗黑两种主题模式</p><p>• 支持 Ctrl + F 快速格式化文档</p><p>• 支持色盘取色，快速替换文章整体色调</p><p>• 支持多图上传，可自定义配置图床</p><p>• 支持自定义上传逻辑</p><p>• 支持在编辑框右键弹出功能选项卡</p><p>• 支持批量转换本地图片为线上图片</p><h3 id="使用-Docker-镜像"><a href="#使用-Docker-镜像" class="headerlink" title="使用 Docker 镜像"></a>使用 Docker 镜像</h3><p><code>docker run -d -p 8080:80 doocs/md:latest</code><br>容器运行起来之后，打开浏览器，访问 <a href="http://localhost:8080/">http://localhost:8080</a> 即可。</p><h3 id="使用-npm-cli"><a href="#使用-npm-cli" class="headerlink" title="使用 npm cli"></a>使用 npm cli</h3><p>通过我们的 npm cli 你可以轻易搭建属于自己的微信 Markdown 编辑器。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm i -g @doocs/md-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">md-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">open http://127.0.0.1:8800/md/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并指定端口</span></span><br><span class="line">md-cli port=8899</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">open http://127.0.0.1:8899/md/</span><br></pre></td></tr></tbody></table></figure><h2 id="Marktext"><a href="#Marktext" class="headerlink" title="Marktext"></a>Marktext</h2><p><a href="https://github.com/marktext/marktext">项目地址</a><br>适用于 Linux、MacOS 和 Windows。</p><p>支持实时预览和干净简单的界面，以获得无干扰的写作体验；</p><p>支持 Markdown 扩展，例如：数学表达式（KaTeX）、表情符号等；</p><p>支持段落和内联样式快捷方式，从而提高写作效率；</p><p>支持导出 HTML 和 PDF 格式的文件；</p><p>支持多种主题，例如：Cadmium Light、Dark、Graphite Light、Material Dark、One Dark、UIysses Light；</p><p>支持多种模式，例如：源代码模式、打字机模式、专注模式；</p><p>支持可直接从剪贴板粘贴图像；</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE配置及使用</title>
      <link href="/2022/01093653.html"/>
      <url>/2022/01093653.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="保存后格式化"><a href="#保存后格式化" class="headerlink" title="保存后格式化"></a>保存后格式化</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    vscode保存后的动作</span></span><br><span class="line">    <span class="string">"editor.codeActionsOnSave"</span>: {</span><br><span class="line">        <span class="comment">// 保存后自动格式化js,css代码，需要安装插件(ESLint,StyleLint)</span></span><br><span class="line">        <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"source.fixAll.stylelint"</span>: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><h3 id="括号对着色"><a href="#括号对着色" class="headerlink" title="括号对着色"></a>括号对着色</h3><p>Editor › Bracket Pair Colorization: Enabled<br>控制是否已启用括号对着色。使用 Workbench: Color Customizations 替代括号高亮颜色。</p><h2 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h2><p>F1 或 Ctrl+Shift+P（俗称万能键）  ：打开命令面板</p><p>ctrl+y 取消撤销</p><p>1.查看函数或者类的定义<br>Ctrl+鼠标左键点击函数名或者类名即可跳转到定义处，在函数名或者类名上按F12也可以实现同样功能</p><p>重命名变量：f2</p><p>单行注释&nbsp; Ctrl +/<br>块注释:Alt + Shift + A</p><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3><p>新建文件:   Ctrl+N</p><p>文件之间切换:   Ctrl+Tab</p><p>打开一个新的VS Code编辑器:    Ctrl+Shift+N</p><p>关闭当前窗口:   Ctrl+W</p><p>关闭当前的VS Code编辑器:   Ctrl+Shift+W</p><p>切出一个新的编辑器窗口(分屏–最多3个):   Ctrl+\</p><p>切换左中右3个编辑器窗口的快捷键:   Ctrl+1  Ctrl+2  Ctrl+3</p><p>##3 格式调整</p><p>代码行向左或向右缩进:   Ctrl+[ 、 Ctrl+] </p><p>复制或剪切当前行/当前选中内容:   Ctrl+C 、 Ctrl+V</p><p>代码格式化:   Shift+Alt+F</p><p>向上或向下移动一行:   Alt+Up 或 Alt+Down</p><p>向上或向下复制一行:   Shift+Alt+上键 或 Shift+Alt+下键</p><p>在当前行下方插入一行:   Ctrl+Enter</p><p>在当前行上方插入一行:   Ctrl+Shift+Enter</p><h3 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h3><p>移动到行首:   Home<br>移动到行尾:   End</p><p>移动到文件结尾:   Ctrl+End</p><p>移动到文件开头:   Ctrl+Home</p><p>移动到定义处:   F12</p><p>查看定义处缩略图(只看一眼而不跳转过去):    Alt+F12</p><p>选择从光标到行尾的内容:   Shift+End</p><p>选择从光标到行首的内容： Shift+Home</p><p>删除光标右侧的所有内容(当前行):   Ctrl+Delete</p><p>扩展/缩小选取范围： Shift+Alt+Right 和 Shift+Alt+Left</p><p>多行编辑(列编辑):   Alt+Shift+鼠标左键 或 Ctrl+Alt+Down/Up</p><p>同时选中所有匹配编辑(与当前行或选定内容匹配):   Ctrl+Shift+L</p><p>下一个匹配的也被选中:   Ctrl+D</p><p>回退上一个光标操作:   Ctrl+U</p><p>撤销上一步操作: Ctrl+Z</p><p>手动保存:   Ctrl+S</p><h3 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h3><p>找到所有的引用:   Shift+F12</p><p>重命名变量:   Ctrl+F2</p><p>跳转到下一个 Error 或 Warning:   当有多个错误时可以按 F8 逐个跳转</p><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><p>查找:   Ctrl+F</p><p>查找替换:   Ctrl+H</p><h3 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h3><p>全屏显示(再次按则恢复):   F11</p><p>放大或缩小(以编辑器左上角为基准):   Ctrl +/-</p><p>侧边栏显示或隐藏： Ctrl+B</p><p>显示资源管理器(光标切到侧边栏中才有效):   Ctrl+Shift+E</p><p>显示搜索(光标切到侧边栏中才有效):   Ctrl+Shift+F</p><p>显示源代码管理(光标切到侧边栏中才有效):    Ctrl+Shift+G+G</p><p>显示 Debug:    Ctrl+Shift+D</p><p>显示 Output:    Ctrl+Shift+U</p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><h3 id="Code-runner"><a href="#Code-runner" class="headerlink" title="Code-runner"></a>Code-runner</h3><p>在设置中搜索Code-runner: File Directory As Cwd<br>这个选项的作用是将我们运行的py文件所在目录设置为当前工作目录</p><h2 id="Beautify"><a href="#Beautify" class="headerlink" title="Beautify"></a>Beautify</h2><p>搜索Beautify，点击Beautify file美化整个文件。代码被自动换行，也进行了格式化。这个美化操作支持多种格式的源代码。</p><h2 id="管理-ignore-files文件"><a href="#管理-ignore-files文件" class="headerlink" title="管理.ignore files文件"></a>管理.ignore files文件</h2><p>AnGitIgnored</p><h2 id="图像编辑器"><a href="#图像编辑器" class="headerlink" title="图像编辑器"></a>图像编辑器</h2><p>Luna Paint — Image Editor<br>一个内置在 VS Code 中的图像编辑器，支持 png，jpg，webp，bmp 和 ico 格式。</p><h2 id="缩进带颜色"><a href="#缩进带颜色" class="headerlink" title="缩进带颜色"></a>缩进带颜色</h2><p>Indent-Rainbow</p><h2 id="可视化模块依赖关系"><a href="#可视化模块依赖关系" class="headerlink" title="可视化模块依赖关系"></a>可视化模块依赖关系</h2><p>Dependency Cruiser Extension</p><h2 id="删除空行"><a href="#删除空行" class="headerlink" title="删除空行"></a>删除空行</h2><p>Remove empty lines</p><h2 id="change-case"><a href="#change-case" class="headerlink" title="change-case"></a>change-case</h2><p>ctrl + shift + p 调出命令面板:搜索change-case snack</p><p>更改当前选择的单词的格式, 比如<br>  大小写,<br>  js的驼峰camel,<br>  python的蛇形snake,<br>  css的串式kebab,<br>  java的匈牙利HN</p><h2 id="AI辅助-单元测试"><a href="#AI辅助-单元测试" class="headerlink" title="AI辅助-单元测试"></a>AI辅助-单元测试</h2><p>Ponicode</p><h2 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h2><p>koroFileHeader</p><p>用于生成文件头部注释和函数注释</p><p><strong>文件头部注释快捷键</strong><br>记录文件信息/文件的传参/出参，设置个性签名、留下QQ、微信联系方式、输入空行等等<br>支持用户高度自定义注释选项, 适配各种需求的注释形式。<br>保存文件的时候，自动更新最后的编辑时间和编辑人<br>    window：ctrl+win+i,<br>    mac：ctrl+cmd+i,<br>    linux: ctrl+meta+i,<br>    Ubuntu: ctrl+super+i</p><p><strong>函数注释注释快捷键</strong><br>更多关于函数参数自动请查阅配置-函数注释自动提取函数的参数文档<br>将光标放在函数行或者将光标放在函数上方的空白行。<br>自动解析函数参数，生成函数参数注释。<br>快捷键：<br>    window：ctrl+win+t,<br>    mac：ctrl+cmd+t,<br>    linux: ctrl+meta+t,<br>    Ubuntu: ctrl+super+t</p><p>快捷键不生效<br>在vscode界面输入 ctrl+shift+p ， 搜索找到键盘快捷方式,再搜索 cursortip （函数注释快捷键）</p><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>加入设置的setting.json</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">"background.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"background.useDefault"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"background.customImages"</span>: [</span><br><span class="line">    <span class="string">"file:///E:/wenke_source/my picture/壁纸.jpg"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"background.style"</span>: {</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"''"</span>,</span><br><span class="line">    <span class="attr">"pointer-events"</span>: <span class="string">"none"</span>,</span><br><span class="line">    <span class="attr">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">    <span class="attr">"top"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"right"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"background-size"</span>: <span class="string">"cover"</span>,</span><br><span class="line">    <span class="attr">"opacity"</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="attr">"z-index"</span>: <span class="string">"99999"</span>,</span><br><span class="line">    <span class="attr">"width"</span>: <span class="string">"100%"</span>,</span><br><span class="line">    <span class="attr">"height"</span>: <span class="string">"100%"</span>,</span><br><span class="line">    <span class="attr">"background-repeat"</span>: <span class="string">"no-repeat"</span>,</span><br><span class="line">},</span><br><span class="line"><span class="string">"bracketPairColorizer.depreciation-notice"</span>: <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="同步配置。"><a href="#同步配置。" class="headerlink" title="同步配置。"></a>同步配置。</h2><p>Settings Sync</p><p>1.用Github账户登录<br>2.创建一个新的GIST或选择存在的GIST<br>3.上传配置<br>按下 Shift + Alt + U</p><p>4.下载配置<br>按下 Shift + Alt + D</p><h2 id="美化文件图标"><a href="#美化文件图标" class="headerlink" title="美化文件图标"></a>美化文件图标</h2><p>Material Icon Theme：</p><h2 id="实时预览图片"><a href="#实时预览图片" class="headerlink" title="实时预览图片"></a>实时预览图片</h2><p>Image Preview </p><h2 id="项目管理"><a href="#项目管理" class="headerlink" title="项目管理"></a>项目管理</h2><p>Project Manager</p><p>用来快速打开项目</p><h2 id="路径补充"><a href="#路径补充" class="headerlink" title="路径补充"></a>路径补充</h2><p>Path Intellisense ,模块导入, 智能提示</p><h2 id="绘图工具"><a href="#绘图工具" class="headerlink" title="绘图工具"></a>绘图工具</h2><p>vscode-drawio</p><h2 id="展示数据结构形成过程"><a href="#展示数据结构形成过程" class="headerlink" title="展示数据结构形成过程"></a>展示数据结构形成过程</h2><p>debug-visualizer</p><h2 id="database-client"><a href="#database-client" class="headerlink" title="database-client"></a>database-client</h2><p>支持MySQL/MariaDB, PostgreSQL, SQLite, Redis, ClickHouse, 达梦以及ElasticSearch的管理, 且可以作为一个SSH客户端, 最大程度地提高你的生产力!</p><h2 id="CodeTour"><a href="#CodeTour" class="headerlink" title="CodeTour"></a>CodeTour</h2><p>CodeTour 允许我们为代码添加备注，并且将这些备注串联起来，动态地展示我们的思路以及代码逻辑。</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="用户代码片段-snippets-语法"><a href="#用户代码片段-snippets-语法" class="headerlink" title="用户代码片段  snippets 语法"></a>用户代码片段  snippets 语法</h3><p><a href="https://mp.weixin.qq.com/s/abJg5w1XtWxo42qIfweIFg">原文</a></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"alpha"</span>: {</span><br><span class="line">        <span class="attr">"prefix"</span>: [<span class="string">"a"</span>, <span class="string">"z"</span>],</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"字母"</span>,</span><br><span class="line">        <span class="attr">"scope"</span>: <span class="string">"javascript"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>prefix 是触发的前缀，可以指定多个<br>body 是插入到编辑器中的内容，支持很多语法<br>description 是描述<br>scope 是生效的语言，不指定的话就是所有语言都生效</p><h4 id="vscode代码片段生成器"><a href="#vscode代码片段生成器" class="headerlink" title="vscode代码片段生成器"></a>vscode代码片段生成器</h4><p>utools插件</p><h2 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h2><h3 id="运行python代码"><a href="#运行python代码" class="headerlink" title="运行python代码"></a>运行python代码</h3><p>在终端中运行python代码:在VSCode终端显示运行结果，它会默认显示当前环境和被执行文件的路径</p><p>在python终端中运行选定内容：在python交互窗口执行文件，执行的过程中我们可以通过输入框进行输入交互。它类似Jupyter, 每次运行都是独立的单元格，方便观察结果</p><h3 id="python代码输出中文乱码"><a href="#python代码输出中文乱码" class="headerlink" title="python代码输出中文乱码"></a>python代码输出中文乱码</h3><p>在”文件”－“首选项”－”用户设置”中搜索code-runner.executorMap选项，提示需要在setting.json中修改<br>“code-runner.executorMap”: {<br>“python”: “set PYTHONIOENCODING=utf8 &amp;&amp; python -u”<br>}</p><h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><p>关闭 vscode 的自动导入包功能，经常导错<br>设置搜索Python › Analysis: Auto Import Completions，并关闭</p><h3 id="用户代码片段"><a href="#用户代码片段" class="headerlink" title="用户代码片段"></a>用户代码片段</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"python"</span>:{</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"!py"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">        <span class="string">"#!/usr/bin/env python3.8.8"</span>,</span><br><span class="line">        <span class="string">"# -*- encoding: utf-8 -*-"</span>,</span><br><span class="line">        <span class="string">"'''"</span>,</span><br><span class="line">        <span class="string">"@File    :   $TM_FILENAME"</span>,</span><br><span class="line">        <span class="string">"@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"</span>,</span><br><span class="line">        <span class="string">"@Author  :   wenke "</span>,</span><br><span class="line">        <span class="string">"@Version :   1.0"</span>,</span><br><span class="line">        <span class="string">"@Contact :   1184664659@qq.com"</span>,</span><br><span class="line"><span class="string">"@WebSite :   https://wenkexia.github.io"</span>,</span><br><span class="line">        <span class="string">"@Desc    :   None"</span>,</span><br><span class="line">        <span class="string">"'''"</span>,</span><br><span class="line">    </span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"if __name__ == '__main__':"</span>,</span><br><span class="line">    </span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"$0"</span></span><br><span class="line">    ],</span><br><span class="line">    }   </span><br><span class="line">}</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="python插件"><a href="#python插件" class="headerlink" title="python插件"></a>python插件</h3><p>AI Doc write:ai帮你写注释<br>只要选中函数代码，然后按一个快捷键就会自动生成该方法的注释，可用来生成函数文档，</p><p>Sourcegraph<br>你可以直接从 VS Code IDE 免费搜索数百万个开源存储库。从有用的代码示例中学习，搜索最佳实践，并从开源宇宙中数百万个存储库中重用代码。</p><p>Krinql<br>如果你看不懂代码，可以让 Krinql 来回答，或者让它编写文档字符串：</p><h1 id="JetBrains系列"><a href="#JetBrains系列" class="headerlink" title="JetBrains系列"></a>JetBrains系列</h1><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>安装目录下的bin目录，可以看到一个idea.properties文件，核心配置文件<br>参数：<br>    1.idea.config.path<br>    这个目录是我们在File\settings标签下做的一些配置，例如CodeStyle、KeyMaps等。</p><pre><code>2.idea.system.path这个目录下的配置很关键，编译工具、本地历史、工作空间配置等都在这里。3.idea.plugins.path这里放的是我们安装的一些插件，如果你需要增加插件，除了在IDEA的操作界面添加，把插件移动到这个目录然后重启也可以安装成功，这就是离线安装。4.idea.log.path这个目录保存了IDEA产生的log。如果你觉得占用空间过大，也可以删掉部分过期的log。</code></pre><h2 id="jetbrains系列产品激活"><a href="#jetbrains系列产品激活" class="headerlink" title="jetbrains系列产品激活"></a>jetbrains系列产品激活</h2><p>使用服务器激活方式，不过不稳定</p><h1 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h1><h2 id="备份配置"><a href="#备份配置" class="headerlink" title="备份配置"></a>备份配置</h2><p>配置信息导出到文件：点击file，选择export settings<br>配置文件的导入：点击file，选择import settings</p><h2 id="插件下载位置更改"><a href="#插件下载位置更改" class="headerlink" title="插件下载位置更改"></a>插件下载位置更改</h2><p>原来的配置和下载的插件:C:\Users\wenke\AppData\Roaming\JetBrains\PyCharm2022.1</p><p>找到如下图所示关系配置项。修改为自己设定的文件位置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idea.config.path=D:/data/pycharm/config</span><br><span class="line">idea.system.path=D:/data/pycharm/system</span><br><span class="line">idea.plugins.path=D:/data/pycharm/plugins</span><br><span class="line">idea.log.path=D:/data/pycharm/log</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>如果你需要安装一个新的pycharm，把配置好的目录以及bin下的idea.properties文件，直接copy到新的pycharm的配置文件目录就可以了。</p><h2 id="多个版本冲突"><a href="#多个版本冲突" class="headerlink" title="多个版本冲突"></a>多个版本冲突</h2><p>打开C盘用户名下的文件夹，按图中步骤打开Roaming，找到JetBrains，将JetBrains目录删除，然后PyChram就可以打开了。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + alt + L  ：一键格式化代码<br>ctrl +shift +f :全局查找<br>ctrl +shift +f ：全局替换<br>shift +f10:运行<br>shift + Enter :换行<br>CTRL + SHIFT + F10    运行当前编辑区的程序文件    </p><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><p>PyCharm”→“File”→“Settings”→“Editor”→“File and Code Templates</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: ${USER}</span></span><br><span class="line"><span class="string">@software: ${PRODUCT_NAME}</span></span><br><span class="line"><span class="string">@file: ${NAME}.py</span></span><br><span class="line"><span class="string">@time: ${DATE} ${TIME}</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><h2 id="设置-2"><a href="#设置-2" class="headerlink" title="设置"></a>设置</h2><p>设置-&gt;编辑器-&gt;常规-&gt;自动导入   (开启自动导包，删包)</p><h2 id="更改用户保存目录"><a href="#更改用户保存目录" class="headerlink" title="更改用户保存目录"></a>更改用户保存目录</h2><p>原来的配置和下载的插件，可以将原来C盘（C:\Users\xxx.IntelliJIdea）对应的文件<br>或者在C:\Users\wenke\AppData\Roaming\JetBrains\PyCharm2022.1</p><p>在你的IDEA安装目录下的bin目录，可以看到一个idea.properties文件，这个文件是IDEA的核心配置文件<br>找到如下图所示关系配置项。修改为自己设定的文件位置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idea.system.path=D:/data/IDEA/system</span><br><span class="line"># 配置</span><br><span class="line">idea.config.path=D:/data/IDEA/config</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>maven<br>用户设置文件：C:\Users\wenke.m2\settings.xml<br>本地仓库：C:\Users\wenke.m2\repository</p><p>我设置成<br>用户设置文件：D:\data\IDEA.IntelliJIdea.m2\settings.xml<br>本地仓库：D:\data\IDEA.IntelliJIdea.m2\repository</p><h2 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + d 快速复制这行到下一行</p><p>alt + insert ：自动生成get,set方法</p><p>注释<br>行注释Ctrl+/、<br>块注释Ctrl+Shift+/<br>文档注释  /**+enter</p><h3 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h3><p>按住ctrl选中多个文件，右击选比较文件或者ctrl+d</p><h2 id="自动生成"><a href="#自动生成" class="headerlink" title="自动生成"></a>自动生成</h2><p>psvm:main()方法</p><p>“内容”.sout :输出语句</p><p>fori:for循环语句</p><p>flag.whil + 回车：while语句</p><p>flag.if + 回车 ：if语句</p><p>new 类名.var + 回车 ：自动生成对象</p><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><p>Alibaba Java Coding Guidelines（阿里巴巴Java开发规范）</p><p>Key Promoter X（IDEA快捷键提示）</p><p>Save Actions（当程序员将代码保存后，插件会自动进行格式化）</p><p>Codota AI Autocomplete（代码自动提示和推荐）</p><p>Auto filling Java call arguments（自动填充调用方法参数）<br>在调用函数时，通过alt+enter键，触发联想功能，选择”auto fill call parameters”自动填充调用的函数的形参名。</p><p>GenerateAllSetter（自动生成调用对象的set方法）</p><p>Maven Helper（Maven依赖分析工具）<br>该插件可以查看maven的依赖树，分析版本冲突，并提供maven常用命令模板。</p><h2 id="代码模板-1"><a href="#代码模板-1" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="自定义代码模板"><a href="#自定义代码模板" class="headerlink" title="自定义代码模板"></a>自定义代码模板</h3><p>第一个是代码模板快捷输入语句，第二个是说明，第三个就是我们自己定义的代码模板，$END$是回车后光标自动跳转的地方。</p><h3 id="创建类模板"><a href="#创建类模板" class="headerlink" title="创建类模板"></a>创建类模板</h3><p>1.按照顺序打开File–&gt;settings–&gt;Editor–&gt;File and Code Templates–&gt;Includes-&gt;File Header<br>2.输入类注释模板</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ${NAME}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> ${DATE} ${TIME}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ${USER}</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建方法模板"><a href="#创建方法模板" class="headerlink" title="创建方法模板"></a>创建方法模板</h3><p>1.按照顺序打开File–&gt;Settings–&gt;Editor–&gt;Live Templates<br>2.点击右边的”+“号,选择Template Group,创建自己的组名<br>3.选择自己的组名，点击”+”号，选择Live Template<br>4.填写Abbreviation(你设定的关键字)，Description(对模板的描述，会在调用时提示;)<br>5.点击 Define(模板作用的位置) 选择java</p><p>6.Template text(要显示的完整代码;)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span>: $date$-$time$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: $USER$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span>: $params$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: $return$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>7.编辑模板变量,然后将每一行最后的“Skip if defined”勾选。<br>data:data()<br>time:time()<br>USER:user()</p><p>param默认可选择的方法<br><code>groovyScript("def result = '';def params = \"${_1}\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) {if(params[i] != '')result+='* @param ' + params[i] + ' ' +((i &lt; params.size() - 1) ? '\\r\\n ' : '')}; return result == '' ? null : result", methodParameters()) </code></p><p>return默认可选择的方法<br><code>groovyScript("def returnType = \"${_1}\"; def result ='';if(returnType=='null'||returnType=='void'){return;}else{result += '* @return ';cls = returnType.split('&lt;');for(i = 0; i &lt; cls.size(); i++){temp = cls[i].tokenize('.');result += temp[temp.size() - 1] + ((i &lt; cls.size() - 1) ? '&lt;' : '');};return result + ' ';}", methodReturnType()); </code></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2022/010834543.html"/>
      <url>/2022/010834543.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.liaoxuefeng.com/wiki/1016959663602400">廖雪峰python教程</a></p><h1 id="配置python开发环境"><a href="#配置python开发环境" class="headerlink" title="配置python开发环境"></a>配置python开发环境</h1><h2 id="Linux下配置python"><a href="#Linux下配置python" class="headerlink" title="Linux下配置python"></a>Linux下配置python</h2><h3 id="linux安装anconda"><a href="#linux安装anconda" class="headerlink" title="linux安装anconda"></a>linux安装anconda</h3><p>Anaconda 是一个用于python/R科学计算和机器学习的开源工具(也称为Python的一种发行版)，支持 Linux, macOS, Windows, 包含了conda等众多工具包及其依赖项，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题</p><p>直接使用linux命令行下载</p><h4 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h4><p>#首先安装wget<br>sudo apt-get install wget  # Ubuntu<br>sudo yum install wget  # CentOS</p><p>#然后使用wget从清华源上下载Anaconda3-2021.05-Linux-x86_64.sh<br>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh</a></p><p>#安装Anaconda：<br>sh Anaconda3-2021.05-Linux-x86_64.sh<br>#查看许可时可输入q来退出</p><h4 id="将conda加入环境变量"><a href="#将conda加入环境变量" class="headerlink" title="将conda加入环境变量"></a>将conda加入环境变量</h4><p>加入环境变量是为了让系统能识别conda命令</p><p>#1.在终端中打开~/.bashrc：<br>vim ~/.bashrc</p><p>#2.在<del>/.bashrc中将conda添加为环境变量：<br>#先按i进入编辑模式在第一行输入：<br>export PATH=”</del>/anaconda3/bin:$PATH”<br>#若安装时自定义了安装位置，则将~/anaconda3/bin改为自定义的安装目录下的bin文件夹</p><p>3.修改完成后，先按esc键退出编辑模式，再输入:wq!并回车，以保存退出</p><p>4.验证是否能识别conda命令：</p><p>在终端中输入<code>source ~/.bash_profile</code>以更新环境变量<br>再在终端输入<code>conda info --envs</code>，若能显示当前有base环境，则conda已加入环境变量</p><h2 id="Windows下安装Anaconda"><a href="#Windows下安装Anaconda" class="headerlink" title="Windows下安装Anaconda"></a>Windows下安装Anaconda</h2><p>下载：<a href="https://docs.anaconda.com/anaconda/install/windows/">https://docs.anaconda.com/anaconda/install/windows/</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\anaconda</span><br><span class="line">E:\anaconda\Scripts</span><br><span class="line">E:\anaconda\Library\bin</span><br></pre></td></tr></tbody></table></figure><p>浏览器驱动放在D:\ruanjian\anaconda\Scripts</p><h1 id="管理虚拟环境"><a href="#管理虚拟环境" class="headerlink" title="管理虚拟环境"></a>管理虚拟环境</h1><h2 id="virtualenvwrapper管理python虚拟环境"><a href="#virtualenvwrapper管理python虚拟环境" class="headerlink" title="virtualenvwrapper管理python虚拟环境"></a>virtualenvwrapper管理python虚拟环境</h2><h3 id="window下安装并配置virtualenvwrapper"><a href="#window下安装并配置virtualenvwrapper" class="headerlink" title="window下安装并配置virtualenvwrapper"></a>window下安装并配置virtualenvwrapper</h3><p>由于 virtualenvwrapper 是 virtualenv 的一组扩展，所以如果要使用 virtualenvwrapper，就必须先安装 virtualenv。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>默认创建的虚拟环境位于C:\Users\username\envs,可以通过环境变量 WORKON_HOME 来定制。</p><p>通过计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。</p><h3 id="Linux下安装并配置"><a href="#Linux下安装并配置" class="headerlink" title="Linux下安装并配置"></a>Linux下安装并配置</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper   # 安装</span><br><span class="line"></span><br><span class="line">find / -name virtualenvwrapper.sh    #先find一下virtualenvwrapper.sh文件的位置</span><br></pre></td></tr></tbody></table></figure><p>在~/.bashrc 文件新增配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line">export PROJECT_HOME=$HOME/workspace</span><br><span class="line">export VIRTUALENVWRAPPER_SCRIPT=/usr/bin/virtualenvwrapper.sh</span><br><span class="line">source /usr/bin/virtualenvwrapper.sh</span><br></pre></td></tr></tbody></table></figure><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有的虚拟环境，两种方法</span></span><br><span class="line">workon</span><br><span class="line">lsvirtualenv   #同时列出虚拟环境路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建虚拟环境</span></span><br><span class="line">mkvirtualenv 虚拟环境名称   </span><br><span class="line">mkvirtualenv --python=D:\Python\python.exe test4        #指定python版本</span><br><span class="line"></span><br><span class="line">workon 虚拟环境名称 # 进入虚拟环境,进入后使用pip将安装在虚拟环境下</span><br><span class="line"></span><br><span class="line">deactivate  # 退出虚拟环境</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在虚拟环境内直接切换到其他环境</span></span><br><span class="line">workon my_env02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rmvirtualenv my_env01   # 删除虚拟环境</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出帮助文档</span></span><br><span class="line"> virtualenvwrapper</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝虚拟环境</span></span><br><span class="line"> cpvirtualenv ENVNAME [TARGETENVNAME]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在所有的虚拟环境上执行命令</span></span><br><span class="line"> allvirtualenv pip install -U pip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除当前环境的所有第三方包</span></span><br><span class="line"> wipeenv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到当前虚拟环境的目录</span></span><br><span class="line"> cdsitepackages</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到当前虚拟环境的site-packages目录</span></span><br><span class="line"> cdvirtualenv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示 site-packages 目录中的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lssitepackages</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="conda管理python虚拟环境"><a href="#conda管理python虚拟环境" class="headerlink" title="conda管理python虚拟环境"></a>conda管理python虚拟环境</h2><p>conda 创建虚拟环境有个好处，它可以换python版本。如果你使用的virtualenv，它虽然也可以创建虚拟环境，但python版本无法换</p><p>下载anaconda安装的python直接可以使用conda工具</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出系统存在虚拟环境：</span></span><br><span class="line">conda env list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建虚拟环境</span></span><br><span class="line">conda create -n xxx python=3.9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换虚拟环境</span></span><br><span class="line"></span><br><span class="line">activate xxx       #on windows</span><br><span class="line">source activate xxx     #on linux</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">conda 版本查看</span></span><br><span class="line">conda --version</span><br><span class="line"></span><br><span class="line">conda update conda  #更新conda：</span><br><span class="line">conda update python #更新python版本需要进入指定指定的虚拟环境：</span><br><span class="line">conda upgrade --all  #更新第三方所有包：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">退出虚拟环境</span></span><br><span class="line">deactivate      #on windows</span><br><span class="line">source deactivate   #on linux</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除虚拟环境</span></span><br><span class="line">conda remove --name xxx --all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前环境下已安装的包</span></span><br><span class="line">conda list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个指定环境的已安装包</span></span><br><span class="line">conda list -n xxx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找package信息</span></span><br><span class="line">conda search numpy</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装package</span></span><br><span class="line">conda install -n xxx numpy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不用-n指定环境名称，则被安装在当前激活环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以通过-c指定通过某个channel安装</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新package</span></span><br><span class="line">conda update -n xxx numpy</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除package</span></span><br><span class="line">conda remove -n xxx numpy</span><br></pre></td></tr></tbody></table></figure><h3 id="添加清华源"><a href="#添加清华源" class="headerlink" title="添加清华源"></a>添加清华源</h3><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ </span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></tbody></table></figure><p>说明</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看当前channel</span></span><br><span class="line">conda config --show</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除channel：</span></span><br><span class="line">conda config –remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">增加channel：</span></span><br><span class="line">conda config ‐‐add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></tbody></table></figure><h2 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h2><p>自 3.6 版本之后，成为官方推荐的多环境管理工具。也就是说，你不需要安装任何第三方库就可以实现多环境管理了</p><p>优缺点分析：<br>1、venv是python3自带的，不需要额外安装库就能运行。<br>2、只能在3.3版本以后，2.x用不了<br>3、venv过于简单，没有额外的api。只能创建个虚拟环境，不能指定系统不存在的python环境版本，不能查看环境列表。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python3 -m venv D:\ruanjian\python   #使用venv创建虚拟隔离环境：</span><br><span class="line"></span><br><span class="line">cd /data/myproj source ./bin/activate   #激活虚拟环境:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">退出虚拟环境：</span></span><br><span class="line">(myproj) [root@ops-130 myproj] deactivate</span><br></pre></td></tr></tbody></table></figure><h1 id="Jupyter-Notebook使用"><a href="#Jupyter-Notebook使用" class="headerlink" title="Jupyter Notebook使用"></a>Jupyter Notebook使用</h1><p>Anaconda已经自动为你安装了Jupter Notebook及其他工具</p><p>Jupyter Notebook是以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示的程序。如在编程过程中需要编写说明文档，可在同一个页面中直接,编写支持Markdown语法。</p><p>Jupyter Notebook中所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入和输出，都是以文档的形式体现的。这些文档是保存为后缀名为.ipynb的JSON格式文件，不仅便于版本控制，也方便与他人共享。此外，文档还可以导出为：HTML、LaTeX、PDF等格式。</p><p>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</p><p>支持使用LaTeX编写数学性说明。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>编辑模式下按esc键进入命令模式。<br>命令模式下，单元格边框为灰色，且左侧边框线为蓝色粗线条。</p><p>ctrl+回车    运行当前cell</p><p>dd          删除当前cell</p><p>y          切换cell类型为Code</p><p>m         切换cell类型为Markdown</p><p>b       下方插入cell</p><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>命令模式下按enter或return键进入编辑模式。<br>编辑模式下，单元格边框和左侧边框线均为绿色。</p><h2 id="魔法命令"><a href="#魔法命令" class="headerlink" title="魔法命令"></a>魔法命令</h2><p>加个‘！’就可以执行shell命令，可以直接在单元格内执行”!pwd”, “!ls” 等Linux里面的命令呢，<br>但是windows环境中，要把”!”改成魔法命令“%”即可执行</p><p>单元格内执行shell命令还有一个高频操作就是安装需要的第三方库<br><code>!pip install you-package==version</code></p><p>%who会输出当前notebook中已经存在的变量</p><p>%whos除了输出变量外，变量的类型以及当前值也会显示</p><h2 id="一个单元格多输出"><a href="#一个单元格多输出" class="headerlink" title="一个单元格多输出"></a>一个单元格多输出</h2><p>例如我们使用pandas读取一个文件生成dataframe后，想了解这个df的size, columns, 前5行等信息，正常情况下df.head, df.shape, df.info等内容要分成三个单元格来完成。但其实有更好的方法，可以让一个单元格内输出多个内容。具体方法是「增加一个单元格」执行下面两行代码即可：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from IPython.core.interactiveshell import InteractiveShell InteractiveShell.ast_node_interactivity = "all"</span><br></pre></td></tr></tbody></table></figure><h2 id="Mito插件"><a href="#Mito插件" class="headerlink" title="Mito插件"></a>Mito插件</h2><p><a href="https://docs.trymito.io/">官方文档</a><br>Mito是Jupyter notebook的一个插件，作用是编辑电子表格，并在编辑表格（带格式转换功能）时，可以生成相对应的Python代码。</p><h1 id="路径相关"><a href="#路径相关" class="headerlink" title="路径相关"></a>路径相关</h1><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># path = 'E:\\新建文件夹' </span></span><br><span class="line"><span class="comment"># path = 'E:/新建文件夹' </span></span><br><span class="line">path = <span class="string">r'E:\新建文件夹'</span> </span><br></pre></td></tr></tbody></table></figure><p>文件命名规则如下：</p><p>1、 允许文件或者文件夹名称不得超过255个字符。<br>2、 文件名除了开头之外任何地方都可以使用空格。<br>3、 文件名中不能有下列符号：“？”、“、”、“╲”、“*”、““”、“”“、“&lt;”、“&gt;”、“|”。<br>4、 文件名不区分大小写，但在显示时可以保留大小写格式。<br>5、 文件名中可以包含多个间隔符，如“我的文件.我的图片.001”。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>为多个变量赋值<br>例如：<code>a = b = c = 1</code><br>为多个对象指定多个变量。<br>例如：<code>a, b, c = 1, 2, "runoob"</code></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a = {}, b = {}"</span>.<span class="built_in">format</span>(a,b) )</span><br><span class="line"><span class="comment"># 在Python中,交换变量的值，我们无需定义临时变量来操作</span></span><br><span class="line">a,b= b,a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a = {}, b = {}"</span>.<span class="built_in">format</span>(a,b) )</span><br></pre></td></tr></tbody></table></figure><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><p><strong>硬性规则：</strong><br>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。<br>大小写敏感（大写的a和小写的A是两个不同的变量）。<br>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。<br><strong>PEP 8要求：</strong><br>用小写字母拼写，多个单词用下划线连接。<br>受保护的实例属性用单个下划线开头（后面会讲到）。<br>私有的实例属性用两个下划线开头（后面会讲到）。</p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><p>局部变量：在一个函数中定义的变量就是局部变量（包括形参），其作用域是从定义局部变量的位置至函数结束的位置。<br>全局变量：在所有函数外定义的变量就是全局变量，其在所有的函数中都能使用。</p><h3 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h3><p>如果我们想要在一个函数中对全局变量进行修改，怎么办呢？这个时候就可以使用 global 关键字了。在函数体内定义，并且使用global关键字修饰后，该变量也就变为全局变量。在函数体外也可以访问到该变量，并且在函数体内还可以对其进行修改。</p><p>tip: 尽管Python允许全局变量和局部变量重名，但是在实际开发时，不建议这么做，因为这样容易让代码混乱，很难分清哪些是全局变量，哪些是局部变量。</p><h3 id="nonlocal-关键字"><a href="#nonlocal-关键字" class="headerlink" title="nonlocal 关键字"></a>nonlocal 关键字</h3><p>在 Python 中，函数的定义可以嵌套，即在一个函数中包含另一个函数的定义。通过 nonlocal 关键字，可以使内层的函数直接使用外层函数中定义的变量。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="number">20</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'inner 函数中 x 的值为'</span>, x)<span class="comment">#20</span></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'outer 函数中 x 的值为'</span>, x)   <span class="comment">#20</span></span><br><span class="line">outer()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包的定义：如果在一个内部函数里，对在外部函数内（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包(closure)</p><p>函数嵌套/闭包中的作用域：</p><h2 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h2><p>在Python中可以使用type函数对变量的类型进行检查。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">'hello, world'</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class 'complex'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class 'bool'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><p>int()：将一个数值或字符串转换成整数，可以指定进制。<br>float()：将一个字符串转换成浮点数。<br>str()：将指定的对象转换成字符串形式，可以指定编码。<br>chr()：将整数转换成该编码对应的字符串（一个字符）。<br>ord()：将字符串（一个字符）转换成对应的编码（整数）。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> ,<code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数运算符(幂运算)</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或   (按照二进制进行逻辑运算  )</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  , <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code>, <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code>, <code>or</code> ,<code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code> </code>^=<code> </code>&gt;&gt;=<code> </code>&lt;&lt;=`</td></tr></tbody></table><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> // <span class="number">4</span> = <span class="number">1</span>  <span class="comment">#整除</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> / <span class="number">4</span> =<span class="number">1.5</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h2 id="比较运算符-关系运算符"><a href="#比较运算符-关系运算符" class="headerlink" title="比较运算符(关系运算符)"></a>比较运算符(关系运算符)</h2><p>包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>比较两个值是否相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，<code>==</code>才是比较相等的比较运算符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行中的多个比较</span></span><br><span class="line"><span class="number">0</span>&lt;n&lt;<span class="number">100</span></span><br><span class="line"><span class="comment"># 代替</span></span><br><span class="line">(n&gt;<span class="number">0</span>)<span class="keyword">and</span> (n&lt;<span class="number">100</span>) </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。</p><p><code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；<br>如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理）即右边的表达式根本不会执行。</p><p><code>or</code>字面意思是“或者”，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。</p><p><code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span>     <span class="comment">#True</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span>       <span class="comment"># flag1 = True</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span>        <span class="comment"># flag2 = False</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2      <span class="comment"># flag3 = False</span></span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2       <span class="comment"># flag4 = True</span></span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)        <span class="comment"># flag5 = False</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。</p></blockquote><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有多个 and 条件时使用 all()</span></span><br><span class="line">conditions = [</span><br><span class="line">    size == <span class="string">"lg"</span>,</span><br><span class="line">    color == <span class="string">"blue"</span>,</span><br><span class="line">    price &lt; <span class="number">100</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">all</span>(conditions):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes, I want to but the product."</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有多个 or 条件时使用 any()</span></span><br><span class="line">conditions = [</span><br><span class="line">    size == <span class="string">"lg"</span>,</span><br><span class="line">    color == <span class="string">"blue"</span>,</span><br><span class="line">    price &lt; <span class="number">100</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(conditions):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes, I want to but the product."</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符优先级最低，它的作用是将右边的值赋给左边的变量</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></tbody></table></figure><h2 id="三目运算符（三元表达式）"><a href="#三目运算符（三元表达式）" class="headerlink" title="三目运算符（三元表达式）"></a>三目运算符（三元表达式）</h2><p>为真时的结果 if 判断条件 else 为假时的结果（注意，没有冒号）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">max</span> = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现一个基础版本（递归版本）的斐波那契数列：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>Python中map()、filter()、reduce()这三个都是应用于序列的内置函数。 </p><p>map(func, seq1[, seq2,…])<br>func参数接受一个函数名<br>seq参数接受一个或多个可迭代的序列，返回的是一个集合。 </p><p>1.当seq只有一个时函数func函数会作用于seq中的每个元素，得到func(seq[n])组成的列表.可以使用filter()函数代替</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x: x % <span class="number">2</span>, <span class="built_in">range</span>(<span class="number">7</span>))</span><br></pre></td></tr></tbody></table></figure><p>2.当seq多于一个时，map可以并行地对每个seq执行.map无法处理seq长度不一致、对应位置操作数类型不一致的情况</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span> <span class="built_in">map</span>(<span class="keyword">lambda</span> x , y : (x ** y, x + y), [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>],[<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"><span class="comment">#[(8, 5), (16, 6), (6, 7)]</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>3.使用map()函数可以实现将其他类型的数转换成list</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">***将元组转换成<span class="built_in">list</span>***</span><br><span class="line"><span class="built_in">map</span>(<span class="built_in">int</span>, (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">***将字符串转换成<span class="built_in">list</span>***</span><br><span class="line"><span class="built_in">map</span>(<span class="built_in">int</span>, <span class="string">'1234'</span>)</span><br><span class="line"><span class="comment">#[1, 2, 3, 4]</span></span><br><span class="line">***提取字典的key，并将结果存放在一个<span class="built_in">list</span>中***</span><br><span class="line"><span class="built_in">map</span>(<span class="built_in">int</span>, {<span class="number">1</span>:<span class="number">2</span>,<span class="number">2</span>:<span class="number">3</span>,<span class="number">3</span>:<span class="number">4</span>})</span><br><span class="line"><span class="comment">#[1, 2, 3]</span></span><br><span class="line">***字符串转换成元组，并将结果以列表的形式返回***</span><br><span class="line"> <span class="built_in">map</span>(<span class="built_in">tuple</span>, <span class="string">'agdf'</span>)</span><br><span class="line"><span class="comment">#[('a',), ('g',), ('d',), ('f',)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#将小写转成大写</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">u_to_l</span> (<span class="params">s</span>):</span></span><br><span class="line">  <span class="keyword">return</span> s.upper()</span><br><span class="line"><span class="built_in">print</span> <span class="built_in">map</span>(u_to_l,<span class="string">'asdfd'</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>() 将一个可迭代对象转换成列表</span><br><span class="line"><span class="built_in">tuple</span>() 将一个可迭代对象转换成元组</span><br><span class="line"><span class="built_in">str</span>() 将数据转化成字符串</span><br><span class="line"><span class="built_in">bytes</span>() 把字符串转化成<span class="built_in">bytes</span>类型</span><br><span class="line"><span class="built_in">reversed</span>() 将一个序列翻转, 返回翻转序列的迭代器</span><br><span class="line"><span class="built_in">slice</span>() 列表的切片</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random.choice()     <span class="comment">#可以从序列中获取一个随机元素；</span></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p>sorted(iterable, cmp=None, key=None, reverse=False) 函数对所有可迭代的对象进行排序操作。返回一个列表</p><p>参数：<br>    key是一个函数</p><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>序列支持+和*操作，不修改原有序列，构建一个新的序列</p><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><p>列表生成式是一种漂亮优雅的东西，然而它有一个致命的缺点：它一次性把所有元素加载到内存中，当列表过长的时候，便会占据过多的内存资源，而且，我们通常仅需要使用少数的元素，这样未使用的元素所占据的绝大部分的内存，就成了不必要的支出。</p><p>生成器是一种更高级更优雅的东西，它使用“懒加载”的原理，并不生成完整的列表，而是迭代地、即时地、按需地生成元素，这样不仅能极大地节省内存空间，而且，在理论上，它可以生成一个无穷大的列表！</p><p>大多数生成器是以函数来实现的，然而，它并不返回（return）一个值，而是生成（yield）一个值，并挂起程序。然后，通过next()方法生成并马上返回一个元素，或者通过for循环，逐一生成和返回全部元素。</p><p>next()效率太低，且调用次数越界时会抛出StopIteration的异常，而for循环会自动捕捉这个异常，并停止调用，所以使用更佳。</p><p>生成器表达式与列表生成式极其形似，只是把[]改成了()，但背后的原理大不相同。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">l = [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># 列表生成式，4以内整数的2倍数</span></span><br><span class="line">g = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># 生成器表达式</span></span><br><span class="line"><span class="built_in">type</span>(l)   <span class="comment"># 结果：&lt;type 'list'&gt;</span></span><br><span class="line"><span class="built_in">type</span>(g)   <span class="comment"># 结果：&lt;type 'generator'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l)  <span class="comment"># 结果：[0,2,4,6,8]</span></span><br><span class="line"><span class="built_in">print</span>(g)  <span class="comment"># 结果：&lt;generator object at 0x000002173F0EBC50&gt;</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># Traceback (most recent call last): ....StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> g:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">' '</span>)  <span class="comment"># 结果：0 2 4 6 8</span></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：iter() 和 next()。</p><h1 id="数据类型（8种）"><a href="#数据类型（8种）" class="headerlink" title="数据类型（8种）"></a>数据类型（8种）</h1><h2 id="字符串string-不可变"><a href="#字符串string-不可变" class="headerlink" title="字符串string(不可变)"></a>字符串string(不可变)</h2><ul><li><p>Python 中单引号 ‘ 和双引号 “ 使用完全相同。</p></li><li><p>转义符 ,反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r”this is a line with \n” 则 \n<br>会显示，并不是换行。</p></li><li><p>Python 不支持单字符类型，一个字符就是长度为 1 的字符串。</p></li><li></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#替换某个字符</span></span><br><span class="line">a=a.replace(<span class="string">'-'</span>,<span class="string">''</span>)     <span class="comment">#用空字符串代替-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#转义字符 \</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The \t is a tab"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'I\'m going to the movies'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python三引号</span></span><br><span class="line"><span class="comment">#保证字符串的格式是所见即所得</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'''I'm going to \nthe movies'''</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"He-ll-o "</span></span><br><span class="line">b = <span class="string">"World "</span></span><br><span class="line"><span class="built_in">print</span>(a + b)   <span class="comment">#字符串连接：+</span></span><br><span class="line"><span class="built_in">print</span>(a * <span class="number">3</span>)    <span class="comment">#重复输出字符串：*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#成员运算符判断字符串中是否包含给定的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'e'</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'e'</span> <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="索引与截取"><a href="#索引与截取" class="headerlink" title="索引与截取"></a>索引与截取</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引获取字符串中字符</span></span><br><span class="line">a[<span class="number">0</span>]   <span class="comment">#从前面索引</span></span><br><span class="line">a[-<span class="number">1</span>] <span class="comment">#从后面索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变量[头下标:尾下标:步长]</span></span><br><span class="line"><span class="comment">#字符串截取[:] 牢记：左闭右开</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">"hello"</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">1</span>:<span class="number">4</span>]=<span class="string">"ell"</span></span><br><span class="line"><span class="built_in">str</span>[:]=<span class="built_in">str</span>[<span class="number">0</span>:]</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串驻留机制"><a href="#字符串驻留机制" class="headerlink" title="字符串驻留机制"></a>字符串驻留机制</h3><p>对相同字符串，只保留一份拷贝，后续创建相同字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的相同字符串对应的变量</p><h4 id="驻留机制的几种情况："><a href="#驻留机制的几种情况：" class="headerlink" title="驻留机制的几种情况："></a>驻留机制的几种情况：</h4><p>字符串长度为0或1时<br>符合标识符的字符串<br>字符串只在编译时进行驻留，而非运行时<br>[-5,256]之间的整数</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>当需要值相同的字符串时，可以直接从字符池里拿来用，避免频繁的创建和销毁，提升效率和节约内存</p><h3 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.%做占位符</span></span><br><span class="line">name = <span class="string">"wenke"</span></span><br><span class="line">age =<span class="number">21</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是%s,年龄是%d"</span>%(name,age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.{}做占位符</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是{0},年龄是{1}"</span>.<span class="built_in">format</span>(name,age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.f-string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'我的名字是<span class="subst">{name}</span>,年龄是<span class="subst">{age }</span>'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="去除指定字符"><a href="#去除指定字符" class="headerlink" title="去除指定字符"></a>去除指定字符</h3><p>strip()可以去除头尾指定字符<code>print(str.strip('\n'))</code><br>replace()去除中间字符<code>print(str.replace('\n', ''))</code></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.strip().split(<span class="string">','</span>)      <span class="comment">#链式函数写法，strip()，就是去掉改行头尾空格和换行符。然后对strip()的结果进行split(',')，对结果以逗号的进行切分形成一个数组。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="分隔字符串存为列表"><a href="#分隔字符串存为列表" class="headerlink" title="分隔字符串存为列表"></a>分隔字符串存为列表</h3><p>str.split(str=””, num=string.count<br>指定字符串中某个字符作为分隔符对字符串进行分隔，存为列表。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> =  <span class="string">"he-el"</span></span><br><span class="line"><span class="built_in">str</span>.split(<span class="string">"-"</span>)  <span class="comment">#['he', 'el']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以指定字符作为拼接符，将字符串中所有的元素合并为一个新的字符串</span></span><br><span class="line">new_str = <span class="string">'-'</span>.join(<span class="string">'Hello'</span>)</span><br><span class="line">H-e-l-l-o</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组转字符串</span></span><br><span class="line">turple=(<span class="string">'he'</span>, <span class="string">'olle'</span>)</span><br><span class="line">new_str = <span class="string">''</span>.join(turple)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表转字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join([<span class="string">'he'</span>, <span class="string">'el'</span>]))</span><br></pre></td></tr></tbody></table></figure><p>字符串拼接时建议使用str类型的join方法，而非+，<br>因为join()是先计算出所有字符中的长度，然后再拷贝，只new一次对象，效率更高</p><h2 id="list（列表）"><a href="#list（列表）" class="headerlink" title="list（列表）"></a>list（列表）</h2><p>List（列表） 是 Python 中使用最频繁的数据类型。类似于栈</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>特点<br>1.查找和插入的时间随着元素的增加而增加；<br>2.占用空间小，浪费内存很少。</p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list_b = <span class="built_in">list</span>(<span class="string">"abc"</span>) <span class="comment">#  ['a', 'b', 'c']  字符串转列表</span></span><br><span class="line">list_c = <span class="built_in">list</span>((<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)) <span class="comment">#  [4, 5, 6]  元组转列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合range()函数，range(start, stop[, step])</span></span><br><span class="line">list_k = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">3</span>,<span class="number">100</span>,<span class="number">3</span>)) <span class="comment"># list_k == [3, 6, 9, ..., 96, 99]  # 找出100以内的能够被3整除的正整数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lst = [[<span class="number">0</span>]*<span class="number">10</span> <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(k)] <span class="comment">#输出一个k行10列的矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l=[<span class="string">'H'</span>,<span class="string">'Q'</span>]</span><br><span class="line"><span class="comment"># 将一个列表中所有字符串变小写</span></span><br><span class="line">a = [s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> l]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成扑克所有组合</span></span><br><span class="line">a =[<span class="string">'黑桃'</span>,<span class="string">'草花'</span>,<span class="string">'红桃'</span>,<span class="string">'方块'</span>]</span><br><span class="line">b=[<span class="string">'A'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'10'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'Q'</span>]</span><br><span class="line"><span class="built_in">print</span>([m+n <span class="keyword">for</span> m <span class="keyword">in</span> a <span class="keyword">for</span> n <span class="keyword">in</span> b ])</span><br><span class="line"></span><br><span class="line">list_d = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_a]  <span class="comment"># list_d == [1, 2, 3]</span></span><br><span class="line">list_e = [i*j <span class="keyword">for</span> i <span class="keyword">in</span> list_a <span class="keyword">for</span> j <span class="keyword">in</span> list_c] <span class="comment"># list_e == [4,5,6,10,12,12,15,18]</span></span><br><span class="line">list_f = [i*j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(list_a,list_c)] <span class="comment"># list_f == [4, 10, 18]</span></span><br><span class="line">list_g = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_a <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>] <span class="comment"># list_g == [2]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列表的索引和截取"><a href="#列表的索引和截取" class="headerlink" title="列表的索引和截取"></a>列表的索引和截取</h3><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。<br>列表截取的语法格式如下：<br>变量[头下标:尾下标]</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得列表中元素和下标</span></span><br><span class="line">lst = [<span class="string">"blue"</span>, <span class="string">"lightblue"</span>, <span class="string">"pink"</span>, <span class="string">"orange"</span>, <span class="string">"red"</span>]</span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">     <span class="built_in">print</span>(idx, item)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="扩充列表"><a href="#扩充列表" class="headerlink" title="扩充列表"></a>扩充列表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.append()函数无返回值，但是会修改原本的列表。在列表尾部添加单个新元素。</span></span><br><span class="line">lst = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">lis.append(<span class="string">'4'</span>) <span class="comment"># 在末尾添加元素</span></span><br><span class="line">lst.append(lst)  <span class="comment">#[3, 2, 1, […]]，其中“…”表示无穷递归</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.insert()方法，在列表中指定位置添加元素。如果指定的下标不存在，就在末尾添加</span></span><br><span class="line">list1.insert(<span class="number">2</span>, <span class="string">'o'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.用 “+” 运算符，将两个列表拼接出一个新列表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.用extend()方法，在一个列表后面拼接进另一个列表。</span></span><br><span class="line">list1.extend(list2) <span class="comment">#将list2合并到list1，list2不变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删减列表"><a href="#删减列表" class="headerlink" title="删减列表"></a>删减列表</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">list_1 = list_2 = list_3 = list_4 = [<span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'very'</span>, <span class="string">'happy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.用del list[m] 语句，删除指定索引m处的元素。</span></span><br><span class="line"><span class="keyword">del</span> list_1[<span class="number">0</span>]  <span class="comment"># list_1 == ['am', 'very', 'happy']</span></span><br><span class="line"><span class="comment"># 2.用remove()方法，删除指定值的元素（第一个匹配项）。</span></span><br><span class="line">list_2.remove(<span class="string">'I'</span>) <span class="comment"># list_2 == ['am', 'very', 'happy']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.用pop()方法，取出并删除列表末尾的单个元素。</span></span><br><span class="line">list_3.pop()  <span class="comment"># list_3 == ['I', 'am', 'very']</span></span><br><span class="line"><span class="comment"># 4.用pop(m)方法，取出并删除索引值为m的元素。</span></span><br><span class="line">list_4.pop(<span class="number">0</span>)  <span class="comment"># list_4 == ['am', 'very', 'happy']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空与销毁</span></span><br><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list_b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 5.用clear()方法，清空列表的元素。</span></span><br><span class="line">list_b.clear()   <span class="comment"># list_b == []</span></span><br><span class="line"><span class="comment"># 6.用del list 语句，销毁整个列表。</span></span><br><span class="line"><span class="keyword">del</span> list_a   <span class="comment"># 没有list_a了，再使用则会报错</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列表切片："><a href="#列表切片：" class="headerlink" title="列表切片："></a>列表切片：</h3><p>基本格式：[i : i+n : m] ；从第i位索引起，向右取到后n位元素为止，按m间隔过滤<br>i 是切片的起始索引值，为列表首位时可省略；<br>i+n 是切片的结束位置，为列表末位时可省略；<br>m 可以不提供，默认值是1，不允许为0，当m为负数时，列表翻转。注意：这些值都可以大于列表长度，不会报越界。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下写法都可以表示整个列表，其中 X &gt;= len(li)</span></span><br><span class="line">li[<span class="number">0</span>:X] == li[<span class="number">0</span>:] == li[:X] == li[:] == li[::] == li[-X:X] == li[-X:]</span><br><span class="line"></span><br><span class="line">li[<span class="number">1</span>:<span class="number">5</span>] == [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] <span class="comment"># 从1起，取5-1位元素</span></span><br><span class="line">li[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>] == [<span class="number">4</span>,<span class="number">6</span>] <span class="comment"># 从1起，取5-1位元素，按2间隔过滤</span></span><br><span class="line">li[-<span class="number">1</span>:] == [<span class="number">16</span>] <span class="comment"># 取倒数第一个元素</span></span><br><span class="line">li[-<span class="number">4</span>:-<span class="number">2</span>] == [<span class="number">9</span>, <span class="number">11</span>] <span class="comment"># 从倒数第四起，取-2-(-4)=2位元素</span></span><br><span class="line">li[:-<span class="number">2</span>] == li[-<span class="built_in">len</span>(li):-<span class="number">2</span>] == [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>] <span class="comment"># 从头开始，取-2-(-len(li))=7位元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意列表先翻转，再截取</span></span><br><span class="line">li[::-<span class="number">1</span>] == [<span class="number">16</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>] <span class="comment"># 翻转整个列表</span></span><br><span class="line">li[::-<span class="number">2</span>] == [<span class="number">16</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>] <span class="comment"># 翻转整个列表，再按2间隔过滤</span></span><br><span class="line">li[:-<span class="number">5</span>:-<span class="number">1</span>] == [<span class="number">16</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">9</span>] <span class="comment"># 翻转整个列表，取-5-(-len(li))=4位元素</span></span><br><span class="line">li[:-<span class="number">5</span>:-<span class="number">3</span>] == [<span class="number">16</span>,<span class="number">9</span>] <span class="comment"># 翻转整个列表，取-5-(-len(li))=4位元素，再按3间隔过滤</span></span><br><span class="line"></span><br><span class="line">li[::<span class="number">0</span>]  <span class="comment"># 报错（ValueError: slice step cannot be zero）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><p>用len()方法，统计全部元素的个数。</p><p>用count()方法，统计指定值的元素的个数。</p><p>用max()方法，统计元素中的最大值（要求元素类型相同；数字类型直接比较，其它类型比较id）</p><p>用min()方法，统计元素中的最小值（要求元素类型相同；数字类型直接比较，其它类型比较id）</p><p>用index()方法，查找指定值的元素的索引位置（第一个匹配项）。</p><p>用reverse()方法，翻转列表中的元素。</p><p>用copy()方法，浅拷贝并生成新的列表。</p><p>用deepcopy()方法，深拷贝并生成新的列表。</p><p>用sort()方法，在原列表基础上进行排序。</p><p>用sorted()方法，将新列表基础上对原列表的元素进行排序。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">56</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">b = <span class="built_in">set</span>(a)   <span class="comment">#列表去重(删除list中的重复元素)</span></span><br><span class="line">c = a[::-<span class="number">1</span>]  <span class="comment">#反转列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_1 = [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line"><span class="built_in">len</span>(list_1) == <span class="number">5</span></span><br><span class="line">list_1.count(<span class="number">10</span>) == <span class="number">1</span> <span class="comment"># 元素10的数量为1</span></span><br><span class="line">list_1.index(<span class="number">10</span>) == <span class="number">1</span> <span class="comment"># 元素10的索引为1</span></span><br><span class="line">list_1.reverse() <span class="comment"># list_1 == [(33, 44), ['hi', 1, 2], '2018-10-1', 10, 2018]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较浅拷贝与深拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">list_a = [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line">list_b = [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list_c = list_a.copy() <span class="comment"># list_c == [2018, 10, '2018-10-1', ['hi', 1, 2], (33, 44)]</span></span><br><span class="line">list_d = copy.deepcopy(list_a) <span class="comment"># list_d == [2018, 10, '2018-10-1', ['hi', 1, 2], (33, 44)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变原列表中的可变对象元素</span></span><br><span class="line">list_a[<span class="number">3</span>].append(<span class="string">'new'</span>) <span class="comment"># list_a == [2018, 10, '2018-10-1', ['hi', 1, 2, 'new'], (33, 44)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝中的可变对象会随原列表变化而变化</span></span><br><span class="line">list_c == [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">'new'</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝中的可变对象不会随原列表变化而变化</span></span><br><span class="line">list_d == [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较sort() 与 sorted()</span></span><br><span class="line">list_1 = list_2 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">list_1.sort() <span class="comment"># 原列表变化：list_1 == [1,2,3,4,5,6]</span></span><br><span class="line">list_3 = <span class="built_in">sorted</span>(list_2) <span class="comment"># 原列表不变：list_2 == [2,1,4,6,5,3]; list_3 == [1,2,3,4,5,6]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h3><p>list.sort(cmp=None, key=None, reverse=False)</p><pre><code>[cmp]   -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。[key]   排序规则(排序函数), 在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数. 根据函数运算的结果进行排序。[reverse] -- 排序规则，默认升序，True为降序</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">li = [[<span class="number">1</span>, <span class="number">7</span>], [<span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">li</span>):</span></span><br><span class="line"><span class="keyword">return</span> li[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入了key参数的sort()函数对li中的每个子元素[1,7],[1,5],[2,4],[1,1]都执行了fun()函数，返回它们的第1个数</span></span><br><span class="line"><span class="comment"># 分别为7,5,4,1。然后再排序得到1,4,5,7。使的出的结果对本来的li进行排序最后就得到了[[1,1],[2,4],[1,5],[1,7]]。</span></span><br><span class="line"><span class="comment"># 指定第二个元素排序</span></span><br><span class="line">li.sort(key=fun)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></tbody></table></figure><h3 id="列表转字符串"><a href="#列表转字符串" class="headerlink" title="列表转字符串"></a>列表转字符串</h3><p>join()语法格式：&lt;需要在每个元素中间添加的字符&gt; .join (&lt;目标list，且所有元素都为str类型&gt;) , 返回一个新的字符串。<br>注意：此方法可以直接跟在return后。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="string">'j'</span>,<span class="string">'1'</span>,<span class="string">'ksk'</span>,<span class="string">'lplps'</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'***'</span>.join(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将列表内的每个元素组成字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join(a))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="拆分列表中的字符串和数字"><a href="#拆分列表中的字符串和数字" class="headerlink" title="拆分列表中的字符串和数字"></a>拆分列表中的字符串和数字</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">my_list = [ <span class="string">'a'</span>  , <span class="string">' b'</span>  ,  <span class="string">'n'</span>  ,  <span class="string">'x'</span>  , <span class="number">1</span> , <span class="number">2</span> , <span class="number">3</span> , <span class="string">' a '</span> , <span class="number">33.3</span> , <span class="string">' n'</span>  , <span class="string">' b'</span> ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance() 判断两个类型是否相同</span></span><br><span class="line"><span class="built_in">str</span> = [letter <span class="keyword">for</span> letter <span class="keyword">in</span> my_list <span class="keyword">if</span> <span class="built_in">isinstance</span>(letter,<span class="built_in">str</span>)]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)  <span class="comment">#['a', ' b', 'n', 'x', ' a ', ' n', ' b']</span></span><br><span class="line"></span><br><span class="line">inter=  [i <span class="keyword">for</span> i <span class="keyword">in</span> my_list <span class="keyword">if</span> <span class="built_in">isinstance</span>(i,<span class="built_in">int</span>)]</span><br><span class="line"><span class="built_in">print</span>(inter)  <span class="comment">#[1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="找到重复最多的元素"><a href="#找到重复最多的元素" class="headerlink" title="找到重复最多的元素"></a>找到重复最多的元素</h3><p>count函数用于统计字符串、列表或元祖中某个字符出现的次数，<br>max()的key中传递的是一个参数，此时max()会根据每个传入参数后的返回值进行比较。返回值为key中的参数值</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">lst = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">0</span>]</span><br><span class="line">most_repeated_item = <span class="built_in">max</span>(lst, key=lst.count)</span><br><span class="line"><span class="built_in">print</span>(most_repeated_item)</span><br></pre></td></tr></tbody></table></figure><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h2><p>使用键-值（key-value）存储</p><p>1.查找和插入的速度极快，不会随着key的增加而变慢；<br>2.需要占用大量的内存，内存浪费多。<br>但键必须是不可变的，如字符串，数字或元组。</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加键值对</span></span><br><span class="line">dic={}</span><br><span class="line">dic[<span class="string">'name'</span>]=<span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">'key'</span>]  <span class="comment">#删除某个键值</span></span><br><span class="line"><span class="keyword">del</span> dit          <span class="comment">#删除整个字典</span></span><br><span class="line">dit.clear()     <span class="comment">#将字典置空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dit.get(key,default)    <span class="comment">#返回一个值，若没有返回default</span></span><br><span class="line">dit[key]=<span class="string">''</span>     <span class="comment">#修改字典的值</span></span><br><span class="line">dit[key]=value      <span class="comment">#添加值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dit[key]        <span class="comment"># 访问字典的值</span></span><br><span class="line">dit.keys()   <span class="comment">#返回所有KEY的列表</span></span><br><span class="line">dit.values()    <span class="comment">#返回所有 valuel的列表</span></span><br><span class="line">dit.items()     <span class="comment">#返回所有键值对的列表</span></span><br><span class="line"><span class="comment">#同时迭代key和value</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dit.items():</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = {<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>}</span><br><span class="line">b = {<span class="string">'c'</span>:<span class="number">3</span>}</span><br><span class="line">c = {**a,**b}   <span class="comment">#合并两个字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="将列表转换为字典"><a href="#将列表转换为字典" class="headerlink" title="将列表转换为字典"></a>将列表转换为字典</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 使用两个list生成一个字典</span></span><br><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">vals = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dic = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, vals))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#list可以转成字典，但前提是列表中元素都要成对出现</span></span><br><span class="line">lis=[(<span class="string">'name'</span>,<span class="string">'杨超越'</span>),(<span class="string">'weight'</span>,<span class="number">45</span>)]</span><br><span class="line">dic = <span class="built_in">dict</span>(lis)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="按value排序"><a href="#按value排序" class="headerlink" title="按value排序"></a>按value排序</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = {</span><br><span class="line">    <span class="string">"v1"</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="string">"v2"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">"v3"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="string">"v4"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">"v5"</span>: <span class="number">10</span>,</span><br><span class="line">}</span><br><span class="line">sorted_d = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(sorted_d)</span><br></pre></td></tr></tbody></table></figure><h3 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h3><h2 id="tuple（元组）"><a href="#tuple（元组）" class="headerlink" title="tuple（元组）"></a>tuple（元组）</h2><p>与列表类似，但是元组中的内容不可修改</p><p>元组比列表更节省内存。</p><p>在时间效率方面，元组再次比列表有一点优势，尤其是在考虑查找值时。</p><p>如果有最初不打算更改的数据，则应选择元组数据类型而不是列表。但是，如果知道数据会在应用程序运行时增长和缩小，则需要使用列表数据类型。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组中只有一个元素时，需要在后面加逗号！</span></span><br><span class="line">tup = (<span class="string">'hello'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将列表转换成元组</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">14</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">8</span>]</span><br><span class="line">t = <span class="built_in">tuple</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tuple转换为list：</span></span><br><span class="line"><span class="built_in">list</span>(tupl)     <span class="comment">#接受一个元组并返回一个列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组的修改：</span></span><br><span class="line">t1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)+(<span class="number">4</span>,<span class="number">5</span>)   <span class="comment">#(1, 2, 3, 4, 5)</span></span><br><span class="line">t2 = (<span class="number">1</span>,<span class="number">2</span>) * <span class="number">2</span>      <span class="comment">#(1, 2, 1, 2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计元组中4的个数</span></span><br><span class="line"><span class="built_in">print</span>(t1.count(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组中4所对应的下标，如果不存在，则会报错</span></span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断元组中是否存在1这个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回元组中4所对应的下标,不会报错</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> <span class="keyword">in</span> t):</span><br><span class="line">    <span class="built_in">print</span>(t.index(<span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="元组的拆包与装包"><a href="#元组的拆包与装包" class="headerlink" title="元组的拆包与装包"></a>元组的拆包与装包</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个元组</span></span><br><span class="line">t3 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#将元组赋值给变量a,b,c</span></span><br><span class="line">a,b,c = t3</span><br><span class="line"><span class="comment">#打印a,b,c</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当元组中元素个数与变量个数不一致时</span></span><br><span class="line"><span class="comment">#定义一个元组，包含5个元素</span></span><br><span class="line">t4 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c</span></span><br><span class="line">a,b,*c = t4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(*c)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="number（数字）"><a href="#number（数字）" class="headerlink" title="number（数字）"></a>number（数字）</h2><p>Number 数据类型用于存储数值，包括整数、浮点型、复数</p><p>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。<br>float (浮点数), 如 1.23、3E-2<br>complex (复数), 如 1 + 2j、 1.1 + 2.2j</p><p>2 / 4  # 除法，得到一个浮点数0.5<br>2 // 4 # 除法，得到一个整数0<br>17 % 3 # 取余      2<br>2 ** 5 # 乘方        32</p><h3 id="math-模块"><a href="#math-模块" class="headerlink" title="math 模块"></a>math 模块</h3><p>Python 中数学运算常用的函数基本都在 math 模块 </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">4.1</span>))   <span class="comment">#返回数字的上入整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">4.9</span>))  <span class="comment">#返回数字的下舍整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.fabs(-<span class="number">10</span>))   <span class="comment">#返回数字的绝对值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">9</span>))     <span class="comment">#返回数字的平方根</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.exp(<span class="number">1</span>))      <span class="comment">#返回e的x次幂</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Python随机数"><a href="#Python随机数" class="headerlink" title="Python随机数"></a>Python随机数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#随机生成[0,1)的实数</span></span><br><span class="line">ran1 = random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment">#从指定范围内，按指定基数递增的集合中 获取一个随机数</span></span><br><span class="line">random.randrange ([start], stop, step])</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h2><p>是一个无序不重复的序列,用于成员关系测试，删除重复元素<br>a=set (‘abcd’)   #与a={‘a’,’b’,’c’,’d’}等价</p><h2 id="Boolean（布尔值）"><a href="#Boolean（布尔值）" class="headerlink" title="Boolean（布尔值）"></a>Boolean（布尔值）</h2><p>总结一下为假的情况有：</p><p>None, False<br>数值中的0, 0.0, 0j(虚数), Decimal(0), Fraction(0, 1)<br>空字符串(‘’)、空元组(())、空列表([])<br>空字典({})、空集合(set())<br>对象默认为True，除非它有bool()方法且返回False或len()方法且返回0.</p><p>逻辑运算符<br>|运算    |表达式    |结果|<br>|——|——-|—–|<br>|或运算    |x or y    |两个变量只要有一个为True则为True。|<br>|与运算    |x and y|    两个变量都为True时结果才为True。|<br>|非运算    |not x|    not的优先级比非布尔运算符低，not a == b解释为not (a == b)|</p><h1 id="结构化"><a href="#结构化" class="headerlink" title="结构化"></a>结构化</h1><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>(*参数与**参数)是Python参数中的重点知识，他们都被称为可变参数（任意参数）</p><p>可变参数，必须定义在普通参数（也称位置参数、必选参数、选中参数等名称）以及默认值参数的后面，这是因为可变参数会收集所有【未匹配】的参数，如果将可变参数定义在前面，那么普通参数与默认值参数就无法匹配到传入的参数，因为全都收集到可变参数中了</p><p>可变参数出现在函数的不同的位置上时，具备不同的功能<br><strong>在函数定义时：</strong><br>表示可变参数<br>函数定义时，二者同时存在，一定需要将<em>args放在**kwargs之前<br>1、</em>参数收集所有未匹配的位置参数组成一个tuple对象，局部变量args指向此tuple对象<br>2、*<em>参数收集所有未匹配的关键字参数组成一个dict对象，局部变量kwargs指向此dict对象<br>1、</em>args表示可接受任意个（包含0个）位置参数，当函数调用时，所有未使用（未匹配）的位置参数会在函数内自动组装进一个tuple对象中，此tuple对象会赋值给局部变量args</p><p>2、**kwargs表示可接受任意个（包含0个）关键字参数，当函数调用时，所有未使用（未匹配）的关键字参数会在函数内组装进一个dict对象中，此dict对象会赋值给局部变量kwargs</p><p><strong>在函数调用时：</strong><br>表示解包功能</p><p>1、*args表示解包元组对象中的每个元素作为位置参数传入到被调用函数中<br>2、**kwargs表示解包字典对象中的每个元素作为关键字参数传入到被调用函数中</p><p>函数调用时传入的参数，会按照从左到右的顺序依次在函数中使用，最左侧的参数先由位置参数first使用（匹配），剩下的所有未匹配的参数会被自动收集到1个新的tuple对象中，而局部变量second会指向这个新的tuple对象</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, *second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"></span><br><span class="line">print_str(<span class="string">"hello"</span>,<span class="string">"美女"</span>,<span class="string">"小猫"</span>,<span class="string">"青蛙"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><p><em>numbers_strings出现在函数调用时，称为解包（一个“</em>”字符后面紧挨着1个tuple对象），numbers_strings自身是一个tuple对象，所以也称为元组的解包，tuple中的元素解包成一个一个的位置参数传入到函数中，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, *second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numbers_strings = (<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>)</span><br><span class="line">print_str(*numbers_strings) <span class="comment">#注意这里的*numbers_strings</span></span><br></pre></td></tr></tbody></table></figure><p>解包功能不只是tuple、还有list、str、range</p><h3 id="return函数返回值"><a href="#return函数返回值" class="headerlink" title="return函数返回值"></a>return函数返回值</h3><p>函数使用return返回值，也可以使用lambda表达式作为函数的返回值</p><p>return 语句会终止函数的执行，并且返回函数的值。return语句只能出现在函数体内</p><p>当函数体内的程序执行到return这一步时，会退出函数，即使是在一个循环体内，程序也不会再执行</p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">5</span>)    <span class="comment">#0-4</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)     <span class="comment">#产生1到100范围的整数，相当于前面是闭区间后面是开区间。</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>)  <span class="comment">#产生1到100的奇数，其中2是步长，即每次数值递增的值。</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">100</span>, <span class="number">0</span>, -<span class="number">2</span>) <span class="comment">#产生100到1的偶数，其中-2是步长，即每次数字递减的值。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>bin() 将给的参数转换成二进制<br>otc() 将给的参数转换成八进制<br>hex() 将给的参数转换成十六进制</p><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>() 返回绝对值</span><br><span class="line"><span class="built_in">round</span>() 四舍五入</span><br><span class="line"><span class="built_in">pow</span>(a, b) 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余</span><br><span class="line"><span class="built_in">sum</span>() 求和</span><br><span class="line"><span class="built_in">min</span>() 求最小值</span><br><span class="line"><span class="built_in">max</span>() 求最大值</span><br><span class="line"><span class="built_in">divmod</span>(<span class="number">20</span>,<span class="number">3</span>) <span class="comment"># 求商和余数:(6,2)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set() 函数创建一个无序不重复元素集合，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等<br>set([iterable])<br>参数：<br>    iterable – 可迭代对象对象；<br>返回值：<br>    返回新的集合对象。</p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>匿名函数lambda：是指一类无需定义函数名的函数，可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值。<br>lambda 参数 : 表达式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x:x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个x，在冒号前，表示判断等效于 if x : ,后面则为返回x ,也可以对x进行操作</span></span><br><span class="line"><span class="keyword">if</span>  x ：</span><br><span class="line">    <span class="keyword">return</span> x </span><br></pre></td></tr></tbody></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>接受函数为参数，或者把函数作为结果返回值的函数</p><h4 id="map-1"><a href="#map-1" class="headerlink" title="map()"></a>map()</h4><p>python3中返回一个迭代器</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器函数的参数是一个函数，返回值也是一个函数。</p><h3 id="特殊方法-双下方法"><a href="#特殊方法-双下方法" class="headerlink" title="特殊方法(双下方法)"></a>特殊方法(双下方法)</h3><h2 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h2><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，文件名就是模块名。包含了 Python 对象定义和Python语句。</p><p>使用python模块大大提高了代码的可维护性和代码复用性,避免了函数名与变量名冲突。</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘的意思是：当.py文件被直接运行时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块将被运行；</p><p>当.py文件以模块形式被导入时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块不被运行。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> somemodule <span class="comment">#导入整个模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> *    <span class="comment">#将某个模块中的全部函数导入 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> somefunction    <span class="comment">#从某个模块中导入某个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> firstfunc, secondfunc, thirdfunc     <span class="comment">#从某个模块中导入多个函数 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="包-package"><a href="#包-package" class="headerlink" title="包( package)"></a>包( package)</h2><p>在比較大型的项目中常常需要编写、用到大量的模块，此时我们可以使用包( Package)来管理这些模块。</p><p>包是一个分层次的文件目录结构，简单来说，包就是文件夹，但该文件夹下必须存在 <strong>init</strong>.py 文件, 该文件的内容可以为空。<strong>init</strong>.py 用于标识当前文件夹是一个包。</p><p>1.import 包名[.模块名[as别名]</p><p>2.from 包名 import 模块名[as别名]</p><p>3.from 包名.模块名 import成员名[as别名]</p><p>我们在导入包的时候，实际上是导入了它的 <strong>init</strong>.py文件文件。</p><h3 id="一键安装依赖包"><a href="#一键安装依赖包" class="headerlink" title="一键安装依赖包"></a>一键安装依赖包</h3><p>#requirements.txt 用来记录项目所有的依赖包和版本号<br>pip freeze &gt; requirements.txt</p><p>#一次性安装 requirements.txt 里面所有的依赖包，<br>pip install -r requirements.txt</p><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>对于库的定义，和包（Package）有点类似。一般能定义成库的，基本上都是完成了特定功能的实现，并得到使用者的肯定，但库的本质是“包”/“模块”。</p><p>例如django库，对于使用的人来说，他是一个库；但是对于该库作者来说，django就是他写的一个包。</p><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pip 安装第三方库速度太慢,可设置 pip 从国内的镜像源下载安装</span><br><span class="line"></span><br><span class="line">阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">豆瓣 http://pypi.douban.com/simple/</span><br><span class="line">清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时使用</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久设置</span></span><br><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>在Python中可以使用class关键字定义类</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self, course_name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s正在学习%s.'</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_movie</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s只能观看《熊出没》.'</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在观看岛国爱情大电影.'</span> % self.name)</span><br></pre></td></tr></tbody></table></figure><p>写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p><h2 id="self参数"><a href="#self参数" class="headerlink" title="self参数"></a>self参数</h2><p>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数</p><h2 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h2><p>属性(成员变量)有两种：实例属性和类属性</p><p>实例属性是在构造函数__init__中定义，定义时以self作为前缀，实例属性属于各个实例所有，互不干扰；</p><p>类属性：直接在类中定义属性，绑定在类本身。类属性属于类所有，所有实例共享一个属性</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">'Student'</span></span><br><span class="line"></span><br><span class="line">s = Student() <span class="comment"># 创建实例s</span></span><br><span class="line"><span class="built_in">print</span>(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找类的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'类的name属性:<span class="subst">{Student.name}</span>'</span>) </span><br><span class="line"></span><br><span class="line">s.name = <span class="string">'Michael'</span> <span class="comment"># 给实例绑定name属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'实例属性:<span class="subst">{s.name}</span>'</span>) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></span><br><span class="line"><span class="built_in">print</span>(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></span><br></pre></td></tr></tbody></table></figure><p>在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p>__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。</p><h2 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h2><p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，self 代表的是类的实例。</p><p>self 的名字并不是规定死的，也可以使用 this，但是最好还是按照约定使用 self。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>__init__方法是一种特殊的方法，被称为类的初始化方法，当创建这个类的对象实例时调用该方法进行初始化操作</p><p>__init__方法的第一个参数永远是self，表示创建的实例本身，有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = </span><br></pre></td></tr></tbody></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>@staticmethod 静态方法只是名义上归属类管理，但是不能使用类变量和实例变量，是类的工具包<br>放在函数前（该函数不传入self或者cls），所以不能访问类属性和实例属性</p><h3 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h3><p>__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。</p><h3 id="类的专有方法："><a href="#类的专有方法：" class="headerlink" title="类的专有方法："></a>类的专有方法：</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__init__ : 构造函数，在生成对象时调用</span><br><span class="line">__del__ : 析构函数，释放对象时使用</span><br><span class="line">__repr__ : 打印，转换</span><br><span class="line">__setitem__ : 按照索引赋值</span><br><span class="line">__getitem__: 按照索引获取值</span><br><span class="line">__len__: 获得长度</span><br><span class="line">__cmp__: 比较运算</span><br><span class="line">__call__: 函数调用</span><br><span class="line">__add__: 加运算</span><br><span class="line">__sub__: 减运算</span><br><span class="line">__mul__: 乘运算</span><br><span class="line">__truediv__: 除运算</span><br><span class="line">__mod__: 求余运算</span><br><span class="line">__pow__: </span><br></pre></td></tr></tbody></table></figure><h2 id="访问可见性"><a href="#访问可见性" class="headerlink" title="访问可见性"></a>访问可见性</h2><p>在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, foo</span>):</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__bar'</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__foo'</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是”We are all consenting adults here”。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻</p><h2 id="创建和使用对象实例"><a href="#创建和使用对象实例" class="headerlink" title="创建和使用对象实例"></a>创建和使用对象实例</h2><p>实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个实例</span></span><br><span class="line">stu1 = Student(<span class="string">'骆昊'</span>, <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line">stu1.study(<span class="string">'Python程序设计'</span>)</span><br><span class="line"><span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">stu1.watch_movie()</span><br></pre></td></tr></tbody></table></figure><h2 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h2><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。</p><p>我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># __slots__魔法限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">'_name'</span>, <span class="string">'_age'</span>, <span class="string">'_gender'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在玩飞行棋.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在玩斗地主.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    person = Person(<span class="string">'王大锤'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = '白元芳'  # AttributeError: can't set attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>__slots__魔法:Python是一门动态语言。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><h2 id="继承-重写与多态"><a href="#继承-重写与多态" class="headerlink" title="继承,重写与多态"></a>继承,重写与多态</h2><p>我们可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">"""人"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s正在愉快的玩耍.'</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_av</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在观看爱情动作片.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s只能观看《熊出没》.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">"""学生"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, grade</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @grade.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span>(<span class="params">self, grade</span>):</span></span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self, course</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s的%s正在学习%s.'</span> % (self._grade, self._name, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">"""老师"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, title</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @title.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span>(<span class="params">self, title</span>):</span></span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self, course</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s%s正在讲%s.'</span> % (self._name, self._title, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    stu = Student(<span class="string">'王大锤'</span>, <span class="number">15</span>, <span class="string">'初三'</span>)</span><br><span class="line">    stu.study(<span class="string">'数学'</span>)</span><br><span class="line">    stu.watch_av()</span><br><span class="line">    t = Teacher(<span class="string">'骆昊'</span>, <span class="number">38</span>, <span class="string">'砖家'</span>)</span><br><span class="line">    t.teach(<span class="string">'Python程序设计'</span>)</span><br><span class="line">    t.watch_av()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span>(<span class="params"><span class="built_in">object</span>, metaclass=ABCMeta</span>):</span></span><br><span class="line">    <span class="string">"""宠物"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nickname</span>):</span></span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""发出声音"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Pet</span>):</span></span><br><span class="line">    <span class="string">"""狗"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s: 汪汪汪...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Pet</span>):</span></span><br><span class="line">    <span class="string">"""猫"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s: 喵...喵...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    pets = [Dog(<span class="string">'旺财'</span>), Cat(<span class="string">'凯蒂'</span>), Dog(<span class="string">'大黄'</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们将Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和Cat两个子类分别对Pet类中的make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span>(<span class="params"><span class="built_in">object</span>, metaclass=ABCMeta</span>):</span></span><br><span class="line">    <span class="string">"""宠物"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nickname</span>):</span></span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""发出声音"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们将Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和Cat两个子类分别对Pet类中的make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h1 id="五大基本语句"><a href="#五大基本语句" class="headerlink" title="五大基本语句"></a>五大基本语句</h1><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>赋值语句的作用:将变量绑定到对象</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>第一个字符必须是字母表中字母或下划线 _ 。<br>标识符的其他的部分由字母、数字和下划线组成。<br>标识符对大小写敏感。<br>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><h2 id="输入输出语句（print-input函数）"><a href="#输入输出语句（print-input函数）" class="headerlink" title="输入输出语句（print, input函数）"></a>输入输出语句（print, input函数）</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  处理用户的多个输入</span></span><br><span class="line">n1, n2, n3 = <span class="built_in">input</span>(<span class="string">"输入三个数，以空格分隔 "</span>).split()</span><br><span class="line"><span class="built_in">input</span>()得到的都是<span class="built_in">str</span>类型</span><br></pre></td></tr></tbody></table></figure><h3 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"{} {}"</span>.<span class="built_in">format</span>(<span class="string">"hello"</span>, <span class="string">"world"</span>) )   <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"{1} {0} {1}"</span>.<span class="built_in">format</span>(<span class="string">"hello"</span>, <span class="string">"world"</span>))  <span class="comment"># 设置指定位置</span></span><br></pre></td></tr></tbody></table></figure><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><p>pyhton 只有if-else语句没有switch<br>if-elif-else语句 </p><h3 id="三目运算符（三元表达式）-1"><a href="#三目运算符（三元表达式）-1" class="headerlink" title="三目运算符（三元表达式）"></a>三目运算符（三元表达式）</h3><p>为真时的结果 if 判断条件 else 为假时的结果（注意，没有冒号）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现一个基础版本（递归版本）的斐波那契数列：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for-else循环"><a href="#for-else循环" class="headerlink" title="for/else循环"></a>for/else循环</h3><p>for…else 语句块可以被理解为当循环条件不满足时，我们来处理我们需要做的事，伪代码逻辑如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        you_find_your_stuff()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    you_did_not_find_your_stuff()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>else字句运行有两种情况<br>    1.使用 break 跳出循环<br>    2.循环自然结束</p><h3 id="条件循环while-else"><a href="#条件循环while-else" class="headerlink" title="条件循环while-else"></a>条件循环while-else</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无限循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">#while 循环使用 else 语句</span></span><br><span class="line"><span class="keyword">while</span> ():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>；</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="else子句"><a href="#else子句" class="headerlink" title="else子句"></a>else子句</h3><p>else：在循环中可以使用else语句，else语句在for遍历结束或者while语句为Flase时候执行，循环被break终止时不执行</p><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h3><p>break 语句    在语句块执行过程中终止循环，并且跳出整个循环<br>continue 语句    在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</p><h2 id="异常处理语句-try-except-else-finally"><a href="#异常处理语句-try-except-else-finally" class="headerlink" title="异常处理语句(try-except-else-finally)"></a>异常处理语句(try-except-else-finally)</h2><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是子程序（或函数）通过一系列调用语句直接或间接调用自己</p><p>每个递归函数必须具有停止递归的基本条件，否则该函数将无限调用自身。</p><p>Python解释器限制了递归的深度，以帮助避免无限递归，从而导致堆栈溢出。<br><strong>递归的缺点</strong><br>有时，递归背后的逻辑很难遵循。<br>递归调用很昂贵（效率低），因为它们占用大量内存和时间。<br>递归函数很难调试。</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fac</span>(<span class="params">x</span>):</span></span><br><span class="line">    <span class="keyword">if</span> x == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (x * fac(x-<span class="number">1</span>))  <span class="comment">#通过减少数量来递归调用自身。当数字减少到1时，递归结束。这称为基本条件。</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现一个基础版本（递归版本）的斐波那契数列：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><h2 id="使用辅助函数简化复杂表达式"><a href="#使用辅助函数简化复杂表达式" class="headerlink" title="使用辅助函数简化复杂表达式"></a>使用辅助函数简化复杂表达式</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">the_max</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="keyword">return</span> x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'a = '</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'b = '</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'c = '</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The max is:'</span>, the_max(the_max(a, b), c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂</span></span><br><span class="line">the_max = a &gt; b <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line">the_max = c &gt; the_max <span class="keyword">and</span> c <span class="keyword">or</span> the_max</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The max is:'</span>, the_max)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p> <a href="https://pythontutor.com/">可视化代码执行</a></p><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="PEP标准"><a href="#PEP标准" class="headerlink" title="PEP标准"></a>PEP标准</h2><p>PEP（Python增强提案：Python Enhancement Proposals）<br><a href="https://www.python.org/dev/peps/pep-0008/">PEP-8</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AutoJS</title>
      <link href="/2022/010827358.html"/>
      <url>/2022/010827358.html</url>
      
        <content type="html"><![CDATA[<h1 id="autojs"><a href="#autojs" class="headerlink" title="autojs"></a>autojs</h1><p><a href="https://pro.autojs.org/docs/#/zh-cn/?id=%e7%bb%bc%e8%bf%b0">官方文档</a></p><p><a href="https://www.yuque.com/yashujs/bfug6u/ogik4f">史上最全的autojs代码仓库</a></p><p><a href="https://github.com/kangour/autojs_sdk">autojs代码：</a><br><a href="https://www.yuque.com/yashujs/bfug6u">牙叔教程</a><br><a href="https://www.yuque.com/yashujs/bfug6u/un3rk3#mVgln">autojs非常见函数</a><br><a href="https://www.yuque.com/yashujs/bfug6u/ittz45">autojs-修改java代码-为我所用</a><br>Appium 和 Airtest 编写的自动化脚本都依赖于 PC 端运行，没有办法直接运行在移动端；无障碍服务需要单独创建一个 Android 项目，没有完整的使用文档，使用起来有一定的门槛</p><p>AutoJS 它通过编写 JavaScript 脚本，结合系统的「 无障碍服务 」对 App 进行自动化操作<br>脚本文件体积小，可以打包成 APK 直接安装<br>拥有丰富的 UI 组件用于构建 GUI 界面<br>非 Root 设备也能完成自动化操作，可以摆脱 PC 直接运行<br>提供多种元素定位方式，可以适配各种机型<br>官方文档非常详细，学习成本低</p><p>Auto.JS作为一款基于JavaScript语言的一款脚本，基本语法和结构可通过学习JavaScript来了解。要知道，安卓的app界面就是由一堆控件组成的，这些父子控件相互嵌套，组成了我们熟悉的app界面，因此，你要执行自动化操作，那么最常用的就是先精确的找到这个控件(唯一性)，再来说下一步对其进行操作，而我个人认为Auto.JS之所以方便好用，最大的一点就是查找你想要操作的控件(包括但不限于点击、设置文本等)时特别方便明了，一眼就能看懂并能迅速定位。因为Auto.JS是基于JavaScript的语言，因此基本的语法结构、很多两者通用的函数等都是可以在JavaScript里面找到，如常见的“.replace()”“.indexof()”“.test()”等这些都在JavaScript网站上有相关的用法说明</p><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><h2 id="vscode插件"><a href="#vscode插件" class="headerlink" title="vscode插件"></a>vscode插件</h2><p>Auto.js-VSCodeExt</p><p>Auto.js-VSCodeExt-Fixed<br>对插件 Auto.js-VSCodeExt 进行了部分优化</p><p>Autojs Clipboard<br>同步手机剪贴板到电脑剪贴板</p><p>然后，使用 VS Code 快捷键「 Ctrl/Command + Shift + P 」，选择「 Auto.js:Start Server 」开启 AutoJS 服务</p><p>在同一wifi下无法连接，手机开热点给电脑，即可连接</p><h3 id="Auto-js-Pro-Ext-1-4"><a href="#Auto-js-Pro-Ext-1-4" class="headerlink" title="Auto.js-Pro-Ext 1.4"></a>Auto.js-Pro-Ext 1.4</h3><p>开启代码提示</p><p>进入以下文件夹：C:\Users\用户名.vscode\extensions\hyb1996.auto-js-pro-ext-1.3.2\assets\project-templates\v8-default<br>拷贝这两个文件到你的项目目录：node_modules,tsconfig.json</p><h2 id="scrcpy投屏"><a href="#scrcpy投屏" class="headerlink" title="scrcpy投屏"></a>scrcpy投屏</h2><p><a href="https://github.com/Genymobile/scrcpy">Github地址</a></p><p>手机数据线连接电脑后，开启usb调试，自动连接</p><p>鼠标右键是返回</p><p>要想卸载scrcpy,先在目录下进入cmd,输入adb kill-server,再删除整个scrcpy文件即可</p><p>adb功能异常，重启adb<br>（1）把adb服务杀死：adb kill-server<br>（2）重启adb服务：adb reconnect</p><h2 id="结合webditor"><a href="#结合webditor" class="headerlink" title="结合webditor"></a>结合webditor</h2><p>autojs本身就有布局分析，但不一定所有手机都能用，使用weditor进行布局分析</p><p><a href="https://github.com/openatx/weditor">weditor 地址</a></p><p>先把weditor安装好并运行起来。然后：</p><p>.设备通过USB线连接电脑。<br>在cmd命令行中输入adb tcpip 5555<br>拔掉数据线<br>在cmd命令行中输入adb connect 192.168.1.5(设备在局域网中的ip)<br>在weditor 网页中输入手机的ip并且点击Connect连接</p><p>连接成功后，点击“Dump Hierarchy” 获取最新的界面。这里以微信为例，然后我们会看到布局分析，点击我们需要操作的控件，可以获取到resourceId、className、text等信息，然后我们运用autojs进行操作。 </p><h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><h2 id="autojs提取软件自带例子"><a href="#autojs提取软件自带例子" class="headerlink" title="autojs提取软件自带例子"></a>autojs提取软件自带例子</h2><p>通过mt管理器点击autojspro的安装包，然后点击查看，依次打开assets/sample/中文，这就是例子文件。<br>然后长按文件夹解压到任意目录</p><p>如果没有mt管理器，可以直接将autojspro.apk的后缀改成.zip,当成压缩包来提取文件。</p><p>快捷打开无障碍，长按两个音量键三秒</p><p>如何打开控制台<br>依次点击 帮助—–切换开发者工具——console</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>查找控件存不存在使用exists ()。一般情况下Autojs生成的代码是：if (text(“刷视频赚”).exists()) {}，不建议这样写，有很多时候找不到或者是有多个文字一样的内容故：let earnVideo= className(“android.widget.TextView”).text(“刷视频赚”).findOnce();这样写准确率更高。</p><p>为什么有时候launchApp(‘应用名’);会失效<br>第一,这是因为你手机存在同名软件.找不到你想要的app，要使用launch(‘应用包名’)。第二,是因为你没有给软件(后台弹出界面)权限</p><p>如果有界面，那么监听通知需要放在线程里。<br>webview 注入js的js文件需要改后缀，如果还是js,会被加密导致无法使用<br>webview 内页面引用静态文件可以使用相对路径<br>如果多次调用 even.on，event.emit 会触发多次。可以用 even.removeAllListeners进行清除。<br>console.show 调用时范围只是当前线程。<br>不要在UI线程内死循环，要重新开启一个线程，不然会卡死<br>无障碍服务权限申请可以使用auto,直接跳转到设置页。<br>通知使用服务第一次调用后会提示一次之后，如果没有给予权限。大概率不再弹窗，并且不会报错。如果一直没有给权限，而且无法弹窗需要引导用户手动开启，并重启脚本。</p><h2 id="支付宝-微信-其他软件"><a href="#支付宝-微信-其他软件" class="headerlink" title="支付宝/微信/其他软件"></a>支付宝/微信/其他软件</h2><p>在使用autojs时，遇到支付宝和微信以及一些安全意识较强的平台，很难获取到其页面的控件，无论你是使用autojs自带的控件分析<br>或是Android studio的uiautomatorviewer.bat来分析它们的页面控件，都会分析到。但是你在获取的时侯就会发现根本获取不到，</p><p>原因<br>支付宝和微信都把它们的控件藏起来了，可能是封装成某个类型，那个类型的输出就是空行。</p><p>我的方法是获取其控件后在其末尾加了个string，使得整个内容强转成string。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> meId2 = id(<span class="string">"XXX"</span>).find()+<span class="string">""</span>;<span class="comment">//找到id为XXX的控件，然后加上空字符串</span></span><br><span class="line"><span class="comment">//整个类型现在变成string，现在就可以用字符串截取的方式来获取控件的信息了。</span></span><br></pre></td></tr></tbody></table></figure><p>//pro9基本无法使用，低版本可以<br>while(!click(“智慧广工商”));</p><p>click(“智慧广工商”)</p><h1 id="基于控件"><a href="#基于控件" class="headerlink" title="基于控件"></a>基于控件</h1><h2 id="控件属性"><a href="#控件属性" class="headerlink" title="控件属性"></a>控件属性</h2><p>className 类名。类名表示一个控件的类型<br>packageName 包名。包名表示控件所在的应用包名<br>bounds 控件在屏幕上的范围。<br>drawingOrder 控件在父控件的绘制顺序。<br>indexInParent 控件在父控件的位置。<br>clickable 控件是否可点击。<br>longClickable 控件是否可长按。<br>checkable 控件是否可勾选。<br>checked 控件是否可已勾选。<br>scrollable 控件是否可滑动。<br>selected 控件是否已选择。<br>editable 控件是否可编辑。<br>visibleToUser 控件是否可见。<br>enabled 控件是否已启用。<br>depth 控件的布局深度。<br>fullId:    app包名:id/对应的id名称  ，内容一样要写在id里，例如id(“fullld的内容”)</p><h2 id="UiSelector控件选择器"><a href="#UiSelector控件选择器" class="headerlink" title="UiSelector控件选择器"></a>UiSelector控件选择器</h2><p>我们使用UiSelector选择器筛选出所需要的控件，筛选的依据就是通过控件的各种属性选取屏幕上的控件<br>通常用一个唯一的属性来定位一个控件<br>depth-desc-id-classname等控件的常规的唯一属性<br>findone.parent().child(xx)等控件的父子依存顺序关系</p><h3 id="findOne-timeout"><a href="#findOne-timeout" class="headerlink" title=".findOne(timeout)"></a>.findOne(timeout)</h3><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件；如果在timeout毫秒的时间内没有找到符合条件的控件，则终止搜索并返回null。</p><h3 id="find"><a href="#find" class="headerlink" title=".find()"></a>.find()</h3><p>找到所有满足条件的控件集合并返回。这个搜索只进行一次，并不保证一定会找到，因而会出现返回的控件集合为空的情况</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过empty()函数判断找到的是否为空。例如：</span></span><br><span class="line"><span class="keyword">var</span> c = className(<span class="string">"AbsListView"</span>).find();</span><br><span class="line"><span class="keyword">if</span>(!c.empty()){</span><br><span class="line">    toast(<span class="string">"找到啦"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    toast(<span class="string">"没找到╭(╯^╰)╮"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="findOnce-i"><a href="#findOnce-i" class="headerlink" title=".findOnce(i)"></a>.findOnce(i)</h3><p>.untilFind()<br> .exists()<br>.waitFor()<br>.filter(f)</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>algorithm(algorithm)  指定选择器的搜索算法。 广度优先在控件所在层次较低时，或者布局的层次不多时，通常能更快找到控件</p><p>(text,desc,id,className,packageName)都可以像下面一样创建选择器<br>textContains(str)  “text需要包含字符串str”的筛选条件。<br>textStartsWith(prefix)<br>textEndsWith(suffix)<br>textMatches(reg)</p><p>UiSelector.untilFind()<br>UiSelector.exists()<br>UiSelector.waitFor()</p><h3 id="UiSelector-filter-f"><a href="#UiSelector-filter-f" class="headerlink" title="UiSelector.filter(f)"></a>UiSelector.filter(f)</h3><p>f {Function} 过滤函数，参数为UiObject，返回值为boolean<br>为当前选择器附加自定义的过滤条件。</p><h2 id="UiObject控件对象"><a href="#UiObject控件对象" class="headerlink" title="UiObject控件对象"></a>UiObject控件对象</h2><p>UiObject表示一个控件，可以通过这个对象获取到控件的属性，也可以对控件进行点击、长按等操作。</p><p>获取一个UiObject通常通过选择器的findOne(), findOnce()等函数，也可以通过UiCollection来获取，或者通过UiObject.child(), UiObject.parent()等函数来获取一个控件的子控件或父控件。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text("微信").findOne()  //返回一个控件对象，想要操作这个控件，其属性必须为true</span><br></pre></td></tr></tbody></table></figure><p>click(text[, i])<br>text {string} 要点击的文本<br>i {number} 如果相同的文本在屏幕中出现多次，则i表示要点击第几个文本, i从0开始计算</p><p>click() 点击。点击一个控件，前提是这个控件的clickable属性为true<br>longClick() 长按。长按一个控件，前提是这个控件的longClickable属性为true<br>setText() 设置文本，用于编辑框控件设置文本。<br>scrollForward();<br>scrollBackward() 滑动。滑动一个控件(列表等), 前提是这个控件的scrollable属性为true<br>exits() 判断控件是否存在<br>waitFor() 等待控件出现</p><h3 id="bounds-坐标"><a href="#bounds-坐标" class="headerlink" title="bounds()坐标"></a>bounds()坐标</h3><p>返回控件在屏幕上的范围，其值是一个Rect对象。</p><p>如果一个控件本身无法通过click()点击，那么我们可以利用bounds()函数获取其坐标，再利用坐标点击。总体来说，基于坐标来确定要操作的控件比较简单，核心是确定要操作的控件的坐标即可。Auto.JS里可以直接获取控件的坐标，每一个控件包含其“.bounds()”属性，bounds()其实表示的是一个范围矩阵。此处还是以右下角的“+”号按钮为例，查看控件属性信息，包含“.bounds()”属性如下图：</p><p>bounds()属性是四个坐标值，其分别为(left, top, right, buttom)<br>    left：控件左边缘与屏幕左边的距离<br>    top：控件上边缘与屏幕上边的距离<br>    right：控件右边缘与屏幕左边的距离<br>    buttom ： 控件下边缘与屏幕上边的距离</p><p>因此，在获得控件的坐标bounds()属性后，就可以对控件执行基于坐标的操作，常见的操作有：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bounds().left：长方形左边界的x坐标</span><br><span class="line">bounds().right：长方形右边界的x坐标</span><br><span class="line">bounds().top：长方形上边界的y坐标</span><br><span class="line">bounds().bottom：长方形下边界的y坐标</span><br><span class="line">bounds().centerX()：长方形中点x坐标</span><br><span class="line">bounds().centerY()：长方形中点y坐标</span><br><span class="line">bounds().width()：长方形宽度也就是控件宽度</span><br><span class="line">bounds().height()：长方形高度也就是控件高度</span><br><span class="line">click(x,y)：坐标(x,y)处执行点击操作  <span class="comment">//注意:安卓7以下点击需要root权限且函数为Tap(x,y)</span></span><br><span class="line">bounds(left, right, top, bottom).clickable().click()：点击该长方形区域</span><br></pre></td></tr></tbody></table></figure><h2 id="基于控件属性确定控件"><a href="#基于控件属性确定控件" class="headerlink" title="基于控件属性确定控件"></a>基于控件属性确定控件</h2><p>通过查看这些属性，我们不难发现有其中一项属性desc(“更多选项”)，很可能是不和其他控件相同的，也就是此控件属性具有唯一性，能唯一的确定此控件，这个属性就是我们要找的。因此，我们想要对其进行操作只需要：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(desc(<span class="string">"更多选项"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    desc(<span class="string">"更多选项"</span>).findonce().click();    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述代码执行后，在该界面时，desc(“更多选项”)首先会被查找(findonce)，查找后执行点击(click)，从而【⋮】按钮也就被点击了。总结下无非就是我们找到了此按钮的唯一控件属性desc(“更多选项”)从而再对其操作，仅此而已。</p><p>另外，加上“.exist()”是为了增加程序鲁棒性，万一控件不存在或者没找到，则程序不会执行，否则对不存在(或没找到)的控件操作会抛出异常。基于此，往往要判定控件存在与否后再进行操作，而“.exist()”返回的是一个布尔值，方便后续进行判断和操作。另外一个常用的操作就是加上“while(!)”死循环等待控件出现，如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当"更多选项"不存在等价于此按钮还没出现</span></span><br><span class="line"><span class="keyword">while</span>(!desc(<span class="string">"更多选项"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//继续循环等待，直到按钮出现</span></span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行到这里说明"更多选项"存在了，对该按钮执行点击操作</span></span><br><span class="line">desc(<span class="string">"更多选项"</span>).findonce().click();</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></tbody></table></figure><p>当分析了很多控件后不难发现，控件的文本信息往往是以desc或text属性来呈现的，比如一个该按钮名为”更多选项”，其控件的desc属性或text属性就是其按钮名字，确定其名字也就确定了此控件，针对此按钮具体来说，就是其desc属性是”更多选项”。（此处要说的意思就是要具体问题具体分析，文本信息不是desc就是text，如果是desc属性就操作desc，是text属性就操作text）但是，往往就有时候我们只知道包含的部分desc或text，这时候可用这四个函数来确定：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//descContains即desc包含部分信息即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(descContains(<span class="string">"选项"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//descStartsWith即desc以此信息开头即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(descStartsWith(<span class="string">"更多"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>同理，text也有对应的两个函数,比如一个按钮text属性为(“我的学习积分”)/</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//textContains即text包含部分信息即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(textContains(<span class="string">"学习积分"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//textStartsWith即text以此信息开头即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(textStartsWith(<span class="string">"我的"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然，更多情况是desc和text属性并不能唯一确定要操作的控件，我们往往用其他属性(常用的有className、id、depth等)一起叠加使用来尽可能的使之唯一，比如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往往是诸多控件属性一起才可唯一确定待操作的控件</span></span><br><span class="line"><span class="keyword">var</span> myObject = className(“XXX”).depth(xx).id(“XXX”).text(“XXX”).findone();</span><br><span class="line">myObject.click();</span><br></pre></td></tr></tbody></table></figure><p> 需要注意的是：在不同的Android系统上，同一版本的app的控件属性可能会变化。同样，app版本更新后，控件属性、布局也可能发生变化，所以，若要对不同版本不同系统具有兼容性，应尽可能选择不变化的控件属性。</p><h2 id="基于控件父子关系确定控件"><a href="#基于控件父子关系确定控件" class="headerlink" title="基于控件父子关系确定控件"></a>基于控件父子关系确定控件</h2><p>有时候，控件属性是变化的、随机的，这时候我们便不能通过控件的本身固有属性如id，className，depth等来唯一的确定出需要的控件，这时候我们可以通过控件之间的上下级关系(也叫父子关系)来确定出需要操作的控件。</p><p>首先需要了解的是控件间的依存关系，还是以之前的app界面为例，我们这次来分析右下角的的“+”号按钮，和之前一样利用Auto.JS分析控件布局，我们点击右下角的“+”号按钮，点击[在布局层次中查看]，便可以查看当前控件在整个布局层次中的上下级关系(父子关系)，如图1.6所示，不难发现，从上到下，左侧五颜六色的竖棍丨就代表着其层级关系，竖棍丨越多也就越处于底层，该“+”号按钮控件名为“ImageButton”，对应着拥有8根竖棍丨，所以其是在第八级。</p><p>另外，和“ImageButton”平级的控件是图1.6所示的8.2—“ImageView”控件，“ImageButton”的父控件也就是它的上级控件是图1.6所示的7.3—“android.view.View”控件，所以我们可以建立以下关系：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8.1</span>中“ImageButton”的parent() = <span class="number">7.3</span>中“android.view.View”</span><br><span class="line"></span><br><span class="line"><span class="number">7.3</span>中“android.view.View”的child(<span class="number">0</span>) = <span class="number">8.1</span>中“ImageButton”</span><br><span class="line"></span><br><span class="line"><span class="number">7.3</span>中“android.view.View”的child(<span class="number">1</span>) = <span class="number">8.2</span>中“ImageView”</span><br><span class="line"></span><br><span class="line"><span class="number">7.3</span>中“android.view.View”的parent() = <span class="number">6</span>中“android.view.View”</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>中“android.view.View”的child(<span class="number">0</span>)  = <span class="number">7.1</span>中“LinearLayout”</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>中“android.view.View”的child(<span class="number">1</span>)  = <span class="number">7.2</span>中“android.view.View”</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>中“android.view.View”的child(<span class="number">2</span>)  = <span class="number">7.3</span>中“android.view.View”</span><br></pre></td></tr></tbody></table></figure><p> 建立了以上隶属关系，我们就可以通过唯一确定任意其中一个不变的固定控件，便可通过控件间的隶属关系来确定我们想要的控件，从而规避了我们要找的控件属性动态变化这一情况。</p><p> <img src="https://gitee.com/xi_fan/img/raw/master/image-20211112113703418.png" alt="图1.5 点击[在布局层次中查看]"></p><p><img src="https://gitee.com/xi_fan/img/raw/master/image-20211112113725776.png" alt="图1.6 控件的布局层次分析1"></p><p> 在这里，我们假定以之前右上角的【⋮】按钮为固定控件(因为”更多选项”这几个字基本不会变化)，通过【⋮】按钮来和控件间的父子关系来确定出右下角的“+”号按钮。</p><p>首先分析右上角的【⋮】按钮的层级关系，如图1.7所示，【⋮】按钮位于第10级，它的父级parent是图1.7所示的9.3—“android.support.v7.widget.LinearLayoutCompat”，9.3的父级是8—“android.view.View”,以此类推，发现我们想要操作的控件也就是“ImageButton”控件(8.1)和右上角的【⋮】按钮即“ImageView”控件(10)关系是：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“ImageView”控件(<span class="number">10</span>)是从<span class="number">7.1</span>—“LinearLayout”继承下来的；</span><br><span class="line"></span><br><span class="line">“ImageButton”控件(<span class="number">8.1</span>)是从<span class="number">7.3</span>—“android.view.View”继承下来的；</span><br><span class="line"></span><br><span class="line">   而<span class="number">7.1</span>和<span class="number">7.3</span>是平级关系，拥有共同的父级<span class="number">6</span>—“android.view.View”</span><br></pre></td></tr></tbody></table></figure><p>图1.7 控件的布局层次分析2</p><p>明白了这一点，我们便可通过【⋮】按钮(10)来确定右下角的“+”号按钮(8.1)，如下所示：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先，通过desc属性确定出【⋮】按钮(图1.7所示的10)</span></span><br><span class="line"><span class="comment">//属性.findone()首先找到一个控件，再在此基础上加.parent等</span></span><br><span class="line"><span class="keyword">var</span> moreButton = desc(<span class="string">"更多选项"</span>).findone();   </span><br><span class="line"></span><br><span class="line"><span class="comment">//其次，找到【⋮】按钮和右下角“+”号按钮共同的父级parent</span></span><br><span class="line"><span class="comment">//在这里是一层层往上找是为了方便理解，实际操作可一步到位</span></span><br><span class="line"><span class="keyword">var</span> 9_3Supportv7 = moreButton.parent();                             <span class="comment">//找到图1.7所示的9.3控件</span></span><br><span class="line"><span class="keyword">var</span> 8viewView = moreButton.parent().parent();                       <span class="comment">//找到图1.7所示的8控件</span></span><br><span class="line"><span class="keyword">var</span> 7_1LinearLayout = moreButton.parent().parent().parent();        <span class="comment">//找到图1.7所示的7.1控件</span></span><br><span class="line"><span class="keyword">var</span> 6viewView = moreButton.parent().parent().parent().parent();     <span class="comment">//找到图1.7所示的6控件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//最后，通过共同的父级parent找到右下角“+”号按钮</span></span><br><span class="line"><span class="comment">//在这里是一层层往下找是为了方便理解，实际操作可一步到位</span></span><br><span class="line"><span class="keyword">var</span> 7_3viewView = 6viewView.child(<span class="number">2</span>);                               <span class="comment">//找到图1.7所示的7.3控件</span></span><br><span class="line"><span class="keyword">var</span> plusButton = 6viewView.child(<span class="number">2</span>).child(<span class="number">0</span>);                       <span class="comment">//找到图1.7所示的8.1控件（也就是+号按钮）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//所以，如果一步到位，总结如下：</span></span><br><span class="line"><span class="keyword">var</span> plusButton = moreButton.parent().parent().parent().parent().child(<span class="number">2</span>).child(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//再对+号按钮进行点击</span></span><br><span class="line">plusButton.click();</span><br></pre></td></tr></tbody></table></figure><p> 此处例子里的的两个控件【⋮】按钮(10)和右下角的“+”号按钮(8.1)之间相差了很多层，因此显着有些复杂，在实际情况中，我们往往不需要跨越这么多的层级来确定控件，一般情况下不会那么复杂。实际上，父子关系嵌套两三层往往即可确定出另一控件。最后，在这里需要注意的是，确定控件时要加上“.findone()”，此方法调用后会返回所有符合条件的控件集合。因此，首先要找到一个不容易变化的或容易找的控件“.findone()”后再在此基础上进行“.parent()”“.child(index)”操作找到另一控件。</p><h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><p>当然，基于坐标的操作不仅有click()操作，常用的还有swipe()滑动操作，gesture()手势滑动操作等，具体可查看官方文档，在这里仅对swipe()，gesture()这两个函数进行介绍。</p><p>swipe(x1,y1,x2,y2,time)：(x1,y1)代表起始点坐标，(x2,y2)代表终点坐标，time代表滑动所需要的时间</p><p>//注意：安卓7以下的滑动需要root权限，且函数名变为Swipe(x1,y1,x2,y2,time)</p><p>gesture(time,[x1,y1],[x2,y2],[x3,y3]…)：time同，(x1,y1)是起始点坐标，(x2,y2)是途径点坐标，最后一个坐标是终点</p><p>下面以一个某APP注册时的滑动验证为例(为防止被人恶意利用，在此打上码。再次声明，此处做仅举例用，所有代码仅供学习交流！)，如图2.0所示，当我们输入手机号点击注册时，此时需要将滑块拖动到指定位置处才可以发送验证码从而进行下一步的注册。在这里，我们将想要拖动的滑块称为控件①，想要拖到的目标处称为控件②。那么，如果想要实现一个自动化拖动首先就要确定的是控件①和控件②的坐标，又因为其坐标每次都是随机的，所以只需要根据两个控件的特有属性唯一确定出控件①和控件②，再每次获取其坐标即可。</p><p>通过对两个控件的属性分析，如图2.1所示，我们不难发现，控件①和控件②的indexInParent()不同，因此可通过此分别唯一的定位出两个控件，确定控件后，我们再调用swipe()或gesture()函数来执行滑动，从而实现自动滑动的操作。</p><p>具体实现代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先判断是否进入了"滑动验证"界面</span></span><br><span class="line"><span class="keyword">if</span>(text(<span class="string">"滑动验证"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//判断控件1是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">1</span>).exists())</span><br><span class="line">    {   </span><br><span class="line">        <span class="comment">//控件1存在，获取其坐标bounds()属性</span></span><br><span class="line">        <span class="keyword">var</span> Button1 = className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">1</span>).findOne().bounds();</span><br><span class="line">        sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Button1的坐标为:"</span>+ Button1);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//判断控件2是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">3</span>).exists())</span><br><span class="line">    {</span><br><span class="line"><span class="keyword">var</span> Button2 = className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">3</span>).findOne().bounds();</span><br><span class="line">sleep(<span class="number">500</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Button2的坐标为:"</span>+ Button2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个控件的坐标都获取到后，执行swipe或gesture操作</span></span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//swipe(x1,y1,x2,y2,[time])</span></span><br><span class="line">    swipe(Button1.left, Button1.top, Button2.left, Button2.top, [random(<span class="number">500</span>,<span class="number">1200</span>)]);</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//gesture(time,[x1,y1],[x2,y2])</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Swipe完成！"</span>);</span><br><span class="line">    gesture(random(<span class="number">500</span>,<span class="number">1200</span>), [Button1.left, Button1.top], [Button2.left, Button2.top]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"gesture完成！"</span>);</span><br><span class="line">    <span class="comment">//结束</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>find()函数会找出所有满足条件的控件并返回一个控件集合,之后可以对控件集合进行操作</li></ul><p>var findAssemble = textContains(“2020-07-15”).find();     //找到所有包含”2020-07-15”的控件集合findAssemble </p><ul><li>findone()函数会对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件</li></ul><p>如果找不到控件，当屏幕内容发生变化时会重新寻找，直至找到<br>注意：如果findone不加限制时间且屏幕上一直没有出现所描述的控件，则该函数会阻塞，直到找到为止</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findoneAssem1 = textContains(<span class="string">"2020-07-15"</span>).findone();     <span class="comment">//找到一个包含"2020-07-15"的控件findoneAssem1</span></span><br><span class="line"><span class="keyword">var</span> findoneAssem2 = textContains(<span class="string">"2020-07-15"</span>).findone(<span class="number">500</span>); <span class="comment">//在500毫秒内找到一个包含"2020-07-15"的控件findoneAssem，若找不到，终止搜索返回null</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>findonce(i)函数会根据当前所确定的筛选条件，对屏幕上的控件进行搜索，并返回第 i + 1 个符合条件的控件</p><p>  如果没有找到符合条件的控件，或者符合条件的控件个数 &lt; i, 则返回null</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findonce1 = textContains(<span class="string">"2020-07-15"</span>).findonce(<span class="number">0</span>);     <span class="comment">//搜索第一个包含"2020-07-15"的控件findonce1</span></span><br><span class="line"><span class="keyword">var</span> findonce2 = textContains(<span class="string">"2020-07-15"</span>).findonce(<span class="number">1</span>);     <span class="comment">//搜索第二个包含"2020-07-15"的控件findonce2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="滑动-1"><a href="#滑动-1" class="headerlink" title="滑动"></a>滑动</h2><p>在很多时候，我们经常会见到className名为“.ListView”的控件，实际上其往往是充当装在很多list的集合，以此控件为例，我们可以实现对此控件的上下滑动，</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scrollForward()函数会对控件执行向前滑动的操作，并返回是否操作成功</span></span><br><span class="line"><span class="comment">//scrollBackward()函数会对控件执行向后滑动的操作，并返回是否操作成功</span></span><br><span class="line"><span class="keyword">var</span> listView = ClassName(“ListView”).id(XXX).findone();</span><br><span class="line">ListView.scrollForward();         <span class="comment">//向前滑动</span></span><br><span class="line">ListView.scrollBackward();        <span class="comment">//向后滑动</span></span><br></pre></td></tr></tbody></table></figure><p> 在此只是以“.ListView”的控件进行举例，实际使用过程中，只要控件是可上下滑动的，都可以调用函数“scrollForward()”和“scrollBackward()”来实现对控件的滑动操作。</p><h1 id="基于坐标"><a href="#基于坐标" class="headerlink" title="基于坐标"></a>基于坐标</h1><h2 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h2><p>屏幕坐标系，屏幕左上角为原点（0，0），向右为x轴正向，向下为y轴正向,单位为px</p><h2 id="gestures"><a href="#gestures" class="headerlink" title="gestures"></a>gestures</h2><p>gestures([delay1, duration1, [x1, y1], [x2, y2], …], [delay2, duration2, [x3, y3], [x4, y4], …], …)</p><p>同时模拟多个手势。每个手势的参数为[delay, duration, 坐标], delay为延迟多久(毫秒)才执行该手势；duration为手势执行时长；坐标为手势经过的点的坐标。</p><p>其中delay参数可以省略，默认为0。</p><p>例如手指捏合：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三指下滑截屏</span></span><br><span class="line">gestures(</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">230</span>, <span class="number">452</span>], [<span class="number">230</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">500</span>, <span class="number">452</span>], [<span class="number">500</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">755</span>, <span class="number">452</span>], [<span class="number">755</span>, <span class="number">1000</span>]]</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h2 id="屏幕缩放"><a href="#屏幕缩放" class="headerlink" title="屏幕缩放"></a>屏幕缩放</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serScreenMetrics(width,height)//aj自带屏幕缩放函数</span></span><br><span class="line"><span class="comment">// var h = device.height获取屏幕高度px</span></span><br><span class="line"><span class="comment">// var w = device.width获取屏幕宽度px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕缩放函数 适配多机型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicks</span>(<span class="params">x,y</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//注意,测试机型为1080*2340,你可以根据自己的机型修改</span></span><br><span class="line">x1=device.width/<span class="number">1080</span>   <span class="comment">//屏幕宽度，单位像素</span></span><br><span class="line">y1=device.height/<span class="number">2340</span>   <span class="comment">//屏幕高度，单位像素</span></span><br><span class="line"></span><br><span class="line">click(x*x1,y*y1)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p><a href="https://www.yuque.com/yashujs/bfug6u/mv8e02">https://www.yuque.com/yashujs/bfug6u/mv8e02</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 字段映射</span></span><br><span class="line">      <span class="keyword">let</span> fieldMapping = {</span><br><span class="line">          <span class="string">"id"</span>: <span class="string">"int"</span>,</span><br><span class="line">          <span class="string">"desc"</span>: <span class="string">"String"</span>,</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 表名</span></span><br><span class="line">      <span class="keyword">let</span> table = <span class="string">"record"</span>;</span><br><span class="line">      <span class="comment">// 建表</span></span><br><span class="line">      <span class="keyword">let</span> SQL = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + table+<span class="string">" ("</span></span><br><span class="line">          + <span class="string">"id INTEGER PRIMARY KEY AUTOINCREMENT,"</span></span><br><span class="line">          + <span class="string">"desc VARCHAR(255)"</span></span><br><span class="line">          + <span class="string">")"</span>;</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      <span class="keyword">let</span> db = <span class="string">"xianyu"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> dbUtils = <span class="keyword">new</span> DbUtils(db, SQL, fieldMapping);</span><br><span class="line">      <span class="comment">// 创建数据库和表</span></span><br><span class="line">      dbUtils.updateDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清表</span></span><br><span class="line">dbUtils.deleteRows(table, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据查询</span></span><br><span class="line">      <span class="keyword">let</span> existStatus = dbUtils.isExistRow(<span class="string">"SELECT * FROM  "</span> + table + <span class="string">"  WHERE desc = ?"</span>, [text]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加数据</span></span><br><span class="line">dbUtils.addRow(table, { <span class="attr">desc</span>: text });</span><br></pre></td></tr></tbody></table></figure><h1 id="图片与颜色"><a href="#图片与颜色" class="headerlink" title="图片与颜色"></a>图片与颜色</h1><p><a href="https://www.yuque.com/yashujs/bfug6u/gws4dp">autojs之内存泄露</a><br><a href="https://gitee.com/yiszza/ScriptGraphicHelper#https://gitee.com/yiszza/ScriptGraphicHelper/releases">图色助手下载</a><br><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">RGB颜色值与十六进制颜色码转换工具</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 彩图转灰度图</span></span><br><span class="line">images.cvtColor(img, <span class="string">"RGBA2GRAY"</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>2. 及时回收图片</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">events.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (bigImg &amp;&amp; !bigImg.isRecycled()) {</span><br><span class="line">    bigImg.recycle();</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (smallImg &amp;&amp; !smallImg.isRecycled()) {</span><br><span class="line">    smallImg.recycle();</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="截图"><a href="#截图" class="headerlink" title="截图"></a>截图</h2><p>images.captureScreen()<br>截取当前屏幕并返回一个Image对象。</p><p>images.captureScreen(path)<br>path {string} 截图保存路径<br>截取当前屏幕并以PNG格式保存到path中。如果文件不存在会被创建；文件存在会被覆盖。</p><p>该函数不会返回任何值。该函数也可以作为全局函数使用。</p><h2 id="colors模块"><a href="#colors模块" class="headerlink" title="colors模块"></a>colors模块</h2><p><a href="http://www.gjw123.com/tools-rgbcolor">颜色在线转换</a><br><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">https://www.sioe.cn/yingyong/yanse-rgb-16/</a></p><p>在Auto.js有两种方式表示一个颜色。</p><h3 id="颜色字符串"><a href="#颜色字符串" class="headerlink" title="颜色字符串"></a>颜色字符串</h3><p>colors.toString(整数RGB颜色值)<br>参数 {number} 整数RGB颜色值<br>返回 {string}颜色值的字符串，格式为 “#AARRGGBB”。</p><h3 id="颜色整数"><a href="#颜色整数" class="headerlink" title="颜色整数"></a>颜色整数</h3><p>使用一个16进制的”32位整数” 0xAARRGGBB 来表示一个颜色</p><p>colors.parseColor(颜色的字符串)<br>参数 {string} 表示颜色的字符串，例如”#112233”<br>返回 {number}颜色的整数值。</p><h1 id="Autojs-本地验证（一机一码）"><a href="#Autojs-本地验证（一机一码）" class="headerlink" title="Autojs 本地验证（一机一码）"></a>Autojs 本地验证（一机一码）</h1><h2 id="1、一机一码的实现原理"><a href="#1、一机一码的实现原理" class="headerlink" title="1、一机一码的实现原理"></a>1、一机一码的实现原理</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">机器码：设备的唯一标识</span><br><span class="line"></span><br><span class="line">注册机：用于激活设备，生成激活码。</span><br><span class="line"></span><br><span class="line">激活码：用于激活设备</span><br></pre></td></tr></tbody></table></figure><h2 id="2、一机一码UI界面的开发"><a href="#2、一机一码UI界面的开发" class="headerlink" title="2、一机一码UI界面的开发"></a>2、一机一码UI界面的开发</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"activationCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"激活"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    alert(<span class="string">'激活成功！'</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="3、注册机UI界面的开发"><a href="#3、注册机UI界面的开发" class="headerlink" title="3、注册机UI界面的开发"></a>3、注册机UI界面的开发</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"生成激活码"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span> <span class="attr">textColor</span>=<span class="string">"red"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">'activationCode'</span> <span class="attr">text</span>=<span class="string">'未生成'</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    ui.activationCode.setText(<span class="string">'123456'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="4、获取手机唯一标识"><a href="#4、获取手机唯一标识" class="headerlink" title="4、获取手机唯一标识"></a>4、获取手机唯一标识</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var uuid = device.fingerprint;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imei = device.getIMEI()</span><br><span class="line"></span><br><span class="line">toast(imei)</span><br></pre></td></tr></tbody></table></figure><h2 id="5、完成第一个脚本注册机验证"><a href="#5、完成第一个脚本注册机验证" class="headerlink" title="5、完成第一个脚本注册机验证"></a>5、完成第一个脚本注册机验证</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">脚本端</span><br><span class="line"></span><br><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span> <span class="attr">text</span>=<span class="string">''</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"activationCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"激活"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uuid = device.fingerprint;</span><br><span class="line"></span><br><span class="line">ui.machineCode.setText(uuid)</span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取算法得到的值</span></span><br><span class="line">    <span class="keyword">var</span> res = ui.machineCode.text() +<span class="string">"aaa"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// log(typeof(ui.activationCode.text()))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// log(typeof(res.toString()))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ui.activationCode.text() === res.toString()){</span><br><span class="line">        alert(<span class="string">'激活成功！'</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        alert(<span class="string">'激活失败！'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alert('激活成功！');</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注册机端</span><br><span class="line"></span><br><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"生成激活码"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span> <span class="attr">textColor</span>=<span class="string">"red"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">'activationCode'</span> <span class="attr">text</span>=<span class="string">'未生成'</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//算法是  uuid+"aaa" </span></span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> machineCode = ui.machineCode.text();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> activationCode = machineCode + <span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// toast(activationCode)</span></span><br><span class="line"></span><br><span class="line">    ui.activationCode.setText(activationCode.toString())</span><br><span class="line"></span><br><span class="line">    setClip(activationCode.toString())</span><br><span class="line"></span><br><span class="line">    toast(<span class="string">'激活码已复制'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="6、对手机唯一标识符进行加密"><a href="#6、对手机唯一标识符进行加密" class="headerlink" title="6、对手机唯一标识符进行加密"></a>6、对手机唯一标识符进行加密</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">string</span>)</span>{</span><br><span class="line"><span class="keyword">var</span> res=java.math.BigInteger(<span class="number">1</span>,java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>).digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">while</span>(res.length&lt;<span class="number">32</span>)res=<span class="string">"0"</span>+res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7、增加时间验证"><a href="#7、增加时间验证" class="headerlink" title="7、增加时间验证"></a>7、增加时间验证</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//格式化时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">thisDate, fmt</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> o = {</span><br><span class="line">        <span class="string">"M+"</span>: thisDate.getMonth() + <span class="number">1</span>,</span><br><span class="line">        <span class="string">"d+"</span>: thisDate.getDate(),</span><br><span class="line">        <span class="string">"h+"</span>: thisDate.getHours(),</span><br><span class="line">        <span class="string">"m+"</span>: thisDate.getMinutes(),</span><br><span class="line">        <span class="string">"s+"</span>: thisDate.getSeconds(),</span><br><span class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((thisDate.getMonth() + <span class="number">3</span>) / <span class="number">3</span>),</span><br><span class="line">        <span class="string">"S"</span>: thisDate.getMilliseconds()</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt))</span><br><span class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$1, (thisDate.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$1.length));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt))</span><br><span class="line">            fmt = fmt.replace(<span class="built_in">RegExp</span>.$1, (<span class="built_in">RegExp</span>.$1.length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="8、增加时间验证（二）"><a href="#8、增加时间验证（二）" class="headerlink" title="8、增加时间验证（二）"></a>8、增加时间验证（二）</h2><h2 id="9、开发日卡、月卡、年卡功能"><a href="#9、开发日卡、月卡、年卡功能" class="headerlink" title="9、开发日卡、月卡、年卡功能"></a>9、开发日卡、月卡、年卡功能</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;horizontal&gt;</span><br><span class="line">    &lt;text textSize="16sp"&gt;充值类型&lt;/text&gt;</span><br><span class="line">    &lt;spinner id="sp1" entries="月卡|年卡" textColor="red"/&gt;</span><br><span class="line">&lt;/horizontal&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui.sp1.getSelectedItemPosition();</span><br></pre></td></tr></tbody></table></figure><h2 id="10、激活码限制脚本运行"><a href="#10、激活码限制脚本运行" class="headerlink" title="10、激活码限制脚本运行"></a>10、激活码限制脚本运行</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validTime</span>(<span class="params">ntime</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (toTime() &lt; ntime || IntTime() &lt; ntime) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>).format(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IntTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">var</span> recode_suning = http.get(<span class="string">"http://quan.suning.com/getSysTime.do"</span>);</span><br><span class="line">        <span class="keyword">var</span> suningTime = recode_suning.body.json();</span><br><span class="line">        <span class="keyword">return</span> suningTime.sysTime1;</span><br><span class="line">    } <span class="keyword">catch</span> (e) {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11、保存激活状态到本地"><a href="#11、保存激活状态到本地" class="headerlink" title="11、保存激活状态到本地"></a>11、保存激活状态到本地</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var storage = storages.create('activation');</span><br></pre></td></tr></tbody></table></figure><h2 id="12、解决时间验证bug方法"><a href="#12、解决时间验证bug方法" class="headerlink" title="12、解决时间验证bug方法"></a>12、解决时间验证bug方法</h2><h2 id="13、完善激活码交互逻辑"><a href="#13、完善激活码交互逻辑" class="headerlink" title="13、完善激活码交互逻辑"></a>13、完善激活码交互逻辑</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build({</span><br><span class="line">        <span class="attr">title</span>: <span class="string">"机器码："</span>,</span><br><span class="line">        <span class="attr">content</span>: uuid,</span><br><span class="line">        <span class="attr">negative</span>: <span class="string">"输入激活码"</span>,</span><br><span class="line">        <span class="attr">positive</span>: <span class="string">"复制机器码"</span></span><br><span class="line">    }).on(<span class="string">"positive"</span>, <span class="function">()=&gt;</span>{</span><br><span class="line">      setClip(uuid);</span><br><span class="line">      toast(<span class="string">"机器码已复制"</span>);</span><br><span class="line">    }).on(<span class="string">"negative"</span>, <span class="function">()=&gt;</span>{</span><br><span class="line">        rawInput(<span class="string">"请输入激活码"</span>, <span class="string">""</span>, 激活码 =&gt; {</span><br><span class="line">            </span><br><span class="line">       });</span><br><span class="line">    }).show();</span><br></pre></td></tr></tbody></table></figure><h2 id="14、封装验证激活码函数-一"><a href="#14、封装验证激活码函数-一" class="headerlink" title="14、封装验证激活码函数(一)"></a>14、封装验证激活码函数(一)</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//验证激活码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params">uuid,activation</span>)</span>{</span><br><span class="line">    <span class="comment">//取算法得到的值</span></span><br><span class="line">    <span class="keyword">var</span> res = uuid +<span class="string">"aaa"</span>;</span><br><span class="line">    <span class="comment">//解密激活码</span></span><br><span class="line">    <span class="keyword">var</span> res2 = activation.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> activationCode = res2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> timestamp = res2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取未来的格式化时间</span></span><br><span class="line">    <span class="keyword">var</span> timestamp2 = dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">"yyyyMMddhhmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(activationCode === res.toString() &amp;&amp; validTime(timestamp2)){</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15、封装验证激活码函数-二"><a href="#15、封装验证激活码函数-二" class="headerlink" title="15、封装验证激活码函数(二)"></a>15、封装验证激活码函数(二)</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证激活码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params">uuid,activation</span>)</span>{</span><br><span class="line">    <span class="comment">//取算法得到的值</span></span><br><span class="line">    <span class="keyword">var</span> res = uuid +<span class="string">"aaa"</span>;</span><br><span class="line">    <span class="comment">//解密激活码</span></span><br><span class="line">    <span class="keyword">var</span> res2 = activation.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> activationCode = res2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> timestamp = res2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取未来的格式化时间</span></span><br><span class="line">    <span class="keyword">var</span> timestamp2 = dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">"yyyyMMddhhmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(activationCode === res.toString()){</span><br><span class="line">        <span class="keyword">if</span>(validTime(timestamp2)){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="16、封装注册机加密函数"><a href="#16、封装注册机加密函数" class="headerlink" title="16、封装注册机加密函数"></a>16、封装注册机加密函数</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">machineCode,timestamp</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> activationCode = machineCode + <span class="string">'aaa&amp;'</span>+timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> activationCode;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="17、升级加密复杂度（一）"><a href="#17、升级加密复杂度（一）" class="headerlink" title="17、升级加密复杂度（一）"></a>17、升级加密复杂度（一）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 加密字符串<span class="number">1</span> = md5(uuid+timestamp);</span><br><span class="line"><span class="keyword">var</span> 加密时间 = ((timestamp-<span class="number">0</span>+<span class="number">10000</span>)*<span class="number">903</span>)/<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">var</span> 加密字符串<span class="number">2</span> = md5((md5(<span class="string">"litikj"</span> +加密字符串<span class="number">1</span> +<span class="string">"litikj"</span>)+<span class="string">"litikj"</span>) +加密时间 +md5(uuid)+<span class="string">"112233"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 激活码 = 加密字符串<span class="number">1</span>+<span class="string">"&amp;"</span>+加密时间+<span class="string">"&amp;"</span>+加密字符串<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="18、升级加密复杂度（二）"><a href="#18、升级加密复杂度（二）" class="headerlink" title="18、升级加密复杂度（二）"></a>18、升级加密复杂度（二）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证激活码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params">uuid,activation</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> codeArr = activation.split(<span class="string">"&amp;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str1 = codeArr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encryptTime = codeArr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str2 = codeArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timestamp = (<span class="built_in">Number</span>(encryptTime) * <span class="number">100000</span>) / <span class="number">903</span> -<span class="number">10000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//格式化时间</span></span><br><span class="line">    <span class="keyword">var</span> timestamp2 = dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">"yyyyMMddhhmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断激活码是否有效</span></span><br><span class="line">    <span class="keyword">if</span>(str1 === md5(uuid+timestamp) &amp;&amp; str2 === md5((md5(<span class="string">"litikj"</span> +md5(uuid+timestamp) +<span class="string">"litikj"</span>)+<span class="string">"litikj"</span>) +encryptTime +md5(uuid)+<span class="string">"112233"</span>)){</span><br><span class="line">        <span class="comment">//算法一样</span></span><br><span class="line">        <span class="keyword">if</span>(validTime(timestamp2)){</span><br><span class="line">            <span class="comment">//时间正常</span></span><br><span class="line">            ui.end.setText(<span class="string">'到期时间:'</span>);</span><br><span class="line">            ui.time.setText(dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">'yyyy年MM月dd日 hh:mm:ss'</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="comment">//时间过期</span></span><br><span class="line">            ui.end.setText(<span class="string">'时间过期:'</span>);</span><br><span class="line">            ui.time.setText(dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">'yyyy年MM月dd日 hh:mm:ss'</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">//算法不一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="19、增加运行脚本时的验证方法"><a href="#19、增加运行脚本时的验证方法" class="headerlink" title="19、增加运行脚本时的验证方法"></a>19、增加运行脚本时的验证方法</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(storage.get(<span class="string">'activation'</span>)){</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> res = validateCode(uuid,storage.get(<span class="string">'activation'</span>))</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">switch</span>(res){</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    scriptStatus = <span class="literal">false</span>; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    scriptStatus = <span class="literal">true</span>; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    scriptStatus = <span class="literal">false</span>;    </span><br><span class="line">                    <span class="keyword">break</span>;         </span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="20、给脚本添加一机一码功能（一）"><a href="#20、给脚本添加一机一码功能（一）" class="headerlink" title="20、给脚本添加一机一码功能（一）"></a>20、给脚本添加一机一码功能（一）</h2><h2 id="21、给脚本添加一机一码功能（二）"><a href="#21、给脚本添加一机一码功能（二）" class="headerlink" title="21、给脚本添加一机一码功能（二）"></a>21、给脚本添加一机一码功能（二）</h2><h1 id="如何写游戏脚本"><a href="#如何写游戏脚本" class="headerlink" title="如何写游戏脚本"></a>如何写游戏脚本</h1><h2 id="触摸模拟"><a href="#触摸模拟" class="headerlink" title="触摸模拟"></a>触摸模拟</h2><ul><li><p><code>sleep(n)</code>：暂停运行n毫秒，游戏脚本中最常出现的一个命令；有一些操作必须给它一定的缓冲时间才能正确运行完成。</p></li><li><p>随机数： <code>random(min,max)</code>指定区间、<code>random()</code>范围是[0,1)；点击坐标时常设置一个随机偏移，防止被检测到（每次都点同一个点还是太明显了）</p></li><li><p>分辨率适配问题，<code>setScreenMetrics(1080, 1920);</code>、表示脚本适合的屏幕宽高为1080x1920（编脚本时基于的设备），如果在别的分辨率手机上运行则会自动放缩光标。听上去很好的一个功能，一般游戏脚本必加这一行，但具体效果如何我没有测试过。</p></li><li><p><code>click(x,y)</code>：点击坐标（无需root权限），返回是否成功，点击过程大约150ms，可能被其他事件中断。更长时间的点击如<code>longClick(x,y)</code>、持续600ms。</p></li><li><p><code>press(x,y,duartion)</code>：按住坐标，一般超过500ms才被系统认为是长按。</p></li><li><p><code>swipe(x1,y1,x2,y2,duration)</code>： 从(x1,y1)滑动到(x2,y2)，持续duration。</p></li><li><p><code>RootAutomator</code><br>  上面的几个触摸操作都是免root的，而基于RootAutomator对象的触摸需要root权限，优点是执行没有延迟，明显比click要快。</p></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var ra=new RootAutomator(); //初始化一个对象</span><br><span class="line">ra.tap(x,y,id); //id代表不同“手指”，用于多点触摸，不需要时可省略该参数</span><br><span class="line">ra.swipe(x1,y1,x2,y2,duration,id)</span><br><span class="line">ra.press(x,y,duration,id)</span><br><span class="line">// 这些命令组合在一起就能完成复杂的操作了~</span><br><span class="line">ra.touchDown(x,y,id)</span><br><span class="line">ra.touchMove(x,y,id)</span><br><span class="line">ra.touchUp(id)</span><br></pre></td></tr></tbody></table></figure><ul><li>模拟按键；（返回bool值）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(back()){};    <span class="comment">//按下返回键</span></span><br><span class="line">home()  <span class="comment">//返回桌面</span></span><br><span class="line">还有一些需要root权限的，开头字母大写:</span><br><span class="line"><span class="comment">//Home()、Back()、Power()、Menu()、OK()、KeyCode()...</span></span><br></pre></td></tr></tbody></table></figure><h2 id="colors"><a href="#colors" class="headerlink" title="colors"></a>colors</h2><p>颜色常用十六进制值或RGB值来表示，如蓝色可表示为<code>#0000FF</code>或<code>(0,0,255)</code>，一般都是<code>#</code>后面带6位十六进制数，分别表示R、G、B，但Autojs是8位，前面多了一个<code>A(Alpha)</code>、表示透明度，即ARGB。</p><ul><li>Autojs通过一个16进制整数或一个字符串表示一个颜色，两者可以互相转换</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBlue=colors.toString(color.BLUE); <span class="comment">//返回#ff0000ff,colors.BLUE代表蓝色，后面必须大写。</span></span><br><span class="line"><span class="keyword">var</span> numBlue=colors.parseColor(<span class="string">"#ff0000ff"</span>); <span class="comment">//返回-16776961,至于为什么是这个数我也不清楚，平时还是用字符串表示比较好。</span></span><br></pre></td></tr></tbody></table></figure><ul><li>colors对象里还有一些判断两个颜色的相似度、返回A、R、G、B通道值的函数，平时也基本上用不上；颜色的用途主要体现在后面的多点找色上。</li></ul><h2 id="images"><a href="#images" class="headerlink" title="images"></a>images</h2><p>游戏脚本的灵魂所在，images主要有图片处理、找图、找色几个部分；想让脚本识别游戏的某个区域、如果该区域的位置是固定的，通过构造多点比色比较快，而如果位置不固定则常用找图的方式，虽然占用资源比较多但准确性有保障。</p><ul><li>images对象使用完后必须回收，防止内存泄漏。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img=images.read(<span class="string">"./name.png"</span>);  <span class="comment">//读取图片，错误时返回null</span></span><br><span class="line"><span class="comment">//var img=images.load(url); //从网址获取图片</span></span><br><span class="line"><span class="comment">//...图片操作后回收</span></span><br><span class="line">img.recycle();</span><br><span class="line"><span class="comment">// 例外：captureScreen()返回的图片无需回收</span></span><br></pre></td></tr></tbody></table></figure><ul><li>mages对象能对图像进行复制、保存、Base64编码解码、剪切、调整大小、放缩、旋转、拼接、灰度化、阈值化、颜色控件转换、二值化、模糊与平滑处理、滤波…（强是很强大，就是基本上用不上）</li><li>获取截图权限：在找图找色之前往往要先获取当前屏幕的截图，这个截图一般是临时的、不会保存到文件（也可以设置保存）。 截图之前要向系统<strong>申请一次</strong>截图权限：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!requestScreenCapture()){    <span class="comment">//可指定参数true（横屏截图） 或者 false（竖屏截图）</span></span><br><span class="line">    toast(<span class="string">"请求截图失败"</span>);</span><br><span class="line">    exit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>请求截图: <code>captureScreen</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在此之前记住要请求一次截图权限</span></span><br><span class="line"><span class="keyword">var</span> img=captureScreen();    <span class="comment">//可以指定保存路径path</span></span><br></pre></td></tr></tbody></table></figure><ul><li>颜色获取，很重要的一个函数，后面多点找色时可以先用它获取参数值。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某点的ARGB颜色值</span></span><br><span class="line"><span class="keyword">var</span> color=images.pixel(img,<span class="number">100</span>,<span class="number">200</span>);    <span class="comment">//img是之前创建的images对象</span></span><br></pre></td></tr></tbody></table></figure><ul><li>区域找色（一种颜色）；<code>findColor</code>、<code>findColorInRegion</code>、<code>findColorEquals</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先说下region和threshold这两个参数，后面的找色函数options里都要用到：</span></span><br><span class="line"><span class="comment">//region、找色区域，默认全图、指定[x,y]代表左上角点，从(x,y)到右下角；指定[x,y,width,height]则代表从(x,y)到(x+width,y+height)。</span></span><br><span class="line"><span class="comment">//threshold、相似度临界值，0~255，默认为4；similarity=1-threshold/255，可以算出默认相似度达到了0.98，觉得太严了可以适当增大threshold</span></span><br><span class="line"><span class="keyword">var</span> point = images.findColor(img, <span class="string">"#ff0000"</span>, { <span class="attr">region</span>: [<span class="number">100</span>, <span class="number">200</span>], <span class="attr">threshold</span>: <span class="number">10</span> });</span><br><span class="line"><span class="comment">//如果找到则返回一个点，如：{463.0, 1242.0}；找不到返回null。</span></span><br><span class="line"><span class="comment">//这里颜色值是6位，8位也行不过会忽略A通道（透明度）。</span></span><br><span class="line"><span class="comment">// findColorInRegion，功能和findColor一样，只是优化了下参数表示。</span></span><br><span class="line"><span class="keyword">var</span> point=images.findColorInRegion(img,<span class="string">"#ff0000"</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">1080</span>,<span class="number">1920</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">// findColorEquals，要求颜色完全相等，相当于findColor的threshold参数设为0</span></span><br><span class="line"><span class="keyword">var</span> point=images.findColorEquals(img,<span class="string">"#ff0000"</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">1080</span>,<span class="number">1920</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>多点找色：<code>findMultiColors</code>，先定位第一个点的颜色、根据(x,y)偏移获取并对比第二个点的颜色…以此类推，命令很麻烦，通常需要写一个函数来构造颜色列。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = images.findMultiColors(img, <span class="string">"#ff949fc7"</span>,    <span class="comment">//第一个点</span></span><br><span class="line">    [[<span class="number">60</span>, <span class="number">60</span>, <span class="string">"#ffe6efe6"</span>], <span class="comment">//颜色Array，</span></span><br><span class="line">    [<span class="number">60</span>, -<span class="number">60</span>, <span class="string">"#ffeef3e6"</span>],</span><br><span class="line">    [-<span class="number">60</span>, <span class="number">60</span>, <span class="string">"#ffe6efe6"</span>],</span><br><span class="line">    [-<span class="number">60</span>, -<span class="number">60</span>, <span class="string">"#ffeef3e6"</span>]],</span><br><span class="line">    { <span class="attr">region</span>: [<span class="number">1548</span>, <span class="number">803</span>, <span class="number">140</span>, <span class="number">140</span>] })  <span class="comment">//指定区域</span></span><br></pre></td></tr></tbody></table></figure><ul><li>检测某坐标颜色：前几个命令都是根据颜色找坐标，这个是给坐标、比较颜色</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(images.detectsColor(img,<span class="string">"#fed9a8"</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="string">"diff"</span>)){}</span><br><span class="line"><span class="comment">//最后两个参数可省略，代表threshold和匹配算法；x=100,y=200</span></span><br></pre></td></tr></tbody></table></figure><ul><li>找图：有时候找颜色会匹配到一些奇怪的地方去，还得用找图来实现，有<code>images.findImage</code>、<code>images.findImageInRegion</code>、<code>images.matchTemplate</code>。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp1=images.read(pathToImage);</span><br><span class="line"><span class="keyword">var</span> point=images.findImage(img,temp1,{ <span class="attr">region</span>: [<span class="number">100</span>, <span class="number">200</span>], <span class="attr">threshold</span>: <span class="number">10</span> });</span><br><span class="line"><span class="comment">//同样findImageInRegion只是优化了下参数排列</span></span><br><span class="line"><span class="comment">//matchTemplate可以同时返回找到的多个位置，通过max控制最大的结果数量</span></span><br><span class="line"><span class="keyword">var</span> result=images.matchTemplate(img,temp1,{ <span class="attr">region</span>: [<span class="number">100</span>, <span class="number">200</span>], <span class="attr">threshold</span>: <span class="number">10</span> ,<span class="attr">max</span>:<span class="number">5</span>});</span><br><span class="line"><span class="comment">//返回类型是一个MatchingResult对象，有point和similarity这两个数据成员。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="脚本结构管理"><a href="#脚本结构管理" class="headerlink" title="脚本结构管理"></a>脚本结构管理</h2><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>在一个文件里通过<code>module.exports =...;</code>把某个对象导出，从而可以在另一个文件通过<code>var name=require('file.js');</code>导入；相当于把整个文件当做一个函数，把exports的东西当做返回值。感觉用起来也不太方便，我选择不用这个功能。</p><h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><ul><li>启动一个子线程，<code>threads.start</code>：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动一个无限循环的线程</span></span><br><span class="line"><span class="keyword">var</span> thread = threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{  <span class="comment">//用thread对象可以控制线程运行状态，如果不需要操作可以改为：</span></span><br><span class="line"><span class="comment">//threads.start(function(){</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">        log(<span class="string">"子线程运行中..."</span>);</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">sleep(<span class="number">5000</span>);</span><br><span class="line">thread.interrupt();</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>threads.shutDownAll()</code>： 停止所有通过<code>threads.start()</code>启动的子线程</p></li><li><p>等待线程开始执行（一般start后需要一段时间）：<code>thread.waitFor();</code>（这里thread是前面创建的thread变量）</p></li><li><p>等待线程执行完成：<code>thread.join();</code>，参数可以指定一个等待时间</p></li><li><p>中断线程运行：<code>thread.interrupt();</code></p></li><li><p>注意多线程中的变量问题，涉及到<strong>线程安全</strong>，文档里说的很详细</p></li><li><p>线程间的通信与传递变量，通过<code>var connect = threads.disposable();</code>实现；发送结果：<code>connect.setAndNotify(s);</code>，接收结果：<code>connect.blockedGet(s);</code></p></li></ul><h2 id="交互界面"><a href="#交互界面" class="headerlink" title="交互界面"></a>交互界面</h2><h3 id="Events、Dialogs、Console"><a href="#Events、Dialogs、Console" class="headerlink" title="Events、Dialogs、Console"></a>Events、Dialogs、Console</h3><ul><li>Events模块主要用来监听按键、触摸、通知等，但放在单线程里可能会因为程序其他部分而无法及时执行，造成非预期的结果，常常和多线程<code>Threads</code>模块一起使用，如音量键关闭脚本的例子：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line">threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ <span class="comment">//在子线程中调用observeKey()从而使按键事件处理在子线程执行</span></span><br><span class="line">    events.observeKey();    <span class="comment">//启用按键监听</span></span><br><span class="line">    events.on(<span class="string">"key_down"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">keyCode, events</span>)</span>{</span><br><span class="line">    <span class="comment">//常用事件有key、key_down、key_up、exit、toast、notification、touch(触摸某点)</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == keys.volume_up){  <span class="comment">//音量上键关闭脚本</span></span><br><span class="line">            exit();</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line">events.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{   <span class="comment">//脚本停止运行时会触发exit事件</span></span><br><span class="line">    toast(<span class="string">"脚本已结束"</span>);</span><br><span class="line">});</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">    log(<span class="string">"脚本运行中..."</span>);</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Dialogs</li></ul><p>这部分提供对话框支持，但由于是弹出一个全屏的消息提示框，实际体验是并不太能用上；如果脚本和用户的交互性比较强的话可以考虑一下。</p><ul><li>Console</li></ul><p>控制台的作用更像是用于调试，但一般Windows下用VSCode写脚本也不需要在控制台上显示吧，所以这部分给人的感觉也是很鸡肋…不过<code>console</code>的UI是固定的，也可以悬浮、最小化；有时不想设计UI的时候可以偷懒直接拿<code>console</code>过来凑合用用。</p><h3 id="Floaty、UI"><a href="#Floaty、UI" class="headerlink" title="Floaty、UI"></a>Floaty、UI</h3><p>界面设计这部分内容相当多，而且官方文档也有很多写得很简略（甚至一笔带过），要想真正从零开始设计出一个实用好看的UI出来还是有难度的；我是建议去网上多找几个模板文件运行运行，在别人的基础上修改起来就快多了，看不懂的地方再去翻翻文档解决。一般UI设计好后再和程序一对接（通过UI各组件的id），就可以打包做成apk了~</p><h1 id="写一个注册机"><a href="#写一个注册机" class="headerlink" title="写一个注册机"></a>写一个注册机</h1><p>实战加密解密</p><p>我们再测试下解密 看能不能解开 </p><p>唯一 = device.getIMEI()</p><p>我们来回忆一下：</p><p>加密1 加密2——-固定加密</p><p>加密3 ————随机加密</p><p>解密2  解密3——解密使用</p><p>开始加密，可以用 加密2 加密3，随便用，都可以</p><p>但是你需要记住 加密的次数和加密顺序</p><p>——-3次——-加密2——–加密2——–加密3</p><p>看结果</p><p>?wv1%yv%4rv%0v%S0v%7vJ%5v%8Sw%3w%Uxw%9vW%vv%55v%yy%7j5</p><p>我们在我们自己的脚本中，开始写解密，相反的顺序</p><p>———-解密3———解密2——–解密2——3次—-</p><p>得到</p><p>358811051254785</p><p>我们测试下 运行 这个函数 </p><p>358811051254785</p><p>完美了，继续</p><p>运行到这里了 我们可以得到  一个   “加密结果3”</p><p>需要让对方把这个值 发给我们 这样操作</p><p>setClip(加密结果3);</p><p>toast (“已经复制到右键了，请发给我”);</p><p>演示一下，运行一下，他发给我们的是这个</p><p>?wvl%yv%4gv%0v%p0v%7vr%5v%8Hw%3w%dxw%9vk%vv%5hv%yy%7j5</p><p>说明，我们的方法是对的。继续</p><p>对方发给我们之后 我们运行解密 结果也出来了。</p><p>还是这个数字。358811051254785。那当然还是它了。</p><p>那么，我们就这样，什么也不干就发给他吗？？？<br>不，，，，，，，，稍微有点常识的看一眼都知道，这可能就是手机的某个参数。</p><p>这时候，有小白就会问了，这不是没有意义吗？！错。大错特错。<br>你看看对方发给我们的是什么，每次都不一样，他也迷糊，是吧。<br>。。。。。。我们可以把提示代码抹去，虽然他每次都复制了，但是对方不知道呀，嘿嘿。你只需要第一次告诉对方，复制右键发给我们。嘿嘿。</p><p>为了彻底迷惑对方，我们再继续对“唯一”进行多次混合加密。这里必须用固定加密。。嘿嘿。</p><p>我们在我们自己的脚本中，也复制一模一样的，运行，</p><p>得到 “加密结果10”—-这个就是我们要发给对方的验证码了</p><p>最后，我们把代码完善下，能删除的log都删了</p><p>ok了</p><p>需要特别说明的 就是 你发给对方的脚本中 只能有加密函数<br>别傻了胡痴地 把解密函数 也给对方发过去。嘿嘿。</p><p>这个只是在脚本上加密解密。还有网络加密解密。如果，有感兴趣的，以后可以出一个教程。非常简单的。因为网站都已经给我们现成的auto.js封装好的啊。只需要随便改一点点东西，就可以使用了。</p><p>代码发到下面了</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(auto.service==<span class="literal">null</span>){auto.waitFor();};</span><br><span class="line">sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">唯一 = device.getIMEI()</span><br><span class="line"></span><br><span class="line">加密结果<span class="number">1</span> = 加密<span class="number">2</span>(唯一)</span><br><span class="line">加密结果<span class="number">2</span> = 加密<span class="number">2</span>(加密结果<span class="number">1</span>)</span><br><span class="line">加密结果<span class="number">3</span> = 加密<span class="number">3</span>(加密结果<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">setClip(加密结果<span class="number">3</span>);</span><br><span class="line"><span class="comment">//toast ("已经复制到右键了，请发给我");</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">90000</span>)</span><br><span class="line"></span><br><span class="line">加密结果<span class="number">4</span> = 加密<span class="number">2</span>(唯一)</span><br><span class="line">加密结果<span class="number">5</span> = 加密<span class="number">2</span>(加密结果<span class="number">4</span>)</span><br><span class="line">加密结果<span class="number">6</span> = 加密<span class="number">1</span>(加密结果<span class="number">5</span>)</span><br><span class="line">加密结果<span class="number">7</span> = 加密<span class="number">1</span>(加密结果<span class="number">6</span>)</span><br><span class="line">加密结果<span class="number">8</span> = 加密<span class="number">2</span>(加密结果<span class="number">7</span>)</span><br><span class="line">加密结果<span class="number">9</span> = 加密<span class="number">1</span>(加密结果<span class="number">8</span>)</span><br><span class="line">加密结果<span class="number">10</span> = 加密<span class="number">2</span>(加密结果<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 对方输入框里的 = rawInput(<span class="string">"请输入验证码"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (对方输入框里的 == 加密结果<span class="number">10</span>) {</span><br><span class="line">    log(<span class="string">"验证码正确"</span>)</span><br><span class="line">    <span class="comment">//开始干活喽</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    log(<span class="string">"验证码错误"</span>);</span><br><span class="line">    exit();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密1(<span class="params">string</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> java.math.BigInteger(<span class="number">1</span>, java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>)</span><br><span class="line">        .digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密2(<span class="params">code</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">String</span>.fromCharCode(code.charCodeAt(<span class="number">0</span>) + code.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; code.length; i++) {</span><br><span class="line">        c += <span class="built_in">String</span>.fromCharCode(code.charCodeAt(i) + code.charCodeAt(i - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">escape</span>(c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密3(<span class="params">stringW</span>) </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str = stringW + <span class="string">"?"</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ranWs = random(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) {</span><br><span class="line">        str1 = str1 + str[i];</span><br><span class="line">        <span class="keyword">if</span> (i % ranWs == <span class="number">0</span>) {</span><br><span class="line">            str1 = str1 + ranLetter();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    log(str1)</span><br><span class="line">    str1 = ranWs + str1;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    str1 = str1.split(<span class="string">""</span>).reverse();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; str1.length; x++) {</span><br><span class="line">        str1[x] = charDh(str1[x]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str1.join(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ranLetter</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>];</span><br><span class="line">    <span class="keyword">var</span> ran = random(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ran == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> random(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (ran == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)].toUpperCase();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">charDh</span>(<span class="params">cha</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>, <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> jw = <span class="number">0</span>; jw &lt; arr.length; jw++) {</span><br><span class="line">        <span class="keyword">if</span> (cha == arr[jw]) {</span><br><span class="line">            <span class="keyword">return</span> arr[arr.length - <span class="number">1</span> - jw];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cha;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">解密结果<span class="number">3</span> = 解密<span class="number">3</span>(b)</span><br><span class="line"></span><br><span class="line">解密结果<span class="number">2</span> = 解密<span class="number">2</span>(解密结果<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">解密结果<span class="number">1</span> = 解密<span class="number">2</span>(解密结果<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//log(解密结果1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解密结果1  就是对方手机的IMEI 也就是“唯一”</span></span><br><span class="line"></span><br><span class="line">加密结果<span class="number">4</span> = 加密<span class="number">2</span>(解密结果<span class="number">1</span>)</span><br><span class="line">加密结果<span class="number">5</span> = 加密<span class="number">2</span>(加密结果<span class="number">4</span>)</span><br><span class="line">加密结果<span class="number">6</span> = 加密<span class="number">1</span>(加密结果<span class="number">5</span>)</span><br><span class="line">加密结果<span class="number">7</span> = 加密<span class="number">1</span>(加密结果<span class="number">6</span>)</span><br><span class="line">加密结果<span class="number">8</span> = 加密<span class="number">2</span>(加密结果<span class="number">7</span>)</span><br><span class="line">加密结果<span class="number">9</span> = 加密<span class="number">1</span>(加密结果<span class="number">8</span>)</span><br><span class="line">加密结果<span class="number">10</span> = 加密<span class="number">2</span>(加密结果<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">log(加密结果<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 解密2(<span class="params">code</span>) </span>{</span><br><span class="line">    code = <span class="built_in">unescape</span>(code);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">String</span>.fromCharCode(code.charCodeAt(<span class="number">0</span>) - code.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; code.length; i++) {</span><br><span class="line">        c += <span class="built_in">String</span>.fromCharCode(code.charCodeAt(i) - c.charCodeAt(i - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 解密3(<span class="params">stringJ</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> str2 = stringJ.split(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; str2.length; x++) {</span><br><span class="line">        str2[x] = charDh(str2[x]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    str2 = str2.reverse().join(<span class="string">""</span>);</span><br><span class="line">    log(str2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> tt = <span class="built_in">parseInt</span>(str2[<span class="number">0</span>]);</span><br><span class="line">    str2 = str2.substring(<span class="number">1</span>, str2.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; str2.length; y++) {</span><br><span class="line">        <span class="keyword">if</span> ((y - <span class="number">1</span>) % (tt + <span class="number">1</span>) != <span class="number">0</span>) {</span><br><span class="line">            str3 = str3 + str2[y];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (str3[str3.length - <span class="number">1</span>] == <span class="string">"?"</span>) {</span><br><span class="line">        str3 = str3.substring(<span class="number">0</span>, str3.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str3;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">charDh</span>(<span class="params">cha</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>, <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> jw = <span class="number">0</span>; jw &lt; arr.length; jw++) {</span><br><span class="line">        <span class="keyword">if</span> (cha == arr[jw]) {</span><br><span class="line">            <span class="keyword">return</span> arr[arr.length - <span class="number">1</span> - jw];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cha;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密1(<span class="params">string</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> java.math.BigInteger(<span class="number">1</span>, java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>)</span><br><span class="line">        .digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密2(<span class="params">code</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">String</span>.fromCharCode(code.charCodeAt(<span class="number">0</span>) + code.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; code.length; i++) {</span><br><span class="line">        c += <span class="built_in">String</span>.fromCharCode(code.charCodeAt(i) + code.charCodeAt(i - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">escape</span>(c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密3(<span class="params">stringW</span>) </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str = stringW + <span class="string">"?"</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ranWs = random(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) {</span><br><span class="line">        str1 = str1 + str[i];</span><br><span class="line">        <span class="keyword">if</span> (i % ranWs == <span class="number">0</span>) {</span><br><span class="line">            str1 = str1 + ranLetter();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    log(str1)</span><br><span class="line">    str1 = ranWs + str1;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    str1 = str1.split(<span class="string">""</span>).reverse();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; str1.length; x++) {</span><br><span class="line">        str1[x] = charDh(str1[x]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str1.join(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ranLetter</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>];</span><br><span class="line">    <span class="keyword">var</span> ran = random(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ran == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> random(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (ran == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)].toUpperCase();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="常用功能封装"><a href="#常用功能封装" class="headerlink" title="常用功能封装"></a>常用功能封装</h1><h2 id="调起apk安装"><a href="#调起apk安装" class="headerlink" title="调起apk安装"></a>调起apk安装</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> apkfile = files.path(APK包位置这里这么写是为了可以用相对路径);</span><br><span class="line">app.viewFile(apkfile)</span><br></pre></td></tr></tbody></table></figure><h2 id="蚂蚁森林"><a href="#蚂蚁森林" class="headerlink" title="蚂蚁森林"></a>蚂蚁森林</h2><h3 id="暴力点击能量球"><a href="#暴力点击能量球" class="headerlink" title="暴力点击能量球"></a>暴力点击能量球</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CollectEnergy</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始收集能量'</span>)</span><br><span class="line">    <span class="comment">// 能量球半径为140</span></span><br><span class="line">    <span class="comment">// 第一个为初始y坐标(screen_height*0.225=540),第二个为末尾y坐标screen_height*0.396=950</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> row = <span class="number">540</span>; row &lt; <span class="number">950</span>; row += <span class="number">140</span>){</span><br><span class="line">        <span class="comment">// 第一个为初始x(140)(screen_width*0.13),第二个为末尾x坐标(930)(screen_width*0.86)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> col = <span class="number">140</span>; col &lt; <span class="number">930</span>; col += <span class="number">140</span>) {</span><br><span class="line">            click(col, row);</span><br><span class="line">            sleep(<span class="number">10</span>);</span><br><span class="line">            <span class="comment">// log(col, row)</span></span><br><span class="line">    }</span><br><span class="line">    toastLog(<span class="string">"能量收集完成"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="读取json"><a href="#读取json" class="headerlink" title="读取json"></a>读取json</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> files === <span class="string">'undefined'</span>) {</span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">    <span class="keyword">var</span> files = {</span><br><span class="line">        <span class="attr">read</span>: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> fs.readFileSync(path,{<span class="attr">encoding</span>:<span class="string">"utf-8"</span>}).toString();</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">write</span>: <span class="function"><span class="keyword">function</span>(<span class="params">path,text</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> fs.writeFile(path,text,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{</span><br><span class="line">                <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">fileName</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fileName==<span class="string">"string"</span>){</span><br><span class="line">        <span class="keyword">var</span> strList = fileName.split(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span>(strList[strList.length-<span class="number">1</span>].toLowerCase()==<span class="string">"json"</span>){</span><br><span class="line">            <span class="keyword">var</span> data = files.read(fileName);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"not JSON File"</span>)</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"not file name"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeJSON</span>(<span class="params">fileName,data</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fileName == <span class="string">"string"</span>){</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            files.write(fileName,<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">        }<span class="keyword">catch</span>(e){</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Hava Error!!"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(readJSON(<span class="string">"project.json"</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="获取设备唯一标识"><a href="#获取设备唯一标识" class="headerlink" title="获取设备唯一标识"></a>获取设备唯一标识</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var uuid = device.fingerprint;</span></span><br><span class="line"><span class="comment">// toastLog(uuid)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用device.getAndroidId()代替device.getIMEI().这是因为安卓10以上限制了获取imei码</span></span><br><span class="line"><span class="keyword">var</span> imei = device.getAndroidId()</span><br><span class="line">toast(imei)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// md5加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">string</span>)</span>{</span><br><span class="line"><span class="keyword">var</span> res=java.math.BigInteger(<span class="number">1</span>,java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>).digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"><span class="keyword">while</span>(res.length&lt;<span class="number">32</span>)res=<span class="string">"0"</span>+res;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="强制结束app进程的功能"><a href="#强制结束app进程的功能" class="headerlink" title="强制结束app进程的功能"></a>强制结束app进程的功能</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">forceCloseApp</span>(<span class="params">appName</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> packageName = getPackageName(appName);</span><br><span class="line">    app.openAppSetting(packageName);<span class="comment">//打开app的详细信息</span></span><br><span class="line">    <span class="keyword">if</span> (text(<span class="string">"强行停止"</span>).findOne().enabled()) {<span class="comment">//判断强制停止按钮是否可点击，可点击（enabled值为true）则表示在运行，不可点击（enabled值为false）就代表未运行。</span></span><br><span class="line">        text(<span class="string">"强行停止"</span>).findOne().click();</span><br><span class="line">        text(<span class="string">"确定"</span>).findOne().click();</span><br><span class="line">    }</span><br><span class="line">    back();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="提取文本中的数字的正则表达式"><a href="#提取文本中的数字的正则表达式" class="headerlink" title="提取文本中的数字的正则表达式"></a>提取文本中的数字的正则表达式</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码举例：</span></span><br><span class="line">timesText = id(<span class="string">"tv_remain_times"</span>).findOne().text();</span><br><span class="line">times = timesText.replace(<span class="regexp">/[^0-9]/ig</span>, <span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="安卓无障碍"><a href="#安卓无障碍" class="headerlink" title="安卓无障碍"></a>安卓无障碍</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auto.service.performGlobalAction(<span class="number">9</span>);</span><br><span class="line"><span class="comment">//1 返回</span></span><br><span class="line"><span class="comment">//3 切换任务</span></span><br><span class="line"><span class="comment">//4 下拉通知栏</span></span><br><span class="line"><span class="comment">//5 展开通知栏</span></span><br><span class="line"><span class="comment">//6 长按电源键</span></span><br><span class="line"><span class="comment">//7 分屏模式</span></span><br><span class="line"><span class="comment">//8 锁屏</span></span><br><span class="line"><span class="comment">//9 截图</span></span><br></pre></td></tr></tbody></table></figure><h2 id="连续按两次返回键退出"><a href="#连续按两次返回键退出" class="headerlink" title="连续按两次返回键退出"></a>连续按两次返回键退出</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> isCanFinish = <span class="literal">false</span>;</span><br><span class="line">ui.emitter.on(<span class="string">"back_pressed"</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (!isCanFinish) {</span><br><span class="line">    toastLog(<span class="string">"连续按两次返回键退出"</span>);</span><br><span class="line">    isCanFinish = <span class="literal">true</span>;</span><br><span class="line">    isCanFinishTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      isCanFinish = <span class="literal">false</span>;</span><br><span class="line">    }, <span class="number">700</span>);</span><br><span class="line">    e.consumed = <span class="literal">true</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">clearTimeout</span>(isCanFinishTimeout);</span><br><span class="line">    e.consumed = <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="信息提示"><a href="#信息提示" class="headerlink" title="信息提示"></a>信息提示</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log()</span><br><span class="line">toast()</span><br><span class="line">toastLog()</span><br><span class="line">alert()</span><br></pre></td></tr></tbody></table></figure><h2 id="截图相关"><a href="#截图相关" class="headerlink" title="截图相关"></a>截图相关</h2><p><strong>用adb授予投影媒体权限</strong><br>● 重启后权限依然有效<br>● 授予这个权限以后 requestCaptureScreen就不会弹窗询问了<br><code>adb shell appops set org.autojs.autojspro PROJECT_MEDIA allow </code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于安卓无障碍截图保存</span></span><br><span class="line">auto.service.performGlobalAction(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三指下滑截屏保存</span></span><br><span class="line">gestures(</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">230</span>, <span class="number">452</span>], [<span class="number">230</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">500</span>, <span class="number">452</span>], [<span class="number">500</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">755</span>, <span class="number">452</span>], [<span class="number">755</span>, <span class="number">1000</span>]]</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动获取截图权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetScreenCapture</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="comment">// 开启一个线程</span></span><br><span class="line">    <span class="keyword">let</span> Thread = threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span>(auto.service != <span class="literal">null</span>){  <span class="comment">//如果已经获得无障碍权限</span></span><br><span class="line">                <span class="comment">//由于系统间同意授权的文本不同，采用正则表达式</span></span><br><span class="line">                <span class="keyword">let</span> Allow = textMatches(<span class="regexp">/(允许|立即开始|统一)/</span>).findOne(<span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span>(Allow){</span><br><span class="line">                    Allow.click();</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">if</span>(!requestScreenCapture()){</span><br><span class="line">        log(<span class="string">"请求截图权限失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        Thread.interrupt()</span><br><span class="line">        log(<span class="string">"已获得截图权限"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>安卓高版本用无障碍截图</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (device.sdkInt &gt;= <span class="number">30</span>) {</span><br><span class="line">  </span><br><span class="line">  img = $automator.takeScreenshot();   <span class="comment">// 安卓11以上无障碍截图,需要回收</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  threads.start(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> r = text(<span class="string">"立即开始"</span>).findOne(<span class="number">3000</span>);</span><br><span class="line">    r &amp;&amp; r.click();</span><br><span class="line">  });</span><br><span class="line">  images.requestScreenCapture();</span><br><span class="line">  img = images.captureScreen();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="上下滑动翻页"><a href="#上下滑动翻页" class="headerlink" title="上下滑动翻页"></a>上下滑动翻页</h2><p><strong>swipe()函数滑动在autojs4.1与pro不一致</strong><br>swipe(x1, y1, x2, y2, duration)</p><p>duration {number} 滑动时长，单位毫秒<br>模拟从坐标(x1, y1)滑动到坐标(x2, y2)，并返回是否成功。只有滑动操作执行完成时脚本才会继续执行。<br>Auto.JS上下滑动可以是对整个屏幕的滑动或对某特定控件的滑动，对整个屏幕滑动</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line">Slide(<span class="string">"up"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Slide</span>(<span class="params">upordown</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> h=device.height;               <span class="comment">//屏幕高</span></span><br><span class="line">    <span class="keyword">var</span> w=device.width;                <span class="comment">//屏幕宽</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x=device.width/<span class="number">2</span>;                     <span class="comment">//横坐标2分之1处</span></span><br><span class="line">    <span class="keyword">var</span> h1=(device.height/<span class="number">6</span>)*<span class="number">3.5</span>;             <span class="comment">//纵坐标6分之3.5处，</span></span><br><span class="line">    <span class="keyword">var</span> h2=(h/<span class="number">6</span>);                      <span class="comment">//纵坐标6分之1处</span></span><br><span class="line">    <span class="keyword">if</span>(upordown==<span class="string">"up"</span>){</span><br><span class="line">        swipe(x, h1, x, h2, <span class="number">400</span>);          <span class="comment">//完美上滑向下翻页(从纵坐标6分之5处拖到纵坐标6分之1处)</span></span><br><span class="line">    }<span class="keyword">else</span>{ </span><br><span class="line">        swipe(x, h2, x, h1, <span class="number">400</span>);          <span class="comment">//完美下滑向上翻页(从纵坐标6分之1处拖到纵坐标6分之5处)</span></span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="重复执行几次"><a href="#重复执行几次" class="headerlink" title="重复执行几次"></a>重复执行几次</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!descEndsWith(<span class="string">"扫一扫"</span>).exists() &amp;&amp; i&lt;=<span class="number">5</span>){</span><br><span class="line">    i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">5</span>){}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>){</span><br><span class="line">    <span class="keyword">if</span>(){</span><br><span class="line"> </span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    n--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="黑屏跑脚本-省电"><a href="#黑屏跑脚本-省电" class="headerlink" title="黑屏跑脚本(省电)"></a>黑屏跑脚本(省电)</h2><p>原理很简单,就是去创建一个黑色的悬浮窗,在oled屏幕上,就不会发光,降低功<br>耗.兼容任何脚本</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 息屏(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> h = confirm(<span class="string">"是否要进入息屏挂机模式吗？可按下音量上键停止辅助。并不能锁定屏幕！！！通知栏会正常显示（oled屏可用)"</span>);</span><br><span class="line">    <span class="keyword">if</span>(h){</span><br><span class="line">    <span class="keyword">var</span> w = floaty.rawWindow(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">gravity</span>=<span class="string">"center"</span> <span class="attr">bg</span>=<span class="string">"#000000"</span>/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    w.setSize(-<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">    w.setTouchable(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//保持脚本运行</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>{}, <span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">息屏()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="一键启动无障碍"><a href="#一键启动无障碍" class="headerlink" title="一键启动无障碍"></a>一键启动无障碍</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">importClass(android.content.Context);</span><br><span class="line">importClass(android.provider.Settings);</span><br><span class="line"><span class="built_in">console</span>.show()</span><br><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="keyword">var</span> enabledServices = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES);</span><br><span class="line">    <span class="comment">//把要用的辅助服务打开，获取到已开启的服务，写到Services变量(每个服务间要用英文冒号连接)</span></span><br><span class="line">    log(<span class="string">'当前已启用的辅助服务\n'</span>, enabledServices);   </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    由于Android的一些bug，有时候实际没有开启的服务仍会出现在已启用的里面，所有没办法通过判断得知服务是否开启</span></span><br><span class="line"><span class="comment">    像当前这样子会导致已开启服务里面有很多重复项目，建议直接写死不再每次重新获取</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">// hamibot,autojs,autojspro,绿去广告的无障碍</span></span><br><span class="line">    <span class="keyword">var</span> Services = enabledServices + <span class="string">":com.hamibot.hamibot/com.stardust.autojs.core.accessibility.AccessibilityService"</span>+</span><br><span class="line">    <span class="string">":org.autojs.autojs/com.stardust.autojs.core.accessibility.AccessibilityService"</span>+</span><br><span class="line">    <span class="string">":com.auto.greenskipad/com.auto.skip.service.NewTiaoGuoService"</span>+</span><br><span class="line">    <span class="string">":org.autojs.autojspro/com.stardust.autojs.core.accessibility.AccessibilityService"</span>;</span><br><span class="line">    </span><br><span class="line">    Settings.Secure.putString(context.getContentResolver(), Settings.Secure.ENABLED_ACCESSIBILITY_SERVICES, Services);</span><br><span class="line">    Settings.Secure.putString(context.getContentResolver(), Settings.Secure.ACCESSIBILITY_ENABLED, <span class="string">'1'</span>);</span><br><span class="line">    toastLog(<span class="string">"成功开启无障碍服务"</span>);</span><br><span class="line">} <span class="keyword">catch</span> (error) {</span><br><span class="line">    setClip(<span class="string">"adb shell pm grant org.autojs.autojspro android.permission.WRITE_SECURE_SETTINGS"</span>);  </span><br><span class="line">    <span class="comment">// setClip("adb shell pm grant :com.auto.greenskipad android.permission.WRITE_SECURE_SETTINGS");</span></span><br><span class="line">    toastLog(<span class="string">"\n请确保已给予 WRITE_SECURE_SETTINGS 权限\n\n授权代码已复制到剪贴板，请使用adb工具连接手机执行(重启不失效)\n\n"</span>, error);</span><br><span class="line">  </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Bmob-后端云"><a href="#Bmob-后端云" class="headerlink" title="Bmob 后端云"></a>Bmob 后端云</h1><p>提供可靠的 Serverless 云服务 轻松拥有开发中需要的各种后端能力<br><a href="https://www.bmob.cn/">Bmob官网</a><br><a href="http://doc.bmob.cn/">文档</a></p><h1 id="点击的方法："><a href="#点击的方法：" class="headerlink" title="点击的方法："></a>点击的方法：</h1><h2 id="控件点击"><a href="#控件点击" class="headerlink" title="控件点击"></a>控件点击</h2><p>首先推荐的必然是控件点击，它的逻辑是只要能被侦测，就能被点击，无论它是躲在某个悬浮窗后面，还是躲在看不见的下滑栏的底部,即使是app在弹广告，依然可以无视掉。前提是找到控件的特殊属性</p><p>寻找控件建议不要用findOne()、waitFor()、exists()等一些会阻塞的方法，不然稍微出现一点其他事件就会阻塞，导致脚本莫名其妙的卡死，使用findOne(timeout)、findonce()时可以加个判断在不为null的时候再点击或其他操作，因为没找到返回null，直接click就会报错，脚本停止运行，要是是找的父或者子控件也写到判断里</p><p>bounds(813,883,1039,993).findOne().click();</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包括控件点击和坐标点击</span></span><br><span class="line"><span class="comment"> * clickControl(element)</span></span><br><span class="line"><span class="comment"> * 参数填属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">a=className(<span class="string">"android.widget.TextView"</span>).text(<span class="string">"芭芭农场"</span>);</span><br><span class="line"></span><br><span class="line">clickControl(a)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">clickControl</span>(<span class="params">element,timeOut</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (!timeOut) { timeOut = <span class="number">1000</span> }</span><br><span class="line">    <span class="keyword">let</span> clickResult = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (element.exists()) {</span><br><span class="line">            toastLog(<span class="string">"准备click："</span> + element);</span><br><span class="line">            <span class="keyword">let</span> clickable = element.clickable();<span class="comment">//是否可以点击</span></span><br><span class="line">            <span class="keyword">if</span> (clickable) {</span><br><span class="line">                toastLog(<span class="string">"该控件可点击，尝试直接点击"</span>)</span><br><span class="line">                <span class="comment">// element.findOnce(timeOut).click();</span></span><br><span class="line">                clickResult = element.findOnce(timeOut).click();</span><br><span class="line">                sleep(random(<span class="number">500</span>, <span class="number">1000</span>));</span><br><span class="line">            } <span class="keyword">else</span>  {</span><br><span class="line">                toastLog(<span class="string">"尝试坐标点击"</span>)</span><br><span class="line">                <span class="keyword">let</span> b = element.findOnce(timeOut).bounds();</span><br><span class="line">                click(b.centerX(), b.centerY());</span><br><span class="line">                clickResult =click(b.centerX(), b.centerY());</span><br><span class="line">                sleep(random(<span class="number">500</span>, <span class="number">1000</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> clickResult;</span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">        toast(<span class="string">"clickControl方法出现错误："</span> + error)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h2><p>其次仍然是控件点击的延申，层级点击，分为两种点击，通常用于app内的网页展示，表现可以具体参照jd，它的结构极其杂乱</p><p>写10多个child，找到它的那个拥有独一无二参数的上家，此时需要pc端控件查看，才能理清思路<br>另外一种 就是使用indexInParent().depth()去查找，如果怕重复，就可以换为find()，然后再一个个检查 下面是一个我在饿了么里面用到的一段代码：<br>sleep(3000); depth(‘15’).indexInParent(‘3’).waitFor(); log(‘页面加载完成\n等待5s’); sleep(5000);</p><p>let exb = depth(‘16’).indexInParent(‘0’).find(); for(i = 0; i &lt; exb.length; i++){ if(exb[i].bounds().centerX() &gt; dev_width/2) continue; if(exb[i].bounds().centerY() &gt; dev_hight/2) break; } exb[i].click();sleep(2000);</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.不断查找某控件父元素，并点击(解决模拟器和手机不查找元素不一致问题)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">up_click</span>(<span class="params">x</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (x &amp;&amp; x.clickable()) <span class="keyword">return</span> x.click();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> ii = <span class="number">0</span>; ii &lt; <span class="number">6</span>; ii++) {</span><br><span class="line">      <span class="keyword">if</span> (!x) <span class="keyword">break</span></span><br><span class="line">      x = x.parent();</span><br><span class="line">      <span class="keyword">if</span> (x &amp;&amp; x.clickable()) <span class="keyword">return</span> x.click();</span><br><span class="line">      <span class="keyword">let</span> list_x = x.children();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list_x.length; i++) </span><br><span class="line">      {<span class="keyword">if</span> (list_x[i] &amp;&amp; list_x[i].clickable()) <span class="keyword">return</span> list_x[i].click()};}</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="识图点击"><a href="#识图点击" class="headerlink" title="识图点击"></a>识图点击</h2><p>即便层级结构复杂，我也是不推荐识图点击，有个例外，就是1对1定制，只在有限的几个设备上用，那识图确实是个省力的活，<br>但是如果面向很多用户，并不推荐， 理由1 不同人的手机屏幕分辨率和尺寸不同，结果就是ppi不同，缩放不同，识图基本上是像素点对比的，所谓的容错也只是颜色的范围，这种问题同样出现在Windows中的pywinauto上 理由2 除了ppi不同导致图案大小不同，还会导致颜色色彩不同，是的，色彩，rgb值不一样。 修正方案：hamibot作者给的建议，只截取屏幕的一长条区域，进行颜色判定。</p><p>③找图找色特别消耗内存，所以在能用控件就用控件，找图找色在找到后要用recycle()来对创建的图像对象回收，提高脚本稳定，让脚本能持续运行更长时间，截图也需要一定的时间</p><p>④如果脚本有悬浮窗，使用找图要注意不要将要找的图遮挡<br>不要在循环里面读图，还有就是不要频繁操作大字符串<br>image对象创建后尽量在不使用时进行回收，同时避免循环创建大量图片。因为图片是一种占用内存比较大的资源</p><h3 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h3><p>images.matchTemplate(img, template, options)</p><p>作用：[v4.1.0新增]在大图片中搜索小图片，并返回搜索结果MatchingResult。该函数可以用于找图时找出多个位置，可以通过max参数控制最大的结果数量。也可以对匹配结果进行排序、求最值等操作。返回 {MatchingResult}</p><p>参数：<br>    img {Image} 大图片<br>    template {Image} 小图片（模板）<br>    options {Object} 找图选项：<br>        1.threshold {number} 图片相似度。取值范围为0~1的浮点数。默认值为0.9。<br>        2.region {Array} 找图区域。参见findColor函数关于region的说明。<br>        3.max {number} 找图结果最大数量，默认为5<br>        4.transparentMask {boolean} 是否使用透明模板找图。此选项开启后，传入的template参数可以是一个透明背景的图片对象用于匹配。此选项为 [Pro 8.0新增] 。<br>        5.level {number} 一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。</p><h3 id="返回的MatchingResult对象"><a href="#返回的MatchingResult对象" class="headerlink" title="返回的MatchingResult对象"></a>返回的MatchingResult对象</h3><p>matches<br>    数组的元素是一个Match对象：<br>        point {Point} 匹配位置<br>        similarity {number} 相似度<br>points<br>first()<br>last()<br>leftmost()<br>topmost()<br>rightmost()<br>bottommost()<br>best()<br>worst()<br>sortBy(cmp)</p><h3 id="base64编码转换"><a href="#base64编码转换" class="headerlink" title="base64编码转换"></a>base64编码转换</h3><p>图片可以转为 base64 编码 直接写在脚本中 当做变量使用。。加快图片传输速度</p><p><a href="https://tool.chinaz.com/tools/imgtobase">base64图片转换工具</a></p><h4 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h4><p>1.images.fromBase64(图片的Base64数据)<br>解码Base64数据并返回解码后的图片Image对象。如果base64无法解码则返回null。</p><p>2.images.toBase64(Image对象[, 图片格式, 图片质量])<br>返回 {string},把图片编码为base64数据并返回。</p><h4 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h4><p>images.fromBytes(bytes)<br>bytes {byte[]} 字节数组<br>解码字节数组bytes并返回解码后的图片Image对象。如果bytes无法解码则返回null。</p><p>images.toBytes(Image对象[, 图片格式, 图片质量])</p><p>返回 {byte[]}<br>把图片编码为字节数组并返回。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环找图：区域0.0.1080.760搜索到第一次小图位置在50.300，点击后，然后在从100.300.1080.760开始第二次搜索到位置在55.600，点击后，然后在从105.600.1080.760开始下一个搜索。每个搜索点击后判断一下当前Y位置是否到了图标出现的最大位置，超出就退出循环找图(就是全屏找，找到第一个就从第一个位置加点距离开始找第二个。)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多张图判断</span></span><br><span class="line"><span class="keyword">var</span> findImgPoint = findImage(personHomeCapture, goldcoinTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0.9</span></span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, goldballTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion</span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, yellowgirlTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0.9</span></span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, chivesTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion</span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, pillowTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找图点击 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">png_click</span>(<span class="params">num, pngbase64</span>)</span>{</span><br><span class="line">  <span class="keyword">while</span>(num--){</span><br><span class="line">      <span class="keyword">let</span> img = captureScreen();</span><br><span class="line">      <span class="keyword">let</span> temp1 = images.fromBase64(pngbase64);</span><br><span class="line">      <span class="keyword">let</span> pos = findImage(img, temp1);</span><br><span class="line">      <span class="keyword">if</span>(pos){<span class="keyword">return</span> click(pos.x, pos.y);} <span class="keyword">else</span> sleep(<span class="number">1000</span>);}</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">              </span><br><span class="line"><span class="built_in">require</span> (<span class="string">"./权限/获取截图权限"</span>)</span><br><span class="line"><span class="built_in">console</span>.show ()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_img_click</span>(<span class="params">imgpath, regions,thresholds </span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> img1 = images.read( imgpath );</span><br><span class="line">    <span class="keyword">let</span> 缩放x = device.width / <span class="number">1080</span></span><br><span class="line">    <span class="keyword">let</span> 缩放y = device.height / <span class="number">2400</span></span><br><span class="line">    <span class="comment">//缩放后的图</span></span><br><span class="line">    <span class="keyword">let</span> img2 = images.scale(img1, 缩放x, 缩放y)</span><br><span class="line">    <span class="comment">// captureScreen()函数截全屏</span></span><br><span class="line">    <span class="keyword">let</span> result = images.matchTemplate( captureScreen(), img2, {</span><br><span class="line">        <span class="attr">max</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">region</span>: regions, <span class="comment">//区域</span></span><br><span class="line">        <span class="attr">threshold</span>: thresholds,</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">let</span> img_w = img2.getWidth()</span><br><span class="line">    <span class="keyword">let</span> img_h = img2.getHeight()</span><br><span class="line">    <span class="comment">//回收图片</span></span><br><span class="line">    img2.recycle();</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.matches.length; i++) {</span><br><span class="line">            <span class="keyword">let</span> pp = result.matches[i].point</span><br><span class="line">            log(<span class="string">'所找图坐标是：'</span>+pp)</span><br><span class="line">            log(<span class="string">'所找图宽高为'</span>+img_w,img_h)</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">"找到"</span> + imgpath, pp.x, pp.y)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//随机点击坐标</span></span><br><span class="line">            <span class="comment">// let a = pp.x+Math.floor(Math.random()*5)</span></span><br><span class="line">            <span class="comment">// let b = pp.y+Math.floor(Math.random()*5)</span></span><br><span class="line">            <span class="keyword">let</span> a = random(pp.x,pp.x+img_w)</span><br><span class="line">            <span class="keyword">let</span> b = random(pp.y,pp.y+img_h)</span><br><span class="line">            click( a,  b)</span><br><span class="line">            log(<span class="string">'随机点击范围内的坐标是:'</span>+ a+<span class="string">','</span>+ b)</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"点击--"</span> + imgpath)</span><br><span class="line">            sleep(<span class="number">200</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"===未找到"</span> + imgpath)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用识图函数</span></span><br><span class="line">imgpath=<span class="string">'/sdcard/脚本/2.jpg'</span>   <span class="comment">//图片路径</span></span><br><span class="line">regions=[<span class="number">0</span>, <span class="number">0</span>, device.width, device.height]   <span class="comment">//识图范围</span></span><br><span class="line">thresholds=<span class="number">0.4</span>      <span class="comment">// 识别率要低一点</span></span><br><span class="line"></span><br><span class="line">find_img_click(imgpath,regions, <span class="number">0.75</span>)  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="区域找色点击"><a href="#区域找色点击" class="headerlink" title="区域找色点击"></a>区域找色点击</h2><p>images.findColor(image, color, options) 在图片中寻找颜色color。找到时返回找到的点Point，找不到时返回null。<br>    image {Image} 图片</p><pre><code>color {number | string} 要寻找的颜色的RGB值。如果是一个整数，则以0xRRGGBB的形式代表RGB值（A通道会被忽略）；如果是字符串，则以"#RRGGBB"代表其RGB值。options {Object} 选项选项包括：region {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。{如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。}{如果不指定region选项，则找色区域为整张图片。}threshold {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.该函数也可以作为全局函数使用。</code></pre><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cs_click</span>(<span class="params">rgb, xr, yr, wr, hr</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> img = captureScreen()</span><br><span class="line">  <span class="keyword">let</span> point = findColor(img, rgb, {</span><br><span class="line">       <span class="attr">region</span>: [img.getWidth() * xr, img.getHeight() * yr, img.getWidth() * wr, img.getHeight() * hr], <span class="attr">threshold</span>: <span class="number">8</span> })</span><br><span class="line">      <span class="keyword">if</span> (point) {</span><br><span class="line">          point.x = img.getWidth() - point.x; point.y = img.getHeight() - point.y       </span><br><span class="line">          <span class="keyword">return</span> click(point.x, point.y);</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置好友数，避免特殊情况一直循环</span></span><br><span class="line">friend_num=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;friend_num;i++){</span><br><span class="line">    <span class="keyword">let</span> point = findColor(img, <span class="string">'#1fa071'</span>, {</span><br><span class="line">        <span class="attr">region</span>: [<span class="number">960</span>,<span class="number">400</span>,screen_width-<span class="number">960</span>,<span class="number">1450</span>], <span class="attr">threshold</span>: <span class="number">20</span> })</span><br><span class="line">       <span class="keyword">if</span> (point) {</span><br><span class="line">               </span><br><span class="line">        <span class="comment">//    click(point.x, point.y);</span></span><br><span class="line">           log(<span class="string">'进入好友'</span>+point.x, point.y)</span><br><span class="line">           CollectEnergy();</span><br><span class="line">           back()</span><br><span class="line">           sleep(<span class="number">500</span>)</span><br><span class="line">       }<span class="keyword">else</span>{</span><br><span class="line">           log(<span class="string">'好友能量收集完毕'</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="多点找色点击"><a href="#多点找色点击" class="headerlink" title="多点找色点击"></a>多点找色点击</h2><p>images.findMultiColors(img, firstColor, colors[, options])<br>    img:要找色的图片<br>    firstColor {number | string} 第一个点的颜色<br>    colors {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]<br>    options {Object} 选项，包括：<br>        region {Array} 找色区域。是一个两个或四个元素的数组。<br>        (region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。<br>        threshold {number} 找色时颜色相似度的临界值，范围为0 -255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</p><p>多点找色,其过程如下：<br>在图片img中找到颜色firstColor的位置(x0, y0)<br>对于数组colors的每个元素[x, y, color]，检查图片img在位置(x + x0, y + y0)上的像素是否是颜色color，是的话返回(x0, y0)，否则继续寻找firstColor的位置，重新执行第1步<br>整张图片都找不到时返回null</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = images.findMultiColors(img, <span class="string">"#123456"</span>, [[<span class="number">10</span>, <span class="number">20</span>, <span class="string">"#ffffff"</span>], [<span class="number">30</span>, <span class="number">40</span>, <span class="string">"#000000"</span>]], </span><br><span class="line">{<span class="attr">region</span>: [<span class="number">0</span>, <span class="number">960</span>, device.width, device.height ]});</span><br><span class="line"></span><br><span class="line">toastLog(<span class="string">"x = "</span> + point.x + <span class="string">", y = "</span> + point.y);</span><br><span class="line">click (point.x, point.y)</span><br></pre></td></tr></tbody></table></figure><h2 id="ocr点击"><a href="#ocr点击" class="headerlink" title="ocr点击"></a>ocr点击</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/zxvf79">牙叔识别数字ocr</a><br><a href="https://blog.csdn.net/YY007H/article/details/124540297">基于PaddleOCR开发Auto.js Pro文字识别插件</a></p><h3 id="百度ocr"><a href="#百度ocr" class="headerlink" title="百度ocr"></a>百度ocr</h3><p>借用外部的ocr识别，拿到字的坐标<br><a href="https://console.bce.baidu.com/ai/?fromai=1#/ai/ocr/app/list">百度ocr</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百度OCR 三连发</span></span><br><span class="line"><span class="comment">//ocr1 返回识图结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Baidu_ocr</span>(<span class="params">imgFile</span>)</span>{</span><br><span class="line">  log(<span class="string">"识图..."</span>);</span><br><span class="line">  <span class="keyword">var</span> imag64 = images.toBase64(imgFile, <span class="string">"png"</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="keyword">var</span> API_Key=<span class="string">"自己的AK"</span>;</span><br><span class="line">  <span class="keyword">var</span> Secret_Key=<span class="string">"自己的SK"</span>;</span><br><span class="line">  <span class="keyword">var</span> getTokenUrl=<span class="string">"https://aip.baidubce.com/oauth/2.0/token"</span>;<span class="comment">//选择网络图片识别</span></span><br><span class="line">  <span class="keyword">var</span> token_Res = http.post(getTokenUrl, {</span><br><span class="line">      <span class="attr">grant_type</span>: <span class="string">"client_credentials"</span>,</span><br><span class="line">      <span class="attr">client_id</span>: API_Key,</span><br><span class="line">      <span class="attr">client_secret</span>: Secret_Key,</span><br><span class="line">  });</span><br><span class="line">  <span class="keyword">var</span> access_token=token_Res.body.json().access_token;</span><br><span class="line">  <span class="keyword">var</span> ocrUrl = <span class="string">"https://aip.baidubce.com/rest/2.0/ocr/v1/webimage_loc"</span>;</span><br><span class="line">  <span class="keyword">var</span> ocr_Res = http.post(ocrUrl, {</span><br><span class="line">      <span class="attr">headers</span>: {</span><br><span class="line">          <span class="string">"Content - Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">access_token</span>: access_token,</span><br><span class="line">      <span class="attr">image</span>: imag64,</span><br><span class="line">      <span class="attr">language_type</span>:<span class="string">"CHN_ENG"</span><span class="comment">//可添加额外参数</span></span><br><span class="line">  });</span><br><span class="line">  sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">var</span> json = ocr_Res.body.json();</span><br><span class="line">  <span class="keyword">return</span> json.words_result;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//OCR2 处理返回结果 并点击</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ocr_click</span>(<span class="params">target_words</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> imgScreen = captureScreen();</span><br><span class="line">  <span class="keyword">var</span> logOcr= Baidu_ocr(imgScreen);</span><br><span class="line">  <span class="keyword">var</span> target_nums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; logOcr.length; i++){</span><br><span class="line">      <span class="keyword">if</span>(target_words == logOcr[i].words) {<span class="built_in">console</span>.log(<span class="string">'找到：'</span>+target_words);target_nums = i;<span class="keyword">break</span>;}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span>(!target_nums) {log(<span class="string">'未找到指定文字'</span>);<span class="keyword">return</span> <span class="literal">false</span>;}</span><br><span class="line">  <span class="keyword">let</span> postion = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  postion[<span class="number">1</span>] = logOcr[target_nums].location.top;</span><br><span class="line">  postion[<span class="number">0</span>] = logOcr[target_nums].location.left;</span><br><span class="line">  sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  click(postion[<span class="number">0</span>], postion[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> postion;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//ocr3.记录所有相同字的位置，目的是为了尽可能的少发送截图请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list_ocr</span>(<span class="params">target_words</span>) </span>{</span><br><span class="line">  sleep(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">let</span> img = captureScreen();</span><br><span class="line">  <span class="keyword">let</span> imgScreen = images.clip(img, <span class="number">0</span>, dev_hight/<span class="number">2</span>, dev_width, dev_hight/<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> logOcr= Baidu_ocr(imgScreen);</span><br><span class="line">  <span class="keyword">let</span> nums_list = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">let</span> times = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; logOcr.length; i++){</span><br><span class="line">      <span class="keyword">if</span>(target_words == logOcr[i].words) nums_list[times++] = i;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span>(!times) {log(<span class="string">'未找到指定文字'</span>);<span class="keyword">return</span> <span class="literal">false</span>;}</span><br><span class="line">    <span class="keyword">else</span> log(<span class="string">'找到'</span>+times+<span class="string">'个'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> postion = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; times; k++){</span><br><span class="line">    postion[k]=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; times; i++){</span><br><span class="line">    postion[i][<span class="number">0</span>] = logOcr[nums_list[i]].location.left;</span><br><span class="line">    postion[i][<span class="number">1</span>] = logOcr[nums_list[i]].location.top;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> postion; </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="浩然ocr"><a href="#浩然ocr" class="headerlink" title="浩然ocr"></a>浩然ocr</h3><p>ocrResult.frame<br>{List} 识别结果的位置<br>识别结果为一个任意四边形，返回的是长度为8的整形列表。 分别为四个顶点的横纵坐标，即[x1,y1,x2,y2,x3,y3,x4,y4]。<br>[左上，右上，右下，左下]</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HaoranOcrClick(<span class="string">'订阅号'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HaoranOcrClick</span>(<span class="params">target</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> ocr = $plugins.load(<span class="string">"com.hraps.ocr"</span>);</span><br><span class="line">    GetScreenCapture()</span><br><span class="line">    sleep(<span class="number">500</span>)</span><br><span class="line">    <span class="comment">//识别图片</span></span><br><span class="line">    results = ocr.detect(captureScreen().getBitmap(), <span class="number">1</span>)     <span class="comment">//缩放比率</span></span><br><span class="line">    <span class="built_in">console</span>.show()</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">"过滤前结果数："</span> + results.size())</span><br><span class="line">    <span class="comment">//识别结果过滤</span></span><br><span class="line">    results = ocr.filterScore(results, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">//输出最终结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; results.size(); i++) {</span><br><span class="line">        <span class="keyword">var</span> re = results.get(i)</span><br><span class="line">        <span class="keyword">let</span> t = re.text   <span class="comment">//识别出的文字</span></span><br><span class="line">        <span class="keyword">let</span> p = re.frame  <span class="comment">//位置</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span> ;j&lt;target.length;j++){    </span><br><span class="line">            <span class="comment">//判断每个字符都在识别结果内   </span></span><br><span class="line">            <span class="keyword">var</span> pan = re.text .includes(target[j])</span><br><span class="line">            <span class="keyword">if</span>(!pan){</span><br><span class="line">                log(<span class="string">'目标字符不在识别结果内'</span>);           </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">var</span> a=j+<span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }  </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(a==target.length){</span><br><span class="line">            <span class="keyword">let</span> x = p[<span class="number">0</span>] + (p[<span class="number">2</span>] - p[<span class="number">0</span>]) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">let</span> y = p[<span class="number">1</span>] + (p[<span class="number">5</span>] - p[<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'全部找到文字准备点击：'</span> + t + <span class="string">"\n其中心坐标是"</span> + x, y);</span><br><span class="line">            click(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="坐标点击"><a href="#坐标点击" class="headerlink" title="坐标点击"></a>坐标点击</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 纯粹设置坐标点击</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{*}</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{*}</span> <span class="variable">y</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{*}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoordClick</span>(<span class="params">x,y</span>)</span>{</span><br><span class="line">    click(x+random(-<span class="number">20</span>,<span class="number">20</span>),y+random(-<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功点击'</span>+x,y )</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="轮廓识别"><a href="#轮廓识别" class="headerlink" title="轮廓识别"></a>轮廓识别</h2><p>图色的高级版</p><h2 id="直接点击字符"><a href="#直接点击字符" class="headerlink" title="直接点击字符"></a>直接点击字符</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 直接点击字符</span></span><br><span class="line">click(<span class="string">"str"</span>,index);                   <span class="comment">//点击第index个字符"str"(因为有时str会出现多次，另外注意下标从0开始)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h1><p><a href="https://www.cr173.com/soft/824332.html">Activity管理器下载地址</a></p><h2 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h2><p>Android中的Scheme是一种页面跳转协议，和网站通过URL的形式访问一样，APP同样可以通过这种方式进行跳转<br>scheme地址，可以直接打开app的某个页面</p><h2 id="intent跳转"><a href="#intent跳转" class="headerlink" title="intent跳转"></a>intent跳转</h2><p><a href="https://www.helloworld.net/p/1797278347">Autojs的intent使用</a><br>intent拦截者 simpleHook 两个软件抓意图<br><a href="http://www.feiyunjs.com/1440.html">安卓APP通用的intent跳转协议，scheme地址寻找方法与auto.js调用</a><br>intent跳转只需要找到相关的参数，就可以直接打开指定的页面。<br><strong>前提</strong><br>如果APP里的页面，是不能分享的，那么基本可以认为这个页面是没有scheme地址的。</p><h2 id="使用intent打开新浪微博的用户任务中心scheme"><a href="#使用intent打开新浪微博的用户任务中心scheme" class="headerlink" title="使用intent打开新浪微博的用户任务中心scheme"></a>使用intent打开新浪微博的用户任务中心scheme</h2><p>首先在手机上手动进入新浪微博的任务中心。点击页面右上角的“…”，弹出分享卡片。点击“复制链接”。在电脑的浏览器里，打开这个链接.点击“我要领取”，进入新的页面。</p><p>查看页面的html代码，页面的body有这样一段：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://c.weibo.cn?scheme=sinaweibo%3A%2F%2Fbrowser%3Furl%3Dhttps%253A%252F%252Fm.weibo.cn%252Fc%252Fcheckin%253Ffeaturecode%253Dfrom_sharingpage_to_mtask%2526luicode%253D20000061%2526lfid%253D180%26featurecode%3Dfrom_sharingpage_to_mtask%26luicode%3D20000061%26lfid%3D180&amp;directdownload=0"</span> <span class="attr">class</span>=<span class="string">"m-btn m-btn-block m-btn-orange download-btn-r"</span> <span class="attr">ontouchstart</span>=<span class="string">""</span>&gt;</span>去下载微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个url里，存在scheme这个关键字。我们把scheme后面的地址提取出来。<br><code>sinaweibo%3A%2F%2Fbrowser%3Furl%3Dhttps%253A%252F%252Fm.weibo.cn%252Fc%252Fcheckin%253Ffeaturecode%253Dfrom_sharingpage_to_mtask%2526luicode%253D20000061%2526lfid%253D180%26featurecode%3Dfrom_sharingpage_to_mtask%26luicode%3D20000061%26lfid%3D180&amp;directdownload=0</code><br>[]URL编码/解码工具(<a href="https://tool.chinaz.com/tools/urlencode.aspx">https://tool.chinaz.com/tools/urlencode.aspx</a>)</p><p>选择“URL编码/解码”，将scheme地址，进行一次“UrlDecode解码”。可以看到开头部分的“%3A%2F%2F”已经被转换成了“://”</p><p>接下来使用auto.js的Intent（意图），来测试这个scheme地址。<br>auto.js提供了构建Intent的函数app.intent(), 启动Activity的函数app.startActivity(), 发送广播的函数app.sendBroadcast()。使用这些方法可以用来方便的调用其他应用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.startActivity({</span><br><span class="line">    <span class="attr">data</span>:<span class="string">"sinaweibo://browser?url=https%3A%2F%2Fm.weibo.cn%2Fc%2Fcheckin%3Ffeaturecode%3Dfrom_sharingpage_to_mtask%26luicode%3D20000061%26lfid%3D180&amp;featurecode=from_sharingpage_to_mtask&amp;luicode=20000061&amp;lfid=180&amp;directdownload=0"</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="app-intent"><a href="#app-intent" class="headerlink" title="app.intent()"></a>app.intent()</h2><p>构建Intent的函数</p><h2 id="启动服务-Service-："><a href="#启动服务-Service-：" class="headerlink" title="启动服务(Service)："></a>启动服务(Service)：</h2><p>Service 是一个不使用用户界面而在后台执行操作的组件。通过将 Intent 传递给 startService()，您可以启动服务执行一次性操作（例如，下载文件）。Intent 描述了要启动的服务，并携带了任何必要的数据。</p><h2 id="传递广播："><a href="#传递广播：" class="headerlink" title="传递广播："></a>传递广播：</h2><p>app.sendBroadcast()<br>广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将 Intent 传递给 sendBroadcast()、sendOrderedBroadcast() 或 sendStickyBroadcast()，您可以将广播传递给其他应用。</p><h2 id="直达应用内的某个页面——启动Activity"><a href="#直达应用内的某个页面——启动Activity" class="headerlink" title="直达应用内的某个页面——启动Activity"></a>直达应用内的某个页面——启动Activity</h2><p>Activity (应用程序活动)分割了应用中不同的界面和功能（例如微信的主界面、朋友圈、聊天窗口都是不同的Activity），通过Activity可以直接进入应用的特定界面，而不仅仅是启动应用</p><p>在Auto.js中，启动Activity有两种方法：</p><h3 id="用app-startActivity"><a href="#用app-startActivity" class="headerlink" title="用app.startActivity"></a>用app.startActivity</h3><p>app.startActivity()<br>启动活动(Activity)：<br> Activity 表示应用中的一个”屏幕”。</p><p>例如应用主入口都是一个Activity，应用的功能通常也以Activity的形式独立，例如微信的主界面、朋友圈、聊天窗口都是不同的Activity。通过将 Intent 传递给 startActivity()，您可以启动新的 Activity 实例。Intent 描述了要启动的 Activity，并携带了任何必要的数据。</p><p>但无论用哪种方法，启动Activity都离不开Intent这个工具</p><blockquote><p>Intent(意图)，Intent是一个消息传递对象，Android中提供了Intent来协助应用间的交互与通讯。</p></blockquote><p>其用途一般有三种：</p><ul><li>启动活动(Activity)：通过活动可以直达应用内的某个页面</li><li>通过startActivity(Intent)，可以隐式启动新的 Activity 实例，其中Intent 描述了要启动的 Activity</li><li>启动服务(Service)：不使用用户界面，而在后台执行操作的组件</li><li>通过 startService(Intent)可以启动Service，其中Intent 描述了要启动的服务Service</li><li>传递广播(Broadcast)： 广播是任何应用均可接收的消息，通过 sendBroadcast(Intent )可以将广播传递给其他应用</li></ul><blockquote><p>app.startActivity(options) 启动Activity</p></blockquote><p>在Auto.js中，提供了与Intent(意图) 相关的进阶函数startActivity和sendBroadcast，它们可完成app模块没有内置的应用交互功能</p><p>app.startActivity(options)根据options选项构造一个Intent对象，并启动相应的Activity</p><p>其中，options选项有：</p><ul><li>action {string} 要完成的动作，如”android.intent.action.SEND”</li><li>ps. 当action以”android.intent.action”开头时，可以省略前缀，直接用”SEND”</li><li>category {Array} 意图的类别，比较少用</li><li>packageName {string} 目标包名</li><li>className {string} 目标Activity或Service等组件的名称</li><li>type {string} 表示和该意图直接相关的数据的类型，如”text/plain”为纯文本类型</li><li>data {string}如要打开一个文件, action为”android.intent.action.VIEW”, data为”file:///sdcard/1.txt”。</li><li>extras {Object} 额外信息,如发送邮件时的邮件标题、邮件正文</li><li>flags {Array} intent的标识，字符串数组，例如[“activity_new_task”, “grant_read_uri_permission”]</li><li>root {Boolean} 是否以root权限启动、发送该intent</li></ul><blockquote><p>options(即intent的参数)如何获取？</p></blockquote><p>className（即Activity）、packageName通过Auto.js自带的布局分析获取<br>category、action等可以通过例如”intent记录”，”隐式启动”等应用拦截内部intent或者查询暴露的intent。<br>下载<br><a href="https://www.coolapk.com/apk/xyz.hanks.launchactivity">https://www.coolapk.com/apk/xyz.hanks.launchactivity</a><br>其中拦截内部intent需要XPosed框架，或者可以通过反编译等手段获取参数。总之，没有简单直接的方法。<br>举个例子：</p><p>例如，在某界面用Auto.js查询到应用包名com.netease.buff，当前活动</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.netease.buff.userCenter.pushSetting.PushSettingsActivity</span><br><span class="line">又使用“隐式启动”应用查询到Intent为</span><br><span class="line">Intent {</span><br><span class="line">act=android.intent.action.MAIN</span><br><span class="line">cat=[android.intent.category.NOTIFICATION_PREFERENCES]</span><br><span class="line">flg=<span class="number">0x14000040</span></span><br><span class="line">cmp=com.netease.buff/.userCenter.pushSetting.PushSettingsActivity</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotoOptions</span>(<span class="params"></span>) </span>{<span class="comment">//打开设置页面</span></span><br><span class="line">    app.startActivity({</span><br><span class="line">        <span class="attr">action</span>: <span class="string">"android.intent.action.MAIN"</span>,</span><br><span class="line">        <span class="attr">packageName</span>: <span class="string">"com.netease.buff"</span>,</span><br><span class="line">        <span class="attr">className</span>: <span class="string">"com.netease.buff.userCenter.pushSetting.PushSettingsActivity"</span>,</span><br><span class="line">        <span class="attr">category</span>: [android.intent.category.NOTIFICATION_PREFERENCES]</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">gotoOptions();</span><br></pre></td></tr></tbody></table></figure><p>注意，此方法有一个限制和缺点，使用此方法，填入的action必须满足android.intent.action.XXX 的格式</p><p>例如有时，在“隐式启动”应用中，得到的intent信息如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent {</span><br><span class="line">act=DELIVERY</span><br><span class="line">flg=<span class="number">0x14000040</span></span><br><span class="line">cmp=com.netease.buff/.entry.SplashActivity</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>若继续将这里的DELIVERY 填入action，则会出错（因为上面介绍过，如果写action: “DELIVERY”，将会被startActivity自动补全为action: “android.intent.action.DELIVERY”，然而很明显没有这个action）</p><h3 id="用Shell命令（似乎后一种更简洁方便）"><a href="#用Shell命令（似乎后一种更简洁方便）" class="headerlink" title="用Shell命令（似乎后一种更简洁方便）"></a>用Shell命令（似乎后一种更简洁方便）</h3><p>我们另寻出路：因为给出了cmp（即component）参数，可尝试用用Shell命令启动Activity<br>打开应用或Activity的另一种方法是：通过AndroidStudio的Shell命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell('am start -p com.tencent.mm');</span><br></pre></td></tr></tbody></table></figure><p>启动微信，这里使用了Shell命令中的am命令，shell即Unix Shell，是在类Unix系统提供的一系列命令。<br>在Auto.js大致等同于用adb执行命令”adb shell”，有两种执行shell命令的方式：</p><ul><li>shell函数：一次性执行单条命令。<br>  一般格式shell(cmd[, root])，[root]{Boolean} 表示是否以root权限运行，默认为false</li><li>Shell对象：一般用于需要执行多条命令的情况，这时Shell对象效率更高。（因为每次运行shell函数都会打开一个单独的shell进程，而Shell对象自始至终使用同一个shell进程）<br>  一般格式new Shell(root)、Shell.exec(cmd)、Shell.exit()等，详见官方文档</li><li>Shell之am命令：Activity Manager<br>  am命令即Activity Manager命令，用于管理应用程序活动、服务等。<br>  以下命令均以”am “开头，例如shell(‘am start -p com.tencent.mm’);</li><li>start [options] intent：启动 intent 指定的 Activity<br>  option常用参数（可以不填）：参见官方文档；<br>  intent常用参数：<ul><li>a action</li><li>n component，指定组件名称，如“com.example.app/.ExampleActivity”，注意，这里的component参数是上面的startActivity所没有的，这个参数的获取来自于“隐式启动”应用中”cmp”的值</li><li>c category</li><li>f flags</li><li>t Mime_type<br>  d data_uri</li></ul></li></ul><p>举个例子：</p><p>在“隐式启动”应用中，得到的intent信息如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent {</span><br><span class="line">act=DELIVERY</span><br><span class="line">flg=<span class="number">0x14000040</span></span><br><span class="line">cmp=com.netease.buff/.entry.SplashActivity</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>故对应的Shell命令如下</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell(<span class="string">'am start -a DELIVERY -f 0x14000040 -n com.netease.buff/.entry.SplashActivity'</span>);</span><br></pre></td></tr></tbody></table></figure><p>法一转换为法二<br>另外，可以用法一中的option来构造一个Intent，并转换为对应的shell的intent命令的参数——app.intentToShell(options)，示例</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell("am start " + app.intentToShell({</span><br><span class="line">packageName: “org.autojs.autojs”,</span><br><span class="line">className: “org.autojs.autojs.ui.settings.SettingsActivity_”</span><br><span class="line">}), true);</span><br></pre></td></tr></tbody></table></figure><h2 id="微信意图"><a href="#微信意图" class="headerlink" title="微信意图"></a>微信意图</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转扫一扫</span></span><br><span class="line">context.startActivity(app.intent({</span><br><span class="line">    <span class="attr">action</span>: <span class="string">"VIEW"</span>,</span><br><span class="line">    <span class="attr">className</span>:<span class="string">"com.tencent.mm.ui.LauncherUI"</span>,</span><br><span class="line">    <span class="attr">packageName</span>:<span class="string">"com.tencent.mm"</span>,</span><br><span class="line">    <span class="attr">extras</span>: {</span><br><span class="line">        <span class="string">"LauncherUI.From.Scaner.Shortcut"</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}).setFlags(<span class="number">335544320</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="支付宝意图"><a href="#支付宝意图" class="headerlink" title="支付宝意图"></a>支付宝意图</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转支付宝页面</span></span><br><span class="line">app.startActivity({</span><br><span class="line">    <span class="attr">packageName</span>: <span class="string">'com.eg.android.AlipayGphone'</span>,</span><br><span class="line">    <span class="attr">action</span>: <span class="string">"VIEW"</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">"alipays://platformapi/startapp?saId=20000167"</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小程序</span></span><br><span class="line"><span class="comment"> * 修改上面的saId即可</span></span><br><span class="line"><span class="comment"> * 60000002 蚂蚁森林</span></span><br><span class="line"><span class="comment"> * 20000008 跳转支付宝登录界面</span></span><br><span class="line"><span class="comment"> * 20000141 跳转修改名字</span></span><br><span class="line"><span class="comment"> * 20000031 跳转修改头像</span></span><br><span class="line"><span class="comment"> * 20000116 跳转支付宝付款</span></span><br><span class="line"><span class="comment"> * 60000006 附近优惠</span></span><br><span class="line"><span class="comment"> * 60000012 中小学</span></span><br><span class="line"><span class="comment"> * 60000023 蚂蚁保险</span></span><br><span class="line"><span class="comment"> * 60000024 彩票游戏,不对所有用户开放</span></span><br><span class="line"><span class="comment"> * 60000029 口碑排行榜</span></span><br><span class="line"><span class="comment"> * 60000032 添加第一张证件 各类证件齐管理</span></span><br><span class="line"><span class="comment"> * 60000033 in贴纸商城</span></span><br><span class="line"><span class="comment"> * 60000039 超值抢购</span></span><br><span class="line"><span class="comment"> * 60000040 未来酒店</span></span><br><span class="line"><span class="comment"> * 60000044 权益区 无法加载</span></span><br><span class="line"><span class="comment"> * 60000047 校园头条 无法加载,可能缺少参数</span></span><br><span class="line"><span class="comment"> * 60000052 手机通讯录备份 未对所有用户开放</span></span><br><span class="line"><span class="comment"> * 60000057 阿里宝卡</span></span><br><span class="line"><span class="comment"> * 60000071 天天有料</span></span><br><span class="line"><span class="comment"> * 60000076 VIP预约服务 无法加载,可能我不是VIP的原因</span></span><br><span class="line"><span class="comment"> * 60000077 优酷会员首页</span></span><br><span class="line"><span class="comment"> * 60000081 商家服务</span></span><br><span class="line"><span class="comment"> * 60000091 花呗</span></span><br><span class="line"><span class="comment"> * 60000103 支付周奖励金列表页</span></span><br><span class="line"><span class="comment"> * 60000105 我的银行卡 管理页</span></span><br><span class="line"><span class="comment"> * 60000120 福员外 不知道干嘛的</span></span><br><span class="line"><span class="comment"> * 60000125 租房</span></span><br><span class="line"><span class="comment"> * 60000126 余额宝</span></span><br><span class="line"><span class="comment"> * 60000130 淘票票</span></span><br><span class="line"><span class="comment"> * 60000134 外币兑换 服务正在升级</span></span><br><span class="line"><span class="comment"> * 60000135 飞猪汽车票</span></span><br><span class="line"><span class="comment"> * 60000145 阿里巴巴认证中心</span></span><br><span class="line"><span class="comment"> * 60000146 寄快递</span></span><br><span class="line"><span class="comment"> * 60000148 财富号</span></span><br><span class="line"><span class="comment"> * 60000150 我的口碑</span></span><br><span class="line"><span class="comment"> * 60000153 注销账号 注销支付宝账号用的</span></span><br><span class="line"><span class="comment"> * 60000154 AA收款</span></span><br><span class="line"><span class="comment"> * 60000155 共享单车</span></span><br><span class="line"><span class="comment"> * 60000156 支付宝红包~这个应该也是缺少参数</span></span><br><span class="line"><span class="comment"> * 60000160 稳健收益  应该是理财类的东西 </span></span><br><span class="line"><span class="comment"> * 60000161 蚂蚁会员周周乐</span></span><br><span class="line"><span class="comment"> * 60000162 彩虹星愿 应该是教育孩子的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="pro8"><a href="#pro8" class="headerlink" title="pro8"></a>pro8</h1><h2 id="http-put"><a href="#http-put" class="headerlink" title="http put"></a>http put</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">  .request(url, {</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"PUT"</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify({</span><br><span class="line">      <span class="attr">access_token</span>: access_token,</span><br><span class="line">      <span class="attr">content</span>: android.util.Base64.encodeToString(files.readBytes(path), <span class="number">2</span>),</span><br><span class="line">      <span class="attr">sha</span>: fileinfo.sha,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">"更新文件"</span>,</span><br><span class="line">    }),</span><br><span class="line">    <span class="attr">headers</span>: {</span><br><span class="line">      <span class="string">"Content-Type"</span>: <span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">  .body.json();</span><br></pre></td></tr></tbody></table></figure><h2 id="事件与监听-Events"><a href="#事件与监听-Events" class="headerlink" title="事件与监听 - Events"></a>事件与监听 - Events</h2><h2 id="控制台-Console"><a href="#控制台-Console" class="headerlink" title="控制台 - Console"></a>控制台 - Console</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 新线程中启动控制台</span></span><br><span class="line">threads.start(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (isShowConsole) {</span><br><span class="line">        <span class="built_in">console</span>.show();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示控制台</span></span><br><span class="line"><span class="built_in">console</span>.show();</span><br><span class="line"><span class="built_in">console</span>.verbose(<span class="string">"这是灰色"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"这是黑色"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"这是红色"</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"这是蓝色"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"这是绿色=_="</span>);</span><br><span class="line"><span class="built_in">console</span>.trace(<span class="string">"打印日志行数"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.setSize(<span class="number">1000</span>, <span class="number">1000</span>);<span class="comment">//调整大小</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.setPosition(<span class="number">0</span>, <span class="number">500</span>); <span class="comment">//调整位置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.hide();   <span class="comment">//隐藏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存日志</span></span><br><span class="line"><span class="built_in">console</span>.setGlobalLogConfig({</span><br><span class="line">    <span class="attr">file</span>: <span class="string">"/sdcard/脚本/log.txt"</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"保存截图的时间"</span>);</span><br><span class="line">images.save(img, <span class="string">"/sdcard/3.png"</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"保存截图的时间"</span>);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="本地储存-Storages"><a href="#本地储存-Storages" class="headerlink" title="本地储存 - Storages"></a>本地储存 - Storages</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数组和对象</span></span><br><span class="line"><span class="keyword">var</span> storage = storages.create(<span class="string">"Auto.js例子:复杂数据"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"Auto.js"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"www.autojs.org"</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">storage.put(<span class="string">"arr"</span>, arr);</span><br><span class="line">storage.put(<span class="string">"obj"</span>, obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.show();</span><br><span class="line"><span class="comment">//取出</span></span><br><span class="line">log(<span class="string">"arr = "</span>, storage.get(<span class="string">"arr"</span>));</span><br><span class="line">log(<span class="string">"obj = "</span>, storage.get(<span class="string">"obj"</span>));</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="dex"><a href="#dex" class="headerlink" title="dex"></a>dex</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载目标dex文件，加载成功后将可以使用该dex文件的类。</span></span><br><span class="line">runtime.loadDex(filePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// package com.keke;      </span></span><br><span class="line"><span class="comment">// public class YaShu {}</span></span><br><span class="line">importClass(com.keke.YaShu);  <span class="comment">//导入类</span></span><br></pre></td></tr></tbody></table></figure><h2 id="多线程-Threads"><a href="#多线程-Threads" class="headerlink" title="多线程 - Threads"></a>多线程 - Threads</h2><p>threads.start(action)<br>    启动一个新线程并执行action。返回 {Thread}<br>    action {Function} 要在新线程执行的函数</p><h2 id="悬浮窗-Floaty"><a href="#悬浮窗-Floaty" class="headerlink" title="悬浮窗 - Floaty"></a>悬浮窗 - Floaty</h2><h3 id="FloatyWindow对象"><a href="#FloatyWindow对象" class="headerlink" title="FloatyWindow对象"></a>FloatyWindow对象</h3><p><strong>floaty.window(layout)</strong><br>    layout {xml} | {View} 悬浮窗界面的XML或者View<br>    指定悬浮窗的布局，创建并显示一个悬浮窗，返回一个FloatyWindow对象。</p><p><strong>方法</strong><br>    window.setAdjustEnabled(enabled)  是否启用悬浮窗调整(大小、位置)<br>    window.setPosition(x, y)   设置悬浮窗位置。<br>    window.getX()   返回悬浮窗位置的X坐标。<br>    window.getY()<br>    window.setSize(width, height)   设置悬浮窗宽高。<br>    window.getWidth()    返回悬浮窗宽度。<br>    window.getHeight()<br>    window.close()    关闭悬浮窗。如果悬浮窗已经是关闭状态，则此函数将不执行任何操作。被关闭后的悬浮窗不能再显示。<br>    window.exitOnClose()   使悬浮窗被关闭时自动结束脚本运行。</p><h3 id="FloatyRawWindow对象"><a href="#FloatyRawWindow对象" class="headerlink" title="FloatyRawWindow对象"></a>FloatyRawWindow对象</h3><p><strong>floaty.rawWindow(layout)</strong><br>    layout {xml} | {View} 悬浮窗界面的XML或者View<br>    指定悬浮窗的布局，创建并显示一个原始悬浮窗，返回一个FloatyRawWindow对象。</p><pre><code>与floaty.window()函数不同的是，该悬浮窗不会增加任何额外设施（例如调整大小、位置按钮），您可以根据自己需要编写任何布局。</code></pre><p><strong>方法</strong><br>    window.setTouchable(touchable)<br>    window.setPosition(x, y)<br>    window.getX()<br>    window.getY()<br>    window.setSize(width, height)<br>    window.getWidth()<br>    window.getHeight()<br>    window.close()<br>    window.exitOnClose()</p><h2 id="对话框-Dialogs"><a href="#对话框-Dialogs" class="headerlink" title="对话框 - Dialogs"></a>对话框 - Dialogs</h2><p>dialogs.alert(title[, content, callback])</p><p>dialogs.confirm(title[, content, callback])<br>dialogs.rawInput(title[, prefill, callback])<br>dialogs.input(title[, prefill, callback])<br>dialogs.prompt(title[, prefill, callback])</p><p>dialogs.select(title, items, callback)<br>    显示一个带有选项列表的对话框<br>    title {string} 对话框的标题。<br>    items {Array} 对话框的选项列表，是一个字符串数组。<br>    callback {Function} 回调函数，可选。当用户点击确定时被调用,一般用于ui模式。</p><p>dialogs.singleChoice(title, items[, index, callback])<br>dialogs.multiChoice(title, items[, indices, callback])<br>dialog.setDefaultDialogType(type)<br>dialogs.build(properties)</p><h2 id="ui"><a href="#ui" class="headerlink" title="ui"></a>ui</h2><h3 id="视图-View"><a href="#视图-View" class="headerlink" title="视图: View"></a>视图: View</h3><h3 id="视图属性"><a href="#视图属性" class="headerlink" title="视图属性"></a>视图属性</h3><p>w  View的宽度，是属性width的缩写形式。可以设置的值为*, auto和具体数值。<br>h  View的高度，是属性height的缩写形式。可以设置的值为*, auto和具体数值。<br>id   在代码中可以通过一个View的id来获取到这个View，并对他进行操作(设置点击动作、设置属性、获取属性等)<br>gravity  View的”重力”。用于决定View的内容相对于View的位置，可以设置的值为:<br>    left 靠左<br>    right 靠右<br>    top 靠顶部<br>    bottom 靠底部<br>    center 居中<br>    center_vertical 垂直居中<br>    center_horizontal 水平居中<br>layout_gravity  View在布局中的”重力”，用于决定View本身在他的父布局的位置，可以设置的值和gravity属性相同。</p><p>bg  View的背景。其值可以是一个链接或路径指向的图片，或者RGB格式的颜色，或者其他背景。<br>alpha  View的透明度，其值是一个0~1之间的小数，0表示完全透明，1表示完全不透明。<br>foreground  View的前景。前景即在一个View的内容上显示的内容，可能会覆盖掉View本身的内容。其值和属性bg的值类似。<br>minHeight  View的最小高度。<br>minWidth<br>visibility  View的可见性，<br><strong>style</strong>  设置View的样式。<br>rotation  View的旋转角度。通过该属性可以让这个View顺时针旋转一定的角度。<br>transformPivotX<br>transformPivotY<br>margin<br>marginLeft<br>marginRight<br>marginTop<br>marginBottom<br>padding<br>paddingLeft<br>paddingRight<br>paddingTop<br>paddingBottom</p><h3 id="对视图的操作"><a href="#对视图的操作" class="headerlink" title="对视图的操作"></a>对视图的操作</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取视图对象，通过视图view的id</span></span><br><span class="line">ui.[id]</span><br><span class="line">ui.findView(<span class="string">'id'</span>)</span><br><span class="line">$ui.findView(<span class="string">'id'</span>)</span><br></pre></td></tr></tbody></table></figure><p>ui.[id].getText()     //获取到这个按钮控件的文本内容<br>.setText()<br>.setDataSource(数组)    //获取数组元素</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对控件设置监听</span></span><br><span class="line">ui.fab.setOnClickListener(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">view</span>)</span>{</span><br><span class="line">    toastLog(<span class="string">'你点击了fab'</span>)</span><br><span class="line">  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><p>文本控件: text<br>    text<br>    textColor<br>    textSize<br>    textStyle<br>    lines<br>    maxLines<br>    typeface<br>    ellipsize<br>    ems<br>    autoLink<br>按钮控件: button<br>输入框控件: input<br>    hint<br>    textColorHint<br>    textSizeHint<br>    inputType<br>    password<br>    numeric<br>    phoneNumber<br>    digit<br>    singleLine<br>图片控件: img<br>    src<br>    tint<br>    scaleType<br>    radius<br>    radiusTopLeft<br>    radiusTopRight<br>    radiusBottomLeft<br>    radiusBottomRight<br>    borderWidth<br>    borderColor<br>    circle<br>垂直布局: vertical<br>layout_weight<br>水平布局: horizontal<br>layout_weight<br>线性布局: linear<br>帧布局: frame<br>相对布局: relative<br>勾选框控件: checkbox<br>选择框控件: radio<br>选择框布局: radiogroup<br>开关控件: Switch<br>checked<br>text<br>进度条控件: progressbar<br>拖动条控件: seekbar<br>下来菜单控件: spinner<br>时间选择控件: timepicker<br>日期选择控件: datepicker<br>浮动按钮控件: fab<br>标题栏控件: toolbar<br>卡片: card</p><h3 id="在ui使用webview"><a href="#在ui使用webview" class="headerlink" title="在ui使用webview"></a>在ui使用webview</h3><p>一个ui界面再调用另一个ui，把另一个ui封装成函数再调用，不需要另开一个线程</p><p>在ui使用webview</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击打开网页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">webview</span> <span class="attr">id</span>=<span class="string">"web"</span>&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">ui.btn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  ui.web.loadUrl(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="用MCV框架实现界面切换"><a href="#用MCV框架实现界面切换" class="headerlink" title="用MCV框架实现界面切换"></a>用MCV框架实现界面切换</h1><p>● M即model模型是指模型表示业务规则<br>● V即View视图是指用户看到并与之交互的界面<br>● C即controller控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求</p><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./controller"</span>).init();</span><br></pre></td></tr></tbody></table></figure><h2 id="model-js"><a href="#model-js" class="headerlink" title="model.js"></a>model.js</h2><p>数据模型和业务逻辑;</p><p>验证登录</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> UserModel = <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.username = username;</span><br><span class="line">  <span class="built_in">this</span>.password = password;</span><br><span class="line">  <span class="built_in">this</span>.vip = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">this</span>.login = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.username === <span class="string">"admin"</span> &amp;&amp; <span class="built_in">this</span>.password === <span class="string">"123"</span>) {</span><br><span class="line">      <span class="built_in">this</span>.vip = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.username === <span class="string">"user"</span> &amp;&amp; <span class="built_in">this</span>.password === <span class="string">"123"</span>) {</span><br><span class="line">      <span class="built_in">this</span>.vip = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">UserModel</span>: UserModel,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="controller-js"><a href="#controller-js" class="headerlink" title="controller.js"></a>controller.js</h2><p>用来调度View层和Model层, 用来将不同的View和不同的Model组织在一起，顺便替双方传递消息;</p><p>把登录的数据交给model处理, 显示对应的界面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="built_in">require</span>(<span class="string">"./view"</span>);</span><br><span class="line"><span class="keyword">let</span> model = <span class="built_in">require</span>(<span class="string">"./model"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  init,</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>{</span><br><span class="line">  loadLoginPage();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadLoginPage</span>(<span class="params"></span>) </span>{</span><br><span class="line">  ui.layout(view.LoginPage);</span><br><span class="line">  loginPageAction();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadHomePage</span>(<span class="params">user</span>) </span>{</span><br><span class="line">  ui.layout(view.HomePage);</span><br><span class="line">  user.vip &amp;&amp; ui.vipComponentParent.addView(ui.inflate(view.VipComponent));</span><br><span class="line">  homePageAction(user);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginPageAction</span>(<span class="params"></span>) </span>{</span><br><span class="line">  ui.login.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> username = ui.username.text();</span><br><span class="line">    <span class="keyword">let</span> password = ui.password.text();</span><br><span class="line">    <span class="keyword">if</span> (!username) {</span><br><span class="line">      toastLog(<span class="string">"username is empty"</span>);</span><br><span class="line">      ui.username.setError(<span class="string">"username is empty"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!password) {</span><br><span class="line">      toastLog(<span class="string">"password is empty"</span>);</span><br><span class="line">      ui.password.setError(<span class="string">"password is empty"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">new</span> model.UserModel(username, password);</span><br><span class="line">    <span class="keyword">let</span> loginResult = user.login();</span><br><span class="line">    <span class="keyword">if</span> (loginResult) {</span><br><span class="line">      loadHomePage(user);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      toastLog(<span class="string">"login failed"</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">homePageAction</span>(<span class="params">user</span>) </span>{</span><br><span class="line">  ui.username.text(user.username);</span><br><span class="line">  ui.logout.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    loadLoginPage();</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="view-js"><a href="#view-js" class="headerlink" title="view.js"></a>view.js</h2><p>未登录页面和登录页面的xml文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> LoginPage = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">"30"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"username"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">w</span>=<span class="string">"*"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"password"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">w</span>=<span class="string">"*"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> HomePage = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">"30"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"homepage"</span> <span class="attr">w</span>=<span class="string">"*"</span> <span class="attr">gravity</span>=<span class="string">"center"</span> <span class="attr">textStyle</span>=<span class="string">"bold"</span> <span class="attr">textSize</span>=<span class="string">"40sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"username: "</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">linear</span> <span class="attr">id</span>=<span class="string">"vipComponentParent"</span>&gt;</span><span class="tag">&lt;/<span class="name">linear</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"logout"</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> VipComponent = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">" vip"</span> <span class="attr">textColor</span>=<span class="string">"#ff5722"</span> <span class="attr">w</span>=<span class="string">"*"</span> <span class="attr">textStyle</span>=<span class="string">"bold"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">LoginPage</span>: LoginPage,</span><br><span class="line">  <span class="attr">HomePage</span>: HomePage,</span><br><span class="line">  <span class="attr">VipComponent</span>: VipComponent,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="autojspro"><a href="#autojspro" class="headerlink" title="autojspro"></a>autojspro</h1><h2 id="opencv-autojs常用命令"><a href="#opencv-autojs常用命令" class="headerlink" title="opencv-autojs常用命令"></a>opencv-autojs常用命令</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/yur8h8">https://www.yuque.com/yashujs/bfug6u/yur8h8</a></p><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>多线程属于同一个进程，同一个进程，申请一次截图权限就可以<br>脚本引擎 - Engines模块，启动的脚本属于不同的进程</p><p>2个线程找图做任务，captureScreen 截图给不同的变量，为啥会有一个提示图片被回收？<br>给变量了，只是内存地址被引用。可以用clone方法处理</p><h1 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h1><p>所有的学习笔记，开源项目，还有博客均已经在GitHub开源，链接地址：<a href="https://github.com/yangchong211/YCBlogs">https://github.com/yangchong211/YCBlogs</a><br>关于案例已经开源，开源地址：<a href="https://github.com/yangchong211">https://github.com/yangchong211</a></p><h2 id="1-Paint画笔介绍"><a href="#1-Paint画笔介绍" class="headerlink" title="1.Paint画笔介绍"></a>1.Paint画笔介绍</h2><p>Paint即画笔，在绘图过程中起到了极其重要的作用，画笔主要保存了颜色， 样式等绘制信息，指定了如何绘制文本和图形，画笔对象有很多设置方法，大体上可以分为两类，一类与图形绘制相关，一类与文本绘制相关。</p><h3 id="1-1-图形绘制"><a href="#1-1-图形绘制" class="headerlink" title="1.1 图形绘制"></a>1.1 图形绘制</h3><p>常用的方法有这些</p><ul><li>setARGB(int a,int r,int g,int b);<br>设置绘制的颜色，a代表透明度，r，g，b代表颜色值。 </li><li>setAlpha(int a);<br>设置绘制图形的透明度。</li><li>setColor(int color);<br>设置绘制的颜色，使用颜色值来表示，该颜色值包括透明度和RGB颜色。 </li><li>setAntiAlias(boolean aa);<br>设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。 </li><li>setDither(boolean dither);<br>设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰 </li><li>setFilterBitmap(boolean filter);<br>如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置 </li><li>setMaskFilter(MaskFilter maskfilter);<br>设置MaskFilter，可以用不同的MaskFilter实现滤镜的效果，如滤化，立体等 </li><li>setColorFilter(ColorFilter colorfilter);<br>设置颜色过滤器，可以在绘制颜色时实现不用颜色的变换效果 </li><li>setPathEffect(PathEffect effect);<br>设置绘制路径的效果，如点画线等 </li><li>setShader(Shader shader);<br>设置图像效果，使用Shader可以绘制出各种渐变效果 </li><li>setShadowLayer(float radius ,float dx,float dy,int color);<br>在图形下面设置阴影层，产生阴影效果，radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色 </li><li>setStyle(Paint.Style style);<br>设置画笔的样式，为FILL，FILL_AND_STROKE，或STROKE </li><li>setStrokeCap(Paint.Cap cap);<br>当画笔样式为STROKE或FILL_AND_STROKE时，设置笔刷的图形样式，如圆形样式  Cap.ROUND,或方形样式Cap.SQUARE </li><li>setSrokeJoin(Paint.Join join);<br>设置绘制时各图形的结合方式，如平滑效果等 </li><li>setStrokeWidth(float width);<br>当画笔样式为STROKE或FILL_AND_STROKE时，设置笔刷的粗细度 </li><li>setXfermode(Xfermode xfermode);<br>设置图形重叠时的处理方式，如合并，取交集或并集，经常用来制作橡皮的擦除效果 <h3 id="1-2-文本绘制"><a href="#1-2-文本绘制" class="headerlink" title="1.2 文本绘制"></a>1.2 文本绘制</h3></li></ul><p>常用的方法有这些</p><ul><li>setFakeBoldText(boolean fakeBoldText);<br>模拟实现粗体文字，设置在小字体上效果会非常差 </li><li>setSubpixelText(boolean subpixelText);<br>设置该项为true，将有助于文本在LCD屏幕上的显示效果 </li><li>setTextAlign(Paint.Align align);<br>设置绘制文字的对齐方向 </li><li>setTextScaleX(float scaleX);<br>设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果 </li><li>setTextSize(float textSize);<br>设置绘制文字的字号大小 </li><li>setTextSkewX(float skewX);<br>设置斜体文字，skewX为倾斜弧度 </li><li>setTypeface(Typeface typeface);<br>设置Typeface对象，即字体风格，包括粗体，斜体以及衬线体，非衬线体等 </li><li>setUnderlineText(boolean underlineText);<br>设置带有下划线的文字效果 </li><li>setStrikeThruText(boolean strikeThruText);<br>设置带有删除线的效果 <h2 id="2-Canvas画布介绍"><a href="#2-Canvas画布介绍" class="headerlink" title="2.Canvas画布介绍"></a>2.Canvas画布介绍</h2></li></ul><p>当我们调整好画笔之后，现在需要绘制到画布上，这就得用Canvas类了。在android中既然把Canvas当做画布，那么就可以在画布上绘制我们想要的任何东西。除了在画布上绘制之外，还需要设置一些关于画布的属性，比如，画布的颜色、尺寸等。</p><h3 id="2-1-设置属性"><a href="#2-1-设置属性" class="headerlink" title="2.1 设置属性"></a>2.1 设置属性</h3><p>一般属性有：</p><ul><li>Canvas(Bitmap bitmap): 以bitmap对象创建一个画布，则将内容都绘制在bitmap上，因此bitmap不得为null。</li><li>Canvas(GL gl): 在绘制3D效果时使用，与OpenGL相关。</li><li>isOpaque(boolean isOpaque)：检测是否支持透明。</li><li>setViewport(int left, int top, int right, int bottom, int clipflag):  设置画布中显示窗口。</li><li>drawColor(int color): 设置Canvas的背景颜色。</li><li>setBitmap(Bitmap mBitmap):  设置具体画布，画的内容，保存为一个Bitmap。</li><li>clipRect(float left, float top, float right, float bottom): 设置显示区域，即设置裁剪区。</li><li>translate(float x, float  y): 平移画布。</li><li>rotate(float degree, float px, float py):  旋转画布 。</li><li>skew(float sx, float sy):  设置偏移量。 </li><li>save(): 将Canvas当前状态保存在堆栈，save之后可以调用Canvas的平移、旋转、错切、剪裁等操作。</li><li>restore(): 恢复为之前堆栈保存的Canvas状态，防止save后对Canvas执行的操作对后续的绘制有影响。restore和save要配对使用，restore可以比save少，但不能比save多，否则会引发error。save和restore之间，往往夹杂的是对Canvas的特殊操作。</li><li>save(int num)：将Canvas当前状态保存在堆栈，并予以编号int</li><li>restoreToCount(int num)：恢复为之前堆栈保存的编号为int的Canvas状态</li><li>concat(Matrix matrix)：画布关联矩阵，画出来的内容按矩阵改变，而不是画布改变。</li><li>Drawable.draw(Canvas canvas)：将Drawable画到Canvas中<br>注：这种方式画Drawable怎么设置透明度呢？((BitmapDrawable)Drawable).getPaint().setAlpha(mBgAlpha);<h3 id="2-2-画图【重点】"><a href="#2-2-画图【重点】" class="headerlink" title="2.2 画图【重点】"></a>2.2 画图【重点】</h3></li></ul><p>画图部分</p><ul><li> canvas.drawPaint(Paint paint)<br>将画笔设置的颜色和透明度铺满画布</li><li>drawRect(RectF rect, Paint paint)<br>绘制矩形，参数一为RectF一个区域 </li><li>drawRect(float left, float top, float right, float bottom, Paint paint)<br>绘制矩形，left:矩形left的x坐标，top:矩形top的y坐标，right:矩形right的x坐标，bottom:矩形bottom的y坐标</li><li>drawRoundRect(RectF rect, float rx, float ry, Paint paint)<br>绘制圆角矩形， rx:x方向的圆角半径，ry:y方向的圆角半径</li><li>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint)        </li><li>drawPath(Path path, Paint paint)<br>绘制一个路径，参数一为Path路径对象</li><li>drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint)<br>贴图，参数一就是我们常规的Bitmap对象，参数二是源区域(这里是bitmap)，参数三是目标区域(应该在canvas的位置和大小)，参数四是Paint画刷对象，因为用到了缩放和拉伸的可能，当原始Rect不等于目标Rect时性能将会有大幅损失。</li><li>drawBitmap (Bitmap bitmap, float left, float top, Paint paint)</li><li>drawLine(float startX, float startY, float stopX, float stopY, Paintpaint)<br>画线，参数一起始点的x轴位置，参数二起始点的y轴位置，参数三终点的x轴水平位置，参数四y轴垂直位置，最后一个参数为Paint 画刷对象。 </li><li>drawPoint(float x, float y, Paint paint)<br>画点，参数一水平x轴，参数二垂直y轴，第三个参数为Paint对象。</li><li>drawText(String text, float x, floaty, Paint paint)<br>渲染文本，Canvas类除了上面的还可以描绘文字，参数一是String类型的文本，参数二文字左侧到x轴距离，参数三文字BaseLine到y轴距离，参数四是Paint对象。</li><li>drawOval(RectF oval, Paint paint)<br>绘制椭圆，参数一是扫描区域，参数二为paint对象</li><li>drawOval(float left, float top, float right, float bottom, Paint paint）</li><li>drawCircle(float cx, float cy, float radius,Paint paint)<br>绘制圆，参数一是中心点的x轴，参数二是中心点的y轴，参数三是半径，参数四是paint对象；</li><li>drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)<br>画弧，参数一是RectF对象，指定圆弧的外轮廓矩形区域，参数二是起始角(度)在电弧的开始，参数三扫描角(度)开始顺时针测量的，参数四是如果这是真的话,包括椭圆中心的电弧,并关闭它,如果它是假这将是一个弧线,参数五是Paint对象；<h3 id="2-3-Canvas对象的获取方式"><a href="#2-3-Canvas对象的获取方式" class="headerlink" title="2.3 Canvas对象的获取方式"></a>2.3 Canvas对象的获取方式</h3></li></ul><p>2.3.1 Canvas对象的获取方式有两种：<br>第一种通过重写View.onDraw方法，View中的Canvas对象会被当做参数传递过来，操作这个Canvas，效果会直接反应在View中。<br>第二种通过new创建一个Canvas对象<br>代码如下所示<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>}</p><p>Canvas canvas = new Canvas();</p><h3 id="2-4-Canvas的作用"><a href="#2-4-Canvas的作用" class="headerlink" title="2.4 Canvas的作用"></a>2.4 Canvas的作用</h3><p>Canvas可以绘制的对象有：弧线(arcs)、填充颜色(argb和color)、Bitmap、圆(circle和oval)、点(point)、线(line)、矩形(Rect)、图片(Picture)、圆角矩形(RoundRect)、文本(text)、顶点(Vertices)、路径(path)。</p><h3 id="2-5-Canvas绘制圆和椭圆"><a href="#2-5-Canvas绘制圆和椭圆" class="headerlink" title="2.5 Canvas绘制圆和椭圆"></a>2.5 Canvas绘制圆和椭圆</h3><p>绘制圆<br>private Paint paint = new Paint();</p><p>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.BLUE);<br>    paint.setStyle(Paint.Style.FILL);<br>    canvas.drawCircle(200,200,100 , paint);<br>}</p><h3 id="2-6-Canvas绘制矩形、圆角矩形"><a href="#2-6-Canvas绘制矩形、圆角矩形" class="headerlink" title="2.6 Canvas绘制矩形、圆角矩形"></a>2.6 Canvas绘制矩形、圆角矩形</h3><p>如下所示<br>image<br>private Paint paint = new Paint();</p><p>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.RED);<br>    paint.setStyle(Paint.Style.FILL);<br>    canvas.drawRect(100, 100, 200, 200, paint);<br>    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {<br>        canvas.drawRoundRect(400, 100, 600, 300, 30, 30, paint);<br>    }<br>    paint.setStyle(Paint.Style.STROKE);<br>    paint.setStrokeWidth(20);<br>    canvas.drawRect(100, 400, 300, 600, paint);<br>}</p><h3 id="2-7-Canvas绘制文字"><a href="#2-7-Canvas绘制文字" class="headerlink" title="2.7 Canvas绘制文字"></a>2.7 Canvas绘制文字</h3><p>Canvas绘制文字<br>image<br>private Paint paint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.RED);<br>    paint.setTextSize(100);<br>    canvas.drawText(“潇湘剑雨”, 100, 100, paint);<br>}</p><h3 id="2-8-Canvas绘制弧形、封闭弧形"><a href="#2-8-Canvas绘制弧形、封闭弧形" class="headerlink" title="2.8 Canvas绘制弧形、封闭弧形"></a>2.8 Canvas绘制弧形、封闭弧形</h3><p>绘制弧形、封闭弧形<br>image<br>private Paint paint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.RED);<br>    RectF rel = new RectF(50, 50, 150, 150);<br>    //实心圆弧<br>    canvas.drawArc(rel, 0, 135, false, paint);<br>    //实心圆弧 将圆心包含在内<br>    RectF rel2 = new RectF(50, 200, 150, 300);<br>    canvas.drawArc(rel2, 0, 135, true, paint);<br>    //设置空心Style<br>    paint.setStyle(Paint.Style.STROKE);<br>    paint.setStrokeWidth(20);<br>    RectF rel3 = new RectF(50, 350, 150, 450);<br>    canvas.drawArc(rel3, 0, 270, false, paint);<br>    RectF rel4 = new RectF(50, 250, 150, 600);<br>    canvas.drawArc(rel4, 0, 270, true, paint);<br>}</p><h3 id="2-9-Canvas绘制Path路径"><a href="#2-9-Canvas绘制Path路径" class="headerlink" title="2.9 Canvas绘制Path路径"></a>2.9 Canvas绘制Path路径</h3><p>Canvas绘制Path路径<br>image<br>private Paint paint = new Paint();<br>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    Path angle = new Path();<br>    angle.moveTo(250, 0);<br>    angle.lineTo(0, 500);<br>    angle.lineTo(100, 300);<br>    angle.lineTo(200, 350);<br>    angle.lineTo(500, 500);<br>    angle.close();<br>    canvas.drawPath(angle, paint);<br>}</p><h2 id="3-Matrix变换矩阵介绍【Canvas位置转换】"><a href="#3-Matrix变换矩阵介绍【Canvas位置转换】" class="headerlink" title="3.Matrix变换矩阵介绍【Canvas位置转换】"></a>3.Matrix变换矩阵介绍【Canvas位置转换】</h2><p>思考：如果要画一个仪表盘(数字围绕显示在一个圆圈中)，或者类似钟表指针样的控件，如何实现？<br>Android还提供了一些对Canvas位置转换的方法：rorate、scale、translate、skew(扭曲)等，而且它允许你通过获得它的转换矩阵对象(getMatrix方法)直接操作它。这些操作就像是虽然你的笔还是原来的地方画，但是画纸旋转或者移动了，所以你画的东西的方位就产生变化。为了方便一些转换操作，Canvas还提供了保存和回滚属性的方法(save和restore)，比如你可以先保存目前画纸的位置(save)，然后旋转90度，向下移动100像素后画一些图形，画完后调用restore方法返回到刚才保存的位置。<br>3.1 translate平移</p><p>3.2 rorate旋转</p><p>rorate旋转<br>image<br>private Paint mPaint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    canvas.drawColor(Color.BLUE);<br>    mPaint.setColor(Color.RED);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    canvas.save();<br>    mPaint.setColor(Color.GREEN);<br>    canvas.rotate(45,400,400);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    canvas.restore();<br>}<br>源代码有两个可以使用的方法：<br>/**  </p><ul><li>Preconcat the current matrix with the specified rotation.  </li><li>@param degrees The amount to rotate, in degrees  </li><li>/<br>public native void rotate(float degrees);<br>/**  </li><li>Preconcat the current matrix with the specified rotation.   </li><li>@param degrees The amount to rotate, in degrees  </li><li>@param px The x-coord for the pivot point (unchanged by the rotation)  </li><li>@param py The y-coord for the pivot point (unchanged by the rotation)  </li><li>/<br>public final void rotate(float degrees, float px, float py) {<br>  translate(px, py);<br>  rotate(degrees);<br>  translate(-px, -py);<br>}  </li></ul><p>3.3 scale缩放</p><p>scale缩放<br>image<br>private Paint mPaint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    canvas.drawColor(Color.YELLOW);<br>    mPaint.setColor(Color.RED);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    // 保存画布状态<br>    canvas.save();<br>    canvas.scale(0.5f, 0.5f);<br>    mPaint.setColor(Color.GREEN);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    // 画布状态回滚<br>    canvas.restore();<br>    canvas.scale(0.5f, 0.5f, 400, 400);<br>    mPaint.setColor(Color.BLUE);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>}<br>源码如下所示<br>/**  </p><ul><li>Preconcat the current matrix with the specified scale.   </li><li>@param sx The amount to scale in X  </li><li>@param sy The amount to scale in Y  </li><li>/<br>public native void scale(float sx, float sy);  </li></ul><p>/**  </p><ul><li>Preconcat the current matrix with the specified scale.  </li><li>@param sx The amount to scale in X  </li><li>@param sy The amount to scale in Y  </li><li>@param px The x-coord for the pivot point (unchanged by the scale)  </li><li>@param py The y-coord for the pivot point (unchanged by the scale)  </li><li>/<br>public final void scale(float sx, float sy, float px, float py) {<br>  translate(px, py);<br>  scale(sx, sy);<br>  translate(-px, -py);<br>}  </li></ul><p>3.4 skew扭曲</p><p>4.RectF介绍</p><p>4.1 Rect简单属性</p><p>这是一个我们常用的一个“绘画相关的工具类”，常用语描述长方形/正方形，他只有4个属性<br>public int left;<br>public int top;<br>public int right;<br>public int bottom;<br>其中常用的构造方法如下所示<br>public Rect(int left, int top, int right, int bottom) {<br>    this.left = left;<br>    this.top = top;<br>    this.right = right;<br>    this.bottom = bottom;<br>}</p><p>public Rect(Rect r) {<br>    if (r == null) {<br>        left = top = right = bottom = 0;<br>    } else {<br>        left = r.left;<br>        top = r.top;<br>        right = r.right;<br>        bottom = r.bottom;<br>    }<br>}<br>这4个属性描述着这一个“方块”，但是这有一个知识点需要理清楚，先看这张图<br>image<br>4.2 Rect父类的实现</p><p>实现了Parcelable 所以需要实现一堆Object的方法，诸如equals，toString等等，来简单看一看<br>对于equals方法，首先先对传来的对象进行判空，类型判断，再强转成Rect对象，最后还是一个个去比对那4个属性。<br>@Override<br>public boolean equals(Object o) {<br>    if (this == o) return true;<br>    if (o == null || getClass() != o.getClass()) return false;</p><pre><code>Rect r = (Rect) o;return left == r.left &amp;&amp; top == r.top &amp;&amp; right == r.right &amp;&amp; bottom == r.bottom;</code></pre><p>}</p><p>@Override<br>public int hashCode() {<br>    int result = left;<br>    result = 31 * result + top;<br>    result = 31 * result + right;<br>    result = 31 * result + bottom;<br>    return result;<br>}</p><p>@Override<br>public String toString() {<br>    StringBuilder sb = new StringBuilder(32);<br>    sb.append(“Rect(“); sb.append(left); sb.append(“, “);<br>    sb.append(top); sb.append(“ - “); sb.append(right);<br>    sb.append(“, “); sb.append(bottom); sb.append(“)”);<br>    return sb.toString();<br>}<br>4.3 Rect常用的一些方法</p><p>获取“宽”<br>//文章开头说的公式在这里得到了应验<br>public final int width() {<br>    return right - left;<br>}<br>获取“高”<br>public final int height() {<br>    return bottom - top;<br>}<br>有效性的判断<br>//因为left是最左侧，right比left还小不就不成形了么？宽高同是如此<br>public final boolean isEmpty() {<br>    return left &gt;= right || top &gt;= bottom;<br>}<br>全部置0操作<br>public void setEmpty() {<br>    left = right = top = bottom = 0;<br>}<br>设置参数方法，和构造函数的区别仅在于不会创建新对象<br>public void set(int left, int top, int right, int bottom) {<br>    this.left = left;<br>    this.top = top;<br>    this.right = right;<br>    this.bottom = bottom;<br>}<br>5.关于使用到这几个属性的自定义View</p><p>上面比较详细介绍了Canvas，Paint，Matrix，RectF等等的属性，作用，常用方法，接下来就需要结合具体业务需求练手写一下小案例自定义控件呢<br>5.1 自定义轮播图圆点</p><p>5.1.1 需求介绍<br>绘制圆环，一个实心中心圆，还有一个外圆环<br>此控件可以设置宽度和高度，可以设置颜色<br>5.1.2 思路介绍<br>3.2.1 既然是绘制圆形，可以写一个继承View的自定义view<br>3.2.2 重写onDraw方法，获取控件宽高，然后比较宽高值，取小值的一半作为圆的半径<br>3.2.3 然后分别绘制选中状态和未选中状态的圆<br>3.2.4 创建画笔Paint，并且设置相关属性，比如画笔颜色，类型等<br>3.2.5 利用canvas绘制圆，然后再又用相同方法绘制外边缘<br>3.2.6 自定义一个是否选中状态的方法，传入布尔值是否选中，然后调用view中invalidate方法<br>5.1.3 代码介绍<br>具体代码如下所示：<br>/**</p><ul><li><pre></pre></li><li><pre><code>@author yangchong</code></pre></li><li><pre><code>blog  : https://github.com/yangchong211</code></pre></li><li><pre><code>time  : 2016/5/18</code></pre></li><li><pre><code>desc  : 红点自定义控件</code></pre></li><li><pre><code>revise: 建议设置红点宽高一样，否则是椭圆</code></pre></li><li><p></p></li><li><p>/<br>public class DotView extends View {</p><p>  private boolean isInit = false;<br>  private boolean isSelected = false;<br>  private float mViewHeight;<br>  private float mViewWidth;<br>  private float mRadius;<br>  private Paint mPaintBg = new Paint();<br>  private int mBgUnselectedColor = Color.parseColor(“#1A000000”);<br>  private int mBgSelectedColor = Color.parseColor(“#FDE26E”);<br>  private static final float mArcWidth = 2.0f;</p><p>  public DotView(Context context) {</p><pre><code>  super(context);</code></pre><p>  }</p><p>  public DotView(Context context, AttributeSet attrs) {</p><pre><code>  super(context, attrs);</code></pre><p>  }</p><p>  public DotView(Context context, AttributeSet attrs, int defStyleAttr) {</p><pre><code>  super(context, attrs, defStyleAttr);</code></pre><p>  }</p><p>  @Override<br>  protected void onDraw(Canvas canvas) {</p><pre><code>  super.onDraw(canvas);  if (!isInit) {      isInit = true;      mViewHeight = getHeight();      mViewWidth = getWidth();      if (mViewHeight &gt;= mViewWidth) {          mRadius = mViewWidth / 2.f;      } else {          mRadius = mViewHeight / 2.f;      }  }  //是否选中  if (isSelected){      drawSelectedDot(canvas);  } else{      drawUnSelectedDot(canvas);  }</code></pre><p>  }</p><p>  /**</p><ul><li><p>绘制选中指示器红点</p></li><li><p>@param canvas                    canvas</p></li><li><p>/<br>private void drawSelectedDot(Canvas canvas) {<br>  //设置paint相关属性<br>  mPaintBg.setAntiAlias(true);<br>  mPaintBg.setColor(mBgSelectedColor);<br>  mPaintBg.setStyle(Style.FILL);</p><p>  //绘制圆<br>  canvas.drawCircle(mViewWidth / 2.f, mViewHeight / 2.f, mRadius - 8.f, mPaintBg);</p><p>  mPaintBg.setStyle(Style.STROKE);<br>  float offset = 1.f + mArcWidth;<br>  RectF oval = new RectF(mViewWidth / 2.f - mRadius + offset, mViewHeight / 2.f - mRadius + offset,</p><pre><code>      mViewWidth / 2.f + mRadius - offset, mViewHeight / 2.f + mRadius - offset);</code></pre><p>  //绘制指定的弧线，该弧线将被缩放以适应指定的椭圆形。<br>  canvas.drawArc(oval, 0.f, 360.f, false, mPaintBg);<br>}</p></li></ul><p>  /**</p><ul><li>绘制未选中指示器红点</li><li>@param canvas                    canvas</li><li>/<br>private void drawUnSelectedDot(Canvas canvas) {<br>  mPaintBg.setAntiAlias(true);<br>  mPaintBg.setColor(mBgUnselectedColor);<br>  mPaintBg.setStyle(Style.FILL);<br>  canvas.drawCircle(mViewWidth / 2.f, mViewHeight / 2.f, mRadius - 8.f, mPaintBg);<br>}</li></ul><p>  /**</p><ul><li>设置是否选中</li><li>@param isSelected                isSelected</li><li>/<br>public void setIsSelected(boolean isSelected) {<br>  this.isSelected = isSelected;<br>  //使整个视图无效。如果视图是可见的，则{@link#onDraw(android.Graphics.Canvas)}将在将来的某个时候被调用。<br>  //调用该方法，会进行重新绘制，也就是调用onDraw方法<br>  this.invalidate();<br>}<br>}</li></ul></li></ul><p>5.2 自定义圆环百分比进度条</p><p>5.2.1 需求分析<br>1.业务需求：可以设置圆角，可以设置圆形，如果是圆角则必须设置半径，默认圆角半径为10dp<br>2.如果设置了圆形，则即使设置圆角也无效；如果设置非圆形，则圆角生效，同时需要判断圆角半径是否大于控件宽高，处理边界逻辑<br>3.当设置圆形的时候，即使设置宽高不一样，那么取宽高中的最小值的一半为圆形半径<br>5.2.2 代码介绍<br>代码如下所示<br>public class ARoundImageView extends AppCompatImageView {</p><pre><code>/* *   Paint：画笔 *   Canvas：画布 *   Matrix：变换矩阵 * *   业务需求：可以设置圆角，可以设置圆形，如果是圆角则必须设置半径，默认圆角半径为10dp *//** * 圆形模式 */private static final int MODE_CIRCLE = 1;/** * 普通模式 */private static final int MODE_NONE = 0;/** * 圆角模式 */private static final int MODE_ROUND = 2;/** * 圆角半径 */private int currRound = dp2px(10);/** * 画笔 */private Paint mPaint;/** * 默认是普通模式 */private int currMode = 0;public ARoundImageView(Context context) {    this(context,null);}public ARoundImageView(Context context, AttributeSet attrs) {    this(context, attrs, 0);}public ARoundImageView(Context context, AttributeSet attrs, int defStyleAttr) {    super(context, attrs, defStyleAttr);    obtainStyledAttrs(context, attrs, defStyleAttr);    initViews();}private void obtainStyledAttrs(Context context, AttributeSet attrs, int defStyleAttr) {    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ARoundImageView, defStyleAttr, 0);    currMode = a.hasValue(R.styleable.ARoundImageView_type) ? a.getInt(R.styleable.ARoundImageView_type, MODE_NONE) : MODE_NONE;    currRound = a.hasValue(R.styleable.ARoundImageView_radius) ? a.getDimensionPixelSize(R.styleable.ARoundImageView_radius, currRound) : currRound;    a.recycle();}private void initViews() {    //ANTI_ALIAS_FLAG 用于绘制时抗锯齿    mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);}/** * 当模式为圆形模式的时候，我们强制让宽高一致 */@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {    if (currMode == MODE_CIRCLE) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        int result = Math.min(getMeasuredHeight(), getMeasuredWidth());        // 此方法必须由{@link#onMeasure(int，int)}调用，以存储已测量的宽度和测量的高度。        // 如果不这样做，将在测量时触发异常。        setMeasuredDimension(result, result);    } else {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);    }}@SuppressLint("DrawAllocation")@Overrideprotected void onDraw(Canvas canvas) {    //获取ImageView图片资源    Drawable mDrawable = getDrawable();    //获取Matrix对象    Matrix mDrawMatrix = getImageMatrix();    if (mDrawable == null) {        return;    }    if (mDrawable.getIntrinsicWidth() == 0 || mDrawable.getIntrinsicHeight() == 0) {        return;    }    if (mDrawMatrix == null &amp;&amp; getPaddingTop() == 0 &amp;&amp; getPaddingLeft() == 0) {        mDrawable.draw(canvas);    } else {        final int saveCount = canvas.getSaveCount();        canvas.save();        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) {            if (getCropToPadding()) {                final int scrollX = getScrollX();                final int scrollY = getScrollY();                canvas.clipRect(scrollX + getPaddingLeft(), scrollY + getPaddingTop(),                        scrollX + getRight() - getLeft() - getPaddingRight(),                        scrollY + getBottom() - getTop() - getPaddingBottom());            }        }        canvas.translate(getPaddingLeft(), getPaddingTop());        switch (currMode){            case MODE_CIRCLE:                Bitmap bitmap1 = drawable2Bitmap(mDrawable);                mPaint.setShader(new BitmapShader(bitmap1, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));                canvas.drawCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2, mPaint);                break;            case MODE_ROUND:                Bitmap bitmap2 = drawable2Bitmap(mDrawable);                mPaint.setShader(new BitmapShader(bitmap2, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));                canvas.drawRoundRect(new RectF(getPaddingLeft(), getPaddingTop(),                                getWidth() - getPaddingRight(), getHeight() - getPaddingBottom()),                        currRound, currRound, mPaint);                break;            case MODE_NONE:            default:                if (mDrawMatrix != null) {                    canvas.concat(mDrawMatrix);                }                mDrawable.draw(canvas);                break;        }        canvas.restoreToCount(saveCount);    }}/** * drawable转换成bitmap */private Bitmap drawable2Bitmap(Drawable drawable) {    if (drawable == null) {        return null;    }    Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);    Canvas canvas = new Canvas(bitmap);    //根据传递的scaleType获取matrix对象，设置给bitmap    Matrix matrix = getImageMatrix();    if (matrix != null) {        canvas.concat(matrix);    }    drawable.draw(canvas);    return bitmap;}private int dp2px(float value) {    return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,            value, getResources().getDisplayMetrics());}</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> autojs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鸿蒙开发</title>
      <link href="/2022/010839456.html"/>
      <url>/2022/010839456.html</url>
      
        <content type="html"><![CDATA[<h2 id="HarmonyOS概述"><a href="#HarmonyOS概述" class="headerlink" title="HarmonyOS概述"></a>HarmonyOS概述</h2><p>HarmonyOS是一款面向万物互联时代的、全新的分布式操作系统。<br>在传统的单设备系统能力基础上，HarmonyOS提出了基于同一套系统能力、适配多种终端形态的分布式理念，能够支持手机、平板、智能穿戴、智慧屏、车机等多种终端设备，提供全场景（移动办公、运动健康、社交通信、媒体娱乐等）业务能力。</p><h2 id="HarmonyOS有三大特征："><a href="#HarmonyOS有三大特征：" class="headerlink" title="HarmonyOS有三大特征："></a>HarmonyOS有三大特征：</h2><h3 id="硬件互助，资源共享"><a href="#硬件互助，资源共享" class="headerlink" title="硬件互助，资源共享"></a>硬件互助，资源共享</h3><h4 id="分布式软总线"><a href="#分布式软总线" class="headerlink" title="分布式软总线"></a>分布式软总线</h4><p>分布式软总线是手机、平板、智能穿戴、智慧屏、车机等分布式设备的通信基座，为设备之间的互联互通提供了统一的分布式通信能力，</p><p>典型应用场景举例：</p><p>智能家居场景：在烹饪时，手机可以通过碰一碰和烤箱连接，并将自动按照菜谱设置烹调参数，控制烤箱来制作菜肴。与此类似，料理机、油烟机、空气净化器、空调、灯、窗帘等都可以在手机端显示并通过手机控制。设备之间即连即用，无需繁琐的配置。<br>多屏联动课堂：老师通过智慧屏授课，与学生开展互动，营造课堂氛围；学生通过平板完成课程学习和随堂问答。统一、全连接的逻辑网络确保了传输通道的高带宽、低时延、高可靠。</p><h4 id="分布式设备虚拟化"><a href="#分布式设备虚拟化" class="headerlink" title="分布式设备虚拟化"></a>分布式设备虚拟化</h4><p>分布式设备虚拟化平台可以实现不同设备的资源融合、设备管理、数据处理，多种设备共同形成一个超级虚拟终端。针对不同类型的任务，为用户匹配并选择能力合适的执行硬件，让业务连续地在不同设备间流转，充分发挥不同设备的能力优势</p><p>典型应用场景举例：</p><p>视频通话场景：在做家务时接听视频电话，可以将手机与智慧屏连接，并将智慧屏的屏幕、摄像头与音箱虚拟化为本地资源，替代手机自身的屏幕、摄像头、听筒与扬声器，实现一边做家务、一边通过智慧屏和音箱来视频通话。<br>游戏场景：在智慧屏上玩游戏时，可以将手机虚拟化为遥控器，借助手机的重力传感器、加速度传感器、触控能力，为玩家提供更便捷、更流畅的游戏体验。</p><h4 id="分布式数据管理"><a href="#分布式数据管理" class="headerlink" title="分布式数据管理"></a>分布式数据管理</h4><p>分布式数据管理基于分布式软总线的能力，实现应用程序数据和用户数据的分布式管理。用户数据不再与单一物理设备绑定，业务逻辑与数据存储分离，跨设备的数据处理如同本地数据处理一样方便快捷，让开发者能够轻松实现全场景、多设备下的数据存储、共享和访问，为打造一致、流畅的用户体验创造了基础条件。分布式数据管理示意图见图3。</p><p>典型应用场景举例：</p><p>协同办公场景：将手机上的文档投屏到智慧屏，在智慧屏上对文档执行翻页、缩放、涂鸦等操作，文档的最新状态可以在手机上同步显示。<br>照片分享场景：出游时，使用手机拍摄的照片，可以在登录了同帐号的其他设备，比如平板上更方便地浏览、收藏、保存或编辑，也可以通过家中的智慧屏上同家人一起分享记录下的快乐瞬间。</p><h4 id="分布式任务调度"><a href="#分布式任务调度" class="headerlink" title="分布式任务调度"></a>分布式任务调度</h4><p>分布式任务调度基于分布式软总线、分布式数据管理、分布式Profile等技术特性，构建统一的分布式服务管理（发现、同步、注册、调用）机制，支持对跨设备的应用进行远程启动、远程调用、远程连接以及迁移等操作，能够根据不同设备的能力、位置、业务运行状态、资源使用情况，以及用户的习惯和意图，选择合适的设备运行分布式任务。</p><p>图4以应用迁移为例，简要地展示了分布式任务调度能力。</p><p>典型应用场景举例：</p><p>导航场景：如果用户驾车出行，上车前，在手机上规划好导航路线；上车后，导航自动迁移到车机和车载音箱；下车后，导航自动迁移回手机。如果用户骑车出行，在手机上规划好导航路线，骑行时手表可以接续导航。<br>外卖场景：在手机上点外卖后，可以将订单信息迁移到手表上，随时查看外卖的配送状态。</p><h3 id="一次开发，多端部署"><a href="#一次开发，多端部署" class="headerlink" title="一次开发，多端部署"></a>一次开发，多端部署</h3><p>HarmonyOS通过组件化和小型化等设计方法，支持多种终端设备按需弹性部署，能够适配不同类别的硬件资源和功能需求。支撑通过编译链关系去自动生成组件化的依赖关系，形成组件树依赖图，支撑产品系统的便捷开发，降低硬件设备的开发门槛。</p><p>支持各组件的选择（组件可有可无）：根据硬件的形态和需求，可以选择所需的组件。<br>支持组件内功能集的配置（组件可大可小）：根据硬件的资源情况和功能需求，可以选择配置组件中的功能集。例如，选择配置图形框架组件中的部分控件。<br>支持组件间依赖的关联（平台可大可小）：根据编译链关系，可以自动生成组件化的依赖关系。例如，选择图形框架组件，将会自动选择依赖的图形引擎组件等。</p><h3 id="统一OS，弹性部署"><a href="#统一OS，弹性部署" class="headerlink" title="统一OS，弹性部署"></a>统一OS，弹性部署</h3><p>对设备开发者而言，HarmonyOS采用了组件化的设计方案，可根据设备的资源能力和业务特征灵活裁剪，满足不同形态终端设备对操作系统的要求。</p><h2 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h2><p>HarmonyOS整体遵从分层设计，从下向上依次为：内核层、系统服务层、框架层和应用层。系统功能按照“系统 &gt; 子系统 &gt; 功能/模块”逐级展开，在多设备部署场景下，支持根据实际需求裁剪某些非必要的子系统或功能/模块。</p><h3 id="内核层"><a href="#内核层" class="headerlink" title="内核层"></a>内核层</h3><p>内核子系统：HarmonyOS采用多内核设计，支持针对不同资源受限设备选用适合的OS内核。内核抽象层（KAL，Kernel Abstract Layer）通过屏蔽多内核差异，对上层提供基础的内核能力，包括进程/线程管理、内存管理、文件系统、网络管理和外设管理等。<br>驱动子系统：硬件驱动框架（HDF）是HarmonyOS硬件生态开放的基础，提供统一外设访问能力和驱动开发、管理框架。</p><h3 id="系统服务层"><a href="#系统服务层" class="headerlink" title="系统服务层"></a>系统服务层</h3><p>系统服务层是HarmonyOS的核心能力集合，通过框架层对应用程序提供服务。该层包含以下几个部分：</p><p>系统基本能力子系统集：为分布式应用在HarmonyOS多设备上的运行、调度、迁移等操作提供了基础能力，由分布式软总线、分布式数据管理、分布式任务调度、方舟多语言运行时、公共基础库、多模输入、图形、安全、AI等子系统组成。其中，方舟运行时提供了C/C++/JS多语言运行时和基础的系统类库，也为使用方舟编译器静态化的Java程序（即应用程序或框架层中使用Java语言开发的部分）提供运行时。<br>基础软件服务子系统集：为HarmonyOS提供公共的、通用的软件服务，由事件通知、电话、多媒体、DFX（Design For X） 、MSDP&amp;DV等子系统组成。<br>增强软件服务子系统集：为HarmonyOS提供针对不同设备的、差异化的能力增强型软件服务，由智慧屏专有业务、穿戴专有业务、IoT专有业务等子系统组成。<br>硬件服务子系统集：为HarmonyOS提供硬件服务，由位置服务、生物特征识别、穿戴专有硬件服务、IoT专有硬件服务等子系统组成。<br>根据不同设备形态的部署环境，基础软件服务子系统集、增强软件服务子系统集、硬件服务子系统集内部可以按子系统粒度裁剪，每个子系统内部又可以按功能粒度裁剪。</p><h3 id="框架层"><a href="#框架层" class="headerlink" title="框架层"></a>框架层</h3><p>框架层为HarmonyOS应用开发提供了Java/C/C++/JS/TS等多语言的用户程序框架和Ability框架，两种UI框架（包括适用于Java语言的Java UI框架、适用于JS/TS语言的方舟开发框架），以及各种软硬件服务对外开放的多语言框架API。根据系统的组件化裁剪程度，HarmonyOS设备支持的API也会有所不同。</p><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><p>应用层包括系统应用和第三方非系统应用。HarmonyOS的应用由一个或多个FA（Feature Ability）或PA（Particle Ability）组成。其中，FA有UI界面，提供与用户交互的能力；而PA无UI界面，提供后台运行任务的能力以及统一的数据访问抽象。FA在进行用户交互时所需的后台数据访问也需要由对应的PA提供支撑。基于FA/PA开发的应用，能够实现特定的业务功能，支持跨设备调度与分发，为用户提供一致、高效的应用体验。</p><h2 id="用户应用程序包结构"><a href="#用户应用程序包结构" class="headerlink" title="用户应用程序包结构"></a>用户应用程序包结构</h2><p>HarmonyOS的用户应用程序包以APP Pack（Application Package）形式发布，它是由一个或多个HAP（HarmonyOS Ability Package）以及描述每个HAP属性的pack.info组成。HAP是Ability的部署包，HarmonyOS应用代码围绕Ability组件展开。</p><p>一个HAP是由代码、资源、第三方库及应用配置文件组成的模块包，可分为entry和feature两种模块类型，如图1所示。</p><p>entry：应用的主模块。一个APP中，对于同一设备类型，可以有一个或多个entry类型的HAP，来支持该设备类型中不同规格（如API版本、屏幕规格等）的具体设备。如果同一设备类型存在多个entry模块，则必须配置distroFilter分发规则，使得应用市场在做应用的云端分发时，对该设备类型下不同规格的设备进行精确分发。<br>feature：应用的动态特性模块。一个APP可以包含一个或多个feature类型的HAP，也可以不含。只有包含Ability的HAP才能够独立运行。</p><p><img src="https://gitee.com/wenkex/blogimage/raw/master/0000000000011111111.20211022162223.15380198014131508266643108297125.png"></p><h3 id="Ability"><a href="#Ability" class="headerlink" title="Ability"></a>Ability</h3><p>Ability是应用所具备的能力的抽象，一个应用可以包含一个或多个Ability。Ability分为两种类型：FA（Feature Ability）和PA（Particle Ability）。FA/PA是应用的基本组成单元，能够实现特定的业务功能。FA有UI界面，而PA无UI界面。</p><h3 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h3><p>库文件是应用依赖的第三方代码（例如so、jar、bin、har等二进制文件），存放在libs目录。</p><h3 id="资源文件"><a href="#资源文件" class="headerlink" title="资源文件"></a>资源文件</h3><p>应用的资源文件（字符串、图片、音频等）存放于resources目录下，便于开发者使用和维护，详见资源文件的分类。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>配置文件 (config.json) 是应用的Ability信息，用于声明应用的Ability，以及应用所需权限等信息，详见应用配置文件。</p><h3 id="pack-info"><a href="#pack-info" class="headerlink" title="pack.info"></a>pack.info</h3><p>描述应用软件包中每个HAP的属性，由IDE编译生成，应用市场根据该文件进行拆包和HAP的分类存储。HAP的具体属性包括：<br>delivery-with-install: 表示该HAP是否支持随应用安装。“true”表示支持随应用安装；“false”表示不支持随应用安装。<br>name：HAP文件名。<br>module-type：模块类型，entry或feature。<br>device-type：表示支持该HAP运行的设备类型。</p><h3 id="HAR"><a href="#HAR" class="headerlink" title="HAR"></a>HAR</h3><p>HAR（HarmonyOS Ability Resources）可以提供构建应用所需的所有内容，包括源代码、资源文件和config.json文件。HAR不同于HAP，HAR不能独立安装运行在设备上，只能作为应用模块的依赖项被引用。</p>]]></content>
      
      
      <categories>
          
          <category> 鸿蒙 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 鸿蒙 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/2022/010511205.html"/>
      <url>/2022/010511205.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker 是一个开源的应用容器引擎，基于 GO 语言开发，开发者可以打包应用及依赖包到一个可移植的容器中，然后发布到任何操作系统的机器上，也可以实现虚拟化。</p><p>简单理解:<br>Docker就是一个虚拟机，可以让你在一个虚拟的，类似于沙盒的环境下进行环境搭建、软件安装、软件使用、程序编码等操作，并且这个环境是Linux系统。<br>实际上：<br>是在Linux系统下的一种容器，容器技术把一个系统需要的资源划分给一个独立的组(Linux系统下每个组的权限不同，互不干扰)，可以将此看作是一个新的Linux系统，因为它包含了Linux系统所需要的环境。与虚拟机不同的是，虚拟机下的系统是有虚拟硬件的，而Docker内的系统实际上是一个环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="window下安装"><a href="#window下安装" class="headerlink" title="window下安装"></a>window下安装</h3><p><a href="https://www.docker.com/products/docker-desktop/">安装</a><br>想要使用Docker-desktop首先安装WSL2内核</p><h4 id="通过wsl命令将这两个子系统进行迁移"><a href="#通过wsl命令将这两个子系统进行迁移" class="headerlink" title="通过wsl命令将这两个子系统进行迁移"></a>通过wsl命令将这两个子系统进行迁移</h4><p>docker-desktop：保存的是程序<br>docker-desktop-data: 保存的镜像<br><code>wsl --help</code>:查看wsl命令提醒</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看所有WSL。</span></span><br><span class="line">wsl <span class="literal">-l</span> -<span class="literal">-all</span>  <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、导出WSL。</span></span><br><span class="line">wsl -<span class="literal">-export</span> docker<span class="literal">-desktop</span> D:\data\WSL2\docker<span class="literal">-desktop</span>.tar</span><br><span class="line">wsl -<span class="literal">-export</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> D:\data\WSL2\docker<span class="literal">-desktop</span><span class="literal">-data</span>.tar</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、注销待迁移WSL。</span></span><br><span class="line">wsl -<span class="literal">-unregister</span> docker<span class="literal">-desktop</span></span><br><span class="line">wsl -<span class="literal">-unregister</span> docker<span class="literal">-desktop</span><span class="literal">-data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、在新位置导入WSL。</span></span><br><span class="line"></span><br><span class="line">wsl -<span class="literal">-import</span> docker<span class="literal">-desktop</span> D:\data\WSL2\docker<span class="literal">-desktop</span> D:\data\WSL2\docker<span class="literal">-desktop</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br><span class="line">wsl -<span class="literal">-import</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> D:\data\WSL2\docker<span class="literal">-desktop</span><span class="literal">-data</span> D:\data\WSL2\docker<span class="literal">-desktop</span><span class="literal">-data</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h4><p>设置-&gt;Docker Engine</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"registry-mirrors": [</span><br><span class="line">  "https://docker.mirrors.ustc.edu.cn/",</span><br><span class="line">  "https://hub-mirror.c.163.com/"</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="centos下安装"><a href="#centos下安装" class="headerlink" title="centos下安装"></a>centos下安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载可能存在的旧版本</span></span><br><span class="line">yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装必要的系统工具</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置阿里云Docker Yum源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ​ 更新yum缓存</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装docker-CE(docker社区版)</span></span><br><span class="line">yum -y install docker-ce</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动docker</span></span><br><span class="line">systemctl start docker </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看dockers状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-Client：客户端，命令行"><a href="#Docker-Client：客户端，命令行" class="headerlink" title="Docker Client：客户端，命令行"></a>Docker Client：客户端，命令行</h2><h2 id="Docker-Daemon：服务端守护进程，接受并处理来自客户端的消息"><a href="#Docker-Daemon：服务端守护进程，接受并处理来自客户端的消息" class="headerlink" title="Docker Daemon：服务端守护进程，接受并处理来自客户端的消息"></a>Docker Daemon：服务端守护进程，接受并处理来自客户端的消息</h2><h2 id="镜像与容器的关系"><a href="#镜像与容器的关系" class="headerlink" title="镜像与容器的关系"></a>镜像与容器的关系</h2><p>镜像是一个linux虚拟机，容器是启动虚拟机，每次启动的时候，是一个副本，是先把镜像复制一份后直接启动，启动不干扰镜像，一个镜像可以启动无数个容器。</p><p>镜像：可以理解为没有运行的程序及其运行所依赖的操作系统文件和依赖库。而容器可以理解为运行中的镜像。其实一个就是程序，一个就是进程。相比普通的程序，多了运行所支持的操作系统文件和依赖库，所以镜像可以随便部署都能以一样状态运行。</p><h2 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像(Image)"></a>镜像(Image)</h2><p>相当于面向对象编程 类 的概念</p><p>一个只读层被称为镜像，一个镜像是永久不会变的。因为 Docker 使用统一文件系统，Docker 进程认为整个文件系统是以读写方式挂载的，由于所有的变更都发生在顶层的可写层，所以下层的原始的只读镜像文件并未发生变化。</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已有镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方镜像</span></span><br><span class="line"></span><br><span class="line">docker pull 镜像名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人镜像</span></span><br><span class="line">docker pull 仓库名称/镜像名称</span><br><span class="line">docker pull xunmi/django</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方仓库拉取</span></span><br><span class="line">docker pull 第三方仓库地址/仓库名称/镜像名称</span><br><span class="line">docker pull hub.c.<span class="number">163</span>.com/library/mysql:latest</span><br><span class="line">(默认仓库名为library,所有从官方获取镜像相当于`sudo docker image pull library/镜像名称`)</span><br></pre></td></tr></tbody></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要删除镜像，要先删除其下的容器</span></span><br><span class="line">docker image <span class="built_in">rm</span> 镜像名或镜像ID 或 docker rmi 镜像名或镜像ID</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h2><p>相当于面向对象编程 对象 的概念</p><p>镜像运行后的进程。因为 Docker 的容器实在太轻量级了，很多时候用户都是随用随建，用完即删。<br>启动一个容器首先要拉取一个镜像<br><a href="https://mp.weixin.qq.com/s/3fuKKjLmsRRvJPUI88JNBw">参考</a></p><h3 id="容器状态-STATUS"><a href="#容器状态-STATUS" class="headerlink" title="容器状态(STATUS)"></a>容器状态(STATUS)</h3><p>exited:此时使用start命令可以将容器b1从die状态重新启动为running状态，并进行交互</p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker <span class="built_in">ps</span>   <span class="comment"># 查看正在运行的容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span>  <span class="comment"># 查看当前所有的容器</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="启动和关闭容器"><a href="#启动和关闭容器" class="headerlink" title="启动和关闭容器"></a>启动和关闭容器</h3><p>参数：<br>  -i 表示已交互模式运行容器<br>  -t 为容器重新分配一个伪输入终端<br>  -d 后台运行容器，想要进入容器需要使用指令 docker exec</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">docker run <span class="literal">-it</span>   <span class="comment">#启动一个容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名或容器id  <span class="comment">#删除容器</span></span><br><span class="line">docker rename 容器原来名  要改为的名字  <span class="comment"># 更改容器名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动已存在的容器</span></span><br><span class="line">docker <span class="built_in">start</span> 容器名或容器id</span><br><span class="line"></span><br><span class="line">docker stop 容器名或容器id  <span class="comment"># 停止容器</span></span><br><span class="line">docker restart &lt;容器 ID&gt;   <span class="comment">#停止的容器可以通过 docker restart 重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制关闭容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器名或容器id</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="操作后台容器"><a href="#操作后台容器" class="headerlink" title="操作后台容器"></a>操作后台容器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入后台容器</span></span><br><span class="line">docker exec -it 容器ID bash</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker export 1e560fca3906 &gt; ubuntu.tar    # 导出容器</span><br><span class="line"></span><br><span class="line">docker /ubuntu.tar | docker import - test/ubuntu:v1   #导入容器，再将容器导入到一个镜像中</span><br><span class="line">docker import http://example.com/exampleimage.tgz example/imagerepo  #通过指定 URL 或者某个目录来导入</span><br></pre></td></tr></tbody></table></figure><h3 id="容器制作成镜像"><a href="#容器制作成镜像" class="headerlink" title="容器制作成镜像"></a>容器制作成镜像</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容器制作成镜像</span></span><br><span class="line">docker commit 容器名 镜像名</span><br><span class="line"><span class="comment"># 镜像打包备份(打包备份的文件会自动存放在当前命令行的路径下,如果想让保存的文件可以打开,可以加.tar后缀)</span></span><br><span class="line">docker save <span class="literal">-o</span> 保存的文件名 镜像名</span><br><span class="line"><span class="comment"># 镜像解压</span></span><br><span class="line">docker load <span class="literal">-i</span> 文件路径/备份文件</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-卷"><a href="#Docker-卷" class="headerlink" title="Docker 卷"></a>Docker 卷</h2><p>可以利用卷来持久化容器内的数据<br>docker inspect CONTAINER ID</p><h1 id="vscode使用docker"><a href="#vscode使用docker" class="headerlink" title="vscode使用docker"></a>vscode使用docker</h1><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial">https://docs.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial</a><br>VS Code 提供可让你使用本地 Docker 桌面服务的扩展。 可以创建容器化应用，将应用部署到容器，并调试容器上运行的应用。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>下载安装<a href="https://docs.docker.com/desktop/">Docker Desktop</a></p><p>安装 VS Code Remote-WSL 扩展：使你能够在 VS Code 中打开在 WSL 上运行的 Linux 项目（无需担心路径问题、二进制兼容性或其他跨 OS 的难题）。</p><p>安装 VS code Remote-Containers 扩展：使你能够打开容器内的项目文件夹或存储库，并利用 Visual Studio Code 的完整功能集在容器中执行开发工作。</p><p>安装 <a href="https://code.visualstudio.com/docs/containers/overview">VS Code Docker 扩展</a>。 添加了从 VS Code 内生成、管理和部署容器化应用程序的功能。 （需要 Remote-Container 扩展才能实际使用容器作为开发环境。）</p><h2 id="更换国内镜像源"><a href="#更换国内镜像源" class="headerlink" title="更换国内镜像源"></a>更换国内镜像源</h2><p>Docker中国区官方               “<a href="https://registry.docker-cn.com&quot;/">https://registry.docker-cn.com"</a><br>网易                          “<a href="http://hub-mirror.c.163.com&quot;/">http://hub-mirror.c.163.com"</a>  （这个还挺快的）<br>ustc                          “<a href="https://docker.mirrors.ustc.edu.cn&quot;/">https://docker.mirrors.ustc.edu.cn"</a><br>阿里云                        “<a href="https://kfwkfulq.mirror.aliyuncs.com&quot;/">https://kfwkfulq.mirror.aliyuncs.com"</a></p><h3 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h3><p>修改 /etc/docker/daemon.json 文件，执行命令：<br><code>vi /etc/docker/daemon.json </code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">{</span><br><span class="line"> <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>,</span><br><span class="line"></span><br><span class="line">                               <span class="string">"http://hub-mirror.c.163.com"</span> ,</span><br><span class="line"></span><br><span class="line">                               <span class="string">"https://kfwkfulq.mirror.aliyuncs.com"</span></span><br><span class="line"></span><br><span class="line">                           ]</span><br><span class="line">} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart    #重启Docker</span><br></pre></td></tr></tbody></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>1.在 VS Code 中，选择 终端 &gt; 新终端。</p><p>2.在终端窗口或 Bash 窗口中运行以下命令。<br><code>docker run -dp 80:80 docker/getting-started</code><br>参数<br>  -d 在后台以分离模式运行容器。<br>  -p 80:80 将主机的端口80映射到容器中的端口80。<br>  docker/getting-started 指定要使用的映像。</p><p>3.在 VS Code 中，选择左侧的 docker 图标以查看 docker 扩展。</p><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><p>制作docker镜像（image），最主要的是编写Dockerfile文件(一种基于文本的说明脚本)</p><p>需要在项目根目录创建Dockerfile文件</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:alpine  </span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /files</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> firstDockerImage.go /files</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /files</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o /files/firstImage firstDockerImage.go</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/files/firstImage"</span>]</span></span><br></pre></td></tr></tbody></table></figure><p>第1行：FROM 说明将要使用的基础镜像来自：golang:alpine （go语言alpine标签的镜像，alpine是阿尔卑斯，一种Linux系统，非常小）</p><p>第3行：在Docker镜像中创建一个新目录.【run 开始的命令是在镜像中操作】</p><p>第4行：将当前用户目录中的文件 firstDockerImage.go复制到镜像中的 /files目录下</p><p>【COPY是从用户复制到镜像】</p><p>第5行：修改Docker镜像的当前目录</p><p>第6行：run命令，依然是在镜像中执行go build命令，生成firstImage可执行程序。</p><p>第7行：指定运行镜像时，将要执行的【镜像中】程序的路径。</p><p>在文件资源管理器的 VS Code 中，右键单击 Dockerfile ，然后选择 “生成映像”。</p><h2 id="上传到仓库"><a href="#上传到仓库" class="headerlink" title="上传到仓库"></a>上传到仓库</h2><p>1、使用docker login命令登录docker hub账户</p><p>输入自己的用户名和密码。</p><p>2、使用docker tag命令给镜像打标签</p><p>docker tag image:tag “user/repo:tag”</p><p>3、使用docker push命令上传镜像到docker hub</p><p>docker push “user/repo:tag”</p><h1 id="docker安装实例"><a href="#docker安装实例" class="headerlink" title="docker安装实例"></a>docker安装实例</h1><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest  #拉取 MySQL官方的最新版本的镜像 </span><br><span class="line"></span><br><span class="line">docker images #查看本地镜像</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器</span></span><br><span class="line">docker run -d --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 --restart=unless-stopped mysql  </span><br><span class="line"><span class="meta">#</span><span class="bash">–-name mysql 容器名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--restart=unless-stopped： docker启动的时候随之启动</span></span><br><span class="line"></span><br><span class="line">docker ps -a #查看是否启动成功</span><br></pre></td></tr></tbody></table></figure><h3 id="进入mysql容器内部"><a href="#进入mysql容器内部" class="headerlink" title="进入mysql容器内部"></a>进入mysql容器内部</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入mysql容器内部</span></span><br><span class="line">docker exec -it mysql01 bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p  #登录mysql</span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加远程登录用户</span></span><br><span class="line">CREATE USER 'liaozesong'@'%' IDENTIFIED WITH mysql_native_password BY '123456';</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'liaozesong'@'%';</span><br><span class="line"></span><br><span class="line">exit  #退出mysql</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-安装-Ubuntu"><a href="#Docker-安装-Ubuntu" class="headerlink" title="Docker 安装 Ubuntu"></a>Docker 安装 Ubuntu</h2><h2 id="Docker-安装-Centos"><a href="#Docker-安装-Centos" class="headerlink" title="Docker 安装 Centos"></a>Docker 安装 Centos</h2><h2 id="Docker-安装-Nginx"><a href="#Docker-安装-Nginx" class="headerlink" title="Docker 安装 Nginx"></a>Docker 安装 Nginx</h2><h2 id="Docker-安装-Node-js"><a href="#Docker-安装-Node-js" class="headerlink" title="Docker 安装 Node.js"></a>Docker 安装 Node.js</h2><h2 id="Docker-安装-PHP"><a href="#Docker-安装-PHP" class="headerlink" title="Docker 安装 PHP"></a>Docker 安装 PHP</h2><h2 id="Docker-安装-Tomcat"><a href="#Docker-安装-Tomcat" class="headerlink" title="Docker 安装 Tomcat"></a>Docker 安装 Tomcat</h2><h2 id="Docker-安装-Python"><a href="#Docker-安装-Python" class="headerlink" title="Docker 安装 Python"></a>Docker 安装 Python</h2><h2 id="Docker-安装-Redis"><a href="#Docker-安装-Redis" class="headerlink" title="Docker 安装 Redis"></a>Docker 安装 Redis</h2><h2 id="Docker-安装-MongoDB"><a href="#Docker-安装-MongoDB" class="headerlink" title="Docker 安装 MongoDB"></a>Docker 安装 MongoDB</h2><h2 id="Docker-安装-Apache"><a href="#Docker-安装-Apache" class="headerlink" title="Docker 安装 Apache"></a>Docker 安装 Apache</h2><h2 id="安装RabbitMQ的Docker环境"><a href="#安装RabbitMQ的Docker环境" class="headerlink" title="安装RabbitMQ的Docker环境"></a>安装RabbitMQ的Docker环境</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker pull rabbitmq:3.7-management</span><br><span class="line"></span><br><span class="line">docker run -d --name e3-mall-rabbitmq -p 5672:5672 -p 15672:15672 --hostname e3-mall-rabbitmq -e RABBITMQ_DEFAULT_VHOST=mq_vhost  -e RABBITMQ_DEFAULT_USER=admin -e RABBITMQ_DEFAULT_PASS=admin -e TZ=Asia/Shanghai rabbitmq:3.7-management</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各平台软件分享</title>
      <link href="/2022/010422249.html"/>
      <url>/2022/010422249.html</url>
      
        <content type="html"><![CDATA[<h1 id="多平台软件"><a href="#多平台软件" class="headerlink" title="多平台软件"></a>多平台软件</h1><h2 id="spacedesk"><a href="#spacedesk" class="headerlink" title="spacedesk"></a>spacedesk</h2><p>将安卓，ios屏幕变为window拓展屏</p><h2 id="海阔视界"><a href="#海阔视界" class="headerlink" title="海阔视界"></a>海阔视界</h2><h3 id="安卓下载"><a href="#安卓下载" class="headerlink" title="安卓下载"></a>安卓下载</h3><p>最新版软件地址如下<br><a href="https://haikuo.lanzoux.com/u/GoldRiver">https://haikuo.lanzoux.com/u/GoldRiver</a></p><p>备用地址：</p><p><a href="https://haikuo.lanzoui.com/u/GoldRiver">https://haikuo.lanzoui.com/u/GoldRiver</a></p><p>如果上面的地址都不可用，可以在公众号(新方圆小棉袄)对话框回复“最新版”这几个字获取新版下载地址。</p><h3 id="桌面版air"><a href="#桌面版air" class="headerlink" title="桌面版air"></a>桌面版air</h3><p><a href="https://www.123pan.com/s/fajA-meLQh">https://www.123pan.com/s/fajA-meLQh</a></p><p>规则合集</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">海阔视界，空气支持规则合集￥home_rule_url￥https://cdn.jsdelivr.net/gh/Lingyan000/share@main/air-rule-share</span><br></pre></td></tr></tbody></table></figure><h2 id="clash"><a href="#clash" class="headerlink" title="clash"></a>clash</h2><p><a href="https://github.com/Fndroid/clash_for_windows_pkg/releases">github下载地址</a><br><a href="https://github.com/BoyceLig/Clash_Chinese_Patch/releases">汉化</a></p><h2 id="telegram"><a href="#telegram" class="headerlink" title="telegram"></a>telegram</h2><p><a href="https://telegram.org/">https://telegram.org/</a></p><p>汉化Telegram的具体方法是在浏览器的网址输入框里输入这个网址：”t.me/zh_CN“，打开页面后，点击”VIEW CHANNEL</p><p>隐藏自己的电话号码<br>Telegram注册要使用电话号码，如果设置不当，你电报账号的电话号码可能被别人看到，如果你用国内手机注册，那么如果有关部门能查到你的电话号码，你也就完全暴露了。为防止这种情况，你可以在“隐私和安全”（Privacy and Security）的设置里把你的电话号码设置成完全不可见（或仅联系人可见），并把“谁能通过电话号码找到我”设成我的联系人，而不是所有人。</p><p>如果有海外的电话号码（包括虚拟号码如Google Voice等），尽量使用海外号码注册Telegram</p><h3 id="频道推荐"><a href="#频道推荐" class="headerlink" title="频道推荐"></a>频道推荐</h3><p><a href="https://mulu.one/">电报群集合</a><br>@hao1234bot 【超级索引】：Telegram上的Hao123，频道大全，也有个频道，是发送关键词，然后BOT提供关键词相关群组的机器人。可以拉到群组使用。</p><p>@zh_secretary_bot 【TGX-频道秘书】：TGX-索引公告板 @zh_secretary 的群组频道登记机器人，优点：和【TGCN-群组索引计划】差不多，又有可以看群组频道推荐的地方了，缺点：不能通过关键词查找</p><h3 id="自定义代理"><a href="#自定义代理" class="headerlink" title="自定义代理"></a>自定义代理</h3><p>作用：这样就不用打开clash的系统代理也能使用电报<br>设置-高级-网络代理-自定义代理</p><p>服务器地址：127.0.0.1    代表本机ip<br>端口：7890     clash默认端口</p><h1 id="window软件"><a href="#window软件" class="headerlink" title="window软件"></a>window软件</h1><h2 id="微软文本转语音助手"><a href="#微软文本转语音助手" class="headerlink" title="微软文本转语音助手"></a>微软文本转语音助手</h2><p><a href="https://xiaomianao.lanzoum.com/iWOrz05eml1e">https://xiaomianao.lanzoum.com/iWOrz05eml1e</a><br>支持云希在内的17种人声语音风格，保存格式就是mp3文件，非常方便<br>点击鼠标右键还有翻译、敏感词替换、排版优化，OCR文字提取等功能</p><h2 id="蓝叠安卓模拟器"><a href="#蓝叠安卓模拟器" class="headerlink" title="蓝叠安卓模拟器"></a>蓝叠安卓模拟器</h2><p>bluestacks5国际版，与hyper-v共存<br><strong>开启”root”</strong><br>安装目录下BlueStacks_nxt\bluestacks.conf文件中找到bst.feature.rooting=”0”，改为1。然后重启模拟器，在设置中的设备开启root</p><h2 id="RSS订阅器"><a href="#RSS订阅器" class="headerlink" title="RSS订阅器"></a>RSS订阅器</h2><p><a href="https://quiterss.org/en/download">下载</a><br><a href="https://github.com/QuiteRSS/quiterss">github</a></p><h3 id="RSS订阅"><a href="#RSS订阅" class="headerlink" title="RSS订阅"></a>RSS订阅</h3><p>[好工具周刊订阅]：<a href="https://discuss-cn.bestxtools.com/t/weekly">https://discuss-cn.bestxtools.com/t/weekly</a></p><p><a href="https://jukebox.pipecraft.net/">聚客盒子</a><br>订阅源：<a href="https://jukebox.pipecraft.net/atom/discussions">https://jukebox.pipecraft.net/atom/discussions</a></p><h2 id="重复文件查找"><a href="#重复文件查找" class="headerlink" title="重复文件查找"></a>重复文件查找</h2><p>duplicate file finder 4 pc是一款完全免费的重复文件查找清理工具，这种重复文件查找并不是简单的通过文件名查找，还会根据文件内容本身进行比对，算法非常牛。</p><p><a href="https://www.seeksunslowly.com/tss-files-mirror/duplicate-file-finder-free.exe">https://www.seeksunslowly.com/tss-files-mirror/duplicate-file-finder-free.exe</a></p><h2 id="power-automate"><a href="#power-automate" class="headerlink" title="power automate"></a>power automate</h2><p>直接在微软商店安装</p><h2 id="任意门"><a href="#任意门" class="headerlink" title="任意门"></a>任意门</h2><p>它可以把电脑上的文件夹或者文件直接映射到公网访问，下载软件双击exe文件就能运行<br>这里映射文件下载速度就取决于你的电脑上传最大速度，文件大小也完全没有限制<br>下载地址<br><a href="https://pan.quark.cn/s/c7e3ca13b73e">https://pan.quark.cn/s/c7e3ca13b73e</a></p><p>备用地址：<a href="https://xiaomianao.lanzoum.com/i2HKw022tumb">https://xiaomianao.lanzoum.com/i2HKw022tumb</a></p><h2 id="伪pandownload"><a href="#伪pandownload" class="headerlink" title="伪pandownload"></a>伪pandownload</h2><p><a href="http://pandownload.net/index.html">http://pandownload.net/index.html</a><br><a href="https://github.com/PanDownloadServer/Server">pandownload</a></p><p>一个百度网盘的不限速下载方案：<br>原理简析：百度网盘移动端对.doc(x).ppt(x).pdf等之类的文件会有个预览模式，在预览模式中加载文件到本地是满速的。<br>方法：可运用该原理，将文件重命名并添加上述后缀，点击文件即可进入预览模式，待文件下载完成后再将添加的后缀名删除掉，即可享受原文件。（还没试过）</p><h2 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h2><p>本地快速搜索<br><a href="https://www.voidtools.com/zh-cn/">https://www.voidtools.com/zh-cn/</a></p><h2 id="uTools"><a href="#uTools" class="headerlink" title="uTools"></a>uTools</h2><p>是一个极简、插件化的现代桌面软件，通过自由选配丰富的插件，打造得心应手的工具集合。通过快捷键（默认 alt + space ）就可以快速呼出这个搜索框。你可以往输入框内粘贴文本、图片、截图、文件、文件夹等等，唤出超级面板即可使用插件</p><h3 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h3><p>图床<br>图床管理工具</p><ul><li><p>程序员手册<br>内置了十多个实用离线的中文文档。文档包括Linux、php、Python、Js等，还可以根据需要添加自己的文档，启用需要的文档。</p></li><li><p>Ctool<br>开发者常用功能</p></li><li><p>本地搜索</p></li></ul><p>搭配everything食用</p><ul><li><p>批量重命名</p></li><li><p>在线流程图 Diagram</p></li></ul><p>快速跳转至drawio，用于流程图绘制。</p><ul><li>知悉思维导图</li></ul><p>一个免费的思维导图插件，用于快速启动知犀思维导图网页，账号和uTools同步。主要是启动方便，而且还免费，市场上还有许多共享的资源。</p><ul><li>快捷命令</li></ul><p>插件介绍：快速打开软件，网站，运行shell命令等。我个人认为最牛x的还是直接运行代码，几乎支持所有的开发语言，程序员必备，有时候想调试一下代码片段，这个功能最方便了。可以去分享中心安装别人分享的快捷命名，有种逛油猴市场的感觉。</p><ul><li>自动化助手</li></ul><p>和上文快捷命令相似，只不过这个插件提供了其它实用的功能：图片去背景（removebg），图片一键上传到图床（目前支持路过图床和ＳＭ图床）</p><ul><li>Excalidraw 在线绘图白板</li></ul><p>在线绘图工具，漫画风格非常nice。非常适合用于绘制手稿和灵感！</p><ul><li><p>tinypng压缩图片<br>使用tinypng压缩图片，支持批量操作，鼠标选中，右键快捷操作。</p></li><li><p>图片聊天</p></li></ul><p>将文字转换为图片</p><h2 id="Caesium"><a href="#Caesium" class="headerlink" title="Caesium"></a>Caesium</h2><p><a href="https://mp.weixin.qq.com/s/dVpYpxuwrAfWA4vzj6PyAw">参考</a><br>Caesium是一款开源免费的无损压缩工具，它能够在保证图像质量的前提下，最大化压缩图像大小，节省存储空间。</p><p>Caesium目前支持Windows和macOS系统，因此，无论你是Windows用户还是macOS用户，都可以体验到它的强大。</p><p>Caesium的使用非常简单，直接打开要压缩的图片，选择输出文件夹即可，它支持单幅图压缩，也支持批量压缩。</p><h2 id="scrcpy投屏"><a href="#scrcpy投屏" class="headerlink" title="scrcpy投屏"></a>scrcpy投屏</h2><p><a href="https://github.com/Genymobile/scrcpy">Github地址</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>手机数据线连接电脑后，开启usb调试，自动连接</p><p>鼠标右键是返回</p><p>要想卸载scrcpy,先在目录下进入cmd,输入adb kill-server,再删除整个scrcpy文件即可</p><p>adb功能异常，重启adb<br>（1）把adb服务杀死：adb kill-server<br>（2）重启adb服务：adb reconnect</p><h2 id="OOAPB"><a href="#OOAPB" class="headerlink" title="OOAPB"></a>OOAPB</h2><p>通过这个应用程序可以卸载在Windows10/11上预装的应用程序，应用无需安装，个人使用完全免费<br><a href="https://www.oo-software.com/en/ooappbuster">https://www.oo-software.com/en/ooappbuster</a></p><h2 id="大学出题2022"><a href="#大学出题2022" class="headerlink" title="大学出题2022"></a>大学出题2022</h2><p>优势：1.编辑题库，2.加入题库，3.生成试卷，4.自动生成答案，5.生成word，6.一键打印。<br>解锁新增试题，修改试题功能，比如你可以新增1000个题目，然后出5个题，系统会自动抽选题目，带答案方便老师改卷。<br>这是目前能找到的比较方便很好的题库软件了，而且是2022新版的。<br>适合：企业内训、小学、初中、高中、大学、培训机构、职业院校等老师的出题工作，由于是独立提取的，无在线题库功能，你们单位找一个专门电脑，所有老师都在里面增加题库内容，然后可以共享题库。非常方便，这是目前能找到的最好的出题软件了！</p><p>可以无上限增加新题</p><p>链接：<a href="https://pan.baidu.com/s/1MhMUVJCm_T9apOQj8YKDPw">https://pan.baidu.com/s/1MhMUVJCm_T9apOQj8YKDPw</a><br>提取码：52pj</p><h2 id="WxDatViewer"><a href="#WxDatViewer" class="headerlink" title="WxDatViewer"></a>WxDatViewer</h2><p>是一款非常好用的微信dat图片批量解密、查看、整理工具</p><p><a href="https://pan.lanzoui.com/b0405repg">https://pan.lanzoui.com/b0405repg</a></p><h2 id="dism"><a href="#dism" class="headerlink" title="dism++"></a>dism++</h2><p>是一款非常好用的系统清理和维护工具，使用它可以更好的精简系统<br>功能：<br>空间清理<br>系统启动项管理<br>系统备份和还原、系统激活、引导修复、春哥附体<br>系统优化里面可以很方便的开启和关闭系统的种种功能<br>驱动管理，可以选择相应的驱动然后选择导出或者添加驱动。</p><h2 id="微PE"><a href="#微PE" class="headerlink" title="微PE"></a>微PE</h2><p>目前极客圈中最推荐的Windows PE系统。</p><h3 id="1-多种安装方式"><a href="#1-多种安装方式" class="headerlink" title="1.多种安装方式"></a>1.多种安装方式</h3><p>安装到本地硬盘，可直接添加到开机启动项中，开机时可以选择进入PE系统，当本机Windows系统无法启动时，可以快速进入PE中进行维护，方便至极。</p><p>安装制作U盘启动工具</p><p>直接生成ISO镜像</p><h3 id="2-内置实用工具箱"><a href="#2-内置实用工具箱" class="headerlink" title="2.内置实用工具箱"></a>2.内置实用工具箱</h3><p>安装维护：主要有WIndows安装器、虚拟光驱、密码修改和注册表编辑器<br>备份还原：主要是Ghost备份还原和一代神器分Dism++<br>分区工具：主要是DiskGenius，这软件人尽皆知。<br>文件工具：经典的Everything、7-zip压缩以及简单的看图软件Imagine<br>硬件检测：主要是CPU-Z、SuperPI、以及HDTune硬盘检测。</p><h2 id="Ventoy"><a href="#Ventoy" class="headerlink" title="Ventoy"></a>Ventoy</h2><p>ventoy是一个国产开源的多系统U盘启动盘制作工具，无需反复格式化U盘，只需将各种iso镜像文件复制到U盘，即可实现多系统引导启动，无差异支持Legacy BIOS和UEFI模式，</p><p>不影响U盘性能，可正常使用U盘<br>支持插件扩展<br>启动过程中支持U盘设置写保护<br>版本升级时数据不会丢失<br>无需跟随操作系统升级而升级Ventoy</p><p>操作步骤<br>1.下载地址：Download . Ventoy</p><p>2.启动软件之后选好U盘（一般会自动选好），切记是先插U盘，再启动软件，点击安装（install）。然后它会反复强调数据安全，完成之后U盘便分成了三份。打开文件管理器里能看到的、最大的、空的分区，这就是用来存放数据的地方，就当是普通U盘用就好了，系统iso镜像就放这里。<br>3.当设置U盘为第一启动顺序后，即可加载出Ventoy的菜单，键盘方向键选择对应的系统镜像即可开始安装系统了。<br>4.有什么想安装的系统直接把镜像丢进去就可以，有好的PE系统比如上面的微PE也可以丢进去~这样你就有了一个多合一的超级多系统启动盘。</p><h2 id="Edgeless，"><a href="#Edgeless，" class="headerlink" title="Edgeless，"></a>Edgeless，</h2><p>打造一个功能强大专属自己的全能PE工具箱,可用来制作WinPE以及可启动U盘，<br>Edgeless是一款国产半开源的PE工具，它不仅提供了一个纯净的Windows PE，同时引入了插件模式，通过工具你可自定义配置，例如软件、壁纸、图标、主题、脚本、驱动、库文件等，均可实现自定义，是打造个性化PE系统的超级工具。</p><h2 id="HEU-KMS-Activator"><a href="#HEU-KMS-Activator" class="headerlink" title="HEU KMS Activator"></a>HEU KMS Activator</h2><p><a href="https://52sharing.lanzout.com/imB79053g0za">https://52sharing.lanzout.com/imB79053g0za</a></p><p>HEU KMS Activator是一款简洁高效的全能激活工具，软件支持智能激活、KMS激活、数字激活、OEM激活等，<br>适用所有Windows, Office版本，无需联网即可一键激活</p><h2 id="数据恢复"><a href="#数据恢复" class="headerlink" title="数据恢复"></a>数据恢复</h2><h3 id="WinFR界面版"><a href="#WinFR界面版" class="headerlink" title="WinFR界面版"></a>WinFR界面版</h3><p>支持在Win/1110、NTFS、FAT、exFAT、ReFS 下从 SSD/HDD/USB/存储卡中恢复丢失的文件。<br>文件手滑意外删除、磁盘格式化、磁盘损坏、中病毒等导致的文件丢失都可以使用这款工具尝试恢复。<br><a href="https://maxiaobang.lanzoup.com/iTnW5yztejg">https://maxiaobang.lanzoup.com/iTnW5yztejg</a></p><h3 id="ApowerRecover"><a href="#ApowerRecover" class="headerlink" title="ApowerRecover"></a>ApowerRecover</h3><p><a href="https://mp.weixin.qq.com/s/W_DHyZFt9j13VuLns8X4ew">https://mp.weixin.qq.com/s/W_DHyZFt9j13VuLns8X4ew</a></p><p>安装后，将Crack文件夹中的文件复制到软件安装目录中，即可免费使用了<br>蓝奏云下载：<br><a href="https://idege.lanzouw.com/i6M2Nylj5qf">https://idege.lanzouw.com/i6M2Nylj5qf</a></p><h1 id="app"><a href="#app" class="headerlink" title="app"></a>app</h1><h2 id="shizuku"><a href="#shizuku" class="headerlink" title="shizuku"></a>shizuku</h2><p><a href="https://sspai.com/post/73294">https://sspai.com/post/73294</a></p><h3 id="强制分屏"><a href="#强制分屏" class="headerlink" title="强制分屏"></a>强制分屏</h3><p>vivo手机有些应用无法分屏。<br>【开发者模式】并点击进入；下拉页面，将【强制将活动设为可调整大小】开关打开；重启手机，重启后应用就支持强制分屏了。设置完后。先进入不能分屏的界面，然后上拉进入任务界面，点击另一个想要分屏应用的分屏按钮</p><h2 id="LADB"><a href="#LADB" class="headerlink" title="LADB"></a>LADB</h2><p>使用adb命令，必须开启无线调试模式</p><h2 id="黑域"><a href="#黑域" class="headerlink" title="黑域"></a>黑域</h2><p>iqooneo5无法使用</p><h2 id="小黄鸟抓包"><a href="#小黄鸟抓包" class="headerlink" title="小黄鸟抓包"></a>小黄鸟抓包</h2><p>【下载地址】</p><p><a href="https://zhusunjia.lanzouq.com/iYetI031in8j">https://zhusunjia.lanzouq.com/iYetI031in8j</a></p><p>证书:<a href="https://zhusunjia.lanzouq.com/ieIDD03cdqje">https://zhusunjia.lanzouq.com/ieIDD03cdqje</a></p><h2 id="开源阅读"><a href="#开源阅读" class="headerlink" title="开源阅读"></a>开源阅读</h2><p>看小说</p><p>项目：<a href="https://github.com/gedoor/legado">https://github.com/gedoor/legado</a><br>教程：<a href="https://www.yuque.com/legado/wiki">https://www.yuque.com/legado/wiki</a><br>书源：<a href="http://alanskycn.gitee.io/vip/">http://alanskycn.gitee.io/vip/</a><br><a href="https://xs11.lanzoul.com/ikf1j03voxeb">书源制作教程</a></p><h2 id="虚拟引擎-·-BlackBox"><a href="#虚拟引擎-·-BlackBox" class="headerlink" title="虚拟引擎 · BlackBox"></a>虚拟引擎 · BlackBox</h2><p>黑盒BlackBox，是一款虚拟引擎，可以在Android上克隆、运行虚拟应用，拥有免安装运行能力。免 root 自带 Xposed 模块<br><a href="https://github.com/FBlackBox/BlackBox">https://github.com/FBlackBox/BlackBox</a><br>Ps：类似太极框架，可以虚拟定位，微X模块等功能<br>太极框架：<a href="https://taichi.cool/zh/">https://taichi.cool/zh/</a></p><h2 id="mt管理器"><a href="#mt管理器" class="headerlink" title="mt管理器"></a>mt管理器</h2><p><a href="https://www.mianshigee.com/tutorial/mt-manual/practice.md">https://www.mianshigee.com/tutorial/mt-manual/practice.md</a></p><h2 id="AidLux"><a href="#AidLux" class="headerlink" title="AidLux"></a>AidLux</h2><p><a href="https://www.aidlux.com/">https://www.aidlux.com/</a></p><p>AidLux平台全面覆盖手机、边缘端、终端云等，并且打通手机、电脑、平板、电视、工业自动化控制、机器人成一个统一的平台，实现跨终端无缝协同体验，并且该平台能使用全部安卓应用、Arm环境下的Linux应用，对于智能硬件开发者，不用再面对硬件的复杂性，AI环境的多样性，通过AidLux的智能AI加速模块，实现CPU、GPU、NPU和DSP多种方式的AI加速。</p><p>软件特色</p><p>各种机器人套件：ROS，PCL点云，Eigen，Protobuf和G2o等多种工具</p><p>支持多种开发语言：C/C++，Python,Java,JavaScript，Ruby，PHP，Go，Shell等</p><p>丰富Linux软件，AidCode，Git，Mysql，Hadoop，Nigix，Apache，Vim，Ssh，Vscode，Jupyter，积木编程等</p><p>扩展性好：内置了极简的外设极速互连模块，通过USB和网络等方式控制Arduino、机械臂、机器人、高清摄像机等</p><p>集成主流AI框架(Caffe、Mxnet、Keras、Pytorch、Tensorflow、Ncnn、MindSpore、PaddlePaddle、TNN、Opencv)，无需配置，直接使用</p><p>内置丰富的AI案例：人脸识别、人脸关键点识别、肢体识别、手势识别、头发识别、物体分类、物体跟踪、3D检测-、身体交换、人体抠图等</p><p>主研发AI智能加速模块，支持CPU+GPU+NPU+DSP加速智能加速，自动适配主流深度学习模型格式，无需格式转换即可自动加速和Forward</p><p>………………………………………………</p><p>下载方式:</p><p>1.手机各大应用商店搜索AidLux下载</p><p>2.百度网盘:</p><p><a href="https://pan.baidu.com/s/1QYDvCKSl_H-B6YVCqdf8Qg?pwd=1v5y">https://pan.baidu.com/s/1QYDvCKSl_H-B6YVCqdf8Qg?pwd=1v5y</a></p><p>提取码:1v5y</p><h2 id="Vmos-pro"><a href="#Vmos-pro" class="headerlink" title="Vmos pro"></a>Vmos pro</h2><p>手机虚拟机使用<br>用mt管理器查看虚拟机里的文件</p><h2 id="SD-Maid"><a href="#SD-Maid" class="headerlink" title="SD Maid"></a>SD Maid</h2><p>支持卸载残留扫描、系统/应用缓存清理、文件管理、应用管理、提取安装包、重复文件扫描、查看存储信息等。</p><h2 id="ZArchiver"><a href="#ZArchiver" class="headerlink" title="ZArchiver"></a>ZArchiver</h2><p>安卓上最强的压缩/解压缩应用，有这一个就够了。基本上我们能用到的所有格式压缩包都可以处理。<br>支持带密码的压缩包、分卷解压、免解压预览、自定义界面、文件管理等。</p><h2 id="图叨叨"><a href="#图叨叨" class="headerlink" title="图叨叨"></a>图叨叨</h2><p>宫格切图、模板拼图、以图搜图、电影台词、图片水印、图片打码、压缩裁剪、网页截图、动图制作、图片边框、图文卡片、手持弹幕等。</p><p>而且无广告、无后台，相当好用。</p><h2 id="便捷下载"><a href="#便捷下载" class="headerlink" title="便捷下载"></a>便捷下载</h2><p>一款万能手机下载器，简单方便。<br>只要把链接粘贴进去，就可以自动解析下载图片、视频、音频、文档。</p><p>还支持音频提取、视频压缩、一键转换网页为 PDF 等。</p><h2 id="kiwi-brower"><a href="#kiwi-brower" class="headerlink" title="kiwi brower"></a>kiwi brower</h2><p>一款基于Chromium核心的手机浏览器，强大的可扩展性让你轻松安装chrome应用商店里的扩展，真正支持Chrome电脑版插件</p><h2 id="Via浏览器"><a href="#Via浏览器" class="headerlink" title="Via浏览器"></a>Via浏览器</h2><p>[下载]<a href="https://viayoo.com/zh-cn/">https://viayoo.com/zh-cn/</a></p><p>参考：<a href="https://mp.weixin.qq.com/s/aUBBfdWrzXReW8DRmQ24sA">https://mp.weixin.qq.com/s/aUBBfdWrzXReW8DRmQ24sA</a><br>启动秒开，没有杂七杂八的附加功能<br>会自主学习的搜索引擎：Magi：<a href="https://magi.com/search?q=">https://magi.com/search?q=</a><br>via相关插件：<a href="http://via-app.cn/">http://via-app.cn</a><br>广告过滤1：<br><a href="https://cats-team.coding.net/p/adguard/d/AdRules/git/raw/main/adguard.txt">https://cats-team.coding.net/p/adguard/d/AdRules/git/raw/main/adguard.txt</a><br>广告过滤2：<br><a href="https://cats-team.coding.net/p/adguard/d/AdRules/git/raw/main/AdKillRules.txt">https://cats-team.coding.net/p/adguard/d/AdRules/git/raw/main/AdKillRules.txt</a>&nbsp;<br>广告过滤3：<br><a href="https://cdn.jsdelivr.net/gh/DoingDog/xXKiller@main/w.txt">https://cdn.jsdelivr.net/gh/DoingDog/xXKiller@main/w.txt</a>&nbsp;</p><h2 id="李跳跳v1-75"><a href="#李跳跳v1-75" class="headerlink" title="李跳跳v1.75"></a>李跳跳v1.75</h2><p><a href="https://mp.weixin.qq.com/s/cB3l-Dt_usR7YSjRoySFhA">原文</a><br> 【软件链接】</p><p><a href="https://wwn.lanzoul.com/iKcrtywtuhc">https://wwn.lanzoul.com/iKcrtywtuhc</a> </p><p>密码:3m3m</p><h2 id="两仪"><a href="#两仪" class="headerlink" title="两仪"></a>两仪</h2><p><a href="https://mp.weixin.qq.com/s/DBlmJh988gWCu8tnPiltow">原文</a></p><p>一个免 ROOT 的 Android 系统级容器</p><p>【下载地址】</p><p>百度网盘:</p><p><a href="https://pan.baidu.com/s/1tRFnXwc2An4pLNn0gmNvew?pwd=anlu">https://pan.baidu.com/s/1tRFnXwc2An4pLNn0gmNvew?pwd=anlu</a><br>提取码:anlu</p><p>微云:<a href="https://share.weiyun.com/3vUDEtdN">https://share.weiyun.com/3vUDEtdN</a></p><p>天翼:<a href="https://cloud.189.cn/t/N77Vn2Eb2YZv">https://cloud.189.cn/t/N77Vn2Eb2YZv</a></p><p>迅雷:<a href="https://pan.xunlei.com/s/VMtzo7gpJ2nEJFrH-MTa9HtNA1">https://pan.xunlei.com/s/VMtzo7gpJ2nEJFrH-MTa9HtNA1</a> 提取码：z2za</p><h2 id="太极"><a href="#太极" class="headerlink" title="太极"></a>太极</h2><p>关注 虚拟框架微信公众号即可发现全部内容</p><p>太极是一个无需Root，无需解释Bootloader，也不需要刷机就能使用 Xposed 模块的一个APP。太极拥有无需刷机、无需解锁、使用简单的优点，支持目前大部分xposed模块，该应用搭配各种xpose模块使用时，可以让你的应用程序拥有强大的功能。</p><p><a href="http://dl.dimensionalzone.com/f/19604958-571524758-f1ca5b">太极v9.0.1下载链接</a></p><h3 id="模块下载"><a href="#模块下载" class="headerlink" title="模块下载"></a>模块下载</h3><p><a href="https://mp.weixin.qq.com/s/lxR-5oCDn8lTgFpZfKUAPw">最全模块下载</a><br><a href="https://mp.weixin.qq.com/s/yUxttK6rB8mYtd4Y4qcR7g">模块更新</a></p><p><a href="http://dl.dimensionalzone.com/f/19604958-571564836-83b045">3000Xposed</a></p><p>[wx密友]<a href="http://dl.dimensionalzone.com/f/19604958-571565583-1e467c">http://dl.dimensionalzone.com/f/19604958-571565583-1e467c</a></p><p>[colorqq2]<a href="http://dl.dimensionalzone.com/f/19604958-571576448-2f650f">http://dl.dimensionalzone.com/f/19604958-571576448-2f650f</a></p><p>[指纹支付]<a href="http://dl.dimensionalzone.com/f/19604958-571576615-0048ee">http://dl.dimensionalzone.com/f/19604958-571576615-0048ee</a></p><p>[killergram]<a href="http://dl.dimensionalzone.com/f/19604958-571577088-64b8c1">http://dl.dimensionalzone.com/f/19604958-571577088-64b8c1</a></p><p>[QAuxiliary]<a href="http://dl.dimensionalzone.com/f/19604958-571578027-201ba1">http://dl.dimensionalzone.com/f/19604958-571578027-201ba1</a></p><p>[TSBattery]<a href="http://dl.dimensionalzone.com/f/19604958-571596194-1f2f5c">http://dl.dimensionalzone.com/f/19604958-571596194-1f2f5c</a></p><p>[xmitools]<a href="http://dl.dimensionalzone.com/f/19604958-571603494-0ed2e4">http://dl.dimensionalzone.com/f/19604958-571603494-0ed2e4</a></p><p>[验证码提取器]<a href="http://dl.dimensionalzone.com/f/19604958-571605865-de6041">http://dl.dimensionalzone.com/f/19604958-571605865-de6041</a></p><p>[叼毛]<a href="http://dl.dimensionalzone.com/f/19604958-571606444-be6ef9">http://dl.dimensionalzone.com/f/19604958-571606444-be6ef9</a></p><p>[哔哩漫游]<a href="http://dl.dimensionalzone.com/f/19604958-571621885-eb978f">http://dl.dimensionalzone.com/f/19604958-571621885-eb978f</a></p><p>[大圣净化]<a href="http://dl.dimensionalzone.com/f/19604958-571622398-a0796a">http://dl.dimensionalzone.com/f/19604958-571622398-a0796a</a></p><p>[wx群消息助手]<a href="http://dl.dimensionalzone.com/f/19604958-571622999-f93fa2">http://dl.dimensionalzone.com/f/19604958-571622999-f93fa2</a></p><p>[微博猪手]<a href="http://dl.dimensionalzone.com/f/19604958-571625557-1c357b">http://dl.dimensionalzone.com/f/19604958-571625557-1c357b</a></p><p>[自动记账]<a href="http://dl.dimensionalzone.com/f/19604958-571627029-83a724">http://dl.dimensionalzone.com/f/19604958-571627029-83a724</a></p><p>[联壁模块]<a href="http://dl.dimensionalzone.com/f/19604958-571627034-4e7483">http://dl.dimensionalzone.com/f/19604958-571627034-4e7483</a></p><p>[知了]<a href="http://dl.dimensionalzone.com/f/19604958-571627042-307820">http://dl.dimensionalzone.com/f/19604958-571627042-307820</a></p><p>[抖音伴侣]<a href="http://dl.dimensionalzone.com/f/19604958-571627064-37efef">http://dl.dimensionalzone.com/f/19604958-571627064-37efef</a></p><h2 id="AppMgr-Pro-III5-35"><a href="#AppMgr-Pro-III5-35" class="headerlink" title="AppMgr Pro III5.35"></a>AppMgr Pro III5.35</h2><p><a href="https://mp.weixin.qq.com/s/smDa32DCLE5BO1OqLyp9jA">原文</a><br>【免root】<br>需要开启无障碍<br>隐藏应用: 允许您隐藏系统（内置）应用，让隐藏的应用从你的桌面程序列表中消失不见。</p><p>冻结应用: 允许您冻结应用，被冻结的应用将不会被启动、执行或使用任何 CPU 或存储，自然也不会消耗任何电力。</p><p>应用管理: 可以帮助您管理所安装的应用，例如批次卸载应用，批次移动应用或分享你安装的应用给朋友等等。<br>【下载地址】<br><a href="https://rtkcxzh.lanzouw.com/i8YZSzu9psh">https://rtkcxzh.lanzouw.com/i8YZSzu9psh</a></p><h2 id="Android开发工具箱"><a href="#Android开发工具箱" class="headerlink" title="Android开发工具箱"></a>Android开发工具箱</h2><h2 id="安卓开发助手"><a href="#安卓开发助手" class="headerlink" title="安卓开发助手"></a>安卓开发助手</h2><p>它能够用来反编译其他应用、查看其他应用布局和控件信息、快速查看 Activity 历史记录、查看其他应用 Manifest、查看最近使用和最近安装的应用详细信息、提取任何应用 Apk 和 So 文件、调试</p><p>【下载链接】：<br><a href="https://wwn.lanzoul.com/igSpq008kxwj">https://wwn.lanzoul.com/igSpq008kxwj</a><br>【备用链接】：<br><a href="https://wwn.lanzoux.com/igSpq008kxwj">https://wwn.lanzoux.com/igSpq008kxwj</a></p><h2 id="科学"><a href="#科学" class="headerlink" title="科学"></a>科学</h2><p><a href="https://www.alpacadisk.com/shared/AKYTwnwK5k1fir3V">https://www.alpacadisk.com/shared/AKYTwnwK5k1fir3V</a></p><h1 id="ios"><a href="#ios" class="headerlink" title="ios"></a>ios</h1><h2 id="TunePro"><a href="#TunePro" class="headerlink" title="TunePro"></a>TunePro</h2><p>iOS 平台免费听歌 app，曲库很大，一般歌都能听，不支持下载音乐。<br><a href="https://apps.apple.com/cn/app/tunepro-music/id12482625083">https://apps.apple.com/cn/app/tunepro-music/id12482625083</a></p><h2 id="苹果快捷指令分享网站"><a href="#苹果快捷指令分享网站" class="headerlink" title="苹果快捷指令分享网站"></a>苹果快捷指令分享网站</h2><p><a href="https://routinehub.co/">https://routinehub.co/</a><br>相关链接：<br><a href="https://www.rcuts.com/">https://www.rcuts.com/</a><br><a href="https://applefans.today/category/applefans-classroom/apple-shortcuts/">https://applefans.today/category/applefans-classroom/apple-shortcuts/</a></p><h2 id="Userscripts-for-Safari"><a href="#Userscripts-for-Safari" class="headerlink" title="Userscripts for Safari"></a>Userscripts for Safari</h2><p><a href="https://www.appinn.com/userscripts-for-safari/">https://www.appinn.com/userscripts-for-safari/</a><br>Userscripts 就是可以让海量的油猴脚本在 Safari 上运行的脚本管理器，和 Tampermonkey 是一个功能，只不过，它可以在 iPhone 上使用，就很香了。</p><p>由于 Userscripts 属于标准的 Safari 扩展，所以在 App Store 安装（Mac/iPhone/iPad）之后，需要前往 Safari 设置中开启扩展，具体路径是：</p><p>iPhone 系统设置 &gt; Safari 浏览器 &gt; 扩展 &gt; Userscripts：</p><p>注意除了打开 Userscripts 之外，在里面的设置中，还需要允许所有网站。注意这里青小蛙尝试过“询问”，但并不成功，所以设置为了允许，如果你有安全顾虑，请谨慎操作。</p><h1 id="浏览器插件"><a href="#浏览器插件" class="headerlink" title="浏览器插件"></a>浏览器插件</h1><h2 id="油猴脚本"><a href="#油猴脚本" class="headerlink" title="油猴脚本"></a>油猴脚本</h2><p>网页文章转PDF<br>脚本名称：网页限制解除(改)<br>作用：解除网页复制的限制</p><p>脚本名称：知乎增强<br>作用：让电脑浏览知乎的时候界面更实用</p><p>1、Userscript+<br>一款脚本推荐利器，能够自动帮我们寻找适用于当前网站的所有脚本。<br>AC-baidu-重定向优化<br>去广告、绕过搜索引擎的重定向、自定义网址拦截、添加站点图标、优化搜索结果排版、自动翻页……<br>searchEngineJump 搜索引擎快捷跳转<br>在搜索引擎的输入框下面添加一行快捷菜单。<br>能够快捷地在多个搜索引擎和网站之间进行跳转。<br>支持自定义编辑跳转网站。<br>5、Search By Image<br>以图搜图脚本，内置了 12 个图片搜索引擎，</p><h2 id="国内可下载安装Chrome扩展的方法"><a href="#国内可下载安装Chrome扩展的方法" class="headerlink" title="国内可下载安装Chrome扩展的方法"></a>国内可下载安装Chrome扩展的方法</h2><p><a href="https://www.gugeapps.net/">https://www.gugeapps.net/</a><br><a href="https://www.extfans.com/">https://www.extfans.com/</a><br><a href="https://huajiakeji.com/">https://huajiakeji.com/</a><br><a href="https://www.cnplugins.com/">https://www.cnplugins.com/</a><br><a href="https://www.crx4chrome.com/">https://www.crx4chrome.com/</a><br><a href="https://fnd.io/#/">https://fnd.io/#/</a><br><a href="https://chrome.zzzmh.cn/#/index">https://chrome.zzzmh.cn/#/index</a><br><a href="https://www.chromefk.com/">https://www.chromefk.com/</a><br><a href="https://www.yuque.com/eureka007">https://www.yuque.com/eureka007</a><br><a href="https://crxdl.com/">https://crxdl.com/</a><br><a href="http://blandlifedev.blogspot.com/">http://blandlifedev.blogspot.com/</a><br><a href="https://marketplace.visualstudio.com/">https://marketplace.visualstudio.com/</a><br><a href="https://www.chajian5.com/">https://www.chajian5.com/</a><br><a href="https://173app.com/chrome-ext">https://173app.com/chrome-ext</a><br><a href="https://crxdl.com/">https://crxdl.com/</a><br><a href="https://chrome.zzzmh.cn/#/index">https://chrome.zzzmh.cn/#/index</a><br><a href="https://www.extfans.com/">https://www.extfans.com/</a><br><a href="https://www.chromefor.com/">https://www.chromefor.com/</a><br><a href="http://yurl.sinaapp.com/crx2.php">http://yurl.sinaapp.com/crx2.php</a></p><h2 id="Chrome扩展安装方法"><a href="#Chrome扩展安装方法" class="headerlink" title="Chrome扩展安装方法"></a>Chrome扩展安装方法</h2><p>1.直接把crx文件拖进扩展管理中心<br>如果顺利，你直接把这个直接拖进 Chrome 扩展程序页面就能安装了<br>2.不过有些时候，你可能会遇到安装 crx 文件报错<br> 这样的话，就用另外一个办法：</p><ul><li>在你的文件夹找到这个 crx 文件，确保你打开了文件管理器中的查看「文件扩展名」功能是勾上的</li><li>然后对你刚刚下载到的 crx 文件进行重命名，把扩展名改为 zip</li><li>然后把这个压缩包解压到一个你不会删除的位置！</li><li>打开 Chrome 扩展程序页面的「开发者模式」</li><li>然后「加载已解压的扩展程序」</li></ul><h2 id="二管家"><a href="#二管家" class="headerlink" title="二管家"></a>二管家</h2><p>Chrome 扩展管理工具<br>功能<br>1.根据规则自动开关扩展<br>2.管理扩展<br>3.根据网站推荐扩展<br>4.快速提取CRX</p><h2 id="同步书签"><a href="#同步书签" class="headerlink" title="同步书签"></a>同步书签</h2><h3 id="floccus"><a href="#floccus" class="headerlink" title="floccus"></a>floccus</h3><p>[地址] <a href="https://chrome.google.com/webstore/detail/floccus/fnaicdffflnofjppbagibeoednhnbjhg?utm_source=chrome-ntp-icon">https://chrome.google.com/webstore/detail/floccus/fnaicdffflnofjppbagibeoednhnbjhg?utm_source=chrome-ntp-icon</a><br>[开源地址：] <a href="https://github.com/marcelklehr/floccus/">https://github.com/marcelklehr/floccus/</a><br>[参考教程：] <a href="http://chromecj.com/accessibility/2019-07/2622.html">http://chromecj.com/accessibility/2019-07/2622.html</a> 移动的设置和桌面端基本是一样的。但是要注意，教程中的目录设置，桌面端可以选择根，但是移动端不能选择根，要选择移动设备书签。否则无法同步。</p><p>WebDAV ：目前支持 「坚果云、nextcloud / owncloud，box」 等 WebDAV 服务器同步</p><h3 id="BookmarkHub"><a href="#BookmarkHub" class="headerlink" title="BookmarkHub"></a>BookmarkHub</h3><p>跨浏览器同步书签<br>它使用 GitHub 的 Gist 记录来存储浏览器的书签，可以放心安全的使用。</p><h4 id="获取Github-Token"><a href="#获取Github-Token" class="headerlink" title="获取Github Token"></a>获取Github Token</h4><p>登录Github<br>选择“设置-开发者设置-生成新token”，这里记得勾选Gist，然后点击“生成token”即可。</p><h4 id="获取Gist-ID"><a href="#获取Gist-ID" class="headerlink" title="获取Gist ID"></a>获取Gist ID</h4><p>这里new gist</p><p><img src="https://gitee.com/wenkex/blogimage/raw/master/1.png"></p><p>进入对应的网页之后，输入描述、文件名、内容，这里可以随便输入即可，然后点击创建私有Gist。<br>这时，在地址栏可以看到，URL的尾部就是Gist ID。从4a开始<br><img src="https://gitee.com/wenkex/blogimage/raw/master/2.png"></p><h4 id="配置插件"><a href="#配置插件" class="headerlink" title="配置插件"></a>配置插件</h4><p>点击插件的设置添加信息<br><img src="https://gitee.com/wenkex/blogimage/raw/master/Quicker_20220108_140446.png"></p><h2 id="Unpaywal"><a href="#Unpaywal" class="headerlink" title="Unpaywal"></a>Unpaywal</h2><p>当你浏览一篇学术文章时，Unpaywall会从2000万个免费合法的文献库里索引一个PDF副本，如果找到对应的文章，会在侧边出现一个绿色按钮，点击按钮就可以阅读或者下载全文。</p><h2 id="WeChatSync（微信公众号同步助手）"><a href="#WeChatSync（微信公众号同步助手）" class="headerlink" title="WeChatSync（微信公众号同步助手）"></a>WeChatSync（微信公众号同步助手）</h2><p>原文：<a href="https://mp.weixin.qq.com/s/oTMc_t_f65ITyTgy4Wdg9g">https://mp.weixin.qq.com/s/oTMc_t_f65ITyTgy4Wdg9g</a><br>是一款将微信文章同步到知乎， B站，微博，豆瓣，百家号， 简书， 头条号，搜狐号， 大鱼号， 一点资讯， Cnblog， CSDN， 51CTO， 掘金， 慕课网-手记， 开源中国，Typecho，WordPress等许多平台。</p><h2 id="automa-自动化处理重复工作"><a href="#automa-自动化处理重复工作" class="headerlink" title="automa 自动化处理重复工作"></a>automa 自动化处理重复工作</h2><p>原文：<a href="https://mp.weixin.qq.com/s/ARID9OYRGcLLWGKT4BSd8Q">https://mp.weixin.qq.com/s/ARID9OYRGcLLWGKT4BSd8Q</a><br>Automa v0.5.1<br><a href="https://www.123pan.com/s/HQeA-EN1Sh">https://www.123pan.com/s/HQeA-EN1Sh</a></p><h2 id="Global-Speed-视频速度控制"><a href="#Global-Speed-视频速度控制" class="headerlink" title="Global Speed: 视频速度控制"></a>Global Speed: 视频速度控制</h2><p> 支持0.25~16倍速的视频加速播放。<br>而且它能用到的场景很多，比如某奇艺等平台的开头广告，直接点击16倍数，几秒就跳过去了。</p><h2 id="ViolentMonkey"><a href="#ViolentMonkey" class="headerlink" title="ViolentMonkey"></a>ViolentMonkey</h2><p>  让你的Chrome可以使用油猴脚本（相比 Tampermonkey、GreaseMonkey 更为简洁方便）</p><h2 id="Nimbus"><a href="#Nimbus" class="headerlink" title="Nimbus"></a>Nimbus</h2><p>一个网页版的多功能截图工具，提供了类似区域截屏、可滚动截屏、延迟截屏等等，花式截屏的小功能，甚至还可以帮你录制视频。</p><h1 id="网站分享"><a href="#网站分享" class="headerlink" title="网站分享"></a>网站分享</h1><p><a href="https://www.yuque.com/yashujs/bfug6u/dz9uiw">https://www.yuque.com/yashujs/bfug6u/dz9uiw</a></p><h2 id="好用的网站"><a href="#好用的网站" class="headerlink" title="好用的网站"></a>好用的网站</h2><p>可以在 Codelf 网站上直接搜索，或安装 Codelf 插件<br><a href="https://unbug.github.io/codelf">变量命名神器</a></p><p><a href="https://hyperbeam.com/">https://hyperbeam.com/</a><br>注册好账号登录后，需要你创建一个房间，然后把房间链接分享出去就能和远在异地的女朋友交流了，支持文字、GIF、视频、语音通话。</p><h4 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h4><p>改图鸭网站提供图片压缩、图片编辑、图片转文字等功能<br><a href="https://www.gaituya.com/">https://www.gaituya.com/</a><br>用卷积神经网络把小而糊的图片进行放大，支持降噪处理，<br><a href="http://waifu2x.udp.jp/">http://waifu2x.udp.jp/</a><br>可快速将 JPG、PNG 等格式的图片快速转换为 SVG 矢量图<br><a href="https://www.visioncortex.org/vtracer/">https://www.visioncortex.org/vtracer/</a></p><p>世界各地的朋友在这里分享他们的桌面布置灵感<br><a href="https://www.makerstations.io/">https://www.makerstations.io/</a><br>为大家介绍创意相关工作者的工作桌面摆设情况<br><a href="https://www.workspaces.xyz/">https://www.workspaces.xyz/</a></p><p>东京大学发布的一款工具 ：paper-digest<br>可利用 AI 为每篇论文生成摘要，将阅读时间缩短为 3 分钟<br>目前该工具仍处于初级阶段，生成的论文摘要仅供参考，深入研究最好还是阅读论文原稿。<br><a href="https://www.paper-digest.com/">https://www.paper-digest.com/</a></p><p>清华大学计算机系课程攻略<br><a href="https://rekcarc-tsc-uht.readthedocs.io/en/latest/">https://rekcarc-tsc-uht.readthedocs.io/en/latest/</a><br><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">https://github.com/PKUanonym/REKCARC-TSC-UHT</a></p><p>spider-flow一个无需写代码的爬虫平台<br><a href="https://www.spiderflow.org/">https://www.spiderflow.org/</a><br><a href="https://github.com/ssssssss-team/spider-flow">https://github.com/ssssssss-team/spider-flow</a></p><p>Kmonad，一个自由改变键盘布局的软件<br>可以让你无限地定制和扩展几乎所有键盘功能，包括改建、配置组合键等功能<br><a href="https://www.appinn.com/kmonad/">https://www.appinn.com/kmonad/</a></p><p> 用 Fruition + Notion 搭建个人网站<br>DEMO: <a href="https://fruitionsite.com/">https://fruitionsite.com/</a><br>GitHub: <a href="https://github.com/stephenou/fruitionsite">https://github.com/stephenou/fruitionsite</a><br>作者主页： <a href="https://stephenou.com/">https://stephenou.com/</a><br>教程：<a href="https://the-block.club/Fruition-Notion-e05ddf4392744a8a819a30ac7952520b">https://the-block.club/Fruition-Notion-e05ddf4392744a8a819a30ac7952520b</a></p><p>2021年【思维导图】盒子，C/C++，Golang，Linux，云原生，数据库，DPDK，音视频开发，TCP/IP，数据结构，计算机原理等<br><a href="https://github.com/0voice/learning_mind_map">https://github.com/0voice/learning_mind_map</a></p><p>extract.pics？</p><p>Extract.pics 是一个易于使用的工具，允许您从任何公共网站提取、查看和下载图像。只需将网站的 URL 粘贴到输入字段中，然后单击“提取”即可开始该过程。</p><p>fffuel：设设设计用的小工具集合</p><p>官网 <a href="https://fffuel.co/">https://fffuel.co/</a>  </p><p>fffuel 是一个「即将推出」Html 模板的集合网站。除了网页模板，还提供了一些在网页设计中会使用到的工具</p><p> ssshape <a href="https://fffuel.co/ssshape/">https://fffuel.co/ssshape/</a> ：矢量形状生成器<br>在画布上添加几个点，点击 ssshape，会自动闭合所有点并对其形状进行平滑处理，最终得到一个边缘平滑的 SVG 形状</p><p> llline <a href="https://fffuel.co/llline/">https://fffuel.co/llline/</a> ：矢量线段生成器<br>在画布上添加几个点，点击生成后便能得到一条光滑的曲线，然后你可以旋转角度、改变它的颜色以及线段的形态</p><p> bbburst <a href="https://fffuel.co/bbburst/">https://fffuel.co/bbburst/</a> ：图形散落分布<br>以往想要制作一个「图形散落」风格的背景图，大多是通过喷枪或逐个逐个放置而成，过程比较繁琐。bbburst 可以帮你在预设的几个图形中，自动生成一张「图形散落」风格的图片</p><p> nnnoise <a href="https://fffuel.co/nnnoise/">https://fffuel.co/nnnoise/</a> ：「杂色」纹理生成器<br>利用 nnnoise，可以生成一些「杂色」纹理，搭配上你想要的风格，或许别有一番滋味</p><p> dddoodle <a href="https://fffuel.co/dddoodle/">https://fffuel.co/dddoodle/</a> ：「极其」手绘风格的插图<br>dddoodle 是一套手绘的 doodle 插图，其中有线段、箭头、圆形、星星以及一些有趣的形状，均为 CC 协议</p><p>✅ rrready <a href="https://fffuel.co/rrready/">https://fffuel.co/rrready/</a> ：CSS 特性兼容列表<br>不同浏览器支持不同 CSS 特性，这个问题长期困扰着开发者，利用 rrready 可以查看要使用到的 CSS 特性在不同浏览器中是否能够达成一致的效果</p><p> cccolor <a href="https://fffuel.co/cccolor">https://fffuel.co/cccolor</a> ：选色器<br>除了能够利用色盘、哈希值选取到想要的颜色，cccolor 还会为你生成匹配该颜色的相似色调、适合作为其阴影的颜色，及与其匹配的冷暖色调</p><p> ffflux <a href="https://fffuel.co/ffflux/">https://fffuel.co/ffflux/</a> ：流体渐变生成器<br>流体渐变带来的冲击力会比普通渐变色更强，色彩也更加丰富，或许能让你的设计更加活跃</p><p> lllook <a href="https://fffuel.co/lllook/">https://fffuel.co/lllook/</a> ：你想要什么表情<br>lllook 是一套面部的简笔画表情包，比 emoji 丰富得多，也更加有趣</p><p> 除了这些小工具，fffuel 的作者 Seb <a href="https://sebseb.co/">https://sebseb.co/</a>  还有其它有趣的项目，不妨去看看，其中我比较喜欢的是 muted <a href="https://muted.io/">https://muted.io/</a>  和 rrrelax <a href="https://rrrelax.app/">https://rrrelax.app/</a> ，这里还有他整理的一些 设计小工具 <a href="https://cccreate.co/">https://cccreate.co/</a>  </p><h2 id="程序员学习网站"><a href="#程序员学习网站" class="headerlink" title="程序员学习网站"></a>程序员学习网站</h2><p><a href="https://mp.weixin.qq.com/s/5TVmsaYP_M_y2zGZdCFuUg">原文</a></p><ol><li>中国大学MOOC<br>中国大学MOOC原名ICOURSE（爱课程），是教育R部和网易共同合作发布的一个互联网教育平台，旨在推动高等教学资源共享，让大家能免费享受许多985及TOP名校课程。绝大部分领域均有免费国家精品课程，资深教授授课！蹭网课必备！</li></ol><p>网址：<a href="https://www.icourse163.org/">https://www.icourse163.org/</a></p><ol start="2"><li>中国国家图书馆<br>中国国家图书馆，收录绝对够全！只有你想不到，没有你搜不到，想要的资料应有尽有，还可以在线阅读~ 无论专业书籍还是人文书籍，均可搜索得到，还配有其ISBN账号，配合某盘资源可以进行pdf搜索下载！</li></ol><p>网址：<a href="http://www.nlc.cn/">http://www.nlc.cn/</a></p><ol start="3"><li>B站<br>B站不再是一个看番刷鬼畜的地方，学习课程越来越多，你想学的东西基本都可以在这里找到~</li></ol><p>网址：<a href="https://www.bilibili.com/">https://www.bilibili.com/</a></p><ol start="4"><li>W3C<br>W3School，一个全球最大的中文 Web 技术教程。在 W3School，你可以找到你所需要的所有的网站建设教程。从基础的 HTML 到 CSS，乃至进阶的 XML、SQL、JS、PHP 和 ASP.NET。</li></ol><p>网址：<a href="https://www.w3school.com.cn/">https://www.w3school.com.cn/</a></p><ol start="5"><li>菜鸟教程<br>和W3C性质差不多，都是提供各种基础编程教程，可以让你在短时间内实现从0到1的质的飞跃！</li></ol><p>网址：<a href="https://www.runoob.com/">https://www.runoob.com/</a></p><ol start="6"><li>MDN<br>MDN Web Docs 站点提供有关开放 Web 技术的信息，包括用于 Web 站点和渐进式 Web 应用程序的 HTML、CSS 和 API。面向Web开发者的文档，权威教程。</li></ol><p>网址：<a href="https://developer.mozilla.org/zh-CN/docs/Web">https://developer.mozilla.org/zh-CN/docs/Web</a></p><ol start="7"><li>掘金<br>掘金是一个帮助开发者成长的社区,是给开发者用的 Hacker News,给设计师用的 Designer News,和给产品经理用的 Medium。有不少技术大牛和极客们在输出优质干货。</li></ol><p>网址：<a href="https://juejin.cn/">https://juejin.cn/</a></p><ol start="8"><li>Github<br>GitHub 是世界上最大的代码托管平台。如果说 P***Hub 对于宅男来说是神一般的存在，那么 GitHub 对于程序员来说是永远滴神！</li></ol><p>网址：<a href="https://github.com/">https://github.com/</a></p><ol start="9"><li>慕课网<br>慕课网（IMOOC）是IT技能学习平台。慕课网(IMOOC)课程涉及JAVA、前端、Python、大数据等60类主流技术语言，覆盖了面试就业、职业成长、自我提升等需求场景，帮助用户实现从技能提升到岗位提升的能力闭环。</li></ol><p>网址：<a href="https://www.imooc.com/">https://www.imooc.com/</a></p><ol start="10"><li>张鑫旭的博客<br>博客语言以简单明了著称，擅长深入挖掘css技巧及内部实现机制。</li></ol><p><a href="https://www.zhangxinxu.com/wordpress/">https://www.zhangxinxu.com/wordpress/</a></p><ol start="11"><li>The Odin Project<br>Odin 项目使有抱负的 Web 开发人员能够免费一起学习</li></ol><p>网址：<a href="https://www.theodinproject.com/paths/foundations/courses/foundations">https://www.theodinproject.com/paths/foundations/courses/foundations</a></p><ol start="12"><li> angularJS学习资源合集<br>一个 angularJS 资源大全</li></ol><p>网址：<a href="https://angularjs.zeef.com/gianluca.arbezzano">https://angularjs.zeef.com/gianluca.arbezzano</a></p><ol start="13"><li>30 seconds of code<br>当你打开这个网站时，你会发下自己捡到宝了，这个网站分享了1084个有用的简短代码片段,你可以在30秒或更少时间中理解,满足开发者绝大多数开发需求</li></ol><p>网址：<a href="https://www.30secondsofcode.org/">https://www.30secondsofcode.org/</a></p><ol start="14"><li>JS Tips<br>这是一个分享 JavaScript 小技巧的网站,让读者提升撰写代码的能力.每天花不到 2 分鐘，你可以阅读到关于效能、习惯、技术、面试问题以及所有 JavaScript 相关知识</li></ol><p>网址：<a href="https://www.jstips.co/zh_CN/javascript/">https://www.jstips.co/zh_CN/javascript/</a></p><ol start="15"><li>如何跟上前端开发的最新前沿<br>这是一个帮助前端学子们了解最新推出的工具, 最新的潮流以及开发流程的网站</li></ol><p>网址：<a href="https://uptodate.frontendrescue.org/zh/">https://uptodate.frontendrescue.org/zh/</a></p><ol start="16"><li>JS Run<br>JSRUN.NET 一个极具活力的代码在线运行平台。有专业的HTML/CSS/JS在线调试工具，适用前端工程师的开发和学习。同时还有C语言、Java、PHP、Python等代码在线编译运行工具</li></ol><p>网址：<a href="https://jsrun.net/">https://jsrun.net/</a></p><ol start="17"><li>Codepen<br>Codepen是一个完全免费的前端 Web 开发的在线代码编辑器、学习环境和社区，汇集了大量的优秀前端作品，很多大佬的作品都会上传到这里。</li></ol><p>网址：<a href="https://codepen.io/">https://codepen.io/</a></p><ol start="18"><li>ES6 入门教程<br>《ECMAScript 6 入门教程》一本由阮一峰老师撰写开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。这本书主要引导你进入 React 和 Webpack 世界。</li></ol><p>网址：<a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p><ol start="19"><li>Stack Overflow<br>Stack Overflow 作为全球最大的技术问答网站，几乎没有你找不到的问题</li></ol><p>网址：<a href="https://stackoverflow.com/">https://stackoverflow.com/</a></p><ol start="20"><li>SegmentFault<br>SegmentFault 思否是中国领先的开发者技术社区。国内风靡的程序员社区，以技术问答、技术专栏、技术课程、技术资讯为核心的产品形态,为开发者提供纯粹、高质的技术交流平台。</li></ol><p>网址：<a href="https://segmentfault.com/">https://segmentfault.com/</a></p><ol start="21"><li>LeetCode<br>LeetCode 是一个非常棒的OJ（Online Judge）平台，收录了许多互联网公司的算法题目，被称为刷题神器</li></ol><p>网址：<a href="https://leetcode-cn.com/">https://leetcode-cn.com/</a></p><ol start="22"><li>LintCode<br>这个网站可算是个面试的“作弊神器”吧，因为上面有很多国内外大厂面试真题，里面大厂面试真题还挺多的，而且会定期更新，跳槽前可以看一看~</li></ol><p>网址：<a href="https://www.lintcode.com/">https://www.lintcode.com/</a></p><ol start="23"><li>程序员一站式导航<br>这个导航站提供了最精华有趣的内容，根据分类可以找到你所需要的站点、工具，能够节省不少时间~</li></ol><p>网址：<a href="https://cxy521.com/">https://cxy521.com/</a></p><h4 id="提高web前端开发效率的网站"><a href="#提高web前端开发效率的网站" class="headerlink" title="提高web前端开发效率的网站"></a>提高web前端开发效率的网站</h4><h6 id="Animista"><a href="#Animista" class="headerlink" title="Animista"></a>Animista</h6><p>地址：<a href="https://animista.net/">https://animista.net/</a><br>Animista 是一个简单的 CSS 动画库网站。您可以测试和使用现成的 CSS 动画，也可以下载它们的代码。Web 开发人员一定要上的网站，这个对您提升开发效率非常有帮助。</p><h6 id="Ray-so"><a href="#Ray-so" class="headerlink" title="Ray.so"></a>Ray.so</h6><p>地址：<a href="https://ray.so/">https://ray.so/</a><br>此网站可以将让您制作的精美图像进行源代码的分享。它支持几乎所有的编程语言格式。您可以设置背景、颜色、字体等。一定要试试这个网站。</p><h6 id="FontAwesome"><a href="#FontAwesome" class="headerlink" title="FontAwesome"></a>FontAwesome</h6><p>地址：<a href="https://fontawesome.com/">https://fontawesome.com/</a></p><p>如果您在为您的项目寻找一些很棒的图标，您可以访问 FontAwesome 下载任何项目的免费图标。</p><h6 id="Jsfiddle"><a href="#Jsfiddle" class="headerlink" title="Jsfiddle"></a>Jsfiddle</h6><p>地址：<a href="http://jsfiddle/">http://jsfiddle/</a></p><p>Jsfiddle 是代码编辑器，您可以在其中通过实时预览测试 JavaScript、CSS、Html 代码。该网站是 Web 开发人员的便捷工具。</p><h6 id="Unscreen"><a href="#Unscreen" class="headerlink" title="Unscreen"></a>Unscreen</h6><p>地址：<a href="https://www.unscreen.com/">https://www.unscreen.com/</a></p><p>Unscreen 是一个帮助您去除视频背景的网站。它用于制作无背景视频。必须尝试该网站。</p><h6 id="Dev-Samples"><a href="#Dev-Samples" class="headerlink" title="Dev Samples"></a>Dev Samples</h6><p>地址：<a href="https://www.devsamples.com/">https://www.devsamples.com/</a><br>此网站是您可以自由复制粘贴到项目中的代码集合网站。该网站的重点是 Web 开发人员的源代码。Dev Samples 对新手开发人员来说很方便。</p><p>Readme.so</p><p>地址：<a href="https://readme.so/">https://readme.so/</a></p><p>Readme.so 是一个在线自述文件制作，可帮助开发人员为其项目创建自述文件。大多数开发人员使用readme.so为其 Github 项目创建自述文件。</p><h6 id="ScreenShot-rock"><a href="#ScreenShot-rock" class="headerlink" title="ScreenShot.rock"></a>ScreenShot.rock</h6><p>地址：<a href="https://screenshot.rocks/">https://screenshot.rocks/</a></p><p>Screenshot Rock 是一个可以创建漂亮的移动和浏览器屏幕截图的地方。您只需要上传任何屏幕截图，它就会为浏览器提供移动框架触摸功能。</p><h6 id="Undesign"><a href="#Undesign" class="headerlink" title="Undesign"></a>Undesign</h6><p>地址：<a href="https://undesign.learn.uno/">https://undesign.learn.uno/</a></p><p>Undesign 是设计工具、插图、开发人员和设计师的源代码、制造商资源等的免费集合。一定要试试这个网站。</p><h6 id="Coolors"><a href="#Coolors" class="headerlink" title="Coolors"></a>Coolors</h6><p>地址：<a href="http://coolors/">http://coolors/</a></p><p>Coolors 是我推荐的颜色组合网站。每次按“空格键”时，它都会生成新的颜色组合。</p><p><a href="https://mp.weixin.qq.com/s/o_f9U9SPFUnaj3LWmtk_PA">参考</a></p><h4 id="服务器和网站在线测速工具"><a href="#服务器和网站在线测速工具" class="headerlink" title="服务器和网站在线测速工具"></a>服务器和网站在线测速工具</h4><p><a href="http://ping.pe/">http://ping.pe</a><br><a href="https://www.ping.cn/">https://www.ping.cn/</a><br><a href="https://ping.chinaz.com/">站长工具</a><br><a href="https://ping.aizhan.com/">https://ping.aizhan.com</a><br><a href="https://zijian.aliyun.com/detect/http/">阿里云网站运维检测平台</a></p><h2 id="写论文可以用到的网站："><a href="#写论文可以用到的网站：" class="headerlink" title="写论文可以用到的网站："></a>写论文可以用到的网站：</h2><ol><li><p>国家哲学社会科学文献中心： <a href="http://www.ncpssd.org/">www.ncpssd.org</a><br>现有中文期刊、外文期刊、古籍等资源，收录哲学社会科学相关领域文献共计10,000,000余条，提供有线阅读、全文下载等服务。</p></li><li><p>文津搜索： find.nlc.cn<br>国家图书馆资源检索，汇聚了60多个资源库、近2亿条文献信息，可以查询包括图书、古文献、论文、期刊报纸、多媒体等在内的多种资料。</p></li><li><p>术语在线： <a href="http://www.termonline.cn/">www.termonline.cn</a><br>一个可以查询专业术语的在线网站，非常权威，内容更新也很及时。</p></li><li><p>科塔学术： site.sciping.com<br>学术导航网站，整理了许多论文搜索网站、学术工具、科研软件、期刊出版等，每一个都有细致的分类，并归纳了对应的网站。</p></li><li><p>Academic Phrasebank： <a href="http://www.phrasebank.manchester.ac.uk/">www.phrasebank.manchester.ac.uk</a><br>论文写作助手，这个网站主要提供论文各部分的模版，如介绍怎么写，总结怎么写，如何描述方法，报告细节等，对非英语母语作者非常有帮助。</p></li><li><p>iData： <a href="http://www.cn-ki.net/">www.cn-ki.net</a><br>一个知网镜像站，可以免费下载论文，知网比较新的没有，每天有免费下载限额。</p></li><li><p>SCI-Hub： sci-hub.com<br>这个网站就不多介绍了，一个超棒的免费下载论文的网站，输入文献doi号即可搜索下载。</p></li><li><p>OALib： <a href="http://www.oalib.com/">www.oalib.com</a><br>目前收录了570万篇学术论文，涵盖多个领域，所有文章均可免费下载，是一个较为高效的论文查找网站。</p></li><li><p>研享网： <a href="http://www.academicshare.cn/">www.academicshare.cn</a><br>检索下载英文文献的利器，页面超级干净，支持关键词、题目、论文doi搜索。</p></li><li><p>Medsci： <a href="http://www.medsci.cn/sci">www.medsci.cn/sci</a><br>期刊智能查询系统，支持模糊查询，每一个期刊还有对应的论坛。</p></li><li><p>Connected Papers： <a href="http://www.connectedpapers.com/">www.connectedpapers.com</a><br>文献调研必备神器，它可以在线进行分析文献的引文信息，轻松了解某篇文献的引用和被引用关联，分析出文献的前世今生，方便我们对一篇文献或者某个领域进行调研。</p></li><li><p>近邻词汇检索： tool.mingdawoo.com<br>可免费查找近似短语和相关术语，词穷的时候可以看看。</p></li><li><p>秘塔写作猫： xiezuocat.com<br>可以校对中文字词错误、标点错误、语序错误、语法问题、同意混淆等，并给出修改建议，支持全文分析和智能排版，免费版基本上能满足日常需求。</p></li><li><p>Grammarly： <a href="http://www.grammarly.com/">www.grammarly.com</a><br>英文语法错误查询好助手，可以安装为word插件，在你写作的时候就可以纠正你的语法错误了。</p></li><li><p>知犀思维导图： <a href="http://www.zhixi.com/">www.zhixi.com</a><br>免费好用的论文大纲整理工具，可以借助这个工具做论文大纲。这个网站还提供许多思维导图模板，包括工作方法、考研考证的资料、管理方法、科普知识等方面的模板。</p></li><li><p>词云统计： cloud.niucodata.com<br>在线中文词汇统计和分析工具，可以帮助用户分析一段话中的词性分类、词频统计并生成词云图。</p></li><li><p>Linggle： <a href="http://www.linggle.com/">www.linggle.com</a><br>提供英文常用语、搭配、近义词等检索，可以根据词性来推测完整搭配，还能帮助学习者分析出更准确的英文写作建议。</p></li><li><p>Netspeak： netspeak.org<br>这个网站也是词汇，不过是用来查找你记不太清楚的词汇，比如congratulations，你不记得全部拼写了，你就可以在这个网站上来查一下。</p></li><li><p>Linguee： cn.linguee.com<br>一个全能的在线多语言互译平台，提供24种语言的对应查询服务，而且还收集了数亿条译文例句，无论是日常领域的术语，还是专业难度偏大的词汇，在这里都能找到专业的翻译方式。</p></li><li><p>DocTranslator： <a href="http://www.onlinedoctranslator.com/">www.onlinedoctranslator.com</a><br>可免费在线翻译文档，支持109种不同语言文档任意转换，并保持排版不变。操作简单，直接上传文档就可以。   </p></li></ol><h2 id="学习用"><a href="#学习用" class="headerlink" title="学习用"></a>学习用</h2><p>CSDN：<a href="https://www.csdn.net/">https://www.csdn.net/</a></p><p>TED（最优质的演讲）：</p><p><a href="https://www.ted.com/">https://www.ted.com/</a></p><p>谷粉学术：</p><p><a href="https://gfsoso.99lb.net/scholar.html">https://gfsoso.99lb.net/scholar.html</a></p><p>大学资源网：<a href="http://www.dxzy163.com/">http://www.dxzy163.com/</a></p><p>简答题：<a href="http://www.jiandati.com/">http://www.jiandati.com/</a></p><p>网易公开课：<a href="https://open.163.com/ted/">https://open.163.com/ted/</a></p><p>网易云课堂：<a href="https://study.163.com/">https://study.163.com/</a></p><p>中国大学MOOC：<a href="http://www.icourse163.org/">www.icourse163.org</a></p><p>哔哩哔哩弹幕网：<a href="http://www.bilibili.com/">www.bilibili.com</a></p><p>我要自学网：<a href="http://www.51zxw.net/">www.51zxw.net</a></p><p>知乎：<a href="http://www.zhihu.com/">www.zhihu.com</a></p><p>学堂在线：<a href="http://www.xuetangx.com/">www.xuetangx.com</a></p><p>爱课程：<a href="http://www.icourses.cn/">www.icourses.cn</a></p><p>猫咪论文：<a href="https://lunwen.im/">https://lunwen.im/</a></p><p>iData（论文搜索）：<a href="http://www.cn-ki.net/">www.cn-ki.net</a></p><p>文泉考试：<a href="https://www.wqkaoshi.com/">https://www.wqkaoshi.com</a></p><p>编程题库网(大厂最热题库列表) <a href="https://94tiku.com/">https://94tiku.com</a></p><h2 id="找书籍用"><a href="#找书籍用" class="headerlink" title="找书籍用"></a>找书籍用</h2><p><a href="http://www.banshujiang.cn/">搬书匠</a></p><p>书栈网（极力推荐）：<a href="https://www.bookstack.cn/">https://www.bookstack.cn/</a></p><p>码农之家（计算机电子书下载）：</p><p><a href="http://www.xz577.com/">www.xz577.com</a></p><p>鸠摩搜书：<a href="http://www.jiumodiary.com/">www.jiumodiary.com</a></p><p>云海电子图书馆：<a href="http://www.pdfbook.cn/">www.pdfbook.cn</a></p><p>周读（书籍搜索）：ireadweek.com</p><p>知轩藏书：<a href="http://www.zxcs.me/">http://www.zxcs.me/</a></p><p>脚本之家电子书下载：</p><p><a href="https://www.jb51.net/books/">https://www.jb51.net/books/</a></p><p>搜书VIP-电子书搜索：</p><p><a href="http://www.soshuvip.com/all.html">http://www.soshuvip.com/all.html</a></p><p>书格（在线古籍图书馆）：</p><p><a href="https://new.shuge.org/">https://new.shuge.org/</a></p><p>caj云阅读：</p><p><a href="http://cajviewer.cnki.net/cajcloud/">http://cajviewer.cnki.net/cajcloud/</a></p><p>必看网（人生必看的书籍）：</p><p><a href="https://www.biikan.com/">https://www.biikan.com/</a></p><h2 id="冷知识-黑科技"><a href="#冷知识-黑科技" class="headerlink" title="冷知识 / 黑科技"></a>冷知识 / 黑科技</h2><p>上班摸鱼必备（假装电脑系统升级）：<a href="http://fakeupdate.net/">http://fakeupdate.net/</a></p><p>PIECES 拼图（30 个 CSS 碎片进行拼图，呈现 30 种濒临灭绝的动物）：</p><p><a href="http://www.species-in-pieces.com/">http://www.species-in-pieces.com/</a></p><p>图片立体像素画：</p><p><a href="https://pissang.github.io/voxelize-image/">https://pissang.github.io/voxelize-image/</a></p><p>福利单词（一个不太正经的背单词网站）：</p><p><a href="http://dict.ftqq.com/">http://dict.ftqq.com</a></p><p>查无此人（刷新网站，展现一张AI 生成的人脸照片）：</p><p><a href="https://thispersondoesnotexist.com/">https://thispersondoesnotexist.com/</a></p><p>在线制作地图图例：<a href="https://mapchart.net/">https://mapchart.net/</a></p><p>创意光线绘画：<a href="http://weavesilk.com/">http://weavesilk.com/</a></p><p>星系观察：<a href="https://stellarium-web.org/">https://stellarium-web.org/</a></p><p>煎蛋：<a href="http://jandan.net/">http://jandan.net/</a></p><p>渣男-说话的艺术：<a href="https://lovelive.tools/">https://lovelive.tools/</a></p><p>全历史：<a href="https://www.allhistory.com/">https://www.allhistory.com/</a></p><p>iData：<a href="https://www.cn-ki.net/">https://www.cn-ki.net/</a></p><p>术语在线：<a href="http://www.termonline.cn/">http://www.termonline.cn/</a></p><h2 id="写代码用"><a href="#写代码用" class="headerlink" title="写代码用"></a>写代码用</h2><p>GitHub：<a href="https://github.com/">https://github.com/</a></p><p>码云：<a href="https://gitee.com/">https://gitee.com/</a></p><p>源码之家：<a href="https://www.mycodes.net/">https://www.mycodes.net/</a></p><p>JSON to Dart：</p><p><a href="https://javiercbk.github.io/json_to_dart/">https://javiercbk.github.io/json_to_dart/</a></p><p>Json在线解析验证：</p><p><a href="https://www.json.cn/">https://www.json.cn/</a></p><p>在线接口测试（Getman）：</p><p><a href="https://getman.cn/">https://getman.cn/</a></p><h2 id="资源搜索用"><a href="#资源搜索用" class="headerlink" title="资源搜索用"></a>资源搜索用</h2><p>DogeDoge搜索引擎：<a href="http://www.dogedoge.com/">www.dogedoge.com</a></p><p>秘迹搜索：<a href="https://mijisou.com/">https://mijisou.com/</a></p><p>小白盘：<a href="https://www.xiaobaipan.com/">https://www.xiaobaipan.com/</a></p><p>云盘精灵（资源搜索）：</p><p><a href="http://www.yunpanjingling.com/">www.yunpanjingling.com</a></p><p>虫部落（资源搜索）：</p><p><a href="http://www.chongbuluo.com/">www.chongbuluo.com</a></p><p>如风搜（资源搜索）：</p><p><a href="http://www.rufengso.net/">http://www.rufengso.net/</a></p><p>爱扒：<a href="https://www.zyboe.com/">https://www.zyboe.com/</a></p><h2 id="各种小工具"><a href="#各种小工具" class="headerlink" title="各种小工具"></a>各种小工具</h2><p>奶牛快传（在线传输文件利器）：cowtransfer.com</p><p>文叔叔（大文件传输，不限速）：</p><p><a href="https://www.wenshushu.cn/">https://www.wenshushu.cn/</a></p><p>云端超级应用空间（PS，PPT，Excel，Ai）：<a href="https://uzer.me/">https://uzer.me/</a></p><p>香当网（年终总结，个人简历，事迹材料，租赁合同，演讲稿）：</p><p><a href="https://www.xiangdang.net/">https://www.xiangdang.net/</a></p><p>二维码生成：<a href="https://cli.im/">https://cli.im/</a></p><p>搜狗翻译：fanyi.sogou.com</p><p>熵数（图表制作，数据可视化）：</p><p><a href="https://dydata.io/appv2/##/pages/index/home">https://dydata.io/appv2/##/pages/index/home</a></p><p>拷贝兔：<a href="https://cp.anyknew.com/">https://cp.anyknew.com/</a></p><p>图片无限变放大：<a href="http://bigjpg.com/zh">http://bigjpg.com/zh</a></p><p>幕布（在线大纲笔记工具）：mubu.com</p><p>在线转换器（在线转换器转换任何测量单位）：<a href="https://zh.justcnw.com/">https://zh.justcnw.com/</a></p><p>调查问卷制作：</p><p><a href="https://www.wenjuan.com/">https://www.wenjuan.com/</a></p><p>果核剥壳（软件下载）：</p><p><a href="https://www.ghpym.com/">https://www.ghpym.com/</a></p><p>软件下载：<a href="https://www.unyoo.com/">https://www.unyoo.com/</a></p><p>MSDN我告诉你（windows10系统镜像下载）：<a href="https://msdn.itellyou.cn/">https://msdn.itellyou.cn/</a></p><p>网站工具箱<br><a href="https://www.67tool.com/">https://www.67tool.com/</a></p><p><a href="https://tools.miku.ac/">https://tools.miku.ac/</a><br>功能：收款码合并</p><h2 id="导航页（工具集）"><a href="#导航页（工具集）" class="headerlink" title="导航页（工具集）"></a>导航页（工具集）</h2><p>世界各国网址大全：</p><p><a href="http://www.world68.com/">http://www.world68.com/</a></p><p>小森林导航：<a href="http://www.xsldh6.com/">http://www.xsldh6.com/</a></p><p>简捷工具：<a href="http://www.shulijp.com/">http://www.shulijp.com/</a></p><p>NiceTool.net 好工具网：</p><p><a href="http://www.nicetool.net/">http://www.nicetool.net/</a></p><p>现实君工具箱（综合型在线工具集成网站）：<a href="http://tool.uixsj.cn/">http://tool.uixsj.cn/</a></p><p>蓝调网站：<a href="http://lcoc.top/">http://lcoc.top/</a></p><p>偷渡鱼：<a href="https://touduyu.com/">https://touduyu.com/</a></p><p>牛导航：<a href="http://www.ziliao6.com/">http://www.ziliao6.com/</a></p><p>小呆导航：</p><p><a href="https://www.webjike.com/index.html">https://www.webjike.com/index.html</a></p><p>简法主页：<a href="http://www.jianfast.com/">http://www.jianfast.com/</a></p><p>KIM主页：<a href="https://kim.plopco.com/">https://kim.plopco.com/</a></p><p>聚BT：<a href="https://jubt.net/cn/index.html">https://jubt.net/cn/index.html</a></p><p>精准云工具合集：</p><p><a href="https://jingzhunyun.com/">https://jingzhunyun.com/</a></p><p>兔2工具合集：<a href="https://www.tool2.cn/">https://www.tool2.cn/</a></p><p>爱资料工具（在线实用工具集合）：</p><p><a href="http://www.toolnb.com/">www.toolnb.com</a></p><p>工具导航：<a href="https://hao.logosc.cn/">https://hao.logosc.cn/</a></p><h2 id="音乐"><a href="#音乐" class="headerlink" title="音乐"></a>音乐</h2><h4 id="将加密的音乐文件转为可播放的-mp3-文件。"><a href="#将加密的音乐文件转为可播放的-mp3-文件。" class="headerlink" title="将加密的音乐文件转为可播放的 mp3 文件。"></a>将加密的音乐文件转为可播放的 mp3 文件。</h4><p>目前支持网易云音乐 (.ncm) 、QQ 音乐 (.qmc, .mflac, .mgg) 、酷狗音乐 (.kgm) 、虾米音乐 (.xm) 、酷我音乐 (.kwm) 等格式。<br>项目提供了网页版  浏览器扩展  Docker  和命令行版 等多种使用方式，所有转换都在本地进行，无需担心隐私问题。<br>网页版：<a href="https://demo.unlock-music.dev/">https://demo.unlock-music.dev/</a><br>项目地址：<a href="https://github.com/unlock-music/unlock-music">https://github.com/unlock-music/unlock-music</a><br>代码仓库：<a href="https://git.unlock-music.dev/um/web">https://git.unlock-music.dev/um/web</a></p><h2 id="看视频用"><a href="#看视频用" class="headerlink" title="看视频用"></a>看视频用</h2><p>阿木影视：<a href="https://www.aosk.online/">https://www.aosk.online/</a></p><p>电影推荐（分类别致）：</p><p><a href="http://www.mvcat.com/">http://www.mvcat.com</a></p><p>APP影院：<a href="https://app.movie/">https://app.movie</a></p><p>去看TV：<a href="https://www.qukantv.net/">https://www.qukantv.net/</a></p><p>动漫视频网：<a href="http://www.zzzfun.com/">http://www.zzzfun.com/</a></p><p>94神马电影网：<a href="http://www.9rmb.com/">http://www.9rmb.com/</a></p><p>NO视频官网：<a href="http://www.novipnoad.com/">http://www.novipnoad.com/</a></p><p>蓝光画质电影：<a href="http://www.languang.co/">http://www.languang.co/</a></p><p>在线看剧：<a href="http://dy.27234.cn/">http://dy.27234.cn/</a></p><p>大数据导航：<a href="http://hao.199it.com/">http://hao.199it.com/</a></p><p><a href="https://qzy998-1.ysgq.xyz/">https://qzy998-1.ysgq.xyz/</a></p><p>片库：<a href="https://www.mypianku.net/">https://www.mypianku.net</a></p><p>奈飞中文电影站：<a href="https://yanetflix.com/">https://yanetflix.com</a></p><p>剧嗨：<a href="https://www.juhi.cc/">https://www.juhi.cc</a></p><p>555电影网：<a href="https://www.o8tv.com/">https://www.o8tv.com</a></p><p>Tubitv：<a href="https://tubitv.com/">https://tubitv.com</a></p><p>片源：<a href="http://pianyuan.org/">http://pianyuan.org/</a><br>影视导航网站：<a href="http://www.549.tv/">http://www.549.tv/</a><br>片吧  <a href="https://www.pianba.net/">https://www.pianba.net/</a><br>低端影视  <a href="https://ddrk.me/">https://ddrk.me/</a><br>片库  <a href="https://www.pianku.li/">https://www.pianku.li/</a><br>七七看片  <a href="https://www.77kpp.com/">https://www.77kpp.com/</a><br>旋风视频  <a href="https://miao101.com/">https://miao101.com/</a><br>体育直播：<a href="https://feisuzhibo.com/">https://feisuzhibo.com</a><br>BD影视分享 <a href="https://www.bd2020.com/">https://www.bd2020.com/</a><br>一刻电影 <a href="http://www.yikedy.co/">http://www.yikedy.co/</a><br>影视教程 <a href="https://www.yuque.com/eureka007/ziyuan/rnezaq">https://www.yuque.com/eureka007/ziyuan/rnezaq</a></p><h4 id="VIP视频解析网站"><a href="#VIP视频解析网站" class="headerlink" title="VIP视频解析网站"></a>VIP视频解析网站</h4><p>365t在線免費解析觀看系統<br><a href="http://vip.365tol.top/">http://vip.365tol.top/</a><br>BL智能解析<br><a href="https://vip.bljiex.com/">https://vip.bljiex.com/</a><br>BL解析-Vip视频在线解析<br><a href="https://vip.bljiex.cc/">https://vip.bljiex.cc/</a><br>TVB云播全网VIP视频解析：<br><a href="http://vip.tvyb10.com/">http://vip.tvyb10.com/</a><br>Playm3u8解析-PC和手机全无广告!<br><a href="https://www.playm3u8.cn/jiexi.php?url=">https://www.playm3u8.cn/jiexi.php?url=</a><br>诺讯全网视频在线解析无广告<br><a href="https://www.nxflv.com/?url=">https://www.nxflv.com/?url=</a><br>天翼解析<br><a href="https://jsap.attakids.com/?url=">https://jsap.attakids.com/?url=</a><br>kingtail智能解析<br> <a href="https://jx.kingtail.xyz/?url=">https://jx.kingtail.xyz/?url=</a></p><h4 id="在线动漫网站汇总"><a href="#在线动漫网站汇总" class="headerlink" title="在线动漫网站汇总"></a>在线动漫网站汇总</h4><p>ZzzFun动漫 <a href="http://www.zzzfun.com/">http://www.zzzfun.com/</a><br>樱花动漫  <a href="http://www.yinghuacd.com/">http://www.yinghuacd.com/</a><br>AGE动漫  <a href="https://www.agefans.vip/">https://www.agefans.vip/</a><br>動畫線上看  <a href="https://anime1.me/">https://anime1.me/</a><br>嘀哩嘀哩  <a href="https://www.dilidili55.com/">https://www.dilidili55.com/</a><br>哈哩哈哩  <a href="http://halihali4.com/">http://halihali4.com/</a></p><h2 id="学设计用"><a href="#学设计用" class="headerlink" title="学设计用"></a>学设计用</h2><p>码力全开（产品/设计师/独立开发者的资源库）：<a href="https://www.maliquankai.com/designnav/">https://www.maliquankai.com/designnav/</a></p><p>免费音频素材：<a href="https://icons8.cn/music">https://icons8.cn/music</a></p><p>新CG儿（视频素材模板，无水印+免费下载）：</p><p><a href="https://www.newcger.com/">https://www.newcger.com/</a></p><p>Iconfont（阿里巴巴矢量图标库）：</p><p><a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p><p>小图标下载：<a href="https://www.easyicon.net/">https://www.easyicon.net/</a></p><p>Flight Icon：<a href="https://www.flighticon.co/">https://www.flighticon.co/</a></p><p>第一字体转换器：<a href="http://www.diyiziti.com/">http://www.diyiziti.com/</a></p><p>doyoudosh（平面设计）：</p><p><a href="http://www.doyoudo.com/">www.doyoudo.com</a></p><p>企业宣传视频在线制作：<a href="https://duomu.tv/">https://duomu.tv/</a></p><p>MAKE海报设计官网：<a href="http://maka.im/">http://maka.im/</a></p><p>一键海报神器：</p><p><a href="https://www.logosc.cn/photo/utm_source=hao.logosc.cn&amp;utm_medium=referral">https://www.logosc.cn/photo/utm_source=hao.logosc.cn&amp;utm_medium=referral</a></p><p>字由（字体设计）：</p><p><a href="http://www.hellofont.cn/">http://www.hellofont.cn/</a></p><p>查字体网站：<a href="https://fonts.safe.360.cn/">https://fonts.safe.360.cn/</a></p><p>爱给网（免费素材下载的网站，包括音效、配乐，3D、视频、游戏，平面、教程）：<a href="http://www.aigei.com/">http://www.aigei.com/</a></p><p>在线视频剪辑：</p><p><a href="https://bilibili.clipchamp.com/editor">https://bilibili.clipchamp.com/editor</a></p><h2 id="搞文档用"><a href="#搞文档用" class="headerlink" title="搞文档用"></a>搞文档用</h2><p>即书（在线制作PPT）：</p><p><a href="https://www.keysuper.com/">https://www.keysuper.com/</a></p><p>PDF处理：<a href="https://smallpdf.com/cn">https://smallpdf.com/cn</a></p><p>PDF处理：<a href="https://www.ilovepdf.com/zh-cn">https://www.ilovepdf.com/zh-cn</a></p><p>PDF处理：<a href="https://www.pdfpai.com/">https://www.pdfpai.com/</a></p><p>PDF处理：<a href="https://www.hipdf.cn/">https://www.hipdf.cn/</a></p><p>图片压缩，PDF处理：</p><p><a href="https://docsmall.com/">https://docsmall.com/</a></p><p>腾讯文档（在线协作编辑和管理文档）：</p><p>docs.qq.com</p><p>ProcessOn（在线协作制作结构图）：</p><p><a href="http://www.processon.com/">www.processon.com</a></p><p>iLovePDF（在线转换PDF利器）：</p><p><a href="http://www.ilovepdf.com/">www.ilovepdf.com</a></p><p>PPT在线制作：<a href="https://www.woodo.cn/">https://www.woodo.cn/</a></p><p>PDF24工具（pdf处理工具）：</p><p><a href="https://tools.pdf24.org/en">https://tools.pdf24.org/en</a></p><p>IMGBOT（在线图片处理）：</p><p><a href="http://www.imgbot.ai/">www.imgbot.ai</a></p><p>福昕云编辑（在线编辑PDF）：</p><p>edit.foxitcloud.cn</p><p>TinyPNG（在线压缩图片）：tinypng.com</p><p>UZER.ME（在线使用各种大应用，在线使用CAD，MATLAB，Office三件套</p><pre><code>     ）：uzer.me</code></pre><p>优品PPT（模板下载）：</p><p><a href="http://www.ypppt.com/">http://www.ypppt.com/</a></p><p>第一PPT（模板下载）：</p><p><a href="http://www.1ppt.com/xiazai/">http://www.1ppt.com/xiazai/</a></p><p>三顿PPT导航：sandunppt.com</p><p>Excel函数表：</p><p><a href="https://support.office.com/zh-cn/article/excel-%E5%87%BD%E6%95%B0%EF%BC%88%E6%8C%89%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F%EF%BC%89-b3944572-255d-4efb-bb96-c6d90033e188">https://support.office.com/zh-cn/article/excel-%E5%87%BD%E6%95%B0%EF%BC%88%E6%8C%89%E5%AD%97%E6%AF%8D%E9%A1%BA%E5%BA%8F%EF%BC%89-b3944572-255d-4efb-bb96-c6d90033e188</a></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h4 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h4><p>Magic Eraser，中文名为魔术橡皮擦，是一款免费的 AI 工具，可在几秒钟内删除图像中不需要的东西。你只需要上传图片，标记需要删除的位置，平台将快速智能处理，然后将处理后的图片下载到本地即可，一切都在几秒钟内完成！<br><a href="https://www.magiceraser.io/">https://www.magiceraser.io/</a></p><p>在线图片高清化<br><a href="https://bigjpg.com/">https://bigjpg.com/</a></p><h4 id="壁纸"><a href="#壁纸" class="headerlink" title="壁纸"></a>壁纸</h4><p>wallhaven<br><a href="https://wallhaven.cc/">https://wallhaven.cc/</a></p><p>极简壁纸<br><a href="https://bz.zzzmh.cn/index">https://bz.zzzmh.cn/index</a></p><p>电脑壁纸：<a href="http://lcoc.top/bizhi/">http://lcoc.top/bizhi/</a></p><p><a href="https://unsplash.com/">https://unsplash.com/</a></p><p><a href="https://pixabay.com/">https://pixabay.com/</a></p><p><a href="https://www.pexels.com/">https://www.pexels.com/</a></p><p><a href="https://visualhunt.com/">https://visualhunt.com/</a></p><p><a href="https://www.ssyer.com/">https://www.ssyer.com/</a></p><p>彼岸图网：<a href="http://pic.netbian.com/">http://pic.netbian.com/</a></p><p>极像素（超高清大图）：</p><p><a href="https://www.sigoo.com/">https://www.sigoo.com/</a></p><p>免费版权图片搜索：</p><p><a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></p><h4 id="多功能图片网站："><a href="#多功能图片网站：" class="headerlink" title="多功能图片网站："></a>多功能图片网站：</h4><p><a href="https://www.logosc.cn/so/">https://www.logosc.cn/so/</a></p><p>牛牛TV：<a href="http://www.ziliao6.com/tv/">http://www.ziliao6.com/tv/</a></p><p>VideoFk解析视频：</p><p><a href="http://www.videofk.com/">http://www.videofk.com/</a></p><p>蓝调网站：<a href="http://lcoc.top/vip2.3/">http://lcoc.top/vip2.3/</a></p><p>永久资源采集网：</p><p><a href="http://www.yongjiuzy1.com/">http://www.yongjiuzy1.com/</a></p><h1 id="“-免责声明”"><a href="#“-免责声明”" class="headerlink" title="“&nbsp;免责声明”"></a>“&nbsp;免责声明”</h1><p>大部分资源来源于网络，仅供学习和交流使用，严禁商用，如有侵权，请联系我删除。<br>所有资源都有时效性，如果遇到失效的，请私信我。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-mysql</title>
      <link href="/2022/010151482.html"/>
      <url>/2022/010151482.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="docker下安装-Mysql"><a href="#docker下安装-Mysql" class="headerlink" title="docker下安装 Mysql"></a>docker下安装 Mysql</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建容器并后台启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name         后面是这个镜像的名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 3306:3306   表示在这个容器中使用(第二个)端口映射到本机的端口号(第一个)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d             表示使用守护进程运行，即服务挂在后台</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 表示挂载数据卷，格式是-v localPath:containerPath 本地目录:容器目录</span></span><br><span class="line">docker run -d mysql:latest -p 3306:3310 --name mysqlll -e MYSQL_ROOT_PASSWORD=1234</span><br><span class="line">docker run --name mysqll -p 3306:3310 -e MYSQL_ROOT_PASSWORD=Lzslov123! -d mysql:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker exec -it ID bash</span><br></pre></td></tr></tbody></table></figure><h2 id="window下安装"><a href="#window下安装" class="headerlink" title="window下安装"></a>window下安装</h2><p>下载<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在D:\ruanjian\mysql-8.0.28-winx64</p><h3 id="配置MySQL-的配置文件"><a href="#配置MySQL-的配置文件" class="headerlink" title="配置MySQL 的配置文件"></a>配置MySQL 的配置文件</h3><p>在安装目录下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=C:\\web\\mysql-8.0.11</span><br><span class="line"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class="line"># datadir=C:\\web\\sqldata</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=20</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></tbody></table></figure><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><p>新建系统变量MYSQL_HOME，变量值为你的安装目录D:\ruanjian\mysql-8.0.28-winx64<br>在系统变量里，找到Path变量，点击“编辑”按钮，我们将;%MYSQL_HOME%\bin添加到path变量（一般放在最后面）</p><h3 id="启动MySQL-数据库"><a href="#启动MySQL-数据库" class="headerlink" title="启动MySQL 数据库"></a>启动MySQL 数据库</h3><p>1.初始化数据库：<br><code>mysqld --initialize --console</code></p><p>执行完成后，会输出 root 用户的初始默认密码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: qwsctyr(2+Da</span><br></pre></td></tr></tbody></table></figure><p>qwsctyr(2+Da 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。<br>2.安装<br>mysqld install<br>3.启动<br>net start mysql</p><h2 id="linux下安装"><a href="#linux下安装" class="headerlink" title="linux下安装"></a>linux下安装</h2><p>1.安装mysql命令 ：$ sudo apt-get install -y mysql-server<br>2.查看mysql的版本命令（注意-V是大写，不然会出现如下错误）：$ mysql -V<br>3.启动mysql命令(关闭，重启等只需将start换成stop,restart等即可)：$sudo service mysql start<br>4.登录mysql命令为：$ mysql -u用户名 -p密码<br>5.连接远程数据库：$ mysql -h <host> -P <port> -u<username> -p<password></password></username></port></host></p><h1 id="用户相关操作"><a href="#用户相关操作" class="headerlink" title="用户相关操作"></a>用户相关操作</h1><p>注：以下命令均需先以root身份登录mysql：mysql -uroot -p<br>1.添加新用户<br>（1）创建新用户：&gt; insert into mysql.user(Host,User,Password) values(“localhost”,”user1”,password(“password1”));<br>（2）为用户分配权限：<br>    设置用户可以在本地访问mysql：grant all privileges on <em>.</em> to username@localhost identified by “password” ;<br>    设置用户只能访问指定数据库：grant all privileges on 数据库名.* to username@localhost identified by “password” ;<br>（3）刷新系统权限表：&gt;flush privileges;<br>2.查看MySql当前所有的用户：&gt;SELECT DISTINCT User FROM mysql.user;<br>3.删除用户及其数据字典中包含的数据：&gt;drop user ‘xbb‘@’localhost’;</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>命令行执行sql文件<br><code>source xxx.sql ;</code></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="vscode链接MySQL"><a href="#vscode链接MySQL" class="headerlink" title="vscode链接MySQL"></a>vscode链接MySQL</h2><p>安装插件MySQL ，MySQL syntax<br>配置MySQL插件，点击+号，输入密码即可</p><h2 id="sql语句快速生成器"><a href="#sql语句快速生成器" class="headerlink" title="sql语句快速生成器"></a>sql语句快速生成器</h2><p>utools插件</p><p>可以将excel或word表格中的内容快速生成sql的插入语句或更新语句</p><h1 id="数据库的基础知识及概念"><a href="#数据库的基础知识及概念" class="headerlink" title="数据库的基础知识及概念"></a>数据库的基础知识及概念</h1><p> 数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制，以保证数据库的安全性和完整性。用户通过数据库管理系统访问数据库中的数据。<br>  数据库（DATA BASE）指长期保存在计算机的存储设备上，按照一定规则组织起来，可以被各种用户或应用共享的数据集合。<br>  表中用来存放数据信息，以二维行列存储数据。行（row）在sql中称作一条记录也叫实体，列（column）在sql中称作字段。<br>  SQL：Structure Query Language。（结构化查询语言）</p><p>数据模型的分类：层次模型、网状模型和关系模型</p><h1 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h1><h2 id="关系型数据库："><a href="#关系型数据库：" class="headerlink" title="关系型数据库："></a>关系型数据库：</h2><p> 采用关系模型（二维表）来组织数据结构的数据库</p><p> oracle   DB2    SQLServer    Mysql   SQLite</p><p> 优点：*容易理解，逻辑类似常见的表格</p><pre><code>   *使用方便，都使用sql语句，sql语句非常成熟   *数据一致性高，冗余低，数据完整性好，便于操作   *技术成熟，功能强大，支持很多复杂操作                 </code></pre><p> 缺点：*每次操作都要进行sql语句的解析，消耗较大</p><pre><code>  *不能很好的满足并发需求，特别是海量数据爆发，关系型数据库读写能力会显得不足  *关系型数据库往往每一步都要进行加锁的操作，也造成了数据库的负担  *数据一致性高，有时也会使数据的存储不灵活</code></pre><h2 id="非关系型数据库（NoSql）"><a href="#非关系型数据库（NoSql）" class="headerlink" title="非关系型数据库（NoSql）"></a>非关系型数据库（NoSql）</h2><pre><code>  优点：*高并发，读写能力强        *弱化数据结构一致性，使用更加灵活        *有良好的可扩展性 缺点：*通用性差，没有sql语句那样通用的语句       *操作灵活导致容易出错和混乱       *没有外键关联等复杂的操作</code></pre><p>   Nosql的使用情况：</p><pre><code>   1、对数据存储灵活性要求高，一致性要求低   2、数据处理海量并发，要求瞬间效率速度比较高   3、数据比较容易建立Nosql模型   4、网站灵活时缓冲存储，爬虫应用</code></pre><p> Nosql 的分类：</p><p>1、键值型数据库   Redis</p><p>2、文档型数据库   MongoDB </p><p>3、列存储数据库    HBase</p><p>4、图形数据库</p><p>mysql语句的四大组成成分（DDL、DML、DQL、DCL)  </p><h2 id="SQL语句分类"><a href="#SQL语句分类" class="headerlink" title="SQL语句分类"></a>SQL语句分类</h2><h2 id="DML语言-Data-Manipulation-Language-数据操作语言"><a href="#DML语言-Data-Manipulation-Language-数据操作语言" class="headerlink" title="DML语言(Data Manipulation Language):数据操作语言"></a>DML语言(Data Manipulation Language):数据操作语言</h2><p>用于操作数据库对象中所包含的数据：<br> 关键字有：insert（插入），update（更改），delete（删除）</p><h2 id="DQL（Data-Query-Language）数据查询语言"><a href="#DQL（Data-Query-Language）数据查询语言" class="headerlink" title="DQL（Data Query Language）数据查询语言"></a>DQL（Data Query Language）数据查询语言</h2><p>关键字SELECT语句<br>1.基础查询<br>2.条件查询<br>3模查词(LIKE)<br>4.字段控制查询( DISTINCT)<br>5.排序( DRDER BY)<br>6.分组查词</p><h2 id="DDL-Data-Definition-Language-数据定义语言"><a href="#DDL-Data-Definition-Language-数据定义语言" class="headerlink" title="DDL(Data Definition Language):数据定义语言"></a>DDL(Data Definition Language):数据定义语言</h2><p> 关键字有：create(创建)，drop（删除） ，truncate（删除表结构，再创一张表），alter（修改）</p><p>6.INODB、MYISAM存储引擎的区别（PPT初识MySQL第67页）</p><h1 id="mysql基础"><a href="#mysql基础" class="headerlink" title="mysql基础"></a>mysql基础</h1><p>MySQL命令终止符为分号 ;</p><p>You have an error in your SQL syntax;这种错误是sql写错了，一般在near中所示例的sql语句之前有错误</p><h1 id="库操作"><a href="#库操作" class="headerlink" title="库操作"></a>库操作</h1><p>CREATE DATABASE xxx; – 创建数据库</p><p>SHOW DATABASES; – 查看当前数据库服务器中的所有数据库</p><p>DROP DATABASE xxx; – 删除指定数据库</p><p>USE xxx; – 使用数据库</p><h1 id="表操作"><a href="#表操作" class="headerlink" title="表操作"></a>表操作</h1><p>show tables;  –查看当前库所有表  </p><p>show 表名   –查看表信息  </p><p>desc 表名;  –查看表结构</p><p>DROP TABLE table_name ;  –删除表</p><h2 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h2><p>创建MySQL数据表需要以下信息：</p><p>表名<br>表字段名<br>定义每个表字段</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表名不要用引号括起来</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> 表名(</span><br><span class="line">   `runoob_id` <span class="type">INT</span> UNSIGNED AUTO_INCREMENT,</span><br><span class="line">   `runoob_title` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `runoob_author` <span class="type">VARCHAR</span>(<span class="number">40</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   `submission_date` <span class="type">DATE</span>,</span><br><span class="line">   <span class="keyword">PRIMARY</span> KEY ( `runoob_id` )</span><br><span class="line">)ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>改表记录    UPDATE 表名 SET <code>修改字段</code>=’’ WHERE 条件</p><p>删除数据表    drop table if exists stu,student; </p><p>复制表<br>-修改字段的数据类型  alter table &lt;表名&gt; modify &lt;字段名&gt; &lt;新数据类型&gt;<br>添加字段 alter table &lt;表名&gt; add&lt;字段名&gt; &lt;新数据类型&gt;<br>[约束条件]  [first|after 已存在字段名];<br>删除字段 alter table &lt;表名&gt; drop&lt;字段名&gt;;</p><p>1.基本操作语句：查看数据库列表，查看数据库中的表名</p><p>2.数据类型：字符串类型 char、varchar；一般超过200个汉字：用text；decimal()一般用于价钱、金额，考试会考其两个参数M、D表示什么意思<br>教材27页）</p><p>3.表的创建、查询语句、数据的插入</p><p>4.创建表时涉及到的知识点，如 default 默认值</p><p>5.查询的时候，去掉重复的行：distinct</p><p>6.修改表的结构：alter的用法</p><p>7.where条件语句的用法</p><p>8.in 和 not in的用法</p><p>9.group by 分组语句，having子句的使用</p><p>10.limit 子句</p><p>11.exeits 关键字的用法</p><p>12.模糊查询 ：like (‘%’,’_’)（配合百分号、下划线使用） (课本没有)</p><p>13.between…and…的用法 ：如between 1 and 10 。包含1和10</p><p>14.uoion、 unoin all 的用法</p><p>15.truncate table 删除特点：可以删除表中所有的行（书本P56）</p><p>16.函数:聚合函数（sum()、max()、min()、count()、avg()）（使用原则书本58页）</p><p>17.日期函数：now()获取当前日期和时间 2021-12-16 16：59：30</p><p>18.内连接 外连接 基本语法及含义（书本P88）<br>如返回左表中所有的记录和右表中符合连接条件的记录（左外连接）</p><p>19.条件筛选 where 和having的区别<br>where语句从数据表中选取满足条件的数据行、列<br>having子句选取满足条件的分组</p><p>20.批量子查询ALL、ANY</p><h1 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h1><p>子查询就是嵌套查询，一个select语句中包含另一个完整的select语句。</p><p>1.子查询出现的位置：</p><p>where后，作为条为被查询的一条件的一部分；<br>from后，作表；<br>2.当子查询出现在where后作为条件时，还可以使用如下关键字：</p><p>any<br>all<br>3.子查询结果集的形式：</p><p>单行单列（用于条件）<br>单行多列（用于条件）<br>多行单列（用于条件）<br>多行多列（用于表）</p><p>1.带比较运算符的子查询<br>2.带 EXISTS关键字的子查询<br>3.带ANY关键字的子查询<br>4.带AL关键字的子查询</p><h1 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h1><pre><code>内连接查询    select 表1查询的字段，表2查询的字段 from 表1 inner join 表2 on 两表都有的字段；3外连接查询(只适用于两表)    左（外）连接查询        select 表1查询的字段，表2查询的字段 from 表1 left join 表2 on 条件；        左表的记录将会全部表示出来，而右表只会显示符合搜索条件的记录    右（外）连接查询</code></pre><p>22.SQL语句的执行顺序。（PPT数据查询第79页）</p><h1 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h1><p>基本格式及使用，怎么调用存储过程 (PPT存储过程与事务第17页）<br>定义 ：  存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过第一次编译后调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。<br>存储过程的特点<br>    1、能完成较复杂的判断和运算<br>    2、可编程行强，灵活<br>    3、SQL编程的代码可重复使用<br>    4、执行的速度相对快一些<br>    5、减少网络之间的数据传输，节省开销<br>创建存储过程的简单语法</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 名称()</span><br><span class="line">begin</span><br><span class="line">.........</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>调用存储过程    call 名称();<br>存储函数里的变量</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create procedure test2()</span><br><span class="line">begin</span><br><span class="line">  -- 使用 declare语句声明一个变量</span><br><span class="line">  declare username varchar(32) default '';</span><br><span class="line">  -- 使用set语句给变量赋值</span><br><span class="line">  set username='xiaoxiao';</span><br><span class="line">  -- 将users表中id=1的名称赋值给username</span><br><span class="line">  select name into username from users where id=1;</span><br><span class="line">  -- 返回变量</span><br><span class="line">  select username;</span><br><span class="line">end;</span><br></pre></td></tr></tbody></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>mysql事务处理的四种基本特性（原子性、一致性、隔离性、持久性）（书本P102页）</p><p>4.事务的基本语法，比如开启事务（start transcation、begin) ,提交事务commit，回滚 rollback（书本P103页）</p><p>5.mysql设置了事务的4种隔离级别（读未提交、读提交、可重复读、可串行化）（书本没有）</p><h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><p>视图是由数据库中的一个表或多个表导出的虚拟表，是一种虚拟存在的表，方便用户对数据的操作。<br>创建视图    create view 视图名 as select </p><p>7.数据库的备份与恢复。mysqldump的基本使用格式</p><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><p>索引并非越多越好<br>避免对经常更新的表建立过多的索引<br>数据量小的表最好不要使用索引<br>在不同值少的列上不要建立索引<br>为经常需要排序、分组和联接操作的字段建立索引</p><p>（2）索引的关键字（PPT 索引视图触发器第21页）</p><h1 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h1><p> 触发器与函数、存储过程一样，触发器是一种对象，它能根据对表的操作时间，触发一些动作，这些动作可以是insert,update,delete等修改操作。<br> </p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger tr_users_insert after insert on users</span><br><span class="line">   for each row </span><br><span class="line">   begin </span><br><span class="line">       insert into oplog(userid,username,action,optime)</span><br><span class="line">       values(NEW.id,NEW.name,'insert',now());</span><br><span class="line">   end;</span><br></pre></td></tr></tbody></table></figure><br>，三个激活触发器的操作（插入insert、修改update和删除delete）（书本没有）（PPT 索引视图触发器第43页）<p></p><h1 id="数据库规范化设计"><a href="#数据库规范化设计" class="headerlink" title="数据库规范化设计"></a>数据库规范化设计</h1><p>1.实体之间的映射关系：一对一1:1 、一对多1:n、多对一n:1 、多对多m:n</p><p>2.E-R图的绘制</p><p>3.E-R图转换成关系模型</p><p>4.数据库模型图的概念</p><h1 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h1><p><a href="https://blog.csdn.net/horses/article/details/104849500">https://blog.csdn.net/horses/article/details/104849500</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计网学习</title>
      <link href="/2021/122451189.html"/>
      <url>/2021/122451189.html</url>
      
        <content type="html"><![CDATA[<p>参考计算机网络谢希仁第八版</p><h1 id="第一章-概述"><a href="#第一章-概述" class="headerlink" title="第一章 概述"></a>第一章 概述</h1><p>体系结构<br>OSI的七层协议体系结构<br>物理层，数据链路层，网络层，<br>TCP/IP的四层体系结构<br>链路层（网络接口层），网际层，运输层，应用层<br>    重要内容<br>    计算机网络的一些相关知识<br>    互联网概述<br>    因特网的标准化工作<br>    互联网的组成<br>    计算机网络的类别<br>    计算机网络的性能指标</p><ul><li><p>综合OSI和TCP/IP的优点采用五层协议的体系结构阐述计算机网络的原理</p><h1 id="一-物理层"><a href="#一-物理层" class="headerlink" title="一. 物理层"></a>一. 物理层</h1><p>集线器，中继器</p><h2 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h2><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><p>用在SONET/SDH链路时，采用零比特填充方法来实现透明传输。<br>  通过传输介质发送和接收二进制比特流。</p><h2 id="数据通信的基本知识"><a href="#数据通信的基本知识" class="headerlink" title="数据通信的基本知识"></a>数据通信的基本知识</h2></li><li><p>编码<br>把数据转换成数字信号（01）</p><pre><code>      不归零制，      归零制（正脉冲代表1，负脉冲代表0），      曼彻斯特编码（位周期中心的向上跳变代表0，向下代表1，反之亦可）      差分曼彻斯特编码（每一位的中心处始终有跳变。位开始边界有跳变为0，位开始边界无跳变为1）。</code></pre><ul><li>调制方法<pre><code>  转换为模拟信号  调幅：对基带信号的波幅进行调整，例如将上图的1信号波幅进行改变，在接收方读取时有载波输出为1  调相：对基带信号相位进行调制，例如将0信号的初相位调整为0度，1信号的初相位调整为180度。  调频：对基带信号频率进行调整，例如将0信号调制为频率f1，1信号调制为频率f2。</code></pre></li></ul><p>  2.数据交换方式</p><pre><code>  ①分组交换  ②电路交换</code></pre><p>  信道复用技术</p><pre><code>  ①频分复用FDM  是有N路信号要在一个信道中传送。可以使用调制的方法，把各路信号分别搬迁到适当的频率位置，使彼此不产生干扰。各路信号在同样的时间占用不同的带宽资源。  ②时分复用TDM  是将时间划分为一段段等长的帧，每一路信号在每一个帧中占用固定信号的时隙。  ③波分复用  ④码分复用CDM</code></pre><p>  数字传输系统<br>  宽带接入技术<br>  重要内容<br>  使用点对点信道的数据链路层<br>  封装成帧<br>  透明传输<br>  差错检测</p><p>  字节填充</p><p>  使用广播通信的数据链路层</p></li></ul><h1 id="二-数据链路层"><a href="#二-数据链路层" class="headerlink" title="二. 数据链路层"></a>二. 数据链路层</h1><p>交换机，网桥</p><h2 id="链路层服务"><a href="#链路层服务" class="headerlink" title="链路层服务"></a>链路层服务</h2><pre><code>组帧：封装高层数据报构成数据帧，加首部和尾部 控制字符SOH放在一帧的最前面，表示帧的首部开始  控制字符EOT放在一帧的最后，表示帧的结束流量控制：协调相邻的发送结点，接收差错检测：信号衰减和噪音会引起差错，接收端检测到差错，通知发送端重传或直接丢弃帧差错纠正：接收端直接纠正比特差错全双工和半双工通信控制全双工：同时双向传输。半双工：交替双向传输 数据链路层协议的代表包括：PPP、帧中继等</code></pre><p>适配器的作用<br>CSMA/CD协议<br>使用集线器的星形拓扑结构<br>MAC层的硬件地址<br>MAC帧的格式<br>以太网的扩展</p><h1 id="三-网络层"><a href="#三-网络层" class="headerlink" title="三. 网络层"></a>三. 网络层</h1><p>提供主机间的逻辑通信机制，在邻接节点间进行数据包可靠传输<br>    负责对子网间的数据包进行路由选择，为分组交换网上的不同主机提供通信服务。<br>    网络层协议的代表包括：IP、ICMP、IGMP等。<br>网络层提供的两种服务</p><h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>目前已经不采用分类表示法，所以大家重点关注CIDR表示法（无分类编址）。<br>例  128.14.35.7/20 = 10000000  00001110  0010|0011  00000111</p><p>即前20位是网络前缀，后12位是主机号，那么我们通过令主机号分别为全0和全1就可以得到一个CIDR地址块的最小地址和最大地址，即</p><pre><code>最小地址是：128.14.32.0      = 10000000  00001110  0010|0000  00000000最大地址是：128.14.47.255  = 10000000  00001110  0010|1111 11111111     子网掩码是：255.255.240.0  = 11111111  11111111  1111|0000  00000000</code></pre><p>因此就可以看出来，这个CIDR地址块可以指派(47-32+1)*256=4096个地址，这里没有把全0和全1除外。</p><h2 id="地址解析协议ARP"><a href="#地址解析协议ARP" class="headerlink" title="地址解析协议ARP"></a>地址解析协议ARP</h2><p>IP数据报的格式<br>划分子网<br>构造超网<br>网际控制报文协议ICMP<br>互联网的路由选择协议<br>内部网关协议RIP<br>内部网关协议OSPF<br>外部网关协议BGP</p><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><p>IPv6<br>从IPv4向IP v6的过渡<br>IP多播<br>虚拟专用网VPN<br>网络地址转换NAT</p><h1 id="四-运输层（transport-layer）"><a href="#四-运输层（transport-layer）" class="headerlink" title="四. 运输层（transport layer）"></a>四. 运输层（transport layer）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>提供应用进程间的逻辑通信机制<br>应用进程利用该服务传送应用层报文</p><ul><li>复用功能<br>多个应用层进程可同时使用下面运输层的服务</li><li>分用功能<br>运输层把收到的信息分别交付到上面应用层中的相应进程<h2 id="运输层协议（端到端协议）"><a href="#运输层协议（端到端协议）" class="headerlink" title="运输层协议（端到端协议）"></a>运输层协议（端到端协议）</h2>发送方将应用递交的信息下传给网络层<br>接收方将接收的信息上交给应用层</li></ul><h2 id="1-传输控制协议TCP"><a href="#1-传输控制协议TCP" class="headerlink" title="1.传输控制协议TCP"></a>1.传输控制协议TCP</h2><p>数据传输单位是报文段<br>    提供可靠的，面向连接的运输服务<br>    不提供广播或多播服务3.开销较多<br>    面向字节流，全双工<br>    有流量控制和拥塞控制<br>    TCP可靠传输的实现<br>        三次握手<br>            第一次：主机A向主机B发送一个同步序列号的数据段给主机B，请求建立连接<br>            第二次：主机B收到主机A的请求后，用一个确认应答（ACK）和同步序列（SYN）的数据段响应主机A<br>            第三次:主机A 收到这个数据段后，再发送一个确认应答，确认已收到主机B的数据段，开始传输实际数据<br>    TCP的流量控制<br>    TCP的拥塞控制<br>    TCP的运输连接管理</p><h2 id="2-用户数据报协议UDP"><a href="#2-用户数据报协议UDP" class="headerlink" title="2.用户数据报协议UDP"></a>2.用户数据报协议UDP</h2><p>数据传输单位是用户数据报<br>    1.传输数据前不需要先建立连接<br>    2.收到UDP报后，不需要给出确定<br>    3.不提供可靠交付，但是一种最有效的工作方式 </p><h1 id="五-应用层（application-layer）"><a href="#五-应用层（application-layer）" class="headerlink" title="五.应用层（application layer）"></a>五.应用层（application layer）</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>任务是通过应用进程间的交互来完成特定网络应用<br>进程指的是主机正在运行的程序<br>应用层交互的数据单元称为报文        </p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><p>定义的是应用进程间通信和交互的规则</p><h2 id="域名系统DNS"><a href="#域名系统DNS" class="headerlink" title="域名系统DNS"></a>域名系统DNS</h2><p>将域名转换为Ip地址</p><h2 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h2><h2 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h2><p>HTTP协议的服务端口为80</p><h2 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h2><p>SMP协议的服务端口为25<br>SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于传输系统之间的邮件信息并提供与来信有关的通知。</p><h2 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h2><h2 id="动态主机配置协议"><a href="#动态主机配置协议" class="headerlink" title="动态主机配置协议"></a>动态主机配置协议</h2><p>应用进程跨网络的通信<br>P2P对等方式<br>1.没有固定的服务请求者和服务提供<br>2.对等方相互之间直接通信<br>3.每个对等方既是服务请求者又是服务提供者</p><h1 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h1><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol><li><p>物理层中指明在接口电缆的各条线上出现的电压的范围（  B ）。<br>A. 机械特性                           B. 电气特性<br>C. 功能特性                           D. 过程特性</p></li><li><p>下列属于半双工通信方式的是（  C ）。<br>A. 无线电广播                          B. 有线闭路电视<br>C. 无线对讲机                          D. 手机通话</p></li><li><p>光纤通信使用（  C ）。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</p></li><li><p>典型应用于传输速率1Gbit/s(距离100米)的绞合线类别是（  C ）。<br>A. 3类线                              B. 超5类线<br>C. 6类线                             D. 8类线</p></li><li><p>传输带宽最大的介质是（  C ）。<br>A. 双绞线                             B. 同轴电缆<br>C. 光纤                               D. 微波</p></li><li><p>（  A ）是有N路信号要在一个信道中传送。可以使用调制的方法，把各路信号分别搬迁到适当的频率位置，使彼此不产生干扰。各路信号在同样的时间占用不同的带宽资源。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</p></li><li><p>（ A  ）技术是用数字技术对现有模拟电话的用户线进行改造，使它能承载宽带数字业务。<br>A．ADSL                                 B. 光纤同轴混合网（HFC网）<br>C. 光纤接入                             D. FTTx技术</p></li><li><p>控制字符（ A  ）放在一帧的最前面，表示帧的首部开始。<br>A. SOH                                 B. EOT<br>C. ESC                                 D. MTU</p></li><li><p>局域网通常采用的网络拓扑结构不包括（  D ）。<br>A. 星形网                              B. 环形网<br>C. 总线网                              D. 三角形</p></li><li><p>10GBASE-ER采用的媒体介质是（ B  ）。<br>A. 多模光纤                            B. 单模光纤<br>C. 同轴电缆                            D. 双绞线</p></li><li><p>无分类编址CIDR地址块中网络前缀长度为/18相当于包含（ D  ）个C类网络数。<br>A. 21                                  B. 23<br>C. 80                                  D. 64</p></li><li><p>CIDR地址块206.0.64.0/18的子网掩码采用点分十进制法是记法是（ C  ）。<br>A. 255.255.255.0                     B. 255.255.240.0<br>C. 255.255.192.0                       D. 255.255.254.0</p></li><li><p>以下可分配给主机或者路由器的IP地址是（  C ）。<br>A. 131.107.255.80/28                   B. 231.211.128.0/17<br>C. 126.1.4.255/23                      D. 198.121.204.128/25</p></li><li><p>Internet的前身是美国的（  A ）。<br>A. ARPANET                             B. 信息高速公路<br>C. RFC                                 D. 分组交换网络<br>15．下列不属于ISP的是（  D ）。<br>A. 中国联通                            B. 中国电信<br>C. 德国电信                            D. 优酷<br>16．计算机通信网络的数据传送方式属于（C   ）。<br>A. 电路交换                           B. 报文交换<br>C. 分组交换                           D. 虚电路交换</p></li><li><p>广州工商学院的校园网属于（  C ）。<br>A. 广域网                            B. 城域网<br>C. 局域网                              D. 个域网</p></li><li><p>主机或路由器发送数据帧所需要的时间是（  A ）。<br>A. 发送时延                           B. 传播时延<br>C. 处理时延                            D. 排队时延</p></li><li><p>网络协议三要素中的（ A  ）表示数据与控制信息的结构或格式。<br>A. 语法                                B. 语义<br>C. 同步                                D. 协议</p></li><li><p>以下属于UDP支持的应用程序是（ C  ）。<br>A. 浏览器打开网页                    B. 收发电子邮件<br>C. 网络视频点播                      D. 远程登陆方式连接</p></li><li><p>物理层中指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等是（  A ）。<br>A. 机械特性                           B. 电气特性<br>C. 功能特性                           D. 过程特性</p></li><li><p>下列属于全双工通信方式的是（  D ）。<br>A. 无线电广播                          B. 有线闭路电视<br>C. 无线对讲机                          D. 手机通话</p></li><li><p>3G移动通信技术使用（  D ）。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</p></li><li><p>通常双绞线的最大传输距离是（  D ）。<br>A. 10米                               B. 18米<br>C. 50米                              D. 100米</p></li><li><p>早期有线电视网使用的介质主要是（  B ）。<br>A. 双绞线                             B. 同轴电缆<br>C. 光纤                               D. 微波</p></li><li><p>（  B ）是将时间划分为一段段等长的帧，每一路信号在每一个帧中占用固定信号的时隙。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</p></li><li><p>（ B  ）是目前覆盖面很广的有线电视网的基础上开发的一种居民宽带接入网，除可传达电视节目外，还能提供电话、数据和其他宽带交互型业务。<br>A．ADSL                                 B. 光纤同轴混合网（HFC网）<br>C. 光纤接入                             D. FTTx技术</p></li><li><p>控制字符（  B ）放在一帧的最后，表示帧的结束。<br>A. SOH                                 B. EOT<br>C. ESC                                 D. MTU</p></li><li><p>总线型以太网通常采用（ A  ）访问控制协议。<br>A. CSMA/CD                             B.CSMA/CA<br>C. 频分复用                            D.时分复用</p></li><li><p>（  B ）的光源要使用昂贵的半导体激光器，而不能使用较便宜的发光二极管。<br>A. 多模光纤                            B. 单模光纤<br>C. 同轴电缆                            D. 双绞线</p></li><li><p>无分类编址CIDR地址块中网络前缀长度为/16相当于包含（ A  ）个B类网络数。<br>A. 1                                   B. 2<br>C. 64                                  D. 256</p></li><li><p>CIDR地址块206.0.64.0/17的子网掩码采用点分十进制法是记法是（ B  ）。<br>A. 255.255.0.0                      B. 255.255.128.0<br>C. 255.255.192.0                       D. 255.255.254.0</p><h2 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h2><p>（√）1.*一般的适配器都包括了数据链路层和物理层这两层的功能。<br>（√）2.封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。<br>（√）3.所有的PPP帧的长度都是整数字节。<br>（√）4.PPP协议用在SONET/SDH链路时，采用零比特填充方法来实现透明传输。<br>（√）5.最初的以太网是将许多计算机都连接到一根总线上，也称为共享以太网。<br>（√）1.*一般的适配器都包括了数据链路层和物理层这两层的功能。<br>（√ ）2.封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。<br>（√）3.所有的 PPP 帧的长度都是整数字节。<br>（√）4.PPP 协议用在 SONET/SDH 链路时，采用零比特填充方法来实现透明传输。<br>（√）5.最初的以太网是将许多计算机都连接到一根总线上，也称为共享以太网。<br>（×）6.以太网使用面向连接的工作方式。<br>（√）7.*以太网发送的数据都使用曼彻斯特编码，其特点是可以实现时钟自同步。<br>（√）8.以太网的站点在发送帧时，如果经过2τ后还没有检测到冲突，则本次发送不会再出现冲突了。<br>（  √ ）9.速率达到或超过 100 Mb/s 的以太网称为高速以太网。<br>（  √ ）10.100BASE-T 以太网工作在全双工方式时，不使用CSMA/CD协议<br>( √ )11. CSMA/CD协议采用半双工通信。<br>( × )6. 集线器工作于数据链路层。   //工作于物理层<br>(√  )7. 以太网交换机是一种即插即用设备，其内部的地址表是通过自学习算法自动逐渐建立起来的。</p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>1．OSI/RM的七层协议分别是物理层、数据链路层、____网络层__、运输层、会话层、表示层、应用层。<br>2．双绞线分为无屏蔽双绞线（UTP）和____屏蔽双绞线(STP)__。<br>3．为了解决透明传输问题，在发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个_____转义字符“ESC”_____。</p></li><li><p>____物理地址_____是使用数据链路层的地址，而IP地址是网络层和以上各层使用的地址，是一种逻辑地址。</p></li><li><p>在IP层下面每一种数据链路层协议都规定了一个数据帧中的数据字段的最大长度，这称为___最大传送单元MTU ______。</p></li><li><p>HTTPS应用程序采用熟知的端口号____TCP_____。</p></li><li><p>万维网使用____超文本标记语言HTML ________来显示各种万维网页面。<br>11．TCP/IP的四层协议包括链路层、网际层IP、运输层、____应用层______。<br>12．数字信号可以通过_____调制器_____转化为模拟信号。<br>13．在带宽W（Hz）的低通信道中，若不考虑噪声影响，则码元传输的最高速率是2W（码元/秒）。传输速率超过此上限，就会出现严重的码间串扰的问题，使接收端对码元的识别称为不可能，这就是著名的____奈氏准则___。</p></li><li><p>___香农公式_____表明信道的带宽或信道中的信噪比越大，信息的极限传输速率就越高。</p></li><li><p>___封装成帧____就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧。</p></li><li><p>计算机与外界局域网的连接是通过___网络适配器完成的_________。</p></li><li><p>网络层提供的服务分为虚电路和____数据报______。</p></li><li><p>C类地址可容纳的主机数是____254________。</p></li><li><p>HTTP应用程序采用熟知的端口号______TCP______。</p></li><li><p>FTP的中文翻译是___文件传输协议_________。</p></li><li><p>__生存时间或者TTL ___占8位，表明数据报在网络中的寿命。</p></li><li><p>内部网关协议IGP使用最多的是RIP和_____最短路径优先或者OSPF _______。</p></li><li><p>外部网关协议EGP使用最多的是_____ BGP的版本4或者BGP-4__。</p></li><li><p>1．数字信号可以通过___抽样，量化，编码____转化为模拟信号。</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>1．什么是DNS？什么是DHCP服务器？<br>答：域名系统DNS是互联网使用的命名系统，用来便于人们使用的机器名字转换为IP地址。<br>动态主机配置协议DHCP提供了一种机制，称为即插即用连网。这种机制允许一台计算机自动加入新的网络和获取IP地址而不用手工参与。</p></li><li><p>什么是虚拟专用网络VPN？（P186）什么是网络地址转换NAT？(P188)<br>答：虚拟专用网络VPN是指这种网络是为本机构的主机用于机构内部的通信，而不是用于和网络外非本机构的主机通信。如果专用网不同网点之间的通信必须经过公用的互联网，但又有保密的要求，那么多有通过互联网传送的数据都必须加密。<br>网络地址转换NAT是指在专用网连接到互联网的路由器上安装NAT软件。装有NAT软件的路由器叫作NAT路由器，它至少一个有效的外部全球IP地址。这样，所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址，才能和互联网连接。</p></li></ol><p>1.三报文握手建立TCP连接过程   P247<br>第一次握手:客户端将报文标志位SYN置为1,产生一个序号值seq=x,将该数据包发送给服务器端后客户端进入SYN_SENT状态<br>第二次握手：服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，ack=x+1，随机产生一个序号值seq=y，并将该数据包发送给客户端以确认连接请求，服务器端进入SYN_RCVD状态。<br>第三次握手：客户端收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=y+1，并将该数据包发送给服务器端，服务器端检查ack是否为y+1，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入ESTABLISHED状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了</p><p>2.TCP和UDP的主要区别<br>TCP提供面向连接、按序可靠的字节流服务（面向字节流）、有流量控制和拥塞控制。<br>UDP提供无连接、不可靠的数据报服务（面向报文）。<br>3.什么是VPN   P186<br>4.什么叫网络地址转换为NAT    P188</p><p>5.什么是DNS       P261<br>将域名转换为IP地址</p><p>6.什么是DHCP      P304<br>动态 主机 配置 协议<br>不需要手动的去配置ip地址以及其他的网络参数</p><p>7.什么是超文本传输协议HTTP<br>答：超文本传输协议HTTP是面向事务的应用层协议，它是万维网上能够可靠的交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。协议HTTP不仅传送完成超文本跳转所必需的信息，而且也传送任何可从互联网上得到的信息，如文本、超文本、声音和图像等。</p><p>8.顶级域名分为哪几类  p263<br>（1）国家顶级域名（2）通用顶级域名（3）基础结构域名<br>9.域名服务器有哪几类   P265<br>（1）根域名服务器<br>（2）顶级域名服务器<br>（3）权限域名服务器<br>（4）本地域名服务器</p><p>10.什么是超文本标记语言HTML P283<br>超文本标记语言HTML是一种制作万维网页面的标准语言，它消除了不同计算机之间信息交流的障碍<br>11.什么是远程终端协议TELNET   P271<br>用户通过TCP登陆远地主机，远程操控远地主机，又称终端仿真协议<br>12.什么是万维网www   P272<br>万维网是大规模的，联机式的信息储藏所，简称web<br>13什么是统一资源定位符URL   P274<br>从互联网上获取资源位置和访问这些资源的方法<br>6.什么叫做公用网和专用网？<br>公用网：公用网用来提供服务。Client通过此网络与服务器通信。<br>专用网：是某个部门为本单位的特殊工作的需要而建立的网络.这种网络不向本单位以外的人提供服务.例如,军队,铁路,电力等系统均有本系统的专用网。<br>7.时延是由那几部分组成的？发送时延与传输时延的有什么区别？P22</p><p>8.IGP和EGP这两类协议的主要区别是什么?<br>　　答：内部网关协议IGP，是在一个自治系统内部使用的路由选择协议，而这与在互联网中的其他自治系统选用什么路由选择协议无关。外部网关协议EGP，是在不同的自治系统边界传递路由信息的协议，不关心自治系统内部使用何种协议。<br>1、什么叫做“三网融合”？<br>“三网融合”又叫“三网合一”，意指电信网络、有线电视网络和计算机网络的相互渗透、互相兼容、并逐步整合成为全世界统一的信息通信网络，其中互联网是其核心部分。<br>2、什么叫做客户-服务器方式(C/S方式)？<br>客户（Client）和服务器（Server）都是指通信种所涉及的两个应用进程。客户-服务器方式所描述的是进程之间服务和被服务的关系。<br>3、 什么叫做P2P方式？<br>是指两台主机在通信时并不区分哪一个是服务请求方哪一个是服务提供方。只要两台主机都运行了对等连接软件（P2P软件），它们就可以进行平等的、对等连接通信。这时，双方都可以下载对方已经存储在硬盘中的共享文档。因此这种的方式称为P2P方式。<br>4、什么叫做电路交换？<br>是指在同一电信网用户群中任意两个或多个用户终端之间建立电路暂时连接的交换方式。暂时连接独占一条通信路径并保持到连接释放为止<br>例如，用固定电话拨打电话的数据传送方式属于（电路交换）。<br>5、什么叫做报文交换？<br>报文交换不要求在两个通信节点之间建立专用通路。节点把要发送的信息组织成一个数据包一报文，该报文中含有目标节点的地址，完整的报文在网络中一站一站地向前传送。每一个节点接收整个报文，检查目标节点地址，然后根据网络中的交通情况在适当的时候转发到下一个节点。经过多次的存储一转发，最后到达目标，因而这样的网络叫存储一转发网络。<br>6、什么叫分组交换？<br>分组交换也称为包交换，它将用户通信的数据划分成多个更小的等长数据段，在每个数据段的前面加上必要的控制信息作为数据段的首部，每个带有首部的数据段就构成了一个分组。首部指明了该分组发送的地址，当交换机收到分组之后，将根据首部中的地址信息将分组转发到目的地，这个过程就是分组交换。<br>7、什么虚电路交换？<br>所谓交换虚电路(SVC)就是两个数据终端要通信时先用呼叫程序建立电路（即虚电路），然后发送数据，通信结束后用拆线程序拆除虚电路。<br>通过蓝牙无线技术连接起来的网络属于（   ）。<br>8、什么叫做广域网？<br>广域网(Wide Area Network ,简称WAN)是一种跨地区的数据通讯网络,通常包含一个国家或地区。广域网通常由两个或多个局域网组成。<br>9、什么叫做城域网？<br>城域网(Metropolitan Area Network)是在一个城市范围内所建立的计算机通信网，简称MAN。属宽带局域网。<br>10、什么叫做局域网？<br>局域网的覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。<br>11、什么叫做个域网？<br>个人域网（PAN），是指能在便携式消费电器与通信设备之间进行短距离通信的网络，其覆盖范围一般在10米半径以内。</p><h2 id="作图：-P45"><a href="#作图：-P45" class="headerlink" title="作图：   P45"></a>作图：   P45</h2><p>1、能根据比特流画出曼彻斯特编码、差分曼彻斯特编码、归零制和不归零制编码的图。<br>2、能根据基带信号画出最基本调制方法中的调幅和调频图。<br>调幅：对基带信号的波幅进行调整，例如将上图的1信号波幅进行改变，在接收方读取时有载波输出为1.<br>调频：对基带信号频率进行调整，例如将0信号调制为频率f1，1信号调制为频率f2。<br>调相：对基带信号相位进行调制，例如将0信号的初相位调整为0度，1信号的初相位调整为180度。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>CIDR地址快的使用（即路由聚合方法），如课本129页的图4-13。</p><ol><li>有如下的5个/24地址块，试进行最大可能的聚合。</li><li>156.152.0/24</li><li>156.153.0/24</li><li>156.154.0/24</li><li>156.155.0/24</li><li>156.156.0/24<br>解：这几块地址前面两个字节一样，只需比较第三个字节：</li><li>156.152.0/24 第三个字节 1001 1000</li><li>156.153.0/24第三个字节 1001 1001</li><li>156.154.0/24第三个字节 1001 1010</li><li>156.155.0/24第三个字节 1001 1011</li><li>156.156.0/24第三个字节 1001 1100<br>那么这五个地址块的共同前缀有21位：212.156. 1001 1<br>最大可能聚合地址块是：212.156.1001 1000.00000000/21=212.156.152.0/21</li></ol><p>2、 某单位分配到一个地址块136.23.12.32 /27。现在需要进一步划分为4 个一样大的子网。试问：<br>（1）每个子网的网络前缀有多长？<br>（2）每一个子网中有多少个地址？<br>（3）每一个子网的地址块是什么？<br>（4）每一个子网可分配给主机使用的最小地址和最大地址是什么？<br>答：<br>将136.23.12.32 /27转换为二进制：10001000 00010111 00001100 00100000/27<br>（1）根据题意，建立4个子网，要借2位为子网号，22=4，所以网络前缀为27+2=29位，剩下32-29=3位作主机位。 所以每个子网前缀有29位。<br>   （2）每个子网的地址中有3位留给主机用，因此共有23=8个地址。<br>   （3）（4）四 个子网的地址块以及每个子网分配给主机的最小地址和最大地址是：<br>第一个地址块136.23.12.32 /29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00100 000/29<br>最小地址：136.23.12.33（00100 001）<br>最大地址: 136.23.12.38（00100 110）<br>第二个地址块136.23.12.40/29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00101 000/29<br>最小地址：136.23.12.41（00101 001）<br>最大地址：136.23.12.46（00101 110）<br>第三个地址块136.23.12.48 /29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00110 000/29<br>最小地址：136.23.12.49（00110 001）<br>最大地址：136.23.12.54（00110 110）<br>第四个地址块：136.23.12.56/29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00111 000/29<br>最小地址：136.23.12.57（00111 001）<br>最大地址：136.23.12.62（00111 110）</p><p>3、 某单位分配到地址块136.230/16。该单位有2000 台机器，平均分布在 8个不同的地点。试给每一个地点分配一个地址块，并计算出每个地址块中IP地址的最小值和最大值（说明：必须有完整的解题步骤，否则不得分。）<br>答：2000/8=250，每个点平均250台电脑。如选255.255.255.0为掩码，每个子网有28-2=254&gt;250，共有子网数=28-2=254&gt;8，能满足实际需求。<br>每个地点的网络前缀和主机IP地址的最小值和最大值为：<br>地点    子网号      子网络地址             主机的最小值和值<br>1      00000001     136.230.1.0/24  :  136.230.1.1–136.230.1.254<br>2      00000002     136.230.2.0/24  :  136.230.2.1–136.230.2.254<br>3      00000003     136.230.3.0/24  :  136.230.3.1–136.230.3.254<br>………………………………..<br>7      00000007     136.230.7.0/24  :  136.230.7.1–136.230.7.254<br>8      00000001     136.230.8.0/24  :  136.230.8.1–136.230.8.254</p><p>4、某组织分配到一个地址块，其中第一个地址是14.24.74.0/24。这个组织需要划分为11个子网。具体要求是：具有64个地址的子网两个；具有32个地址的子网两个；具有16个地址的子网三个；具有4个地址的子网四个（这里的地址包括网络地址和广播地址）。试设计这些子网。分配结束后还剩下多少地址？<br>（说明：必须有完整的解题步骤，否则不得分。）<br>解答：<br>将14.24.74.0/24转换为二进制：00001110 00011000 01001010 00000000/24</p><ol><li>具有64个地址的子网2个：<br>根据要求可知，要借2位为子网号，因为每个子网为64个地址，所以主机号最少要保留6位才能满足每个子网64个地址，主机号共有8位，剩下8-2=6位可借给网络号。<br>00001110 00011000 01001010 00 000000  转为十进制：14.24.74.0/26<br>00001110 00011000 01001010 01 000000  转为十进制：14.24.74.64/26<br>2）具有32个地址的子网2个<br>因为每个子网为32个地址，所以主机号最少要保留5位才能满足每个子网32个地址，主机号共有8位，剩下8-5=3位可借给网络号。<br>00001110 00011000 01001010 100 00000  转为十进制：14.24.74.128/27<br>00001110 00011000 01001010 101 00000  转为十进制：14.24.74.160/27<br>3）具有16个地址的子网3个<br>因为每个子网为16个地址，所以主机号最少要保留4位才能满足每个子网16个地址，主机号共有8位，剩下8-4=4位可借给网络号。<br>00001110 00011000 01001010 1100 0000  转为十进制：14.24.74.192/28<br>00001110 00011000 01001010 1101 0000  转为十进制：14.24.74.208/28<br>00001110 00011000 01001010 1110 0000  转为十进制：14.24.74.224/28<br>4）具有4个地址的子网4个<br>因为每个子网为4个地址，所以主机号最少要保留2位才能满足每个子网4个地址，主机号共有8位，剩下8-2=6位可借给网络号。<br>00001110 00011000 01001010 111100 00  转为十进制：14.24.74.240/30<br>00001110 00011000 01001010 111101 00  转为十进制：14.24.74.244/30<br>00001110 00011000 01001010 111110 00  转为十进制：14.24.74.248/30<br>00001110 00011000 01001010 111111 00  转为十进制：14.24.74.252/30<br>全部256个地址已经分配完毕，没有剩下的地址。</li></ol><h1 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h1><p>实现网络通信的基础是网络通信协议，所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接、怎样互相识别等，</p><p>网络协议的三要素是：语法、语义和时序。</p><p>构成我们今天使用的Internet的基础的是TCP/IP协议族，所谓协议族就是一系列的协议及其构成的通信模型，我们通常也把这套东西称为TCP/IP模型。<br>与国际标准化组织发布的OSI/RM这个七层模型不同，TCP/IP是一个四层模型，也就是说，该模型将我们使用的网络从逻辑上分解为四个层次，自底向上依次是：网络接口层、网络层、传输层和应用层，</p><p><strong>IP</strong>通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。<br>接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。<br>当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个<a href="https://zh.wikipedia.org/zh-hans/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网（LAN）</a>中的内部IP地址，通过<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换（NAT）服务</a>我们也可以实现对网络的访问。计算机网络上有大量的被我们称为“<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送到目的地通路，这项功能就是所谓的路由。</p><p><strong>TCP</strong>全称传输控制协议，它是基于IP提供的寻址和路由服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情：</p><ol><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）。</li><li>流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）。</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ol><h2 id="网络应用模式"><a href="#网络应用模式" class="headerlink" title="网络应用模式"></a>网络应用模式</h2><ol><li>C/S模式和B/S模式。这里的C指的是Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；而B指的是Browser（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。关于二者的比较和讨论在网络上有一大堆的文章，在此我们就不再浪费笔墨了。</li><li>去中心化的网络应用模式。不管是B/S还是C/S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。</li></ol><h1 id="基于传输层协议的套接字编程"><a href="#基于传输层协议的套接字编程" class="headerlink" title="基于传输层协议的套接字编程"></a>基于传输层协议的套接字编程</h1><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h2 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h2><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>下面的代码实现了一个提供时间日期的服务器。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    <span class="comment"># family=AF_INET - IPv4地址</span></span><br><span class="line">    <span class="comment"># family=AF_INET6 - IPv6地址</span></span><br><span class="line">    <span class="comment"># type=SOCK_STREAM - TCP套接字</span></span><br><span class="line">    <span class="comment"># type=SOCK_DGRAM - UDP套接字</span></span><br><span class="line">    <span class="comment"># type=SOCK_RAW - 原始套接字</span></span><br><span class="line">    server = socket(family=AF_INET, <span class="built_in">type</span>=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(端口用于区分不同的服务)</span></span><br><span class="line">    <span class="comment"># 同一时间在同一个端口上只能绑定一个服务否则报错</span></span><br><span class="line">    server.bind((<span class="string">'192.168.1.2'</span>, <span class="number">6789</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    <span class="comment"># 参数512可以理解为连接队列的大小</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 4.通过循环接收客户端的连接并作出相应的处理(提供服务)</span></span><br><span class="line">        <span class="comment"># accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行</span></span><br><span class="line">        <span class="comment"># accept方法返回一个元组其中的第一个元素是客户端对象</span></span><br><span class="line">        <span class="comment"># 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)</span></span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line">        <span class="comment"># 5.发送数据</span></span><br><span class="line">        client.send(<span class="built_in">str</span>(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="comment"># 6.断开连接</span></span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行服务器程序后我们可以通过Windows系统的telnet来访问该服务器，结果如下图所示。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.1.2 6789</span><br></pre></td></tr></tbody></table></figure><p><img src="./res/telnet.png"></p><p>当然我们也可以通过Python的程序来实现TCP客户端的功能，相较于实现服务器程序，实现客户端程序就简单多了，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 1.创建套接字对象默认使用IPv4和TCP协议</span></span><br><span class="line">    client = socket()</span><br><span class="line">    <span class="comment"># 2.连接到服务器(需要指定IP地址和端口)</span></span><br><span class="line">    client.connect((<span class="string">'192.168.1.2'</span>, <span class="number">6789</span>))</span><br><span class="line">    <span class="comment"># 3.从服务器接收数据</span></span><br><span class="line">    <span class="built_in">print</span>(client.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，上面的服务器并没有使用多线程或者异步I/O的处理方式，这也就意味着当服务器与一个客户端处于通信状态时，其他的客户端只能排队等待。很显然，这样的服务器并不能满足我们的需求，我们需要的服务器是能够同时接纳和处理多个用户请求的。下面我们来设计一个使用多线程技术处理多个用户请求的服务器，该服务器会向连接到服务器的客户端发送一张图片。</p><p>服务器端代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自定义线程类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileTransferHandler</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cclient</span>):</span></span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">            self.cclient = cclient</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">            my_dict = {}</span><br><span class="line">            my_dict[<span class="string">'filename'</span>] = <span class="string">'guido.jpg'</span></span><br><span class="line">            <span class="comment"># JSON是纯文本不能携带二进制数据</span></span><br><span class="line">            <span class="comment"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class="line">            my_dict[<span class="string">'filedata'</span>] = data</span><br><span class="line">            <span class="comment"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class="line">            json_str = dumps(my_dict)</span><br><span class="line">            <span class="comment"># 发送JSON字符串</span></span><br><span class="line">            self.cclient.send(json_str.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.cclient.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    server = socket()</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class="line">    server.bind((<span class="string">'192.168.1.2'</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'guido.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将二进制数据处理成base64再解码成字符串</span></span><br><span class="line">        data = b64encode(f.read()).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="comment"># 启动一个线程来处理客户端的请求</span></span><br><span class="line">        FileTransferHandler(client).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>客户端代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    client = socket()</span><br><span class="line">    client.connect((<span class="string">'192.168.1.2'</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 定义一个保存二进制数据的对象</span></span><br><span class="line">    in_data = <span class="built_in">bytes</span>()</span><br><span class="line">    <span class="comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        <span class="comment"># 将收到的数据拼接起来</span></span><br><span class="line">        in_data += data</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class="line">    <span class="comment"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class="line">    my_dict = loads(in_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    filename = my_dict[<span class="string">'filename'</span>]</span><br><span class="line">    filedata = my_dict[<span class="string">'filedata'</span>].encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/Hao/'</span> + filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将base64格式的数据解码成二进制数据并写入文件</span></span><br><span class="line">        f.write(b64decode(filedata))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'图片已保存.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在这个案例中，我们使用了JSON作为数据传输的格式（通过JSON格式对传输的数据进行了序列化和反序列化的操作），但是JSON并不能携带二进制数据，因此对图片的二进制数据进行了Base64编码的处理。Base64是一种用64个字符表示所有二进制数据的编码方式，通过将二进制数据每6位一组的方式重新组织，刚好可以使用0~9的数字、大小写字母以及“+”和“/”总共64个字符表示从<code>000000</code>到<code>111111</code>的64种状态。<a href="https://zh.wikipedia.org/wiki/Base64">维基百科</a>上有关于Base64编码的详细讲解，不熟悉Base64的读者可以自行阅读。</p><blockquote><p><strong>说明：</strong> 上面的代码主要为了讲解网络编程的相关内容因此并没有对异常状况进行处理，请读者自行添加异常处理代码来增强程序的健壮性。</p></blockquote><h2 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h2><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。在Python中也可以使用UDP套接字来创建网络应用，对此我们不进行赘述，有兴趣的读者可以自行研究。</p><h1 id="网络应用开发"><a href="#网络应用开发" class="headerlink" title="网络应用开发"></a>网络应用开发</h1><h1 id="发送电子邮件"><a href="#发送电子邮件" class="headerlink" title="发送电子邮件"></a>发送电子邮件</h1><p>在即时通信软件如此发达的今天，电子邮件仍然是互联网上使用最为广泛的应用之一，公司向应聘者发出录用通知、网站向用户发送一个激活账号的链接、银行向客户推广它们的理财产品等几乎都是通过电子邮件来完成的，而这些任务应该都是由程序自动完成的。</p><p>就像我们可以用HTTP（超文本传输协议）来访问一个网站一样，发送邮件要使用SMTP（简单邮件传输协议），SMTP也是一个建立在TCP（传输控制协议）提供的可靠数据传输服务的基础上的应用级协议，它规定了邮件的发送者如何跟发送邮件的服务器进行通信的细节，而Python中的smtplib模块将这些操作简化成了几个简单的函数。</p><p>下面的代码演示了如何在Python发送邮件。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 请自行修改下面的邮件发送者和接收者</span></span><br><span class="line">    sender = <span class="string">'abcdefg@126.com'</span></span><br><span class="line">    receivers = [<span class="string">'uvwxyz@qq.com'</span>, <span class="string">'uvwxyz@126.com'</span>]</span><br><span class="line">    message = MIMEText(<span class="string">'用Python发送邮件的示例代码.'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'From'</span>] = Header(<span class="string">'王大锤'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'To'</span>] = Header(<span class="string">'骆昊'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(<span class="string">'示例代码实验邮件'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    smtper = SMTP(<span class="string">'smtp.126.com'</span>)</span><br><span class="line">    <span class="comment"># 请自行修改下面的登录口令</span></span><br><span class="line">    smtper.login(sender, <span class="string">'secretpass'</span>)</span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'邮件发送完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>如果要发送带有附件的邮件，那么可以按照下面的方式进行操作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个带附件的邮件消息对象</span></span><br><span class="line">    message = MIMEMultipart()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建文本内容</span></span><br><span class="line">    text_content = MIMEText(<span class="string">'附件中有本月数据请查收'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(<span class="string">'本月数据'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 将文本内容添加到邮件消息对象中</span></span><br><span class="line">    message.attach(text_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/Hao/Desktop/hello.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        txt = MIMEText(f.read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        txt[<span class="string">'Content-Type'</span>] = <span class="string">'text/plain'</span></span><br><span class="line">        txt[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=hello.txt'</span></span><br><span class="line">        message.attach(txt)</span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/Hao/Desktop/汇总数据.xlsx'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        xls = MIMEText(f.read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        xls[<span class="string">'Content-Type'</span>] = <span class="string">'application/vnd.ms-excel'</span></span><br><span class="line">        xls[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=month-data.xlsx'</span></span><br><span class="line">        message.attach(xls)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtper = SMTP(<span class="string">'smtp.126.com'</span>)</span><br><span class="line">    <span class="comment"># 开启安全连接</span></span><br><span class="line">    <span class="comment"># smtper.starttls()</span></span><br><span class="line">    sender = <span class="string">'abcdefg@126.com'</span></span><br><span class="line">    receivers = [<span class="string">'uvwxyz@qq.com'</span>]</span><br><span class="line">    <span class="comment"># 登录到SMTP服务器</span></span><br><span class="line">    <span class="comment"># 请注意此处不是使用密码而是邮件客户端授权码进行登录</span></span><br><span class="line">    <span class="comment"># 对此有疑问的读者可以联系自己使用的邮件服务器客服</span></span><br><span class="line">    smtper.login(sender, <span class="string">'secretpass'</span>)</span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="comment"># 与邮件服务器断开连接</span></span><br><span class="line">    smtper.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'发送完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h1 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h1><p>发送短信也是项目中常见的功能，网站的注册码、验证码、营销信息基本上都是通过短信来发送给用户的。在下面的代码中我们使用了<a href="http://www.ihuyi.com/">互亿无线</a>短信平台（该平台为注册用户提供了50条免费短信以及常用开发语言发送短信的demo，可以登录该网站并在用户自服务页面中对短信进行配置）提供的API接口实现了发送短信的服务，当然国内的短信平台很多，读者可以根据自己的需要进行选择（通常会考虑费用预算、短信达到率、使用的难易程度等指标），如果需要在商业项目中使用短信服务建议购买短信平台提供的套餐服务。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    host  = <span class="string">"106.ihuyi.com"</span></span><br><span class="line">    sms_send_uri = <span class="string">"/webservice/sms.php?method=Submit"</span></span><br><span class="line">    <span class="comment"># 下面的参数需要填入自己注册的账号和对应的密码</span></span><br><span class="line">    params = urllib.parse.urlencode({<span class="string">'account'</span>: <span class="string">'你自己的账号'</span>, <span class="string">'password'</span> : <span class="string">'你自己的密码'</span>, <span class="string">'content'</span>: <span class="string">'您的验证码是：147258。请不要把验证码泄露给其他人。'</span>, <span class="string">'mobile'</span>: <span class="string">'接收者的手机号'</span>, <span class="string">'format'</span>:<span class="string">'json'</span> })</span><br><span class="line">    <span class="built_in">print</span>(params)</span><br><span class="line">    headers = {<span class="string">'Content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>, <span class="string">'Accept'</span>: <span class="string">'text/plain'</span>}</span><br><span class="line">    conn = http.client.HTTPConnection(host, port=<span class="number">80</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    conn.request(<span class="string">'POST'</span>, sms_send_uri, params, headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    response_str = response.read()</span><br><span class="line">    jsonstr = response_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="built_in">print</span>(json.loads(jsonstr))</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h1 id="URL-组成部分详解"><a href="#URL-组成部分详解" class="headerlink" title="URL 组成部分详解"></a>URL 组成部分详解</h1><p>URL 是 Uniform Resource Locator 的简写，中文名叫统一资源定位符，用于表示服务端的各种资源</p><p>先来看一个我们经常见到的 URL 形式：<br><code>http://www.imooc.com/wiki/html5</code><br>上面这个 URL 由以下几部分组成<br><code>scheme://host:port/path?key=value</code><br>scheme：代表的是访问的协议，一般为 http 或者 https。例如，<a href="https://www.baidu.com/">https://www.baidu.com</a> 的协议是 https；</p><p>host：主机名、域名，例如，<a href="https://www.baidu.com/">https://www.baidu.com</a> 的 host 为 <a href="http://www.baidu.com;/">www.baidu.com；</a></p><p>port：端口号，http 协议默认使用 80 端口，https 协议默认使用 443 端口。通常情况下，使用默认值，不需要显式的写明端口号，例如，<a href="https://www.baidu.com/">https://www.baidu.com</a> 的端口是 443。某些情况下，可以显式的写明端口号，例如，<a href="http://localhost:5000/">http://localhost:5000</a> 的端口号是 5000；</p><p>path：页面路径，例如：<a href="http://www.imooc.com/wiki/html5">http://www.imooc.com/wiki/html5</a> 的 path 是 wiki/html5；</p><p>key=value：查询字符串，例如：<a href="https://www.baidu.com/s?wd=python%EF%BC%8C%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%98%AF">https://www.baidu.com/s?wd=python，查询字符串是</a> wd=python，查询字符串包括两部分：参数名和参数值，这个例子中，参数名是 wd，参数值是 python。</p><h1 id="基于HTTP协议的网络资源访问"><a href="#基于HTTP协议的网络资源访问" class="headerlink" title="基于HTTP协议的网络资源访问"></a>基于HTTP协议的网络资源访问</h1><p>HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称，<br>通过HTTP或者HTTPS（超文本传输安全协议）请求的资源由URI（统一资源标识符）来标识。<br>通过HTTP我们可以获取网络上的（基于字符的）资源，<br>开发中经常会用到的网络API（有的地方也称之为网络数据接口）就是基于HTTP来实现数据传输的。</p><h2 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h2><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824003915.png" alt="http-request"></p><p>一个HTTP请求报文由请求行（request line）、请求头部（headers）、空行（blank line）和请求数据（request body）4个部分组成。 </p><p>如果没有数据发给服务器，消息体就不是必须的部分。请求行中包含了请求方法（GET、POST 等，如下表所示）、资源路径和协议版本；请求头由若干键值对构成，包含了浏览器、编码方式、首选语言、缓存策略等信息；请求头的后面是空行和消息体。</p><h3 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h3><p>  HTTP/1.1 定义的请求方法有8种：GET（完整请求一个资源）、POST（提交表单）、PUT（上传文件）、DELETE（删除）、PATCH、HEAD（仅请求响应首部）、OPTIONS（返回请求的资源所支持的方法）、TRACE（追求一个资源请求中间所经过的代理）。最常的两种GET和POST，如果是RESTful接口的话一般会用到GET、POST、DELETE、PUT。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210825002720.PNG" width="65%"><h4 id="2-POST-方法和-GET-方法"><a href="#2-POST-方法和-GET-方法" class="headerlink" title="2.POST 方法和 GET 方法"></a>2.POST 方法和 GET 方法</h4><p>浏览器使用 method 属性设置的方法将表单中的数据传送给服务器进行处理。共有两种方法：POST 方法和 GET 方法。</p><p>如果采用 POST 方法，浏览器将会按照下面两步来发送数据。首先，浏览器将与 action 属性中指定的表单处理服务器建立联系，一旦建立连接之后，浏览器就会按分段传输的方法将数据发送给服务器。</p><p>在服务器端，一旦 POST 样式的应用程序开始执行时，就应该从一个标志位置读取参数，而一旦读到参数，在应用程序能够使用这些表单值以前，必须对这些参数进行解码。用户特定的服务器会明确指定应用程序应该如何接受这些参数。</p><p>另一种情况是采用 GET 方法，这时浏览器会与表单处理服务器建立连接，然后直接在一个传输步骤中发送所有的表单数据：浏览器会将数据直接附在表单的 action URL 之后。这两者之间用问号进行分隔。</p><p>一般浏览器通过上述任何一种方法都可以传输表单信息，而有些服务器只接受其中一种方法提供的数据。可以在 </p><form> 标签的 method （方法）属性中指明表单处理服务器要用方法来处理数据，使 POST 还是 GET。<p></p><h4 id="3-POST-还是-GET？"><a href="#3-POST-还是-GET？" class="headerlink" title="3.POST 还是 GET？"></a>3.POST 还是 GET？</h4><p>如果表单处理服务器既支持 POST 方法又支持 GET 方法，那么你该选择哪种方法呢？下面是有关这方面的一些规律：</p><p>如果希望获得最佳表单传输性能，可以采用 GET 方法发送只有少数简短字段的小表单。</p><p>一些服务器操作系统在处理可以立即传递给应用程序的命令行参数时，会限制其数目和长度，在这种情况下，对那些有许多字段或是很长的文本域的表单来说，就应该采用 POST 方法来发送。</p><p>如果你在编写服务器端的表单处理应用程序方面经验不足，应该选择 GET 方法。如果采用 POST 方法，就要在读取和解码方法做些额外的工作，也许这并不很难，但是也许你不太愿意去处理这些问题。</p><p>如果安全性是个问题，那么我们建议选用 POST 方法。GET 方法将表单参数直接放在应用程序的 URL 中，这样网络窥探者可以很轻松地捕获它们，还可以从服务器的日志文件中进行摘录。如果参数中包含了信用卡帐号这样的敏感信息，就会在不知不觉中危及用户的安全。而 POST 应用程序就没有安全方面的漏洞，在将参数作为单独的事务传输给服务器进行处理时，至少还可以采用加密的方法。</p><p>如果想在表单之外调用服务器端的应用程序，而且包括向其传递参数的过程，就要采用 GET 方法，因为该方法允许把表单这样的参数包括进来作为 URL 的一部分。而另一方面，使用 POST 样式的应用程序却希望在 URL 后还能有一个来自浏览器额外的传输过程，其中传输的内容不能作为传统 <a> 标签的内容。</a></p><a></a><h2 id="HTTP响应"><a></a><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h2><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824234158.png" alt="http-response"></p><p>HTTP 响应通常是由响应行、响应头、空行、响应体四个部分构成。</p><p>响应行中包含了协议版本和响应状态码，响应状态码有很多种，常见的如下表所示。</p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210825002802.PNG" width="65%"><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><p>响应头与 HTTP 请求中的请求头类似，同样由头部字段名、冒号、空格和值组成<br>响应头中包含了一系列服务器的信息，以及服务器对请求的响应。</p><h3 id="空行与响应体"><a href="#空行与响应体" class="headerlink" title="空行与响应体"></a>空行与响应体</h3><p>HTTP 响应中同样使用空行来表示响应头结束。响应体则是服务器根据客户端的请求返回给客户端的具体数据。可能是 HTML 页面，也有可能是JSON或二进制数据等</p><p><strong>Session和 Cookies</strong><br>我们在浏览网站的过程中，经常会遇到需要登录的情况，而有些网页只有登录之后才可以访问，而且登录之后可以连续访问很多次网站，但是有时候过一段时间就需要重新登录。 还有一些网站，在打开浏览器时就自动登录了，而且很长时间都不会失效，这种情况又是为什么？其实这里面涉及 Session和 Cookies 的相关知识，</p><h2 id="静态网页和动态网页"><a href="#静态网页和动态网页" class="headerlink" title="静态网页和动态网页"></a>静态网页和动态网页</h2><p>在开始介绍它们之前，我们需要先了解一下静态网页和动态网页的概念。这里还是前面的示例代码，内容如下：</p><p>这是最基本的 HTML代码，我们将其保存为一个 .html文件，然后把它放在某台具有固定公网 IP 的主机上，主机上装上 Apache 或 Nginx等服务器，这样这台主机就可以作为服务器了，其他人便可以通过访问服 务器看到这个页面，这就搭建了一个最简单的网站。 这种网页的内容是 HTML代码编写的，文字、图片等内容均通过写好的 HTML代码来指定，这种页面叫作静态网页。它加载速度快，编写简单，但是存在很大的缺陷，如可维护性差，不能根据 URL灵活多变 地显示内容等。例如，我们想要给这个网页的 URL传入一个 name 参数，让其在网页中显示出来，是无法做到的。</p><p>因此，动态网页应运而生，它可以动态解析 URL中参数的变化，关联数据库并动态呈现不同的页面内容，非常灵活多变。我们现在遇到的大多数网站都是动态网站，它们不再是一个简单的 HTML，而是可能由 JSP、PHP、Python等语言编写的，其功能比静态网页强大和丰富太多了。 此外，动态网站还可以实现用户登录和注册的功能。再回到开头来看提到的问题，很多页面是需要登录之后才可以查看的。按照一般的逻辑来说，输入用户名和密码登录之后，肯定是拿到了一种类似凭证的东 西，有了它，我们才能保持登录状态，才能访问登录之后才能看到的页面。 那么，这种神秘的凭证到底是什么呢？其实它就是 Session和 Cookies 共同产生的结果，下面我们来一探究竟。</p><h2 id="无状态-HTTP"><a href="#无状态-HTTP" class="headerlink" title="无状态 HTTP"></a>无状态 HTTP</h2><p>HTTP 的无状态特点是指服务器无法判断客户端是什么状态。即服务器无法判断用户身份。</p><p>当我们向服务器发送请求后，服务器解析此请求，然后返回对应的响应，服务器负责完成这个过程，而且这个过程是完全独立的，服务器不会记录前后状态的变化，也就是缺少状态记录。 这意味着如果后续需要处理前面的信息，则必须重传，这也导致需要额外传递一些前面的重复请求，才能获取后续响应，然而这种效果显然不是我们想要的。为了保持前后状态，我们肯定不能将前面的请求全 部重传一次，这太浪费资源了，对于这种需要用户登录的页面来说，更是棘手。 这时两个用于保持 HTTP 连接状态的技术就出现了，它们分别是 Session和 Cookies。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session在服务端，也就是网站的服务器，用来保存用户的 Session信息；<br>Session，中文称之为会话，其本身的含义是指有始有终的一系列动作 / 消息。比如，打电话时，从拿起电话拨号到挂断电话这中间的一系列过程可以称为一个 Session。 而在 Web 中，Session对象用来存储特定用户 Session所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session对象中的变量将不会丢失，而是在整个用户 Session中一直存在下 去。当用户请求来自应用程序的 Web 页时，如果该用户还没有 Session，则 Web 服务器将自动创建一个 Session对象。当 Session过期或被放弃后，服务器将终止该 Session。</p><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>Cookies 在客户端，也可以理解为浏览器端，有了 Cookies，浏览器在下次访问网页时会自动附带上它发送给服务器，服务器通过识别 Cookies 并鉴定出是哪个用户，然后再判断用户是否是登录状态，进而返回对应的响应。</p><p>我们可以理解为 Cookies 里面保存了登录的凭证，有了它，只需要在下次请求携带 Cookies 发送请求而不必重新输入用户名、密码等信息重新登录了。 因此在爬虫中，有时候处理需要登录才能访问的页面时，我们一般会直接将登录成功后获取的 Cookies 放在请求头里面直接请求，而不必重新模拟登录。 </p><p>Cookies 指某些网站为了辨别用户身份、进行 Session跟踪而存储在用户本地终端上的数据。</p><h3 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h3><p>Cookie实际上是一小段的文本信息（key-value格式）。客户端向服务器发起请求，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。</p><p>打个比方，我们去银行办理储蓄业务，第一次给你办了张银行卡，里面存放了身份证、密码、手机等个人信息。当你下次再来这个银行时，银行机器能识别你的卡，从而能够直接办理业务。</p><h3 id="会话Cookie-和持久Cookie"><a href="#会话Cookie-和持久Cookie" class="headerlink" title="会话Cookie 和持久Cookie"></a>会话Cookie 和持久Cookie</h3><p>从表面意思来说，会话 Cookie 就是把 Cookie 放在浏览器内存里，浏览器在关闭之后该 Cookie 即失效；持久 Cookie 则会保存到客户端的硬盘中，下次还可以继续使用，用于长久保持用户登录状态。 其实严格来说，没有会话 Cookie 和持久 Cookie 之 分，只是由 Cookie 的 MaxAge 或 Expires 字段决定了过期的时间。 因此，一些持久化登录的网站其实就是把 Cookie 的有效时间和 Session有效期设置得比较长，下次我们再访问页面时仍然携带之前的 Cookie，就可以直接保持登录状态。</p><h3 id="属性结构"><a href="#属性结构" class="headerlink" title="属性结构"></a>属性结构</h3><p>在浏览器开发者工具中打开 Application选项卡，然后在左侧会有一个 Storage 部分，最后一项即为 Cookies，将其点开</p><p>其中每个条目可以称为 Cookie。它有如下几个属性。<br>Name，即该 Cookie 的名称。Cookie 一旦创建，名称便不可更改。<br>Value，即该 Cookie 的值。如果值为 Unicode 字符，需要为字符编码。如果值为二进制数据，则需要使用 BASE64 编码。 MaxAge，即该 Cookie 失效的时间，单位秒，也常和 Expires 一起使用，通过它可以计算出其有效时间。MaxAge 如果为正数，则该 Cookie 在 MaxAge 秒之后失效。如果为负数，则关闭浏览器时 Cookie 即 失效，浏览器也不会以任何形式保存该 Cookie。<br>Path，即该 Cookie 的使用路径。如果设置为 /path/，则只有路径为 /path/ 的页面可以访问该 Cookie。如果设置为 /，则本域名下的所有页面都可以访问该 Cookie。<br>Domain，即可以访问该 Cookie 的域名。例如如果设置为 .zhihu.com，则所有以 zhihu.com，结尾的域名都可以访问该 Cookie。<br>Size 字段，即此 Cookie 的大小。 Http 字段，即 Cookie 的 httponly属性。若此属性为 true，则只有在 HTTP Headers 中会带有此 Cookie 的信息，而不能通过 document.cookie 来访问此 Cookie。 Secure，即该 Cookie 是否仅被使用安全协议传输。安全协议。安全协议有 HTTPS、SSL等，在网络上传输数据之前先将数据加密。默认为 false。</p><h2 id="Session维持"><a href="#Session维持" class="headerlink" title="Session维持"></a>Session维持</h2><p>那么，我们怎样利用 Cookies 保持状态呢？当客户端第一次请求服务器时，服务器会返回一个响应头中带有 Set-Cookie 字段的响应给客户端，用来标记是哪一个用户，客户端浏览器会把 Cookies 保存起来。当浏 览器下一次再请求该网站时，浏览器会把此 Cookies 放到请求头一起提交给服务器，Cookies 携带了 Session ID 信息，服务器检查该 Cookies 即可找到对应的 Session是什么，然后再判断 Session来以此来辨认用户 状态。 在成功登录某个网站时，服务器会告诉客户端设置哪些 Cookies 信息，在后续访问页面时客户端会把 Cookies 发送给服务器，服务器再找到对应的 Session加以判断。如果 Session中的某些设置登录状态的变量是 有效的，那就证明用户处于登录状态，此时返回登录之后才可以查看的网页内容，浏览器再进行解析便可以看到了。 反之，如果传给服务器的 Cookies 是无效的，或者 Session已经过期了，我们将不能继续访问页面，此时可能会收到错误的响应或者跳转到登录页面重新登录。 所以，Cookies 和 Session需要配合，一个处于客户端，一个处于服务端，二者共同协作，就实现了登录 Session控制。</p><h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><p>常在谈论 Session机制的时候，常常听到这样一种误解 ——“只要关闭浏览器，Session就消失了”。可以想象一下会员卡的例子，除非顾客主动对店家提出销卡，否则店家绝对不会轻易删除顾客的资料。对 Session 来说，也是一样，除非程序通知服务器删除一个 Session，否则服务器会一直保留。比如，程序一般都是在我们做注销操作时才去删除 Session。 但是当我们关闭浏览器时，浏览器不会主动在关闭之前通知服务器它将要关闭，所以服务器根本不会有机会知道浏览器已经关闭。之所以会有这种错觉，是因为大部分网站都使用会话 Cookie 来保存 Session ID 信息，而关闭浏览器后 Cookies 就消失了，再次连接服务器时，也就无法找到原来的 Session了。如果服务器设置的 Cookies 保存到硬盘上，或者使用某种手段改写浏览器发出的 HTTP 请求头，把原来的 Cookies 发送给服务器，则再次打开浏览器，仍然能够找到原来的 Session ID，依旧还是可以保持登录状态的。 而且恰恰是由于关闭浏览器不会导致 Session被删除，这就需要服务器为 Session设置一个失效时间，当距离客户端上一次使用 Session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才 会把 Session删除以节省存储空间。</p><h1 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h1><p>域名解析就是将域名转换为IP地址去访问</p><p><strong>A记录</strong>将域名指向ip地址，主机记录填你自己设置的，值填ip地址</p><p><strong>CNAME</strong>也叫别名记录，用来把域名解析到别的域名上。<br>一般情况下都建议使用CNAME记录。CNAME记录可用于CDN加速，通过CDN加速别名解析网站域名，这样既可以起到加速网站的作用，又能隐藏网站的真实IP，减少被攻击的几率。</p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p>内网穿透是指将内网中的软件服务通过网络代理方式暴露给广域网用户。可以实现内网穿透的方式很多，比如通过防火墙硬件、网络穿透软件来进行实现。<br>先简单解释一下，大多数情况下，我们的个人电脑都处于内网，即没有可公开访问的独立 IP 地址（上网要通过其他网关），因此其他内网用户找不到你，就没办法和你建立连接。</p><p>而内网穿透的作用，就是将内网的电脑暴露到公共网络。可以理解为一个中间人，由于他知道你的电脑地址，所以能帮助其他用户访问到你的计算机。<br>「无公网IP实现外网访问内网群晖.docx」<br>链接：<a href="https://www.aliyundrive.com/s/ftxwXuv2SAi">https://www.aliyundrive.com/s/ftxwXuv2SAi</a><br>「开源内网穿透工具 frp 简单使用教程.docx」<br>链接：<a href="https://www.aliyundrive.com/s/3K6okzrMght">https://www.aliyundrive.com/s/3K6okzrMght</a><br>「常见内网穿透工具使用总结.docx」<br>链接：<a href="https://www.aliyundrive.com/s/DDhaPQfR6SS">https://www.aliyundrive.com/s/DDhaPQfR6SS</a><br>「使用内网穿透访问内网ssh图文教程.docx」<br>链接：<a href="https://www.aliyundrive.com/s/9U1Migig8yB">https://www.aliyundrive.com/s/9U1Migig8yB</a><br>「内网渗透之内网穿透.docx」<br>链接：<a href="https://www.aliyundrive.com/s/Uh88x4GSjz4">https://www.aliyundrive.com/s/Uh88x4GSjz4</a><br>「内网穿透神器NPS的使用.docx」<br>链接：<a href="https://www.aliyundrive.com/s/7XQUhDhPGBm">https://www.aliyundrive.com/s/7XQUhDhPGBm</a></p><p><a href="https://mp.weixin.qq.com/s/slxUTaFkdzfYK7auHxeyAA">参考</a></p><h3 id="nps-npc"><a href="#nps-npc" class="headerlink" title="nps-npc"></a>nps-npc</h3><a class="btn-beautify button--animated larger" href="https://www.aliyundrive.com/s/7XQUhDhPGBm" title="原文"><i class="far fa-hand-point-right"></i><span>原文</span></a><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。</p><ul><li><p>一台有公网IP的服务器（VPS）运行服务端（NPS）</p></li><li><p>一个或多个运行在内网的服务器或者PC运行客户端（NPC）</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>Go语言编写</p></li></ul><p>支持跨平台</p><p>支持多种协议的代理</p><p>web管理端</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>其官方网站为：<a href="https://ehang-io.github.io/nps">https://ehang-io.github.io/nps</a>其官网文档对软件的安装、使用描述的非常完整，基本根据官方文档就可以进行顺利安装与使用。<br>其官方网站为：<a href="https://ehang-io.github.io/nps">https://ehang-io.github.io/nps</a>其官网文档对软件的安装、使用描述的非常完整，基本根据官方文档就可以进行顺利安装与使用。</p><h3 id="NATAPP"><a href="#NATAPP" class="headerlink" title="NATAPP"></a>NATAPP</h3><a class="btn-beautify button--animated " href="https://mp.weixin.qq.com/s/-lnU1DM0CVQVAlU974xUPQ" title="原文"><span>原文</span></a><h3 id="未整理"><a href="#未整理" class="headerlink" title="未整理"></a>未整理</h3><p>原文：<a href="https://zhuanlan.zhihu.com/p/303175108">https://zhuanlan.zhihu.com/p/303175108</a><br>首先解释一下“内网”与“外网”的概念：<br>内网：即所说的局域网，比如学校的局域网，局域网内每台计算机的IP地址在本局域网内具有互异性，是不可重复的。但两个局域网内的内网IP可以有相同的。<br>外网：即互联网，局域网通过一台服务器或是一个路由器对外连接的网络，这个IP地址是唯一的。也就是说内网里所有的计算机都是连接到这一个外网IP上，通过这一个外网IP对外进行交换数据的。也就是说，一个局域网里所有电脑的内网IP是互不相同的,但共用一个外网IP。（用ipconfig/all查到的IP是你本机的内网IP；在<a href="http://www.ip138.com上看到的是你连接互联网所使用的ip,即外网)./">http://www.ip138.com上看到的是你连接互联网所使用的IP，即外网）。</a></p><p>然后解释一下公有 IP 和私有 IP 的区别：<br>公有地址(Public address)：由 Inter NIC(Internet Network Information Center 因特网信息中心)负责。这些 IP 地址分配给注册并向Inter NIC提出申请的组织机构，公有 IP 全球唯一，通过它直接访问因特网(直接能上网)。<br>私有地址(Private address)：属于非注册地址，专门为组织机构内部使用，说白了，私有 IP 不能直接上网。<br>而我们平时通过运营商(电信、移动、联通宽带等)上网，家里面通过路由器分出来的 IP 都是私有 IP(局域网 IP)，大家可能会疑问，我们可以上网啊，怎么会是私有 IP 呢?租用(申请)公有 IP 是需要钱的。 运营商买了一些公有 IP，然后通过这些公有 IP 分出来，再分给一个一个的用户使用。这个过程有点类似于，我们去安装了宽度，通过路由器分出几个 IP，让好几个人都能上网，当然运营商通过公有 IP 分出来的过程肯定比这个复杂多了。所以，我们平时上网用的 IP 是私有 IP，真正拥有公有 IP 的是运营商(当然，我们可以租用一个公有 IP )。所以，A 家庭的局域网 IP 和 B 家庭的局域网 IP 相同很正常，但是，最终 A 和 B 能上网(数据走出去)还是通过运营商的公有 IP，毕竟，公有 IP 的资源有限，这一片区域的用户使用的很有可能(实际上就是这样的)是同一个公有 IP<br>最后需要解释一下端口映射：<br>端口映射是 NAT 的一种，它将外网主机的 IP 地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该 IP 的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。<br>之前提到的内网，是不能被外网直接的访问的，只能通过一些中转技术，让内网“假装”成外网。<br>这就平常所说的内网穿透。<br>内网穿透原理</p><p>内网穿透的概念</p><p>内网穿透，即NAT穿透，网络连接时术语，计算机是局域网内时，外网与内网的计算机节点需要连接通信，有时就会出现不支持内网穿透。就是说映射端口，能让外网的电脑找到处于内网的电脑，提高下载速度。不管是内网穿透还是其他类型的网络穿透，都是网络穿透的统一方法来研究和解决。</p><p>内网穿透原理<br>对于内网来说，其不是不能主动访问公网端口，而是不能反过来有效的被公网访问。内网穿透的主要思路就是利用这一点，让在内网的节点主动访问一个拥有公网IP地址的服务器，并由中间服务器搭桥，打通经过该服务器从其他主机到NAT之后节点的隧道。</p><p>有哪些应用场景<br>提供内网穿透服务<br>连接内网服务器，在外网演示内网web站点<br>无需服务器部署，快速调试本地程序，微信公众号开发利器<br>支持http、https协议站点，省去证书中间件复杂配置，http协议站点直接升级为https站点<br>支持TCP，UDP协议端口转发。支持数据库、SSH、远程桌面、网络摄像头等等开放到外网</p><p>建立隧道的工具</p><p>钉钉穿透</p><p>工具基于ngrok封装，简单、见效快，新手、个人开发者最佳选择</p><p>Ngrok<br>项目主页：<a href="https://ngrok.com/">https://ngrok.com/</a><br>项目介绍： 一个通过任何NAT或防火墙为您的本地主机服务器提供即时访问、安全的URL的命令。类似花生壳，分为服务端和客户端，也可以自己搭建服务端。开源，老牌穿透工具，源码很久没有更新了</p><p>Ssh&nbsp;配合autossh工具使用，因为autossh会容错<br>项目主页：<a href="http://www.harding.motd.ca/autossh/">http://www.harding.motd.ca/autossh/</a><br>项目介绍：自动重新启动SSH会话和隧道。autossh是一个程序，用于启动ssh的副本并进行监控，在死亡或停止传输流量时根据需要重新启动它。 这个想法来自rstunnel（Reliable SSH Tunnel），但是在C中实现。作者的观点是，它不像匆匆忙忙的工作那么容易。使用端口转发环路或远程回显服务进行连接监视。在遇到连接拒绝等快速故障时，关闭连接尝试的速度。在OpenBSD，Linux，Solaris，Mac OS X，Cygwin和AIX上编译和测试; 应该在其他BSD上工作。免费软件。<br>Natapp<br>项目主页：<a href="https://natapp.cn/">https://natapp.cn/</a><br>项目介绍：基于ngrok的国内收费内网穿透工具，4包卫龙辣条的费用可以享有不限流量，自定义域名等好处类似花生壳，有免费版本，比花生壳好。免费版本：提供http,https,tcp全隧道穿透，随机域名/TCP端口，不定时强制更换域名/端口，自定义本地端口</p><p>Spike<br>项目主页：<a href="https://github.com/slince/spike">https://github.com/slince/spike</a><br>项目介绍：Spike是一个可以用来将你的内网服务暴露在公网的快速的反向代理，基于ReactPHP，采用IO多路复用模型。采用Php实现。</p><p>个人不推荐<br>花生壳<br>项目主页：<a href="https://hsk.oray.com/">https://hsk.oray.com/</a><br>项目介绍：商业化比较成功的内网穿透。个人开发很不推荐，收费贵，企业可以考虑使用。<br>需要建立账号实名认证，支付2包卫龙辣条费用，可自选一个壳域名，注册过程比较麻烦，流量限制<br>Lanproxy<br>项目主页：<a href="https://github.com/ffay/lanproxy">https://github.com/ffay/lanproxy</a><br>项目介绍：lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，目前仅支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面…）。目前市面上提供类似服务的有花生壳、TeamView、GoToMyCloud等等，但要使用第三方的公网服务器就必须为第三方付费，并且这些服务都有各种各样的限制，此外，由于数据包会流经第三方，因此对数据安全也是一大隐患。<br>Frp<br>项目主页：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a><br>项目介绍：frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。开源，强大牛逼，适合企业中开发使用，可穿透任意常规合法端口（包含22），需要提供云服务器，自己的域名，宽带上限由你的服务器所决定。</p><p>工具选择<br><a href="https://juejin.cn/post/6860694239412649991?share_token=26950be9-39b6-432c-b29a-a26df3e8cae4">https://juejin.cn/post/6860694239412649991?share_token=26950be9-39b6-432c-b29a-a26df3e8cae4</a><br>内网穿透工具比较(ngrok,frp,lanproxy,goproxy,nps)<br><a href="https://blog.csdn.net/a1035434631/article/details/108010819">https://blog.csdn.net/a1035434631/article/details/108010819</a></p><p>ngork<br>基本原理是通过客户端与公网服务端建立通道及映射关系，然后服务端提供可访问的公网地址。当外网访问此公网地址时，ngrok服务端根据映射关系找到客户端，然后转发给客户端的服务<br><a href="https://juejin.cn/post/6844903993911558157?share_token=1b8c42ab-1174-48a2-9122-00e008829d45">https://juejin.cn/post/6844903993911558157?share_token=1b8c42ab-1174-48a2-9122-00e008829d45</a></p><h1 id="数据交换语言"><a href="#数据交换语言" class="headerlink" title="数据交换语言"></a>数据交换语言</h1><h2 id="JSON格式"><a href="#JSON格式" class="headerlink" title="JSON格式"></a>JSON格式</h2><p><strong>JSON</strong>（<strong>J</strong>ava<strong>S</strong>cript <strong>O</strong>bject <strong>N</strong>otation）是一种轻量级的数据交换语言，该语言以易于让人阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是Javascript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面的功能。由于JSON是纯文本，它和<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。</p><p>XML的例子：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">content</span>&gt;</span>Will you marry me?<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>JSON的例子：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"Alice"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"Bob"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"Will you marry me?"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></form>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 计网 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2021/122465132.html"/>
      <url>/2021/122465132.html</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>命名规则<br>可以包含数字，但不能以数字开头<br>除了下划线_,和$符之外，不能有其它特殊字符，如空格<br>区分字母大小写<br>不能使用Java关键字<br>换行符\n要加双引号<br>System.out.println(“名字”+“\n”);</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释：//<br>多行注释：从“/<em>”开始到“</em>/”结束，<br>文档注释：从“/*<em>”开始到“</em>/”结束<br>文档注释可以用javadoc命令提取出来，生成类似于jdk文档的网页文件，以便于他人了解一个类的功能。</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><pre><code>变量基本结构：类型 变量名 =值前面不可以有访问符</code></pre><h1 id="8种基本数据类型"><a href="#8种基本数据类型" class="headerlink" title="8种基本数据类型"></a>8种基本数据类型</h1><h2 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h2><ul><li>整数<br>short型（短整型）数据在内存中占用2个字节<br>long型（长整型）数据在内存中占用8个字节。<br>int型（整型）数据在内存中占用4个字节。<br>byte型（字节型）数据在内存中占用1个字节，表示的存储数据范围为：-128~127。</li><li>浮点数<pre><code>  float型（单精度浮点型）数据在内存中占用4个字节。      float t = 3.1f           f转为double型  double型（双精度浮点型）数据在内存中占用8个字节。      一般小数默认是double型</code></pre></li></ul><h2 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h2><p>boolean：数据值只有true或false，适用于逻辑计算。</p><h2 id="字符型-char"><a href="#字符型-char" class="headerlink" title="字符型(char)"></a>字符型(char)</h2><p>char每个字符占2个字节，定义时用单引号’ ‘</p><h2 id="字符串类型String"><a href="#字符串类型String" class="headerlink" title="字符串类型String"></a>字符串类型String</h2><p>最常用的一种存储文本的数据类型，用双引号“”<br>任何数据+字符串操作结果都是字符串<br>使用关键字和构造方法来创建 String 对象。<br>String str2=new String(“Runoob”);<br>有内置方法<br>hashCode() 方法用于返回字符串的哈希码。<br>length() 方法，它返回字符串对象包含的字符数。</p><h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2><h2 id="if条件语句"><a href="#if条件语句" class="headerlink" title="if条件语句"></a>if条件语句</h2><h2 id="switch多重选择"><a href="#switch多重选择" class="headerlink" title="switch多重选择"></a>switch多重选择</h2><h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><h2 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h2><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始条件; 循环检测条件; 循环后更新计数器) {</span><br><span class="line">    <span class="comment">// 执行语句</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">break</span>语句通常都是配合<span class="keyword">if</span>语句使用。要特别注意，<span class="keyword">break</span>语句总是跳出自己所在的那一层循环</span><br><span class="line"><span class="keyword">continue</span>则是提前结束本次循环，直接继续执行下次循环</span><br></pre></td></tr></tbody></table></figure><p>for each循环能够遍历所有“可迭代”的数据类型，包括后面会介绍的List、Map等。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h4><p>for循环通过索引来访问</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] ns = { <span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">16</span>, <span class="number">25</span> };</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;ns.length; i++) {</span><br><span class="line">    <span class="keyword">int</span> n = ns[i];</span><br><span class="line">    System.out.println(n);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>for each循环直接迭代数组的每个元素</p><p>第七章异常<br>    Error严重的错误<br>        OutOfMemoryError：内存耗尽<br>        NoClassDefFoundError：无法加载某个Class<br>        StackOverflowError：栈溢出<br>    Exceptio是运行时的错误，它可以被捕获并处理。<br>        RuntimeException以及它的子类；<br>        非RuntimeException<br>        （包括IOException、ReflectiveOperationException等等）<br>            异常类分为两种<br>                1.错误。一般指与虚拟机相关的问题，这些错误无法恢复和捕获<br>                2.异常（Exception），因编码错误或外在因素导致的问题<br>    两种异常处理机制<br>        1.使用try    catch捕获异常<br>            存在多个catch的时候，catch的顺序非常重要：子类必须写在前面<br>        2.trrows抛出异常</p><h1 id="对象和类"><a href="#对象和类" class="headerlink" title="对象和类"></a>对象和类</h1><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>类是一个模板，描述一类对象的属性(状态)和方法(行为)</p><h3 id="1-属性"><a href="#1-属性" class="headerlink" title="1.属性"></a>1.属性</h3><p>直接把field用public暴露给外部可能会破坏封装性，所以用private<br>外部代码可以调用get()方法和set()方法来间接获取和修改指定的私有成员变量的值</p><h3 id="2-方法"><a href="#2-方法" class="headerlink" title="2.方法"></a>2.方法</h3><p>一个类可以有很多种方法，逻辑运算，数据修改都是在方法中完成的</p><p> 定义语法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">修饰符 方法返回类型 方法名(方法参数列表) {</span><br><span class="line">    若干方法语句;</span><br><span class="line">    <span class="keyword">return</span> 方法返回值;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>若方法中没有returun返回值，则该方法的返回类型为void类型</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="方法的参数传递机制"><a href="#方法的参数传递机制" class="headerlink" title="方法的参数传递机制"></a>方法的参数传递机制</h5><p>形参：声明方法时定义的参数，形参前必须有数据类型  格式：方法名（数据类型 形参）<br>实参：调用方法时给方法传递的实际数据，使用格式：对象名.方法名（实参）</p><h5 id="可变参数："><a href="#可变参数：" class="headerlink" title="可变参数："></a>可变参数：</h5><p>定义格式<br>方法名（参数列表，数据类型 … 变量）<br>注意：<br>可变参数只能处于参数列表的最后<br>一个方法最多只能包含一个可变参数<br>可变参数本质是一个数组，因此在调用时，既可以传入多个参数，也可传入一个数组</p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p>作用：在创建对象时初始化对象中的属性值<br>构造方法的名称必须是类名。构造方法没有返回类型（也没有void），调用构造方法，必须用new操作符。<br>不能被static、final、synchronized、abstract和native修饰。构造方法不能被子类继承，所以用final和abstract修饰没有意义。</p><p>构造方法用于初始化一个新建的对象，所以用static修饰没有意义</p><p>语法：<br>访问符 类名 （参数）{<br>}</p><h5 id="this关键字："><a href="#this关键字：" class="headerlink" title="this关键字："></a>this关键字：</h5><p>this代表当前对象的内存地址，<br>在实例方法或者构造方法中，为了区分局部变量和实例变量，this不能省略<br>代表当前类将来产生的对象，即将来用该类new出来的对象，用于获取当前类的对象的引用</p><h4 id="set方法和get方法"><a href="#set方法和get方法" class="headerlink" title="set方法和get方法"></a>set方法和get方法</h4><p>封装性即对类中的域变量进行封闭操作，即用private来修饰他们，如此一来其他类则不能对该变量访问</p><p>程序仅通过对象的方法与对象数据进行交互，即通过set和get方法间接地操作这些私有域变量</p><p>命名规则：<br>    返回类型都是void<br>    方法名是set 加上成员变量名字的首字母大写<br>    带一个参数 参数类型是成员变量的类型 </p><h4 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h4><p>1.调用非静态方法<br>    对象名.方法名（）<br>2.调用静态方法<br>    类名.方法名()</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"Xiao Ming"</span>, <span class="number">15</span>); <span class="comment">// 既可以调用带参数的构造方法</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(); <span class="comment">// 也可以调用无参数构造方法</span></span><br></pre></td></tr></tbody></table></figure><h4 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h4><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。<br>目的：功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。</p><h4 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h4><p>子类重写了父类的方法<br>注意：方法名相同，方法参数相同，但方法返回值不同，也是不同的方法</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>对象是类的一个实例，有状态和行为</p><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>语法：类名 对象名=new 类名();</p><p>创建类的对象分为两步<br>1.定义该类的一个变量，此时在栈上会分配空间储存对象在堆中的地址（即对象的引用）<br>2.创建该对象的实际物理空间，即在堆中为该对象分配空间，并把此空间的地址（即引用）赋给对象名，此步骤通过new关键字来实例化该类的一个对象</p><h3 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h3><p>创建对象后就可以使用对象<br>访问对象的属性  语法：对象名.属性名<br>调用对象的方法   语法：对象名.方法名（）</p><h1 id="面对对象"><a href="#面对对象" class="headerlink" title="面对对象"></a>面对对象</h1><h2 id="面向对象三大特征"><a href="#面向对象三大特征" class="headerlink" title="面向对象三大特征"></a>面向对象三大特征</h2><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>实际上就是信息隐藏，将类中的成员属性和成员方法修饰为私有化，数据被保护在对象的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系，即get/set方法。</p><p>其他对象只能通过该对象提供的get/set方法，与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节（当然也无从知道），但可以通过该对象对外提供的接口来访问该对象。</p><ul><li>访问符：用于指明类、属性或方法的访问权限<br>public公共访问权限，可被同一包或不同包的所有类访问<br>protected子类访问权限，可以被同一包的其它类访问，也可以被其他包的子类访问<br>friendly包访问权限，如果没设置访问符则默认friendly包访问权限，可被同一包中所有类访问<br>private 当前类访问权限，只能被当前类的其它成员访问</li><li>修饰符：用于指明类的特性<pre><code>  abstarct（抽象）  static（静态）  final（最终）</code></pre></li></ul><p>如果有很多代码都使用了Dog这个类；当某一天这个类的age属性需要换成String类型，那么，外部使用它的任何地方都需要需改xxx.age=”xxx”，这将是非常繁琐的一个过程，那该怎么办呢？很简单，使用private修饰符将属性封装，开放访问接口的方法，我们只需要修改一下set方法就能完美解决。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Dog d1 = <span class="keyword">new</span> Dog();</span><br><span class="line"><span class="comment">//调用时发生变化</span></span><br><span class="line">d1.setName(<span class="string">"旺财"</span>);</span><br><span class="line">d1.setAge(<span class="number">3</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line"><span class="keyword">private</span> String age;<span class="comment">//修改为String类型</span></span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="comment">//将属性私有化，提供set方法，将int类型的值转成String</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.age = String.valueOf(age);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样外部使用它的地方都不用修改，我们只用简单的修改对象内部就可以了，更加方便快捷。到了这里我们应该可以看出，封装确实可以使我们容易地修改类的内部实现，而无需修改使用了该类的客户代码。</p><p>这里还可以体现出一些封装属性的优势，案例如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Dog d1 = <span class="keyword">new</span> Dog();</span><br><span class="line">d1.setName(<span class="string">"旺财"</span>);</span><br><span class="line">d1.setAge(<span class="number">300</span>);<span class="comment">//狗的年龄赋值很明显不合理，这里就需要在set方法中给出提示</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line"><span class="keyword">private</span> String age;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">100</span>||age&lt;<span class="number">0</span>) {</span><br><span class="line">System.out.println(<span class="string">"你见过超过100岁的狗狗吗？"</span>);</span><br><span class="line">}<span class="keyword">else</span>  {</span><br><span class="line"><span class="keyword">this</span>.age = String.valueOf(age);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>作用：通过继承，子类可以使用父类中的非私有属性和非私有方法，从而提高代码的重用性，提高开发效率。<br>子类自动获得了父类的所有字段，严禁定义与父类重名的字段！<br>为了让子类可以访问父类的字段，把private改为protected。用protected修饰的字段可以被子类访问<br>除了父类中私有的属性和方法，子类必须全部继承。<br>3、子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。<br>4、子类可以用自己的方式实现父类的方法（即方法的重写/覆盖）。<br>5、构造器而言，它只能够被调用，而不能被继承，子类可以使用super()调用父类构造器。<br>6、对于继承而已，子类会默认调用父类的无参构造，但是如果父类没有无参构造，子类必须要在其构造方法中的第一行代码调用指定父类的构造器，传递对应参数。<br>7、Java 的继承是单继承，即每个子类只能拥有一个直接父类，但是该父类可以有多个子类<br>通过extends关键字实现继承<br>语法格式<br><code>访问符 修饰符 class 子类 extends 父类{  }</code></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>{</span><br><span class="line"><span class="comment">//父类中的非私有属性都会被继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> money;</span><br><span class="line">String home;</span><br><span class="line"><span class="comment">//父类中的非私有方法都会被继承</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{} <span class="comment">//吃东西</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>{}<span class="comment">//睡觉</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">soner</span><span class="params">()</span> </span>{}<span class="comment">//打呼噜</span></span><br><span class="line"><span class="comment">//父类构造方法如果有参数，子类必须在构造方法第一行中调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Father</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line"><span class="comment">//父类如果写了有参构造，那么默认的无参构造将不再生效</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>{</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Son</span><span class="params">(<span class="keyword">int</span> x)</span> </span>{</span><br><span class="line"><span class="keyword">super</span>(x);<span class="comment">//调用父类构造 super() </span></span><br><span class="line">age=<span class="number">12</span>;<span class="comment">//继承后拥有父类的属性</span></span><br><span class="line">home=<span class="string">"王者峡谷河道下边的草丛"</span>;</span><br><span class="line"><span class="comment">//money=3.0; 父类私有属性无法访问</span></span><br><span class="line">sleep();<span class="comment">//可以执行父类中的非私有方法</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>子类继承父类，默认在子类构造方法中调用父类构造，在创建子类实例对象时，实际上的执行顺序是（父类构造——子类构造）。在类的构造器中还有一段特别的代码，优先与构造器，在创建对象时优先执行，话不多说直接看代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">Z z1 = <span class="keyword">new</span> Z();<span class="comment">//创建子类实例对象时，实际上的执行顺序</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">F</span> </span>{</span><br><span class="line"><span class="keyword">static</span> { </span><br><span class="line"><span class="comment">//静态代码块，只有方法的大括号，没有方法名返回值等任何内容</span></span><br><span class="line">System.out.println(<span class="string">"父类静态代码块"</span>);</span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line"><span class="comment">//构造代码块，只有方法的大括号，没有方法名返回值等任何内容</span></span><br><span class="line">System.out.println(<span class="string">"父类构造代码块"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">F</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 父类构造器</span></span><br><span class="line">System.out.println(<span class="string">"父类构造器"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Z</span> <span class="keyword">extends</span> <span class="title">F</span></span>{</span><br><span class="line"><span class="keyword">static</span> { </span><br><span class="line"><span class="comment">//静态代码块，只有方法的大括号，没有方法名返回值等任何内容</span></span><br><span class="line">System.out.println(<span class="string">"子类静态代码块"</span>);</span><br><span class="line">}</span><br><span class="line">{</span><br><span class="line"><span class="comment">//构造代码块，只有方法的大括号，没有方法名返回值等任何内容</span></span><br><span class="line">System.out.println(<span class="string">"子类构造代码块"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Z</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">// 父类构造器</span></span><br><span class="line">System.out.println(<span class="string">"子类构造器"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">父类静态代码块</span><br><span class="line">子类静态代码块</span><br><span class="line">父类构造代码块</span><br><span class="line">父类构造器</span><br><span class="line">子类构造代码块</span><br><span class="line">子类构造器</span><br></pre></td></tr></tbody></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>面向对象三大特征，封装、继承、多态。从某种意义上来讲，封装和继承几乎就是为了多态而准备的，也是三大特征中最重要的知识点。</p><p>多态的定义：指允许不同类的对象对同一消息做出响应。即同一消息可以根据发送对象的不同而采用多种不同的行为方式。简单来说就是不同类型的对象（父类或子类）调用同一个方法，根据发出调用的对象不同，执行的方法也就不同。</p><p>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p><p>多态的作用：消除类型之间的耦合关系。</p><p>这里举一个简单的小例子：父类是个农民，技能是使用锄头耕地。子类继承了父类，重写了父类的锄头耕地技能，更新换代为使用拖拉机耕地。如果是父类对象调用这个技能，就是使用锄头手动耕地，如果是子类对象调用这个技能，就是使用拖拉机耕地。</p><p>java实现多态有三个必要条件：继承、重写、父类引用指向子类对象。<br>继承：在多态中必须存在有继承关系的子类和父类。<br>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。<br>父类引用指向子类对象（向上转型）：在多态中需要将子类的引用赋给父类对象，只有这样该引用才能够具备技能调用父类的方法和子类的方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{<span class="comment">//人类 作为所有职业的父类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//父类的方法</span></span><br><span class="line">System.out.println(<span class="string">"劳动"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"><span class="comment">//父类引用指向子类对象就是多态性的体现</span></span><br><span class="line">People p1 = <span class="keyword">new</span> Doctor();<span class="comment">// p1的类型是人类类型，但是指向的实例对象是医生</span></span><br><span class="line">p1.work();<span class="comment">//父类引用发出的调用，调用到的是医生类中重写父类的方法</span></span><br><span class="line">People p2 = <span class="keyword">new</span> Teacher();</span><br><span class="line">p2.work();<span class="comment">//父类引用发出的调用，调用到的是教师类中重写父类的方法</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//医生类继承人类，重写工作方法</span></span><br><span class="line">System.out.println(<span class="string">"救死扶伤"</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//教师类继承人类，重写工作方法</span></span><br><span class="line">System.out.println(<span class="string">"教书育人"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">救死扶伤</span><br><span class="line">教书育人</span><br></pre></td></tr></tbody></table></figure><p> 注意：指向子类的父类引用由于向上转型了，它只能访问父类中拥有的方法和属性，而对于子类中存在而父类中不存在的方法，该引用是不能使用的。比如说方法的重载，尽管方法名称相同，但是父类只能调用到子类重写的方法，调用不到重载方法。<br> </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//教师类继承人类，重写work方法</span></span><br><span class="line">System.out.println(<span class="string">"教书育人"</span>);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>{<span class="comment">//重载了work方法，但是此方法父类引用无法调用</span></span><br><span class="line">System.out.println(<span class="string">"负责教导的课程是"</span>+name);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><br>多态的好处：<p></p><p>1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如：医生、律师、程序员都是人类的子类，根据使用场景不同随时可以替换为符合的职业。<br>2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在拥有了医生、律师的继承上，还可以继续添加新的职业，比如主播，运动员等，都是添加为人类的多态性。<br>3.接口性（interface-ability）。多态是超类通过抽象方法，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。每个子类都可以根据自身的特性去重写父类的抽象方法。<br>4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。<br>5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p><p><a href="https://blog.csdn.net/weixin_37942054/article/details/119081228?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164069407816780265482575%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164069407816780265482575&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-5-119081228.pc_search_insert_es_download&amp;utm_term=java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;spm=1018.2226.3001.4187">https://blog.csdn.net/weixin_37942054/article/details/119081228?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164069407816780265482575%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=164069407816780265482575&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-5-119081228.pc_search_insert_es_download&amp;utm_term=java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1&amp;spm=1018.2226.3001.4187</a></p><h2 id="类之间的关系"><a href="#类之间的关系" class="headerlink" title="类之间的关系"></a>类之间的关系</h2><h3 id="继承-1"><a href="#继承-1" class="headerlink" title="继承"></a>继承</h3><h3 id="依赖关系"><a href="#依赖关系" class="headerlink" title="依赖关系"></a>依赖关系</h3><p>在一个类的方法中操作另一个类的对象，则称其依赖于第二个类<br>例如方法的参数时某个类的对象</p><h3 id="关联关系"><a href="#关联关系" class="headerlink" title="关联关系"></a>关联关系</h3><p>体现为一个类中使用另一个类的对象作为该类的成员变量</p><h3 id="聚合关系"><a href="#聚合关系" class="headerlink" title="聚合关系"></a>聚合关系</h3><p>聚合关系是关联关系的一种特例，体现是整体与部分的关系，<br>表现为一个类（整体）由多个其他类的对象（部分）作为该类的成员变量</p><h3 id="组成关系"><a href="#组成关系" class="headerlink" title="组成关系"></a>组成关系</h3><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><h3 id="定义抽象类"><a href="#定义抽象类" class="headerlink" title="定义抽象类"></a>定义抽象类</h3><p>语法格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">访问符 <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>{</span><br><span class="line">访问符 <span class="keyword">abstract</span> 返回类型 方法名（参数列表）</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><p>有抽象方法的类只能被定义为抽象类，但抽象类中可以没有抽象方法<br>抽象类不能被实例化，即无法用new创建一个抽象类的对象<br>抽象类作为子类的模版，避免子类设计的随意性<br>对象不能由抽象类直接创建，只可以通过抽象类派生出新的子类，再由其子类来创建对象<br>abstract 关键字不能用来修饰属性和构造方法<br>抽象方法必须被子类重写才有意义，因此不能用private修饰抽象方法<br>抽象方法,没有方法体</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> call（）； <span class="comment">//抽象方法，没有{}括起来的方法体</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> call（）{}.     <span class="comment">//空方法</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用抽象类"><a href="#使用抽象类" class="headerlink" title="使用抽象类"></a>使用抽象类</h3><p>写一个子类继承抽象类，重写抽象方法<br>虽然不能直接new一个抽象类，但可以先声明一个抽象类变量，再用这个变量指向其子类对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">抽象类名 a;</span><br><span class="line">a = <span class="keyword">new</span> 子类名();</span><br></pre></td></tr></tbody></table></figure><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p>接口规定一批类必须提供某些方法，但不提供实现方法<br>不能用final关键字修饰接口</p><h3 id="接口与类的区别"><a href="#接口与类的区别" class="headerlink" title="接口与类的区别"></a>接口与类的区别</h3><p>接口不能用于实例化对象<br>接口没有构造方法<br>接口中所有方法必须是抽象方法<br>接口中不能包含成员变量，除了static和final变量<br>接口不是被类继承了，而是被类实现了<br>接口支持多重继承</p><h3 id="接口特性"><a href="#接口特性" class="headerlink" title="接口特性"></a>接口特性</h3><p>接口是隐性抽象的，接口中的每个方法也是隐形抽象的，声明时不必使用abstract关键字<br>接口中的属性和方法都是公有的，默认为public,可以不写<br>成员变量被隐含地声明为public static final，属性只能是静态常量<br>接口中的方法被隐形指定为public absrtact<br>接口定义的方法只能是抽象方法，默认方法，类方法<br>接口访问符可以是public或默认，默认是采用包权限访问控制，即在相同包内才可以访问该接口</p><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3><p>用关键字interface定义</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">访问符 <span class="class"><span class="keyword">interface</span> 接口名  </span>{</span><br><span class="line"><span class="comment">//接口定义的只能是静态常量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口定义的普通方法只能是public的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//接口中定义默认方法，用default修饰</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> b)</span></span>{}</span><br><span class="line"><span class="comment">//接口中定义类方法，用static修饰</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h3><p>用implements实现接口<br>一个类可实现多个接口，且必须实现接口中定义的所有抽象方法，否则该类必须定义为抽象类<br>语法格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">访问符 <span class="class"><span class="keyword">class</span> <span class="keyword">implements</span> 接口1，接口2</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span></span>{</span><br><span class="line"><span class="comment">//先声明一个接口类型的变量，new一个该接口实现类的实例对象，并将其引用赋值给变量</span></span><br><span class="line">接口名 变量名 = <span class="keyword">new</span> 接口实现类（）;</span><br><span class="line"><span class="comment">//调用接口的默认方法，必须通过实例对象来调用</span></span><br><span class="line">变量名.默认方法（）;</span><br><span class="line"><span class="comment">//调用接口的类方法</span></span><br><span class="line">接口名.类方法（）;</span><br><span class="line"><span class="comment">//声明接口实现类的变量，并实例化该类型对象</span></span><br><span class="line">接口实现类名 变量名 = <span class="keyword">new</span> 接口实现类名（）;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="接口的继承"><a href="#接口的继承" class="headerlink" title="接口的继承"></a>接口的继承</h3><p>接口可以继承多个接口，不能继承类<br>使用interface可以声明一个接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>属性只能是常量</p><p>一个类可以实现多个interface，例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span>, <span class="title">Hello</span> </span>{ <span class="comment">// 实现了两个interface</span></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="核心类"><a href="#核心类" class="headerlink" title="核心类"></a>核心类</h2><h3 id="字符串类"><a href="#字符串类" class="headerlink" title="字符串类"></a>字符串类</h3><p>每个用双引号括起来的字符串都是String类的一个实例</p><h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>java允许在一个类的类体里再定义一个类，该情况下外面的类叫外部类，里面的叫内部类<br>内部类可以访问其所在内部类的所有属性</p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>在外部类的内部定义一个类</p><h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><h4 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h4><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>final class就不能被别的类继承</p><h1 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h1><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>1、java源程序在控制台环境下编译和运行的命令是什么？编译之后生成了什么文件？<br>编译Javac name.java  生成.class文件<br>运行Java name </p><p>2．Java的数据类型分为哪几种？请列举出8个Java的基本数据类型。<br>   byte  short int long double float<br>     char<br>     boolean</p><ol start="3"><li>继承的主要作用是什么？如何使用一个子类继承一个父类？<br>通过继承，子类可以使用父类的非私有属性和非私有方法，从而提高代码重用性，提高开发效率</li></ol><p>4、continue的功能是什么？break的功能是什么？两者的区别？<br>continue跳出本次循环，直接执行下一次循环<br>break直接跳出本层循环</p><ol start="5"><li>toString 方法的功能是什么？如何使用toString 来实现方法重写？<br>toString()将对象的内容转换为字符串<br>当需要将一个对象输出到显示器时,通常要调用他的toString()方法,将对象的内容转换为字符串.java中的所有类默认都有一个toString()方法</li></ol><p>默认情况下 System.out.println(对象名)或者System.out.println(对象名.toString())输出的是此对象的类名和此对象对应内存的首地址 如果想自定义输出信息必须重写toString()方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*注意事项</span></span><br><span class="line"><span class="comment">1.必须被声明为public</span></span><br><span class="line"><span class="comment">2.返回类型为String</span></span><br><span class="line"><span class="comment">3.方法的名称必须为toString,且无参数</span></span><br><span class="line"><span class="comment">4.方法体中不要使用输出方法System.out.println()</span></span><br><span class="line"><span class="comment">语法格式为*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>{      }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>6、构造方法的作用是什么？<br>在创建对象时，初始化对象的属性</p><ol start="7"><li>什么是抽象方法？什么是抽象类？<br>抽象类就是不能使用new方法进行实例化的类，即没有具体实例对象的类<br>抽象方法：抽象方法就是以abstract修饰的方法，这种方法只声明返回的数据类型，方法名称和所需要的参数，没有方法体，这个方法必须被子类的方法所重写</li></ol><p>8  什么是类间的依赖关系？什么是类的关联关系？什么是类的聚合关系？什么是类的组成关系？<br> 依赖关系<br>在一个类的方法中操作另一个类的对象，则称其依赖于第二个类<br>例如方法的参数时某个类的对象</p><p>关联关系体现为一个类中使用另一个类的对象作为该类的成员变量</p><p>聚合关系是关联关系的一种特例，表现为一个类（整体）由多个其他类的对象（部分）作为该类的成员变量</p><ol start="9"><li><p> super关键字的主要作用是什么？<br>对于有继承关系的类，子类可以通过这个关键字调用父类中的方法<br>写法，即 super（构造方法名），而且必须是这个构造方法的第一句。<br>在子类的构造方法中调用父类的构造方法<br>在子类方法访问父类的属性和方法</p></li><li><p>this代表什么？this大部分情况下是可以省略的，请说明什么时候不能省略this。<br>this是一个变量，保存了当前对象的内存地址，指向这个对象自身。this代表的就是 “当前对象”<br>在实例方法或者构造方法当中，为了区分同名的局部变量和实例变量，this不能省略</p></li><li><p>Java中包含哪几种内部类？什么是成员内部类？什么是局部内部类？什么是最终类？<br>包含：成员内部类、局部内部类、静态内部类、匿名内部类<br>成员内部类：在“外部类”的内部定义一个类，作为一个成员存在，与外部类的属性、方法并列<br>局部内部类：在方法中定义的内部类称为局部内部类，不仅可以访问包含它的外部类成员，还可以访问局部变量<br>最终类：最终类有final关键字修饰，最终类不可被继承</p></li><li><p>什么是类？类里面包含什么？什么是对象？两者之间的区别是什么？<br>类：类是具有相同属性和方法的一组对象的集合<br>类包含字段和方法<br>对象：对象是一具体事物<br>区别：对象是类的一个实例，拥有类定义的属性和方法</p></li><li><p>java中有哪几种注释？分别用什么符号表示？<br>单行注释：//<br>多行注释：从“/<em>”开始到“</em>/”结束，<br>文档注释：从“/*<em>”开始到“</em>/”结束<br>文档注释可以用javadoc命令提取出来，生成类似于jdk文档的网页文件，以便于他人了解一个类的功能。</p></li><li><p>什么是缺省构造器？它的作用是什么？缺省构造器什么时候无法产生作用？<br>如果一个类没有定义构造方法，编译器会自动创建一个缺省构造器<br>作用在创建对象时初始化对象的属性<br>如果你已经定义了一个无参构造方法，</p></li><li><p>public、private、protected三个访问控制符代表了不同的访问级别，请分别进行说明。<br>public公共访问权限，可被同一包或不同包的所有类访问<br>protected子类访问权限，可以被同一包的其它类访问，也可以被其他包的子类访问<br>friendly包访问权限，如果没设置访问符则默认friendly包访问权限，可被同一包中所有类访问<br>private 当前类访问权限，只能被当前类的其它成员访问</p></li></ol><ol start="17"><li><p>什么是多态？多态在代码中的表现形式是什么？多态的作用？<br>同一个对象在不同阶段，多种状态<br>表现形式：继承、重写、父类引用指向子类对象<br>作用：可以将子类对象直接赋值给一个父类引用变量，无须任何类型转换</p></li><li><p>一个”.java”源文件中是否可以包括多个类(不是内部类)?有什么限制?<br>可以，但只能有一个public类，并且public的类名必须和文件名一致</p></li><li><p>final关键字的主要作用是什么？<br>被final关键字修饰的类不能被继承，被final关键字修饰的类属性和类方法不能被覆盖（重写）；</p></li><li><p>什么是接口？接口如何定义？接口中能够包含哪些方法？接口和类在继承方面的区别。<br>接口可以定义抽象方法，默认方法，类方法<br>接口可以多继承，即一个接口可以继承多个接口<br>类只能单继承，一个子类只能有一个直接父类</p></li><li><p>什么是方法重载？什么是方法重写？两者的区别？<br>方法重载是指在同一个类中定义多个同名的方法，但要求每个方法具有不同的参数类型或者参数个数<br>方法重写是指在子类创建一个与父类中除了方法体的实现不同外，其它都相同的方法，以便实现不同于父类的功能</p><h2 id="判断一个变量的数据是奇数还是偶数"><a href="#判断一个变量的数据是奇数还是偶数" class="headerlink" title="判断一个变量的数据是奇数还是偶数"></a>判断一个变量的数据是奇数还是偶数</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">judgeNum(<span class="number">2</span>);</span><br><span class="line">judgeNum(<span class="number">3</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 判断是奇数还是偶数的方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> num</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">judgeNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line"><span class="keyword">if</span>(num % <span class="number">2</span> == <span class="number">0</span>) {</span><br><span class="line">System.out.println(num + <span class="string">"是偶数"</span>);</span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">System.out.println(num + <span class="string">"是奇数"</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="计算-1000-以内不能被-7-整除的整数之和。"><a href="#计算-1000-以内不能被-7-整除的整数之和。" class="headerlink" title="计算 1000 以内不能被 7 整除的整数之和。"></a>计算 1000 以内不能被 7 整除的整数之和。</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000</span>;i++){</span><br><span class="line">            <span class="keyword">if</span>((i%<span class="number">7</span>)!=<span class="number">0</span>){</span><br><span class="line">                s=s+i;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="计算-1-2-3-4-5-…-100-的结果。"><a href="#计算-1-2-3-4-5-…-100-的结果。" class="headerlink" title="计算 1+2-3+4-5+…+100 的结果。"></a>计算 1+2-3+4-5+…+100 的结果。</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method03</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> res = getSum();</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    返回值类型: int</span></span><br><span class="line"><span class="comment">    方法名称： getSum</span></span><br><span class="line"><span class="comment">    参数列表：</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) {</span><br><span class="line">            sum += i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><h2 id="定义一个方法，计算某个整数的阶乘。"><a href="#定义一个方法，计算某个整数的阶乘。" class="headerlink" title="定义一个方法，计算某个整数的阶乘。"></a>定义一个方法，计算某个整数的阶乘。</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Method04</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> res = jieCheng(<span class="number">5</span>);</span><br><span class="line">        System.out.println(res);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">jieCheng</span><span class="params">(<span class="keyword">int</span> num)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = num; i &gt; <span class="number">1</span>; i--) {</span><br><span class="line">            result *= i;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="定义一个方法，判断某个整数是否为质数。（质数是指大于-1-的自然数中，除了-1-和它"><a href="#定义一个方法，判断某个整数是否为质数。（质数是指大于-1-的自然数中，除了-1-和它" class="headerlink" title="定义一个方法，判断某个整数是否为质数。（质数是指大于 1 的自然数中，除了 1 和它"></a>定义一个方法，判断某个整数是否为质数。（质数是指大于 1 的自然数中，除了 1 和它</h2><p>本身之外不再有其它因数的自然数。） </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(prime(<span class="number">3</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">prime</span><span class="params">(<span class="keyword">int</span> n)</span> </span>{</span><br><span class="line">        <span class="comment">//先判断小于0的</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span> || n == <span class="number">2</span>) {</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="keyword">int</span> a = (<span class="keyword">int</span>) Math.sqrt(n);</span><br><span class="line">            <span class="comment">//如9%3=0 他除了1合本身还有别的数</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= a; i++) {</span><br><span class="line">                <span class="keyword">if</span> (n % i == <span class="number">0</span>) {</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="小红的妈妈每天都会给她-2-5-元钱，她都会存起来。但是，如果这一天是存钱的第-5-天"><a href="#小红的妈妈每天都会给她-2-5-元钱，她都会存起来。但是，如果这一天是存钱的第-5-天" class="headerlink" title="小红的妈妈每天都会给她 2.5 元钱，她都会存起来。但是，如果这一天是存钱的第 5 天"></a>小红的妈妈每天都会给她 2.5 元钱，她都会存起来。但是，如果这一天是存钱的第 5 天</h2><p>或者是 5 的倍数的话，她都会花去 6 元。请问：经过多少天，小红才可以存到 100 元钱。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiTi5</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>{</span><br><span class="line">        <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;;i++){</span><br><span class="line">            sum = <span class="number">2.5</span> + sum;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">5</span>==<span class="number">0</span>){</span><br><span class="line">                sum = sum-<span class="number">6</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">if</span>(sum&gt;=<span class="number">100</span>){</span><br><span class="line">                System.out.println(<span class="string">"经过"</span>+i+<span class="string">"天可以存到100元钱"</span>+<span class="string">","</span>+<span class="string">"钱的总数是"</span>+sum+<span class="string">"元"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="水仙花数"><a href="#水仙花数" class="headerlink" title="水仙花数"></a>水仙花数</h2><p>一个数如果是一个三位数，并且它的十位、个位、百位的数字立方和等于它本身，这个<br>数就叫做水仙花数。例如：371 = 3 的立方+7 的立方+1 的立方。 请求出所有水仙花数。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiTi6</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> a,b,c,s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">100</span>;i&lt;<span class="number">1000</span>;i++)</span><br><span class="line">        {</span><br><span class="line">            c=i%<span class="number">10</span>;</span><br><span class="line">            b=(i/<span class="number">10</span>)%<span class="number">10</span>;</span><br><span class="line">            a=i/<span class="number">100</span>;</span><br><span class="line">            <span class="keyword">if</span>(Math.pow(a,<span class="number">3</span>)+Math.pow(b,<span class="number">3</span>)+Math.pow(c,<span class="number">3</span>)==i)</span><br><span class="line">            {</span><br><span class="line">                System.out.print(<span class="string">" "</span>+i);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="求出数组中的最大值"><a href="#求出数组中的最大值" class="headerlink" title="求出数组中的最大值"></a>求出数组中的最大值</h2><p>[5, 15, 30, 20, 1000] </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array03</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] array = {<span class="number">5</span>, <span class="number">15</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="number">1000</span>};</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> max;</span><br><span class="line">        max = array[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) {</span><br><span class="line">            <span class="keyword">if</span>(array[i] &gt; max) {</span><br><span class="line">                max = array[i];</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"max:"</span> + max);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数组元素反转"><a href="#数组元素反转" class="headerlink" title="数组元素反转"></a>数组元素反转</h2><p>本来：[10, 30, 20, 40, 50]<br>结果：[50，40, 20, 30, 10]<br>要求不能使用新数组，就用原来的唯一一个数组。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Array04</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span>[] array = {<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>};</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历打印数组本来的样子</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        初始化语句： int min = 0, max = array.length - 1;</span></span><br><span class="line"><span class="comment">        条件判断： min &lt; max</span></span><br><span class="line"><span class="comment">        步进表达式： min++, max--</span></span><br><span class="line"><span class="comment">        循环体：交换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> min = <span class="number">0</span>, max = array.length - <span class="number">1</span>; min &lt; max; min++, max--) {</span><br><span class="line">            <span class="comment">//交换</span></span><br><span class="line">            <span class="keyword">int</span> temp = array[min];</span><br><span class="line">            array[min] = array[max];</span><br><span class="line">            array[max] = temp;</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) {</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="对象数组"><a href="#对象数组" class="headerlink" title="对象数组"></a>对象数组</h2><p>定义一个数组，用来存储 3 个 Person 类的对象<br>break &amp; continue </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//属性 == 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTe</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">//首先创建一个长度为3的数组，用来存放Person类型的对象</span></span><br><span class="line">        Person[] array = <span class="keyword">new</span> Person[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">        System.out.println(array[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建3个对象</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"ZhangSan"</span>, <span class="number">18</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"ZhangSa"</span>, <span class="number">19</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"Zhang"</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        array[<span class="number">0</span>] = p1;</span><br><span class="line">        array[<span class="number">1</span>] = p2;</span><br><span class="line">        array[<span class="number">2</span>] = p3;</span><br><span class="line"></span><br><span class="line">        System.out.println(array[<span class="number">1</span>].getName());</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Person01 p1 = <span class="keyword">new</span> Person01();</span><br><span class="line">        p1.name = <span class="string">"ZhangSan"</span>;</span><br><span class="line"></span><br><span class="line">        p1.sayHello(<span class="string">"Lisi"</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person01</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayHello</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        System.out.println(name + <span class="string">" , hello, I am "</span> + <span class="keyword">this</span>.name);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="实现一个-student-类"><a href="#实现一个-student-类" class="headerlink" title="实现一个 student 类"></a>实现一个 student 类</h2><p>包含属性：name age address zipCode<br>要求：全部属性都私有化，并提供相应的 get/set 方法以及无参构造方法和有参构造方法。<br>并为该类添加一个方法，返回 student 对象的地址和邮编。<br>最后编写测试类，返回自己的地址邮编。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> String zipcode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态变量：类级别</span></span><br><span class="line">    <span class="keyword">static</span> String job = <span class="string">"study"</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span></span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String address, String zipcode)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.zipcode = zipcode;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回地址和邮编</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPostAddress</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"地址："</span> + <span class="keyword">this</span>.address + <span class="string">" , 邮编："</span> + <span class="keyword">this</span>.zipcode;</span><br><span class="line">        <span class="comment">//return "地址：" + this.g + " , 邮编：" + this.zipcode;</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"is studying."</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testStatic</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"static"</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getter and setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        s1.setName(<span class="string">"XiaoMei"</span>);</span><br><span class="line">        s1.setAge(<span class="number">20</span>);</span><br><span class="line">        System.out.println(s1.getName() + <span class="string">","</span> + s1.getAge());</span><br><span class="line"></span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"XiaoMing"</span>, <span class="number">18</span>, <span class="string">"佛山"</span>, <span class="string">"374893748"</span>);</span><br><span class="line">        System.out.println(s2.getPostAddress());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="实现一个日期类，表示年月日信息。"><a href="#实现一个日期类，表示年月日信息。" class="headerlink" title="实现一个日期类，表示年月日信息。"></a>实现一个日期类，表示年月日信息。</h2><p>要求：全部属性都私有化，并提供相应的 get/set 方法以及无参构造方法和有参构造方法。<br>如果调用无参构造方法，默认创建的日期为 1970 年 1 月 1 号。并为该类添加一个可以打印<br>日期的方法。最后编写测试类输出 2022 年 1 月 1 日。 </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Date</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> day;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.year = <span class="number">1999</span>;</span><br><span class="line">        <span class="keyword">this</span>.month = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">this</span>.day = <span class="number">1</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">int</span> year, <span class="keyword">int</span> month, <span class="keyword">int</span> day)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">        <span class="keyword">this</span>.month = month;</span><br><span class="line">        <span class="keyword">this</span>.day = day;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setYear</span><span class="params">(<span class="keyword">int</span> year)</span> </span>{</span><br><span class="line">        <span class="comment">//设立关卡</span></span><br><span class="line">        <span class="keyword">this</span>.year = year;</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> year;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印的日期方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDate</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//System.out.println(this.year + "年" + this.month + "月" + this.day + "日");</span></span><br><span class="line">        <span class="comment">//System.out.println(year + "年" + month + "月" + day + "日");</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getYear() + <span class="string">"年"</span> + <span class="keyword">this</span>.month + <span class="string">"月"</span> + <span class="keyword">this</span>.day + <span class="string">"日"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date();</span><br><span class="line">        d1.printDate();</span><br><span class="line"></span><br><span class="line">        Date d2 = <span class="keyword">new</span> Date(<span class="number">2021</span>, <span class="number">11</span>, <span class="number">16</span>);</span><br><span class="line">        <span class="comment">//System.out.println(d2.printDate());</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>继承和方法覆盖： </p><h2 id="实现说话"><a href="#实现说话" class="headerlink" title="实现说话"></a>实现说话</h2><p>中国人说中文，输出 小美说中文<br>美国人说英文， 输出 jack 说英文<br>（要求用多态实现）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonTest</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Chinese chinese = <span class="keyword">new</span> Chinese();</span><br><span class="line">        chinese.setName(<span class="string">"XiaoMei"</span>);</span><br><span class="line">        chinese.speak();</span><br><span class="line"></span><br><span class="line">        American american = <span class="keyword">new</span> American();</span><br><span class="line">        american.setName(<span class="string">"Jack"</span>);</span><br><span class="line">        american.speak();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>{}</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//setter and getter</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//speak</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(name + <span class="string">" is speaking..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" is speaking Chinese."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">American</span> <span class="keyword">extends</span> <span class="title">Person</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName() + <span class="string">" is speaking English."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line">## <span class="number">1</span>、编写程序模拟 主人 喂养 宠物 的场景。 </span><br><span class="line">主人养了一只狗作为宠物， </span><br><span class="line">主人会喂狗，只要主人喂狗，狗就吃 </span><br><span class="line">最后输出：主人喂了食物，狗吃的很香 </span><br><span class="line">过了一段时间，主人又养了一个新的宠物：猫咪 </span><br><span class="line">最后输出：主人喂了食物，猫吃的很香 </span><br><span class="line">```java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Testfeed</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        <span class="comment">//创建一个宠物对象</span></span><br><span class="line">        Pet pet = <span class="keyword">new</span> Pet();</span><br><span class="line">        <span class="comment">//创建一个狗对象</span></span><br><span class="line">        Dog dog = <span class="keyword">new</span> Dog();</span><br><span class="line">        <span class="comment">//创建一个主人对象</span></span><br><span class="line">        Master master = <span class="keyword">new</span> Master();</span><br><span class="line">        <span class="comment">//调用主人投喂方法</span></span><br><span class="line">        master.feed(dog);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>{<span class="comment">//创建宠物类让其它类都继承他</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{<span class="comment">//创建宠物吃方法</span></span><br><span class="line">        System.out.println(<span class="string">"动物在吃"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Pet</span>//创建狗类</span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{<span class="comment">//覆盖父类吃方法对吃方法重写</span></span><br><span class="line">        System.out.println(<span class="string">"狗在吃"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Pet</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"猫在吃"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YingWu</span> <span class="keyword">extends</span> <span class="title">Pet</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"鹦鹉在吃"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Master</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">feed</span><span class="params">(Pet p)</span></span>{<span class="comment">//此处实际上是 Pet p = new Dog();此处涉及到父类引用指向子类对象，即多态</span></span><br><span class="line">        p.eat();<span class="comment">//调用父类吃方法，此处为编译器识别通过，具体调用哪个子类的吃方法还要看动态绑定的那个子类是啥</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="2、编写程序实现乐手弹奏乐器，可以弹奏不同的乐器从而发出不同的声音。"><a href="#2、编写程序实现乐手弹奏乐器，可以弹奏不同的乐器从而发出不同的声音。" class="headerlink" title="2、编写程序实现乐手弹奏乐器，可以弹奏不同的乐器从而发出不同的声音。"></a>2、编写程序实现乐手弹奏乐器，可以弹奏不同的乐器从而发出不同的声音。</h2><p>乐器包括：二胡、钢琴和琵琶<br>实现乐器类 Instrument, 包括方法 makeSound()<br>通过测试类，让乐手弹奏不同的乐器<br>参考代码： </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Instrument instrument)</span></span>{ </span><br><span class="line">instrument.makeSound() </span><br><span class="line">}</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMusic</span> </span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        Musician m = <span class="keyword">new</span> Musician();</span><br><span class="line">        Violin v = <span class="keyword">new</span> Violin();</span><br><span class="line">        m.play(v);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//乐器类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Instrument</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"乐器发声"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//二胡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Erhu</span> <span class="keyword">extends</span> <span class="title">Instrument</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"二胡在拉"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="comment">//钢琴</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piano</span> <span class="keyword">extends</span> <span class="title">Instrument</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"弹钢琴"</span>);</span><br><span class="line">    }    </span><br><span class="line">}</span><br><span class="line"><span class="comment">//小提琴</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Violin</span> <span class="keyword">extends</span> <span class="title">Instrument</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSound</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"拉小题琴"</span>);</span><br><span class="line">    }    </span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(Instrument i)</span></span>{</span><br><span class="line">        i.makeSound();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 接口：（要求用多态实现） </p><h2 id="1、创建一个用于描述汽车的接口"><a href="#1、创建一个用于描述汽车的接口" class="headerlink" title="1、创建一个用于描述汽车的接口"></a>1、创建一个用于描述汽车的接口</h2><p>行驶、刹车、鸣笛都继承该接口并且实现具体功能，<br>测试类进行测试。<br>汽车行驶中<br>汽车鸣笛嘀嘀嘀<br>汽车刹车声！ </p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Car car = <span class="keyword">new</span> MingDi();</span><br><span class="line">        car.action();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MingDi</span> <span class="keyword">implements</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">action</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"汽车鸣笛嘀嘀嘀！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="2、实现：中午去饭馆吃饭顾客-点菜"><a href="#2、实现：中午去饭馆吃饭顾客-点菜" class="headerlink" title="2、实现：中午去饭馆吃饭顾客 点菜"></a>2、实现：中午去饭馆吃饭顾客 点菜</h2><p>菜（菜单）是接口<br>厨师 做菜<br>厨师负责实现这个接口<br>顾客负责调用这个接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Menu</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">yuXiang</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cook</span> <span class="keyword">implements</span> <span class="title">Menu</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">yuXiang</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"yuXiang"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>{</span><br><span class="line"></span><br><span class="line">    Menu menu;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">()</span></span>{</span><br><span class="line">        menu.yuXiang();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git和github</title>
      <link href="/2021/11205629.html"/>
      <url>/2021/11205629.html</url>
      
        <content type="html"><![CDATA[<h1 id="git使用"><a href="#git使用" class="headerlink" title="git使用"></a>git使用</h1><p>Git是一个分布式代码管理工具，可以在本地提交，不需要依赖网络，并且会将每次提交自动备份到本地。每个开发者都可以把远程仓库clone一份到本地，并会把提交历史一并拿过来。</p><a class="btn-beautify button--animated " href="https://git-scm.com/downloads" title="官网下载"><i class="larger"></i><span>官网下载</span></a><p>按照安装向导来安装Git，相关参数勾选为默认即可</p><p>安装完成后，右键菜单栏会出现Git GUI和Git Bash</p><h2 id="git基本操作命令"><a href="#git基本操作命令" class="headerlink" title="git基本操作命令"></a>git基本操作命令</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  #查看系统配置</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="git设置http全局代理"><a href="#git设置http全局代理" class="headerlink" title="git设置http全局代理"></a>git设置http全局代理</h2><p>由于国内访问github困难，在克隆Github仓库时，git无法连接GitHub。因此需要git设置http全局代理</p><p>将下方命令的端口填入clash的端口7890,并在命令行中输入，git即可顺利连接GitHub</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git设置全局http代理和https代理</span></span><br><span class="line">git config --global http.proxy 127.0.0.1:端口</span><br><span class="line">git config --global https.proxy 127.0.0.1:端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">取消这两个全局代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></tbody></table></figure><h2 id="在vscode使用git"><a href="#在vscode使用git" class="headerlink" title="在vscode使用git"></a>在vscode使用git</h2><p><strong>git-commit-plugin</strong>：自动生成规范 git 提交信息的插件。</p><p>使用组合键 ctrl + Shift + P 呼出 指令行，并键入指令 show git commit template 或者点击 git 插件栏上的小图标唤醒插件界面。</p><p><strong>GitLens</strong> 增强了VS Code 中的 Git，并解锁了每个存储库中未开发的知识。它可以帮助您通过 Git 责备注释和 CodeLens直观地可视化代码作者身份，无缝导航和探索Git 存储库，通过丰富的可视化和强大的比较命令获得有价值的见解等等。 </p><h2 id="git工作区域"><a href="#git工作区域" class="headerlink" title="git工作区域"></a>git工作区域</h2><p>Git有四个工作区域</p><p>工作区（Working Directory)：就是你平时存放项目代码的地方</p><p>暂存区(Stage/Index)：用于临时存放你的改动，事实上是一个保存即将提交到文件列表信息的文件</p><p>仓库区或本地仓库(Repository或Git Directory)：就是安全存放数据的位置，这里面有你提交到所有版本的数据，其中HEAD指向最新放入仓库的版本</p><p>远程仓库(Remote Directory)：托管代码的服务器</p><p><img src="https://cdn.jsdelivr.net/gh/wenkexia/image@main/img/1646480472830Quicker_20220305_193151.png"></p><h2 id="git的工作流程"><a href="#git的工作流程" class="headerlink" title="git的工作流程"></a>git的工作流程</h2><p>git管理的文件有三种状态：已修改（modified）、已暂存（staged）、已提交（committed）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看指定文件状态</span></span><br><span class="line">git status [filename]</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看所有文件状态</span></span><br><span class="line">git status</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git add .   <span class="comment">#暂存当前分支所有本地修改的文件</span></span><br><span class="line">git commit -m <span class="string">'logs'</span> <span class="comment">#提交暂存区到本地git仓库中 logs：本次修改的描述</span></span><br><span class="line">git pull  </span><br><span class="line">git push origin 分支    <span class="comment">#将本地修改内容提交至远程</span></span><br></pre></td></tr></tbody></table></figure><p><strong>git push命令详解</strong></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</span></span><br><span class="line">git pull origin master:brantest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span></span><br><span class="line">git pull origin master</span><br></pre></td></tr></tbody></table></figure><h2 id="忽略文件"><a href="#忽略文件" class="headerlink" title="忽略文件"></a>忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><p>1.忽略文件中的空行或以井号(#)开始的行将会被忽略。<br>2.可以使用Liux通配符。例如：星号(*)代表任意多个字符，问号(？)代表一个字符，方括号([abc])代表可选字符范围，<br>大括号({string1,string2})代表可选的字符串等。<br>3.如果名称的最前面有一个感叹号(！)，表示例外规则，将不被忽略。<br>4.如果名称的最前面是一个路径分隔符(/)，表示要忽略的文件在此目录下，而子目录中的文件不忽略。<br>5.如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><h2 id="git-bash快捷键"><a href="#git-bash快捷键" class="headerlink" title="git bash快捷键"></a>git bash快捷键</h2><p> 复制 ctrl + insert<br> 粘贴 shift + insert</p><h1 id="github使用"><a href="#github使用" class="headerlink" title="github使用"></a>github使用</h1><p><a href="https://docs.github.com/cn">github文档</a><br><a href="https://www.w3cschool.cn/githubcn/">GitHub 中文教程</a></p><h2 id="键盘快捷键"><a href="#键盘快捷键" class="headerlink" title="键盘快捷键"></a>键盘快捷键</h2><p>shift + ？:查看快捷键<br>. ： 打开网络编辑器</p><h2 id="GitHub鏡像站"><a href="#GitHub鏡像站" class="headerlink" title="GitHub鏡像站"></a>GitHub鏡像站</h2><p><a href="https://www.library.ac.cn/">https://www.library.ac.cn/</a><br><a href="https://hub.fastgit.xyz/">https://hub.fastgit.xyz/</a><br><a href="https://raw.hellogithub.com/">https://raw.hellogithub.com/</a><br><a href="https://hub.gitfast.tk/">https://hub.gitfast.tk</a><br><a href="https://hub.gitslow.tk/">https://hub.gitslow.tk</a><br><a href="https://hub.verge.tk/">https://hub.verge.tk</a><br><a href="https://raw.gitfast.tk/">https://raw.gitfast.tk</a><br><a href="https://raw.gitslow.tk/">https://raw.gitslow.tk</a><br><a href="https://raw.verge.tk/">https://raw.verge.tk</a></p><h2 id="GitHub加速下载"><a href="#GitHub加速下载" class="headerlink" title="GitHub加速下载"></a>GitHub加速下载</h2><p><a href="https://hub.fastgit.org/">https://hub.fastgit.org/</a><br><a href="https://ghproxy.com/">https://ghproxy.com/</a></p><h2 id="加速访问GitHub"><a href="#加速访问GitHub" class="headerlink" title="加速访问GitHub"></a>加速访问GitHub</h2><p><a href="https://mp.weixin.qq.com/s/ykN7Swxvbl-PinwrssHiOQ">参考文章</a><br><a href="https://mp.weixin.qq.com/s/C5XUgzL3_KGIga2X-LHJuw">参考</a><br><a href="https://zhuanlan.zhihu.com/p/364453651">https://zhuanlan.zhihu.com/p/364453651</a></p><h3 id="修改本地hosts"><a href="#修改本地hosts" class="headerlink" title="修改本地hosts"></a>修改本地hosts</h3><ul><li>DNS能帮你在访问域名的时候查到实际的IP地址<br>Github 在全球各地都有服务器，而在国内，DNS解析服务基本上都是把域名解析到了美国的服务器，所以访问起来会比较慢<br>但我们可以通过修改本地 hosts 文件来绕过公共DNS解析，直接访问 Github 在韩国、日本等的服务器，从而达到加速访问的目的</li><li>hosts 文件就相当于本地通讯录，你的通讯录里面记了公司的电话。</li></ul><p>1.打开本地host文件<br>C:\Windows\System32\drivers\etc<br>在这个项目<a href="https://github.com/521xueweihan/GitHub520">https://github.com/521xueweihan/GitHub520</a><br>复制添加内容到本地host<br>2.更新DNS缓存  </p><h4 id="SwitchHosts"><a href="#SwitchHosts" class="headerlink" title="SwitchHosts"></a>SwitchHosts</h4><p>1.这个工具来实现自动更新 hosts 中的IP地址<br>2.我们先到 SwitchHosts 官网下载这款管理工具：<a href="https://swh.app/zh/">https://swh.app/zh/</a><br>3.下载安装好SwitchHosts之后标题随意取，URL地址填这个：<a href="https://raw.hellogithub.com/hosts">https://raw.hellogithub.com/hosts</a><br>4.自动刷新最好建议选1小时<br>5.点击确认后，还要手动启用一下，接着稍等片刻本地 hosts 即会更新</p><h4 id="UsbEAm-Hosts-Editor"><a href="#UsbEAm-Hosts-Editor" class="headerlink" title="UsbEAm Hosts Editor"></a>UsbEAm Hosts Editor</h4><p><a href="https://www.dogfight360.com/blog/475/">羽翼城博客下载</a></p><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h4 id="steamcommunity-302（WIN）"><a href="#steamcommunity-302（WIN）" class="headerlink" title="steamcommunity 302（WIN）"></a>steamcommunity 302（WIN）</h4><p>羽翼城大佬后来又开发的 steamcommunity 302 就是通过反代来加速访问 Github 等网站</p><p>软件可以到这里下载：<a href="https://www.dogfight360.com/blog/686/">https://www.dogfight360.com/blog/686/</a><br>比较棘手的是可能会出现80／443端口被占用的情况，这个需要关闭对应监听端口的进程／服务来解决，具体教程可见羽翼城大佬在下载页面做出的说明</p><h4 id="FastGithub（WIN／Mac／Linux）"><a href="#FastGithub（WIN／Mac／Linux）" class="headerlink" title="FastGithub（WIN／Mac／Linux）"></a>FastGithub（WIN／Mac／Linux）</h4><p>FastGithub 则是另一款同样基于反代来加速 Gtihub 访问的工具，支持WIN／Mac／Linux三端，还能在docker上一键部署：<br>  FastGithub 除了可以加速访问 Gtihub ，最大的优势是它顺便还能助你直连V2EX<br>  提供域名的纯净IP解析；<br>  提供IP测速并选择最快的IP；<br>  提供域名的tls连接自定义配置；<br>  Google的CDN资源替换，解决大量国外网站无法加载js和css的问题；</p><p><a href="https://github.com/dotnetcore/FastGithub">https://github.com/dotnetcore/FastGithub</a><br>清华网盘：<a href="https://cloud.tsinghua.edu.cn/d/df482a15afb64dfeaff8/">https://cloud.tsinghua.edu.cn/d/df482a15afb64dfeaff8/</a></p><p>Windows端的话，下载后双击即可运行</p><h4 id="dev-sidecar（WIN／Mac／Ubuntu／Linux）"><a href="#dev-sidecar（WIN／Mac／Ubuntu／Linux）" class="headerlink" title="dev-sidecar（WIN／Mac／Ubuntu／Linux）"></a>dev-sidecar（WIN／Mac／Ubuntu／Linux）</h4><p>dev-sidecar 这个项目命名取自service-mesh的service-sidecar，意为为开发者打辅助的边车工具，主要就是用于解决 Github 访问的问题：<br><a href="https://gitee.com/docmirror/dev-sidecar">https://gitee.com/docmirror/dev-sidecar</a></p><p>下载后首次运行前会需要让你安装过一个证书，跟着教程安装即可</p><h3 id="加速软件"><a href="#加速软件" class="headerlink" title="加速软件"></a>加速软件</h3><p>Steam++（WIN／Mac／Linux／Android）<br>比较稳定的长期可用加速软件Steam++：<a href="https://steampp.net/">https://steampp.net/</a></p><p>这个原本主要是用于加速访问Steam相关网站、社区的</p><p>但软件开发到后面，现在已经支持加速诸多平台了<br>目前支持以下平台的加速：<br>  Steam<br>  Discord<br>  Twitch<br>  Origin<br>  Uplay<br>  国外验证码平台：Google Recaptcha、hCaptcha、Arkoselabs<br>  Github<br>  Microsoft Store<br>  网盘服务：OneDrive、MEGA、Dropbox<br>  其他网站：Nyaa、Pinteres、P站、V2EX等</p><h2 id="项目推荐"><a href="#项目推荐" class="headerlink" title="项目推荐"></a>项目推荐</h2><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h3><p>GitHub 开源项目star列表：<a href="https://github.com/jimbrig/jimsghstars">https://github.com/jimbrig/jimsghstars</a></p><p>资源和使用技巧分享的GitHub列表：<a href="https://github.com/jayboxyz/websites-and-tools">https://github.com/jayboxyz/websites-and-tools</a></p><p>1Awsome_Windows Windows应用推荐列表<br>2.ChromeAppHeroes 为优秀的Chrome插件写一本中文说明书，扩展收集列表<br>3.papirus-icon-theme Papirus icon theme for Linux<br>4.HelloGitHub 分享 GitHub 上有趣、入门级的开源项目<br>5.Best-websites-a-programmer-should-visit-zh 程序员应该访问的最佳网站中文版<br>6.awesome 从GitHub上精选的开源项目，一份很棒的列表<br>7.free-programming-books-zh_CN 免费的计算机编程类中文书籍<br>8.Online_Tools 一些在线的工具,情报资源<br>9.awesome-productivity-cn 绝妙的个人生产力（Awesome Productivity 中文版）<br>10.Awesome-Linux-Software-zh_CN 一个 Linux 上超赞的应用，软件，工具以及其它资源的集中地。<br>11.awesome-for-beginners A list of awesome beginners-friendly projects.<br>12.awesome-mac 一份很棒的MacOS应用列表<br>13.open-source-ios-apps Collaborative List of Open-Source iOS Apps<br>14.Simply beautiful open source icons 简约美观的开源图标库<br>15.awesome-MacOS A curated list of awesome applications, softwares, tools and shiny things for macOS<br>16.interview 笔试面试知识整理<br>17.free-api 收集免费的接口服务,做一个api的搬运工</p><p><strong>Awesome GitHub Repo</strong></p><p>Awesome GitHub Repo 是逛逛 GitHub 创建的开源项目，会收集整理 GitHub 上高质量、有趣的开源项目，并将他们进行归类。<br>地址：<a href="https://github.com/Wechat-ggGitHub/Awesome-GitHub-Repo">https://github.com/Wechat-ggGitHub/Awesome-GitHub-Repo</a></p><p><strong>新一代爬虫平台</strong></p><p>平台以流程图的方式定义爬虫，是一个高度灵活可配置的爬虫平台。新一代爬虫平台，以图形化方式定义爬虫流程，不写代码即可完成爬虫。<br>开源地址：<a href="https://github.com/ssssssss-team/spider-flow">https://github.com/ssssssss-team/spider-flow</a></p><p><strong>开发者技术路线</strong></p><p>它为前端、后端、DevOps等开发着准备可详细的技术路线图。</p><p>开源地址：<a href="https://github.com/kamranahmedse/developer-roadmap">https://github.com/kamranahmedse/developer-roadmap</a>  </p><p><strong>自学编程之路</strong></p><p>Python 开源项目之「自学编程之路」，保姆级教程：AI实验室、宝藏视频、数据结构、学习指南、机器学习实战、深度学习实战、网络爬虫、大厂面经、程序人生、资源分享。</p><p>开源地址：<a href="https://github.com/Jack-Cherish/PythonPark">https://github.com/Jack-Cherish/PythonPark</a></p><h1 id="git与github账号绑定"><a href="#git与github账号绑定" class="headerlink" title="git与github账号绑定"></a>git与github账号绑定</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置git用户和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">"xxxx"</span>  </span><br><span class="line">git config --global user.email <span class="string">"xxxxx@qq.com"</span> </span><br><span class="line"></span><br><span class="line">git config --global --list  <span class="comment">#查看配置的结果   </span></span><br><span class="line"><span class="comment"># 本机生成SSH公钥，实现免密登录    </span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></tbody></table></figure><h2 id="将公钥添加到Github管理平台"><a href="#将公钥添加到Github管理平台" class="headerlink" title="将公钥添加到Github管理平台"></a>将公钥添加到Github管理平台</h2><p>我的目录是：C:\Users\wenke.ssh\ id_rsa.pub<br>将ssh文件夹中的公钥添加到GitHub管理平台中，进入github设置setting-》ssh and GPG keys-》new ssh key</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -T git@github.com <span class="comment">#验证是否绑定成功</span></span><br></pre></td></tr></tbody></table></figure><h1 id="git关联gitee"><a href="#git关联gitee" class="headerlink" title="git关联gitee"></a>git关联gitee</h1><h2 id="本地关联gitee远程仓库"><a href="#本地关联gitee远程仓库" class="headerlink" title="本地关联gitee远程仓库"></a>本地关联gitee远程仓库</h2><p>在本地文件夹进入git bash</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">touch README.md</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">"first commit"</span></span><br><span class="line">git remote add origin git@gitee.com:用户名/仓库名.git</span><br><span class="line">git push -u origin <span class="string">"分支名"</span>     <span class="comment">#gitee的默认分支名为mian</span></span><br></pre></td></tr></tbody></table></figure><h1 id="关联本地与远程仓库"><a href="#关联本地与远程仓库" class="headerlink" title="关联本地与远程仓库"></a>关联本地与远程仓库</h1><h2 id="https"><a href="#https" class="headerlink" title="https"></a>https</h2><p>在本地选择一个文件夹克隆仓库</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#git clone [url]</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wenkexia/AI.git</span><br></pre></td></tr></tbody></table></figure><h2 id="选择ssh方式clone"><a href="#选择ssh方式clone" class="headerlink" title="选择ssh方式clone"></a>选择ssh方式clone</h2><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># git remote add origin [SSH key]</span></span><br><span class="line">git remote add origin git@github.com:PanXF-HUST/test.git  </span><br><span class="line"></span><br><span class="line"><span class="comment">#命令查看关联状况</span></span><br><span class="line">git remote -v    </span><br></pre></td></tr></tbody></table></figure><h2 id="本地创建一个git库"><a href="#本地创建一个git库" class="headerlink" title="本地创建一个git库"></a>本地创建一个git库</h2><p>进入到指定的文件夹之后，右键打开git bash输入<br><code>git init</code><br>本地文件夹中也会出现.git隐藏文件夹（是git的控制文件）</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2021/111958091.html"/>
      <url>/2021/111958091.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo-简介"><a href="#Hexo-简介" class="headerlink" title="Hexo 简介"></a>Hexo 简介</h1><p>Hexo 是一个快速，简单且功能强大的博客框架。如果你用 Markdown 写博客，Hexo 可以在几秒内生成带有精美主题的静态文件。</p><h1 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h1><h2 id="Node-js-安装。"><a href="#Node-js-安装。" class="headerlink" title="Node.js 安装。"></a>Node.js 安装。</h2><h2 id="Git-并安装"><a href="#Git-并安装" class="headerlink" title="Git 并安装"></a>Git 并安装</h2><p>配置环境变量，两个都要配置</p><h2 id="安装Hexo，"><a href="#安装Hexo，" class="headerlink" title="安装Hexo，"></a>安装Hexo，</h2><p>创建一个文件夹例如blog，右键打开Git Bash<br>运行：  npm install -g hexo-cli<br>查看版本 hexo -v</p><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><p>hexo init blog<br>cd blog  #进入blog目录<br>npm install</p><p>新建完成后，指定文件夹目录下有：<br>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件  </p><h2 id="Hexo版本升级"><a href="#Hexo版本升级" class="headerlink" title="Hexo版本升级"></a>Hexo版本升级</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 使用淘宝源的 cnpm 替换 npm</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install -g cnpm                 # 升级 npm</span><br><span class="line">cnpm cache clean -f                 # 清除 npm 缓存</span><br><span class="line"></span><br><span class="line">===更新 hexo: 进入 blog 目录，执行如下命令=== </span><br><span class="line"># 更新 package.json 中的 hexo 及个插件版本</span><br><span class="line">cnpm install -g npm-check </span><br><span class="line">npm-check                  # 检查之前安装的插件，都有哪些是可以升级的 </span><br><span class="line">cnpm install -g npm-upgrade         </span><br><span class="line">npm-upgrade                 # 升级系统中的插件</span><br><span class="line"></span><br><span class="line"># 更新 hexo 及所有插件</span><br><span class="line">cnpm update</span><br><span class="line"></span><br><span class="line"># 确认 hexo 已经更新</span><br><span class="line">hexo -v</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="创建GitHub仓库或者码云仓库"><a href="#创建GitHub仓库或者码云仓库" class="headerlink" title="创建GitHub仓库或者码云仓库"></a>创建GitHub仓库或者码云仓库</h1><p>1.创建仓库，仓库名必须和用户名一致，其他按照默认，直接创建<br>2.打开cmd，添加Git本地用户<br>git config –global user.name “ 用户名  “<br>git config –global user.email “绑定的邮箱”</p><p>3.申请Sky秘钥<br>ssh-keygen -t rsa -C “Git绑定的邮箱”<br>sky在这 C:\Users\啊科.ssh</p><p>4.复制Sky秘钥添加到GitHub或者码云<br>查看是否成功  ssh -T <a href="mailto:git@github.com">git@github.com</a></p><h1 id="将本地仓库与远程仓库连接"><a href="#将本地仓库与远程仓库连接" class="headerlink" title="将本地仓库与远程仓库连接"></a>将本地仓库与远程仓库连接</h1><p>1.安装git部署插件：才能用hexo d 上传<br>npm install hexo-deployer-git –save</p><p>2.复制生成的仓库连接<br>修改博客目录下的_config.yml文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://gitee.com/wenkex/wenkex.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h1 id="本地创建文章，上传到远程仓库"><a href="#本地创建文章，上传到远程仓库" class="headerlink" title="本地创建文章，上传到远程仓库"></a>本地创建文章，上传到远程仓库</h1><p>hexo clean清理缓存<br> hexo g 刷新博客文章<br> hexo s 开启本地映射 #为了在本地检查文章，该步骤可以跳过，该命令按Ctrl+C结束<br> hexo d 将本地博客上传到远程仓库，第一次上传会让你输入GitHub或码云的账号密码<br>等待上传完成，打开Gitee pages，更新Https内容（每次上传文件后都要执行这一步）</p><p>在你创建的博客文件夹下打开git bash，输入命令 hexo new 文章标题</p><p>用yarn cgd或npm run cgd运行如下命令<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d一键上传到远程仓库<br>hexo cl &amp;&amp; hexo g &amp;&amp; hexo s一键开启本地映射</p><h1 id="1-目录结构说明"><a href="#1-目录结构说明" class="headerlink" title="1.目录结构说明"></a>1.目录结构说明</h1><p><a href="https://juejin.cn/post/6844904082042257415#heading-6">参考</a><br><a href="https://hexo.io/zh-cn/docs/">参考</a></p><p>在执行过Hexo deploy命令之后，目录结构新增了.deploy_git，public，.gitignore，如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> $ tree -L 2</span><br><span class="line">.</span><br><span class="line">├── .deploy_git</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">│&nbsp;&nbsp; ├── draft.md</span><br><span class="line">│&nbsp;&nbsp; ├── page.md</span><br><span class="line">│&nbsp;&nbsp; └── post.md</span><br><span class="line">├── source</span><br><span class="line">│&nbsp;&nbsp; ├── _posts</span><br><span class="line">│&nbsp;&nbsp; ├── _drafts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><p>_config.yml<br>用来配置博客相关的参数，初始化时自动创建</p></li><li><p>node_modules用来存储已安装的各类依赖包</p></li><li><p>package.json用来查看 Hexo 的版本以及相关依赖包的版本。</p></li><li><p>scaffold<br>模板文件夹，初始化时自动创建。包含page，post，draft三种模板，分别对应 页面、要发布的文章、草稿。<br>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><code>$ hexo new photo "My Gallery"</code><br>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，</p></li><li><p>themes<br>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。</p></li><li><p>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</p></li><li><p>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</p></li><li><p>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</p></li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git<br>执行hexo generate，根据 source，更新 public。<br>执行hexo deploy，根据 public，更新 .deploy_git。</p><hr><h1 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2.常用命令"></a>2.常用命令</h1><p>1.<code>hexo server</code> #启动本地服务器，用于预览主题。Hexo 会监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。简写：<code>hexo s</code></p><p>2.<code>hexo clean</code>#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</p><p>3.<code>hexo g</code>#生成静态网页 (执行后会在站点根目录下生成public文件夹, hexo会将”/blog/source/“ 下面的.md后缀的文件编译为.html后缀的文<br>件,存放在”/blog/public/ “ 路径下)  等价于<code>hexo generate</code></p><p>4.<code>hexo d</code>#自动生成网站静态文件，并将本地数据部署到设定的仓库(如github)等价于<code>hexo deploy</code></p><h1 id="3-更换主题"><a href="#3-更换主题" class="headerlink" title="3.更换主题"></a>3.更换主题</h1><h2 id="Hexo主题升级方法"><a href="#Hexo主题升级方法" class="headerlink" title="Hexo主题升级方法"></a>Hexo主题升级方法</h2><p>1.使用Git Bash工具跳转到主题文件对应的目录中<br>2.首先，更新工作的状态树：<br><code>git add .</code><br>3.之后，输入如下命令，将文件放在堆栈中，获取更新后，再弹栈：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br><span class="line">git pull</span><br><span class="line">git stash pop</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="4-新建文章自动打开编辑器"><a href="#4-新建文章自动打开编辑器" class="headerlink" title="4.新建文章自动打开编辑器"></a>4.新建文章自动打开编辑器</h1><p>执行 hexo new “名字”，这样就会在_posts 下生成一篇新文章，但需要手动打开，<br>1.只需要在站点根目录下新建 scripts 目录，<br>2.然后在scripts目录下新建 auto_open.js，在文件填入一下内容：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">  spawn(<span class="string">'start  "D:\Program Files\Typora\Typora.exe" '</span> + data.path);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>其中 “D:\Program Files\Typora\Typora.exe” 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 hexo cl &amp;&amp; hexo g -d，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p><h1 id="5-一键部署"><a href="#5-一键部署" class="headerlink" title="5.一键部署"></a>5.一键部署</h1><p>通过 hexo-deployer-git 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：<br><code>npm install hexo-deployer-git --save</code><br>修改 Hexo 根目录下的_config.yml 文件中的如下内容:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一键部署，修改成自己的repo和branch</span></span><br><span class="line"><span class="attr">deploy:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span>    </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/lxl80/blog.git</span>  </span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span>   </span><br><span class="line">  <span class="string">ignore_hidden:false</span></span><br><span class="line">  <span class="string">-type:git</span></span><br><span class="line">  <span class="string">repo:https://gitee.com/lxl80/lxl80.git</span></span><br><span class="line">  <span class="string">branch:master</span></span><br><span class="line">  <span class="string">ignore_hidden:false</span></span><br></pre></td></tr></tbody></table></figure><h1 id="简化部署"><a href="#简化部署" class="headerlink" title="简化部署"></a>简化部署</h1><p>在package.json中<br>添加<code>"cgd": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</code><br>以后就可以用<code>npm run cgd</code>直接部署上线</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">  <span class="attr">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">  <span class="attr">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">  <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"hexo server"</span>,</span><br><span class="line">  <span class="attr">"cgs"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span>,</span><br><span class="line">  <span class="attr">"cgd"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h1 id="使用文章资源文件夹-弃用，现在用图床"><a href="#使用文章资源文件夹-弃用，现在用图床" class="headerlink" title="使用文章资源文件夹(弃用，现在用图床)"></a>使用文章资源文件夹(弃用，现在用图床)</h1><p>在config.yaml文件中更改一下配置：<br><code>post_asset_folder: true</code><br>当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。<br>此时应该使用这样的方式来引入图片：<br><code>{% asset_img image.jpg 这是一张图片 %}</code></p><ul><li>图片插件</li></ul><p>插件hexo-renderer-marked解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在config.yaml中更改配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></tbody></table></figure><h1 id="github添加域名"><a href="#github添加域名" class="headerlink" title="github添加域名"></a>github添加域名</h1><p><a href="https://yafine-blog.cn/posts/fc0.html">参考</a></p><p>1.注册一个域名<br>2.添加域名解析（注：使用自定义域名，需要将记录类型修改为 CNAME 将域名指向另一个域名，记录值修改为 GitHub对应仓库名，如：zhang123-123.github.io）<br>3.在GitHub 中设置新的注册的域名（具体位置：Settings –&gt; Pages –&gt; Custom domain），之后保存验证就可以了<br>4.进入 hexo 根目录的 source 文件夹；<br>创建 CNAME 文件，文件添加域名 –&gt; zhangyh.fun。注意：文件名全部大写，没有后缀；文件内容只有域名；<br>5.重新生成静态文件，并提交。hexo d</p><h1 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h1><p>1.使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：<br><code>npm install hexo-generator-search --save</code><br>2.在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></tbody></table></figure><p>3.在主题配置文件中开启本地搜索</p><h1 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h1><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。<br>安装命令如下：<br><code>npm i --save hexo-wordcount</code><br>然后只需在主题下的 _config.yml 文件中，激活以下配置项即可：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 将这个值设置为 true 即可.</span></span><br><span class="line">  <span class="attr">postWordCount:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h1 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h1><ul><li>图片预加载：顾名思义，图片预加载就是在网页全部加载之前，提前加载图片。当用户需要查看时可直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白，这样浏览者可能以为图片预览慢而没兴趣浏览，把网页关掉，这时，就需要图片预加载。当然这种做法实际上牺牲了服务器的性能换取了更好的用户体验。</li><li>图片懒加载（缓载）：延迟加载图片或符合某些条件时才加载某些图片。这样做的好处是减少不必要的访问数据库或延迟访问数据库的次数，因为每次访问数据库都是比较耗时的即只有真正使用该对象的数据时才会创建。懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。</li><li>懒加载对服务器前端有一定的缓解压力作用，预载则会增加服务器前端压力。<br>使用图片懒加载需要安装插件：hexo-lazyload-image<br>在站点根目录执行下面的命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></tbody></table></figure><p>之后在站点配置文件下添加下面的代码：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启图片懒加载</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></tbody></table></figure><h1 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h1><p>因为 hexo 生成的 html、css、js 等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的 “压缩”。<br>我们采用 gulp 代码压缩方式。<br>使用方法：</p><ul><li>进入站点根目录下依次执行下面的命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装gulp模块</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="comment"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span></span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></tbody></table></figure><ul><li>在 Hexo 根目录新建文件 gulpfile.js，并复制以下内容到文件中</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">"gulp-debug"</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">"gulp-htmlclean"</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">"gulp-imagemin"</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">"gulp-changed"</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">"gulp-if"</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">"gulp-plumber"</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">"babel-preset-es2015"</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">"hexo"</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), {}); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">"public/**/*"</span>]);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">"generate"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">"generate"</span>, {</span><br><span class="line">                <span class="attr">watch</span>: <span class="literal">false</span></span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            });</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">"server"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">        .init()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> hexo.call(<span class="string">"server"</span>, {});</span><br><span class="line">        })</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">"deploy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">"deploy"</span>, {</span><br><span class="line">                <span class="attr">watch</span>: <span class="literal">false</span></span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            });</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">"compressJs"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">"./public/**/*.js"</span>, <span class="string">"!./public/libs/**"</span>]) <span class="comment">//排除的js</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress JS:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(</span><br><span class="line">            gulpBabel({</span><br><span class="line">                <span class="attr">presets</span>: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">            })</span><br><span class="line">        )</span><br><span class="line">        .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">"compressCss"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> option = {</span><br><span class="line">        <span class="attr">rebase</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">        <span class="attr">compatibility</span>: <span class="string">"ie7"</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class="line">        <span class="comment">//keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">        <span class="comment">//keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">"./public/**/*.css"</span>, <span class="string">"!./public/**/*.min.css"</span>]) <span class="comment">//排除的css</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress CSS:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">"compressHtml"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> cleanOptions = {</span><br><span class="line">        <span class="attr">protect</span>: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">        unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">var</span> minOption = {</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">"./public/**/*.html"</span>)</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress HTML:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/medias 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">"compressImage"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> option = {</span><br><span class="line">        <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number 默认：3 取值范围：0-7（优化等级）</span></span><br><span class="line">        <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        <span class="attr">interlaced</span>: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        <span class="attr">multipass</span>: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">"./public/medias/**/*.*"</span>)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public/medias"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress Images:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(imagemin(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">"build"</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">"clean"</span>,</span><br><span class="line">        <span class="string">"generate"</span>,</span><br><span class="line">        <span class="string">"compressHtml"</span>,</span><br><span class="line">        <span class="string">"compressCss"</span>,</span><br><span class="line">        <span class="string">"compressJs"</span>,</span><br><span class="line">        <span class="string">"compressImage"</span>,</span><br><span class="line">        gulp.parallel(<span class="string">"deploy"</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">"default"</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">"clean"</span>,</span><br><span class="line">        <span class="string">"generate"</span>,</span><br><span class="line">        gulp.parallel(<span class="string">"compressHtml"</span>, <span class="string">"compressCss"</span>, <span class="string">"compressJs"</span>,<span class="string">"compressImage"</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span><br></pre></td></tr></tbody></table></figure><ul><li>以后的执行方式有两种：<ul><li>直接在 Hexo 根目录执行 gulp 或者 gulp default ，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码和图片压缩。</li><li>在 Hexo 根目录执行 gulp build  ，等于说生成、压缩文件后又帮你自动部署了。</li></ul></li></ul><h1 id="文章链接转静态短地址"><a href="#文章链接转静态短地址" class="headerlink" title="文章链接转静态短地址"></a>文章链接转静态短地址</h1><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于SEO，且gitment评论对中文链接也不支持。我们可以用hexo-permalink-pinyin Hexo 插件生成文章时生成中文拼音的永久链接，<br>或者用hexo-abbrlink 生成静态文章链接。以下结合hexo-abbrlink生成类似 /yyyy/mmdd+随机数.html 的文章链接地址。<br>安装命令如下：<br><code>npm install hexo-abbrlink --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，修改 permalink: ，并在文件末尾新增 abbrlink:配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month:day:abbrlink.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">abbrlink:</span>   </span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span> <span class="comment">#算法选项：crc16丨crc32  </span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span> <span class="comment">#输出进制：dec为十进制，hex为十六进制</span></span><br></pre></td></tr></tbody></table></figure><h1 id="博客备份hexo-git-backup-暂未采用"><a href="#博客备份hexo-git-backup-暂未采用" class="headerlink" title="博客备份hexo-git-backup(暂未采用)"></a>博客备份hexo-git-backup(暂未采用)</h1><p><a href="https://github.com/coneycode/hexo-git-backup">项目地址</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install hexo-git-backup --save</code></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>新建仓库，例如 Hexo_backup ，权限设为 private ，分支默认main<br>先获取项目 ssh 链接：<br><img src="https://gitee.com/wenkex/blogimage/raw/master/Quicker_20220106_234454.png"><br>在 hexo配置文件 中添加以下内容：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">backup:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span></span><br><span class="line">       <span class="attr">backup:</span> <span class="string">git@github.com:xingjiahui/Hexo-Backup.git,main</span></span><br></pre></td></tr></tbody></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>hexo b</code></p><h1 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h1><p><a href="https://shen-yu.gitee.io/2020/hexo-seo/">参考</a></p><p>搜索引擎优化，又称为SEO，即Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google自动收录效果还不错，百度就差得远了（GitHub不允许百度的Spider爬取GitHub上的内容）。所以在第三步验证网站的时候，建议选择CNAME验证的方式。</p><h2 id="生成-sitemap-文件"><a href="#生成-sitemap-文件" class="headerlink" title="生成 sitemap 文件"></a>生成 sitemap 文件</h2><p>1.安装插件<br>查看是否有安装插件<br><code>npm [name] -v</code> </p><p>百度<br><code> npm install hexo-generator-baidu-sitemap --save</code><br>谷歌<br><code> npm install hexo-generator-sitemap --save</code></p><p>2.添加站点配置_config.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>再重启 hexo，在本地访问 localhost:4000/sitemap.xml和 localhost:4000/baidusitemap.xml 就能正确的展示出两个sitemap 文件了。</p><h2 id="推送到-谷歌-和-百度"><a href="#推送到-谷歌-和-百度" class="headerlink" title="推送到 谷歌 和 百度"></a>推送到 谷歌 和 百度</h2><h3 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h3><p><a href="https://ziyuan.baidu.com/site/">百度站点管理</a><br>添加文件方式不可行，hexo会处理html文件</p><p>所以选择，在 head.ejs 里添加 html 标签</p><p>1.1 手动提交baidusitemap.xml(里面也有自动提交的代码)</p><p>1.2 可以用”抓取诊断”，手动-百度抓取</p><p>1.3 Robots → 检测并更新</p><h3 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h3><p><a href="https://search.google.com/search-console/about">谷歌站点管理</a></p><h2 id="在根目录下-新建-robots-txt"><a href="#在根目录下-新建-robots-txt" class="headerlink" title="在根目录下 新建 robots.txt"></a>在根目录下 新建 robots.txt</h2><p>robots配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /home/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /about/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://yoursite/sitemap.xml</span><br><span class="line">Sitemap: http://yoursite/baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure><h1 id="Hexo自定义原理"><a href="#Hexo自定义原理" class="headerlink" title="Hexo自定义原理"></a>Hexo自定义原理</h1><p>Hexo 系列的博客中的文章都是经Hexo的主题渲染的静态网页。所以Hexo博客大部分都呈现出一种高度的统一化与规范化。不过 Hexo 提供了跳过渲染功能，使得我们可以直接在博客中放入自定义网页。</p><p>比如在博客中放入图片、自定义404.html、自定义About页面、简历等<br>创建自定义网页<br>网页可以是自己编写的，也可以是别人现成的源码（下载喜欢的页面）。</p><h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>网页编写完成后，在Hexo\source目录下创建一个文件夹（文件夹名称任意，比如我创建的是about这个文件夹，部署完成后，访问<a href="http://mrlsm.github.io/about%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%EF%BC%8C%E4%BE%9D%E6%AD%A4%E7%B1%BB%E6%8E%A8%EF%BC%89">http://mrlsm.github.io/about即可看到效果，依此类推）</a></p><p>将 html 文件放置于此文件夹，并重命名为 index.html 。</p><p>跳过渲染有下述两种方法：</p><h2 id="1-指定文件跳过渲染"><a href="#1-指定文件跳过渲染" class="headerlink" title="1.指定文件跳过渲染"></a>1.指定文件跳过渲染</h2><p>实现原理</p><p>给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。</p><p>实现方法<br>在不需要渲染的文章或HTML文件头部添加以下标记</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>添加该指令后，执行 hexo g命令时便会跳过该 index.html文件，使得index.html不受当前 hexo 主题影响，完全是一个独立的网页，如果网页引用了 css 或 js，css 和 js 需使用外链或者将css js 文件放入index.html同目录下引用。</p><p>引用图片亦是如此</p><h2 id="2-对相关文件跳过渲染"><a href="#2-对相关文件跳过渲染" class="headerlink" title="2.对相关文件跳过渲染"></a>2.对相关文件跳过渲染</h2><p>实现原理<br>只有source目录下的文件才会发布到public（能够在网络上访问到），因此Hexo只渲染source目录下的文件。skip_render参数设置的路径是相对于source目录的路径。<br>Hexo的配置文件中提供了配置项skip_render ，是用来对不需要的目录或者文件进行渲染排除。</p><p>实现方法<br>在_config.yml文件中设置skip_render<br>使用编辑器打开 Hexo 目录下的_config.yml文件，找到skip_render</p><p>skip_render一般有以下四种常用参数：</p><ul><li>跳过source目录下的 test.html:<br>skip_render: test.html</li><li>跳过source目录下 test 文件夹内所有文件：skip_render: test/*</li><li>跳过source目录下 test 文件夹内所有文件包括子文件夹以及子文件夹内的文件：<br>skip_render: test/**</li><li>跳过多个路径：<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test.html</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test/*</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li>不渲染 md 文件<br>skip_render: test/*.md 单个文件夹下指定类型文件</li></ul><h1 id="安装一个本地后台管理-Hexo-Admin"><a href="#安装一个本地后台管理-Hexo-Admin" class="headerlink" title="安装一个本地后台管理(Hexo Admin)"></a>安装一个本地后台管理(Hexo Admin)</h1><p>1.在博客根目录下运行下列指令<br>npm install –save hexo-admin<br>2.运行hexo s<br>3.接下来在浏览器地址栏粘贴这个地址，<br><a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a><br>4.增加密码<br>进入Settings &gt; Setup authentification<br>设置账户，密码得到一串配置<br>填加到站点配置文件下</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">admin:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">myfavoritename</span></span><br><span class="line">  <span class="attr">password_hash:</span> <span class="string">be121740bf988b2225a313fa1f107ca1</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">a</span> <span class="string">secret</span> <span class="string">something</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="增加上传功能"><a href="#增加上传功能" class="headerlink" title="增加上传功能"></a>增加上传功能</h2><p>在博客根目录下运行下列指令</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">echo</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">&gt;hexo-deploy.bat</span> <span class="comment">#生成一个内容为"hexo clean &amp;&amp; hexo g -d"，名为"hexo-deploy"的bat文件。</span></span><br><span class="line"><span class="comment">#配置_config.yml文件，</span></span><br><span class="line"><span class="string">echo</span> <span class="string">admin:&gt;&gt;"_config.yml"</span></span><br><span class="line"><span class="string">echo</span> <span class="string">"  deployCommand: 'hexo-deploy.bat'"</span><span class="string">&gt;&gt;"_config.yml"</span></span><br><span class="line"><span class="comment">#开启hexo服务</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">server</span> <span class="string">-d</span></span><br></pre></td></tr></tbody></table></figure><p>这个教程是对于github的部署的。如果想用来管理gitee的博客，建议修改成echo “hexo clean &amp;&amp; hexo g -d &amp;&amp; start <a href="https://gitee.com/%E7%94%A8%E6%88%B7%E5%90%8D/%E7%94%A8%E6%88%B7%E5%90%8D/pages&quot;>hexo-deploy.bat%EF%BC%8C%E8%BF%99%E6%A0%B7%E6%96%B9%E4%BE%BF%E5%9C%A8%E7%BD%91%E9%A1%B5%E7%AB%AF%E5%90%8C%E6%AD%A5%E6%9B%B4%E6%96%B0gitee">https://gitee.com/用户名/用户名/pages"&gt;hexo-deploy.bat，这样方便在网页端同步更新gitee</a> page。<br>在网页中编辑完，直接左上角Deploy，直接点deploy按钮，就可以完成博客的部署。</p><p>可能遇到的问题(每次都要输入密码)：查看一下你的_config.yml，将文档最后的deploy的repo从http改为git@github类型。</p><h1 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h1><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>使用utool里的图床插件，picGo还要下载，而utool里还有其他有趣的插件</p><h2 id="使用-PicGo-GitHub图床"><a href="#使用-PicGo-GitHub图床" class="headerlink" title="使用 PicGo+GitHub图床"></a>使用 PicGo+GitHub图床</h2><p><a href="https://yafine-blog.cn/posts/eb3a.html">参考</a></p><h3 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h3><p>创建是记住分支名，默认是main </p><h3 id="生成一个Token"><a href="#生成一个Token" class="headerlink" title="生成一个Token"></a>生成一个Token</h3><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><p><img src="https://cdn.jsdelivr.net/gh/wenkexia/image/06.jpg"></p><h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>前往下载PicGo，安装好后开始配置图床<br>设定仓库名：按照【用户名/图床仓库名】的格式填写</p><p>设定分支名：【main】</p><p>设定Token：粘贴之前生成的【Token】</p><p>设定自定义域名：它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】</p><h1 id="butterfly主题配置"><a href="#butterfly主题配置" class="headerlink" title="butterfly主题配置"></a>butterfly主题配置</h1><p><a href="https://www.bufferfly.cn/problem.html">官方文档</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：<br><code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></p><h2 id="升级建议"><a href="#升级建议" class="headerlink" title="升级建议"></a>升级建议</h2><p>1.在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复製到 _config.butterfly.yml 去。( 注意: 复製的是主题的 _config.yml ,而不是 hexo 的 _config.yml)<br>2.不要把主题目录的 _config.yml 删掉<br>3.以后只需要在 _config.butterfly.yml进行配置就行。<br>4.Hexo会自动合併主题中的_config.yml和 _config.butterfly.yml里的配置，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。</p><h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><p><a href="https://blog.csdn.net/u012208219/article/details/106883001/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-9.no_search_link&amp;spm=1001.2101.3001.4242.6&amp;utm_relevant_index=12">参考</a><br>打开主题配置文件（butterfly.yml）<br>定位搜索 inject<br>其中head是用来引入css的。bottom是用来引入js的。</p><h3 id="以相对路径引入"><a href="#以相对路径引入" class="headerlink" title="以相对路径引入"></a>以相对路径引入</h3><p>1.将写好的css文件移动到\Butterfly\source\css\目录下。<br>2.然后修改配置文件的引入方式</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="/css/name.css"&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="xxxx"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="标签外挂（Tag-Plugins）-推荐"><a href="#标签外挂（Tag-Plugins）-推荐" class="headerlink" title="标签外挂（Tag Plugins）(推荐)"></a>标签外挂（Tag Plugins）(推荐)</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">参考</a><br><a href="https://blog.ccknbc.cc/posts/introduction-of-plugin-tags-based-on-butterfly/">参考</a><br>标籤外挂是Hexo独有的功能，并不是标準的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>页面内置小标签<br>使用</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">{% tabs Unique name, [index] %}</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id's as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It's will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">{% tabs test4 %}</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>This is my website, click the button <a class="btn-beautify button--animated larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><h2 id="gallery-相册图库"><a href="#gallery-相册图库" class="headerlink" title="gallery 相册图库"></a>gallery 相册图库</h2><p><a href="https://dyfa.top/posts/waterfall-flow-photo-album.html#toc-heading-4">参考</a><br><a href="https://butterfly.js.org/posts/dc584b87/#%E5%9C%96%E5%BA%AB">参考</a></p><h3 id="编辑主题导航栏加入相册按钮"><a href="#编辑主题导航栏加入相册按钮" class="headerlink" title="编辑主题导航栏加入相册按钮"></a>编辑主题导航栏加入相册按钮</h3><p>在站点主题_config.yml文件下menu菜单下新增gallery页面。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"> <span class="string">相册:</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建相册页面"><a href="#新建相册页面" class="headerlink" title="新建相册页面"></a>新建相册页面</h3><p>在站点的source文件夹下面新建一个gallery相册页面。<br><code>hexo new page gallery</code><br>打开新建的gallery文件夹，里面会有一个index.md文件，设置index.md文件内容。然后使用标签外挂 galleryGroup，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- </span><br><span class="line">title: gallery </span><br><span class="line">date: 2020-10-05 12:00:00 </span><br><span class="line">type: "gallery"</span><br><span class="line">layout: "gallery" </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span></span><br><span class="line">{% galleryGroup '壁纸' '收藏的一些壁纸' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}</span><br><span class="line">{% galleryGroup '漫威' '关于漫威的图片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}</span><br><span class="line">{% galleryGroup 'OH MY GIRL' '关于OH MY GIRL的图片' '/Gallery/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>name：图库名字<br>description：图库描述<br>link：连接到对应相册的地址<br>img-url：图库封面的地址</p><h3 id="新建相册图片展示页面"><a href="#新建相册图片展示页面" class="headerlink" title="新建相册图片展示页面"></a>新建相册图片展示页面</h3><p>在gallery文件夹（也就是刚才创建的那个文件），可以在里面新建一些文件夹，也就是相册文件夹<br>然后在新建的相册文件夹里，分别在每个文件夹里新建文件index.md ,<br>然后使用标签外挂 gallery，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--- </span><br><span class="line">{% gallery %}</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">{% endgallery %}</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><h3 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h3><p>在博客的根目录输入 <code>hexo new page link</code><br>修改source/link/index.md这个文件</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2018-06-07 22:17:49</span><br><span class="line"><span class="section">type: "link"</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h3><p>在Hexo博客目录中的source/_data（如果没有 _data 文件夹，请自行创建），创建一个文件link.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>class_name和class_desc支持html格式书写，如不需要，也可以留空。</p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>开启评论需要在comments-use中填写你需要的评论。</p><p>支持双评论显示，只需要配置两个评论（第一个为默认显示） </p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>use</td><td>使用的评论（填写的评论首字母需要大写。最多支持两个）注意：由于共用 ID,双评论不能是 Disqus 和 Disqusjs</td></tr><tr><td>text</td><td>是否显示评论服务商的名字</td></tr><tr><td>lazyload</td><td>是否为评论开启lazyload，开启后，只有滚动到评论位置时才会加载评论所需要的资源（开启lazyload后，评论数将不显示）</td></tr><tr><td>count</td><td>是否在文章顶部显示评论数livere 和 utterances 不支持评论数显示</td></tr><tr><td>card_post_count</td><td>是否在首页文章卡片显示评论数gitalk、livere 和 utterances不支持评论数显示</td></tr></tbody></table><h2 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h2><p>当用户点击链接，通过ajax更新页面需要变化的部分，然后使用HTML5的pushState修改浏览器的URL地址。</p><p>这样可以不用重复加载相同的资源（css/js）， 从而提升网页的加载速度。 </p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/music/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/no-pjax/</span></span><br></pre></td></tr></tbody></table></figure><p>对于一些第三方插件，有些并不支持 pjax 。<br>你可以把网页加入到 exclude 里，这个网页会被 pjax 排除在外。<br>点击该网页会重新加载网站</p><p>使用pjax后，一些自己DIY的js可能会无效，跳转页面时需要重新调用，请参考Pjax文档<br>使用pjax后，一些个别页面加载的js/css，将会改为所有页面都加载</p><p>Butterfly的Pjax目前仍有一些问题，请留意</p><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p><a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0">参考</a><br>以_post为根目录定位文件（md文件会被渲染成html）<br>因为使用了abbrlink生成文章永久链接，所以在GitHub仓库中由md渲染成的HTML文件名是日期加abbrlink数字</p><h3 id="新建一个页面打开文章"><a href="#新建一个页面打开文章" class="headerlink" title="新建一个页面打开文章"></a>新建一个页面打开文章</h3><p><code>&lt;a href="/2021/12184010.html" target="_blank"&gt;显示的文字&lt;/a&gt;</code></p><h3 id="在此页面打开新文章"><a href="#在此页面打开新文章" class="headerlink" title="在此页面打开新文章"></a>在此页面打开新文章</h3><p><code>[显示的文字](/2021/12184010.html)</code><br><code>{% post_link 文章文件名 显示文本 %}</code></p><h2 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h2><p>本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：<br><code>npm install hexo-generator-feed --save</code></p><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明已经安装成功了。</p><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS订阅</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment"># Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在主题的配置文件_config.butterfly.yml中的social属性下添加rss的icon配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></tbody></table></figure><h2 id="添加emoji表情支持"><a href="#添加emoji表情支持" class="headerlink" title="添加emoji表情支持"></a>添加emoji表情支持</h2><p>Matery 主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）转变成会跳跃的emoji表情，安装命令如下：<br><code>npm install hexo-filter-github-emojis --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="添加动态诗词"><a href="#添加动态诗词" class="headerlink" title="添加动态诗词"></a>添加动态诗词</h2><p><a href="https://blog.csdn.net/victoryxa/article/details/105841309">参考</a></p><p>采用的是今日诗词，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有<a href="https://www.jinrishici.com/doc/">API文档</a>，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，<br>1.在/themes/matery/layout/_partial/head.ejs添加下面的一行代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>2.然后再将/themes/matery/layout/_partial/bg-cover-content.ejs中的<code>&lt;%= config.description %&gt;</code>修改为<code>&lt;%- '&lt;span id="jinrishici-sentence"&gt;正在加载今日诗词....&lt;/span&gt;' %&gt;</code><br>3.使用前提是将主题配置文件的subtitle的值改为false。</p><h2 id="添加萌萌的动漫人物"><a href="#添加萌萌的动漫人物" class="headerlink" title="添加萌萌的动漫人物"></a>添加萌萌的动漫人物</h2><p>1.安装插件<br><code>npm install --save hexo-helper-live2d</code><br>2.输入以下命令，安装下载动画人物库，将 haruto 更换成你想要的模型名称即可 如：<br><code>npm install live2d-widget-model-haruto</code><br>更多模型选择请<a href="https://gitcode.net/mirrors/xiazeyu/live2d-widget-models?utm_source=csdn_github_accelerator">点击</a></p><p>3.根目录_config.yml配置里面添加：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> </span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> </span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> </span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> </span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">model:</span> </span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-haruto</span>  <span class="comment">#模型选择</span></span><br><span class="line">  <span class="attr">display:</span> </span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span>  <span class="comment">#模型位置</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span>   <span class="comment">#模型宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span>  <span class="comment">#模型高度</span></span><br><span class="line">  <span class="attr">mobile:</span> </span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#是否在手机端显示</span></span><br><span class="line">    <span class="attr">react:</span> </span><br><span class="line">      <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>动漫人物最好不要和不蒜子一起使用，不然不蒜子会显示不出来。</p><h2 id="添加全局吸底Aplayer音乐-不采用"><a href="#添加全局吸底Aplayer音乐-不采用" class="headerlink" title="添加全局吸底Aplayer音乐(不采用)"></a>添加全局吸底Aplayer音乐(不采用)</h2><h3 id="安装hexo-tag-aplayer插件"><a href="#安装hexo-tag-aplayer插件" class="headerlink" title="安装hexo-tag-aplayer插件"></a>安装hexo-tag-aplayer插件</h3><h3 id="关闭-asset-inject"><a href="#关闭-asset-inject" class="headerlink" title="关闭 asset_inject"></a>关闭 asset_inject</h3><p>由于需要全局都插入aplayer和meting资源，为了防止插入重复的资源，需要把asset_inject设为false<br>在Hexo的配置文件中</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="开启主题的aplayerInject"><a href="#开启主题的aplayerInject" class="headerlink" title="开启主题的aplayerInject"></a>开启主题的aplayerInject</h3><p>在主题的配置文件中，enable设为true和per_page设为true</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="插入Aplayer-html"><a href="#插入Aplayer-html" class="headerlink" title="插入Aplayer html"></a>插入Aplayer html</h3><p>把aplayer代码插入到主题配置文件的inject.bottom去</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class="aplayer</span> <span class="literal">no</span><span class="string">-destroy"</span> <span class="string">data-id="000PeZCQ1i4XVs"</span> <span class="string">data-server="tencent"</span> <span class="string">data-type="artist"</span> <span class="string">data-fixed="true"</span> <span class="string">data-mini="true"</span> <span class="string">data-listFolded="false"</span> <span class="string">data-order="random"</span> <span class="string">data-preload="none"</span> <span class="string">data-autoplay="true"</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>id是自己分享的歌曲后由链接得到的id<br>server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。<br>type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>如果你想切换页面时，音乐不会中断。请把主题配置文件的pjax设为true，在class里需添加no-destroy，这样防止切换页面时Aplayer被销毁</p><h3 id="UI-调整"><a href="#UI-调整" class="headerlink" title="UI 调整"></a>UI 调整</h3><p>按照上面的步骤设置完成后，浏览器左下角会出现Aplayer。打开文章页面时，你会发现打开Toc目录的按钮被遮挡了。我们需要修改CSS来改变按钮的位置。<br>向上调整</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#toggle-sidebar</span> {</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">80px</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中，添加到inject去</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'&lt;style type="text/css"&gt;#toggle-sidebar {bottom: 80px}&lt;/style&gt;'</span></span><br></pre></td></tr></tbody></table></figure><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br><a href="https://yangchaoyi.vip/">https://yangchaoyi.vip/</a></p><h1 id="matery主题配置（不采用）"><a href="#matery主题配置（不采用）" class="headerlink" title="matery主题配置（不采用）"></a>matery主题配置（不采用）</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>hexo-theme-matery 是一个采用 Material Design 和响应式设计的 Hexo 博客主题<br>去github下载解压缩后，将 hexo-theme-matery 的文件夹复制到 Hexo 的 themes 文件夹中即可。</p><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>修改 Hexo 根目录下的_config.yml 的 theme 的值：<br>theme: hexo-theme-matery</p><h2 id="主题目录结构说明"><a href="#主题目录结构说明" class="headerlink" title="主题目录结构说明"></a>主题目录结构说明</h2><p>1.matery/layout下的.ejs文件是编写关于主页右上角分类，归档的<br>2.目录样式在：themes\Matery\layout_partial\post-detail-toc.ejs<br>3.如果有多语言支持需求，可以更改 themes/next/languages 下对应语言的翻译。</p><h2 id="medias个性化"><a href="#medias个性化" class="headerlink" title="medias个性化"></a>medias个性化</h2><p><a href="https://juejin.cn/post/6844904132608786446">参考</a></p><p>1.我先把banner 和 featureimages里的图片来了个大换血。不过这里我发现一个问题，壁纸尺寸必须和电脑显示屏的分辨率一样才能完美显示。比如我的电脑分辨率是1080*1920，那么我下载的壁纸也得是这个尺寸，不然浏览器渲染显示的时候会不好看。</p><p>2.接着我又把网站logo，avatars，favicon 也给换成了自己喜欢的图片<br><a href="http://www.uugai.com/">免费logo生成网站</a></p><h2 id="代码高亮"><a href="#代码高亮" class="headerlink" title="代码高亮"></a>代码高亮</h2><p><a href="https://blog.csdn.net/weixin_49230318/article/details/111619538?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163988912216780261927131%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=163988912216780261927131&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-3-111619538.pc_search_insert_es_download&amp;utm_term=matery%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE&amp;spm=1018.2226.3001.4187">参考</a></p><p>Hexo的matery主题中的代码块出现代码大小不一，代码键复制，无法高亮等BUG</p><h2 id="评论-1"><a href="#评论-1" class="headerlink" title="评论"></a>评论</h2><p>主题中内置了valine, miniValine, livere, gitment, gitalk, changyan评论<br>通过主题文件夹下的_config.yml文件中的相应属性进行设置<br>推荐使用valine和livere<br>这里重点说一下valine评论配置</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># 你的appid --&gt; https://valine.js.org/quickstart.html，请阅读这个获取appid和appkey</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># 你的key</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">''</span> <span class="comment"># 匿名者头像选项 https://valine.js.org/avatar.html 访客的头像,最好启用下面的`requiredFields`中的邮箱必填，填写qq邮箱，头像会变成qq头像</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">'客官，说点什么吧'</span> <span class="comment"># 评论内容输入框的 placeholder</span></span><br><span class="line">  <span class="attr">master:</span> <span class="string">'xxxxxx'</span> <span class="comment"># 博主标签识别，博主邮箱md5 可以去md5加密网站，例如 https://md5jiami.51240.com/ ，将自己的邮箱输入， 得到 32位小写 的字符串填入这里</span></span><br><span class="line">  <span class="attr">friends:</span> [<span class="string">'xxxxxxx'</span>, <span class="string">'xxxxxx'</span>] <span class="comment"># 小伙伴的 邮箱md5， 是个数组</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [<span class="string">'nick'</span>, <span class="string">'mail'</span>] <span class="comment"># 设置必填项 ['nick', 'mail'] nick为昵称必填， mail为邮箱必填, 空数组，则不校验</span></span><br><span class="line">  <span class="attr">backgroundImg:</span> <span class="string">'/medias/comment-bg.gif'</span> <span class="comment"># 右下角背景图片, or http://xxx.gif</span></span><br><span class="line">  <span class="attr">backgroundColor:</span> <span class="string">'rgba(255,255,255,0.9)'</span> <span class="comment"># 背景颜色, 0.9标是透明度</span></span><br></pre></td></tr></tbody></table></figure><h2 id="打开腾讯兔小巢后台反馈"><a href="#打开腾讯兔小巢后台反馈" class="headerlink" title="打开腾讯兔小巢后台反馈"></a>打开腾讯兔小巢后台反馈</h2><p>在主题配置文件更改，加入自己注册后得到的产品Id就可以</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 腾讯兔小巢，见https://txc.qq.com/</span><br><span class="line">tuxiaochao:</span><br><span class="line">  enable: true</span><br><span class="line">  productId: 371566</span><br></pre></td></tr></tbody></table></figure><h2 id="添加-Tidio-在线聊天功能"><a href="#添加-Tidio-在线聊天功能" class="headerlink" title="添加 Tidio 在线聊天功能"></a>添加 Tidio 在线聊天功能</h2><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。</p><h2 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h2><p>登录百度搜索资源平台， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击添加网站，按提示操作。<br>因为我是部署在gitee上的，刚开始我选择的是文件验证方式，但一直提示验证文件内容不符，因此选择了HTML标签验证<br>复制的标签增加在<br><code>\themes\Chic\layout\_partial的head.ejs的&lt;head&gt;与&nbsp;&lt;/head&gt;标签之间</code><br>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。hexo-theme-matery主题已经内置了自动推送的方式， 检查themes/hexo-theme-matery/_config.yml文件中如下配置:<br><code># 百度搜索资源平台提交链接baiduPush: true</code><br>自动推送的JS代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h2 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h2><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93137447?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163988568316780271556025%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163988568316780271556025&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-93137447.pc_search_insert_es_download&amp;utm_term=hexo+%E6%B7%BB%E5%8A%A0+baidu+Analytics+%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187">参考</a></p><p>1.<a href="https://tongji.baidu.com/web/10000419928/homepage/index">注册百度统计账号</a><br>2.添加博客域名<br>3.获取Baidu Analytics ID<br>然后进入代码管理-&gt;代码获取<br>可以看到如下一段javascript代码，这段代码本来是要手动嵌入到网页中的，但是Hexo已经帮我们嵌入了，所以我们自诩配置Baidu Analytics ID即可，这个ID就是下面代码的hm.js?后面那一串，先复制一下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> _hmt = _hmt || [];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?5b6ae75148041557ddd693925322myid"</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">})();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>4.配置Baidu Analytics ID<br>打开主题的配置文件，然后搜索Baidu Analytics ID，找到如下配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">5b6ae75148041557ddd69392532288de</span></span><br></pre></td></tr></tbody></table></figure><p>去掉baidu_analytics前面的#号开启百度统计，值设置成刚在百度统计后台复制的Baidu Analytics ID</p><h2 id="添加导航页"><a href="#添加导航页" class="headerlink" title="添加导航页"></a>添加导航页</h2><p><a href="https://yafine-blog.cn/posts/e925.html">参考</a></p><p>1.首先新建页面，执行下面的命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page navigate</span><br></pre></td></tr></tbody></table></figure><p>2.修改 navigate 目录下的 index.md 的格式</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 导航</span><br><span class="line">date: 2020-05-09 11:19:14</span><br><span class="line">type: "navigate"</span><br><span class="line"><span class="section">layout: "navigate"</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></tbody></table></figure><p>3.在主题配置文件中添加导航</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main menu navigation url and icon</span></span><br><span class="line"><span class="comment"># 配置菜单导航的名称、路径和图标icon.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">统计:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-sitemap</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">分类</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">标签</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span>     </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">归档</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-card</span></span><br><span class="line">  <span class="attr">Contact:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/contact</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-comments</span></span><br><span class="line">  <span class="string">友人帐:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-share-alt</span></span><br><span class="line">  <span class="string">赞助墙:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/sponsor</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-credit-card</span></span><br><span class="line">  <span class="string">导航:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/navigate</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-location-arrow</span></span><br></pre></td></tr></tbody></table></figure><p>4.在 matery/layout 下新建 navigate.ejs</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navi-height bg-cover pd-header "</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">" link-box container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 搜索框 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"baidu baidu-2 large-screen"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"f"</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Select-2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Select-box-2"</span> <span class="attr">id</span>=<span class="string">"baidu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"height: 46px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"this_s"</span>&gt;</span>百 · 度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bing_s"</span>&gt;</span>必 · 应<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"google_s"</span>&gt;</span>谷 · 歌<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"baidu_s"</span>&gt;</span>百 · 度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"wd"</span> <span class="attr">id</span>=<span class="string">"kw-2"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qingkong"</span> <span class="attr">id</span>=<span class="string">"qingkong"</span> <span class="attr">title</span>=<span class="string">"清 · 空"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"搜 · 索"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">id</span>=<span class="string">"su-2"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"keylist"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 链接 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row tags-posts "</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>娱乐 · 影视<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.jd.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.taobao.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.tmall.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>天猫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://v.qq.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>腾讯视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.iqiyi.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>爱奇艺<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.bilibili.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://music.163.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>网易云音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://y.qq.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>QQ音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.kugou.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>酷狗音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>社区 · Code<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mobaijun.com/contact/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>留言<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://coding.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Coding<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://juejin.im/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>掘金<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://gitee.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>码云<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.csdn.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>CSDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.jianshu.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>简书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://segmentfault.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>思否<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://cloud.tencent.com/developer/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>云+社区<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>实用 · 工具<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://mdnice.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Nice编辑器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://translate.google.cn/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>谷歌翻译<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.uupoop.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>在线PS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.processon.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>思维导图<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://wallhaven.cc/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>超清壁纸<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://cli.im/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>二维码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yinfans.me/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>音范思<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.52pojie.cn/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>吾爱破解<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://my.openwrite.cn/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>OW分发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>编程 · 学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.oschina.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>开源中国<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://htmldog.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>HTML狗<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.icourse163.org/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>中国大学慕课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.imooc.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>慕课网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.wxapp-union.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>小程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.runoob.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://blog.51cto.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>51CTO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.shiyanlou.com/library/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://spring.io/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Spring<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>资讯 · 趋势<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.huxiu.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>虎嗅<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://insights.stackoverflow.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>技术调查<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.asciiworld.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>摸鱼<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://sspai.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>少数派<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://zh.wikihow.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>WikeHom<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.awesomes.cn/rank?sort=hot"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>前端趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github-trending.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>GitHub趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.tiobe.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>编程趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://trends.google.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Google趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>搜索 · 其他<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://ac.scmor.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>谷歌镜像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.pansoso.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>网盘搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://tool.mkblog.cn/music/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>音乐搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.dytt8.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>电影天堂<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://carbon.now.sh/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>代码图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.zhipin.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Boos<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://fontawesome.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>图标库<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.qvdv.com/tools/qvdv-guid.html"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>在线工具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://zhongguose.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>中国色<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="comment">/*选择搜索引擎*/</span> $(<span class="string">'.Select-box ul'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'auto'</span>) }, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'40px'</span>) }); $(<span class="string">'.Select-box-2 ul'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'auto'</span>) }, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'46px'</span>) }); $(<span class="string">'.Select-box li'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">var</span> _tihs = $(<span class="built_in">this</span>).attr(<span class="string">'class'</span>); <span class="keyword">var</span> _html = $(<span class="built_in">this</span>).html(); <span class="keyword">if</span> (_tihs == <span class="string">'baidu_s'</span>) { _tihs = <span class="string">'https://www.baidu.com/s'</span>; _name = <span class="string">'wd'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'google_s'</span>) { _tihs = <span class="string">'https://www.google.com/search'</span>; _name = <span class="string">'q'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'bing_s'</span>) { _tihs = <span class="string">'https://www.bing.com/search'</span>; _name = <span class="string">'q'</span>; } $(<span class="string">'.baidu form'</span>).attr(<span class="string">'action'</span>, _tihs); $(<span class="string">'.this_s'</span>).html(_html); $(<span class="string">'#kw'</span>).attr(<span class="string">'name'</span>, _name); $(<span class="string">'.Select-box ul'</span>).css(<span class="string">'height'</span>, <span class="string">'40px'</span>) }); $(<span class="string">'.Select-box-2 li'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">var</span> _tihs = $(<span class="built_in">this</span>).attr(<span class="string">'class'</span>); <span class="keyword">var</span> _html = $(<span class="built_in">this</span>).html(); <span class="keyword">if</span> (_tihs == <span class="string">'baidu_s'</span>) { _tihs = <span class="string">'https://www.baidu.com/s'</span>; _name = <span class="string">'wd'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'google_s'</span>) { _tihs = <span class="string">'https://www.google.com/search'</span>; _name = <span class="string">'q'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'bing_s'</span>) { _tihs = <span class="string">'https://www.bing.com/search'</span>; _name = <span class="string">'q'</span>; } $(<span class="string">'.baidu form'</span>).attr(<span class="string">'action'</span>, _tihs); $(<span class="string">'.this_s'</span>).html(_html); $(<span class="string">'#kw-2'</span>).attr(<span class="string">'name'</span>, _name); $(<span class="string">'.Select-box-2 ul'</span>).css(<span class="string">'height'</span>, <span class="string">'48px'</span>) }); <span class="comment">//清空输入框内容 $('.qingkong').click(function () { cls(); $(this).css('display', 'none') }); function cls() { var sum = 0; var t = document.getElementsByTagName("INPUT"); for (var i = 0; i &lt; t.length; i++) { if (t[i].type == 'text') { ++sum; t[i].value = "";//清空 } } } //清空输入框按钮的显示和隐藏 function if_btn() { var btn_obj = document.getElementById("kw") || document.getElementById("kw-2"); var cls_btn = document.getElementById("qingkong"); var btn_obj_val; var times; //当元素获得焦点时 if (btn_obj == '' || btn_obj == null) { return false; //如果没有找到这个元素，则将函数返回，不继续执行 } btn_obj.onfocus = function () { times = setInterval(function () { btn_obj_val = btn_obj.value; if (btn_obj_val != 0) { cls_btn.style.display = "block"; } else { cls_btn.style.display = "none"; } }, 200); } //元素失去焦点时 btn_obj.onblur = function () { clearInterval(times); } } </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">    * {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">form</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-weight</span>: normal;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">img</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-style</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">list-style</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">a</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-decoration</span>: none</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.card</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">240</span>, <span class="number">229</span>, <span class="number">0</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">96%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin-left</span>: <span class="number">2%</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu</span> <span class="selector-tag">form</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: relative</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-tag">ul</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">left</span>: -<span class="number">1px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-top</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">overflow</span>: hidden</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#484848</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#3385ff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-class">.this_s</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-class">.this_s</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.qingkong</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">right</span>: <span class="number">120px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#666666</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.qingkong</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.qingkong</span><span class="selector-pseudo">:active</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">110px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu-2</span> <span class="selector-tag">form</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">520px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu-2</span> <span class="selector-tag">input</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">13px</span> <span class="number">8px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#Select-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-tag">ul</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">46px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">left</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">1px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-top</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">overflow</span>: hidden</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">46px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#484848</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#3385ff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-class">.this_s</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-class">.this_s</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#kw-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">335px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">outline</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding-left</span>: <span class="number">70px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*修改搜索框样式*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#su-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">90px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-top</span>: <span class="number">#3385ff</span> <span class="number">1px</span> solid;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#2d78f4</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="comment">/*去轮廓阴影*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*光标移动到搜索框颜色*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#su-2</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#su-2</span><span class="selector-pseudo">:active</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">box-shadow</span>: inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.jj-list-tit</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding-left</span>: <span class="number">38.5%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.jj-list-con</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span> auto</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*控制网站列表间距*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.jj-list-con</span> <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">31.333%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">1%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.link-3</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">35</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">transition</span>: all <span class="number">0.2s</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.link-3</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">45</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-weight</span>: bold</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*1栏 小于584*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">584px</span>) {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.navi-height</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">1300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.link-box</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.large-screen</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* 2栏 大于584 小于993px */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">584px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">993px</span>) {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.navi-height</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.link-box</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.large-screen</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*3栏 大于993px*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">993px</span>) {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.navi-height</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* 隐藏footer */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.page-footer</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;% if (theme.banner.enable) { %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 每天切换 banner 图.  Switch banner image every day.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> bannerUrl = <span class="string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/') %&gt;"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">'.jpg'</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url('</span> + bannerUrl + <span class="string">')'</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;% } else { %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('</span>/medias/banner/<span class="number">0.</span>jpg<span class="string">') %&gt;)'</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;% } %&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改导航栏颜色以及透明效果"><a href="#修改导航栏颜色以及透明效果" class="headerlink" title="修改导航栏颜色以及透明效果"></a>修改导航栏颜色以及透明效果</h2><p>打开themes/matery/source/css/matery.css文件，大约在250行，有一个.bg-color属性，修改其属性值即可，代码如下：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bg-color</span> {</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, <span class="number">#4cbf30</span> <span class="number">0%</span>, <span class="number">#0f9d58</span> <span class="number">100%</span>); //修改成自己喜欢的颜色值</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;  //透明效果 值范围 <span class="number">0</span>~<span class="number">1</span>，看情况自己修改</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="新增加载动画"><a href="#新增加载动画" class="headerlink" title="新增加载动画"></a>新增加载动画</h2><p><a href="https://juejin.cn/post/6844904145250598919">参考</a></p><p>1.在 Matery 主题配置文件 _config.yml 中新增配置属性 preloader。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启页面加载动画 true 开启，false 关闭</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>2.在 Matery 主题目录 /layout/_widget 下新增文件 loading.ejs，将以下内容写入 loading.ejs。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.preloader.enable) { %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading-box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-left-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-right-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spinner-box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-border-1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-core"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-border-2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-core"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-word"</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.body.style.overflow = <span class="string">'auto'</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.getElementById(<span class="string">'loading-box'</span>).classList.add(<span class="string">"loaded"</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% } %&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>3.接着在 Matery 主题目录 /css 下新增 loading.css ，并将以下内容写入 loading.css。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.loading-left-bg</span>,</span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.loading-right-bg</span> {</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#37474f</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.loading-right-bg</span> {</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> &gt; <span class="selector-class">.spinner-box</span> {</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.configure-border-1</span> {</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffab91</span>;</span><br><span class="line">  <span class="attribute">animation</span>: configure-clockwise <span class="number">3s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.configure-border-2</span> {</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">63</span>, <span class="number">249</span>, <span class="number">220</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">animation</span>: configure-xclockwise <span class="number">3s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.loading-word</span> {</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.configure-core</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#37474f</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.loaded</span> <span class="selector-tag">div</span><span class="selector-class">.loading-left-bg</span> {</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.loaded</span> <span class="selector-tag">div</span><span class="selector-class">.loading-right-bg</span> {</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.loaded</span> <span class="selector-tag">div</span><span class="selector-class">.spinner-box</span> {</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> configure-clockwise {</span><br><span class="line">  <span class="number">0%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">25%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">50%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">75%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> configure-xclockwise {</span><br><span class="line">  <span class="number">0%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">25%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">50%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">135deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">75%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">225deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">315deg</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>4.然后找到 Matery 主题目录 /layout/_partial 下找到 head.ejs，并在 &lt;head&gt; 标签中添加以下内容引入 loading.css 文件。<br><code>&lt;link rel="stylesheet" type="text/css" href="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/css/loading.css') %&gt;"&gt;</code></p><p>5.再找到 Matery 主题目录 /layout 下找到 layout.ejs，然后在&lt;body&gt; 标签下引入 loading.ejs。<br><code>&lt;%- partial('_widget/loading') %&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
