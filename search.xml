<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>蓝桥杯准备</title>
      <link href="/2022/101963206.html"/>
      <url>/2022/101963206.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>JDK 1.8<br>Eclipse-java-2020-06<br>API 帮助文档</p><h2 id="Eclipse-java-2020-06"><a href="#Eclipse-java-2020-06" class="headerlink" title="Eclipse-java-2020-06"></a>Eclipse-java-2020-06</h2><table><thead><tr><th>快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Ctrl+1</td><td>快速修复(最经典的快捷键,就不用多说了)</td></tr><tr><td>Ctrl+D:</td><td>删除当前行</td></tr><tr><td>Ctrl+Alt+↓</td><td>复制当前行到下一行(复制增加)</td></tr><tr><td>Ctrl+Alt+↑</td><td>复制当前行到上一行(复制增加)</td></tr><tr><td>Alt+↓</td><td>当前行和下面一行交换位置(特别实用,可以省去先剪切,再粘贴了)</td></tr><tr><td>Alt+↑</td><td>当前行和上面一行交换位置(同上)</td></tr><tr><td>Alt+←</td><td>前一个编辑的页面</td></tr><tr><td>Alt+→</td><td>下一个编辑的页面(当然是针对上面那条来说了)</td></tr><tr><td>Alt+Enter</td><td>显示当前选择资源(工程,or 文件 or文件)的属性</td></tr><tr><td>Alt+/</td><td>补全当前所输入代码</td></tr><tr><td>Shift+Enter</td><td>在当前行的下一行插入空行(这时鼠标可以在当前行的任一位置,不一定是最后)</td></tr><tr><td>Shift+Ctrl+Enter</td><td>在当前行插入空行(原理同上条)</td></tr><tr><td>Ctrl+Q</td><td>定位到最后编辑的地方</td></tr><tr><td>Ctrl+L</td><td>定位在某行 (对于程序超过100的人就有福音了)</td></tr><tr><td>Ctrl+M</td><td>最大化当前的Edit或View (再按则反之)</td></tr><tr><td>Ctrl+/</td><td>注释当前行,再按则取消注释</td></tr><tr><td>Ctrl+O</td><td>快速显示 OutLine</td></tr><tr><td>Ctrl+T</td><td>快速显示当前类的继承结构</td></tr><tr><td>Ctrl+W</td><td>关闭当前Editer</td></tr></tbody></table><h3 id="设置工作空间编码格式"><a href="#设置工作空间编码格式" class="headerlink" title="设置工作空间编码格式"></a>设置工作空间编码格式</h3><p>在Window–Preferences–General–Workspace下，面板Text file encoding 选择UTF-8格式</p><h3 id="代码提示和自动补全"><a href="#代码提示和自动补全" class="headerlink" title="代码提示和自动补全"></a>代码提示和自动补全</h3><p>eclipse代码里面的代码提示功能默认是关闭的，只有输入“.”的时候才会提示功能<br>开启代码自动提示功能打开 Window -&gt; Perferences -&gt; Java -&gt;Editor -&gt; Content Assist<br>在右边最下面一栏找到 auto-Activation ，下面有三个选项，找到第二个“Auto activation triggers for Java：”选项在其后的文本框中会看到一个“.”存在。这表示：只有输入“.”之后才会有代码提示和自动补全，我们要修改的地方就是这。把该文本框中的“.”换掉，换成“abcdefghijklmnopqrstuvwxyz.”，这样，你在Eclipse里面写Java代码就可以做到按“abcdefghijklmnopqrstuvwxyz.”中的任意一个字符都会有代码提示。</p><h3 id="代码自动保存"><a href="#代码自动保存" class="headerlink" title="代码自动保存"></a>代码自动保存</h3><p>1.window-&gt; Perferences-&gt; General-&gt;WorkPlace -&gt; build :勾选Save automatically before manual build</p><p>2.window-&gt; Perferences-&gt;Run/Debug -&gt; Launching:在Save required dirty…下勾选always</p><h3 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h3><p>syso<br>main<br>for</p><h3 id="调试的相关快捷键"><a href="#调试的相关快捷键" class="headerlink" title="调试的相关快捷键"></a>调试的相关快捷键</h3><p>F5    单步跳入<br>F6    单步跳过<br>F7    单步返回<br>F8    继续<br>Ctrl+Shift+D    显示变量的值<br>Ctrl+Shift+B    在当前行设置或者去掉断点<br>Ctrl+R    运行至行(超好用，可以节省好多的断点)</p><h2 id="温馨提示："><a href="#温馨提示：" class="headerlink" title="温馨提示："></a>温馨提示：</h2><p>Java 选手请务必不要使用 package 语句，并且确保自己的主类名称为 Main，否则会导致评测系统运行时找不到主类而得 0 分。Java 选手如果程序中引用了类库，在提交时必须将 import 语句与程序的其他部分同时提交。只允许使用 Java 自带的类库.</p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>顾名思义，你只需要填出正确结果就行。如果能使用代码算出来就用代码，如果实在不会写代码，就用手算！对，没错，只要你能手算出来就是对的！</p><p>对于结果填空题，题目保证只有唯一解，选手的结果只有和解完全相同才得分，出现格式错误或有多余内容时不得分.</p><h2 id="大题："><a href="#大题：" class="headerlink" title="大题："></a>大题：</h2><p>大题肯定要写代码啦，这个逃不掉的，所以建议你跟着我的规划每天刷题，不要偷懒，拿个省一和国奖不是问题！</p><p>对于编程大题，评测系统将使用多个评测数据来测试程序。每个评测数据有对应的分数。选手所提交的程序将分别用每个评测数据作为输入来运行。对于某个评测数据，如果选手程序的输出与正确答案是匹配的，则选手获得该评测数据的分数.</p><p>我的建议是，不管你用什么方法，只要能算出结果就行，不要管是不是暴力求解，比赛的时候做出来就行，官方没有要求你做优化，只需要你把题解出来就行</p><h2 id="建议技巧"><a href="#建议技巧" class="headerlink" title="建议技巧"></a>建议技巧</h2><p>官方规则中说到，全部是机器评分！ 所以评分是只看结果的！所以你懂的…如果实在不会还能骗几分！ 对于大题，比如你能手算出结果是什么，但是你不会写代码，你可以强行写一个简单的demo和结果输出，也许能骗几分，当然这是最最最后的办法，希望你还是要平时多练题。科学刷题！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10190.html"/>
      <url>/2022/10190.html</url>
      
        <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>通过对APP的网络传输协议进行抓包，可以了解到APP向服务器发送了什么、服务器向客户端下放了哪些数据。有了这些网络数据，我们可以知道APP都收集了哪些设备信息、个人信息（个人隐私检测？）；可以知道服务器在下放数据的时候，是否发送了多余的他人信息（敏感信息泄露）、是否下放了付费数据特权数据（破解付费VIP关键）；</p><h1 id="Fiddler"><a href="#Fiddler" class="headerlink" title="Fiddler"></a>Fiddler</h1><p><a href="https://www.telerik.com/download">https://www.telerik.com/download</a><br>Fiddler Classic（经典版），这个版本是免费的，不过只能在Windows上使用。</p><p>Fiddler Everywhere可以在所有平台使用，并且相当于Fiddler Classic+postman，但是是收费的。</p><h2 id="Fiddler简介"><a href="#Fiddler简介" class="headerlink" title="Fiddler简介"></a>Fiddler简介</h2><p>Fiddler是最强大最好用的Web调试工具之一， 它能记录所有客户端和服务器的http和https请求。允许你监视、设置断点、甚至修改输入输出数据。Fiddler包含了一个强大的基于事件脚本的子系统，并且能使用.net语言进行扩展。换言之，你对HTTP 协议越了解，你就能越掌握Fiddler的使用方法。你越使用Fiddler，就越能帮助你了解HTTP协议。</p><h2 id="Fiddler的工作原理"><a href="#Fiddler的工作原理" class="headerlink" title="Fiddler的工作原理"></a>Fiddler的工作原理</h2><p>Fiddler 是以代理web服务器的形式工作的，它使用代理地址:127.0.0.1，端口:8888。 当Fiddler退出的时候它会自动注销， 这样就不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。 解决的办法是重新启动下Fiddler。</p><p>个人理解：fiddler是一个抓包工具，当浏览器访问服务器会形成一个请求，此时，fiddler就处于请求之间，当浏览器发送请求，会先经过fiddler，然后在到服务器；当服务器有返回数据给浏览器显示时，也会先经过fiddler，然后数据才到浏览器中显示，这样一个过程，fiddler就抓取到了请求和响应的整个过程。</p><h2 id="Fiddler开启https"><a href="#Fiddler开启https" class="headerlink" title="Fiddler开启https"></a>Fiddler开启https</h2><p>默认Fiddler只能抓取http协议的数据报文<br>如何抓取https=http+ss安全通道协议的报文<br>tool-option 勾选两个捕获<br>tool-option-Action 重置根证书</p><p>允许外部电脑连接到fiddler</p><h1 id="app抓包"><a href="#app抓包" class="headerlink" title="app抓包"></a>app抓包</h1><p><a href="https://mp.weixin.qq.com/s/CbCPJuX1h2uphwQkAystMw">https://mp.weixin.qq.com/s/CbCPJuX1h2uphwQkAystMw</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git使用</title>
      <link href="/2022/101954372.html"/>
      <url>/2022/101954372.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-git使用"><a href="#1-git使用" class="headerlink" title="1. git使用"></a>1. git使用</h1><h2 id="1-1-安装git"><a href="#1-1-安装git" class="headerlink" title="1.1. 安装git"></a>1.1. 安装git</h2><p>Git是一个分布式代码管理工具，可以在本地提交，不需要依赖网络，并且会将每次提交自动备份到本地。每个开发者都可以把远程仓库clone一份到本地，并会把提交历史一并拿过来。</p><a class="btn-beautify " href="/%3Chttps:/git-scm.com/downloads" title="官网下载"><i class="larger>"></i><span>官网下载</span></a><p>按照安装向导来安装Git，相关参数勾选为默认即可</p><p>安装完成后，右键菜单栏会出现Git GUI和Git Bash</p><h2 id="1-2-git-bash使用"><a href="#1-2-git-bash使用" class="headerlink" title="1.2. git bash使用"></a>1.2. git bash使用</h2><p> 复制 ctrl + insert<br> 粘贴 shift + insert</p><h2 id="1-3-git设置http全局代理"><a href="#1-3-git设置http全局代理" class="headerlink" title="1.3. git设置http全局代理"></a>1.3. git设置http全局代理</h2><p>由于国内访问github困难，在克隆Github仓库时，git无法连接GitHub。因此需要git设置http全局代理</p><p>将下方命令的端口填入clash的端口7890,并在命令行中输入，git即可顺利连接GitHub</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">git设置全局http代理和https代理</span></span><br><span class="line">git config --global http.proxy 127.0.0.1:端口</span><br><span class="line">git config --global https.proxy 127.0.0.1:端口</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">取消这两个全局代理</span></span><br><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></tbody></table></figure><p>此时要使用git,要先打开clash</p><h2 id="1-4-联系多个仓库"><a href="#1-4-联系多个仓库" class="headerlink" title="1.4. 联系多个仓库"></a>1.4. 联系多个仓库</h2><p>要想与多个远程仓库的分支建立联系，可以使用 git remote add 指令添加其他的远程仓库，取个与origin不一样的别名就可以啦</p><h2 id="1-5-git工作区域"><a href="#1-5-git工作区域" class="headerlink" title="1.5. git工作区域"></a>1.5. git工作区域</h2><p>Git有四个工作区域</p><p>工作区（Working Directory)：就是你平时存放项目代码的地方</p><p>暂存区(Stage/Index)：用于临时存放你的改动，事实上是一个保存即将提交到文件列表信息的文件<code>git add .</code></p><p>本地仓库(Repository或Git Directory)：就是安全存放数据的位置，这里面有你提交到所有版本的数据，其中HEAD指向最新放入仓库的版本</p><p>远程仓库(Remote Directory)：托管代码的服务器</p><h2 id="1-6-关联本地项目与远程仓库并推送"><a href="#1-6-关联本地项目与远程仓库并推送" class="headerlink" title="1.6. 关联本地项目与远程仓库并推送"></a>1.6. 关联本地项目与远程仓库并推送</h2><ul><li>https</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地文件夹中进入终端，克隆仓库</span></span><br><span class="line"><span class="comment">#git clone [url]</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/wenkexia/AI.git</span><br></pre></td></tr></tbody></table></figure><ul><li>选择ssh方式关联仓库<br>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git init   <span class="comment">#创建一个本地仓库</span></span><br><span class="line"></span><br><span class="line">touch READ.md  <span class="comment"># 一定要创建</span></span><br><span class="line"><span class="comment"># git remote add origin [SSH key]</span></span><br><span class="line">git remote add origin git@github.com:PanXF-HUST/test.git   <span class="comment">#关联远程仓库</span></span><br><span class="line"></span><br><span class="line">git remote -v      <span class="comment">#命令查看关联状况</span></span><br></pre></td></tr></tbody></table></figure><h2 id="1-7-git命令"><a href="#1-7-git命令" class="headerlink" title="1.7. git命令"></a>1.7. git命令</h2><p>git管理的文件有三种状态：已修改（modified）、已暂存（staged）、已提交（committed）</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">'first'</span></span><br><span class="line">git push -u origin main</span><br></pre></td></tr></tbody></table></figure><p>使用git bash操作</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">git config -l  <span class="comment">#查看系统配置</span></span><br><span class="line"></span><br><span class="line">git status  <span class="comment">#查看所有文件状态</span></span><br><span class="line">git status [filename]  <span class="comment">#查看指定文件状态</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>  <span class="comment">#查看提交的详细信息</span></span><br><span class="line">git add .   <span class="comment">#暂存当前分支所有本地修改的文件</span></span><br><span class="line">git commit -m <span class="string">'logs'</span> <span class="comment">#提交暂存区到本地git仓库中 logs：本次修改的描述</span></span><br><span class="line"></span><br><span class="line">git show id <span class="comment">#在推送(push)操作之前，如想要检查文件代码变化，指定提交ID来查看具体的变化。</span></span><br><span class="line"><span class="comment">#如果对上面的提交修改没有疑义，则我们就可以将文件代码推送到远程存储库中</span></span><br><span class="line">git push -u origin <span class="string">"分支"</span>    <span class="comment">#将本地修改内容提交至远程，-u设置默认分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#git fetch + git merge 更安全，等价于git push origin "分支" </span></span><br><span class="line">git fetch origin master <span class="comment">#先抓取远程仓库的更新到本地,如果有冲突就要解决冲突后再合并</span></span><br><span class="line">git merge origin FETCH_HEAD  <span class="comment">#然后与你的本地仓库合并</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-1-git-push命令详解"><a href="#1-7-1-git-push命令详解" class="headerlink" title="1.7.1. git push命令详解"></a>1.7.1. git push命令详解</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">git pull &lt;远程主机名&gt; &lt;远程分支名&gt;:&lt;本地分支名&gt;</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将远程主机 origin 的 master 分支拉取过来，与本地的 brantest 分支合并。</span></span><br><span class="line">git pull origin master:brantest</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">如果远程分支是与当前分支合并，则冒号后面的部分可以省略。</span></span><br><span class="line">git pull origin master</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把本地库的内容推送到远程，第一次使用加上了-u参数，是推送内容并关联分支。</span></span><br><span class="line">git push -u origin main</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git push -f origin main  #强制更新</span><br><span class="line">git push -f  或者 git push --force  分支名 #利用强覆盖方式用你本地的代码替代git仓库内的内容</span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-2-分支相关"><a href="#1-7-2-分支相关" class="headerlink" title="1.7.2. 分支相关"></a>1.7.2. 分支相关</h3><p>分支允许您创建原始主要工作项目的新的、独立的版本。您可以创建一个分支来编辑它以进行更改、添加新功能或在尝试修复错误时编写测试。一个新的分支可以让你在不以任何方式影响主代码的情况下做到这一点。</p><p>总而言之 - 分支让您可以在不影响核心代码的情况下更改代码库，直到您完全准备好实施这些更改。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git branch  <span class="comment">#查看本地分支 </span></span><br><span class="line">git branch -a <span class="comment">#查看全部分支(包含本地和远程</span></span><br><span class="line"></span><br><span class="line">git checkout branch_name  <span class="comment">#切换分支</span></span><br><span class="line"></span><br><span class="line">git branch -d  local_branch_name <span class="comment">#删除本地分支，如果分支包含未合并的更改和未推送的提交，则不允许删除</span></span><br><span class="line">git branch -D local_branch_name <span class="comment">#强制删除本地分支</span></span><br><span class="line"></span><br><span class="line">git push origin --delete <span class="string">"分支名称"</span>  <span class="comment">#删除远程分支</span></span><br><span class="line"></span><br><span class="line">git branch [branchname] <span class="comment">#创建分支 </span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-3-git重新关联远程分支"><a href="#1-7-3-git重新关联远程分支" class="headerlink" title="1.7.3. git重新关联远程分支"></a>1.7.3. git重新关联远程分支</h3><p>取消与当前远程仓库的关联</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 查看远程仓库</span><br><span class="line">git remote show origin</span><br><span class="line"></span><br><span class="line">// 查看当前分支关联的远程分支</span><br><span class="line">git branch -vv</span><br><span class="line"></span><br><span class="line">// 取消与远程仓库关联</span><br><span class="line">git remote remove origin</span><br></pre></td></tr></tbody></table></figure><p>(2) 重新添加需要关联的远程仓库</p><p><code>git remote add origin git@xxxxx:xxx/xxx.git</code><br>(3) 提交到远程分支</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 首先pull一下</span><br><span class="line">git pull origin develop</span><br><span class="line"></span><br><span class="line">// 然后提交至远程分支</span><br><span class="line">git push --set-upstream origin develop</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="1-7-4-撤销命令"><a href="#1-7-4-撤销命令" class="headerlink" title="1.7.4. 撤销命令"></a>1.7.4. 撤销命令</h3><p>运行git reflog命令查看你的历史变更记录</p><p>2.然后用git reset –hard HEAD@{n}，（n是你要回退到的引用位置）回退。</p><p>比如上图可运行 git reset –hard 40a9a83</p><h3 id="1-7-5-git-clone"><a href="#1-7-5-git-clone" class="headerlink" title="1.7.5. git clone"></a>1.7.5. git clone</h3><h2 id="1-8-忽略文件"><a href="#1-8-忽略文件" class="headerlink" title="1.8. 忽略文件"></a>1.8. 忽略文件</h2><p>有些时候我们不想把某些文件纳入版本控制中，比如数据库文件，临时文件，设计文件等</p><p>在主目录下建立”.gitignore”文件，此文件有如下规则：</p><p>1.忽略文件中的空行或以井号(#)开始的行将会被忽略。<br>2.可以使用Liux通配符。例如：星号(*)代表任意多个字符，问号(？)代表一个字符，方括号([abc])代表可选字符范围，<br>大括号({string1,string2})代表可选的字符串等。<br>3.如果名称的最前面有一个感叹号(！)，表示例外规则，将不被忽略。<br>4.如果名称的最前面是一个路径分隔符(/)，表示要忽略的文件在此目录下，而子目录中的文件不忽略。<br>5.如果名称的最后面是一个路径分隔符(/)，表示要忽略的是此目录下该名称的子目录，而非文件（默认文件或目录都忽略）。</p><h2 id="1-9-vscode使用git"><a href="#1-9-vscode使用git" class="headerlink" title="1.9. vscode使用git"></a>1.9. vscode使用git</h2><p><strong>git-commit-plugin</strong>：自动生成规范 git 提交信息的插件。</p><p>使用组合键 ctrl + Shift + P 呼出 指令行，并键入指令 show git commit template 或者点击 git 插件栏上的小图标唤醒插件界面。</p><p><strong>GitLens</strong> 增强了VS Code 中的 Git，并解锁了每个存储库中未开发的知识。它可以帮助您通过 Git 责备注释和 CodeLens直观地可视化代码作者身份，无缝导航和探索Git 存储库，通过丰富的可视化和强大的比较命令获得有价值的见解等等。</p><h2 id="1-10-Idea使用git"><a href="#1-10-Idea使用git" class="headerlink" title="1.10. Idea使用git"></a>1.10. Idea使用git</h2><h2 id="1-11-出现的问题"><a href="#1-11-出现的问题" class="headerlink" title="1.11. 出现的问题"></a>1.11. 出现的问题</h2><h3 id="1-11-1-问题一"><a href="#1-11-1-问题一" class="headerlink" title="1.11.1. 问题一"></a>1.11.1. 问题一</h3><p><a href="https://blog.csdn.net/u010483897/article/details/87799685">https://blog.csdn.net/u010483897/article/details/87799685</a><br>在提交更改时出现<code>commit or discard the untracked or modified content in submodules</code><br>原因是有个别文件夹内还有.git文件，删除就可以了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Github使用</title>
      <link href="/2022/101960077.html"/>
      <url>/2022/101960077.html</url>
      
        <content type="html"><![CDATA[<h1 id="2-github使用"><a href="#2-github使用" class="headerlink" title="2. github使用"></a>2. github使用</h1><p><a href="https://docs.github.com/cn">github文档</a><br><a href="https://www.w3cschool.cn/githubcn/">GitHub 中文教程</a></p><h2 id="2-1-键盘快捷键"><a href="#2-1-键盘快捷键" class="headerlink" title="2.1. 键盘快捷键"></a>2.1. 键盘快捷键</h2><p>shift + ？:查看快捷键<br>. ： 打开网络编辑器</p><h2 id="2-2-GitHub鏡像站"><a href="#2-2-GitHub鏡像站" class="headerlink" title="2.2. GitHub鏡像站"></a>2.2. GitHub鏡像站</h2><p><a href="https://www.library.ac.cn/">https://www.library.ac.cn/</a><br><a href="https://hub.fastgit.xyz/">https://hub.fastgit.xyz/</a><br><a href="https://raw.hellogithub.com/">https://raw.hellogithub.com/</a><br><a href="https://hub.gitfast.tk/">https://hub.gitfast.tk</a><br><a href="https://hub.gitslow.tk/">https://hub.gitslow.tk</a><br><a href="https://hub.verge.tk/">https://hub.verge.tk</a><br><a href="https://raw.gitfast.tk/">https://raw.gitfast.tk</a><br><a href="https://raw.gitslow.tk/">https://raw.gitslow.tk</a><br><a href="https://raw.verge.tk/">https://raw.verge.tk</a></p><h2 id="2-3-GitHub加速下载"><a href="#2-3-GitHub加速下载" class="headerlink" title="2.3. GitHub加速下载"></a>2.3. GitHub加速下载</h2><p><a href="https://hub.fastgit.org/">https://hub.fastgit.org/</a><br><a href="https://ghproxy.com/">https://ghproxy.com/</a></p><h2 id="2-4-加速访问GitHub"><a href="#2-4-加速访问GitHub" class="headerlink" title="2.4. 加速访问GitHub"></a>2.4. 加速访问GitHub</h2><p><a href="https://mp.weixin.qq.com/s/ykN7Swxvbl-PinwrssHiOQ">参考文章</a><br><a href="https://mp.weixin.qq.com/s/C5XUgzL3_KGIga2X-LHJuw">参考</a><br><a href="https://zhuanlan.zhihu.com/p/364453651">https://zhuanlan.zhihu.com/p/364453651</a></p><h3 id="2-4-1-修改本地hosts"><a href="#2-4-1-修改本地hosts" class="headerlink" title="2.4.1. 修改本地hosts"></a>2.4.1. 修改本地hosts</h3><h4 id="2-4-1-1-host文件作用"><a href="#2-4-1-1-host文件作用" class="headerlink" title="2.4.1.1. host文件作用"></a>2.4.1.1. host文件作用</h4><p>1.它可以屏蔽网站</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在Windows系统中，</span><br><span class="line">约定 127.0.0.1为本地计算机的IP地址, 0.0.0.0是错误的IP地址。</span><br><span class="line"></span><br><span class="line">例如，我们在Hosts中，输入以下内容：</span><br><span class="line">举个例子：</span><br><span class="line">127.0.0.1 www.pc280.com # 这个网站影响我孩子的健康成长，我要屏蔽他</span><br><span class="line">这样，计算机解析域名 www.pc280.com 时，就解析到本机IP或错误的IP，达到了屏蔽不健康网站的目的。</span><br><span class="line"></span><br><span class="line">对于现在某些病毒、恶意程序有一大部分会修改我们的host文件，导致我们无法访问某些网站；这时候，当我们发现某些网站不能访问时，我们可以进入Host文件进行观察，如果是因为Host文件造成的网站无法访问，那么我们可以找到并删除病毒所添加的语句，就可以对网站进行正常访问了。</span><br></pre></td></tr></tbody></table></figure><p>2.它可以加快域名解析</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">对于要经常访问的网站，我们可以通过在Hosts中配置域名和IP的映射关系，</span><br><span class="line">提高域名解析速度。由于有了映射关系，当我们输入域名计算机就能很快解析出IP，</span><br><span class="line">而不用请求网络上的DNS服务器。</span><br><span class="line">例如：Host文件中添加一条：222.73.44.198 blog.itful.com</span><br><span class="line">（IP与域名中间要有空格，IP地址一定要输入正确，不然就访问不了该网站了）</span><br><span class="line">——可以通过运行CMD，输入“ping 网站域名” 来获得网站的IP地址！</span><br><span class="line">这样访问侠客岛速度就会略快一点啦，因为他不需要经过DNS域名服务器进行IP地址的解析！</span><br></pre></td></tr></tbody></table></figure><p>3.它可以方便局域网用户</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">在很多单位的局域网中，会有服务器提供给用户使用。</span><br><span class="line">但由于局域网中一般很少架设DNS服务器，</span><br><span class="line">访问这些服务器时，要输入难记的IP地址。</span><br><span class="line">这对不少人来说相当麻烦。</span><br><span class="line">现在可以分别给这些服务器取个容易记住的名字，</span><br><span class="line">然后在Hosts中建立IP映射，这样以后访问的时候，</span><br><span class="line">只要输入这个服务器的名字就行了。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="2-4-1-2-手动修改host"><a href="#2-4-1-2-手动修改host" class="headerlink" title="2.4.1.2. 手动修改host"></a>2.4.1.2. 手动修改host</h4><ul><li>DNS能帮你在访问域名的时候查到实际的IP地址<br>Github 在全球各地都有服务器，而在国内，DNS解析服务基本上都是把域名解析到了美国的服务器，所以访问起来会比较慢<br>但我们可以通过修改本地 hosts 文件来绕过公共DNS解析，直接访问 Github 在韩国、日本等的服务器，从而达到加速访问的目的</li><li>hosts 文件就相当于本地通讯录，你的通讯录里面记了公司的电话。</li></ul><p>1.打开本地host文件<br>C:\Windows\System32\drivers\etc<br>在这个项目<a href="https://github.com/521xueweihan/GitHub520">https://github.com/521xueweihan/GitHub520</a><br>复制添加内容到本地host<br>2.更新DNS缓存  </p><h4 id="2-4-1-3-自动更新host"><a href="#2-4-1-3-自动更新host" class="headerlink" title="2.4.1.3. 自动更新host"></a>2.4.1.3. 自动更新host</h4><p>SwitchHosts<br>Hosts文件路径为：C:\Windows\System32\drivers\etc</p><p>1.这个工具来实现自动更新 hosts 中的IP地址<br>2.我们先到 SwitchHosts 官网下载这款管理工具：<a href="https://swh.app/zh/">https://swh.app/zh/</a><br>3.下载安装好SwitchHosts之后标题随意取，URL地址填这个：<a href="https://raw.hellogithub.com/hosts">https://raw.hellogithub.com/hosts</a><br>4.自动刷新最好建议选1小时<br>5.点击确认后，还要手动启用一下，接着稍等片刻本地 hosts 即会更新</p><h4 id="2-4-1-4-UsbEAm-Hosts-Editor"><a href="#2-4-1-4-UsbEAm-Hosts-Editor" class="headerlink" title="2.4.1.4. UsbEAm Hosts Editor"></a>2.4.1.4. UsbEAm Hosts Editor</h4><p><a href="https://www.dogfight360.com/blog/475/">羽翼城博客下载</a></p><h3 id="2-4-2-反向代理"><a href="#2-4-2-反向代理" class="headerlink" title="2.4.2. 反向代理"></a>2.4.2. 反向代理</h3><h4 id="2-4-2-1-steamcommunity-302（WIN）"><a href="#2-4-2-1-steamcommunity-302（WIN）" class="headerlink" title="2.4.2.1. steamcommunity 302（WIN）"></a>2.4.2.1. steamcommunity 302（WIN）</h4><p>羽翼城大佬后来又开发的 steamcommunity 302 就是通过反代来加速访问 Github 等网站</p><p>软件可以到这里下载：<a href="https://www.dogfight360.com/blog/686/">https://www.dogfight360.com/blog/686/</a><br>比较棘手的是可能会出现80／443端口被占用的情况，这个需要关闭对应监听端口的进程／服务来解决，具体教程可见羽翼城大佬在下载页面做出的说明</p><h4 id="2-4-2-2-FastGithub（WIN／Mac／Linux）"><a href="#2-4-2-2-FastGithub（WIN／Mac／Linux）" class="headerlink" title="2.4.2.2. FastGithub（WIN／Mac／Linux）"></a>2.4.2.2. FastGithub（WIN／Mac／Linux）</h4><p>FastGithub 则是另一款同样基于反代来加速 Gtihub 访问的工具，支持WIN／Mac／Linux三端，还能在docker上一键部署：<br>  FastGithub 除了可以加速访问 Gtihub ，最大的优势是它顺便还能助你直连V2EX<br>  提供域名的纯净IP解析；<br>  提供IP测速并选择最快的IP；<br>  提供域名的tls连接自定义配置；<br>  Google的CDN资源替换，解决大量国外网站无法加载js和css的问题；</p><p><a href="https://github.com/dotnetcore/FastGithub">https://github.com/dotnetcore/FastGithub</a><br>清华网盘：<a href="https://cloud.tsinghua.edu.cn/d/df482a15afb64dfeaff8/">https://cloud.tsinghua.edu.cn/d/df482a15afb64dfeaff8/</a></p><p>Windows端的话，下载后双击即可运行</p><h4 id="2-4-2-3-dev-sidecar（WIN／Mac／Ubuntu／Linux）"><a href="#2-4-2-3-dev-sidecar（WIN／Mac／Ubuntu／Linux）" class="headerlink" title="2.4.2.3. dev-sidecar（WIN／Mac／Ubuntu／Linux）"></a>2.4.2.3. dev-sidecar（WIN／Mac／Ubuntu／Linux）</h4><p>dev-sidecar 这个项目命名取自service-mesh的service-sidecar，意为为开发者打辅助的边车工具，主要就是用于解决 Github 访问的问题：<br><a href="https://gitee.com/docmirror/dev-sidecar">https://gitee.com/docmirror/dev-sidecar</a></p><p>下载后首次运行前会需要让你安装过一个证书，跟着教程安装即可</p><h3 id="2-4-3-加速软件"><a href="#2-4-3-加速软件" class="headerlink" title="2.4.3. 加速软件"></a>2.4.3. 加速软件</h3><p>Steam++（WIN／Mac／Linux／Android）<br>比较稳定的长期可用加速软件Steam++：<a href="https://steampp.net/">https://steampp.net/</a></p><p>这个原本主要是用于加速访问Steam相关网站、社区的</p><p>但软件开发到后面，现在已经支持加速诸多平台了<br>目前支持以下平台的加速：<br>  Steam<br>  Discord<br>  Twitch<br>  Origin<br>  Uplay<br>  国外验证码平台：Google Recaptcha、hCaptcha、Arkoselabs<br>  Github<br>  Microsoft Store<br>  网盘服务：OneDrive、MEGA、Dropbox<br>  其他网站：Nyaa、Pinteres、P站、V2EX等</p><h2 id="2-5-Github学生开发包"><a href="#2-5-Github学生开发包" class="headerlink" title="2.5. Github学生开发包"></a>2.5. Github学生开发包</h2><p>1、申请地址<br>网址：<a href="https://education.github.com/">https://education.github.com/</a></p><p>受到 GitHub 支持的证明材料有：<br>  你的学校的录取通知书（大一新生用，比如我）<br>  你的学生证（手写也行，但是得有照片和钢印）<br>  你的学校教务系统的课表（学习通的也行）<br>  你的成绩单（电子版也可）<br>  或者其他任何可以证明你是在读学生的材料（已经毕业的材料提交无效）</p><p><strong>申请理由</strong><br>I am a junior student from China, and I used Github to share my code with my classmates and friends since I entered university.</p><p>4、Github学生开发者包可用工具<br>具体可以看这里：<a href="https://education.github.com/pack">https://education.github.com/pack</a></p><h3 id="2-5-1-（云服务商和域名篇）"><a href="#2-5-1-（云服务商和域名篇）" class="headerlink" title="2.5.1. （云服务商和域名篇）"></a>2.5.1. （云服务商和域名篇）</h3><p><a href="https://zhuanlan.zhihu.com/p/422851915">https://zhuanlan.zhihu.com/p/422851915</a>#:~:</p><h3 id="2-5-2-DIgitalOcean"><a href="#2-5-2-DIgitalOcean" class="headerlink" title="2.5.2. DIgitalOcean"></a>2.5.2. DIgitalOcean</h3><p><a href="https://link.zhihu.com/?target=https://www.digitalocean.com/">https://link.zhihu.com/?target=https%3A//www.digitalocean.com/</a><br>是云服务商，提供服务器部署等开发服务。Github学生包可以为学生用户提供50美元的额度,仅有一年有效期</p><p>使用方法：需要走一遍完整账号注册流程，在promo code中输入兑换码，注册过程中需要验证支付方式且预支付（支付完毕就充值到账号余额里了），所以实际花费最小为5美元。</p><h3 id="2-5-3-netwise"><a href="#2-5-3-netwise" class="headerlink" title="2.5.3. netwise"></a>2.5.3. netwise</h3><p>是英国的基础设施供应商。Github学生包可为学生提供12个月的免费服务器托管。</p><h3 id="2-5-4-EducationHost"><a href="#2-5-4-EducationHost" class="headerlink" title="2.5.4. EducationHost"></a>2.5.4. EducationHost</h3><p>EducationHost(<a href="https://link.zhihu.com/?target=https://educationhost.co.uk/)%E6%98%AF%E7%94%B1%E8%8B%B1%E5%9B%BD%E5%85%AC%E5%8F%B8EducationHost%E6%8F%90%E4%BE%9B%E7%9A%84%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E8%B5%84%E6%BA%90%E3%80%82Github%E5%AD%A6%E7%94%9F%E5%8C%85%E5%8F%AF%E4%B8%BA%E5%AD%A6%E7%94%9F%E6%8F%90%E4%BE%9B1%E5%B9%B4%E7%9A%84%E8%AE%BE%E8%AE%A1%E8%80%85%E5%A5%97%E8%A3%85%EF%BC%8C%E5%8C%85%E5%90%AB%E4%BB%A5%E4%B8%8B%E5%86%85%E5%AE%B9%EF%BC%9A">https://link.zhihu.com/?target=https%3A//educationhost.co.uk/)是由英国公司EducationHost提供的虚拟主机资源。Github学生包可为学生提供1年的设计者套装，包含以下内容：</a></p><p>1G带宽<br>免费二级域名(*.educationhost.cloud等)<br>一键部署<br>MySQL数据库<br>LetsEncrypt提供的SSL<br>可升级</p><h3 id="2-5-5-New-Relic"><a href="#2-5-5-New-Relic" class="headerlink" title="2.5.5. New Relic"></a>2.5.5. New Relic</h3><p>主要提供服务器的性能监控功能。Github学生包可为学生提供价值300美元/月的学生期间功能全部免费服务。<br>使用方法：根据官方文档（<a href="https://developer.newrelic.com/students/%EF%BC%89%E6%89%80%E8%BF%B0%EF%BC%8C%E5%8F%AA%E9%9C%80%E6%B3%A8%E5%86%8C%E5%85%8D%E8%B4%B9%E8%B4%A6%E6%88%B7%EF%BC%8C%E5%B9%B6%E5%8D%87%E7%BA%A7%E4%B8%BAStudent">https://developer.newrelic.com/students/）所述，只需注册免费账户，并升级为Student</a> Plan即可。</p><h3 id="2-5-6-Namecheap"><a href="#2-5-6-Namecheap" class="headerlink" title="2.5.6. Namecheap"></a>2.5.6. Namecheap</h3><p><a href="https://www.namecheap.com/">https://www.namecheap.com/</a><br>Namecheap 也是一家综合服务商，提供域名注册、主机管理等服务。Github学生包可以为学生用户提供一年SSL免费证书和.me域名的注册（一年）。</p><p>使用方法：在付款时使用Offer code</p><p>使用方法：绑定Github账户</p><h3 id="2-5-7-Name-com"><a href="#2-5-7-Name-com" class="headerlink" title="2.5.7. Name.com"></a>2.5.7. Name.com</h3><p><a href="https://www.name.com/zh-cn/">https://www.name.com/zh-cn/</a><br>是一家典型的云服务商，提供域名注册、主机托管等服务。Github可以为学生用户提供一年期的免费域名及其安全防护。</p><h3 id="2-5-8-tech"><a href="#2-5-8-tech" class="headerlink" title="2.5.8. .tech"></a>2.5.8. .tech</h3><p><a href="https://get.tech/">https://get.tech/</a><br>是个看上去很有技术感的域名，在这里 你可以拥有一个，让你变得高大上起来。Github为你提供了1年的免费.tech域名，加上2个100MB容量的免费邮箱账号。</p><h2 id="2-6-Github-Actions"><a href="#2-6-Github-Actions" class="headerlink" title="2.6. Github Actions"></a>2.6. Github Actions</h2><p>GitHub Actions 是一个 CI/CD（持续集成/持续部署）工具</p><p>GitHub Actions 的工作原理：当我们提前设置好需要自动化执行的任务脚本（.github/workflows 下的 .yml 文件）后，GitHub Actions 监控当前仓库的某一个操作（如：push），一旦有此操作，就会分配一个虚拟主机来自动化执行这些任务。</p><p>我们设置的任务即为 Action ，它存放在项目根目录的 .github/workflows 文件下，后缀为 .yml。一个 Action 相当于是一个工作流 workflow，一个工作流则可以有多个任务 job，而每个任务又能分成几个步骤 step。任务、步骤会依次执行。</p><p><a href="https://github.com/marketplace?type=actions">官方市场</a><br><a href="https://github.com/sdras/awesome-actions">awesome actions</a></p><h3 id="2-6-1-基本概念"><a href="#2-6-1-基本概念" class="headerlink" title="2.6.1. 基本概念"></a>2.6.1. 基本概念</h3><p>GitHub Actions 有一些自己的术语。</p><p>（1）workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</p><p>（2）job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</p><p>（3）step（步骤）：每个 job 由多个 step 构成，一步步完成。</p><p>（4）action （动作）：每个 step 可以依次执行一个或多个命令（action）。</p><h3 id="2-6-2-模板"><a href="#2-6-2-模板" class="headerlink" title="2.6.2. 模板"></a>2.6.2. 模板</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>  <span class="comment">#实现 Checkout 一个 git 仓库到容器。</span></span><br><span class="line">      <span class="comment"># Checkout 第三方仓库 git@github.com:sanonz/hexo-theme-concise.git 的 master 分支到容器 themes/concise 目录。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">sanonz/hexo-theme-concise</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">master</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">themes/concise</span></span><br></pre></td></tr></tbody></table></figure><h3 id="2-6-3-act工具"><a href="#2-6-3-act工具" class="headerlink" title="2.6.3. act工具"></a>2.6.3. act工具</h3><p>如果每次都要修改代码后推到远端才能测试新的或修改后的 GitHub Actions 代码的话，效率就太低了，最好能在本地调试 GitHub Actions 代码以便快速验证。</p><p><a href="https://github.com/nektos/act">act</a><br>用 act 本地运行 Github Actions，快速验证调试,极大地方便了我们调试代码。</p><p>注意：act 使用有一个前提条件是必需安装 docker。</p><h4 id="2-6-3-1-安装"><a href="#2-6-3-1-安装" class="headerlink" title="2.6.3.1. 安装"></a>2.6.3.1. 安装</h4><p>choco  uninstall act-cli</p><p>安装在C:\ProgramData\chocolatey\lib\act-cli</p><p>现状：成功安装，还不会用</p><h4 id="2-6-3-2-工作原理"><a href="#2-6-3-2-工作原理" class="headerlink" title="2.6.3.2. 工作原理"></a>2.6.3.2. 工作原理</h4><p>act 实际上是通过读取本地的.github/workflows 目录里边定义的actions，使用docker api pull 或者构建需要的镜像</p><p>然后按需执行，当然实际上不同阶段还会包含一些中间结果的，这个也是act 解决的</p><h4 id="2-6-3-3-Act使用的一些参数"><a href="#2-6-3-3-Act使用的一些参数" class="headerlink" title="2.6.3.3. Act使用的一些参数"></a>2.6.3.3. Act使用的一些参数</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">act -l  #列出当前目录下的所有 actions</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>–bind . 是把本地的目录绑定到 docker 容器，可以提高效率（比如，可以省掉每次运行重新安装 npm 依赖的时间）</p><p>github action可以读取保存在repo中的secret ，但是我们使用act的时候不能读取到这些secret<br>我们可以在本地创建一个名为act_secret_file保存密码(这里名称你可以自己定义)，格式为键值对就行。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SERVER_IP="xxxxxx"</span><br><span class="line">SSH_PRIVATE_KEY="xxxxxx"</span><br></pre></td></tr></tbody></table></figure><p>在运行的时候我们带上文件路径<br><code>act --secret-file /Users/wl/act_secret_file</code>action中的secret就可以正常被读取了</p><p>直接运行act命令有时候不能执行到最新的代码，我们可以添加 rebuild 参数,这样确保我们运行的是最新的代码<br><code>act --rebuild --secret-file /Users/wl/act_secret_file</code></p><h3 id="2-6-4-使用SSH连接Github-Action服务器"><a href="#2-6-4-使用SSH连接Github-Action服务器" class="headerlink" title="2.6.4. 使用SSH连接Github Action服务器"></a>2.6.4. 使用SSH连接Github Action服务器</h3><p><a href="https://zhuanlan.zhihu.com/p/387389708">https://zhuanlan.zhihu.com/p/387389708</a></p><h2 id="2-7-gists"><a href="#2-7-gists" class="headerlink" title="2.7. gists"></a>2.7. gists</h2><p>gist类似挂在网上的记事本，把平时的脚本或函数直接分享在平台上供人搜索。</p><p>Gist是一种与其他人共享代码片段和粘贴的简单方法。 当您需要与同事或朋友共享示例代码或技术时，可以使用它。<br>GitHub提供了一个平台，可以作为团队（私人仓库）或整个世界（公共仓库）的回购共享整个项目。<br>Gist就是小型代码片段的分享. 类似的服务还有如 Pastebin 和 Pastie, 但明显出生于Github的Gist更有优势了。<br>Gist可以用来写一些东西，然后可以分享，类似笔记软件<br>每个Gist都是一个Git库，有版本历史，可以被fork或clone<br>Gist有两种：公开的和私有的，私有的不会在你的Gist主页显示，也无法用搜索引擎搜索到，但这个链接是人人都能访问的<br>Gist可以搜索、下载、嵌入到网页</p><h3 id="2-7-1-创建新Gist-编辑修改Gist"><a href="#2-7-1-创建新Gist-编辑修改Gist" class="headerlink" title="2.7.1. 创建新Gist, 编辑修改Gist"></a>2.7.1. 创建新Gist, 编辑修改Gist</h3><ul><li><p><a href="https://gist.github.com/">https://gist.github.com/</a> , 直接填写内容或者在自己的Gist 右上角上点击 New gist即可</p></li><li><p>可以一个Gist多个文件, 使用 Add file 添加即可.</p></li><li><p>可以设置indent为空格space还是tab, tab长度, 是否行缩进.</p></li><li><p>点 Create secret gist 创建私有代码, Create public gist 创建开放的gist. 前者可以不被搜索到.</p></li><li><p>创建Gist后,点选自己的某个Gist, 进去后右上角可进行网上的编辑/修改: Edit, 编辑; Delete, 删除; Star, 标星. 旁边还有举报 . 修改后下方的Update public/secret gist即可保存修改.</p></li><li><p>编辑时上方的Make Secret可以转为私有库.</p></li></ul><h3 id="2-7-2-浏览Gist"><a href="#2-7-2-浏览Gist" class="headerlink" title="2.7.2. 浏览Gist"></a>2.7.2. 浏览Gist</h3><p>左上角可以看到列出自己最近的gist, 右上角See all of your gists可以查看所有自己的Gist.私有gist会显示SECRET标签.<br>搜索框可以进行代码搜索(开放gist), 可能搜出相关的代码片段<br>点All Gists可以到Discover gists模式, 查看最近发布或被fork的gists(或者别的排序方式). 参考意义不大.<br>在浏览Gist时点击右上GithubGist图标或者左上头像选Your Gists即可返回<br>在浏览Gist文件时, 点Raw可以看文字的纯代码.</p><h3 id="2-7-3-分享"><a href="#2-7-3-分享" class="headerlink" title="2.7.3. 分享"></a>2.7.3. 分享</h3><p>点击一个gist进去, , 在 Edit菜单下方有几个选项:</p><ul><li>分享 (可选方式框,代码/地址, 复制到黏贴板),<br>Embed 是HTML嵌入代码,<br>Share是分享链接,<br>Clone via HTTPS是https克隆<br>Clone via SSH是ssh克隆</li><li>下载下来使用Github Desktop打开管理,</li><li>Download Zip(下载全部内容并打包).</li></ul><h3 id="2-7-4-gist-id"><a href="#2-7-4-gist-id" class="headerlink" title="2.7.4. gist id"></a>2.7.4. gist id</h3><p>你打开一个gist后，地址栏的最后一部分就是你这个gist文件的id<br><a href="https://gist.github.com/wenkexia/gistid">https://gist.github.com/wenkexia/gistid</a></p><h2 id="2-8-Fork-使用"><a href="#2-8-Fork-使用" class="headerlink" title="2.8. Fork 使用"></a>2.8. Fork 使用</h2><p>一般来说，forks 被用于去更改别人的项目（贡献代码给已经开源的项目）或者使用别人的项目作为你自己想法的初始开发点。</p><p>提出更改别人的项目</p><p>使用 forks 提出改变的一个很好的例子是漏洞修复。与其记录一个你发现的问题，比如：</p><p>●Fork 这个仓库</p><p>●进行修复</p><p>●向这个项目的拥有者提交一个 pull requset</p><p>如果这个项目的拥有者认同你的成果，他们可能会将你的修复更新到原始的仓库中！</p><p>使用别人的项目作为你自己想法的初始开发点</p><p>开源的核心是共享代码，我们可以制作更好、更可靠的软件。</p><p>事实上，当你在 GitHub 上创建一个仓库时，你可以选择自动包含一个许可文件，这个文件决定你是否希望将你的项目分享给其他人。</p><h1 id="3-git与github账号绑定"><a href="#3-git与github账号绑定" class="headerlink" title="3. git与github账号绑定"></a>3. git与github账号绑定</h1><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置git用户和邮箱</span></span><br><span class="line">git config --global user.name <span class="string">"xxxx"</span>  </span><br><span class="line">git config --global user.email <span class="string">"xxxxx@qq.com"</span> </span><br><span class="line"></span><br><span class="line">git config --global --list  <span class="comment">#查看配置的结果   </span></span><br><span class="line"><span class="comment"># 本机生成SSH公钥，实现免密登录    </span></span><br><span class="line">ssh-keygen -t rsa</span><br></pre></td></tr></tbody></table></figure><h2 id="3-1-将公钥添加到Github管理平台"><a href="#3-1-将公钥添加到Github管理平台" class="headerlink" title="3.1. 将公钥添加到Github管理平台"></a>3.1. 将公钥添加到Github管理平台</h2><p>我的目录是：C:\Users\wenke.ssh\ id_rsa.pub<br>将ssh文件夹中的公钥添加到GitHub管理平台中，进入github设置setting-》ssh and GPG keys-》new ssh key</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ssh -T git@github.com <span class="comment">#验证是否绑定成功</span></span><br></pre></td></tr></tbody></table></figure><h1 id="4-gitee"><a href="#4-gitee" class="headerlink" title="4. gitee"></a>4. gitee</h1><p><a href="https://github.com/marketplace/actions/gitee-pages-action">Gitee Pages Action</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Joplin全平台同步笔记</title>
      <link href="/2022/101913972.html"/>
      <url>/2022/101913972.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-搭建Joplin-Cloud同步服务器"><a href="#1-搭建Joplin-Cloud同步服务器" class="headerlink" title="1. 搭建Joplin Cloud同步服务器"></a>1. 搭建Joplin Cloud同步服务器</h2><p>为什么需要自建Joplin Cloud：效率更高，更稳定。</p><h3 id="1-1-docker-compose搭建"><a href="#1-1-docker-compose搭建" class="headerlink" title="1.1. docker-compose搭建"></a>1.1. docker-compose搭建</h3><p>参考：(<a href="https://blog.laoda.de/archives/docker-compose-install-joplin-server#%E5%89%8D%E8%A8%80">https://blog.laoda.de/archives/docker-compose-install-joplin-server#%E5%89%8D%E8%A8%80</a>)</p><p>GitHub原项目地址（感谢作者的付出）：<a href="https://github.com/laurent22/joplin">https://github.com/laurent22/joplin</a></p><p>Docker镜像地址：<a href="https://hub.docker.com/r/joplin/server">https://hub.docker.com/r/joplin/server</a></p><p>官网地址：<a href="https://joplinapp.org/">https://joplinapp.org/</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /app/joplin &amp;&amp; cd /app/joplin</span><br><span class="line"></span><br><span class="line">vim docker-compose.yml</span><br></pre></td></tr></tbody></table></figure><p>编写 docker-compose.yml文件</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">db:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres:13</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">./data/postgres:/var/lib/postgresql/data</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"端口号:5432"</span>  <span class="comment"># 左边的端口可以更换，右边不要动！</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=</span> <span class="comment"># 改成你自己的密码</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_USER=</span> <span class="comment"># 改成你自己的用户名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_DB=joplindb</span></span><br><span class="line">    <span class="attr">app:</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">joplin/server:latest</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">"端口号:22300"</span> <span class="comment"># 左边的端口可以更换，右边不要动！</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">        <span class="attr">environment:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">APP_PORT=22300</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">APP_BASE_URL=https://joplin.wenkex.top</span> <span class="comment"># 改成反代的域名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">DB_CLIENT=pg</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_PASSWORD=</span> <span class="comment"># 与上面的密码对应！</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_DATABASE=joplindb</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_USER=arts</span>  <span class="comment"># 与上面的用户名对应！</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_PORT=5432</span> <span class="comment"># 与上面左边的对应！</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">POSTGRES_HOST=db</span></span><br></pre></td></tr></tbody></table></figure><p>打开数据库防火墙端口,数据库端口设置所有ip可见</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动容器</span></span><br><span class="line">docker-compose up -d  </span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-设置反向代理"><a href="#1-2-设置反向代理" class="headerlink" title="1.2. 设置反向代理"></a>1.2. 设置反向代理</h3><p>1.到你购买域名的供应商控制台，将域名解析到你的服务器ip。</p><p>2.在宝塔的网站配置文件中设置反代<br>删除默认的两段location块，并加入以下location块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Reverse Porxy For </span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:端口号/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header Range $http_range;</span><br><span class="line">        proxy_set_header If-Range $http_if_range;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 20000m;</span><br><span class="line">        proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span><br><span class="line">        proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>3.申请Let’s Encrypt免费证书</p><h3 id="1-3-服务端使用"><a href="#1-3-服务端使用" class="headerlink" title="1.3. 服务端使用"></a>1.3. 服务端使用</h3><p>默认账号：admin@localhost</p><p>默认密码：admin</p><h2 id="2-window客户端"><a href="#2-window客户端" class="headerlink" title="2. window客户端"></a>2. window客户端</h2><p>Joplin的数据默认是存储在C:\Users\Username.config\joplin-desktop下的。但是存储位置是无法更改的、<br>带参启动joplin快捷方式：</p><p>找好你想存放东西的目录，这里以D:\Notes为例；<br>把原本存储在C:\Users\Username.config\joplin-desktop下的数据（这里是我的电脑上Joplin的默认存储路径，记得将Username代入成自己的用户名。），全部转移到D:\Notes下来；<br>（这一步本质是带参启动Joplin，这里我们假设你桌面上有一个Joplin的快捷方式，如果没有的话，带参启动即可）在Joplin的快捷方式上右键，点击属性。在目标后面加上<br>–profile D:\Notes即可（注意–两个横杠前面还有一个空格）<br>从桌面右下角任务栏里面把Joplin完全退出<br>点击你刚刚修改过的快捷方式 （或者带参启动Joplin）and Enjoy!<br>–profile D:\data\joplin-desktop</p><h3 id="2-1-使用外部编辑器"><a href="#2-1-使用外部编辑器" class="headerlink" title="2.1. 使用外部编辑器"></a>2.1. 使用外部编辑器</h3><p>打开Joplin，然后点击菜单栏的工具，在弹出的菜单中选择选项。在弹出的界面中如下填写</p><p>文本编辑器路径<br>参数填-n</p><p>打开Joplin，并且打开我们想要编辑和浏览的笔记，然后使用快捷键“CTRL+E”便可以呼出Typora，并且你会发现我们选中的笔记正显示在打开的Typora中，这时候Joplin的格式菜单栏会显示“正在监控变化”</p><p>当我们操作完成（修改的笔记一定要保存）并关闭外部编辑器后，记得点击“正在监控变化”按钮取消外部编辑模式。</p><h2 id="安卓端"><a href="#安卓端" class="headerlink" title="安卓端"></a>安卓端</h2><p>没有大纲，跳转很不方便，每次想要编辑内容要慢慢找<br>不能安装插件</p><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3. 参考"></a>3. 参考</h2><p><a href="https://lightzhan.xyz/index.php/category/software-installation-and-use/joplin/">https://lightzhan.xyz/index.php/category/software-installation-and-use/joplin/</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建LInux环境</title>
      <link href="/2022/1019421.html"/>
      <url>/2022/1019421.html</url>
      
        <content type="html"><![CDATA[<h1 id="VMware搭建linux"><a href="#VMware搭建linux" class="headerlink" title="VMware搭建linux"></a>VMware搭建linux</h1><p>从原理上来说，VMware 虚拟化是直接在计算机硬件或主机操作系统上面插入一个精简的软件层。该软件层包含一个以动态和透明方式分配硬件资源的虚拟机监视器（或称“管理程序VMM”）。多个操作系统可以同时运行在单台物理机上，彼此之间共享硬件资源。由于是将整台计算机（包括 CPU、内存、操作系统和网络设备）封装起来，因此虚拟机可与所有标准的 x86 操作系统、应用程序和设备驱动程序完全兼容。可以同时在单台计算机上安全运行多个操作系统和应用程序，每个操作系统和应用程序都可以在需要时访问其所需的资源。</p><h2 id="如何让-VMWare-和-Hyper-V-共存？"><a href="#如何让-VMWare-和-Hyper-V-共存？" class="headerlink" title="如何让 VMWare 和 Hyper-V 共存？"></a>如何让 VMWare 和 Hyper-V 共存？</h2><p>将 Windows 版本升级到 Windows 10 20H1 或更高版本。<br>将 VMWare Workstation/Player 升级到 15.5.5 或更高版本，本文以 VMWare Player 为例。注意，在安装时，需要在兼容的设置这一步勾选“自动安装 Windows Hypervisor Platform (WHP)”。</p><h2 id="配置虚拟机"><a href="#配置虚拟机" class="headerlink" title="配置虚拟机"></a>配置虚拟机</h2><h2 id="安装Vmware-Tools工具"><a href="#安装Vmware-Tools工具" class="headerlink" title="安装Vmware Tools工具"></a>安装Vmware Tools工具</h2><p>可以为虚拟机提供更好的显卡性能（游戏玩家最爱的）<br>同步物理主机时间<br>自动捕获和释放鼠标光标（不用按下Ctrl + Alt键来释放鼠标）<br>实现物理主机和虚拟机或者虚拟机和虚拟机之间进行复制和粘贴操作（文件传输）<br>点击Vmware Workstation 菜单栏的“虚拟机”点击“安装 Vmware Tools（T）</p><p><strong>设置虚拟机快照。</strong><br>虚拟机的快照可以把当前虚拟机的状态保存下来，方便以后可以还原到这个状态，理论上快照可以设置很多个，但是设置过多的快照会影响虚拟机的性能，并在会增大物理磁盘的存储空间，快照的常见的应用是：安装大型专业软件时，害怕安装失败，那么在安装之前设置一个快照，方面以后还原虚拟机的状态，重新测试安装软件，或者是在虚拟机设置一系列很复杂的系统配置，担心设置不成功，那么在设置之前可以做一个快照，万一配置系统不顺，可以还原到快照之前的状态，重新做配置。</p><p><strong>虚拟机网络的使用网络模式：</strong><br><strong>映射网络驱动器</strong></p><p><strong>通过Vmware导出虚拟机</strong><br>有时候，我们设置好的虚拟机需要在其他电脑上面使用，那么可以使用虚拟机迁移功能，把自己电脑的虚拟机，导出，再到其他电脑上面使用Vmware Workstation进行导入（版本最好一致） 在菜单栏点击“文件”》点击“导出为OVF（E）…”</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>虚拟机VMware中的CentOS字符命令界面和图形界面切换</strong><br>ctrl+alt+f1   ctrl+alt+f2</p><h3 id="VMWare和Hyper-V-共存"><a href="#VMWare和Hyper-V-共存" class="headerlink" title="VMWare和Hyper-V 共存"></a>VMWare和Hyper-V 共存</h3><p>将 Windows 版本升级到 Windows 10 20H1 或更高版本。<br>将 VMWare Workstation/Player 升级到 15.5.5 或更高版本<br>在安装时，勾选“自动安装 Windows Hypervisor Platform (WHP)”。<br>打开虚拟机的设置选项，找到“处理器”，去掉如图所示的三个选项前面的钩，点击“确定”</p><h2 id="克隆"><a href="#克隆" class="headerlink" title="克隆"></a>克隆</h2><p>克隆虚拟机可以把一个虚拟机复制成多个虚拟机，那么就不用重新安装虚拟机了，克隆虚拟机需要在虚拟机关机的状态下进行，在虚拟机关机的情况下，右键虚拟机》管理》克隆</p><h3 id="完整克隆（Full-Clone）"><a href="#完整克隆（Full-Clone）" class="headerlink" title="完整克隆（Full Clone）"></a>完整克隆（Full Clone）</h3><p>完全克隆的虚拟机不依赖源虚拟机，是完全独立的虚拟机，它的性能与被克隆虚拟机相同。</p><p>由于完整克隆不与父虚拟机共享虚拟磁盘，所以创建完整克隆所需的时间比链接克隆更长。如果涉及的文件较大，完整克隆可能需要数分钟才能创建完成。完整克隆只复制克隆操作时的虚拟机状态，因此无法访问父虚拟机的快照。</p><h3 id="链接克隆（Linked-Clone）"><a href="#链接克隆（Linked-Clone）" class="headerlink" title="链接克隆（Linked Clone）"></a>链接克隆（Linked Clone）</h3><p>依赖于源虚拟机（称为父虚拟机）。由于链接克隆是通过父虚拟机的快照创建而成，因此节省了磁盘空间，而且克隆速度非常快，但是克隆后的虚拟机性能能会有所下降。</p><p>对父虚拟机的虚拟磁盘进行的更改不会影响链接克隆，对链接克隆磁盘所做的更改也不会影响父虚拟机。但是如果父虚拟机损坏或快照点删除，链接克隆的虚拟机也不能使用；如果父虚拟机移动位置，需要重新指定父虚拟机的位置，再启动链接克隆虚拟机。</p><h2 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h2><p><a href="https://blog.csdn.net/collection4u/article/details/14127671">https://blog.csdn.net/collection4u/article/details/14127671</a></p><p>VMware虚拟机有三种网络模式，分别是Bridged(桥接模式)、NAT(网络地址转换模式)、Host-only(主机模式)。</p><p>VMware workstation安装好之后会多出两个网络连接，分别是VMware Network Adapter VMnet1和VMware Network Adapter VMnet8，这两个是可以在主机的网络连接中可以查看到的，<br>还有一个是VMnet0，可以在virtual network editor中看到。</p><p>这三个虚拟网络都是VMware安装好之后自动生成的，不需要手动修改。其中VMnet0用于Bridged模式，VMnet1用于Host-only模式，Vmnet8用于NAT模式。VMnet8和VMnet1提供DHCP服务，VMnet0默认则不提供。</p><h3 id="Bridged-桥接模式"><a href="#Bridged-桥接模式" class="headerlink" title="Bridged(桥接模式)"></a>Bridged(桥接模式)</h3><p> 将虚拟机直接连接到到外部网络</p><p> 在这种模式下，VMWare虚拟出来的操作系统就像是局域网中的一台独立的主机，它可以访问网内任何一台机器，你需要手工为虚拟系统配置IP地址、子网掩码，而且还要和宿主机器处于同一网段，这样虚拟系统才能和宿主机器进行通信，虚拟系统和宿主机器的关系，就像连接在同一个Hub上的两台电脑。从网络技术上理解相当于在宿主机前端加设了一个虚拟交换机，然后宿主机和所有虚拟机共享这个交换机。</p><p>如果你想利用VMWare在局域网内新建一个虚拟服务器，为局域网用户提供网络服务，就应该选择桥接模式。</p><h3 id="NAT-网络地址转换模式"><a href="#NAT-网络地址转换模式" class="headerlink" title="NAT(网络地址转换模式)"></a>NAT(网络地址转换模式)</h3><p>虚拟机共享主机的IP地址</p><p>使用NAT模式，就是让虚拟系统借助NAT的功能，通过宿主机所在的网络来访问公网。在这种模式下宿主机成为双网卡主机，同时参与现有的宿主局域网和新建的虚拟局域网，但由于加设了一个虚拟的NAT服务器，使得虚拟局域网内的虚拟机在对外访问时，使用的则是宿主机的IP地址，这样从外部网络来看，只能看到宿主机，完全看不到新建的虚拟局域网。</p><p>采用NAT模式最大的优势是虚拟系统接入互联网非常简单，你不需要进行任何其他的配置，只需要宿主机器能访问互联网即可。</p><p>如果你想利用VMWare安装一个新的虚拟系统，在虚拟系统中不用进行任何手工配置就能直接访问互联网，建议你采用NAT模式。</p><h4 id="宿主机网络适配器"><a href="#宿主机网络适配器" class="headerlink" title="宿主机网络适配器"></a>宿主机网络适配器</h4><p>检查宿主机的VMware DHCP Service 和VMwareNAT Service两个服务是否启动：</p><h4 id="Virtual-Network-Editor设置"><a href="#Virtual-Network-Editor设置" class="headerlink" title="Virtual Network Editor设置"></a>Virtual Network Editor设置</h4><p>VMware安装后之后可以点击菜单栏的Edit中的Virtual Network Editor对虚拟的网卡进行配置修改。</p><h4 id="虚拟机中网络配置"><a href="#虚拟机中网络配置" class="headerlink" title="虚拟机中网络配置"></a>虚拟机中网络配置</h4><p>在centos虚拟机中修改网络配置主要在/etc/sysconfig/network-scripts/ifcfg-eth33</p><h3 id="Host-only-主机模式"><a href="#Host-only-主机模式" class="headerlink" title="Host-only(主机模式)"></a>Host-only(主机模式)</h3><p>可以在专用网络内连接虚拟机</p><h2 id="设置固定ip"><a href="#设置固定ip" class="headerlink" title="设置固定ip"></a>设置固定ip</h2><h3 id="进入vmware设置NAT模式"><a href="#进入vmware设置NAT模式" class="headerlink" title="进入vmware设置NAT模式"></a>进入vmware设置NAT模式</h3><p>1.右键虚拟机→设置→网络适配器→选择NAT模式</p><p>2.编辑→虚拟网络编辑器→更改设置<br>点击“Vmnet8 NAT模式”→取消勾选“使用本地DHCP服务将IP地址分配给虚拟机”<br>子网ip设置192.168.88.0<br>→NAT设置→网关IP(192.168.88.2)<br>子网掩码固定：255.255.255.0</p><h3 id="centos7配置静态ip"><a href="#centos7配置静态ip" class="headerlink" title="centos7配置静态ip"></a>centos7配置静态ip</h3><p>进去centos7系统，修改网络配置文件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig   #查看网络</span><br><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33    #编辑网卡配置文件</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">DEFROUTE="yes"</span><br><span class="line">IPV4_FAILURE_FATAL="no"</span><br><span class="line">IPV6INIT="yes"</span><br><span class="line">IPV6_AUTOCONF="yes"</span><br><span class="line">IPV6_DEFROUTE="yes"</span><br><span class="line">IPV6_FAILURE_FATAL="no"</span><br><span class="line">IPV6_ADDR_GEN_MODE="stable-privacy"</span><br><span class="line">NAME="ens33"</span><br><span class="line">UUID="f59f2104-66d4-42a3-9302-996c5b8c261b"</span><br><span class="line">DEVICE="ens33"</span><br><span class="line">ONBOOT="yes"</span><br><span class="line">TYPE="Ethernet"</span><br><span class="line">PROXY_METHOD="none"</span><br><span class="line">BROWSER_ONLY="no"</span><br><span class="line">BOOTPROTO="static"       #static表示静态IP</span><br><span class="line">IPADDR=192.168.88.130   #配置IP地址 </span><br><span class="line">NETMASK=255.255.255.0    #配置子网掩码</span><br><span class="line">GATEWAY=192.168.88.2     #配置网关,一般是ip地址最后一位改为2</span><br><span class="line">DNS1=8.8.8.8             #配置DNS服务器地址，8.8.8.8是谷歌免费的DNS服务器</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><code>service network restart  #重启网络服务</code></p><h2 id="虚拟化引擎"><a href="#虚拟化引擎" class="headerlink" title="虚拟化引擎"></a>虚拟化引擎</h2><h3 id="虚拟化Intel-VT-x-EPT和AMD-V-RVI-V"><a href="#虚拟化Intel-VT-x-EPT和AMD-V-RVI-V" class="headerlink" title="虚拟化Intel VT-x/EPT和AMD-V/RVI(V)"></a>虚拟化Intel VT-x/EPT和AMD-V/RVI(V)</h3><p>Intel VT-X技术实现的功能是减少虚拟机运行时虚拟机和物理机得到双重系统调用所产生的高Context Switch。也就是说，虚拟机的进程在要先从虚拟机ring3转到ring0，再从物理机的ring3转到ring0，性能有很大损失，而Intel VT-X就是为了解决这一问题而产生的技术。<br>Intel RPT技术则是为了解决虚拟机的虚拟内存映射问题。虚拟机的虚拟内存要映射到虚拟机的物理内存上面，而虚拟机的物理内存相当于物理机的虚拟内存，物理机的虚拟内存也是要映射到物理机的物理内存上面的，所以这双重转换会造成很大的资源消耗，RPT技术就是减小这个消耗的。<br>AMD实现的功能和Intel的功能类似</p><h3 id="虚拟化cpu性能计数器"><a href="#虚拟化cpu性能计数器" class="headerlink" title="虚拟化cpu性能计数器"></a>虚拟化cpu性能计数器</h3><p>CPU 性能监控计数器 (PMC) 为软件提供了一种监控和衡量处理器性能的方法。这些计数器通常由诸如软件探查器等工具使用。从具有 ESX 5.1 及更高版本兼容性（硬件软件 9）的虚拟机开始，可以启用虚拟性能监控计数器 (vPMC) 功能以允许在虚拟机中运行的软件访问此性能信息，如在物理机中运行一样。<br>启用虚拟 CPU 性能监控计数器后，以下 MSR 会虚拟化并可用于客户机操作系统。</p><h1 id="WSL2搭建Linux"><a href="#WSL2搭建Linux" class="headerlink" title="WSL2搭建Linux"></a>WSL2搭建Linux</h1><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/">官方文档</a><br>WSL2采用在Hyper-V虚拟机中运行的方案,实现了与 windows 的高度集成,wsl2 的开启速度有了非常明显的提升，几乎无需等待。</p><p>启用适用于 Linux 的 Windows 子系统</p><p><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p><p>启用虚拟机平台功能</p><p><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code></p><p>以管理者模式进入cmd安装<br><code>wsl --install</code></p><p>切换WSL的默认版本为WSL2。<br><code>wsl --set-default-version 2</code></p><p>以管理者cmd进行更新操作<br><code>wsl --update</code></p><p>重启，更新才能生效<br><code>wsl --shutdown</code></p><p>Microsoft Store 中找一个 Linux 发行版进行安装</p><p>查看系统版本<br><code>wsl -l -v</code></p><h3 id="修改默认安装目录"><a href="#修改默认安装目录" class="headerlink" title="修改默认安装目录"></a>修改默认安装目录</h3><p>命令格式：wsl –import <distributionname>  &lt;文件位置&gt; &lt;安装位置&gt;  </distributionname></p><ol><li>查看已安装的linux发行版本<br> <code>wsl -l --all -v</code></li><li>导出分发版为tar文件到d盘<br><code>wsl --export Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04.tar</code></li><li>注销当前分发版<br><code>wsl --unregister Ubuntu-20.04</code></li><li>重新导入并安装WSL在D盘<br><code>wsl --import Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04.tar --version 2</code></li><li>设置默认登陆用户为安装时用户名<br><code>ubuntu config --default-user USERNAME</code></li><li>删除wsl-ubuntu20.04.tar<br><code>del d:\wsl-ubuntu.tar</code></li></ol><h3 id="设置-Linux-用户名和密码"><a href="#设置-Linux-用户名和密码" class="headerlink" title="设置 Linux 用户名和密码"></a>设置 Linux 用户名和密码</h3><p>若要更改或重置密码，请打开 Linux 发行版并输入命令：<code>passwd</code><br>如果忘记了 Linux 分发版的密码：<br>1.请打开 PowerShell，并使用以下命令进入默认 WSL 分发版的根目录：wsl -u root</p><p>如果需要在非默认分发版中更新忘记的密码，请使用命令：wsl -d Debian -u root，并将 Debian 替换为目标分发版的名称。</p><p>2.在 PowerShell 内的根级别打开 WSL 发行版后，可使用此命令更新密码：passwd <username>，其中 <username> 是发行版中帐户的用户名，而你忘记了它的密码。</username></username></p><h3 id="关闭WSL2"><a href="#关闭WSL2" class="headerlink" title="关闭WSL2"></a>关闭WSL2</h3><p>WSL2实际上是在虚拟机中运行。我们一旦进入WSL2 Linux的命令行，虚拟机会自动启动运行。如果我们查看任务管理器，会发现一个Vmmem进程,它比较占内存。不使用WSL2的时候我们可以关闭它以节省内存。关闭WSL2 Linux的方法如下。使用管理员打开CMD，运行：<code>wsl --shutdown</code></p><h3 id="为发行版linux更换国内源"><a href="#为发行版linux更换国内源" class="headerlink" title="为发行版linux更换国内源"></a>为发行版linux更换国内源</h3><p><a href="https://blog.csdn.net/weixin_41529012/article/details/117226884">https://blog.csdn.net/weixin_41529012/article/details/117226884</a></p><p>打开\wsl.localhost\Ubuntu\etc\apt地址下的sources.list文件，更改镜像源</p><p>vim /etc/apt/sources.list</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade  #更新镜像源列表</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="wsl网络"><a href="#wsl网络" class="headerlink" title="wsl网络"></a>wsl网络</h3><p>在18945之后的版本中, 微软改进了WSL2, 使我们可以使用localhost, 访问WSL的网络服务</p><h3 id="容器服务"><a href="#容器服务" class="headerlink" title="容器服务"></a>容器服务</h3><p>安装docker-desktop, 即Windows版的docker, WSL2会自动连接到Windows的Docker 服务中.</p><p>此时启动的容器使用的端口和Windows的端口是”相通”的,完全不需要配置端口转发!</p><p>1.下载 <a href="https://docs.docker.com/desktop/windows/wsl/">Docker Desktop</a> 并按照安装说明进行操作。</p><p>2.安装后，从 Windows 开始菜单启动 Docker Desktop，然后从任务栏的隐藏图标菜单中选择 Docker 图标。 右键单击该图标以显示 Docker 命令菜单，然后选择“设置”。</p><p>3.确保在“设置”“常规”中选中“使用基于 WSL 2 的引擎”。</p><p>4.通过转到“设置”“资源”“WSL 集成”，从要启用 Docker 集成的已安装 WSL 2 发行版中进行选择。</p><p>5.若要确认已安装 Docker，请打开 WSL 发行版（例如 Ubuntu），并通过输入 docker –version 来显示版本和内部版本号</p><h2 id="网络配置-1"><a href="#网络配置-1" class="headerlink" title="网络配置"></a>网络配置</h2><h3 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h3><p><a href="https://blog.csdn.net/yjk13703623757/article/details/122646521?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-122646521-blog-118100683.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1-122646521-blog-118100683.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1">https://blog.csdn.net/yjk13703623757/article/details/122646521?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122646521-blog-118100683.pc_relevant_multi_platform_whitelistv3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1-122646521-blog-118100683.pc_relevant_multi_platform_whitelistv3&amp;utm_relevant_index=1</a><br>我们知道wsl2是基于hyper-v的虚拟机，每次重新启动的时候，都会重新拉一个新的hyper-v虚拟机实例，然后虚拟网卡的IP是dhcp随机分配的，如果作为开发系统用，就会比较烦每次都要换一个IP。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>问题：WSL2 不能访问宿主机，但是宿主机可以访问 WSL2。所以很可能就是宿主机的防火墙拦截了 WSL2 对宿主机的访问。还有一种情况就是防火墙规则里面默认禁用了 ICMP 的应答(ping 的实现就是基于 ICMP 协议)。<br>    小提示：<br>    禁用 ICMP 的应答是一种最简单也是最常见的隐藏网络主机的方式。对于桌面版的 Windows 通常默认是没有禁用的，但是你如果安装了“XX安全管家、XX安全卫士”加固过电脑的话，大概率就会将 ICMP 的回显给禁用掉。<br>    对于操作系统的 防火墙 通常都会对入网方向进行严格的限制，即禁止外部主机随便的访问我提供的服务。所以当出现外部主机无法访问本机提供的对外服务的时候就要考虑是不是主机的防火墙限制了访问。<br>宿主机的网络防火墙拦截了 wsl2 的数据流量</p><p><a href="https://blog.csdn.net/Cypher_X/article/details/123011200">https://blog.csdn.net/Cypher_X/article/details/123011200</a></p><h1 id="centos7"><a href="#centos7" class="headerlink" title="centos7"></a>centos7</h1><h2 id="centos搭建dhcp服务器"><a href="#centos搭建dhcp服务器" class="headerlink" title="centos搭建dhcp服务器"></a>centos搭建dhcp服务器</h2><p>DHCP是一种局域网协议，当我们搭建好DHCP服务器后，它可以自动分发IP地址和网关给客户机</p><p>1.准备两台虚拟机就可以，一台做服务器，一台做客户机·。</p><p>2.开始配置服务器，右击打开终端。进入管理员模式（命令为su root），先安装DHCP服务器的软件包（虚拟机要联网），用 yum install dhcp -y 命令安装（-y 表示接下来系统弹出是请求都默认是yes）dhcp-4.2.5-83.el7.centos.1.x86_64 这个软件包一定要有。里面有默认的配置文件。</p><p>然后用vim /etc/dhcp/dhcpd.conf命令进入默认的主配置文件， 复制/usr/share/doc/dhcp*/dhcpd.conf.example这个路径<br>cp /usr/share/doc/dhcp*/dhcpd.conf.example /etc/dhcp/dhcpd.conf</p><h2 id="CentOS7配置本地yum源"><a href="#CentOS7配置本地yum源" class="headerlink" title="CentOS7配置本地yum源"></a>CentOS7配置本地yum源</h2><h3 id="脚本配置本地源"><a href="#脚本配置本地源" class="headerlink" title="脚本配置本地源"></a>脚本配置本地源</h3><p>vim /root/auto_source.sh #创建脚本文件,编辑内容如下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建本地源文件夹,作为光盘的挂载点</span></span><br><span class="line">mkdir -p /media/centos/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 挂载镜像文件至指定的目录</span></span><br><span class="line">mount /dev/cdrom /media/centos</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份原本地源</span></span><br><span class="line">cp -rf /etc/yum.repos.d  /etc/yum.repos.d_$(date '+%Y%m%d_%H%M%S')</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除默认原本地源</span></span><br><span class="line">rm -rf /etc/yum.repos.d/*</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置本地源,创建Media.repo文件,并配置如下内容</span></span><br><span class="line">cd /etc/yum.repos.d/</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">Media.repo</span></span><br><span class="line">echo '[iso]'                            &gt;&gt; Media.repo</span><br><span class="line">echo 'name=Media'                       &gt;&gt; Media.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">地址为你自己的光盘挂载地址</span></span><br><span class="line">echo 'baseurl=file:///media/centos/'    &gt;&gt; Media.repo</span><br><span class="line">echo 'gpgcheck=0'                       &gt;&gt; Media.repo</span><br><span class="line"><span class="meta">#</span><span class="bash">enabled=1, 让这个yum源配置文件生效</span></span><br><span class="line">echo 'enabled=1'                        &gt;&gt; Media.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除yum缓存</span></span><br><span class="line">yum clean all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 缓存本地yum源</span></span><br><span class="line">yum makecache</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>chmod +x /root/auto_source.sh # 赋予脚本可执行的权限<br>/root/auto_source.sh   #执行脚本文件，即可</p><h2 id="搭建ftp服务器"><a href="#搭建ftp服务器" class="headerlink" title="搭建ftp服务器"></a>搭建ftp服务器</h2><p>用来传输文件的协议，FTP 是File Transfer Protocol（文件传输协议）的英文简称，而中文简称为“文传协议”。用于Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。基于不同的操作系统有不同的FTP应用程序，而所有这些应用程序都遵守同一种协议以传输文件。在FTP的使用当中，用户经常遇到两个概念：”下载”（Download）和”上传”（Upload）。</p><h3 id="FTP服务使用的端口"><a href="#FTP服务使用的端口" class="headerlink" title="FTP服务使用的端口"></a>FTP服务使用的端口</h3><p>FTP服务器默认使用TCP协议的20、21端口与客户端进行通信<br>20端口用于建立数据连接，并传输文件数据<br>21端口用于建立控制连接，并传输FTP控制命令</p><h3 id="FTP服务数据连接方式"><a href="#FTP服务数据连接方式" class="headerlink" title="FTP服务数据连接方式"></a>FTP服务数据连接方式</h3><p>FTP数据连接分为主动模式和被动模式<br>主动模式:服务器主动发起数据连接<br>被动模式:服务器被动等待数据连接</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y vsftpd   </span><br></pre></td></tr></tbody></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start vsftpd &amp;&amp; sudo systemctl enable vsftpd # 启动vsftpd并加入开机自启</span><br><span class="line"></span><br><span class="line">pgrep vsftpd  #查看进程 vsftp 是否存在</span><br><span class="line"></span><br><span class="line">service vsftpd status   #查看情况</span><br><span class="line">systemctl stop firewalld.service  #关闭防火墙</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line">sudo systemctl restart vsftpd  #重启</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="设置匿名用户访问的FTP服务（最大权限）"><a href="#设置匿名用户访问的FTP服务（最大权限）" class="headerlink" title="设置匿名用户访问的FTP服务（最大权限）"></a>设置匿名用户访问的FTP服务（最大权限）</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> vim /etc/vsftpd/vsftpd.conf   <span class="comment">#修改配置文件</span></span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES    #开启匿名用户访问。默认已开启</span><br><span class="line">write_enable=YES     #开放服务器的写权限(若要上传，必须开启)。默认已开启</span><br><span class="line">anon_umask=022      #设置匿名用户所上传数据的权限掩码(反掩码)，需手动添加</span><br><span class="line">anon_upload_enable=YES    #允许匿名用户.上传文件。默认已注释，需取消注释</span><br><span class="line">anon_mkdir_write_enable=YES   #允许匿名用户创建(上传)目录。默认已注释，需取消注释</span><br><span class="line">anon_other_write_enable=YES   #允许删除、重命名、覆盖等操作。需添加</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service  #关闭防火墙</span><br><span class="line"> chmod 777 /var/ftp/pub/  #设置pub子目录权限</span><br></pre></td></tr></tbody></table></figure><p><a href="https://blog.csdn.net/weixin_45551608/article/details/116903931">https://blog.csdn.net/weixin_45551608/article/details/116903931</a></p><h2 id="网络配置-2"><a href="#网络配置-2" class="headerlink" title="网络配置"></a>网络配置</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ifconfig     #查看网络IP等信息</span><br><span class="line"> </span><br><span class="line">ping    #测试主机之间网络连通性</span><br></pre></td></tr></tbody></table></figure><h3 id="关闭防火墙-centos7"><a href="#关闭防火墙-centos7" class="headerlink" title="关闭防火墙-centos7"></a>关闭防火墙-centos7</h3><p>（所有虚拟机都要操作）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state  #查看防火墙信息</span><br><span class="line">systemctl stop firewalld    #关闭防火墙</span><br><span class="line">systemctl disable firewalld   #关闭防火墙开机启动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start firewalld  #开启防火墙</span><br><span class="line">systemctl enable firewalld  #开启防火墙开机启动</span><br></pre></td></tr></tbody></table></figure><h3 id="配置主机名"><a href="#配置主机名" class="headerlink" title="配置主机名"></a>配置主机名</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostname   #查看当前服务器的主机名</span><br><span class="line"></span><br><span class="line">vim /etc/hostname    #修改主机名称配置文件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改配置文件后，需要重启服务器才能生效，如果想实时生效修改主机名可以使用下面的命令。</span></span><br><span class="line">hostnamectl set- hostname 新主机名</span><br><span class="line"></span><br><span class="line">vim /etc/hosts     #修改host映射文件</span><br></pre></td></tr></tbody></table></figure><h2 id="配置服务"><a href="#配置服务" class="headerlink" title="配置服务"></a>配置服务</h2><p>Linux服务管理有两种方式service和systemctl，从 Centos 7.x 开始，CentOS 开始使用 systemd 服务来代替 service服务（daemon），原来管理系统启动和管理系统服务的相关命令全部由 systemctl命令来代替。<br>命令文件的目录</p><p>/usr/lib/systemd/system</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">systemctl status 服务名    #查看服务状态</span><br><span class="line"></span><br><span class="line">systemctl start 服务名    #开启服务</span><br><span class="line"></span><br><span class="line">systemctl stop 服务名    #关闭服务</span><br><span class="line"></span><br><span class="line">systemctl restart 服务名    #重启服务</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl list-unit-files  #查看服务开机启动状态</span><br><span class="line"></span><br><span class="line">systemctl enable 服务名  #开启指定服务的自动启动</span><br><span class="line"></span><br><span class="line">systemctl disable 服务名  #关闭指定服务的自动启动</span><br></pre></td></tr></tbody></table></figure><h1 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a>ubuntu</h1><h2 id="设置固定ip地址"><a href="#设置固定ip地址" class="headerlink" title="设置固定ip地址"></a>设置固定ip地址</h2><p><strong>不同发行版静态网卡配置不一样</strong><br>Ubuntu 18.04使用netplan配置网络，其配置文件是yaml格式的。安装好Ubuntu 18.04之后，在 /etc/netplan/01-network-manager-all.yaml，我们通过VIM修改它：</p><p>1.子网掩码 ：和你的网络设置有关的，在设置静态IP之前，你要先通过 ifconfig看一下你自己的子网掩码是多少<br>2.网关使用 route -n 查看当前的网关Gateway</p><p>3.dns server：这个要记住之前的dns,我用常用的公共dns不可以</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ifconfig  #查看网卡信息</span><br><span class="line"></span><br><span class="line">sudo vim /etc/netplan/01-network-manager-all.yaml  #打开配置文件</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>配置文件修改如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">    <span class="attr">ens33:</span>   <span class="comment">#配置的网卡名称</span></span><br><span class="line">      <span class="attr">dhcp4:</span> <span class="literal">no</span>    <span class="comment">#dhcp4关闭</span></span><br><span class="line">      <span class="attr">dhcp6:</span> <span class="literal">no</span>    <span class="comment">#dhcp6关闭</span></span><br><span class="line">      <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.212</span><span class="number">.130</span><span class="string">/24</span>]   <span class="comment">#设置本机IP及掩码</span></span><br><span class="line">      <span class="attr">gateway4:</span> <span class="number">192.168</span><span class="number">.212</span><span class="number">.2</span>  <span class="comment">#设置网关 </span></span><br><span class="line">      <span class="attr">nameservers:</span></span><br><span class="line">        <span class="attr">addresses:</span> [<span class="number">192.168</span><span class="number">.212</span><span class="number">.2</span>, <span class="number">8.8</span><span class="number">.8</span><span class="number">.8</span>]   <span class="comment">#设置DNS</span></span><br></pre></td></tr></tbody></table></figure><p>无论是ifupdown还是netplan，配置的思路都是一致的，在配置文件里面按照规则填入IP、掩码、网关、DNS等信息。注意yaml是层次结构，需要缩进(一般两个空格)，冒号(:)表示字典，连字符(-)表示列表。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启网络服务使配置生效：</span></span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></tbody></table></figure><h2 id="设置动态ip"><a href="#设置动态ip" class="headerlink" title="设置动态ip"></a>设置动态ip</h2><p><code>sudo vim /etc/netplan/01-network-manager-all.yaml  #打开配置文件</code></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">network:</span></span><br><span class="line">  <span class="attr">version:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">renderer:</span> <span class="string">NetworkManager</span></span><br><span class="line">  <span class="attr">ethernets:</span></span><br><span class="line">     <span class="attr">ens33:</span> <span class="comment">#配置的网卡名称,使用ifconfig -a查看得到</span></span><br><span class="line">       <span class="attr">dhcp4:</span> <span class="literal">true</span> <span class="comment">#dhcp4开启</span></span><br><span class="line">       <span class="attr">addresses:</span> [] <span class="comment">#设置本机IP及掩码，空</span></span><br><span class="line">       <span class="attr">optional:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">重启网络服务使配置生效：</span></span><br><span class="line">sudo netplan apply</span><br></pre></td></tr></tbody></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo ufw status  #查看当前防火墙状态</span><br><span class="line">sudo ufw enable  #以开启防火墙</span><br><span class="line">sudo ufw disable  #关闭防火墙</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="安装ftp服务器"><a href="#安装ftp服务器" class="headerlink" title="安装ftp服务器"></a>安装ftp服务器</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install vsftpd  #安装vsftpd软件包</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p><code>sudo vim /etc/vsftpd.conf  #配置FTP服务器配置文件</code></p><p><code>sudo systemctl restart vsftpd  #重启</code></p><p><a href="https://blog.csdn.net/zxw136511485/article/details/79460671">https://blog.csdn.net/zxw136511485/article/details/79460671</a></p><p>正在使用的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"># 禁止匿名用户登录</span><br><span class="line">anonymous_enable=NO</span><br><span class="line"># 允许系统用户登录</span><br><span class="line">local_enable=YES</span><br><span class="line"># 启用可以修改文件的 FTP 命令</span><br><span class="line">write_enable=YES</span><br><span class="line"># 本地用户创建文件的 umask 值</span><br><span class="line">local_umask=022</span><br><span class="line"># 允许为目录配置显示信息,显示每个目录下面的message_file文件的内容</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line"># 开启日记功能 </span><br><span class="line">xferlog_enable=YES</span><br><span class="line"># 使用标准的20端口来连接ftp </span><br><span class="line">connect_from_port_20=YES</span><br><span class="line"># 使用标准日志格式 </span><br><span class="line">xferlog_std_format=YES</span><br><span class="line"></span><br><span class="line"># 如果启动这项功能，则所有列在chroot_list_file之中的使用者不能更改根目录</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"># 指定限制的用户文件</span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line"></span><br><span class="line"># ftp服务器将处于独立启动模式</span><br><span class="line">listen=YES</span><br><span class="line"># 设置一个本地用户登录后进入到的目录</span><br><span class="line">local_root=/home/wenke</span><br><span class="line"># 设置PAM认证服务的配置文件名称，该文件保存在“/etc/pam.d/”目录下</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"></span><br><span class="line"># ftp将检查userlist_file设置文件中指定的用户是否可以访问vsftpd服务器</span><br><span class="line">userlist_enable=YES</span><br><span class="line"># 只允许user_list文件中记录的ftp用户能登录vsftp服务，其他的ftp用户都不可以登录。</span><br><span class="line">userlist_deny=NO</span><br><span class="line"># 定义限制/允许用户登录的文件</span><br><span class="line">userlist_file=/etc/vsftpd.user_list</span><br><span class="line"></span><br><span class="line"># ftp服务器将使用tcp_wrappers作为主机访问控制模式</span><br><span class="line">tcp_wrappers=YES</span><br><span class="line"># 连接ftp服务费使用的端口</span><br><span class="line">listen_port=21</span><br><span class="line"></span><br><span class="line"># ftp工具连接成功提示</span><br><span class="line">ftpd_banner=Welcome to Arts FTP service  </span><br><span class="line"></span><br><span class="line">listen=YES</span><br><span class="line">listen_ipv6=No</span><br><span class="line">use_localtime=YES</span><br><span class="line">#默认情况下，VSFTPD使用主动模式。 要使用被动模式，请设置端口的最小和最大范围</span><br><span class="line">#FTP客户端在所选范围内的随机端口上打开与服务器的连接。</span><br><span class="line">#pasv_min_port=10000</span><br><span class="line">#pasv_max_port=10100</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="开启-UFW防火墙允许FTP流量"><a href="#开启-UFW防火墙允许FTP流量" class="headerlink" title="开启 UFW防火墙允许FTP流量"></a>开启 UFW防火墙允许FTP流量</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 打开端口21（FTP命令端口），端口20（FTP数据端口）和30000-31000（被动端口范围）</span></span><br><span class="line">sudo ufw allow 20:21/tcp</span><br><span class="line">sudo ufw allow 10000:10100/tcp</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过禁用和重新启用UFW来重新加载UFW规则：</span></span><br><span class="line">sudo ufw disable</span><br><span class="line">sudo ufw enable</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo ufw status  #验证更改：</span><br></pre></td></tr></tbody></table></figure><h3 id="添加vsftpd-登录用户"><a href="#添加vsftpd-登录用户" class="headerlink" title="添加vsftpd 登录用户"></a>添加vsftpd 登录用户</h3><p>我们的ftp服务器已经搭建好啦~ 所以现在我们要开始创建一个新的用户账号了，然后用这个账号来连接FTP服务。<br>如果你设置了匿名用户也可以登录上传的话～这个可以省了<br>安装完毕后，/srv 下会增加一个 ftp 目录。同时系统会增加一个名为 ftp 的用户组，可以用<code>sudo cat  /etc/shadow</code> 查看，</p><p>1.增加用户 keke 并设置其目录为 /home/keke<br><code>sudo useradd -g ftp -s /bin/bash -d /home/ftpuser -m ftpuser</code><br>sudo useradd -g ftp -s /bin/bash -d /home/wenke -m wenke<br>-m创建该用户文件夹，-d指定该用户文件夹</p><p>(注：G：用户所在的组 d：表示创建用户的自己目录的位置给予指定  M：不建立默认的自家目录，也就是说在 /home 下没有自己的目录)</p><p>2.设置用户口令 <code>sudo passwd ftpuser</code></p><p>3.设置权限:sudo chmod 755 /home/ftpuser</p><p><strong>注意：</strong><br><a href="https://blog.csdn.net/bluishglc/article/details/42399439">https://blog.csdn.net/bluishglc/article/details/42399439</a><br>sudo chmod a-w /home/ftpuser  #去除用户主目录的写权限</p><p>4.添加vsftpd 登录用户<br><a href="https://blog.csdn.net/soslinken/article/details/79304076">https://blog.csdn.net/soslinken/article/details/79304076</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">新建文件/etc/vsftpd.user_list，用于存放允许访问ftp的用户：</span></span><br><span class="line">sudo touch /etc/vsftpd.user_list </span><br><span class="line">sudo vim /etc/vsftpd.user_list  #填入用户名</span><br></pre></td></tr></tbody></table></figure><p>修改 vsftpd.conf<code>sudo vim /etc/vsftpd.conf</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># ftp将检查userlist_file设置文件中指定的用户是否可以访问vsftpd服务器</span><br><span class="line">userlist_enable=YES</span><br><span class="line"># 只允许user_list文件中记录的ftp用户能登录vsftp服务，其他的ftp用户都不可以登录。</span><br><span class="line">userlist_deny=NO</span><br><span class="line"># 定义限制/允许用户登录的文件</span><br><span class="line">userlist_file=/etc/vsftpd.user_list </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="添加vsftpd登录用户对目录树的权限"><a href="#添加vsftpd登录用户对目录树的权限" class="headerlink" title="添加vsftpd登录用户对目录树的权限"></a>添加vsftpd登录用户对目录树的权限</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/vsftpd.chroot_list  #添加编辑 chroot_list 文件:</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加ftp 用户名，每个用户占一行</span></span><br></pre></td></tr></tbody></table></figure><p>修改 vsftpd.conf<code>sudo vim /etc/vsftpd.conf</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># 如果启动这项功能，则所有列在chroot_list_file之中的使用者不能更改根目录,限制用户在默认目录</span><br><span class="line">chroot_list_enable=YES</span><br><span class="line"># 指定不限制的用户文件,在这个文件里面的用户可以登录FTP，并访问其他目录</span><br><span class="line">chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 设置一个本地用户登录后进入到的目录</span><br><span class="line">local_root=/home/ftpuser</span><br></pre></td></tr></tbody></table></figure><h3 id="vsftpd常用命令"><a href="#vsftpd常用命令" class="headerlink" title="vsftpd常用命令"></a>vsftpd常用命令</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo systemctl start vsftpd &amp;&amp; sudo systemctl enable vsftpd # 启动vsftpd并加入开机自启</span><br><span class="line"></span><br><span class="line">pgrep vsftpd  #查看进程 vsftp 是否存在</span><br><span class="line"></span><br><span class="line">service vsftpd status   #查看情况</span><br><span class="line">sudo systemctl restart vsftpd  #重启</span><br></pre></td></tr></tbody></table></figure><h3 id="踩坑"><a href="#踩坑" class="headerlink" title="踩坑"></a>踩坑</h3><p>1.vsftp启动失败，多半都是参数配置的问题吧<br>打开vsftp的配置文件/etc/vsftpd.conf，注释掉listen_ipv6=YES</p><p>2.xftp连接时不要使用被动模式<br>属性-&gt;选项-&gt;传输</p><h2 id="ftp访问"><a href="#ftp访问" class="headerlink" title="ftp访问"></a>ftp访问</h2><p>打开浏览器，在地址栏中输入<a href="ftp://服务器ip/">ftp://服务器IP</a>地址。然后回车。<br>磁盘访问方式首先双击计算机或者我的电脑，打开磁盘对话框，然后在路径栏中输入<a href="ftp://ftp服务器ip/">ftp://FTP服务器IP</a>地址。</p><h1 id="Xmanager-PCX-Server"><a href="#Xmanager-PCX-Server" class="headerlink" title="Xmanager PCX Server"></a>Xmanager PCX Server</h1><p>Xmanager是一个运行于MS Windows平台上的高性能的X window服务器。可以在本地PC上同时运行Linux/UNIX和Windows图形应用程序。</p><p>1、Xbrowser</p><p>Xbrowser使用xdcmp 协议通过图形化桌面远程可以连接到Unix/Linux主机</p><p>2、Xconfig</p><p>xconfig是linux下X Window环境中用于配制的一个工具，和menuconfig相似，但用法更友好方便</p><p>3、Xftp</p><p>Xftp是一个用于MS Windows平台的强大的FTP和SFTP文件传输程序。Xftp让你能安全地在Unix/Linux和Windows PC之间传输文件</p><p>4、Xlpd</p><p>Xlpd是一个用于MS Windows平台的LPD(行式打印机虚拟后台程序)应用程序。安装了Xlpd后，你的带有打印机的本地PC就成为了一个打印服务器，来自不同远程系统的打印任务都能在网络环境中得到请求和处理。</p><p>5、Xmanager - Broadcast</p><p>用于连接远程主机</p><p>6、Xmanager - Passive</p><p>可以选择Xbrowser、Xstart、Xconfig以及Xsound来连接远程</p><p>8、Xstart</p><p>Xstart通过图形化界面连接到Unix/Linux主机</p><h1 id="ssh管理软件"><a href="#ssh管理软件" class="headerlink" title="ssh管理软件"></a>ssh管理软件</h1><h2 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h2><p>简单介绍下SSH：</p><p>SSH：是一种安全通道协议，主要用来实现字符界面的远程登录，远程复制等功能(使用TCP的22号端口)。SSH协议对通信双方的数据传输进行了加密处理，其中包括用户登录时输入的用户口令。</p><p>在RHEL 5系统中使用的是OpenSSH服务器由openssh，openssh-server等软件包提供的(默认已经安装)，并以将sshd添加为标准的系统服务。</p><p>SSH提供一下两种方式的登录验证：</p><p>1、密码验证：以服务器中本地系统用户的登录名称，密码进行验证。<br>2、秘钥对验证：要求提供相匹配的秘钥信息才能通过验证。通常先在客户机中创建一对秘钥文件(公钥和私钥)，然后将公钥文件放到服务器中的指定位置。</p><p>注意：当密码验证和私钥验证都启用时，服务器将优先使用秘钥验证。</p><p>SSH的配置文件：</p><p>sshd服务的配置文件默认在/etc/ssh/sshd_config，正确调整相关配置项，可以进一步提高sshd远程登录的安全性。</p><p>配置文件的内容可以分为以下三个部分：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1、常见SSH服务器监听的选项如下：</span><br><span class="line"></span><br><span class="line">Port 22 //监听的端口为22</span><br><span class="line"></span><br><span class="line">Protocol 2 //使用SSH V2协议</span><br><span class="line"></span><br><span class="line">ListenAdderss 0.0.0.0 //监听的地址为所有地址</span><br><span class="line"></span><br><span class="line">UseDNS no //禁止DNS反向解析</span><br><span class="line"></span><br><span class="line">2、常见用户登录控制选项如下：</span><br><span class="line"></span><br><span class="line">PermitRootLogin no //禁止root用户登录</span><br><span class="line"></span><br><span class="line">PermitEmptyPasswords no //禁止空密码用户登录</span><br><span class="line"></span><br><span class="line">LoginGraceTime 2m //登录验证时间为2分钟</span><br><span class="line"></span><br><span class="line">MaxAuthTries 6 //最大重试次数为6</span><br><span class="line"></span><br><span class="line">AllowUsers user //只允许user用户登录，与DenyUsers选项相反</span><br><span class="line"></span><br><span class="line">3、常见登录验证方式如下：</span><br><span class="line"></span><br><span class="line">PasswordAuthentication yes //启用密码验证</span><br><span class="line"></span><br><span class="line">PubkeyAuthentication yes //启用秘钥验证</span><br><span class="line"></span><br><span class="line">AuthorsizedKeysFile .ssh/authorized_keys //指定公钥数据库文件</span><br></pre></td></tr></tbody></table></figure><h2 id="unbuntu开启ssh服务"><a href="#unbuntu开启ssh服务" class="headerlink" title="unbuntu开启ssh服务"></a>unbuntu开启ssh服务</h2><p>因为Ubuntu默认是不安装SSH服务的，所以在安装之前可以查看目前系统是否安装<br>sudo service ssh status<br>sudo apt-get install openssh-server  #安装服务端</p><p>netstat -ntlp|grep 22  #查看22端口是否开启 ，LISTEN，即为开启状态</p><h2 id="Tabby"><a href="#Tabby" class="headerlink" title="Tabby"></a>Tabby</h2><p>github地址：<a href="https://github.com/Eugeny/tabby/releases">https://github.com/Eugeny/tabby/releases</a><br>网页版的Tabby（<a href="https://app.tabby.sh/">https://app.tabby.sh/</a>）</p><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><p>Tabby 的功能特性大概有：</p><p>支持多平台，Windows、MacOS（Intel 芯片/M1 芯片）、Linux 都有对应的安装包的；</p><p>自带 SFTP 功能，能够与 Linux 系统传输文件；</p><p>炫酷的终端页面，简单易用，以及各种插件支持等</p><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>想新建一个连接服务器的终端，要点击「Settings」，进入到配置页面。<br>进入到设置页面后，选择 profiles&amp;connections 这个选项，然后点击「New profile」新建一个终端配置<br>然后选择 ssh connection。<br>随后就会弹出配置 ssh 连接的信息，填上终端名称、IP 地址、端口号、账号密码就可以了。</p><h2 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h2><p>Xshell是一个用于MS Windows平台的强大的SSH，TELNET，和RLOGIN终端仿真软件。它使得用户能轻松和安全地从Windows PC上访问Unix/Linux主机<br><a href="https://xshell.en.softonic.com/">安装</a><br><a href="https://www.jianshu.com/p/4716cc35750f">参考</a></p><h3 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h3><p>选择导航菜单的文件 –&gt; 新建，输入名称和主机IP，协议默认SSH，端口默认22，如果不知道主机IP可以登录虚拟机的Linux系统，输入命令ifconfig查看(inet addr)</p><p>然后在左侧用户身份验证中输入用户名和密码，这样下次就可以直接连接了，当然如果为了安全考虑也可以不输入密码，在每次连接时再输入。</p><h3 id="Xshell怎么与云服务器连接"><a href="#Xshell怎么与云服务器连接" class="headerlink" title="Xshell怎么与云服务器连接"></a>Xshell怎么与云服务器连接</h3><p>打开Xshell，新建一个会话</p><p>主机填服务器ip,点击连接</p><p>用户名默认为root,而不是实例名，也不是你服务器中Linux的用户名；<br>密码则为服务器实例密码</p><h2 id="FinalShell"><a href="#FinalShell" class="headerlink" title="FinalShell"></a>FinalShell</h2><p><a href="http://www.hostbuf.com/">官网</a><br>FinalShell是一体化的的服务器,网络管理软件,不仅是ssh客户端,还是功能强大的开发,运维工具,充分满足开发,运维需求.</p><p>1.多平台支持Windows,Mac OS X,Linux</p><p>2.多标签,批量服务器管理.</p><p>3.支持登录Ssh和Windows远程桌面.</p><p>4.漂亮的平滑字体显示,内置100多个配色方案.</p><p>5.shell,sftp同屏显示,同步切换目录.</p><p>6.命令自动提示,智能匹配,输入更快捷,方便.</p><p>7.sftp支持,通过各种优化技术,加载更快,切换,打开目录无需等待.</p><p>8.服务器网络,性能实时监控,无需安装服务器插件.</p><p>9.内置海外服务器加速,加速远程桌面和ssh连接,操作流畅无卡顿.</p><p>10.双边加速功能,大幅度提高访问服务器速度.</p><p>11.内存,Cpu性能监控,Ping延迟丢包,Trace路由监控.</p><p>12.实时硬盘监控.</p><p>13.进程管理器.</p><p>14.快捷命令面板,可同时显示数十个命令.</p><p>15.内置文本编辑器,支持语法高亮,代码折叠,搜索,替换.</p><p>16.ssh和远程桌面均支持代理服务器.</p><p>17.打包传输,自动压缩解压.</p><p>18.免费内网穿透,无需设置路由器,无需公网ip.</p><h2 id="vscode连接wsl"><a href="#vscode连接wsl" class="headerlink" title="vscode连接wsl"></a>vscode连接wsl</h2><p>vscode的插件Remote-SSH，可以完美的解决在windows下开发linux程序的问题。Remote-SSH配置简单，界面可视化，相当于带IDE的ssh。当然也可以当做一个远程ssh的连接工具来代替putty，xshell。</p><p>在window的vscode上安装Remote Development扩展包<br>包括Remote - SSH ， Remote - Containers ，Remote - WSL扩展</p><p>Remote - WSL 扩展：使你能够打开容器中、远程计算机上或 WSL 中的任何文件夹。</p><h3 id="打开-WSL-项目"><a href="#打开-WSL-项目" class="headerlink" title="打开 WSL 项目"></a>打开 WSL 项目</h3><p>1.从 WSL 发行版打开项目，请打开发行版的命令行并输入：code .</p><p>2.从 VS Code 中打开项目，通过使用 VS Code 中的快捷方式 CTRL+SHIFT+P 调出命令面板，以访问更多 VS Code 远程选项。 如果随后键入 Remote-WSL，将看到可用的 VS Code 远程选项列表，使你可以在远程会话中重新打开文件夹，指定要在哪个发行版中打开，等等。</p><h1 id="在Docker运行Linux镜像"><a href="#在Docker运行Linux镜像" class="headerlink" title="在Docker运行Linux镜像"></a>在Docker运行Linux镜像</h1><p>OS =内核+文件系统/库</p><p>镜像=文件系统/库</p><p>在Docker容器中运行的Ubuntu镜像只是Ubuntu文件系统/库–它不包含Ubuntu内核。这在一定程度上解释了你从Docker容器中获得的效率，它利用了底层主机的内核(以及其他东西)。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图床</title>
      <link href="/2022/101961876.html"/>
      <url>/2022/101961876.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是图床？"><a href="#1-什么是图床？" class="headerlink" title="1. 什么是图床？"></a>1. 什么是图床？</h2><p>图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。<br>目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。</p><h2 id="2-chevereto图床"><a href="#2-chevereto图床" class="headerlink" title="2. chevereto图床"></a>2. chevereto图床</h2><p><a href="https://cloud.tencent.com/developer/article/1831170">https://cloud.tencent.com/developer/article/1831170</a></p><p>chevereto图床还是挺好用的，不过免费版少了一些功能，我觉得影响比较大的就是外部储存了，所有文件都只能储存在本机，跑在云服务器上的话，直接访问对带宽压力还是很挺大的，加多一层CDN可能就会好些，不过若访问用户量大，这费用还是有些吃不消的=。=</p><h3 id="2-1-搭建chevereto图床"><a href="#2-1-搭建chevereto图床" class="headerlink" title="2.1. 搭建chevereto图床"></a>2.1. 搭建chevereto图床</h3><p>1.创建chevereto相关目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /app/chevereto</span><br><span class="line">mkdir -p /app/chevereto/database</span><br><span class="line">mkdir -p /app/chevereto/chevereto_images </span><br><span class="line">mkdir -p /app/chevereto/conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改相关目录属性，防止chevereto启动时无法写入</span></span><br><span class="line">chmod 777 /app/chevereto/database</span><br><span class="line">chmod 777 /app/chevereto/chevereto_images </span><br><span class="line">chmod 777 /app/chevereto/conf</span><br><span class="line">cd /app/chevereto</span><br></pre></td></tr></tbody></table></figure><p>2.在/app/chevereto目录中创建docker-compose.yaml文件，内容如下：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">db:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./database:/var/lib/mysql:rw</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">private</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">chevereto_root</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">chevereto</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">chevereto:</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nmtan/chevereto</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">private</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_HOST:</span> <span class="string">db</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_USERNAME:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_PASSWORD:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_NAME:</span> <span class="string">chevereto</span></span><br><span class="line">      <span class="attr">CHEVERETO_DB_PREFIX:</span> <span class="string">chv_</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./chevereto_images:/var/www/html/images:rw</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./conf/php.ini:/usr/local/etc/php/conf.d/php.ini</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8810</span><span class="string">:80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="attr">private:</span></span><br></pre></td></tr></tbody></table></figure><p>3.创建php配置文件<br>在/app/chevereto/conf目录中创建php.ini配置文件， 配置最大使用内存和最大上传的图片大小等属性。内容如下：</p><figure class="highlight ini"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">max_execution_time</span> = <span class="number">60</span><span class="comment">;</span></span><br><span class="line"><span class="attr">memory_limit</span> = <span class="number">1024</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">upload_max_filesize</span> = <span class="number">256</span>M<span class="comment">;</span></span><br><span class="line"><span class="attr">post_max_size</span> = <span class="number">256</span>M<span class="comment">;</span></span><br></pre></td></tr></tbody></table></figure><p>4.启动chevereto</p><p><code>docker-compose up -d</code></p><h3 id="2-2-设置反向代理"><a href="#2-2-设置反向代理" class="headerlink" title="2.2. 设置反向代理"></a>2.2. 设置反向代理</h3><p>1.到你购买域名的供应商控制台，将域名解析到你的服务器ip。</p><p>2.在宝塔的网站配置文件中设置反代<br>删除默认的两段location块，并加入以下location块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Reverse Porxy For </span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:20002/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header Range $http_range;</span><br><span class="line">        proxy_set_header If-Range $http_if_range;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 20000m;</span><br><span class="line">        proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span><br><span class="line">        proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>3.申请Let’s Encrypt免费证书</p><h2 id="3-又拍云"><a href="#3-又拍云" class="headerlink" title="3. 又拍云"></a>3. 又拍云</h2><p>百度云加速的优点在于流量给的比较多，每天10G，同时支持HTTPS，最大的问题是免费版不支持移动线路的加速，</p><p>七牛云则提供每月10G的CDN流量和10G存储空间，但其最大的缺点是免费流量不支持HTTPS，</p><p>==又拍云==每月提供10G的存储空间和15G流量，HTTP和HTTPS均可使用，同时支持申请免费证书和上传自有证书，15G流量对于个人小站足够用了。</p><p>点击以下网址进行注册：<a href="https://console.upyun.com/regis">https://console.upyun.com/regis</a></p><p>如何获得更长时间的免费资源呢？这就需要申请加入又拍云联盟了。申请加入需要到这个网址<a href="https://www.upyun.com/league">https://www.upyun.com/league</a></p><h2 id="4-配合utool插件使用"><a href="#4-配合utool插件使用" class="headerlink" title="4. 配合utool插件使用"></a>4. 配合utool插件使用</h2><p>使用utool的图床插件<br>在chevereto的web管理面板中点击用户名-Dashboard-setting-api获取apikey</p><p>上传url为<a href="http://ip/api/1/upload">http://ip/api/1/upload</a><br>API  key</p><h2 id="utool图床插件"><a href="#utool图床插件" class="headerlink" title="utool图床插件"></a>utool图床插件</h2><p>使用utool里的图床插件，picGo还要下载，而utool里还有其他有趣的插件</p><h2 id="使用-PicGo-GitHub图床"><a href="#使用-PicGo-GitHub图床" class="headerlink" title="使用 PicGo+GitHub图床"></a>使用 PicGo+GitHub图床</h2><p><a href="https://yafine-blog.cn/posts/eb3a.html">参考</a></p><h3 id="新建GitHub仓库"><a href="#新建GitHub仓库" class="headerlink" title="新建GitHub仓库"></a>新建GitHub仓库</h3><p>创建是记住分支名，默认是main </p><h3 id="生成一个Token"><a href="#生成一个Token" class="headerlink" title="生成一个Token"></a>生成一个Token</h3><p>在主页依次选择【Settings】-【Developer settings】-【Personal access tokens】-【Generate new token】，填写好描述，勾选【repo】，然后点击【Generate token】生成一个Token，注意这个Token只会显示一次，自己先保存下来，或者等后面配置好PicGo后再关闭此网页</p><p><img src="https://cdn.jsdelivr.net/gh/wenkexia/image/06.jpg"></p><h3 id="配置PicGo"><a href="#配置PicGo" class="headerlink" title="配置PicGo"></a>配置PicGo</h3><p>前往下载PicGo，安装好后开始配置图床<br>设定仓库名：按照【用户名/图床仓库名】的格式填写</p><p>设定分支名：【main】</p><p>设定Token：粘贴之前生成的【Token】</p><p>设定自定义域名：它的作用是，在图片上传后，PicGo 会按照【自定义域名+储存路径+上传的图片名】的方式生成访问链接，并放到粘贴板上，因为我们要使用 jsDelivr 加速访问，所以可以设置为【<a href="https://cdn.jsdelivr.net/gh/%E7%94%A8%E6%88%B7%E5%90%8D/%E5%9B%BE%E5%BA%8A%E4%BB%93%E5%BA%93%E5%90%8D">https://cdn.jsdelivr.net/gh/用户名/图床仓库名</a> 】</p><h2 id="配置Picgo插件"><a href="#配置Picgo插件" class="headerlink" title="配置Picgo插件"></a>配置Picgo插件</h2><h2 id="防盗链"><a href="#防盗链" class="headerlink" title="防盗链"></a>防盗链</h2><p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求的时候，一般会带上Referer，告诉服务器我是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。</p><p>比如从我主页上链接到一个朋友那里，他的服务器就能够从HTTP Referer中统计出每天有多少用户点击我主页上的链接访问他的网站。</p><h3 id="绕过防盗链"><a href="#绕过防盗链" class="headerlink" title="绕过防盗链"></a>绕过防盗链</h3><p>使用防盗链也是一种防君子不防小人的做法。</p><p>我们可以伪造请求，假装自己也是和网站运营商是一伙，从而绕开防盗链。</p><p>在请求时给请求头中的referer加上相应的值，即可成功绕开。</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建Halo博客</title>
      <link href="/2022/101947891.html"/>
      <url>/2022/101947891.html</url>
      
        <content type="html"><![CDATA[<h2 id="3-2-Halo博客"><a href="#3-2-Halo博客" class="headerlink" title="3.2. Halo博客"></a>3.2. Halo博客</h2><p>优点<br>  1、部署方便（指用Docker）<br>  2、主题也日渐丰富<br>  3、开发者非常友好，有活跃的社区，基本上你碰到任何问题，都能在社区中找到答案（当然先要学习提问的智慧）<br>  4、维护方便（尤其是用了Docker）</p><p>缺点:因为是java写的，比较吃服务器的配置，推荐服务器内存至少1GB,占用内存680m<br><a href="https://github.com/halo-dev/halo">https://github.com/halo-dev/halo</a></p><p>文档：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></p><p>论坛：<a href="https://bbs.halo.run/">https://bbs.halo.run/</a></p><h3 id="3-2-1-docker搭建"><a href="#3-2-1-docker搭建" class="headerlink" title="3.2.1. docker搭建"></a>3.2.1. docker搭建</h3><p><a href="https://blog.laoda.de/archives/docker-install-halo">https://blog.laoda.de/archives/docker-install-halo</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 工作目录</span></span><br><span class="line">mkdir /app/.halo &amp;&amp; cd /app/.halo</span><br><span class="line"><span class="meta">#</span><span class="bash">下载示例配置文件到 工作目录</span></span><br><span class="line">wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件，配置数据库或者端口等</span></span><br><span class="line">vim /app/.halo/application.yaml</span><br><span class="line"></span><br><span class="line">rm -rf /app/.halo/.leveldb</span><br><span class="line"></span><br><span class="line">docker run -it -d --name halo -p 20001:8090 -v /app/.halo:/root/.halo --restart=unless-stopped halohub/halo:latest </span><br></pre></td></tr></tbody></table></figure><p>-it： 开启输入功能并连接伪终端<br>-d： 后台运行容器<br>–name： 为容器指定一个名称<br>-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。<br>-v： 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改。<br>–restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。</p><h3 id="3-2-2-设置反代"><a href="#3-2-2-设置反代" class="headerlink" title="3.2.2. 设置反代"></a>3.2.2. 设置反代</h3><p>在宝塔的网站配置文件中设置反代</p><p>删除默认的location块，并加入以下location块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Reverse Porxy For halo</span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:端口/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header Range $http_range;</span><br><span class="line">        proxy_set_header If-Range $http_if_range;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 20000m;</span><br><span class="line">        proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span><br><span class="line">        proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>在域名解析控制台中，域名绑定</p><h3 id="3-2-3-主题推荐"><a href="#3-2-3-主题推荐" class="headerlink" title="3.2.3. 主题推荐"></a>3.2.3. 主题推荐</h3><p>Weicarus   下载：<a href="https://github.com/lin-liem/weicarus">https://github.com/lin-liem/weicarus</a><br>joe2.0下载:<a href="https://github.com/qinhua/halo-theme-joe2.0.git">https://github.com/qinhua/halo-theme-joe2.0.git</a><br><a href="https://github.com/nineya/halo-theme-dream.git">https://github.com/nineya/halo-theme-dream.git</a></p><h3 id="3-2-4-joe主题"><a href="#3-2-4-joe主题" class="headerlink" title="3.2.4. joe主题"></a>3.2.4. joe主题</h3><p>官网：<a href="https://halo.run/">https://halo.run</a><br>文档：<a href="https://docs.halo.run/">https://docs.halo.run</a><br>社区：<a href="https://bbs.halo.run/">https://bbs.halo.run</a><br>主题仓库：<a href="https://halo.run/themes.html">https://halo.run/themes.html</a><br>开源地址：<a href="https://github.com/halo-dev/halo">https://github.com/halo-dev/halo</a></p><p>首页文章不显示问题<br>在halo的web管理端中-主题设置-首页-关闭异步加载文章列表</p><h3 id="3-2-5-记得备份"><a href="#3-2-5-记得备份" class="headerlink" title="3.2.5. 记得备份"></a>3.2.5. 记得备份</h3><p>由于我想更改端口，所以删除了之前的容器后，再执行创建容器，发现站点无法访问<br>于是只好删除了之前的.halo里的所有文件所以一定要==备份==<br>web后台备份.json文件</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-butterfly主题</title>
      <link href="/2022/101946574.html"/>
      <url>/2022/101946574.html</url>
      
        <content type="html"><![CDATA[<h1 id="butterfly主题配置"><a href="#butterfly主题配置" class="headerlink" title="butterfly主题配置"></a>butterfly主题配置</h1><p><a href="https://butterfly.js.org/">官方文档</a><br><a href="https://butterfly.js.org/">https://butterfly.js.org/</a><br><a href="https://yangchaoyi.vip/">https://yangchaoyi.vip/</a></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><p>如果你没有 pug 以及 stylus 的渲染器，请下载安装：<br><code>npm install hexo-renderer-pug hexo-renderer-stylus --save</code></p><h2 id="butterfly主题升级"><a href="#butterfly主题升级" class="headerlink" title="butterfly主题升级"></a>butterfly主题升级</h2><p>1.在 hexo 的根目录创建一个文件 _config.butterfly.yml，并把主题目录的 _config.yml 内容复製到 _config.butterfly.yml 去。( 注意: 复製的是主题的 _config.yml ,而不是 hexo 的 _config.yml)<br>2.不要把主题目录的 _config.yml 删掉<br>3.以后只需要在 _config.butterfly.yml进行配置就行。<br>4.Hexo会自动合併主题中的_config.yml和 _config.butterfly.yml里的配置，如果存在同名配置，会使用_config.butterfly.yml的配置，其优先度较高。</p><p>如果你只使用到主题配置文件，那么升级只需对比新版本主题的配置文件，把旧版本主题配置文件改动到新版本主题配置文件中。<br>重新 git clone 新版 Butterfly 主题到 root/themes/</p><p><code>git clone -b dev https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</code></p><h2 id="Inject"><a href="#Inject" class="headerlink" title="Inject"></a>Inject</h2><p><a href="https://blog.csdn.net/u012208219/article/details/106883001/?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-9.no_search_link&amp;spm=1001.2101.3001.4242.6&amp;utm_relevant_index=12">参考</a><br>打开主题配置文件（butterfly.yml）<br>定位搜索 inject<br>其中head是用来引入css的。bottom是用来引入js的。</p><h3 id="以相对路径引入"><a href="#以相对路径引入" class="headerlink" title="以相对路径引入"></a>以相对路径引入</h3><p>1.将写好的css文件移动到\Butterfly\source\css\目录下。<br>2.然后修改配置文件的引入方式</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="/css/name.css"&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="xxxx"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="标签外挂（Tag-Plugins）-推荐"><a href="#标签外挂（Tag-Plugins）-推荐" class="headerlink" title="标签外挂（Tag Plugins）(推荐)"></a>标签外挂（Tag Plugins）(推荐)</h2><p><a href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">参考</a><br><a href="https://blog.ccknbc.cc/posts/introduction-of-plugin-tags-based-on-butterfly/">参考</a><br>标籤外挂是Hexo独有的功能，并不是标準的Markdown格式。</p><p>以下的写法，只适用于Butterfly主题，用在其它主题上不会有效果，甚至可能会报错。使用前请留意</p><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>页面内置小标签<br>使用</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">{% tabs Unique name, [index] %}</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br><span class="line"></span><br><span class="line">Unique name   : Unique name of tabs block tag without comma.</span><br><span class="line"><span class="code">                Will be used in #id's as prefix for each tab with their index numbers.</span></span><br><span class="line"><span class="code">                If there are whitespaces in name, for generate #id all whitespaces will replaced by dashes.</span></span><br><span class="line"><span class="code">                Only for current url of post/page must be unique!</span></span><br><span class="line"><span class="code">[index]       : Index number of active tab.</span></span><br><span class="line"><span class="code">                If not specified, first tab (1) will be selected.</span></span><br><span class="line"><span class="code">                If index is -1, no tab will be selected. It's will be something like spoiler.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[Tab caption] : Caption of current tab.</span></span><br><span class="line"><span class="code">                If not caption specified, unique name with tab index suffix will be used as caption of tab.</span></span><br><span class="line"><span class="code">                If not caption specified, but specified icon, caption will empty.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code">[@icon]       : FontAwesome icon name (full-name, look like 'fas fa-font')</span></span><br><span class="line"><span class="code">                Can be specified with or without space; e.g. 'Tab caption @icon' similar to 'Tab caption@icon'.</span></span><br><span class="line"><span class="code">                Optional parameter.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">{% tabs test4 %}</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">{% endtabs %}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h3><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">{% btn [url],[text],[icon],[color] [style] [layout] [position] [size] %}</span><br><span class="line"></span><br><span class="line">[url]         : 链接</span><br><span class="line">[text]        : 按钮文字</span><br><span class="line">[icon]        : [可选] 图标</span><br><span class="line">[color]       : [可选] 按钮背景顔色(默认style时）</span><br><span class="line"><span class="code">                      按钮字体和边框顔色(outline时)</span></span><br><span class="line"><span class="code">                      default/blue/pink/red/purple/orange/green</span></span><br><span class="line"><span class="code">[style]       : [可选] 按钮样式 默认实心</span></span><br><span class="line"><span class="code">                      outline/留空</span></span><br><span class="line"><span class="code">[layout]      : [可选] 按钮佈局 默认为line</span></span><br><span class="line"><span class="code">                      block/留空</span></span><br><span class="line"><span class="code">[position]    : [可选] 按钮位置 前提是设置了layout为block 默认为左边</span></span><br><span class="line"><span class="code">                      center/right/留空</span></span><br><span class="line"><span class="code">[size]        : [可选] 按钮大小</span></span><br><span class="line"><span class="code">                      larger/留空</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>This is my website, click the button <a class="btn-beautify larger" href="https://butterfly.js.org/" title="Butterfly"><i class="far fa-hand-point-right"></i><span>Butterfly</span></a></p><h2 id="gallery-相册图库"><a href="#gallery-相册图库" class="headerlink" title="gallery 相册图库"></a>gallery 相册图库</h2><p><a href="https://dyfa.top/posts/waterfall-flow-photo-album.html#toc-heading-4">参考</a><br><a href="https://butterfly.js.org/posts/dc584b87/#%E5%9C%96%E5%BA%AB">参考</a></p><h3 id="编辑主题导航栏加入相册按钮"><a href="#编辑主题导航栏加入相册按钮" class="headerlink" title="编辑主题导航栏加入相册按钮"></a>编辑主题导航栏加入相册按钮</h3><p>在站点主题_config.yml文件下menu菜单下新增gallery页面。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line"> <span class="string">相册:</span> <span class="string">/gallery/</span> <span class="string">||</span> <span class="string">fas</span> <span class="string">fa-heart</span></span><br></pre></td></tr></tbody></table></figure><h3 id="新建相册页面"><a href="#新建相册页面" class="headerlink" title="新建相册页面"></a>新建相册页面</h3><p>在站点的source文件夹下面新建一个gallery相册页面。<br><code>hexo new page gallery</code><br>打开新建的gallery文件夹，里面会有一个index.md文件，设置index.md文件内容。然后使用标签外挂 galleryGroup，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">--- </span><br><span class="line">title: gallery </span><br><span class="line">date: 2020-10-05 12:00:00 </span><br><span class="line">type: "gallery"</span><br><span class="line">layout: "gallery" </span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"gallery-group-main"</span>&gt;</span></span></span><br><span class="line">{% galleryGroup '壁纸' '收藏的一些壁纸' '/Gallery/wallpaper' https://i.loli.net/2019/11/10/T7Mu8Aod3egmC4Q.png %}</span><br><span class="line">{% galleryGroup '漫威' '关于漫威的图片' '/Gallery/marvel' https://i.loli.net/2019/12/25/8t97aVlp4hgyBGu.jpg %}</span><br><span class="line">{% galleryGroup 'OH MY GIRL' '关于OH MY GIRL的图片' '/Gallery/ohmygirl' https://i.loli.net/2019/12/25/hOqbQ3BIwa6KWpo.jpg %}</span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>name：图库名字<br>description：图库描述<br>link：连接到对应相册的地址<br>img-url：图库封面的地址</p><h3 id="新建相册图片展示页面"><a href="#新建相册图片展示页面" class="headerlink" title="新建相册图片展示页面"></a>新建相册图片展示页面</h3><p>在gallery文件夹（也就是刚才创建的那个文件），可以在里面新建一些文件夹，也就是相册文件夹<br>然后在新建的相册文件夹里，分别在每个文件夹里新建文件index.md ,<br>然后使用标签外挂 gallery，具体用法请查看对应的内容。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">--- </span><br><span class="line">{% gallery %}</span><br><span class="line">![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)</span><br><span class="line">![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)</span><br><span class="line">{% endgallery %}</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h2><h3 id="创建友情链接页面"><a href="#创建友情链接页面" class="headerlink" title="创建友情链接页面"></a>创建友情链接页面</h3><p>在博客的根目录输入 <code>hexo new page link</code><br>修改source/link/index.md这个文件</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ---</span><br><span class="line">title: 友情链接</span><br><span class="line">date: 2018-06-07 22:17:49</span><br><span class="line"><span class="section">type: "link"</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></tbody></table></figure><h3 id="友情链接添加"><a href="#友情链接添加" class="headerlink" title="友情链接添加"></a>友情链接添加</h3><p>在Hexo博客目录中的source/_data（如果没有 _data 文件夹，请自行创建），创建一个文件link.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">友情链接</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">那些人，那些事</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Hexo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://hexo.io/zh-tw/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">快速、简单且强大的网誌框架</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">class_name:</span> <span class="string">网站</span></span><br><span class="line">  <span class="attr">class_desc:</span> <span class="string">值得推荐的网站</span></span><br><span class="line">  <span class="attr">link_list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Youtube</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.youtube.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">视频网站</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Weibo</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://www.weibo.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">中国最大社交分享平台</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Twitter</span></span><br><span class="line">      <span class="attr">link:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">      <span class="attr">avatar:</span> <span class="string">https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png</span></span><br><span class="line">      <span class="attr">descr:</span> <span class="string">社交分享平台</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>class_name和class_desc支持html格式书写，如不需要，也可以留空。</p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>开启评论需要在comments-use中填写你需要的评论。</p><p>支持双评论显示，只需要配置两个评论（第一个为默认显示） </p><table><thead><tr><th>参数</th><th>解释</th></tr></thead><tbody><tr><td>use</td><td>使用的评论（填写的评论首字母需要大写。最多支持两个）注意：由于共用 ID,双评论不能是 Disqus 和 Disqusjs</td></tr><tr><td>text</td><td>是否显示评论服务商的名字</td></tr><tr><td>lazyload</td><td>是否为评论开启lazyload，开启后，只有滚动到评论位置时才会加载评论所需要的资源（开启lazyload后，评论数将不显示）</td></tr><tr><td>count</td><td>是否在文章顶部显示评论数livere 和 utterances 不支持评论数显示</td></tr><tr><td>card_post_count</td><td>是否在首页文章卡片显示评论数gitalk、livere 和 utterances不支持评论数显示</td></tr></tbody></table><h2 id="Pjax"><a href="#Pjax" class="headerlink" title="Pjax"></a>Pjax</h2><p>当用户点击链接，通过ajax更新页面需要变化的部分，然后使用HTML5的pushState修改浏览器的URL地址。</p><p>这样可以不用重复加载相同的资源（css/js）， 从而提升网页的加载速度。 </p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">pjax:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/music/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/no-pjax/</span></span><br></pre></td></tr></tbody></table></figure><p>对于一些第三方插件，有些并不支持 pjax 。<br>你可以把网页加入到 exclude 里，这个网页会被 pjax 排除在外。<br>点击该网页会重新加载网站</p><p>使用pjax后，一些自己DIY的js可能会无效，跳转页面时需要重新调用，请参考Pjax文档<br>使用pjax后，一些个别页面加载的js/css，将会改为所有页面都加载</p><p>Butterfly的Pjax目前仍有一些问题，请留意</p><h2 id="引用文章"><a href="#引用文章" class="headerlink" title="引用文章"></a>引用文章</h2><p><a href="https://hexo.io/zh-cn/docs/tag-plugins#%E5%BC%95%E7%94%A8%E6%96%87%E7%AB%A0">参考</a><br>以_post为根目录定位文件（md文件会被渲染成html）<br>因为使用了abbrlink生成文章永久链接，所以在GitHub仓库中由md渲染成的HTML文件名是日期加abbrlink数字</p><h3 id="新建一个页面打开文章"><a href="#新建一个页面打开文章" class="headerlink" title="新建一个页面打开文章"></a>新建一个页面打开文章</h3><p><code>&lt;a href="/2021/12184010.html" target="_blank"&gt;显示的文字&lt;/a&gt;</code></p><h3 id="在此页面打开新文章"><a href="#在此页面打开新文章" class="headerlink" title="在此页面打开新文章"></a>在此页面打开新文章</h3><p><code>[显示的文字](/2021/12184010.html)</code><br><code>{% post_link 文章文件名 显示文本 %}</code></p><h2 id="添加-RSS-订阅支持"><a href="#添加-RSS-订阅支持" class="headerlink" title="添加 RSS 订阅支持"></a>添加 RSS 订阅支持</h2><p>本主题中还使用到了 hexo-generator-feed 的 Hexo 插件来做 RSS，安装命令如下：<br><code>npm install hexo-generator-feed --save</code></p><p>执行 hexo clean &amp;&amp; hexo g 重新生成博客文件，然后在 public 文件夹中即可看到 atom.xml 文件，说明已经安装成功了。</p><p>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSS订阅</span></span><br><span class="line"><span class="attr">plugin:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment"># Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在主题的配置文件_config.butterfly.yml中的social属性下添加rss的icon配置：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">fa fa-rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></tbody></table></figure><h2 id="添加emoji表情支持"><a href="#添加emoji表情支持" class="headerlink" title="添加emoji表情支持"></a>添加emoji表情支持</h2><p>Matery 主题新增了对emoji表情的支持，使用到了 hexo-filter-github-emojis 的 Hexo 插件来支持 emoji表情的生成，把对应的markdown emoji语法（::,例如：<span class="github-emoji"><span>😄</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）转变成会跳跃的emoji表情，安装命令如下：<br><code>npm install hexo-filter-github-emojis --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">githubEmojis:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">inject:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">styles:</span></span><br><span class="line">  <span class="attr">customEmojis:</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="添加动态诗词"><a href="#添加动态诗词" class="headerlink" title="添加动态诗词"></a>添加动态诗词</h2><p><a href="https://blog.csdn.net/victoryxa/article/details/105841309">参考</a></p><p>采用的是今日诗词，每次返回一句诗词，根据时间、地点、天气、事件智能推荐。官网有<a href="https://www.jinrishici.com/doc/">API文档</a>，可以去看一下，有多种安装方式，最简单的方式就是从官网获取代码，<br>1.在/themes/matery/layout/_partial/head.ejs添加下面的一行代码：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://sdk.jinrishici.com/v2/browser/jinrishici.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>2.然后再将/themes/matery/layout/_partial/bg-cover-content.ejs中的<code>&lt;%= config.description %&gt;</code>修改为<code>&lt;%- '&lt;span id="jinrishici-sentence"&gt;正在加载今日诗词....&lt;/span&gt;' %&gt;</code><br>3.使用前提是将主题配置文件的subtitle的值改为false。</p><h2 id="添加萌萌的动漫人物"><a href="#添加萌萌的动漫人物" class="headerlink" title="添加萌萌的动漫人物"></a>添加萌萌的动漫人物</h2><p>1.安装插件<br><code>npm install --save hexo-helper-live2d</code><br>2.输入以下命令，安装下载动画人物库，将 haruto 更换成你想要的模型名称即可 如：<br><code>npm install live2d-widget-model-haruto</code><br>更多模型选择请<a href="https://gitcode.net/mirrors/xiazeyu/live2d-widget-models?utm_source=csdn_github_accelerator">点击</a></p><p>3.根目录_config.yml配置里面添加：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">live2d:</span> </span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> </span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> </span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> </span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> </span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> </span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">log:</span> <span class="literal">false</span> </span><br><span class="line">  <span class="attr">model:</span> </span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-haruto</span>  <span class="comment">#模型选择</span></span><br><span class="line">  <span class="attr">display:</span> </span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span>  <span class="comment">#模型位置</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span>   <span class="comment">#模型宽度</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span>  <span class="comment">#模型高度</span></span><br><span class="line">  <span class="attr">mobile:</span> </span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment">#是否在手机端显示</span></span><br><span class="line">    <span class="attr">react:</span> </span><br><span class="line">      <span class="attr">opacity:</span> <span class="number">0.7</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>动漫人物最好不要和不蒜子一起使用，不然不蒜子会显示不出来。</p><h2 id="添加全局吸底Aplayer音乐-不采用"><a href="#添加全局吸底Aplayer音乐-不采用" class="headerlink" title="添加全局吸底Aplayer音乐(不采用)"></a>添加全局吸底Aplayer音乐(不采用)</h2><h3 id="安装hexo-tag-aplayer插件"><a href="#安装hexo-tag-aplayer插件" class="headerlink" title="安装hexo-tag-aplayer插件"></a>安装hexo-tag-aplayer插件</h3><h3 id="关闭-asset-inject"><a href="#关闭-asset-inject" class="headerlink" title="关闭 asset_inject"></a>关闭 asset_inject</h3><p>由于需要全局都插入aplayer和meting资源，为了防止插入重复的资源，需要把asset_inject设为false<br>在Hexo的配置文件中</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aplayer:</span></span><br><span class="line">  <span class="attr">meting:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">asset_inject:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h3 id="开启主题的aplayerInject"><a href="#开启主题的aplayerInject" class="headerlink" title="开启主题的aplayerInject"></a>开启主题的aplayerInject</h3><p>在主题的配置文件中，enable设为true和per_page设为true</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Inject the css and script (aplayer/meting)</span></span><br><span class="line"><span class="attr">aplayerInject:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h3 id="插入Aplayer-html"><a href="#插入Aplayer-html" class="headerlink" title="插入Aplayer html"></a>插入Aplayer html</h3><p>把aplayer代码插入到主题配置文件的inject.bottom去</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;div</span> <span class="string">class="aplayer</span> <span class="literal">no</span><span class="string">-destroy"</span> <span class="string">data-id="000PeZCQ1i4XVs"</span> <span class="string">data-server="tencent"</span> <span class="string">data-type="artist"</span> <span class="string">data-fixed="true"</span> <span class="string">data-mini="true"</span> <span class="string">data-listFolded="false"</span> <span class="string">data-order="random"</span> <span class="string">data-preload="none"</span> <span class="string">data-autoplay="true"</span> <span class="string">muted&gt;&lt;/div&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>id是自己分享的歌曲后由链接得到的id<br>server可选netease（网易云音乐），tencent（QQ音乐），kugou（酷狗音乐），xiami（虾米音乐），baidu（百度音乐）。<br>type可选song（歌曲），playlist（歌单），album（专辑），search（搜索关键字），artist（歌手）</p><p>如果你想切换页面时，音乐不会中断。请把主题配置文件的pjax设为true，在class里需添加no-destroy，这样防止切换页面时Aplayer被销毁</p><h3 id="UI-调整"><a href="#UI-调整" class="headerlink" title="UI 调整"></a>UI 调整</h3><p>按照上面的步骤设置完成后，浏览器左下角会出现Aplayer。打开文章页面时，你会发现打开Toc目录的按钮被遮挡了。我们需要修改CSS来改变按钮的位置。<br>向上调整</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#toggle-sidebar</span> {</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">80px</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在主题配置文件中，添加到inject去</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'&lt;style type="text/css"&gt;#toggle-sidebar {bottom: 80px}&lt;/style&gt;'</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo-matery主题</title>
      <link href="/2022/101955848.html"/>
      <url>/2022/101955848.html</url>
      
        <content type="html"><![CDATA[<h1 id="matery主题配置"><a href="#matery主题配置" class="headerlink" title="matery主题配置"></a>matery主题配置</h1><h2 id="下载主题"><a href="#下载主题" class="headerlink" title="下载主题"></a>下载主题</h2><p>hexo-theme-matery 是一个采用 Material Design 和响应式设计的 Hexo 博客主题<br>去github下载解压缩后，将 hexo-theme-matery 的文件夹复制到 Hexo 的 themes 文件夹中即可。</p><h2 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h2><p>修改 Hexo 根目录下的_config.yml 的 theme 的值：<br>theme: hexo-theme-matery</p><h2 id="主题目录结构说明"><a href="#主题目录结构说明" class="headerlink" title="主题目录结构说明"></a>主题目录结构说明</h2><p>1.matery/layout下的.ejs文件是编写关于主页右上角分类，归档的<br>2.目录样式在：themes\Matery\layout_partial\post-detail-toc.ejs<br>3.如果有多语言支持需求，可以更改 themes/next/languages 下对应语言的翻译。</p><h2 id="medias个性化"><a href="#medias个性化" class="headerlink" title="medias个性化"></a>medias个性化</h2><p><a href="https://juejin.cn/post/6844904132608786446">参考</a></p><p>1.我先把banner 和 featureimages里的图片来了个大换血。不过这里我发现一个问题，壁纸尺寸必须和电脑显示屏的分辨率一样才能完美显示。比如我的电脑分辨率是1080*1920，那么我下载的壁纸也得是这个尺寸，不然浏览器渲染显示的时候会不好看。</p><p>2.接着我又把网站logo，avatars，favicon 也给换成了自己喜欢的图片<br><a href="http://www.uugai.com/">免费logo生成网站</a></p><h2 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h2><p>主题中内置了valine, miniValine, livere, gitment, gitalk, changyan评论<br>通过主题文件夹下的_config.yml文件中的相应属性进行设置<br>推荐使用valine和livere<br>这里重点说一下valine评论配置</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">on:</span> <span class="literal">true</span> <span class="comment"># 是否启用</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># 你的appid --&gt; https://valine.js.org/quickstart.html，请阅读这个获取appid和appkey</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># 你的key</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">''</span> <span class="comment"># 匿名者头像选项 https://valine.js.org/avatar.html 访客的头像,最好启用下面的`requiredFields`中的邮箱必填，填写qq邮箱，头像会变成qq头像</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">'客官，说点什么吧'</span> <span class="comment"># 评论内容输入框的 placeholder</span></span><br><span class="line">  <span class="attr">master:</span> <span class="string">'xxxxxx'</span> <span class="comment"># 博主标签识别，博主邮箱md5 可以去md5加密网站，例如 https://md5jiami.51240.com/ ，将自己的邮箱输入， 得到 32位小写 的字符串填入这里</span></span><br><span class="line">  <span class="attr">friends:</span> [<span class="string">'xxxxxxx'</span>, <span class="string">'xxxxxx'</span>] <span class="comment"># 小伙伴的 邮箱md5， 是个数组</span></span><br><span class="line">  <span class="attr">requiredFields:</span> [<span class="string">'nick'</span>, <span class="string">'mail'</span>] <span class="comment"># 设置必填项 ['nick', 'mail'] nick为昵称必填， mail为邮箱必填, 空数组，则不校验</span></span><br><span class="line">  <span class="attr">backgroundImg:</span> <span class="string">'/medias/comment-bg.gif'</span> <span class="comment"># 右下角背景图片, or http://xxx.gif</span></span><br><span class="line">  <span class="attr">backgroundColor:</span> <span class="string">'rgba(255,255,255,0.9)'</span> <span class="comment"># 背景颜色, 0.9标是透明度</span></span><br></pre></td></tr></tbody></table></figure><h2 id="打开腾讯兔小巢后台反馈"><a href="#打开腾讯兔小巢后台反馈" class="headerlink" title="打开腾讯兔小巢后台反馈"></a>打开腾讯兔小巢后台反馈</h2><p>在主题配置文件更改，加入自己注册后得到的产品Id就可以</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 腾讯兔小巢，见https://txc.qq.com/</span><br><span class="line">tuxiaochao:</span><br><span class="line">  enable: true</span><br><span class="line">  productId: 371566</span><br></pre></td></tr></tbody></table></figure><h2 id="添加-Tidio-在线聊天功能"><a href="#添加-Tidio-在线聊天功能" class="headerlink" title="添加 Tidio 在线聊天功能"></a>添加 Tidio 在线聊天功能</h2><p>前往 <a href="https://www.tidio.com/">Tidio</a> 官网注册并且获取 Public Key，并将 Public Key 填入主题的 _config.yml 文件中。</p><h2 id="百度优化"><a href="#百度优化" class="headerlink" title="百度优化"></a>百度优化</h2><p>登录百度搜索资源平台， 登录成功之后在 用户中心 –&gt; 站点管理 页面中点击添加网站，按提示操作。<br>因为我是部署在gitee上的，刚开始我选择的是文件验证方式，但一直提示验证文件内容不符，因此选择了HTML标签验证<br>复制的标签增加在<br><code>\themes\Chic\layout\_partial的head.ejs的&lt;head&gt;与&nbsp;&lt;/head&gt;标签之间</code><br>经过以上步骤，百度已经知道有我们网站的存在了，但是百度还不知道我们的网站上有什么内容，所以要向百度推送我们的内容。hexo-theme-matery主题已经内置了自动推送的方式， 检查themes/hexo-theme-matery/_config.yml文件中如下配置:<br><code># 百度搜索资源平台提交链接baiduPush: true</code><br>自动推送的JS代码部署在站点的每一个页面源代码中，当页面在每次被浏览时，链接就会被自动推送给百度。</p><h2 id="添加百度统计"><a href="#添加百度统计" class="headerlink" title="添加百度统计"></a>添加百度统计</h2><p><a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93137447?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522163988568316780271556025%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=163988568316780271556025&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-2-93137447.pc_search_insert_es_download&amp;utm_term=hexo+%E6%B7%BB%E5%8A%A0+baidu+Analytics+%E9%85%8D%E7%BD%AE&amp;spm=1018.2226.3001.4187">参考</a></p><p>1.<a href="https://tongji.baidu.com/web/10000419928/homepage/index">注册百度统计账号</a><br>2.添加博客域名<br>3.获取Baidu Analytics ID<br>然后进入代码管理-&gt;代码获取<br>可以看到如下一段javascript代码，这段代码本来是要手动嵌入到网页中的，但是Hexo已经帮我们嵌入了，所以我们自诩配置Baidu Analytics ID即可，这个ID就是下面代码的hm.js?后面那一串，先复制一下</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> _hmt = _hmt || [];</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> hm = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">  hm.src = <span class="string">"https://hm.baidu.com/hm.js?5b6ae75148041557ddd693925322myid"</span>;</span><br><span class="line">  <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"script"</span>)[<span class="number">0</span>]; </span><br><span class="line">  s.parentNode.insertBefore(hm, s);</span><br><span class="line">})();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p>4.配置Baidu Analytics ID<br>打开主题的配置文件，然后搜索Baidu Analytics ID，找到如下配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Baidu Analytics ID</span></span><br><span class="line"><span class="attr">baidu_analytics:</span> <span class="string">5b6ae75148041557ddd69392532288de</span></span><br></pre></td></tr></tbody></table></figure><p>去掉baidu_analytics前面的#号开启百度统计，值设置成刚在百度统计后台复制的Baidu Analytics ID</p><h2 id="添加导航页"><a href="#添加导航页" class="headerlink" title="添加导航页"></a>添加导航页</h2><p><a href="https://yafine-blog.cn/posts/e925.html">参考</a></p><p>1.首先新建页面，执行下面的命令</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page navigate</span><br></pre></td></tr></tbody></table></figure><p>2.修改 navigate 目录下的 index.md 的格式</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 导航</span><br><span class="line">date: 2020-05-09 11:19:14</span><br><span class="line">type: "navigate"</span><br><span class="line"><span class="section">layout: "navigate"</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></tbody></table></figure><p>3.在主题配置文件中添加导航</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main menu navigation url and icon</span></span><br><span class="line"><span class="comment"># 配置菜单导航的名称、路径和图标icon.</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Index:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-home</span></span><br><span class="line">  <span class="string">统计:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-sitemap</span></span><br><span class="line">    <span class="attr">children:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">分类</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/categories</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-bookmark</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">标签</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/tags</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tags</span>     </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">归档</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/archives</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-archive</span></span><br><span class="line">  <span class="attr">About:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/about</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-address-card</span></span><br><span class="line">  <span class="attr">Contact:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/contact</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-comments</span></span><br><span class="line">  <span class="string">友人帐:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/friends</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-share-alt</span></span><br><span class="line">  <span class="string">赞助墙:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/sponsor</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-credit-card</span></span><br><span class="line">  <span class="string">导航:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">/navigate</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-location-arrow</span></span><br></pre></td></tr></tbody></table></figure><p>4.在 matery/layout 下新建 navigate.ejs</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"navi-height bg-cover pd-header "</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">" link-box container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!-- 搜索框 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"baidu baidu-2 large-screen"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"f"</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"Select-2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"Select-box-2"</span> <span class="attr">id</span>=<span class="string">"baidu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">style</span>=<span class="string">"height: 46px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"this_s"</span>&gt;</span>百 · 度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"bing_s"</span>&gt;</span>必 · 应<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"google_s"</span>&gt;</span>谷 · 歌<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"baidu_s"</span>&gt;</span>百 · 度<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">"wd"</span> <span class="attr">id</span>=<span class="string">"kw-2"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qingkong"</span> <span class="attr">id</span>=<span class="string">"qingkong"</span> <span class="attr">title</span>=<span class="string">"清 · 空"</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span>x<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">"搜 · 索"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">                    <span class="attr">id</span>=<span class="string">"su-2"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"keylist"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- 链接 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row tags-posts "</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>娱乐 · 影视<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.jd.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>京东<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.taobao.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>淘宝<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.tmall.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>天猫<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://v.qq.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>腾讯视频<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.iqiyi.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>爱奇艺<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.bilibili.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>哔哩哔哩<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://music.163.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>网易云音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://y.qq.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>QQ音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.kugou.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>酷狗音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>社区 · Code<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.mobaijun.com/contact/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>留言<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>GitHub<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://coding.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Coding<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://juejin.im/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>掘金<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://gitee.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>码云<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.csdn.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>CSDN<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.jianshu.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>简书<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://segmentfault.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>思否<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://cloud.tencent.com/developer/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>云+社区<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>实用 · 工具<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://mdnice.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Nice编辑器<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://translate.google.cn/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>谷歌翻译<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.uupoop.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>在线PS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.processon.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>思维导图<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://wallhaven.cc/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>超清壁纸<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://cli.im/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>二维码<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.yinfans.me/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>音范思<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.52pojie.cn/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>吾爱破解<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://my.openwrite.cn/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>OW分发<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>编程 · 学习<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.oschina.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>开源中国<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://htmldog.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>HTML狗<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.icourse163.org/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>中国大学慕课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.imooc.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>慕课网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.wxapp-union.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>小程序<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.runoob.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://blog.51cto.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>51CTO<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.shiyanlou.com/library/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>实验楼<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://spring.io/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Spring<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>资讯 · 趋势<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.huxiu.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>虎嗅<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://insights.stackoverflow.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>技术调查<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.asciiworld.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>摸鱼<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://sspai.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>少数派<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://zh.wikihow.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>WikeHom<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.awesomes.cn/rank?sort=hot"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>前端趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github-trending.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>GitHub趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.tiobe.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>编程趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://trends.google.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Google趋势<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col s12 m6 l4 friend-div"</span> <span class="attr">data-aos</span>=<span class="string">"zoom-in-up"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jj-list-tit"</span>&gt;</span>搜索 · 其他<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"jj-list-con"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://ac.scmor.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>谷歌镜像<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.pansoso.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>网盘搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://tool.mkblog.cn/music/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>音乐搜索<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.dytt8.net/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>电影天堂<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://carbon.now.sh/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>代码图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.zhipin.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>Boos<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://fontawesome.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>图标库<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.qvdv.com/tools/qvdv-guid.html"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>在线工具<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://zhongguose.com/"</span> <span class="attr">class</span>=<span class="string">"link-3"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>中国色<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"> <span class="comment">/*选择搜索引擎*/</span> $(<span class="string">'.Select-box ul'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'auto'</span>) }, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'40px'</span>) }); $(<span class="string">'.Select-box-2 ul'</span>).hover(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'auto'</span>) }, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ $(<span class="built_in">this</span>).css(<span class="string">'height'</span>, <span class="string">'46px'</span>) }); $(<span class="string">'.Select-box li'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">var</span> _tihs = $(<span class="built_in">this</span>).attr(<span class="string">'class'</span>); <span class="keyword">var</span> _html = $(<span class="built_in">this</span>).html(); <span class="keyword">if</span> (_tihs == <span class="string">'baidu_s'</span>) { _tihs = <span class="string">'https://www.baidu.com/s'</span>; _name = <span class="string">'wd'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'google_s'</span>) { _tihs = <span class="string">'https://www.google.com/search'</span>; _name = <span class="string">'q'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'bing_s'</span>) { _tihs = <span class="string">'https://www.bing.com/search'</span>; _name = <span class="string">'q'</span>; } $(<span class="string">'.baidu form'</span>).attr(<span class="string">'action'</span>, _tihs); $(<span class="string">'.this_s'</span>).html(_html); $(<span class="string">'#kw'</span>).attr(<span class="string">'name'</span>, _name); $(<span class="string">'.Select-box ul'</span>).css(<span class="string">'height'</span>, <span class="string">'40px'</span>) }); $(<span class="string">'.Select-box-2 li'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{ <span class="keyword">var</span> _tihs = $(<span class="built_in">this</span>).attr(<span class="string">'class'</span>); <span class="keyword">var</span> _html = $(<span class="built_in">this</span>).html(); <span class="keyword">if</span> (_tihs == <span class="string">'baidu_s'</span>) { _tihs = <span class="string">'https://www.baidu.com/s'</span>; _name = <span class="string">'wd'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'google_s'</span>) { _tihs = <span class="string">'https://www.google.com/search'</span>; _name = <span class="string">'q'</span>; } <span class="keyword">if</span> (_tihs == <span class="string">'bing_s'</span>) { _tihs = <span class="string">'https://www.bing.com/search'</span>; _name = <span class="string">'q'</span>; } $(<span class="string">'.baidu form'</span>).attr(<span class="string">'action'</span>, _tihs); $(<span class="string">'.this_s'</span>).html(_html); $(<span class="string">'#kw-2'</span>).attr(<span class="string">'name'</span>, _name); $(<span class="string">'.Select-box-2 ul'</span>).css(<span class="string">'height'</span>, <span class="string">'48px'</span>) }); <span class="comment">//清空输入框内容 $('.qingkong').click(function () { cls(); $(this).css('display', 'none') }); function cls() { var sum = 0; var t = document.getElementsByTagName("INPUT"); for (var i = 0; i &lt; t.length; i++) { if (t[i].type == 'text') { ++sum; t[i].value = "";//清空 } } } //清空输入框按钮的显示和隐藏 function if_btn() { var btn_obj = document.getElementById("kw") || document.getElementById("kw-2"); var cls_btn = document.getElementById("qingkong"); var btn_obj_val; var times; //当元素获得焦点时 if (btn_obj == '' || btn_obj == null) { return false; //如果没有找到这个元素，则将函数返回，不继续执行 } btn_obj.onfocus = function () { times = setInterval(function () { btn_obj_val = btn_obj.value; if (btn_obj_val != 0) { cls_btn.style.display = "block"; } else { cls_btn.style.display = "none"; } }, 200); } //元素失去焦点时 btn_obj.onblur = function () { clearInterval(times); } } </span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span></span><br><span class="line"><span class="css"><span class="xml">    * {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>,<span class="selector-tag">form</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-weight</span>: normal;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">img</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-style</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">list-style</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-tag">a</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-decoration</span>: none</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.card</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">25</span>, <span class="number">240</span>, <span class="number">229</span>, <span class="number">0</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">96%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin-left</span>: <span class="number">2%</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu</span> <span class="selector-tag">form</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: relative</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-tag">ul</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">left</span>: -<span class="number">1px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-top</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">overflow</span>: hidden</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#484848</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#3385ff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-class">.this_s</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box</span> <span class="selector-class">.this_s</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.qingkong</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">right</span>: <span class="number">120px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">12px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-radius</span>: <span class="number">18px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#666666</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.qingkong</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.qingkong</span><span class="selector-pseudo">:active</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.3</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">110px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu-2</span> <span class="selector-tag">form</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">520px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.baidu-2</span> <span class="selector-tag">input</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">13px</span> <span class="number">8px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#Select-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">float</span>: left;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: relative;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-tag">ul</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">height</span>: <span class="number">46px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">left</span>: <span class="number">0px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">top</span>: <span class="number">1px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">z-index</span>: <span class="number">9999</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.9</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-top</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">overflow</span>: hidden</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">60px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">46px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#484848</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-tag">li</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="number">#3385ff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-class">.this_s</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.Select-box-2</span> <span class="selector-class">.this_s</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#317ef3</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#kw-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">335px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">outline</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.2</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#000000</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding-left</span>: <span class="number">70px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-weight</span>: bold;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*修改搜索框样式*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#su-2</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">90px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-top</span>: <span class="number">#3385ff</span> <span class="number">1px</span> solid;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#2d78f4</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">cursor</span>: pointer;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="comment">/*去轮廓阴影*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">outline</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*光标移动到搜索框颜色*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#su-2</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-id">#su-2</span><span class="selector-pseudo">:active</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">box-shadow</span>: inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">        -webkit-<span class="attribute">box-shadow</span>: inset <span class="number">1px</span> <span class="number">1px</span> <span class="number">3px</span> blue;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.jj-list-tit</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding-left</span>: <span class="number">38.5%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.jj-list-con</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">overflow</span>: hidden;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">0</span> auto</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*控制网站列表间距*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.jj-list-con</span> <span class="selector-tag">li</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">width</span>: <span class="number">31.333%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">margin</span>: <span class="number">1%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.link-3</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: block;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">35</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">color</span>: <span class="number">#FFF</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">text-align</span>: center;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">0</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">transition</span>: all <span class="number">0.2s</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.link-3</span><span class="selector-pseudo">:hover</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">45</span>);</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">font-weight</span>: bold</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*1栏 小于584*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">584px</span>) {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.navi-height</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">1300px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.link-box</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.large-screen</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* 2栏 大于584 小于993px */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">584px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">993px</span>) {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.navi-height</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">800px</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.link-box</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">margin-top</span>: <span class="number">5%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.large-screen</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/*3栏 大于993px*/</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="keyword">@media</span> <span class="keyword">only</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">993px</span>) {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="selector-class">.navi-height</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">            <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="css"><span class="xml">        }</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="comment">/* 隐藏footer */</span></span></span></span><br><span class="line"><span class="css"><span class="xml">    <span class="selector-class">.page-footer</span> {</span></span></span><br><span class="line"><span class="css"><span class="xml">        <span class="attribute">display</span>: none;</span></span></span><br><span class="line"><span class="css"><span class="xml">    }</span></span></span><br><span class="line"><span class="css"><span class="xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;% if (theme.banner.enable) { %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="comment">// 每天切换 banner 图.  Switch banner image every day.</span></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="keyword">var</span> bannerUrl = <span class="string">"&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/medias/banner/') %&gt;"</span> + <span class="keyword">new</span> <span class="built_in">Date</span>().getDay() + <span class="string">'.jpg'</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url('</span> + bannerUrl + <span class="string">')'</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;% } else { %&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    $(<span class="string">'.bg-cover'</span>).css(<span class="string">'background-image'</span>, <span class="string">'url(&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('</span>/medias/banner/<span class="number">0.</span>jpg<span class="string">') %&gt;)'</span>);</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">&lt;% } %&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="新增加载动画"><a href="#新增加载动画" class="headerlink" title="新增加载动画"></a>新增加载动画</h2><p><a href="https://juejin.cn/post/6844904145250598919">参考</a></p><p>1.在 Matery 主题配置文件 _config.yml 中新增配置属性 preloader。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否开启页面加载动画 true 开启，false 关闭</span></span><br><span class="line"><span class="attr">preloader:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>2.在 Matery 主题目录 /layout/_widget 下新增文件 loading.ejs，将以下内容写入 loading.ejs。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;% <span class="keyword">if</span> (theme.preloader.enable) { %&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"loading-box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-left-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-right-bg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"spinner-box"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-border-1"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-core"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-border-2"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"configure-core"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"loading-word"</span>&gt;</span>加载中...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></span><br><span class="line"><span class="javascript"><span class="xml">    <span class="built_in">window</span>.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.body.style.overflow = <span class="string">'auto'</span>;</span></span></span><br><span class="line"><span class="javascript"><span class="xml">        <span class="built_in">document</span>.getElementById(<span class="string">'loading-box'</span>).classList.add(<span class="string">"loaded"</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml">    }, <span class="literal">false</span>)</span></span></span><br><span class="line"><span class="javascript"><span class="xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;% } %&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>3.接着在 Matery 主题目录 /css 下新增 loading.css ，并将以下内容写入 loading.css。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.loading-left-bg</span>,</span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.loading-right-bg</span> {</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#37474f</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.5s</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.loading-right-bg</span> {</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> &gt; <span class="selector-class">.spinner-box</span> {</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.configure-border-1</span> {</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ffab91</span>;</span><br><span class="line">  <span class="attribute">animation</span>: configure-clockwise <span class="number">3s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.configure-border-2</span> {</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">115px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgb</span>(<span class="number">63</span>, <span class="number">249</span>, <span class="number">220</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  <span class="attribute">animation</span>: configure-xclockwise <span class="number">3s</span> ease-in-out <span class="number">0s</span> infinite alternate;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.loading-word</span> {</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.8rem</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#loading-box</span> <span class="selector-class">.spinner-box</span> <span class="selector-class">.configure-core</span> {</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#37474f</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.loaded</span> <span class="selector-tag">div</span><span class="selector-class">.loading-left-bg</span> {</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.loaded</span> <span class="selector-tag">div</span><span class="selector-class">.loading-right-bg</span> {</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">100%</span>, <span class="number">0</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-class">.loaded</span> <span class="selector-tag">div</span><span class="selector-class">.spinner-box</span> {</span><br><span class="line">  <span class="attribute">display</span>: none <span class="meta">!important</span>; </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> configure-clockwise {</span><br><span class="line">  <span class="number">0%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">25%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">50%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">75%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">270deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">360deg</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> configure-xclockwise {</span><br><span class="line">  <span class="number">0%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">25%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">45deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">50%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">135deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">75%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">225deg</span>);</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="number">100%</span> {</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(-<span class="number">315deg</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>4.然后找到 Matery 主题目录 /layout/_partial 下找到 head.ejs，并在 &lt;head&gt; 标签中添加以下内容引入 loading.css 文件。<br><code>&lt;link rel="stylesheet" type="text/css" href="&lt;%- theme.jsDelivr.url %&gt;&lt;%- url_for('/css/loading.css') %&gt;"&gt;</code></p><p>5.再找到 Matery 主题目录 /layout 下找到 layout.ejs，然后在&lt;body&gt; 标签下引入 loading.ejs。<br><code>&lt;%- partial('_widget/loading') %&gt;</code></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客优化</title>
      <link href="/2022/101932575.html"/>
      <url>/2022/101932575.html</url>
      
        <content type="html"><![CDATA[<h2 id="更好的文章管理方案"><a href="#更好的文章管理方案" class="headerlink" title="更好的文章管理方案"></a>更好的文章管理方案</h2><p><a href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#1-%E5%89%8D%E8%A8%80">https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#1-%E5%89%8D%E8%A8%80</a></p><h3 id="文章以目录分类"><a href="#文章以目录分类" class="headerlink" title="文章以目录分类"></a>文章以目录分类</h3><p>当我们写好一篇文章后，按照 hexo 的默认配置，我们需要将其放在 source/_post 目录下，等时间长了之后，_post 目录下的文章就会变得杂乱无章，无法让我们快速的 review 到一篇文章。</p><p>那么最好的解决方案就是我们在创建文章的时候以 文章分类 作为文件夹创建我们的文章，比如：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">└── source</span><br><span class="line">    └── _post</span><br><span class="line">        ├── 前端</span><br><span class="line">        │   ├── Javascript</span><br><span class="line">        │   │   └── Javascript原型链机制.md</span><br><span class="line">        │   └── 浏览器</span><br><span class="line">        │       └── 浏览器性能优化.md</span><br><span class="line">        └── 后台</span><br><span class="line">            ├── GoLang</span><br><span class="line">            │   └── go语言简介.md</span><br><span class="line">            └── Java</span><br><span class="line">                └── Spring MVC 快速入门.md</span><br></pre></td></tr></tbody></table></figure><h3 id="根据文件目录自动生成-categories-信息"><a href="#根据文件目录自动生成-categories-信息" class="headerlink" title="根据文件目录自动生成 categories 信息"></a>根据文件目录自动生成 categories 信息</h3><p>虽然我们把文章放的井井有条了，但是每个文章里的 categorys 字段还是要我们手动自己维护的，比如在 source/_post/前端/Javascript/Javascript原型链机制.md 文件中，我们要通过手写 categories 来让 hexo 知道这篇文章被放在 前端-Javascript 分类下：</p><p>为了省去手动维护 categorys 字段的这个问题，我们可以使用<a href="https://blog.eson.org/pub/e2f6e239/"> hexo-auto-category</a> 这个插件。这个插件在 Hexo 进行 build 的时候会去自动根据文章目录情况来自动修改文章的 categories 信息，<br><a href="https://github.com/xu-song/hexo-auto-category">github主页</a></p><p>安装<br><code>npm install hexo-auto-category --save</code><br>在站点根目录下的_config.yml添加：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Generate categories from directory-tree</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/xu-song/hexo-auto-category</span></span><br><span class="line"><span class="comment"># depth: the depth of directory-tree you want to generate, should &gt; 0</span></span><br><span class="line"><span class="attr">auto_category:</span></span><br><span class="line"> <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line"> <span class="comment">#如果只想生成第一级目录分类，可以设置depth属性</span></span><br><span class="line"> <span class="attr">depth:</span>    </span><br></pre></td></tr></tbody></table></figure><p>除此之外最好修改一下 _config.yml 中的两处默认配置：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改 permalink 让你的文章链接更加友好，并且有益于 SEO</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:hash.html</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 规定你的新文章在 _post 目录下是以 cateory </span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:category/:title</span></span><br></pre></td></tr></tbody></table></figure><h3 id="提交代码时自动生成新文章的-categories"><a href="#提交代码时自动生成新文章的-categories" class="headerlink" title="提交代码时自动生成新文章的 categories"></a>提交代码时自动生成新文章的 categories</h3><h2 id="一键部署插件"><a href="#一键部署插件" class="headerlink" title="一键部署插件"></a>一键部署插件</h2><p>通过 hexo-deployer-git 插件可以实现一键将博客同时部署到多个git仓库中。如同时发布到github及gitee提供的pages服务。安装：<br><code>npm install hexo-deployer-git --save</code><br>修改 Hexo 根目录下的_config.yml 文件中的如下内容:</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#一键部署到github,gitee,修改成自己的repo和branch</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">https://gitee.com/wenkex/wenkex.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br><span class="line">    <span class="attr">ignore_hidden:</span> <span class="literal">false</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">git@github.com:wenkexia/wenkexia.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">main</span></span><br><span class="line">    <span class="attr">ignore_hidden:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><p>1.使用到了 hexo-generator-search 的 Hexo 插件来做内容搜索，安装命令如下：<br><code>npm install hexo-generator-search --save</code><br>2.在 Hexo 根目录下的 _config.yml 文件中，新增以下的配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br></pre></td></tr></tbody></table></figure><p>3.在主题配置文件中开启本地搜索</p><h2 id="文章字数统计插件"><a href="#文章字数统计插件" class="headerlink" title="文章字数统计插件"></a>文章字数统计插件</h2><p>如果你想要在文章中显示文章字数、阅读时长信息，可以安装 hexo-wordcount插件。<br>安装命令如下：<br><code>npm i --save hexo-wordcount</code><br>然后只需在主题下的 _config.yml 文件中，激活以下配置项即可：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wordCount:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 将这个值设置为 true 即可.</span></span><br><span class="line">  <span class="attr">postWordCount:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">min2read:</span> <span class="literal">true</span>  </span><br><span class="line">  <span class="attr">totalCount:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><h2 id="图片懒加载"><a href="#图片懒加载" class="headerlink" title="图片懒加载"></a>图片懒加载</h2><ul><li>图片预加载：顾名思义，图片预加载就是在网页全部加载之前，提前加载图片。当用户需要查看时可直接从本地缓存中渲染，以提供给用户更好的体验，减少等待的时间。否则，如果一个页面的内容过于庞大，没有使用预加载技术的页面就会长时间的展现为一片空白，这样浏览者可能以为图片预览慢而没兴趣浏览，把网页关掉，这时，就需要图片预加载。当然这种做法实际上牺牲了服务器的性能换取了更好的用户体验。</li><li>图片懒加载（缓载）：延迟加载图片或符合某些条件时才加载某些图片。这样做的好处是减少不必要的访问数据库或延迟访问数据库的次数，因为每次访问数据库都是比较耗时的即只有真正使用该对象的数据时才会创建。懒加载的主要目的是作为服务器前端的优化，减少请求数或延迟请求数。</li><li>懒加载对服务器前端有一定的缓解压力作用，预载则会增加服务器前端压力。<br>使用图片懒加载需要安装插件：hexo-lazyload-image<br>在站点根目录执行下面的命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-lazyload-image --save</span><br></pre></td></tr></tbody></table></figure><p>之后在站点配置文件下添加下面的代码：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lazyload:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 是否开启图片懒加载</span></span><br><span class="line">  <span class="attr">onlypost:</span> <span class="literal">false</span>  <span class="comment"># 是否只对文章的图片做懒加载</span></span><br><span class="line">  <span class="attr">loadingImg:</span> <span class="comment"># eg ./images/loading.gif</span></span><br></pre></td></tr></tbody></table></figure><h2 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h2><p>因为 hexo 生成的 html、css、js 等都有很多的空格或者换行，而空格和换行也是占用字节的，所以需要将空格换行去掉也就是我要进行的 “压缩”。<br>我们采用 gulp 代码压缩方式。<br>使用方法：</p><ul><li>进入站点根目录下依次执行下面的命令：</li></ul><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装gulp模块</span></span><br><span class="line">npm install gulp -g</span><br><span class="line"><span class="comment"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span></span><br><span class="line">npm install gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save</span><br><span class="line"><span class="comment"># 额外的功能模块</span></span><br><span class="line">npm install gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</span><br></pre></td></tr></tbody></table></figure><ul><li>在 Hexo 根目录新建文件 gulpfile.js，并复制以下内容到文件中</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">"gulp"</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">"gulp-debug"</span>);</span><br><span class="line"><span class="keyword">var</span> cleancss = <span class="built_in">require</span>(<span class="string">"gulp-clean-css"</span>); <span class="comment">//css压缩组件</span></span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">"gulp-uglify"</span>); <span class="comment">//js压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">"gulp-htmlmin"</span>); <span class="comment">//html压缩组件</span></span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">"gulp-htmlclean"</span>); <span class="comment">//html清理组件</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">"gulp-imagemin"</span>); <span class="comment">//图片压缩组件</span></span><br><span class="line"><span class="keyword">var</span> changed = <span class="built_in">require</span>(<span class="string">"gulp-changed"</span>); <span class="comment">//文件更改校验组件</span></span><br><span class="line"><span class="keyword">var</span> gulpif = <span class="built_in">require</span>(<span class="string">"gulp-if"</span>); <span class="comment">//任务 帮助调用组件</span></span><br><span class="line"><span class="keyword">var</span> plumber = <span class="built_in">require</span>(<span class="string">"gulp-plumber"</span>); <span class="comment">//容错组件（发生错误不跳出任务，并报出错误内容）</span></span><br><span class="line"><span class="keyword">var</span> isScriptAll = <span class="literal">true</span>; <span class="comment">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span></span><br><span class="line"><span class="keyword">var</span> isDebug = <span class="literal">true</span>; <span class="comment">//是否调试显示 编译通过的文件</span></span><br><span class="line"><span class="keyword">var</span> gulpBabel = <span class="built_in">require</span>(<span class="string">"gulp-babel"</span>);</span><br><span class="line"><span class="keyword">var</span> es2015Preset = <span class="built_in">require</span>(<span class="string">"babel-preset-es2015"</span>);</span><br><span class="line"><span class="keyword">var</span> del = <span class="built_in">require</span>(<span class="string">"del"</span>);</span><br><span class="line"><span class="keyword">var</span> Hexo = <span class="built_in">require</span>(<span class="string">"hexo"</span>);</span><br><span class="line"><span class="keyword">var</span> hexo = <span class="keyword">new</span> Hexo(process.cwd(), {}); <span class="comment">// 初始化一个hexo对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 清除public文件夹</span></span><br><span class="line">gulp.task(<span class="string">"clean"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> del([<span class="string">"public/**/*"</span>]);</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span></span><br><span class="line"><span class="comment">// 创建静态页面 （等同 hexo generate）</span></span><br><span class="line">gulp.task(<span class="string">"generate"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">"generate"</span>, {</span><br><span class="line">                <span class="attr">watch</span>: <span class="literal">false</span></span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            });</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动Hexo服务器</span></span><br><span class="line">gulp.task(<span class="string">"server"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> hexo</span><br><span class="line">        .init()</span><br><span class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">            <span class="keyword">return</span> hexo.call(<span class="string">"server"</span>, {});</span><br><span class="line">        })</span><br><span class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">            <span class="built_in">console</span>.log(err);</span><br><span class="line">        });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 部署到服务器</span></span><br><span class="line">gulp.task(<span class="string">"deploy"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> hexo.init().then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        <span class="keyword">return</span> hexo</span><br><span class="line">            .call(<span class="string">"deploy"</span>, {</span><br><span class="line">                <span class="attr">watch</span>: <span class="literal">false</span></span><br><span class="line">            })</span><br><span class="line">            .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit();</span><br><span class="line">            })</span><br><span class="line">            .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>{</span><br><span class="line">                <span class="keyword">return</span> hexo.exit(err);</span><br><span class="line">            });</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的js文件</span></span><br><span class="line">gulp.task(<span class="string">"compressJs"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">"./public/**/*.js"</span>, <span class="string">"!./public/libs/**"</span>]) <span class="comment">//排除的js</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress JS:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(</span><br><span class="line">            gulpBabel({</span><br><span class="line">                <span class="attr">presets</span>: [es2015Preset] <span class="comment">// es5检查机制</span></span><br><span class="line">            })</span><br><span class="line">        )</span><br><span class="line">        .pipe(uglify()) <span class="comment">//调用压缩组件方法uglify(),对合并的文件进行压缩</span></span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>)); <span class="comment">//输出到目标目录</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的css文件</span></span><br><span class="line">gulp.task(<span class="string">"compressCss"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> option = {</span><br><span class="line">        <span class="attr">rebase</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">//advanced: true, //类型：Boolean 默认：true [是否开启高级优化（合并选择器等）]</span></span><br><span class="line">        <span class="attr">compatibility</span>: <span class="string">"ie7"</span> <span class="comment">//保留ie7及以下兼容写法 类型：String 默认：''or'*' [启用兼容模式； 'ie7'：IE7兼容模式，'ie8'：IE8兼容模式，'*'：IE9+兼容模式]</span></span><br><span class="line">        <span class="comment">//keepBreaks: true, //类型：Boolean 默认：false [是否保留换行]</span></span><br><span class="line">        <span class="comment">//keepSpecialComments: '*' //保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src([<span class="string">"./public/**/*.css"</span>, <span class="string">"!./public/**/*.min.css"</span>]) <span class="comment">//排除的css</span></span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress CSS:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(cleancss(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩public目录下的html文件</span></span><br><span class="line">gulp.task(<span class="string">"compressHtml"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> cleanOptions = {</span><br><span class="line">        <span class="attr">protect</span>: <span class="regexp">/&lt;\!--%fooTemplate\b.*?%--&gt;/g</span>, <span class="comment">//忽略处理</span></span><br><span class="line">        unprotect: <span class="regexp">/&lt;script [^&gt;]*\btype="text\/x-handlebars-template"[\s\S]+?&lt;\/script&gt;/gi</span> <span class="comment">//特殊处理</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">var</span> minOption = {</span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>, <span class="comment">//压缩HTML</span></span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>, <span class="comment">//省略布尔属性的值 &lt;input checked="true"/&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除所有空格作属性值 &lt;input id="" /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除&lt;script&gt;的type="text/javascript"</span></span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>, <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type="text/css"</span></span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>, <span class="comment">//清除HTML注释</span></span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面JS</span></span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>, <span class="comment">//压缩页面CSS</span></span><br><span class="line">        <span class="attr">minifyURLs</span>: <span class="literal">true</span> <span class="comment">//替换页面URL</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">"./public/**/*.html"</span>)</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress HTML:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(htmlclean(cleanOptions))</span><br><span class="line">        .pipe(htmlmin(minOption))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public/medias 目录内图片</span></span><br><span class="line">gulp.task(<span class="string">"compressImage"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> option = {</span><br><span class="line">        <span class="attr">optimizationLevel</span>: <span class="number">5</span>, <span class="comment">//类型：Number 默认：3 取值范围：0-7（优化等级）</span></span><br><span class="line">        <span class="attr">progressive</span>: <span class="literal">true</span>, <span class="comment">//类型：Boolean 默认：false 无损压缩jpg图片</span></span><br><span class="line">        <span class="attr">interlaced</span>: <span class="literal">false</span>, <span class="comment">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span></span><br><span class="line">        <span class="attr">multipass</span>: <span class="literal">false</span> <span class="comment">//类型：Boolean 默认：false 多次优化svg直到完全优化</span></span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">return</span> gulp</span><br><span class="line">        .src(<span class="string">"./public/medias/**/*.*"</span>)</span><br><span class="line">        .pipe(gulpif(!isScriptAll, changed(<span class="string">"./public/medias"</span>)))</span><br><span class="line">        .pipe(gulpif(isDebug, debug({ <span class="attr">title</span>: <span class="string">"Compress Images:"</span> })))</span><br><span class="line">        .pipe(plumber())</span><br><span class="line">        .pipe(imagemin(option))</span><br><span class="line">        .pipe(gulp.dest(<span class="string">"./public"</span>));</span><br><span class="line">});</span><br><span class="line"><span class="comment">// 执行顺序： 清除public目录 -&gt; 产生原始博客内容 -&gt; 执行压缩混淆 -&gt; 部署到服务器</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">"build"</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">"clean"</span>,</span><br><span class="line">        <span class="string">"generate"</span>,</span><br><span class="line">        <span class="string">"compressHtml"</span>,</span><br><span class="line">        <span class="string">"compressCss"</span>,</span><br><span class="line">        <span class="string">"compressJs"</span>,</span><br><span class="line">        <span class="string">"compressImage"</span>,</span><br><span class="line">        gulp.parallel(<span class="string">"deploy"</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(</span><br><span class="line">    <span class="string">"default"</span>,</span><br><span class="line">    gulp.series(</span><br><span class="line">        <span class="string">"clean"</span>,</span><br><span class="line">        <span class="string">"generate"</span>,</span><br><span class="line">        gulp.parallel(<span class="string">"compressHtml"</span>, <span class="string">"compressCss"</span>, <span class="string">"compressJs"</span>,<span class="string">"compressImage"</span>)</span><br><span class="line">    )</span><br><span class="line">);</span><br><span class="line"><span class="comment">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></span><br></pre></td></tr></tbody></table></figure><ul><li>以后的执行方式有两种：<ul><li>直接在 Hexo 根目录执行 gulp 或者 gulp default ，这个命令相当于 hexo cl&amp;&amp;hexo g 并且再把代码和图片压缩。</li><li>在 Hexo 根目录执行 gulp build  ，等于说生成、压缩文件后又帮你自动部署了。</li></ul></li></ul><h2 id="文章链接转静态短地址"><a href="#文章链接转静态短地址" class="headerlink" title="文章链接转静态短地址"></a>文章链接转静态短地址</h2><p>如果文章名称是中文的，那么 Hexo 默认生成的永久链接也会有中文，这样不利于SEO，且gitment评论对中文链接也不支持。我们可以用hexo-permalink-pinyin Hexo 插件生成文章时生成中文拼音的永久链接，<br>或者用hexo-abbrlink 生成静态文章链接。以下结合hexo-abbrlink生成类似 /yyyy/mmdd+随机数.html 的文章链接地址。<br>安装命令如下：<br><code>npm install hexo-abbrlink --save</code><br>在 Hexo 根目录下的 _config.yml 文件中，修改 permalink: ，并在文件末尾新增 abbrlink:配置项：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month:day:abbrlink.html</span></span><br><span class="line"></span><br><span class="line"><span class="attr">abbrlink:</span>   </span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc16</span> <span class="comment">#算法选项：crc16丨crc32  </span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">dec</span> <span class="comment">#输出进制：dec为十进制，hex为十六进制</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Hexo-微信公众号引流插件"><a href="#Hexo-微信公众号引流插件" class="headerlink" title="Hexo 微信公众号引流插件"></a>Hexo 微信公众号引流插件</h2><p>将免费的公众号引流工具整合到博客中，用户扫码关注公众号后才可以解锁文章，从而将博客流量引流到公众号，达到涨粉丝数的目的。<br>项目：<a href="https://github.com/rqh656418510/hexo-readmore">https://github.com/rqh656418510/hexo-readmore</a><br>文档：<a href="https://docs.techgrow.cn/v1/wechat/hexo/">https://docs.techgrow.cn/v1/wechat/hexo/</a></p><h2 id="每天自动提交url到百度和谷歌必应"><a href="#每天自动提交url到百度和谷歌必应" class="headerlink" title="每天自动提交url到百度和谷歌必应"></a>每天自动提交url到百度和谷歌必应</h2><p>每天中午 12 点推送一次网站信息到 Baidu 和 Bing，提高爬虫抓取几率<br><a href="https://github.com/lete114/hexo-seo-autopush">https://github.com/lete114/hexo-seo-autopush</a></p><h2 id="URL-Submission"><a href="#URL-Submission" class="headerlink" title="URL Submission"></a>URL Submission</h2><p>一个工具型Hexo插件，主动推送站点链接至谷歌、必应、百度等搜索引擎，提升网站收录质量和速度<br>项目：<a href="https://github.com/abnerwei/hexo-url-submission">https://github.com/abnerwei/hexo-url-submission</a><br>文档：<a href="https://abnerwei.com/wiki/hexo/url-submission">https://abnerwei.com/wiki/hexo/url-submission</a></p><h2 id="本地后台管理Hexo-Admin-弃用"><a href="#本地后台管理Hexo-Admin-弃用" class="headerlink" title="本地后台管理Hexo Admin(弃用)"></a>本地后台管理Hexo Admin(弃用)</h2><p>1.在博客根目录下运行下列指令<br><code>npm install --save hexo-admin</code><br>2.运行hexo s<br>3.接下来在浏览器地址栏粘贴这个地址，<br><a href="http://localhost:4000/admin/">http://localhost:4000/admin/</a><br>4.增加密码<br>进入Settings &gt; Setup authentification<br>设置账户，密码得到一串配置<br>填加到站点配置文件下</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">admin:</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">myfavoritename</span></span><br><span class="line">  <span class="attr">password_hash:</span> <span class="string">be121740bf988b2225a313fa1f107ca1</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">a</span> <span class="string">secret</span> <span class="string">something</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>npm uninstall hexo-admin   </p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建</title>
      <link href="/2022/101931415.html"/>
      <url>/2022/101931415.html</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一个快速，简单且功能强大的博客框架。如果你用 Markdown 写博客，Hexo 可以在几秒内生成带有精美主题的静态文件。</p><p>1.安装Node.js<br>2.安装Git并配置环境变量</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>创建一个文件夹例如blog，右键打开Git Bash  </p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli  <span class="comment">#安装hexo</span></span><br><span class="line">npm install</span><br><span class="line">hexo -v   <span class="comment">#查看版本</span></span><br><span class="line">hexo init blog       <span class="comment">#初始化Hexo  </span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>新建完成后，指定文件夹目录下有：<br>node_modules: 依赖包<br>public：存放生成的页面<br>scaffolds：生成文章的一些模板<br>source：用来存放你的文章<br>themes：主题<br>_config.yml: 博客的配置文件  </p><h2 id="Hexo版本升级"><a href="#Hexo版本升级" class="headerlink" title="Hexo版本升级"></a>Hexo版本升级</h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用淘宝源的 cnpm 替换 npm</span></span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">cnpm install -g cnpm                 <span class="comment"># 升级 npm</span></span><br><span class="line">cnpm cache clean -f                 <span class="comment"># 清除 npm 缓存</span></span><br><span class="line"></span><br><span class="line">===更新 hexo: 进入 blog 目录，执行如下命令=== </span><br><span class="line"><span class="comment"># 更新 package.json 中的 hexo 及个插件版本</span></span><br><span class="line">cnpm install -g npm-check </span><br><span class="line">npm-check                  <span class="comment"># 检查之前安装的插件，都有哪些是可以升级的 </span></span><br><span class="line">cnpm install -g npm-upgrade         </span><br><span class="line">npm-upgrade                 <span class="comment"># 升级系统中的插件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 确认 hexo 已经更新</span></span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">npm outdated   <span class="comment">#hexo用这个检查需要更新的插件</span></span><br></pre></td></tr></tbody></table></figure><h2 id="创建GitHub仓库或者码云仓库"><a href="#创建GitHub仓库或者码云仓库" class="headerlink" title="创建GitHub仓库或者码云仓库"></a>创建GitHub仓库或者码云仓库</h2><p>1.创建仓库，仓库名必须和用户名一致，其他按照默认，直接创建<br>2.打开cmd，添加Git本地用户<br>git config –global user.name “ 用户名  “<br>git config –global user.email “绑定的邮箱”</p><p>3.申请Sky秘钥<br>ssh-keygen -t rsa -C “Git绑定的邮箱”<br>sky在这 C:\Users\啊科.ssh</p><p>4.复制Sky秘钥添加到GitHub或者码云<br>查看是否成功  ssh -T <a href="mailto:git@github.com">git@github.com</a></p><h2 id="将本地仓库与远程仓库连接"><a href="#将本地仓库与远程仓库连接" class="headerlink" title="将本地仓库与远程仓库连接"></a>将本地仓库与远程仓库连接</h2><p>1.安装git部署插件：才能用hexo d 上传<br>npm install hexo-deployer-git –save</p><p>2.复制生成的仓库连接<br>修改博客目录下的_config.yml文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">https://gitee.com/wenkex/wenkex.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h2 id="本地创建文章，上传到远程仓库"><a href="#本地创建文章，上传到远程仓库" class="headerlink" title="本地创建文章，上传到远程仓库"></a>本地创建文章，上传到远程仓库</h2><p>站点根目录打开git bash</p><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#清除缓存 ,网页正常情况下可以忽略此条命令,执行该指令后,会删掉站点根目录下的public文件夹</span></span><br><span class="line">hexo clean   <span class="comment">#或者hexo cl</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成静态网页 (执行后会在站点根目录下生成public文件夹, 会将.md后缀的文件编译为.html文件,存放在"/blog/public/ " 路径下)  </span></span><br><span class="line">hexo g  <span class="comment">#等价于hexo generate</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#启动本地服务器，用于预览主题，监视文件变动并自动更新，除修改站点配置文件外,无须重启服务器,直接刷新网页即可生效。</span></span><br><span class="line">hexo s  <span class="comment">#hexo server</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#自动生成网站静态文件，并将本地数据部署到设定的仓库</span></span><br><span class="line">hexo d   <span class="comment">#或者hexo deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建新文章</span></span><br><span class="line"> hexo new 文章标题</span><br><span class="line"></span><br><span class="line">用yarn cgd或npm run cgd运行如下命令</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d一键上传到远程仓库  </span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo s一键开启本地映射</span><br></pre></td></tr></tbody></table></figure><h2 id="1-目录结构说明"><a href="#1-目录结构说明" class="headerlink" title="1.目录结构说明"></a>1.目录结构说明</h2><p><a href="https://juejin.cn/post/6844904082042257415#heading-6">参考</a><br><a href="https://hexo.io/zh-cn/docs/">参考</a></p><p>在执行过Hexo deploy命令之后，目录结构新增了.deploy_git，public，.gitignore，如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> $ tree -L 2</span><br><span class="line">.</span><br><span class="line">├── .deploy_git</span><br><span class="line">├── node_modules</span><br><span class="line">├── public</span><br><span class="line">├── scaffolds</span><br><span class="line">│&nbsp;&nbsp; ├── draft.md</span><br><span class="line">│&nbsp;&nbsp; ├── page.md</span><br><span class="line">│&nbsp;&nbsp; └── post.md</span><br><span class="line">├── source</span><br><span class="line">│&nbsp;&nbsp; ├── _posts</span><br><span class="line">│&nbsp;&nbsp; ├── _drafts</span><br><span class="line">├── themes</span><br><span class="line">├── _config.yml</span><br><span class="line">├── db.json</span><br><span class="line">├── package.json</span><br><span class="line">└── package-lock.json</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li><p>_config.yml<br>用来配置博客相关的参数，初始化时自动创建</p></li><li><p>node_modules用来存储已安装的各类依赖包</p></li><li><p>package.json用来查看 Hexo 的版本以及相关依赖包的版本。</p></li><li><p>scaffold<br>模板文件夹，初始化时自动创建。包含page，post，draft三种模板，分别对应 页面、要发布的文章、草稿。<br>在新建文章时，Hexo 会根据 scaffolds 文件夹内相对应的文件来建立文件，例如：<br><code>$ hexo new photo "My Gallery"</code><br>在执行这行指令时，Hexo 会尝试在 scaffolds 文件夹中寻找 photo.md，并根据其内容建立文章，</p></li><li><p>themes<br>主题文件夹，初始化时自动创建。每一个主题，都有一个单独的文件夹。</p></li><li><p>source：资源文件夹。用来存放图片、Markdown 文档（文章、草稿）、各种页面（分类、关于页面等）。</p></li><li><p>public：将 source 文件夹里的 Markdown 文档，转换成 index.html。再结合主题进行渲染，就是我们最终看到的博客。</p></li><li><p>.deploy_git：将 public 文件夹的内容提交到 Github 后生成，内容与 public 文件夹基本一致。</p></li></ul><p>这三者的关系大致是：source -&gt; public -&gt; .deploy_git<br>执行hexo generate，根据 source，更新 public。<br>执行hexo deploy，根据 public，更新 .deploy_git。</p><hr><h2 id="4-新建文章自动打开编辑器"><a href="#4-新建文章自动打开编辑器" class="headerlink" title="4.新建文章自动打开编辑器"></a>4.新建文章自动打开编辑器</h2><p>执行 hexo new “名字”，这样就会在_posts 下生成一篇新文章，但需要手动打开，<br>1.只需要在站点根目录下新建 scripts 目录，<br>2.然后在scripts目录下新建 auto_open.js，在文件填入一下内容：</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="comment">// Hexo 3 用户复制这段</span></span><br><span class="line">hexo.on(<span class="string">'new'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{</span><br><span class="line">  spawn(<span class="string">'start  "D:\Program Files\Typora\Typora.exe" '</span> + data.path);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>其中 “D:\Program Files\Typora\Typora.exe” 是我本地编辑器的路径，只需要改为你本地编辑器的路径即可，然后在执行 hexo cl &amp;&amp; hexo g -d，部署到 GitHub 即可，以后在发布文章就会自动打开编辑器。</p><h2 id="文章头设置"><a href="#文章头设置" class="headerlink" title="文章头设置"></a>文章头设置</h2><p>设置多Tag<br><code>tag: [tag1,tag2,...]</code></p><h2 id="Hexo渲染时设置例外"><a href="#Hexo渲染时设置例外" class="headerlink" title="Hexo渲染时设置例外"></a>Hexo渲染时设置例外</h2><p><strong>1.第一种</strong><br>在HTML文件前增加<br>layout: false</p><p><strong>2.设置例外目录</strong><br>假设你的Source文件夹里面有个Demo目录，要忽略Demo目录下的所有html页面，可以通过在_config.yml设置skip_render来忽略的目录，具体如下：<br>skip_render: Demo/*.html</p><p>文件匹配是基于正则匹配的，更复杂的情况如下</p><p>1.单个文件夹下全部文件：skip_render: demo/*<br>2.单个文件夹下指定类型文件：skip_render: demo/<em>.html<br>3.单个文件夹下全部文件以及子目录:skip_render: demo/</em>*<br>4.多个文件夹以及各种复杂情况：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">skip_render:</span><br><span class="line">    - 'demo/*.html'</span><br><span class="line">    - 'demo/**</span><br></pre></td></tr></tbody></table></figure><h2 id="如何优雅的魔改"><a href="#如何优雅的魔改" class="headerlink" title="如何优雅的魔改"></a>如何优雅的魔改</h2><p>在不动主题源文件方便日后升级的情况下，我们大部分采用外部引入 css,js 的方式实现，同时上传至 github，借用 jsDelivr 提供的 CDN 加速服务快速引用</p><p>在博客根目录source文件夹下新建一个xxx.js和xxx.css，名字自己取就行，最后我们正确引入即可，<br>主配（主题配置source目录下的 butterfly.yml））搜索 inject,然后在以下位置插入对应的 css 和 js 即可，例如，我是存放在主题文件夹子文件夹 css 和 js 内</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">inject:</span></span><br><span class="line">  <span class="attr">head:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;link</span> <span class="string">rel="stylesheet"</span> <span class="string">href="https://cdn.jsdelivr.net/gh/CCKNBC/ccknbc.github.io@latest/css/ccknbc.css"&gt;</span></span><br><span class="line">  <span class="attr">bottom:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&lt;script</span> <span class="string">src="https://cdn.jsdelivr.net/gh/CCKNBC/ccknbc.github.io@latest/js/ccknbc.js"&gt;&lt;/script&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">/css/ccknbc.css</span></span><br><span class="line"><span class="string">/js/ccknbc.js</span></span><br></pre></td></tr></tbody></table></figure><h2 id="github添加自定义域名"><a href="#github添加自定义域名" class="headerlink" title="github添加自定义域名"></a>github添加自定义域名</h2><p><a href="https://yafine-blog.cn/posts/fc0.html">参考</a></p><p>1.注册一个域名<br>2.添加域名解析（注：使用自定义域名，需要将记录类型修改为 CNAME 将域名指向另一个域名）<br>  主机记录填blog<br>  记录值修改为 GitHub对应仓库名，如：wenkexia.github.io<br>  最终用<a href="http://blog.wenkex.top来访问/">http://blog.wenkex.top来访问</a><br>3.在GitHub 中设置新的注册的域名（具体位置：Settings –&gt; Pages –&gt; Custom domain），之后保存验证就可以了 <a href="http://blog.wenkex.top/">http://blog.wenkex.top</a><br>4.进入 hexo 根目录的 source 文件夹；创建 CNAME 文件，文件添加域名 –&gt; blog.wenkex.top。注意：文件名全部大写，没有后缀；文件内容只有域名；<br>5.重新生成静态文件，并提交。hexo d</p><h2 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h2><p><a href="https://shen-yu.gitee.io/2020/hexo-seo/">参考</a></p><p>搜索引擎优化，又称为SEO，即Search Engine Optimization，它是一种通过分析搜索引擎的排名规律，了解各种搜索引擎怎样进行搜索、怎样抓取互联网页面、怎样确定特定关键词的搜索结果排名的技术。Google自动收录效果还不错，百度就差得远了（GitHub不允许百度的Spider爬取GitHub上的内容）。所以在第三步验证网站的时候，建议选择CNAME验证的方式。</p><h3 id="生成-sitemap-文件"><a href="#生成-sitemap-文件" class="headerlink" title="生成 sitemap 文件"></a>生成 sitemap 文件</h3><p>1.安装插件<br>查看是否有安装插件<br><code>npm [name] -v</code> </p><p>百度<br><code> npm install hexo-generator-baidu-sitemap --save</code><br>谷歌<br><code> npm install hexo-generator-sitemap --save</code></p><p>2.添加站点配置_config.yml</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>再重启 hexo，在本地访问 localhost:4000/sitemap.xml和 localhost:4000/baidusitemap.xml 就能正确的展示出两个sitemap 文件了。</p><h3 id="推送到-谷歌-和-百度"><a href="#推送到-谷歌-和-百度" class="headerlink" title="推送到 谷歌 和 百度"></a>推送到 谷歌 和 百度</h3><h4 id="百度"><a href="#百度" class="headerlink" title="百度"></a>百度</h4><p><a href="https://ziyuan.baidu.com/site/">百度站点管理</a><br>添加文件方式不可行，hexo会处理html文件</p><p>所以选择，在 head.ejs 里添加 html 标签</p><p>1.1 手动提交baidusitemap.xml(里面也有自动提交的代码)</p><p>1.2 可以用”抓取诊断”，手动-百度抓取</p><p>1.3 Robots → 检测并更新</p><h4 id="谷歌"><a href="#谷歌" class="headerlink" title="谷歌"></a>谷歌</h4><p><a href="https://search.google.com/search-console/about">谷歌站点管理</a></p><h3 id="在根目录下-新建-robots-txt"><a href="#在根目录下-新建-robots-txt" class="headerlink" title="在根目录下 新建 robots.txt"></a>在根目录下 新建 robots.txt</h3><p>robots配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Allow: /</span><br><span class="line">Allow: /home/</span><br><span class="line">Allow: /archives/</span><br><span class="line">Allow: /about/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /js/</span><br><span class="line">Disallow: /css/</span><br><span class="line">Disallow: /fonts/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /fancybox/</span><br><span class="line"></span><br><span class="line">Sitemap: http://yoursite/sitemap.xml</span><br><span class="line">Sitemap: http://yoursite/baidusitemap.xml</span><br></pre></td></tr></tbody></table></figure><h2 id="Hexo自定义原理"><a href="#Hexo自定义原理" class="headerlink" title="Hexo自定义原理"></a>Hexo自定义原理</h2><p>Hexo 系列的博客中的文章都是经Hexo的主题渲染的静态网页。所以Hexo博客大部分都呈现出一种高度的统一化与规范化。不过 Hexo 提供了跳过渲染功能，使得我们可以直接在博客中放入自定义网页。</p><p>比如在博客中放入图片、自定义404.html、自定义About页面、简历等<br>创建自定义网页<br>网页可以是自己编写的，也可以是别人现成的源码（下载喜欢的页面）。</p><h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>网页编写完成后，在Hexo\source目录下创建一个文件夹（文件夹名称任意，比如我创建的是about这个文件夹，部署完成后，访问<a href="http://mrlsm.github.io/about%E5%8D%B3%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%95%88%E6%9E%9C%EF%BC%8C%E4%BE%9D%E6%AD%A4%E7%B1%BB%E6%8E%A8%EF%BC%89">http://mrlsm.github.io/about即可看到效果，依此类推）</a></p><p>将 html 文件放置于此文件夹，并重命名为 index.html 。</p><p>跳过渲染有下述两种方法：</p><h3 id="1-指定文件跳过渲染"><a href="#1-指定文件跳过渲染" class="headerlink" title="1.指定文件跳过渲染"></a>1.指定文件跳过渲染</h3><p>实现原理</p><p>给单个文件添加不应用模板的标记，适用于个别特殊文件的处理。</p><p>实现方法<br>在不需要渲染的文章或HTML文件头部添加以下标记</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: false</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>添加该指令后，执行 hexo g命令时便会跳过该 index.html文件，使得index.html不受当前 hexo 主题影响，完全是一个独立的网页，如果网页引用了 css 或 js，css 和 js 需使用外链或者将css js 文件放入index.html同目录下引用。</p><p>引用图片亦是如此</p><h3 id="2-对相关文件跳过渲染"><a href="#2-对相关文件跳过渲染" class="headerlink" title="2.对相关文件跳过渲染"></a>2.对相关文件跳过渲染</h3><p>实现原理<br>只有source目录下的文件才会发布到public（能够在网络上访问到），因此Hexo只渲染source目录下的文件。skip_render参数设置的路径是相对于source目录的路径。<br>Hexo的配置文件中提供了配置项skip_render ，是用来对不需要的目录或者文件进行渲染排除。</p><p>实现方法<br>在_config.yml文件中设置skip_render<br>使用编辑器打开 Hexo 目录下的_config.yml文件，找到skip_render</p><p>skip_render一般有以下四种常用参数：</p><ul><li>跳过source目录下的 test.html:<br>skip_render: test.html</li><li>跳过source目录下 test 文件夹内所有文件：skip_render: test/*</li><li>跳过source目录下 test 文件夹内所有文件包括子文件夹以及子文件夹内的文件：<br>skip_render: test/**</li><li>跳过多个路径：<figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">skip_render:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test.html</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">test/*</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li><li>不渲染 md 文件<br>skip_render: test/*.md 单个文件夹下指定类型文件</li></ul><h2 id="用GitHub-Actions自动部署Hexo"><a href="#用GitHub-Actions自动部署Hexo" class="headerlink" title="用GitHub Actions自动部署Hexo"></a>用GitHub Actions自动部署Hexo</h2><h3 id="GitHub-仓库"><a href="#GitHub-仓库" class="headerlink" title="GitHub 仓库"></a>GitHub 仓库</h3><p>我们需要准备一个部署博客的仓库，一般命名为 .github.io 这种形式，<br>同时在本仓库上再创建一个分支用于保存 Hexo 开发源码。我这里使用建好的 hexo-blog-backup 分支进行 Hexo 开发源码备份，使用 master 分支进行博客源码部署。</p><p>提醒，这里也可以建两个仓库分别进行博客源码和 Hexo 开发源码的保存，跟建两个分支一样。</p><p>在gitee创建一个</p><h3 id="生成部署密钥"><a href="#生成部署密钥" class="headerlink" title="生成部署密钥"></a>生成部署密钥</h3><p>在 Git Bash Here 中执行<br><code>ssh-keygen -f github-deploy-key</code><br>会在当前目录中生成两个文件，私钥文件 github-deploy-key 和公钥文件 github-deploy-key.pub</p><h4 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h4><p>复制 github-deploy-key 文件内容，在 myblog 仓库 Settings -&gt; Secrets -&gt; New repository secret 页面上添加。<br>在 Name 输入框填写 HEXO_DEPLOY_PRI<br>在 Value 输入框填写 github-deploy-key 文件内容</p><p>本地私钥的话是为了有权限往 Gitee 仓库推送代码。因为现在是两个不同的平台之间同步代码，所以需拉取 Github 上博客的公开仓库，然后推送到 Gitee 的目标仓库。</p><p>另外建一个用于同步到 gitee 的私钥，用于存储 gitee 的密码<br>在 Name 输入框填写 GITEE_PASSWORD<br>在 Value 输入框填写 gitee 的密码</p><p>Gitee 的本地密码用处是后续需要脚本模拟人工操作，部署 Gitee Pages，因为 Gitee Pages 每次更新都需要手动点击部署按钮。</p><h4 id="公钥"><a href="#公钥" class="headerlink" title="公钥"></a>公钥</h4><p>公钥被上传的仓库代表着要被部署的仓库<br>复制 github-deploy-key.pub 文件内容，在 your.github.io 仓库 Settings -&gt; Deploy keys -&gt; Add deploy key 页面上添加。</p><p>在 Title 输入框填写 HEXO_DEPLOY_PUB<br>在 Key 输入框填写 github-deploy-key.pub 文件内容<br>勾选 Allow write access 选项</p><p>公钥需要添加到 Gitee 中：</p><h3 id="配置Hexo-deploy"><a href="#配置Hexo-deploy" class="headerlink" title="配置Hexo deploy"></a>配置Hexo deploy</h3><p>打开代码仓库中的_config.yml<br>将 git 存储库从 http 形式更改为 ssh 形式。<br>发布部署文件的的分支应该仓库配置的分支一样</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:moshuying/moshuying.github.io.git</span></span><br><span class="line">  <span class="comment"># example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></tbody></table></figure><h3 id="我的完整配置"><a href="#我的完整配置" class="headerlink" title="我的完整配置"></a>我的完整配置</h3><p><a href="http://evolly.one/p/65512.html">http://evolly.one/p/65512.html</a></p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Action 的名字</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Hexo</span> <span class="string">Auto</span> <span class="string">Deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># 触发条件1：main 分支收到 push 后执行任务。</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">  <span class="comment"># 触发条件2：手动按钮</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里放环境变量,需要替换成你自己的</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="comment"># Hexo 编译后使用此 git 用户部署到 github 仓库</span></span><br><span class="line">  <span class="attr">GIT_USER:</span> <span class="string">Arts</span></span><br><span class="line">  <span class="comment"># Hexo 编译后使用此 git 邮箱部署到 github 仓库</span></span><br><span class="line">  <span class="attr">GIT_EMAIL:</span> <span class="number">1184664659</span><span class="string">@qq.com</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Hexo 编译后要部署的 github 仓库</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_REPO:</span> <span class="string">wenkexia/wenkexia.github.io</span></span><br><span class="line">  <span class="comment"># Hexo 编译后要部署到的分支</span></span><br><span class="line">  <span class="attr">GIT_DEPLOY_BRANCH:</span> <span class="string">main</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Hexo 编译后使用此 gitee 用户部署到gitee仓库</span></span><br><span class="line">  <span class="attr">GITEE_USER:</span> <span class="string">wenkex</span></span><br><span class="line">  <span class="comment"># Hexo 编译后要部署的 gitee 仓库</span></span><br><span class="line">  <span class="attr">GITEE_DEPLOY_REPO:</span> <span class="string">wenkex/wenkex</span></span><br><span class="line">  <span class="comment"># Hexo 编译后要部署到的分支</span></span><br><span class="line">  <span class="attr">GITEE_DEPLOY_BRANCH:</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 注意替换为你的 GitHub 源仓库地址</span></span><br><span class="line">  <span class="attr">GIT_SOURCE_REPO:</span> <span class="string">git@github.com:wenkexia/wenkexia.github.io.git</span></span><br><span class="line">  <span class="comment"># 注意替换为你的 Gitee 目标仓库地址</span></span><br><span class="line">  <span class="attr">GITEE_DESTINATION_REPO:</span> <span class="string">git@gitee.com:wenkex/wenkex.git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Build</span> <span class="string">on</span> <span class="string">node</span> <span class="string">${{</span> <span class="string">matrix.node_version</span> <span class="string">}}</span> <span class="string">and</span> <span class="string">${{</span> <span class="string">matrix.os</span> <span class="string">}}</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">if:</span> <span class="string">github.event.repository.owner.id</span> <span class="string">==</span> <span class="string">github.event.sender.id</span></span><br><span class="line">    <span class="attr">strategy:</span></span><br><span class="line">      <span class="attr">matrix:</span></span><br><span class="line">        <span class="attr">os:</span> [<span class="string">ubuntu-18.04</span>]</span><br><span class="line">        <span class="attr">node_version:</span> [<span class="number">16.13</span><span class="number">.0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># 每个name表示一个步骤:step</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="comment">#步骤名称。</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span>  <span class="comment">#Checkout 一个 git 仓库到容器</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Checkout</span> <span class="string">deploy</span> <span class="string">repo</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">repository:</span> <span class="string">${{</span> <span class="string">env.GIT_DEPLOY_REPO</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">ref:</span> <span class="string">${{</span> <span class="string">env.GIT_DEPLOY_BRANCH</span> <span class="string">}}</span></span><br><span class="line">          <span class="attr">path:</span> <span class="string">.deploy_git</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Use</span> <span class="string">Node.js</span> <span class="string">${{</span> <span class="string">matrix.node_version</span> <span class="string">}}</span></span><br><span class="line">        <span class="comment"># 设置 node.js 环境</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">${{</span> <span class="string">matrix.node_version</span> <span class="string">}}</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Configuration</span> <span class="string">environment</span></span><br><span class="line">        <span class="attr">env:</span> <span class="comment">#该步骤所需的环境变量</span></span><br><span class="line">          <span class="attr">HEXO_DEPLOY_PRI:</span> <span class="string">${{secrets.HEXO_DEPLOY_PRI}}</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span> <span class="comment">#该步骤运行的命令或者 action。</span></span><br><span class="line">          <span class="string">sudo</span> <span class="string">timedatectl</span> <span class="string">set-timezone</span> <span class="string">"Asia/Shanghai"</span></span><br><span class="line">          <span class="string">mkdir</span> <span class="string">-p</span> <span class="string">~/.ssh/</span></span><br><span class="line">          <span class="string">echo</span> <span class="string">"$HEXO_DEPLOY_PRI"</span> <span class="string">&gt;</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">chmod</span> <span class="number">600</span> <span class="string">~/.ssh/id_rsa</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">github.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="comment"># coding 已取消同步</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">e.coding.net</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">ssh-keyscan</span> <span class="string">-t</span> <span class="string">rsa</span> <span class="string">gitee.com</span> <span class="string">&gt;&gt;</span> <span class="string">~/.ssh/known_hosts</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.name</span> <span class="string">$GIT_USER</span></span><br><span class="line">          <span class="string">git</span> <span class="string">config</span> <span class="string">--global</span> <span class="string">user.email</span> <span class="string">$GIT_EMAIL</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">dependencies</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          npm i -g hexo-cli</span></span><br><span class="line"><span class="string">          npm i</span></span><br><span class="line"><span class="string"></span>      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Deploy</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="comment"># # 以下为同步到gitee，如果你已经可以一键直接部署到github,gitee就不用这个</span></span><br><span class="line">      <span class="comment"># - name: Sync to Gitee</span></span><br><span class="line">      <span class="comment">#   uses: wearerequired/git-mirror-action@master</span></span><br><span class="line">      <span class="comment">#   env:</span></span><br><span class="line">      <span class="comment">#     # 直接使用了 HEXO_DEPLOY_PRI</span></span><br><span class="line">      <span class="comment">#     SSH_PRIVATE_KEY: ${{ secrets.HEXO_DEPLOY_PRI }}</span></span><br><span class="line">      <span class="comment">#   with:</span></span><br><span class="line">      <span class="comment">#     # GitHub 源仓库地址</span></span><br><span class="line">      <span class="comment">#     source-repo: ${{ env.GIT_SOURCE_REPO }}</span></span><br><span class="line">      <span class="comment">#     # Gitee 目标仓库地址</span></span><br><span class="line">      <span class="comment">#     destination-repo: ${{ env.GITEE_DESTINATION_REPO }}</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">Gitee</span> <span class="string">Pages</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">yanglbme/gitee-pages-action@main</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="comment"># 你的 Gitee 用户名</span></span><br><span class="line">          <span class="attr">gitee-username:</span> <span class="string">${{</span> <span class="string">env.GITEE_USER</span> <span class="string">}}</span></span><br><span class="line">          <span class="comment"># 注意在 Settings-&gt;Secrets 配置 GITEE_PASSWORD</span></span><br><span class="line">          <span class="attr">gitee-password:</span> <span class="string">${{</span> <span class="string">secrets.GITEE_PASSWORD</span> <span class="string">}}</span></span><br><span class="line">          <span class="comment"># 你的 Gitee 仓库，仓库名严格区分大小写，请准确填写，否则会出错</span></span><br><span class="line">          <span class="attr">gitee-repo:</span> <span class="string">${{</span> <span class="string">env.GITEE_DEPLOY_REPO</span> <span class="string">}}</span></span><br><span class="line">          <span class="comment"># 要部署的分支，默认是 master，若是其他分支，则需要指定（指定的分支必须存在）</span></span><br><span class="line">          <span class="attr">branch:</span> <span class="string">${{</span> <span class="string">env.GITEE_DEPLOY_BRANCH</span> <span class="string">}}</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="在线编辑Hexo的最佳方案"><a href="#在线编辑Hexo的最佳方案" class="headerlink" title="在线编辑Hexo的最佳方案"></a>在线编辑Hexo的最佳方案</h2><p>网上看Hexo的在线编辑方案，主流的有两种：</p><p>HexoPlusPlus<br>语雀<br>这两个方案大家百度一下都有教程。我不多介绍了。（看完你会发现我这个方案才是真香）</p><p>如果你也是使用了自动化部署Hexo的方案（就是推送源文件到仓库，然后借助Github Actions或 vercel这种自动部署的方案），只需要用Github的官方在线编辑器就可以完美解决出门在外临时想用电脑、手机写文并发布的需求。</p><p>只需要打开GitHub，打开你的【 hexo 源文件仓库】页面，按一下.（句号键） 或者 把 github.com 改成 github.dev，<br>就能在线编辑仓库的文件。我们在对应的文件夹新建、删除、修改后，commit一下就好了。</p><p>注意，在线编辑器，commit后是不需要push的哦。</p><h2 id="使用文章资源文件夹-弃用，用图床"><a href="#使用文章资源文件夹-弃用，用图床" class="headerlink" title="使用文章资源文件夹(弃用，用图床)"></a>使用文章资源文件夹(弃用，用图床)</h2><p>在config.yaml文件中更改一下配置：<br><code>post_asset_folder: true</code><br>当该配置被应用后，使用hexo new命令创建新文章时，会生成相同名字的文件夹，也就是文章资源文件夹。<br>此时应该使用这样的方式来引入图片：<br><code>{% asset_img image.jpg 这是一张图片 %}</code></p><ul><li>图片插件</li></ul><p>插件hexo-renderer-marked解决了这个问题。可以只用<code>npm install hexo-renderer-marked</code>命令直接安装，之后在config.yaml中更改配置如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></tbody></table></figure><h2 id="简化部署-弃用"><a href="#简化部署-弃用" class="headerlink" title="简化部署(弃用)"></a>简化部署(弃用)</h2><p>用了github action ，就没必要设置这个了</p><p>在package.json中<br>添加<code>"cgd": "hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</code><br>以后就可以用<code>npm run cgd</code>直接部署上线</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: {</span><br><span class="line">  <span class="attr">"build"</span>: <span class="string">"hexo generate"</span>,</span><br><span class="line">  <span class="attr">"clean"</span>: <span class="string">"hexo clean"</span>,</span><br><span class="line">  <span class="attr">"deploy"</span>: <span class="string">"hexo deploy"</span>,</span><br><span class="line">  <span class="attr">"server"</span>: <span class="string">"hexo server"</span>,</span><br><span class="line">  <span class="attr">"cgs"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo s"</span>,</span><br><span class="line">  <span class="attr">"cgd"</span>: <span class="string">"hexo clean &amp;&amp; hexo g &amp;&amp; hexo d"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><h2 id="增加上传功能-弃用"><a href="#增加上传功能-弃用" class="headerlink" title="增加上传功能(弃用)"></a>增加上传功能(弃用)</h2><p>在博客根目录下运行下列指令</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">echo</span> <span class="string">"hexo clean &amp;&amp; hexo g -d"</span><span class="string">&gt;hexo-deploy.bat</span> <span class="comment">#生成一个内容为"hexo clean &amp;&amp; hexo g -d"，名为"hexo-deploy"的bat文件。</span></span><br><span class="line"><span class="comment">#配置_config.yml文件，</span></span><br><span class="line"><span class="string">echo</span> <span class="string">admin:&gt;&gt;"_config.yml"</span></span><br><span class="line"><span class="string">echo</span> <span class="string">"  deployCommand: 'hexo-deploy.bat'"</span><span class="string">&gt;&gt;"_config.yml"</span></span><br><span class="line"><span class="comment">#开启hexo服务</span></span><br><span class="line"><span class="string">hexo</span> <span class="string">server</span> <span class="string">-d</span></span><br></pre></td></tr></tbody></table></figure><p>这个教程是对于github的部署的。</p><p>如果想用来管理gitee的博客，建议修改成<code>echo "hexo clean &amp;&amp; hexo g -d &amp;&amp; start https://gitee.com/用户名/用户名/pages"&gt;hexo-deploy.bat</code>，这样方便在网页端同步更新gitee page。<br>在网页中编辑完，直接左上角Deploy，直接点deploy按钮，就可以完成博客的部署。</p><p>可能遇到的问题(每次都要输入密码)：查看一下你的_config.yml，将文档最后的deploy的repo从http改为git@github类型。</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>java基本数据结构</title>
      <link href="/2022/101950914.html"/>
      <url>/2022/101950914.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1. 基本数据类型"></a>1. 基本数据类型</h2><table><thead><tr><th>数据类型</th><th>名称</th><th>内存大小(B) 注：1B = 8b</th></tr></thead><tbody><tr><td>byte</td><td>字节型</td><td>1</td></tr><tr><td>short</td><td>字符型</td><td>2</td></tr><tr><td>int</td><td>短整型</td><td>4</td></tr><tr><td>long</td><td>整型</td><td>8</td></tr><tr><td>float</td><td>单精度浮点型</td><td>4</td></tr><tr><td>double</td><td>双精度浮点型</td><td>8</td></tr><tr><td>char</td><td>字符型</td><td>2</td></tr><tr><td>boolean</td><td>布尔</td><td>不同情况下不同</td></tr></tbody></table><h3 id="1-1-整数型"><a href="#1-1-整数型" class="headerlink" title="1.1. 整数型"></a>1.1. 整数型</h3><ul><li>short型（短整型）数据在内存中占用2个字节</li><li>long型（长整型）数据在内存中占用8个字节。需要加l后缀<code>long num = 123L</code></li><li>int型（整型）数据在内存中占用4个字节。</li><li>byte型（字节型）数据在内存中占用1个字节，表示的存储数据范围为：-128~127。</li></ul><h3 id="1-2-浮点型"><a href="#1-2-浮点型" class="headerlink" title="1.2. 浮点型"></a>1.2. 浮点型</h3><ul><li>float型（单精度浮点型）数据在内存中占用4个字节。<br>  float t = 3.1f<pre><code>  f转为double型</code></pre></li><li>double型（双精度浮点型）数据在内存中占用8个字节。<br>  一般小数默认是double型</li></ul><h3 id="1-3-布尔型-boolean"><a href="#1-3-布尔型-boolean" class="headerlink" title="1.3. 布尔型(boolean)"></a>1.3. 布尔型(boolean)</h3><p>boolean：数据值只有true或false，适用于逻辑计算。</p><h3 id="1-4-字符型-char"><a href="#1-4-字符型-char" class="headerlink" title="1.4. 字符型(char)"></a>1.4. 字符型(char)</h3><p>char每个字符占2个字节，定义时用单引号’ ‘<br>char类型的变量在参与计算时，类型自动提升为Int,查询ascii码表</p><p>A的ASCII码是65，a的ASCII码是97。</p><p>小写字母的ASCII码是大写字母的ASCII码数值+32。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//char将整数转换为对应的字符</span></span><br><span class="line">(<span class="keyword">char</span>) (<span class="number">6</span>+ <span class="string">'a'</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="2-内置包装类"><a href="#2-内置包装类" class="headerlink" title="2. 内置包装类"></a>2. 内置包装类</h2><p>在 Java 的设计中提倡一种思想，即一切皆对象。但是从数据类型的划分中，我们知道 Java 中的数据类型分为基本数据类型和引用数据类型，但是基本数据类型怎么能够称为对象呢？于是 Java 为每种基本数据类型分别设计了对应的类，称之为包装类（Wrapper Classes），也有地方称为外覆类或数据类型类。<br>| ****   | ****       |<br>|:——:|:———-:|<br>| 基本数据类型 | 包装类        |<br>| byte   | Byte       |<br>| short  | Short      |<br>| int    | Integer    |<br>| long   | Long       |<br>| char   | Character  |<br>| float  | Float      |<br>| double | Double     |<br>|boolean |  Boolean   |</p><h3 id="2-1-装箱和拆箱"><a href="#2-1-装箱和拆箱" class="headerlink" title="2.1. 装箱和拆箱"></a>2.1. 装箱和拆箱</h3><p>基本数据类型转换为包装类的过程称为装箱，例如把 int 包装成 Integer 类的对象；<br>包装类变为基本数据类型的过程称为拆箱，例如把 Integer 类的对象重新简化为 int。</p><p>手动实例化一个包装类称为手动拆箱装箱。Java 1.5 版本之前必须手动拆箱装箱，之后可以自动拆箱装箱，也就是在进行基本数据类型和对应的包装类转换时，系统将自动进行装箱及拆箱操作，不用在进行手工操作</p><h3 id="2-2-Integer"><a href="#2-2-Integer" class="headerlink" title="2.2. Integer"></a>2.2. Integer</h3><table><thead><tr><th>方法</th><th>返回值</th><th>功能</th></tr></thead><tbody><tr><td>byteValue()</td><td>byte</td><td>以 byte 类型返回该 Integer 的值</td></tr><tr><td>shortValue()</td><td>short</td><td>以 short 类型返回该 Integer 的值</td></tr><tr><td>intValue()</td><td>int</td><td>以 int 类型返回该 Integer 的值</td></tr><tr><td>toString()</td><td>String</td><td>返回一个表示该 Integer 值的 String 对象</td></tr><tr><td>equals(Object obj)</td><td>boolean</td><td>比较此对象与指定对象是否相等</td></tr><tr><td>compareTo(Integer anotherlnteger)</td><td>int</td><td>在数字上比较两个 Integer 对象如相等返回 0；如调用对象的数值小于 anotherlnteger 的数值，则返回负值；</td></tr><tr><td>valueOf(String s)</td><td>Integer</td><td>返回保存指定的 String 值的 Integer 对象</td></tr><tr><td>parseInt(String s)</td><td>int</td><td>将数字字符串转换为 int 数值</td></tr></tbody></table><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//字符串转为int</span></span><br><span class="line">Integer.parseInt(<span class="string">"1234"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-Character-类"><a href="#2-3-Character-类" class="headerlink" title="2.3. Character 类"></a>2.3. Character 类</h3><p>Character 类用于对单个字符进行操作。</p><p>Character 类在对象中包装一个基本类型 char 的值</p><p>在实际开发过程中，我们经常会遇到需要使用对象，而不是内置数据类型的情况。为了解决这个问题，Java语言为内置数据类型char提供了包装类Character类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Character ch = <span class="keyword">new</span> Character(<span class="string">'a'</span>);  <span class="comment">//创建一个Character类对象</span></span><br></pre></td></tr></tbody></table></figure><p>Character类的方法<br>    1.isLetter()是否是一个字母<br>    2.isDigit()是否是一个数字字符<br>    3.isWhitespace()是否是一个空白字符<br>    4.isUpperCase()是否是大写字母<br>    5.isLowerCase()是否是小写字母<br>    6.toUpperCase()指定字母的大写形式<br>    7.toLowerCase()指定字母的小写形式<br>    8.toString()返回字符的字符串形式，字符串的长度仅为1</p><p>在某些情况下，Java编译器会自动创建一个Character对象。</p><p>例如，将一个char类型的参数传递给需要一个Character类型参数的方法时，那么编译器会自动地将char类型参数转换为Character对象。 这种特征称为装箱，反过来称为拆箱。</p><h2 id="3-引用数据类型"><a href="#3-引用数据类型" class="headerlink" title="3. 引用数据类型"></a>3. 引用数据类型</h2><p>引用数据类型有：类、接口类型、数组类型、String类型，枚举类型、注解类型。</p><p>区别</p><p>1.基本数据类型在被创建时，在栈上给其划分一块内存，将数值直接存储在栈上。<br>2.引用数据类型在被创建时，首先要在栈上给其引用（句柄）分配一块内存，而对象的具体信息都存储在堆内存上，然后由栈上面的引用指向堆中对象的地址。</p><p>3.在数据做为参数传递的时候，基本数据类型是值传递，而引用数据类型是引用传递（地址传递）。</p><h3 id="3-1-null"><a href="#3-1-null" class="headerlink" title="3.1. null"></a>3.1. null</h3><p>引用类型的0值 就是 null.</p><p>当我们将 null 赋给arr 这个引用类型时，代表 arr 这个引用，不指向任何对象.<br>null.任何东西，都会发生空指针异常的错误。例如<code>int[] arr =null;</code><br>这是因为null 赋给了 arr ，arr 没有指向任何一个数组对象，在堆上也没有开辟内存空间，所以我们也就无法求它的长度.</p><h2 id="4-String字符串类"><a href="#4-String字符串类" class="headerlink" title="4. String字符串类"></a>4. String字符串类</h2><h3 id="4-1-创建字符串"><a href="#4-1-创建字符串" class="headerlink" title="4.1. 创建字符串"></a>4.1. 创建字符串</h3><p>String 字符串是一种不可变对象，一旦创建了 String 对象，那它的值就无法改变了。如果想对字符串做修改，需要使用StringBuffer&amp;StringBuilder类。<br>一旦String对象被创建并初始化后，内部的状态数据就会保持不变</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.直接创建方式 创建的字符串存储在公共池中，而 new 创建的字符串对象在堆上：</span></span><br><span class="line">String str = <span class="string">"Runoob"</span>;    <span class="comment">//首先在堆内存上的串池中查找是否存在该字符串，没有则创建，并将地址赋给在栈内存中的对应变量；有则复用</span></span><br><span class="line">String str2=<span class="keyword">new</span> String (<span class="string">"Runoob"</span>);  <span class="comment">//每次new都在堆内存中重新开辟新空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 传递一个字符数组，根据字符数组的内容再创建一个新的字符串对象,需要修改字符串时使用</span></span><br><span class="line"><span class="keyword">char</span> [] chs={<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>};</span><br><span class="line">String s4= <span class="keyword">new</span> String (chs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//传递一个字节数组</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = {<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>,<span class="number">100</span>}</span><br><span class="line">String s5=<span class="keyword">new</span> String (bytes)</span><br><span class="line"><span class="comment">//s5输出是abcd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">String str2=<span class="string">"abcd"</span>;</span><br><span class="line"><span class="keyword">int</span> len = str2.substring(<span class="number">1</span>,<span class="number">3</span>).replace(<span class="string">"a"</span>,<span class="string">"b"</span>).length();   <span class="comment">//链式编程</span></span><br><span class="line">System.out.println(len);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"hello world"</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"hello world"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将字符串转换为字符数组</span></span><br><span class="line"><span class="keyword">char</span> chararr[]=str1.toCharArray();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-常用方法"><a href="#4-2-常用方法" class="headerlink" title="4.2. 常用方法"></a>4.2. 常用方法</h3><p>String 没有反转函数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> len = str.length();   <span class="comment">//int length()方法：返回字符串对象包含的字符数。</span></span><br><span class="line">str1.concat(str2); <span class="comment">//String concat(String str)：连接两个字符串</span></span><br><span class="line"><span class="keyword">char</span> c = str.charAt(<span class="number">3</span>);  <span class="comment">//char charAt(int index)方法：返回指定索引出的字符</span></span><br><span class="line"></span><br><span class="line">str.substring(<span class="number">1</span>,<span class="number">3</span>)   <span class="comment">//String substring(int start ,int end)截取字符串  左闭右开</span></span><br><span class="line"><span class="comment">// 时间是O(n)，但是使用substr申请了额外空间，所以空间复杂度是O(n)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换</span></span><br><span class="line">str.replace(oldChar, newChar)    </span><br><span class="line"></span><br><span class="line">str.indexOf(str)   <span class="comment">//int indexOf(String str)方法，用于为首次出现传递的子字符串作为参数返回String内的索引。如果子字符串str不存在，则返回-1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//String toUpperCase()：将字符串中的所有字符从小写改写为大写</span></span><br><span class="line"><span class="comment">//String toLowerCase()：将字符串中的所有字符从大写改写为小写</span></span><br><span class="line">String str2 = str1.toUpperCase(); </span><br><span class="line">String str3 = str2.toLowerCase();</span><br><span class="line"></span><br><span class="line"><span class="comment">//字符串反转</span></span><br><span class="line">StringBuilder sb= <span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">sb.reverse().toString();</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-1-字符串排序"><a href="#4-2-1-字符串排序" class="headerlink" title="4.2.1. 字符串排序"></a>4.2.1. 字符串排序</h4><p>在 Java 中，字符串是不可变的，这意味着如果一个字符串对象已经被创建过一次，那么在内存中就不能改变字符串。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字母是ASCII码进行存储</span></span><br><span class="line">String str = <span class="string">"abcde"</span></span><br><span class="line"><span class="keyword">char</span>[] str1 = str.toCharArray();  #将字符串转换为字符数组</span><br><span class="line">Arrays.sort(str1);   #对字符数组进行排序</span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-2-删除字符串"><a href="#4-2-2-删除字符串" class="headerlink" title="4.2.2. 删除字符串"></a>4.2.2. 删除字符串</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.替换函数，替换成空白</span></span><br><span class="line">String test  = <span class="string">"chaojimali"</span>;</span><br><span class="line">String test = test.replace(<span class="string">"chaoji"</span>,<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.截取函数，删除字符</span></span><br><span class="line">String test = （<span class="string">"chaojimali"</span>）;</span><br><span class="line">test = test.substring(<span class="number">5</span>,<span class="number">12</span>);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-3-分割字符串"><a href="#4-2-3-分割字符串" class="headerlink" title="4.2.3. 分割字符串"></a>4.2.3. 分割字符串</h4><p>String[] split(String regex, int limit)：根据正则表达式来匹配出分隔符,拆分字符串，将分割后的结果存入字符数组中。<br>参数：<br>regex为正则表达式分隔符, . 、 $、 | 和 * 等转义字符，必须得加 \；多个分隔符，可以用 | 作为连字符。<br>limit为分割份数</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"Hello World A.B.C"</span></span><br><span class="line">String[] res = str.split(<span class="string">" "</span>);<span class="comment">//res = {"Hello","World","A.B.C"}</span></span><br><span class="line">String[] res = str.split(<span class="string">" "</span>,<span class="number">2</span>);<span class="comment">//res = {"Hello","World A.B.C"}</span></span><br><span class="line">String[] res = str.split(<span class="string">"\\."</span>);<span class="comment">//res = {"Hello World A","B","C"}</span></span><br><span class="line"></span><br><span class="line">String str = <span class="string">"A=1 and B=2 or C=3"</span></span><br><span class="line">String[] res = str.split(<span class="string">"and|or"</span>);<span class="comment">//res = {"A=1 "," B=2 "," C=3"}</span></span><br><span class="line"></span><br><span class="line">String[] res=str.split(<span class="string">"\s+"</span>) <span class="comment">//以空格、换行符、回车为分隔线，相邻的多个空格、换行符、回车仍然视为只有一个,分隔后返回字符数组。</span></span><br><span class="line">[<span class="string">""</span>, <span class="string">"this"</span>, <span class="string">"is"</span>, <span class="string">"a"</span>, <span class="string">"sentence"</span>]</span><br><span class="line">String[] res=str.trim().split(<span class="string">"\s+"</span>)    <span class="comment">//使用str.trim() 去除头尾空格  ["this", "is", "a", "sentence"]</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-4-比较字符串"><a href="#4-2-4-比较字符串" class="headerlink" title="4.2.4. 比较字符串"></a>4.2.4. 比较字符串</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b =str1.equals(str2);  <span class="comment">//完全相同</span></span><br><span class="line"><span class="keyword">boolean</span> b2=str1.equalsIgnoreCase(str2); <span class="comment">//忽略大小写</span></span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-5-把字符串转换为相应的数值"><a href="#4-2-5-把字符串转换为相应的数值" class="headerlink" title="4.2.5. 把字符串转换为相应的数值"></a>4.2.5. 把字符串转换为相应的数值</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.String转int型：</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.parseInt(String str)   <span class="comment">//第一种</span></span><br><span class="line"><span class="keyword">int</span> i = Integer.valueOf(s).intValue(); <span class="comment">//第二种</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.String转long型：</span></span><br><span class="line"><span class="keyword">long</span> l = Long.parseLong(String str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.String转double型：</span></span><br><span class="line"><span class="keyword">double</span> d = Double.valueOf(String str).doubleValue();<span class="comment">//doubleValue()不要也可</span></span><br><span class="line"><span class="keyword">double</span> d = Double.parseDouble(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.int转string型：</span></span><br><span class="line">String s = String.valueOf(i)； <span class="comment">//第一种</span></span><br><span class="line">String s = Integer.toString(i); <span class="comment">//第二种</span></span><br><span class="line">String s = <span class="string">""</span> + i;  <span class="comment">//第三种</span></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-6-统计字符"><a href="#4-2-6-统计字符" class="headerlink" title="4.2.6. 统计字符"></a>4.2.6. 统计字符</h4><p>统计—-计数器思想</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> big =<span class="number">0</span>,small=<span class="number">0</span>,number=<span class="number">0</span>; </span><br><span class="line">big++</span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-7-格式化字符串"><a href="#4-2-7-格式化字符串" class="headerlink" title="4.2.7. 格式化字符串"></a>4.2.7. 格式化字符串</h4><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。</p><p>如下所示：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.out.printf(<span class="string">"浮点型变量的值为 "</span> +</span><br><span class="line">                  <span class="string">"%f, 整型变量的值为 "</span> +</span><br><span class="line">                  <span class="string">" %d, 字符串变量的值为 "</span> +</span><br><span class="line">                  <span class="string">"is %s"</span>, floatVar, intVar, stringVar);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="4-2-8-字符串存入字符数组"><a href="#4-2-8-字符串存入字符数组" class="headerlink" title="4.2.8. 字符串存入字符数组"></a>4.2.8. 字符串存入字符数组</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Character c : s.toCharArray()){</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-为什么String需要不可变"><a href="#4-3-为什么String需要不可变" class="headerlink" title="4.3. 为什么String需要不可变"></a>4.3. 为什么String需要不可变</h3><h4 id="4-3-1-字符串常量池的实现"><a href="#4-3-1-字符串常量池的实现" class="headerlink" title="4.3.1. 字符串常量池的实现"></a>4.3.1. 字符串常量池的实现</h4><p>Java中，我们通常有两种方式创建字符串对象，一种是通过字符串字面量方式创建，就如上文的代码，另外一种就是通过 new 方式去创建，如 String c = new String(“string 3”);</p><p>而两者区别就在于通过字符串字面量的方式创建时，JVM 会现在字符串池中检查字符串内容是否已经存在，如果存在就会直接返回对应的引用，而不是再次分配内存进行创建，如果不存在就会分配在内存中创建的同时将字符串数据缓存在字符串池中，便于重用。正是是由于字符串的不可变，同样的字符串内容可以让 JVM 可以减少额外的内存分配操作，直接使用在字符串池中字符串对象即可，对性能提升和内存节省都大有好处。</p><p>关于字符串池，这里稍微简单介绍一下：Java 的字符串池属于 JVM 专门给指定的特殊内存区域，用来存储字符串字面量。在 Java 7 之前，分配于 JVM 的方法区内，属于常量池的一部分；而 Java7 之后字符串池被移至堆内存进行管理，这样的好处就是允许被 JVM 进行垃圾回收操作，将未被引用的字符串所占内存即使回收，以此节省内存。</p><h4 id="4-3-2-Hashcode-缓存"><a href="#4-3-2-Hashcode-缓存" class="headerlink" title="4.3.2. Hashcode 缓存"></a>4.3.2. Hashcode 缓存</h4><p>字符串作为基础的数据结构，大量地应用在一些集合容器之中，尤其是一些散列集合，在散列集合中，存放元素都要根据对象的 hashCode() 方法来确定元素的位置。由于字符串 hashcode 属性不会变更，保证了唯一性，使得类似 HashMap，HashSet 等容器才能实现相应的缓存功能。由于 String 的不可变，避免重复计算 hashcode，只有使用缓存的 hashcode 即可，这样一来大大提高了在散列集合中使用 String 对象的性能。</p><h4 id="4-3-3-线程安全"><a href="#4-3-3-线程安全" class="headerlink" title="4.3.3. 线程安全"></a>4.3.3. 线程安全</h4><p>在多线程中，只有不变的对象和值是线程安全的，可以在多个线程中共享数据。由于 String 天然的不可变，当一个线程”修改“了字符串的值，只会产生一个新的字符串对象，不会对其他线程的访问产生副作用，访问的都是同样的字符串数据，不需要任何同步操作。</p><h4 id="4-3-4-安全性"><a href="#4-3-4-安全性" class="headerlink" title="4.3.4. 安全性"></a>4.3.4. 安全性</h4><p>由于字符串无论在任何 Java 系统中都广泛使用，会用来存储敏感信息，如账号，密码，网络路径，文件处理等场景里，保证字符串 String 类的安全性就尤为重要了，如果字符串是可变的，容易被篡改，那我们就无法保证使用字符串进行操作时，它是安全的，很有可能出现 SQL 注入，访问危险文件等操作。</p><h3 id="4-4-StringBuilder"><a href="#4-4-StringBuilder" class="headerlink" title="4.4. StringBuilder"></a>4.4. StringBuilder</h3><p>StringBuilder可以看作一个容器，创建之后里面的内容是可变的<br>作用：拼接字符串，反转字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">StringBuilder sb= <span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">System.out.println(<span class="string">"sb"</span>);</span><br><span class="line">sb.append();  <span class="comment">//添加数据</span></span><br><span class="line">sb.reverse(); <span class="comment">//反转容器的内容</span></span><br><span class="line">sb.length();  <span class="comment">//返回长度(字符出现的个数)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 索引是5的位置替换成空格</span></span><br><span class="line">sb.setCharAt(<span class="number">5</span>, <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line">sb.replace()    <span class="comment">//void replace(int start, int end, String str) 根据索引把某部分替换成其它的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除索引6(包含)至索引14(不包含)的字符串</span></span><br><span class="line">sb.delete(<span class="number">6</span>, <span class="number">14</span>);   <span class="comment">//void delete(int start, int end)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">deleteCharAt</span><span class="params">(<span class="keyword">int</span> index)</span>: 删除指定位置的字符，并返回本身</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> StringBuffer <span class="title">delete</span><span class="params">(<span class="keyword">int</span> start,<span class="keyword">int</span> end)</span>:删除从指定位置开始到指定位置结束的内容，并返回本身、</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 指定位置0前插入0</span></span></span><br><span class="line"><span class="function">sb.<span class="title">insert</span><span class="params">(<span class="number">0</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">sb.toString();  <span class="comment">//把StringBuilder对象转为String对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取内容</span></span><br><span class="line"><span class="function"><span class="keyword">char</span> <span class="title">charAt</span><span class="params">(<span class="keyword">int</span> index)</span>，根据索引，得到相应字符。</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start)</span>，根据索引，以字符串形式截取尾部段。</span></span><br><span class="line"><span class="function">String <span class="title">substring</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span>，根据索引，以字符串形式截取内部段。</span></span><br><span class="line"><span class="function">String <span class="title">toString</span><span class="params">()</span>，<span class="comment">//把StringBuilder对象转为String对象</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="comment">// 返回匹配对应的索引</span></span></span><br><span class="line"><span class="function"><span class="comment">//只能判断字符串，不能判断某个字符是否在字符串内</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str)</span>，输出第一个匹配的索引。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span>，从指定的索引处开始，输出第一个匹配的索引。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str)</span>，输出最后一个匹配的索引。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lastIndexOf</span><span class="params">(String str, <span class="keyword">int</span> fromIndex)</span>，从指定的索引处开始，输出最后一个匹配的索引。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">sb.<span class="title">indexOf</span><span class="params">(str)</span>   <span class="comment">//int indexOf(String str)方法，用于为首次出现传递的子字符串作为参数返回String内的索引。如果子字符串str不存在，则返回-1</span></span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></tbody></table></figure><h3 id="4-5-StringBuffer"><a href="#4-5-StringBuffer" class="headerlink" title="4.5. StringBuffer"></a>4.5. StringBuffer</h3><p> StringBuffer 和 StringBuilder，中文翻译为“字符串缓冲区”。</p><p>StringBuilder 类是 JDK 1.5 新增的类，它也代表可变字符串对象。实际上，StringBuilder 和 StringBuffer 功能基本相似，方法也差不多。不同的是，StringBuffer 是线程安全的，而 StringBuilder 则没有实现线程安全功能，所以性能略高。因此在通常情况下，如果需要创建一个内容可变的字符串对象，则应该优先考虑使用 StringBuilder 类。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public StringBuffer deleteCharAt(int index):删除指定位置的字符，并返回本身</span><br><span class="line">public StringBuffer delete(int start,int end):删除从指定位置开始到指定位置结束的内容，并返回本身、</span><br></pre></td></tr></tbody></table></figure><h3 id="4-6-StringJoiner"><a href="#4-6-StringJoiner" class="headerlink" title="4.6. StringJoiner"></a>4.6. StringJoiner</h3><p>是一个可变容器，方便拼接字符串</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">StringJoiner sj = <span class="keyword">new</span> StringJoiner(间隔符号)  <span class="comment">//指定拼接时的符号</span></span><br><span class="line">StringJoiner sj = <span class="keyword">new</span> StringJoiner(间隔符号，开始符号，结束符号)</span><br><span class="line"></span><br><span class="line">sj.add(<span class="string">""</span>)  <span class="comment">//添加元素</span></span><br><span class="line">sj.length()</span><br><span class="line">sj.toString()   <span class="comment">//转换为字符串```</span></span><br><span class="line">### 键盘录入扫描类</span><br><span class="line"></span><br><span class="line">```Java</span><br><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> Java.util.Scanner;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line">Scanner sc= <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接受数据</span></span><br><span class="line"><span class="keyword">int</span> i = sc.nextInt();</span><br><span class="line"></span><br><span class="line"><span class="comment">// next和nextInt以空格或回车换行作为结束</span></span><br><span class="line"><span class="comment">// nextLine以回车换行作为结束</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-Java数组"><a href="#5-Java数组" class="headerlink" title="5. Java数组"></a>5. Java数组</h2><p>数组是一种容器，它用一组连续的内存空间来存储固定大小的相同数据类型(考虑隐形转换)元素，是一种线性表数据结构</p><h3 id="5-1-数组存储的弊端"><a href="#5-1-数组存储的弊端" class="headerlink" title="5.1. 数组存储的弊端"></a>5.1. 数组存储的弊端</h3><p> 数组中提供的方法非常限，没有对于添加、删除、插入数据等操作，非常不便，同时效率不高。</p><p>数组存储数据的特点：有序、可重复。(长度，顺序)不可变</p><h3 id="5-2-定义数组"><a href="#5-2-定义数组" class="headerlink" title="5.2. 定义数组"></a>5.2. 定义数组</h3><ul><li>1.<strong>静态初始化</strong>：手动指定数组元素，而数组的长度由系统（JVM）来决定；如果明确了要操作的具体数据，直接静态初始化即可</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法格式：</span></span><br><span class="line">数组类型[] 数组名= <span class="keyword">new</span> 数组类型[]{元素<span class="number">1</span>,元素<span class="number">2</span>,…,元素n,};</span><br><span class="line"></span><br><span class="line">数组类型[] 数组名 = {元素<span class="number">1</span>,元素<span class="number">2</span>,…,元素n,};  <span class="comment">//简化定义</span></span><br><span class="line"></span><br><span class="line">String[] arr = {<span class="string">"ni"</span>,<span class="string">"hao "</span>,<span class="string">"ya"</span>}</span><br></pre></td></tr></tbody></table></figure><ul><li>2.<strong>动态初始化</strong>：手动指定数组长度，每个数组元素的初始值由系统来决定。【与静态初始化特点相反】；只明确元素具体个数</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组类型[] 数组名= <span class="keyword">new</span> 数组类型[ length ];</span><br><span class="line"></span><br><span class="line">String[]  arr = <span class="keyword">new</span> String[<span class="number">5</span>]</span><br></pre></td></tr></tbody></table></figure><p>动态初始化数组默认初始化值规律<br>整数类型默认为0<br>浮点数型：0.0<br>字符型：’/u0000’ 即空格<br>布尔类型：false<br>引用数据类型：null</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将字符串转换为字符数组</span></span><br><span class="line"><span class="keyword">char</span>[] str1 = str.toCharArray();</span><br></pre></td></tr></tbody></table></figure><h3 id="5-3-数组方法"><a href="#5-3-数组方法" class="headerlink" title="5.3. 数组方法"></a>5.3. 数组方法</h3><p>数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 foreach 循环。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">String[] arr = {<span class="string">"ni"</span>,<span class="string">"hao "</span>,<span class="string">"ya"</span>}</span><br><span class="line"></span><br><span class="line">arr.length;       <span class="comment">//数组长度，这是一个属性，字符串长度是方法</span></span><br><span class="line">arr[<span class="number">0</span>]   <span class="comment">//数组的元素是通过索引访问的</span></span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">"le"</span>;  <span class="comment">//修改数据.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//  foreach 循环:在不使用下标的情况下遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(String element:arr){</span><br><span class="line">    System.out.println(element);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="5-4-Arrays-类"><a href="#5-4-Arrays-类" class="headerlink" title="5.4. Arrays 类"></a>5.4. Arrays 类</h3><p>java.util.Arrays 类能方便地操作数组，它提供的所有方法都是静态的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">8</span>,<span class="number">9</span>}</span><br><span class="line">Arrays.toString(arr)  <span class="comment">//将当前数组转换为字符串输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//对数组进行排序,默认升序，使用双轴快排的算法</span></span><br><span class="line"><span class="comment">//传入数组的地址，创建副本修改</span></span><br><span class="line">Arrays.sort(arr)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> t = Arrays.equals(str1, str2)     <span class="comment">//比较数组中元素值是否相等。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//在进行数组查询之前，必须对数组进行排序（可以使用 sort() 方法）</span></span><br><span class="line"><span class="comment">// binarySearch(Object[] a,Object key); 传入一个数组对象，在整个数组查找元素，没有则返回值为负的插入点值，所谓插入点值就是第一个比关键字大的元素在数组中的位置索引，而且这个位置索引从1开始。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// binarySearch(Object[] a,int fromIndex,int toIndex,Object key); 在指定的范围内查找某一元素</span></span><br><span class="line">Arrays.binarySearch(arr,);</span><br></pre></td></tr></tbody></table></figure><h3 id="5-5-防止越界问题"><a href="#5-5-防止越界问题" class="headerlink" title="5.5. 防止越界问题"></a>5.5. 防止越界问题</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在循环体中避免使用arr[i+1]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) {</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &gt;max) {</span><br><span class="line">        max = arr[i];</span><br><span class="line">        ch = (<span class="keyword">char</span>) (i + <span class="string">'a'</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian笔记管理</title>
      <link href="/2022/101935525.html"/>
      <url>/2022/101935525.html</url>
      
        <content type="html"><![CDATA[<p>Obsidian是基于Markdown文件的本地知识管理软件，并且开发者承诺Obsidian对于个人使用者永久免费。Obsidian仅对【发布】和【同步】功能额外收费</p><p><a href="https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0">https://blog.esunr.xyz/2022/07/e9b42b453d9f.html#3-2-%E4%BD%BF%E7%94%A8-Obsidian-%E6%A8%A1%E6%9D%BF%E5%BF%AB%E9%80%9F%E5%88%9B%E5%BB%BA%E6%96%87%E7%AB%A0</a></p><h2 id="Obsidian使用"><a href="#Obsidian使用" class="headerlink" title="Obsidian使用"></a>Obsidian使用</h2><h3 id="插入头部模板"><a href="#插入头部模板" class="headerlink" title="插入头部模板"></a>插入头部模板</h3><p>首先我们要创建模板，我们可以在&nbsp;<code>source</code>&nbsp;目录下创建&nbsp;<code>_obsidian</code>&nbsp;文件夹，并创建一篇&nbsp;<code>Post Template</code>&nbsp;的文章（md文件），内容为：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: {{title}}</span><br><span class="line">date: {{date}}</span><br><span class="line">tags: []</span><br><span class="line">copyright_author: Arts</span><br><span class="line">description:</span><br><span class="line">sticky:</span><br><span class="line">---</span><br></pre></td></tr></tbody></table></figure><p>然后进入到 Obsidian 的设置面板，选择『核心插件』，并启用『模板』功能。同时点击旁边的配置按钮，进入到模板配置的设置中</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">位置：source/_obsidian</span><br><span class="line">日期格式：YYYY-MM-DD HH:mm:ss</span><br></pre></td></tr></tbody></table></figure><p>之后，我们再创建新文章的时候，只需要点击侧边栏的『插入模板』按钮就可以快速生成 Front-matter 信息：</p><h3 id="大纲功能"><a href="#大纲功能" class="headerlink" title="大纲功能"></a>大纲功能</h3><p>安卓端，在编辑界面右滑，选择大纲</p><h3 id="双向链接"><a href="#双向链接" class="headerlink" title="双向链接"></a>双向链接</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[[2020-07-13]] 文件引用</span><br><span class="line">[[2020-07-13#大纲]]  标题引用</span><br><span class="line">[[2020-07-13#^块内容]]  块引用</span><br></pre></td></tr></tbody></table></figure><h2 id="第三方插件"><a href="#第三方插件" class="headerlink" title="第三方插件"></a>第三方插件</h2><p>插件仓库需要科学才可以访问</p><h3 id="File-Tree-Alternative-Plugin"><a href="#File-Tree-Alternative-Plugin" class="headerlink" title="File Tree Alternative Plugin"></a>File Tree Alternative Plugin</h3><p>Obsidian 很不好的一点就是会把所有的文件都列在左侧的文件列表中，但是对于我们的 Hexo 项目写文章来说，我们只会修改&nbsp;<code>_post</code>&nbsp;目录下的文件，因此我们希望左侧的文件列表中只显示&nbsp;<code>_post</code>&nbsp;文件夹，但是目前为止 Obsidian 并没有推出类似『聚焦』到某一文件夹内的功能。</p><p>好在 Obsidian 强大的插件库中有一个&nbsp;<code>File Tree Alternative Plugin</code>&nbsp;第三方插件可以满足这一需求。按照 Obsidian Git 相同的方法去下载这个第三方插件，下载完成之后我们会发现左侧菜单出现了一个&nbsp;<code>File Tree</code>&nbsp;的 Tab 页，点击后就可以看到文件以树形的结构呈现：</p><p>我们展开&nbsp;<code>source</code>&nbsp;文件夹，并右键&nbsp;<code>_post</code>&nbsp;文件夹，选择&nbsp;<code>Focuse on Folder</code>&nbsp;后，左侧的文件列表中就只会显示&nbsp;<code>_post</code>&nbsp;文件夹中的内容了：</p><h3 id="Obsidian-Git"><a href="#Obsidian-Git" class="headerlink" title="Obsidian Git"></a>Obsidian Git</h3><p>可以使用 Obsidian Git 插件来在 Obsidian 内就可以实现 git commit 以及 push 的操作。</p><h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>Obsidian官方同步要收费，所以我借助第三方同步软件Syncthing同步</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/101954151.html"/>
      <url>/2022/101954151.html</url>
      
        <content type="html"><![CDATA[<h2 id="解题套路"><a href="#解题套路" class="headerlink" title="解题套路"></a>解题套路</h2><h3 id="缩小问题规模"><a href="#缩小问题规模" class="headerlink" title="缩小问题规模"></a>缩小问题规模</h3><p>有可能问题里问的是一个规模很大的问题，比如汉诺塔问题，要移动64个圆盘，这太复杂了，我们根本无法思考。不妨把问题的规模缩小，比如缩小到3个圆盘，然后我们就可以列举一下情况，找找规律和套路了。</p><p>即使是在acm赛场当中，这个方法也非常管用。</p><h3 id="确定复杂度"><a href="#确定复杂度" class="headerlink" title="确定复杂度"></a>确定复杂度</h3><p>在acm赛场上题目当中都会标明数据的大小范围，除了起到限制作用之外也是一个很大的提示。我们可以根据数据的规模反推出正解的复杂度范围，从而排除掉一些不可能的算法。</p><p>比如说要在个数当中寻找某个数，由于计算机每秒的运行次数在这个量级，这么大的规模遍历一遍都有些扛不住，那么显然正解的复杂度一定在及以下。这么一来，我们就可以根据算法的复杂度排除掉一大批达不到要求的算法，排除错误的选项。</p><p>在面试的时候面试官往往不会明确给出数据的规模，我们可以自己结合实际情况分析，当然直接提问也是一个不错的选择。</p><h3 id="优化思路"><a href="#优化思路" class="headerlink" title="优化思路"></a>优化思路</h3><p>面试不是比赛，并不是一定要给出正解。有的时候，我们一时陷入误区没想到解法也是常有的。重要的并不是我们是否想出了解法，而是我们能否展现我们思维的能力，打动面试官。</p><p>所以有的时候一下子没有想到最优解也没有关系，我们可以先易后难，先把一些简单可行的解法说出来，然后再进行优化。</p><p>比如LeetCode第4题，寻找两个有序数组的中位数。我们当然很难一下子想出的正解，但是我们可以先从最简单的方法说起。比如重新排序直接寻找，这样操作的复杂度是。说出这个方法之后，我们接着从不使用排序解决问题的角度继续思考，如此一步步逐渐深入，即使最终没能找到正解，也体现出了我们的思考是有章法的，并且思考和分析问题的能力是有的。</p><h2 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h2><p>建议刷题的时候，如果10 - 20分钟没思路，就去看题解，不要自己硬憋着。<br>算法题就是多刷几遍就好，在刷题的时候一定要去思考、形成自己的理解吧，可别赶时间当做任务去完成，毕竟这种能力是需要时间和精力的。</p><p>面试当中常问的问题基本上就这几种：二分、递归、分治、排序、动态规划。</p><h3 id="贵精不贵多"><a href="#贵精不贵多" class="headerlink" title="贵精不贵多"></a>贵精不贵多</h3><p>如果是为了准备面试，就像我前面列举的一样，其实并不会涉及很多内容。相比去研究很多高大上面试的时候用不到的高大上算法，倒不如好好把这几个算法啃扎实。</p><h3 id="成体系化训练"><a href="#成体系化训练" class="headerlink" title="成体系化训练"></a>成体系化训练</h3><p>算法的学习过程是比较痛苦的，尤其是如果我们漫无目的地去训练和学习，进展非常缓慢，非常劝退。很多同学都有刷题刷了一堆，但是水平好像没什么提升的情况。</p><p>我个人感觉比较有效的方法是成体系化的训练，不要按照题目顺序刷题，而是以算法划分专题，按照专题刷题。一个算法一个算法的硬啃，一个算法吃透再吃下一个。这样训练下来印象会非常深刻，对于算法的理解也会深刻得多，也不容易忘记。要比题目刷了一堆， 算法也用了一堆， 看起用得多，但也忘得多要好得多。</p><h2 id="常见的题型"><a href="#常见的题型" class="headerlink" title="常见的题型"></a>常见的题型</h2><p>面试或者白板编程，由于形式的限制，题目的选择范围其实并不大。并不难理解，毕竟面试的时间有限，也不能全拿来做题，而太困难太复杂的问题候选人一点思路也没有，大部分人都做不上来，也完全起不到考察和筛选的意义。</p><p>所以拿来当做面试和白板编程的问题，不会很复杂，至少会保证绝大多数的候选人都听说过。就好像打游戏一样，哪怕是玩家津津乐道的魂游戏，总要有过关的可能。如果上来就考察一个问题，结果你连正解用到的算法都没听说过，一开始就没有做出来的可能，这种问题问了就只能浪费时间。</p><p>根据我的经验，面试当中常问的问题基本上就这几种：<strong>二分、递归、分治、排序、动态规划。</strong></p><p>这几种算法只要是科班出身，基本上都或多或少听说过，理论上来说都应该能做出来。并且这些算法除了比较基础之外，它们的代码量都不大，一般核心代码都不会超过30行，确保编码的时间不会太长。第二是比较考验思维，通过你对这几个算法的理解深度，就足以看出来你的思维能力和算法能力了。</p><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><ul><li><p>时间复杂度<br>有几次循环就有o(n的几次方)</p></li><li><p>空间复杂度<br>用来评估算法内存占用大小的一个式子</p></li></ul><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>简单说程序调用自身的编程技巧叫递归。<br>递归的思想是把一个大型复杂问题层层转化为一个与原问题规模更小的问题，问题被拆解成子问题后，递归调用继续进行，直到子问题无需进一步递归就可以解决的地步为止。</p><p>使用递归需要避免出现死循环，为了确保递归正确工作，递归程序应该包含2个属性：<br>    终止条件：递归函数必须要有终止条件，否则会出错；<br>    递推关系（recurrentce relation），可将所有其他情况拆分到基本案例。递归函数先不断调用自身，直到遇到终止条件后进行回溯，最终返回答案。</p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><p>动态规划问题的一般形式就是==求最值==。比如说让你求最长递增子序列呀，最小编辑距离呀等等。</p><p>求解动态规划的核心问题是穷举。因为要求最值，肯定要把所有可行的答案穷举出来，然后在其中找最值呗。<br>首先，动态规划的穷举有点特别，因为这类问题存在「重叠子问题」，如果暴力穷举的话效率会极其低下，所以需要「备忘录」或者「DP table」来优化穷举过程，避免不必要的计算。</p><p>而且，动态规划问题一定会具备「最优子结构」，才能通过子问题的最值得到原问题的最值。</p><p>以上提到的重叠子问题、最优子结构、状态转移方程就是<strong>动态规划三要素</strong>。，我来提供我研究出来的一个思维框架，辅助你思考状态转移方程：</p><p>明确 base case -&gt; 明确「状态」-&gt; 明确「选择」 -&gt; 定义 dp 数组/函数的含义。</p><p>动态规划最==核心的思想==，就在于拆分子问题，记住过往，穷举求最值,减少重复计算。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>划分问题：按照问题的特征，把问题分为若干阶段。注意：划分后的阶段一定是有序的或者可排序的</p><p>dp数组初始化以及下标的定义,确定状态和状态变量：将问题发展到各个阶段时所处的各种不同的客观情况表现出来。</p><p>递推公式(状态转移方程)：状态转移就是根据上一阶段的决策和状态来导出本阶段的状态。根据相邻两个阶段状态之间的联系来确定决策方法和状态转移方程</p><p>dp数组如何初始化(边界条件)：状态转移方程是一个递推式，因此需要找到递推终止的条件   1或2时<br>即：【初始状态】→【决策1】→【决策2】→…→【决策n】→【结束状态】</p><p>遍历顺序</p><p>打印dp数组</p><h3 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h3><p><strong>01背包</strong></p><h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><h3 id="股票问题"><a href="#股票问题" class="headerlink" title="股票问题"></a>股票问题</h3><h3 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h3><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sum = dp[0]+dp[1]</span><br><span class="line">dp[0]=dp[1]</span><br><span class="line">dp[1]=sum</span><br></pre></td></tr></tbody></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solution/tu-jie-er-fen-zui-qing-xi-yi-dong-de-jia-ddvc/">https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/solution/tu-jie-er-fen-zui-qing-xi-yi-dong-de-jia-ddvc/</a></p><p>一个范围，具有单调性质，因此可以使用二分来做。</p><p>在升序数组 nums 中寻找目标值 target，对于特定下标 i，比较nums[i] 和 target 的大小：</p><p>如果 nums[i]=target，则下标 i即为要寻找的下标；</p><p>如果 nums[i]&gt;target，则 target 只可能在下标 i的左侧；</p><p>如果 nums[i]&lt;target，则 target 只可能在下标 i的右侧。</p><p>二分查找的做法是，定义查找的范围 [left,right]，初始查找范围是整个数组。每次取查找范围的中点mid，比较nums[mid] 和 target 的大小，如果相等则mid 即为要寻找的下标，如果不相等则根据nums[mid] 和 target 的大小关系将查找范围缩小一半。</p><p>由于每次查找都会将查找范围缩小一半，因此二分查找的时间复杂度是 O(logn)，其中 n 是数组的长度。</p><p>二分查找的条件是查找范围不为空，即left≤right。如果 target 在数组中，二分查找可以保证找到 target，返回 target 在数组中的下标。如果 target 不在数组中，则当{left} &gt;{right}left&gt;right 时结束查找，返回−1。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isPerfectSquare</span>(<span class="params">self, num: <span class="built_in">int</span></span>) -&gt; <span class="built_in">bool</span>:</span></span><br><span class="line">      left, right = <span class="number">0</span>, num <span class="comment">#定义二分查找搜索区间的初始边界。</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">#在移动左侧边界left和右侧边界right时，新的搜索区间都不会包含被检查的下标mid，所以搜索边界始终没有检查过，</span></span><br><span class="line">      <span class="comment">#当left=right时，我们仍需要检查mid=(right+right)//2</span></span><br><span class="line">      <span class="keyword">while</span> left &lt;= right:  <span class="comment">#循环直至区间左右端点相同</span></span><br><span class="line">        <span class="comment">#mid = (left + right) // 2 #设定中间值</span></span><br><span class="line">        <span class="comment">#括号内的值要为0</span></span><br><span class="line">        mid = (right-left)//<span class="number">2</span>+left      <span class="comment">#防止整型溢出，python则不需要这句，应为int可任意放大</span></span><br><span class="line">        <span class="keyword">if</span> square &lt; num:</span><br><span class="line">          left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> square &gt; num:</span><br><span class="line">          right = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">          <span class="keyword">return</span> mid</span><br><span class="line">      <span class="keyword">return</span> left  <span class="comment">#此时有left==right,区间缩为一个点，即为答案</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间复杂度：)O(logn)，其中 n为正整数 num 的最大值。</span></span><br><span class="line"><span class="comment"># 空间复杂度：O(1)。</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="二分查找模板"><a href="#二分查找模板" class="headerlink" title="二分查找模板"></a>二分查找模板</h3><h3 id="查找过程"><a href="#查找过程" class="headerlink" title="查找过程"></a>查找过程</h3><p>首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表。重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。</p><h3 id="边界问题"><a href="#边界问题" class="headerlink" title="边界问题"></a>边界问题</h3><p>总结为一句话：左闭左+1，右闭右-1，开区间选mid</p><p>二分查找涉及的很多的边界条件，逻辑比较简单，但就是写不好。相信很多同学都和我一样，在条件判断时总是不知道是 while(left &lt; right) 还是 while(left &lt;= right)，到底是right = mid呢，还是要right = mid - 1呢？</p><p>大家写二分法经常写乱，主要是因为对区间的定义没有想清楚，区间的定义就是不变量。要在二分查找的过程中，保持不变量，就是在while寻找中每一次边界的处理都要坚持根据区间的定义来操作，这就是循环不变量规则。</p><p>写二分法，区间的定义有以下四种，左闭右闭即[left, right]，或者左闭右开即[left, right)，或者左开右闭即(left, right]，或者左开右开即(left, right)，其中左闭右闭即[left, right]比较常用，基本思路不变只是控制了一些变量选择</p><p>下面我用这四种区间的定义分别讲解四种不同的二分写法。</p><p>以下分析基于理论情况，实际题目中我们比较常用第一种情况和第二种情况</p><h3 id="1-左闭右闭即-left-right"><a href="#1-左闭右闭即-left-right" class="headerlink" title="1.左闭右闭即[left, right]"></a>1.左闭右闭即[left, right]</h3><p>第一种写法，我们定义 target 是在一个在左闭右闭的区间里，也就是[left, right] （这个很重要非常重要）。</p><p>区间的定义这就决定了二分法的代码应该如何写，因为定义target在[left, right]区间：</p><ul><li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li><li>if (nums[middle] &gt; target) right 要赋值为 middle - 1，因为当前这个nums[middle]一定不是target，那么接下来要查找的左区间结束下标位置就是 middle - 1</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本一</span></span><br><span class="line"><span class="keyword">while</span>(left &lt;= right)<span class="comment">// 因为left == right的时候，在[left, right]是有效的空间，即相等时可以取到该元素，所以使用 &lt;=</span></span><br><span class="line">{   <span class="comment">//如果left+right过大，可能导致和溢出，可以用mid = left + (right - left) / 2</span></span><br><span class="line">    <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nums[mid] &gt; target)   {</span><br><span class="line">        <span class="comment">//中间值大于目标值,target 在左区间,right要赋值为 mid - 1</span></span><br><span class="line">        <span class="comment">//因为这个nums[mid]一定不是target，那么接下来要查找的左区间结束下标位置就是 mid - 1，所以取不到mid了</span></span><br><span class="line">        right = mid - <span class="number">1</span>;<span class="comment">//，所以[left, mid - 1]</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)  {</span><br><span class="line">        <span class="comment">//中间值小于目标值，target 在右区间,left 要赋值为 mid +1，</span></span><br><span class="line">        <span class="comment">//因为当前这个nums[mid]一定不是target，那么接下来要查找的右区间结束下标位置就是 mid + 1，因为区间 +1了，所以取不到mid了</span></span><br><span class="line">        left = mid + <span class="number">1</span>; <span class="comment">//所以[mid + 1, right]</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target){</span><br><span class="line">        <span class="keyword">return</span> mid;<span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-左闭右开即-left-right"><a href="#2-左闭右开即-left-right" class="headerlink" title="2.左闭右开即[left, right)"></a>2.左闭右开即[left, right)</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本二</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right)<span class="comment">// 因为left == right的时候，在[left, right)是无效的空间，即相等时取不到该元素，所以使用 &lt;</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//如果left+right过大，导致和溢出，可以用mid = left + (right - left) / 2,防止溢出left+right</span></span><br><span class="line">    <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">    {</span><br><span class="line">        right = mid;<span class="comment">// target 在左区间，所以[left, mid)</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">    {</span><br><span class="line">        left = mid + <span class="number">1</span>;<span class="comment">// target 在右区间，所以[mid + 1, right)</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> mid;<span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="3-左开右闭即-left-right"><a href="#3-左开右闭即-left-right" class="headerlink" title="3.左开右闭即(left, right]"></a>3.左开右闭即(left, right]</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本三</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right)<span class="comment">// 因为left == right的时候，在(left, right]是无效的空间，即相等时取不到该元素，所以使用 &lt;</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//如果left+right过大，导致和溢出，可以用mid = left + (right - left) / 2,防止溢出left+right</span></span><br><span class="line">    <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">    {</span><br><span class="line">        right = mid - <span class="number">1</span>;<span class="comment">// target 在左区间，所以(left, mid]</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">    {</span><br><span class="line">        left = mid;<span class="comment">// target 在右区间，所以(mid + 1, right]</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> mid;<span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>4.左开右开即(left, right)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 版本四</span></span><br><span class="line"><span class="keyword">while</span>(left &lt; right)<span class="comment">// 因为left == right的时候，在(left, right)是无效的空间，即相等时取不到该元素，所以使用 &lt;</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">int</span> mid = (left + right)/<span class="number">2</span>;</span><br><span class="line">    <span class="comment">//如果left+right过大，导致和溢出，可以用mid = left + (right - left) / 2,防止溢出left+right</span></span><br><span class="line">    <span class="keyword">if</span>(nums[mid] &gt; target)</span><br><span class="line">    {</span><br><span class="line">        right = mid;<span class="comment">// target 在左区间，所以(left, mid)</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] &lt; target)</span><br><span class="line">    {</span><br><span class="line">        left = mid;<span class="comment">// target 在右区间，所以(mid, right)</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(nums[mid] == target)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">return</span> mid;<span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</p><p> 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>{</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) {</span><br><span class="line">          <span class="comment">// 优化冒泡排序，增加判断位，有序标记，每一轮的初始是true</span></span><br><span class="line">          <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">          <span class="comment">//内层循环控制每一轮的比较次数，最大的都会放在末尾所以每次比较都会少一次</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) {</span><br><span class="line">              <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) {</span><br><span class="line">                  <span class="keyword">int</span> tmp = array[j];</span><br><span class="line">                  array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                  array[j + <span class="number">1</span>] = tmp;</span><br><span class="line">                  <span class="comment">// 有元素交换，所以不是有序，标记变为false</span></span><br><span class="line">                  flag = <span class="keyword">false</span>;</span><br><span class="line">              }</span><br><span class="line">          }</span><br><span class="line">          <span class="comment">// 说明上面内层for循环中，没有交换任何元素，直接跳出外层循环</span></span><br><span class="line">          <span class="keyword">if</span> (flag) {</span><br><span class="line">              <span class="keyword">break</span>;</span><br><span class="line">          }</span><br><span class="line">      }</span><br><span class="line">  }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><h3 id="KMP有什么用"><a href="#KMP有什么用" class="headerlink" title="KMP有什么用"></a>KMP有什么用</h3><p>KMP主要应用在字符串匹配上。</p><p>KMP的主要思想是当出现字符串不匹配时，可以知道一部分之前已经匹配的文本内容，可以利用这些信息避免从头再去做匹配了。</p><p>所以如何记录已经匹配的文本内容，是KMP的重点，也是next数组肩负的重任。</p><p>其实KMP的代码不好理解，一些同学甚至直接把KMP代码的模板背下来。</p><p>没有彻底搞懂，懵懵懂懂就把代码背下来太容易忘了。</p><p>不仅面试的时候可能写不出来，如果面试官问：next数组里的数字表示的是什么，为什么这么表示？</p><p>估计大多数候选人都是懵逼的。</p><p>下面Carl就带大家把KMP的精髓，next数组弄清楚。</p><h3 id="什么是前缀表"><a href="#什么是前缀表" class="headerlink" title="什么是前缀表"></a>什么是前缀表</h3><p>next数组就是一个前缀表（prefix table）。</p><p>前缀表有什么作用呢？</p><p>前缀表是用来回退的，它记录了模式串与主串(文本串)不匹配的时候，模式串应该从哪里开始重新匹配。</p><p>为了清楚的了解前缀表的来历，我们来举一个例子：</p><p>要在文本串：aabaabaafa 中查找是否出现过一个模式串：aabaaf。</p><p>请记住文本串和模式串的作用，对于理解下文很重要，要不然容易看懵。</p><h2 id="双指针法"><a href="#双指针法" class="headerlink" title="双指针法"></a>双指针法</h2><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/">977.有序数组的平方</a></p><p>给你一个按 非递减顺序 排序的整数数组 nums，返回 每个数字的平方 组成的新数组，要求也按 非递减顺序 排序。<br>示例 1： 输入：nums = [-4,-1,0,3,10] 输出：[0,1,9,16,100] 解释：平方后，数组变为 [16,1,0,9,100]，排序后，数组变为 [0,1,9,16,100]<br>示例 2： 输入：nums = [-7,-3,2,3,11] 输出：[4,9,9,49,121]</p><p>思路</p><p>数组其实是有序的， 只不过负数平方之后可能成为最大数了。</p><p>那么数组平方的最大值就在数组的两端，不是最左边就是最右边，不可能是中间。</p><p>此时可以考虑双指针法了，i指向起始位置，j指向终止位置。</p><p>定义一个新数组result，和A数组一样的大小，让k指向result数组终止位置。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] sortedSquares(<span class="keyword">int</span>[] nums) {</span><br><span class="line">        <span class="keyword">int</span> right = nums.length - <span class="number">1</span>;<span class="comment">//终止位置</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;<span class="comment">//起始位置</span></span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        <span class="keyword">int</span> index = result.length - <span class="number">1</span>;<span class="comment">//新数组的终止位置</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt;= right) {</span><br><span class="line">            <span class="keyword">if</span> (nums[left] * nums[left] &gt; nums[right] * nums[right]) {</span><br><span class="line">                <span class="comment">// 正数的相对位置是不变的， 需要调整的是负数平方后的相对位置</span></span><br><span class="line">                result[index--] = nums[left] * nums[left];</span><br><span class="line">                ++left;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                result[index--] = nums[right] * nums[right];</span><br><span class="line">                --right;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="双指针-快慢指针"><a href="#双指针-快慢指针" class="headerlink" title="双指针-快慢指针"></a>双指针-快慢指针</h3><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。<br>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。<br>示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p>你不需要考虑数组中超出新长度后面的元素。</p><p>给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。</p><p>不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并原地修改输入数组。</p><p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p><p>示例 1: 给定 nums = [3,2,2,3], val = 3, 函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。 你不需要考虑数组中超出新长度后面的元素。</p><p>示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2, 函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。</p><p>双指针法（快慢指针法）： 通过一个快指针和慢指针在一个for循环下完成两个for循环的工作。<br>快指针：寻找新数组的元素 ，新数组就是不含有目标元素的数组<br>慢指针：指向更新 新数组下标的位置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeElement</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">        <span class="comment">// 快慢指针</span></span><br><span class="line">        <span class="keyword">int</span> slowIndex = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> fastIndex = <span class="number">0</span>; fastIndex &lt; nums.length; fastIndex++) {</span><br><span class="line">            <span class="keyword">if</span> (nums[fastIndex] != val) {</span><br><span class="line">                nums[slowIndex] = nums[fastIndex];</span><br><span class="line">                slowIndex++;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> slowIndex;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>相关题目推荐</p><p>283.移动零<br>844.比较含退格的字符串<br>977.有序数组的平方</p><h3 id="26-删除排序数组中的重复项"><a href="#26-删除排序数组中的重复项" class="headerlink" title="26.删除排序数组中的重复项"></a>26.删除排序数组中的重复项</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">removeDuplicates</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>{</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">1</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">int</span> slow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) {</span><br><span class="line">            <span class="keyword">if</span>(nums[slow]!=nums[i]) {</span><br><span class="line">                slow++;</span><br><span class="line">                nums[slow] = nums[i];</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">        }<span class="keyword">return</span> slow+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="双指针-滑动窗口"><a href="#双指针-滑动窗口" class="headerlink" title="双指针-滑动窗口"></a>双指针-滑动窗口</h3><p>所谓滑动窗口，就是不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果。</p><p>在暴力解法中，是一个for循环滑动窗口的起始位置，一个for循环为滑动窗口的终止位置，用两个for循环 完成了一个不断搜索区间的过程。</p><p>那么滑动窗口如何用一个for循环来完成这个操作呢。</p><p>首先要思考 如果用一个for循环，那么应该表示 滑动窗口的起始位置，还是终止位置。<br>如果只用一个for循环来表示 滑动窗口的起始位置，那么如何遍历剩下的终止位置？<br>此时难免再次陷入 暴力解法的怪圈。<br>所以 只用一个for循环，那么这个循环的索引，一定是表示 滑动窗口的终止位置。<br>那么问题来了， 滑动窗口的起始位置如何移动呢？</p><p>在本题中实现滑动窗口，主要确定如下三点：<br>窗口内是什么？<br>如何移动窗口的起始位置？<br>如何移动窗口的结束位置？<br>left指针什么时候向后移动</p><p>窗口就是 满足其和 ≥ s 的长度最小的 连续 子数组。</p><p>窗口的起始位置如何移动：如果当前窗口的值大于s了，窗口就要向前移动了（也就是该缩小了）。</p><p>窗口的结束位置如何移动：窗口的结束位置就是遍历数组的指针，也就是for循环里的索引。</p><h4 id="滑动窗口题目特征"><a href="#滑动窗口题目特征" class="headerlink" title="滑动窗口题目特征"></a>滑动窗口题目特征</h4><p>连续</p><h4 id="滑动窗口模板"><a href="#滑动窗口模板" class="headerlink" title="滑动窗口模板"></a>滑动窗口模板</h4><p>《挑战程序设计竞赛》这本书中把滑动窗口叫做「虫取法」，我觉得非常生动形象。因为滑动窗口的两个指针移动的过程和虫子爬动的过程非常像：前脚不动，把后脚移动过来；后脚不动，把前脚向前移动。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findSubArray(<span class="keyword">int</span>[] nums){</span><br><span class="line">    <span class="keyword">int</span> n = num.length; <span class="comment">// 数组or字符串长度</span></span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">0</span>;     <span class="comment">// 双指针，表示当前遍历的区间[l, r]，闭区间</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span> <span class="comment">// 用于统计 子数组or子区间 是否有效，根据题目可能会改成求和or计数</span></span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span> <span class="comment">// 保存最大的满足题目要求的 子数组or子串 长度</span></span><br><span class="line">    <span class="keyword">while</span> (r &lt; n){     <span class="comment">// 当右边的指针没有搜索到 数组or字符串 的结尾</span></span><br><span class="line">        sum += nums[r]     <span class="comment">// 增加当前右边指针的数字or字符的求和or计数</span></span><br><span class="line">        <span class="keyword">while</span> 区间[l, r]不符合题意{</span><br><span class="line">            sum -= nums[l] <span class="comment">// 移动左指针前需要从sum中减少l位置字符的求和or计数</span></span><br><span class="line">            l++ <span class="comment">// 真正的移动左指针，注意不能跟上面一行代码写反</span></span><br><span class="line">        } <span class="comment">// 此时需要一直移动左指针，直至找到一个符合题意的区间</span></span><br><span class="line">        <span class="comment">// 到 while 结束时，我们找到了一个符合题意要求的 子数组or子串</span></span><br><span class="line">        res = Math.max(res, r - l + <span class="number">1</span>) <span class="comment">// 需要更新结果</span></span><br><span class="line">        r++ <span class="comment">// 移动右指针，去探索新的区间</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><p>定义两个指针 l 和 r 分别指向区间的开头和结尾，注意是闭区间；定义 sum 用来统计该区间内的各个字符出现次数；</p></li><li><p>第一重 while 循环是为了判断 r 指针的位置是否超出了数组边界；当 r 每次到了新位置，需要增加 r 指针的求和 / 计数；</p></li><li><p>第二重 while 循环是让 l 指针向右移动到 [l, r] 区间符合题意的位置；当 l 每次移动到了新位置，需要减少 l 指针的求和 / 计数；</p></li></ol><h4 id="最大连续-1-的个数-III"><a href="#最大连续-1-的个数-III" class="headerlink" title="最大连续 1 的个数 III"></a>最大连续 1 的个数 III</h4><p><a href="https://leetcode.cn/problems/max-consecutive-ones-iii/">1004. 最大连续 1 的个数 III</a></p><h4 id="长度最小的子数组"><a href="#长度最小的子数组" class="headerlink" title="长度最小的子数组"></a>长度最小的子数组</h4><p><a href="https://leetcode-cn.com/problems/minimum-size-subarray-sum/">长度最小的子数组</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://gitee.com/programmercarl/leetcode-master">代码随想录</a></p><p><a href="https://github.com/yangchong211/YCBlogs/blob/master/blog/06.%E7%AE%97%E6%B3%95%E5%A4%A7%E6%B1%87%E6%80%BB.md">算法汇总</a></p><p><a href="https://github.com/algorithm-visualizer/algorithm-visualizer">Algorithm Visualizer算法可视化的GitHub 地址</a></p><p><a href="https://algorithm-visualizer.org/">Algorithm Visualizer算法可视化网站</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>云服务器</title>
      <link href="/2022/092551507.html"/>
      <url>/2022/092551507.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-云服务器"><a href="#1-云服务器" class="headerlink" title="1. 云服务器"></a>1. 云服务器</h1><p>云服务器（Elastic Compute Service, 简称ECS），是一种简单高效，处理能力可以弹性伸缩的计算服务。ECS的相关术语说明如下：</p><p>实例（Instance）：是一个虚拟的计算环境，由CPU、内存、系统盘和运行的操作系统组成；ECS实例作为云服务器最为核心的概念，其他资源，比如磁盘、IP、镜像、快照等，只有与ECS结合后才具有使用意义。</p><p>地域（Region）：指ECS实例所在的物理位置。地域内的ECS实例内网是互通的，不同的地域之间ECS实例内网不互通。</p><p>可用区（Zone）：指在同一地域内，电力和网络互相独立的物理区域。</p><p>磁盘（Disk）：是为ECS实例提供数据块级别的数据存储。可以分为4类： 普通云盘、SSD云盘、高效云盘和本地SSD磁盘</p><p>快照（Snapshot）：是某一个时间点上某个磁盘的数据拷贝。</p><p>镜像（Image）：是ECS实例运行环境的模板，一般包括操作系统和预装的软件。</p><p>安全组（Security Group）：是一种虚拟防火墙，具备状态检测包过滤功能。每个实例至少属于一个安全组。同一个安全组内的实例之间网络互通，不同安全组的实例之间默认内网不通，但是可以授权两个安全组之间互访。</p><h2 id="1-1-虚拟主机、ECS云服务器、VPS区别汇总"><a href="#1-1-虚拟主机、ECS云服务器、VPS区别汇总" class="headerlink" title="1.1. 虚拟主机、ECS云服务器、VPS区别汇总"></a>1.1. 虚拟主机、ECS云服务器、VPS区别汇总</h2><p>1、虚拟主机</p><p>虚拟主机就是利用虚拟化的技术，将一台服务器划分出一定大小的空间，每个空间都给予单独的 FTP 权限和 Web 访问权限，多个用户共同平均使用这台服务器的硬件资源。不同配置的虚拟主机主要是在磁盘空间、数据库大小、流量上面的区别。虚拟主机也有可以分为独享的虚拟主机，和共享的虚拟主机。顾名思义，两者之间的区别在于服务器资源的独享和共享。网站主机、空间、都是一个意思。这一类的主机用户的权限很低，没有远程桌面，只有FTP权限供用户上传文档等操作。优势是比较价格便宜。</p><p>2、VPS</p><p>先说一下vps，Virtual Private Server 虚拟专用服务器,一般是将一个独立服务器通过虚拟化技术虚拟成多个虚拟专用服务器。与虚拟主机不同的是，你拥有的是一台虚拟的服务器，类似于Windows上的虚拟机一样，虽然是虚拟的，但是使用起来，和使用客户机没有什么区别。同理，VPS可以使用远程桌面登录对服务器进行维护操作。</p><p>3、ECS云服务器</p><p>现在的主流的服务器解决方案，一般理解云服务器和VPS一样，同样是虚拟化的技术虚拟出来的服务器。也有人说以前的VPS就是现在的ECS，其实不然，云服务器是一个计算，网络，存储的组合。简单点说就是通过多个CPU，内存，硬盘组成的计算池和存储池和网络的组合；在这样的平台上虚拟出的服务器，用户可以根据自己的运算需要选择配置不同的云服务器。具体区别总结如下：</p><h2 id="1-2-如何选择云服务器配置"><a href="#1-2-如何选择云服务器配置" class="headerlink" title="1.2. 如何选择云服务器配置"></a>1.2. 如何选择云服务器配置</h2><h3 id="1-2-1-地域节点"><a href="#1-2-1-地域节点" class="headerlink" title="1.2.1. 地域节点"></a>1.2.1. 地域节点</h3><p>先说地域，地域的选择遵循就近原则，就近选择地域，理论上，用户距离云服务器地域越近，网络延迟越低，速度越快，所以根据用户群所在地区选择地域。</p><p>如果服务器地域选择是大陆地区，需要备案的，如果想免备案，可选择中国香港或者国外地域的服务器，比如美国或新加坡等等。</p><p>地域的选择并不是随便选的，跟网络会有一定的关系。有些用过的小伙伴可能会说，自己就是随便选的，没觉得有啥不同啊？确实一般的用户可能感觉不到有什么区别，但是如果是需要部署大型项目，使用到负载均衡，或者是并发量很大的应用的话，地域的选择就会对使用造成影响。</p><h3 id="1-2-2-服务器的规格配置选择"><a href="#1-2-2-服务器的规格配置选择" class="headerlink" title="1.2.2. 服务器的规格配置选择"></a>1.2.2. 服务器的规格配置选择</h3><p>1、CPU是服务器的一个核心，表示云服务器的运算能力。CPU数量越多，主频越高，CPU性能越优越，对业务处理的能力也就越高，因而用户在选择上最好依据实际的情况考虑。</p><p>2、内存作为数据的中转站，内存越大，可用缓存也就越大，如果是网站，打开速度也就越快。</p><p>3、云服务器的配置取决于业务需求，一般来说对于访问量较小的个人网站，访客不会很多，1核2G更合适，当然这种轻量级业务，选择轻量应用服务器无疑是最爽的，同价位下，配置越高。</p><p>如果是2核4G的配置可满足大多数的用户需求，比如中小企业运营、一般性数据处理、并行计算处理等，对于一些对计算性能要求较高的业务，比如中大型运营活动、大型论坛、网页游戏、批量处理、ERP系统，APP应用等，则需要更高的CPU核数和内存，比如说4核8G。</p><p>4、云服务器是可以弹性升级的，如果业务量评估不足，后期你升级配置，那么1核2G内存升级到2核4G费用会远高于直接购买2核4G的费用，所以趁着新用户资格，一次性选择2核4G最合适，而且如果业务评估周期长，建议选择3年，折扣力度也最大。</p><p>5、不过对于那些云服务器租用到期的老用户，还想继续低价也不是非常难，可以找朋友家人注册一个新账号，重新参加新用户活动，然后直接将当前云数据迁移过去就ok了，官网帮助文档也有解决方案。</p><p>6、系统盘是用来存储云服务器系统的，和家用电脑的C盘差不多，购买的服务器默认会提供的系统盘一般为40G；当选择镜像安装云服务器操作系统时，系统是直接保存在系统盘的，随云服务器一起创建和释放。如果更换操作系统，系统盘数据会被清空，系统盘只能有1个，创建云服务器时必须要有系统盘。比较推荐大家选择读写速度更快的数据盘，系统盘可以选择SSD类型的；性能方面ESSD云盘 &gt; SSD云盘 &gt; 高效云盘 &gt; 普通云盘。当然ESSD云盘与SSD云盘 存储性能差距不大， 高效云盘要弱一些。</p><p>7、 数据盘是用户自行创建的，可以和购买云服务器时一起创建，也可以单独创建数据盘。一般数据小于20个G是不用去买数据盘的，放在系统盘即可，系统盘也可以回滚快照，和数据盘是一样的，所以不用担心数据丢失的问题，数据盘是给数据比较大的客户用的，比如我们公司的论坛附件超过100G了，必须要挂载数据盘。</p><p>8、带宽:指的是出网带宽，也就是数据从服务器向外传输时的带宽限制。如别人访问你的网站，这时候就是服务器数据向外传输，即出网；1m带宽：如果你的网站是博客，每篇博客1000字左右，加上2张图片，一篇博客的大小估算为100Kb。相当于每秒你差不多可以接受一个用户的访问。</p><p>配置 适用场景<br>1核CPU/2G内存/1M公网带宽 个人博客、小型网站，Web应用程序，也可以适用于开发环境、代码存储及测试<br>2核CPU/4G内存/3M公网带宽 小程序、APP、论坛、门户类网站，企业运营活动，普通数据处理服务<br>4核CPU/8G内存/8M公网带宽 APP、视频、购物类网站，ERP系统，大数据及实时在线或离线分析、深度学习、批量计算、视频编码等<br>8MCPU/16G内存/10M公网带宽 游戏开发，高性能科学和工程应用，数据分析、深度学习、批量计算等</p><h2 id="1-3-连接云服务器"><a href="#1-3-连接云服务器" class="headerlink" title="1.3. 连接云服务器"></a>1.3. 连接云服务器</h2><p>腾讯云服务器为 Windows 实例时，系统默认用户名是 Administrator。</p><p>腾讯云服务器为 Linux 实例时，系统默认用户名是 root。</p><p>腾讯云服务器为Ubuntu 系统的默认用户名是 ubuntu。</p><h2 id="1-4-服务器安全"><a href="#1-4-服务器安全" class="headerlink" title="1.4. 服务器安全"></a>1.4. 服务器安全</h2><p>防止云服务器被爆破，数据库也不能设置弱密码</p><h3 id="1-4-1-修改SSH登录端口"><a href="#1-4-1-修改SSH登录端口" class="headerlink" title="1.4.1. 修改SSH登录端口"></a>1.4.1. 修改SSH登录端口</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 将<span class="comment">#Port 22去掉#，修改为10000后的端口号，保存并退出</span></span></span><br><span class="line">vi /etc/ssh/sshd_conf</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启SSH服务</span></span><br><span class="line">systemctl restart sshd.service</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="1-4-2-禁用root用户"><a href="#1-4-2-禁用root用户" class="headerlink" title="1.4.2. 禁用root用户"></a>1.4.2. 禁用root用户</h3><p>修改端口有一定的作用，可以躲过一些广撒网式攻击，但由于有扫描端口的工具存在，ssh服务的端口经过扫描就会被发现，所以还需要进一步加强安全 —— 禁用root用户。</p><p>禁止root用户使用密码登录，推荐使用密钥登录系统；</p><p>腾讯与服务器Ubuntu 系统的默认用户名是 ubuntu，并在安装过程中默认不设置 root 帐户和密码。您如有需要，可在设置中开启允许 root 用户登录</p><p>为提高轻量应用服务器实例的安全性，Linux 实例绑定密钥后，会默认会禁止通过密码登录 root 用户。如您仍需保留密码登录方式，可参考 修改 SSH 进行修改。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开 sshd_config 配置文件。</span></span><br><span class="line">sudo vi /etc/ssh/ssh_config</span><br><span class="line"></span><br><span class="line">sudo service ssh restart     #重启ssh服务</span><br></pre></td></tr></tbody></table></figure><p>sshd_config是sshd的配置文件，其中PermitRootLogin可以限定root用户通过ssh的登录方式<br>| 参数类别                 | 是否允许ssh登陆 | 登录方式    | 交互shell    |<br>|———————-|———–|———|————|<br>| yes                  | 允许        | 没有限制    | 没有限制       |<br>| without-password     | 允许        | 除密码以外   | 没有限制       |<br>| forced-commands-only | 允许        | 仅允许使用密钥 | 仅允许已授权的命令  |<br>| no                   | 不允许       | N/A     | N/A        |</p><h3 id="1-4-3-防止端口扫描"><a href="#1-4-3-防止端口扫描" class="headerlink" title="1.4.3. 防止端口扫描"></a>1.4.3. 防止端口扫描</h3><p>为了避免别人知道你暴露哪些端口，可以设置防火墙来指定允许本机ip访问这些端口，然后再利用nigix反向代理</p><p>设置端口指定ip访问<br>宝塔面板-安全-端口设置-来源-选择指定ip-填入127.0.0.1</p><h3 id="1-4-4-限制ip登录"><a href="#1-4-4-限制ip登录" class="headerlink" title="1.4.4. 限制ip登录"></a>1.4.4. 限制ip登录</h3><p>自动获取暴力攻击设备IP信息，通过防火墙或第三方工具限制IP地址登录；</p><h3 id="1-4-5-防火墙"><a href="#1-4-5-防火墙" class="headerlink" title="1.4.5. 防火墙"></a>1.4.5. 防火墙</h3><p>腾讯云的防火墙是外层的，宝塔的防火墙是内层的<br>可以开放腾讯云的防火墙的全部端口，再用宝塔的防火墙具体开放对应端口</p><h2 id="1-5-哪吒管理面板"><a href="#1-5-哪吒管理面板" class="headerlink" title="1.5. 哪吒管理面板"></a>1.5. 哪吒管理面板</h2><p><a href="https://github.com/naiba/nezha">https://github.com/naiba/nezha</a><br><a href="https://nezhahq.github.io/index.html">https://nezhahq.github.io/index.html</a></p><h2 id="1-6-域名解析绑定"><a href="#1-6-域名解析绑定" class="headerlink" title="1.6. 域名解析绑定"></a>1.6. 域名解析绑定</h2><p>在域名控制台</p><p><strong>A记录</strong>将域名指向ip地址，主机记录填你自己设置的，值填ip地址；A记录就是解析我们常见的带www和不带www的域名，解析不带www的域名时主机记录填@或者不填，解析带www得域名时主机记录填www。</p><p><strong>CNAME</strong>也叫别名记录，用来把域名解析到别的域名上。<br>一般情况下都建议使用CNAME记录。CNAME记录可用于CDN加速，通过CDN加速别名解析网站域名，这样既可以起到加速网站的作用，又能隐藏网站的真实IP，减少被攻击的几率。</p><h2 id="1-7-wget下载github的releases的软件"><a href="#1-7-wget下载github的releases的软件" class="headerlink" title="1.7. wget下载github的releases的软件"></a>1.7. wget下载github的releases的软件</h2><p>wget <a href="https://github.com/rabbitmq/erlang-rpm/releases/download/v23.2.4/erlang-23.2.4-1.el7.x86_64.rpm">https://github.com/rabbitmq/erlang-rpm/releases/download/v23.2.4/erlang-23.2.4-1.el7.x86_64.rpm</a></p><p>v23.2.4   版本号<br>erlang-23.2.4-1.el7.x86_64.rpm  要下载的软件包</p><h1 id="2-ubuntu腾讯云服务器"><a href="#2-ubuntu腾讯云服务器" class="headerlink" title="2. ubuntu腾讯云服务器"></a>2. ubuntu腾讯云服务器</h1><p>腾讯云文档(<a href="https://cloud.tencent.com/document/product/1207/44643">https://cloud.tencent.com/document/product/1207/44643</a>)</p><h2 id="2-1-安装docker"><a href="#2-1-安装docker" class="headerlink" title="2.1. 安装docker"></a>2.1. 安装docker</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用官方安装脚本自动安装 Docker</span></span><br><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以使用 daocloud 一键安装命令：</span></span><br><span class="line">curl -sSL https://get.daocloud.io/docker | sh</span><br></pre></td></tr></tbody></table></figure><h1 id="3-托管项目"><a href="#3-托管项目" class="headerlink" title="3. 托管项目"></a>3. 托管项目</h1><h2 id="3-1-Dashy监控面板"><a href="#3-1-Dashy监控面板" class="headerlink" title="3.1. Dashy监控面板"></a>3.1. Dashy监控面板</h2><p>参考<a href="https://johnrosen1.com/2022/04/14/dashy/">https://johnrosen1.com/2022/04/14/dashy/</a><br><a href="https://blog.csdn.net/wbsu2004/article/details/122728259">https://blog.csdn.net/wbsu2004/article/details/122728259</a></p><p>Dashy 是一个开源的自托管的导航页配置服务，具有易于使用的可视化编辑器、状态检查、小工具和主题等功能。你可以将自己常用的一些网站聚合起来放在一起，形成自己的导航页。</p><p>GitHub原项目地址（感谢作者的付出）：<a href="https://github.com/Lissy93/dashy%EF%BC%882.8k">https://github.com/Lissy93/dashy（2.8k</a> star）</p><p>官网地址：<a href="https://dashy.to/">https://dashy.to/</a></p><p>Demo地址：<a href="https://demo.dashy.to/">https://demo.dashy.to/</a></p><p>文档地址：<a href="https://dashy.to/docs/">https://dashy.to/docs/</a></p><h3 id="3-1-1-特点"><a href="#3-1-1-特点" class="headerlink" title="3.1.1. 特点"></a>3.1.1. 特点</h3><p>🚦 对您的每个应用程序/链接进行实时状态监测<br>📊 使用小工具来显示来自自我托管服务的信息和动态内容<br>🔎 按名称、域名或标签进行即时搜索 + 可定制的热键和键盘快捷方式<br>🎨 许多内置的颜色主题，带有UI颜色编辑器并支持自定义CSS<br>🧸 许多图标选项 - Font-Awesome、homelab图标、自动获取Favicon、图像、表情符号等。<br>💂 可选的认证，包括多用户访问、可配置的权限和SSO支持<br>🌎 多语言支持，有10多种人工翻译的语言，还有更多的语言正在开发中<br>☁ 可选的、加密的、免费的异地云备份和恢复功能<br>💼 工作区视图，可同时在多个应用程序之间轻松切换<br>🛩️ 一个最小的视图，可作为快速加载的浏览器起始页使用<br>🖱️ 选择应用程序的启动方式：新标签、同一标签、剪贴板、弹出式模式或在工作区视图中打开<br>📏️可定制布局、尺寸、文本、组件可见性、排序顺序、行为等。<br>🖼️全屏背景图片、自定义导航栏链接、HTML页脚、标题等选项。<br>🚀️容易用Docker设置，或在裸机上，或用一键云部署<br>⚙️简单的基于YAML的单文件配置，以及通过UI配置应用程序的选项。<br>✨ 正在积极开发，定期添加改进和新功能<br>ᾐ极小的软件包，完全响应的UI，和PWA的基本离线访问。<br>🆓 100%免费和开放源代码<br>🔐 高度重视隐私问题</p><p>关键，他还能添加很多小的组件，比如配合glances，监控你系统运行情况</p><h3 id="3-1-2-docker-compose搭建"><a href="#3-1-2-docker-compose搭建" class="headerlink" title="3.1.2. docker-compose搭建"></a>3.1.2. docker-compose搭建</h3><p>占用内存280m<br>1.创建一下安装的目录</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /app/dashy/{icons,public}</span><br><span class="line"></span><br><span class="line">cd /app/dashy</span><br><span class="line"></span><br><span class="line">touch docker-compose.yml</span><br><span class="line">vi /app/dashy/docker-compose.yml</span><br></pre></td></tr></tbody></table></figure><p>2.编写docker-compose.yml文件</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">dashy:</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'10022:80'</span></span><br><span class="line">        <span class="attr">volumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'/app/dashy/public/conf.yml:/app/public/conf.yml'</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'/app/dashy/icons:/app/public/item-icons/icons'</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">dashy</span></span><br><span class="line">        <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">        <span class="attr">image:</span> <span class="string">'lissy93/dashy:latest'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>3.编写conf.yml配置文件<br>vi /app/dashy/public/conf.yml</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Page meta info, like heading, footer text and nav links</span></span><br><span class="line"><span class="attr">pageInfo:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Dashy</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">your</span> <span class="string">new</span> <span class="string">dashboard!</span></span><br><span class="line">  <span class="attr">navLinks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">dashy项目的GitHub</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">https://github.com/Lissy93/dashy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Documentation</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">https://dashy.to/docs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional app settings and configuration</span></span><br><span class="line"><span class="attr">appConfig:</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">colorful</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">iconSize:</span> <span class="string">medium</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">cn</span></span><br><span class="line">  <span class="attr">auth:</span></span><br><span class="line">    <span class="attr">users:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">user:</span> <span class="string">arts</span>   <span class="comment"># 改成自己的用户名</span></span><br><span class="line">        <span class="attr">hash:</span> <span class="string">5fbb237c8a36d80336407bd7c350db880c86fae21ab42b4dec57d512114e56a6</span>  <span class="comment"># 设置cha256 哈希加密后的密码，地址用这个： https://emn178.github.io/online-tools/sha256.html</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">admin</span></span><br><span class="line"><span class="comment"># Main content - An array of sections, each containing an array of items</span></span><br><span class="line"><span class="attr">sections:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Getting</span> <span class="string">Started</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-rocket</span></span><br><span class="line">  <span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Dashy</span> <span class="string">Live</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Development</span> <span class="string">a</span> <span class="string">project</span> <span class="string">management</span> <span class="string">links</span> <span class="string">for</span> <span class="string">Dashy</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">https://i.ibb.co/qWWpD0v/astro-dab-128.png</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://live.dashy.to/</span></span><br><span class="line">    <span class="attr">target:</span> <span class="string">newtab</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">GitHub</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Source</span> <span class="string">Code,</span> <span class="string">Issues</span> <span class="string">and</span> <span class="string">Pull</span> <span class="string">Requests</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/lissy93/dashy</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Docs</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Configuring</span> <span class="string">&amp;</span> <span class="string">Usage</span> <span class="string">Documentation</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">Dashy.to</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-book</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://dashy.to/docs</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Showcase</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">See</span> <span class="string">how</span> <span class="string">others</span> <span class="string">are</span> <span class="string">using</span> <span class="string">Dashy</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Lissy93/dashy/blob/master/docs/showcase.md</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-grin-hearts</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Config</span> <span class="string">Guide</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">See</span> <span class="string">full</span> <span class="string">list</span> <span class="string">of</span> <span class="string">configuration</span> <span class="string">options</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Lissy93/dashy/blob/master/docs/configuring.md</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-wrench</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Support</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Get</span> <span class="string">help</span> <span class="string">with</span> <span class="string">Dashy,</span> <span class="string">raise</span> <span class="string">a</span> <span class="string">bug,</span> <span class="string">or</span> <span class="string">get</span> <span class="string">in</span> <span class="string">contact</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/Lissy93/dashy/blob/master/.github/SUPPORT.md</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-hands-helping</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>docker-compose up -d  </p><h3 id="3-1-3-配置文件"><a href="#3-1-3-配置文件" class="headerlink" title="3.1.3. 配置文件"></a>3.1.3. 配置文件</h3><p>配置文件以 YAML 格式编写，保存在容器的 /app/public/conf.yml 中，界面上可以直接启动编辑器，对 conf.yml 进行源代码编辑<br>配置文件存在三个根属性：<br>  pageInfo - 仪表盘元数据，如标题、描述、导航栏链接和页脚文本<br>  appConfig - 仪表板设置，如主题、身份验证、语言和自定义，<br>  sections - 组部分，每个部分包括一组项目，每个模块包括一个 item 配置</p><p>直接通过 UI 编辑你的配置，更改将保存在此文件中。<br>搭建好后，进入web管理界面-设置-更新设置-编辑设置</p><p>也使用 Docker volume将配置文件从主机系统挂载到容器中去，例如 -v ./host-system/my-local-conf.yml:/app/public/conf.yml，使用 docker exec -it [container-id] yarn validate-config 命令检查你的配置。编辑配置后，应用程序将在后台重建，这可能需要一分钟。</p><p>我的配置文件</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># Page meta info, like heading, footer text and nav links</span></span><br><span class="line"><span class="attr">pageInfo:</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Arts</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">Welcome</span> <span class="string">to</span> <span class="string">my</span> <span class="string">导航页!</span></span><br><span class="line">  <span class="attr">navLinks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">dashy项目的GitHub</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">https://github.com/Lissy93/dashy</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">我的GitHub主页</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">https://github.com/wenkexia/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Optional app settings and configuration</span></span><br><span class="line"><span class="attr">appConfig:</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">colorful</span></span><br><span class="line">  <span class="attr">layout:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">iconSize:</span> <span class="string">medium</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">cn</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Main content - An array of sections, each containing an array of items</span></span><br><span class="line"><span class="attr">sections:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CPU</span> <span class="string">Usage</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tachometer</span></span><br><span class="line">  <span class="attr">displayData:</span></span><br><span class="line">    <span class="attr">rows:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-current-cpu</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-current-cores</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">CPU</span> <span class="string">History</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-microchip</span></span><br><span class="line">  <span class="attr">displayData:</span></span><br><span class="line">    <span class="attr">cols:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-cpu-history</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">60</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Disk</span> <span class="string">Space</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-hdd</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-disk-space</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Network</span> <span class="string">Interfaces</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-ethernet</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-network-interfaces</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">500</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Network</span> <span class="string">Activity</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-exchange</span></span><br><span class="line">  <span class="attr">displayData:</span></span><br><span class="line">    <span class="attr">cols:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-network-activity</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line">      <span class="attr">limit:</span> <span class="number">500</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Disk</span> <span class="string">IO</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-disc-drive</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-disk-io</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line">       </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Memory</span> <span class="string">Usage</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-memory</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-current-mem</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line">      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">System</span> <span class="string">Load</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-tasks-alt</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-system-load</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">System</span> <span class="string">Alerts</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">fas</span> <span class="string">fa-sensor-alert</span></span><br><span class="line">  <span class="attr">widgets:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">gl-alerts</span></span><br><span class="line">    <span class="attr">options:</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">http://43.154.228.217:10022</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Productivity</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-briefcase</span></span><br><span class="line">  <span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">ProtonMail</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://mail.protonmail.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Primary</span> <span class="string">email</span> <span class="string">account</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">email</span>, <span class="string">mail</span>]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">CTemplar</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://mail.ctemplar.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Secondary</span> <span class="string">email</span> <span class="string">account</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">email</span>, <span class="string">mail</span>]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">2</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">AnonAddy</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://app.anonaddy.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Mail</span> <span class="string">alias</span> <span class="string">forwarder</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">forwarder</span>, <span class="string">aliases</span>, <span class="string">email</span>]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">3</span></span><br><span class="line">    <span class="attr">statusCheckAcceptCodes:</span> <span class="string">'401'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">LessPass</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://lesspass.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Deterministic</span> <span class="string">password</span> <span class="string">generator</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">password</span>, <span class="string">generate</span>, <span class="string">deterministic</span>]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">EteSync</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://pim.etesync.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Calendar</span> <span class="string">+</span> <span class="string">Contacts,</span> <span class="string">CalDAV</span> <span class="string">sync</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">caldav</span>, <span class="string">calendar</span>, <span class="string">contacts</span>, <span class="string">tasks</span>, <span class="string">planning</span>]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">5</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Tasks</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">https://i.ibb.co/v4jznK0/todo-list.png</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://pim.etesync.com/pim/tasks</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Todo</span> <span class="string">list</span> <span class="string">and</span> <span class="string">tasks</span> <span class="string">from</span> <span class="string">CalDAV</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">caldav</span>, <span class="string">tasks</span>, <span class="string">planning</span>]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">6</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Tresorit</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://web.tresorit.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Off-site</span> <span class="string">encrypted</span> <span class="string">file</span> <span class="string">sync</span> <span class="string">+</span> <span class="string">backup</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">files</span>, <span class="string">backup</span>, <span class="string">sync</span>, <span class="string">storage</span> ]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">7</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">StandardNotes</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://app.standardnotes.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Notes,</span> <span class="string">and</span> <span class="string">my</span> <span class="string">second</span> <span class="string">brain</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">notes</span> ]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">8</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">1Password</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://my.1password.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Password</span> <span class="string">Manager</span></span><br><span class="line">    <span class="attr">tags:</span> [<span class="string">hosted</span>, <span class="string">personal</span>, <span class="string">passwords</span> ]</span><br><span class="line">    <span class="attr">hotkey:</span> <span class="number">9</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Dev</span> <span class="string">&amp;</span> <span class="string">Cloud</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-code</span></span><br><span class="line">  <span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">GitHub</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://github.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">StackOverflow</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">http://stackoverflow.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">CloudFlare</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://dash.cloudflare.com/</span></span><br><span class="line">    <span class="attr">statusCheckAcceptCodes:</span> <span class="string">'403'</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">DigitalOcean</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://cloud.digitalocean.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Netlify</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://app.netlify.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">CodeSandbox</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://codesandbox.io/dashboard</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Hack</span> <span class="string">the</span> <span class="string">Box</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">favicon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.hackthebox.com/home</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Documentation</span></span><br><span class="line">    <span class="attr">subItems:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">JavaScript</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://developer.mozilla.org</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">si-javascript</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">'#F7DF1E'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">TypeScript</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://www.typescriptlang.org/docs</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">si-typescript</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">'#3178C6'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Svelt</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://svelte.dev/docs</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">si-svelte</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">'#FF3E00'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Go</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://go.dev/doc</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">si-go</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">'#00ADD8'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Rust</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://doc.rust-lang.org/reference</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">si-rust</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">'#000000'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Docker</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">https://docs.docker.com/</span></span><br><span class="line">      <span class="attr">icon:</span> <span class="string">si-docker</span></span><br><span class="line">      <span class="attr">color:</span> <span class="string">'#2496ED'</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Social</span> <span class="string">&amp;</span> <span class="string">News</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-thumbs-up</span></span><br><span class="line">  <span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Discord</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-discord</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://discord.com/channels/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Mastodon</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-mastodon</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://mastodon.social/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Reddit</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-reddit</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.reddit.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">HackerNews</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-ycombinator</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://news.ycombinator.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Twitter</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-twitter</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://twitter.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">YouTube</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-youtube</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://youtube.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Instagram</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-instagram</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.instagram.com/</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">News</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-bbc</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://bbc.co.uk/news</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">Crypto</span> <span class="string">Prices</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">fab</span> <span class="string">fa-bitcoin</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.livecoinwatch.com/</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">Real-time</span> <span class="string">crypto</span> <span class="string">prices</span> <span class="string">and</span> <span class="string">read-only</span> <span class="string">portfolio</span></span><br><span class="line">    <span class="attr">provider:</span> <span class="string">Live</span> <span class="string">Coin</span> <span class="string">Watch</span></span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">我的站点</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">far</span> <span class="string">fa-thumbs-up</span></span><br><span class="line">  <span class="attr">items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">title:</span> <span class="string">博客</span></span><br><span class="line">    <span class="attr">icon:</span> <span class="string">si-discord</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://halo.wenkex.top/</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-1-4-widgets"><a href="#3-1-4-widgets" class="headerlink" title="3.1.4. widgets"></a>3.1.4. widgets</h3><p>Dashy 支持以小部件的形式显示动态内容。有几个开箱即用的内置小部件，并且支持自定义小部件以显示来自几乎所有具有 API 的服务的统计信息。</p><p>具体说明在👇这里：[widgets]<a href="https://github.com/Lissy93/dashy/blob/master/docs/widgets.md">https://github.com/Lissy93/dashy/blob/master/docs/widgets.md</a></p><h3 id="3-1-5-使用样例"><a href="#3-1-5-使用样例" class="headerlink" title="3.1.5. 使用样例"></a>3.1.5. 使用样例</h3><p>官方提供了一些 conf.yml 样例，可以直接修改使用。</p><p>效果在👇下面可以看到：<br><a href="https://github.com/Lissy93/dashy/blob/master/docs/showcase.md">https://github.com/Lissy93/dashy/blob/master/docs/showcase.md</a></p><p>conf.yml 下载地址就在👇这里：<br><a href="https://gist.github.com/Lissy93/000f712a5ce98f212817d20bc16bab10">https://gist.github.com/Lissy93/000f712a5ce98f212817d20bc16bab10</a></p><p>可以直接查看官方示例 <a href="https://demo.dashy.to/%E3%80%81https://live.dashy.to/">https://demo.dashy.to/、https://live.dashy.to/</a> 了解更多信息。</p><h3 id="3-1-6-安装服务器监控插件"><a href="#3-1-6-安装服务器监控插件" class="headerlink" title="3.1.6. 安装服务器监控插件"></a>3.1.6. 安装服务器监控插件</h3><p><a href="https://blog.laoda.de/archives/docker-compose-install-dashy#7.2.1-%E5%AE%89%E8%A3%85glances">https://blog.laoda.de/archives/docker-compose-install-dashy#7.2.1-%E5%AE%89%E8%A3%85glances</a><br>Glances 是一个跨平台的、基于命令行的系统监控工具，由 Python 语言编写，使用 Python 的 psutil 库来抓取系统数据。可以监控 CPU、负载均衡、内存、网络设备、磁盘 I/O、进程和文件系统使用等。</p><p>安装服务器监控插件<br>打开SSL，监控数据无法读取<br>只能读取本机的数据，无法读取外部机器的数据</p><h2 id="3-2-Halo博客"><a href="#3-2-Halo博客" class="headerlink" title="3.2. Halo博客"></a>3.2. Halo博客</h2><p>优点<br>  1、部署方便（指用Docker）<br>  2、主题也日渐丰富<br>  3、开发者非常友好，有活跃的社区，基本上你碰到任何问题，都能在社区中找到答案（当然先要学习提问的智慧）<br>  4、维护方便（尤其是用了Docker）</p><p>缺点:因为是java写的，比较吃服务器的配置，推荐服务器内存至少1GB,占用内存680m<br><a href="https://github.com/halo-dev/halo">https://github.com/halo-dev/halo</a></p><p>文档：<a href="https://docs.halo.run/getting-started/install/docker">https://docs.halo.run/getting-started/install/docker</a></p><p>论坛：<a href="https://bbs.halo.run/">https://bbs.halo.run/</a></p><h3 id="3-2-1-docker搭建"><a href="#3-2-1-docker搭建" class="headerlink" title="3.2.1. docker搭建"></a>3.2.1. docker搭建</h3><p><a href="https://blog.laoda.de/archives/docker-install-halo">https://blog.laoda.de/archives/docker-install-halo</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建 工作目录</span></span><br><span class="line">mkdir /app/.halo &amp;&amp; cd /app/.halo</span><br><span class="line"><span class="meta">#</span><span class="bash">下载示例配置文件到 工作目录</span></span><br><span class="line">wget https://dl.halo.run/config/application-template.yaml -O ./application.yaml</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑配置文件，配置数据库或者端口等</span></span><br><span class="line">vim /app/.halo/application.yaml</span><br><span class="line"></span><br><span class="line">rm -rf /app/.halo/.leveldb</span><br><span class="line"></span><br><span class="line">docker run -it -d --name halo -p 20001:8090 -v /app/.halo:/root/.halo --restart=unless-stopped halohub/halo:latest </span><br></pre></td></tr></tbody></table></figure><p>-it： 开启输入功能并连接伪终端<br>-d： 后台运行容器<br>–name： 为容器指定一个名称<br>-p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。<br>-v： 工作目录映射。形式为：-v 宿主机路径:/root/.halo，后者不能修改。<br>–restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动 Halo 容器。</p><h3 id="3-2-2-设置反代"><a href="#3-2-2-设置反代" class="headerlink" title="3.2.2. 设置反代"></a>3.2.2. 设置反代</h3><p>在宝塔的网站配置文件中设置反代</p><p>删除默认的location块，并加入以下location块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Reverse Porxy For halo</span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:端口/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header Range $http_range;</span><br><span class="line">        proxy_set_header If-Range $http_if_range;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 20000m;</span><br><span class="line">        proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span><br><span class="line">        proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>在域名解析控制台中，域名绑定</p><h3 id="3-2-3-主题推荐"><a href="#3-2-3-主题推荐" class="headerlink" title="3.2.3. 主题推荐"></a>3.2.3. 主题推荐</h3><p>Weicarus   下载：<a href="https://github.com/lin-liem/weicarus">https://github.com/lin-liem/weicarus</a><br>joe2.0下载:<a href="https://github.com/qinhua/halo-theme-joe2.0.git">https://github.com/qinhua/halo-theme-joe2.0.git</a><br><a href="https://github.com/nineya/halo-theme-dream.git">https://github.com/nineya/halo-theme-dream.git</a></p><h3 id="3-2-4-joe主题"><a href="#3-2-4-joe主题" class="headerlink" title="3.2.4. joe主题"></a>3.2.4. joe主题</h3><p>官网：<a href="https://halo.run/">https://halo.run</a><br>文档：<a href="https://docs.halo.run/">https://docs.halo.run</a><br>社区：<a href="https://bbs.halo.run/">https://bbs.halo.run</a><br>主题仓库：<a href="https://halo.run/themes.html">https://halo.run/themes.html</a><br>开源地址：<a href="https://github.com/halo-dev/halo">https://github.com/halo-dev/halo</a></p><p>首页文章不显示问题<br>在halo的web管理端中-主题设置-首页-关闭异步加载文章列表</p><h3 id="3-2-5-记得备份"><a href="#3-2-5-记得备份" class="headerlink" title="3.2.5. 记得备份"></a>3.2.5. 记得备份</h3><p>由于我想更改端口，所以删除了之前的容器后，再执行创建容器，发现站点无法访问<br>于是只好删除了之前的.halo里的所有文件所以一定要==备份==<br>web后台备份.json文件</p><h2 id="3-3-Wiki-js"><a href="#3-3-Wiki-js" class="headerlink" title="3.3. Wiki.js"></a>3.3. Wiki.js</h2><p>团队知识库管理软件中界面最美观友好的，同时还完美支持中文以及各种丰富的插件</p><p>Wiki.js在docker中的部署也非常简单，一个命令即可完成，前提是先部署好数据库服务器。(数据库权限设置为所有人)</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">docker run --name=wiki \</span><br><span class="line">-e DB_TYPE=mysql \</span><br><span class="line">-e DB_HOST=你的公网或内网IP地址 \</span><br><span class="line">-e DB_PORT=3306 \</span><br><span class="line">-e DB_USER=admin \</span><br><span class="line">-e DB_PASS=admin密码可自行设置 \</span><br><span class="line">-e DB_NAME=wikidb \</span><br><span class="line">-e UPGRADE_COMPANION=1 \</span><br><span class="line">--restart=unless-stopped \</span><br><span class="line">-p 3000:3000 \</span><br><span class="line">-d requarks/wiki:latest</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>防火墙开启3000端口，这样就可以通过<a href="http://你的公网ip地址:3000/">http://你的公网IP地址:3000</a> 访问Wiki.js了，第一次需要创建管理员账号。</p><h3 id="3-3-1-设置反代"><a href="#3-3-1-设置反代" class="headerlink" title="3.3.1. 设置反代"></a>3.3.1. 设置反代</h3><p>在宝塔的网站配置文件中设置反代</p><p>删除默认的location块，并加入以下location块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Reverse Porxy For wiki</span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:3000/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header Range $http_range;</span><br><span class="line">        proxy_set_header If-Range $http_if_range;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 20000m;</span><br><span class="line">        proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span><br><span class="line">        proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>在域名解析控制台中，域名绑定</p><h2 id="3-4-huginn"><a href="#3-4-huginn" class="headerlink" title="3.4. huginn"></a>3.4. huginn</h2><p>地址:<a href="https://github.com/huginn/huginn">https://github.com/huginn/huginn</a><br>“基于Ruby的任务自动处理工具。你可以监控事物，然后按照书面逻辑（ifttt）进行处理，例如：监控天气、天气提醒、小说或动漫追更、信息汇总发送等，它有一个稳定的框架和活跃的生态。有了它，你可以让你的生活更有效率。可以试试看。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java-图书管理系统</title>
      <link href="/2022/092125547.html"/>
      <url>/2022/092125547.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://gitee.com/CandyWall/spring-boot-study">https://gitee.com/CandyWall/spring-boot-study</a><br>访问：<a href="http://localhost/pages/books.html">http://localhost/pages/books.html</a></p><h2 id="数据库脚本"><a href="#数据库脚本" class="headerlink" title="数据库脚本"></a>数据库脚本</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tbl_book`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `tbl_book`</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">int</span>(<span class="number">11</span>)                                                 <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    `type`        <span class="type">varchar</span>(<span class="number">20</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci  <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `name`        <span class="type">varchar</span>(<span class="number">50</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci  <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `description` <span class="type">varchar</span>(<span class="number">255</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_general_ci <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE <span class="operator">=</span> InnoDB</span><br><span class="line">  AUTO_INCREMENT <span class="operator">=</span> <span class="number">51</span></span><br><span class="line">  <span class="type">CHARACTER</span> <span class="keyword">SET</span> <span class="operator">=</span> utf8</span><br><span class="line">  <span class="keyword">COLLATE</span> <span class="operator">=</span> utf8_general_ci</span><br><span class="line">  ROW_FORMAT <span class="operator">=</span> <span class="keyword">Dynamic</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of tbl_book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring实战 第5版'</span>, <span class="string">'Spring入门经典教程，深入理解Spring原理技术内幕'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring 5核心原理与30个类手写实战'</span>, <span class="string">'十年沉淀之作，手写Spring精华思想'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring 5 设计模式'</span>, <span class="string">'深入Spring源码剖析Spring源码中蕴含的10大设计模式'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring MVC+MyBatis开发从入门到项目实战'</span>, <span class="string">'全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'计算机理论'</span>, <span class="string">'轻量级Java Web企业应用实战'</span>, <span class="string">'源码级剖析Spring框架，适合已掌握Java基础的读者'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'计算机理论'</span>, <span class="string">'Java核心技术 卷I 基础知识（原书第11版）'</span>, <span class="string">'Core Java 第11版，Jolt大奖获奖作品，针对Java SE9、10、11全面更新'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">'计算机理论'</span>, <span class="string">'深入理解Java虚拟机'</span>, <span class="string">'5个维度全面剖析JVM，大厂面试知识点全覆盖'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">'计算机理论'</span>, <span class="string">'Java编程思想（第4版）'</span>, <span class="string">'Java学习必读经典,殿堂级著作！赢得了全球程序员的广泛赞誉'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">'计算机理论'</span>, <span class="string">'零基础学Java（全彩版）'</span>, <span class="string">'零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">'市场营销'</span>, <span class="string">'直播就该这么做：主播高效沟通实战指南'</span>, <span class="string">'李子柒、李佳琦、薇娅成长为网红的秘密都在书中'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">'市场营销'</span>, <span class="string">'直播销讲实战一本通'</span>, <span class="string">'和秋叶一起学系列网络营销书籍'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `tbl_book`</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">'市场营销'</span>, <span class="string">'直播带货：淘宝、天猫直播从新手到高手'</span>, <span class="string">'一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+'</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="实体层"><a href="#实体层" class="headerlink" title="实体层"></a>实体层</h2><p>实体类开发</p><p>根据上述表结构，制作对应的实体类<br>domain层</p><p><strong>​Lombok</strong>，一个Java类库，提供了一组注解，简化POJO实体类开发，SpringBoot目前默认集成了lombok技术，并提供了对应的版本控制，所以只需要提供对应的坐标即可，</p><h3 id="引入lombok"><a href="#引入lombok" class="headerlink" title="引入lombok"></a>引入lombok</h3><p>在pom.xml中添加lombok的坐标。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="编写实体类代码"><a href="#编写实体类代码" class="headerlink" title="编写实体类代码"></a>编写实体类代码</h3><p>​ 使用lombok可以通过一个注解@Data完成一个实体类对应的getter，setter，toString，equals，hashCode等操作的快速添加</p><p>/domain/Book.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="数据层开发"><a href="#数据层开发" class="headerlink" title="数据层开发"></a>数据层开发</h2><h3 id="1-基础CRUD"><a href="#1-基础CRUD" class="headerlink" title="1.基础CRUD"></a>1.基础CRUD</h3><h4 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h4><p>​ 数据层开发本次使用MyBatisPlus技术，数据源使用前面学习的Druid，学都学了都用上</p><p><strong>步骤①</strong>：导入MyBatisPlus与Druid对应的starter，当然mysql的驱动不能少</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h4><p>application.yml中添加数据源配置</p><p><strong>步骤②</strong>：配置数据库连接相关的数据源配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><h4 id="开发数据层接口"><a href="#开发数据层接口" class="headerlink" title="开发数据层接口"></a>开发数据层接口</h4><p>mybatis-plus快速开发</p><p>/dao/BookDao<br>开发Dao接口（继承BaseMapper）</p><p><strong>步骤③</strong>：使用MP的标准通用接口BaseMapper加速开发，别忘了@Mapper和泛型的指定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Book</span>&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="制作测试类测试结果"><a href="#制作测试类测试结果" class="headerlink" title="制作测试类测试结果"></a>制作测试类测试结果</h4><p><strong>步骤④</strong>：制作测试类测试结果，这个测试类制作是个好习惯，不过在企业开发中往往都为加速开发跳过此步，且行且珍惜吧</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.itheima.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoTestCase</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(bookDao.selectById(<span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setType(<span class="string">"测试数据123"</span>);</span><br><span class="line">        book.setName(<span class="string">"测试数据123"</span>);</span><br><span class="line">        book.setDescription(<span class="string">"测试数据123"</span>);</span><br><span class="line">        bookDao.insert(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">17</span>);</span><br><span class="line">        book.setType(<span class="string">"测试数据abcdefg"</span>);</span><br><span class="line">        book.setName(<span class="string">"测试数据123"</span>);</span><br><span class="line">        book.setDescription(<span class="string">"测试数据123"</span>);</span><br><span class="line">        bookDao.updateById(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>{</span><br><span class="line">        bookDao.deleteById(<span class="number">16</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>{</span><br><span class="line">        bookDao.selectList(<span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><font color="#f0f"><b>温馨提示</b></font></p><p>​ MP技术默认的主键生成策略为雪花算法，生成的主键ID长度较大，和目前的数据库设定规则不相符，需要配置一下使MP使用数据库的主键生成策略，方式嘛还是老一套，做配置。在application.yml中添加对应配置即可，具体如下</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span>        <span class="comment">#设置表名通用前缀</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span>                <span class="comment">#设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span></span><br></pre></td></tr></tbody></table></figure><h4 id="查看MP运行日志"><a href="#查看MP运行日志" class="headerlink" title="查看MP运行日志"></a>查看MP运行日志</h4><ul><li>使用配置方式开启日志，设置日志输出方式为标准输出即可查阅SQL执行日志</li></ul><p>-</p><p>​在进行数据层测试的时候，因为基础的CRUD操作均由MP给我们提供了，所以就出现了一个局面，开发者不需要书写SQL语句了，这样程序运行的时候总有一种感觉，一切的一切都是黑盒的，作为开发者我们啥也不知道就完了。如果程序正常运行还好，如果报错了，这个时候就很崩溃，你甚至都不知道从何下手，因为传递参数、封装SQL语句这些操作完全不是你干预开发出来的，所以查看执行期运行的SQL语句就成为当务之急。</p><ul><li>SpringBoot整合MP的时候充分考虑到了这点，通过配置的形式就可以查阅执行期SQL语句，配置如下</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">tbl_</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-分页功能制作"><a href="#3-分页功能制作" class="headerlink" title="3.分页功能制作"></a>3.分页功能制作</h3><h4 id="使用IPage封装分页数据"><a href="#使用IPage封装分页数据" class="headerlink" title="使用IPage封装分页数据"></a>使用IPage封装分页数据</h4><p>前面仅仅是使用了MP提供的基础CRUD功能，实际上MP给我们提供了几乎所有的基础操作，这一节说一下如果实现数据库端的分页操作</p><p>MP提供的分页操作API如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetPage</span><span class="params">()</span></span>{</span><br><span class="line">        IPage page=<span class="keyword">new</span> Page(<span class="number">2</span>,<span class="number">5</span>);   <span class="comment">//传入当前显示第几页 ,每页显示几条数据</span></span><br><span class="line"></span><br><span class="line">        bookDao.selectPage(page,<span class="keyword">null</span>); <span class="comment">//selectPage方法需要传入一个封装分页数据的对象，这个对象包含了分页的信息，如当前页码、每页显示的条数等，还有过滤条件</span></span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>将该对象传入到查询方法selectPage后，可以得到查询结果，但是我们会发现当前操作查询结果返回值仍然是一个IPage对象，这又是怎么回事？</p><p>原来这个IPage对象中封装了若干个数据，而查询的结果作为IPage对象封装的一个数据存在的，可以理解为查询结果得到后，又塞到了这个IPage对象中，其实还是为了高度的封装，一个IPage描述了分页所有的信息。下面5个操作就是IPage对象中封装的所有信息了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetPage</span><span class="params">()</span></span>{</span><br><span class="line">        IPage page=<span class="keyword">new</span> Page(<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line">        bookDao.selectPage(page,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(page.getCurrent());        <span class="comment">//当前页码值</span></span><br><span class="line">        System.out.println(page.getSize());            <span class="comment">//每页显示数</span></span><br><span class="line">        System.out.println(page.getTotal());        <span class="comment">//数据总量</span></span><br><span class="line">        System.out.println(page.getPages());        <span class="comment">//总页数</span></span><br><span class="line">        System.out.println(page.getRecords());        <span class="comment">//详细数据</span></span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h4 id="分页操作依赖MyBatisPlus分页拦截器实现功能"><a href="#分页操作依赖MyBatisPlus分页拦截器实现功能" class="headerlink" title="分页操作依赖MyBatisPlus分页拦截器实现功能"></a>分页操作依赖MyBatisPlus分页拦截器实现功能</h4><p>到这里就知道这些数据如何获取了，但是当你去执行这个操作时，你会发现并不像我们分析的这样，实际上这个分页当前是无效的。为什么这样呢？这个要源于MP的内部机制。</p><p>对于MySQL的分页操作使用limit关键字进行，而并不是所有的数据库都使用limit关键字实现的，这个时候MP为了制作的兼容性强，将分页操作设置为基础查询操作的升级版，你可以理解为IPhone6与IPhone6S-PLUS的关系。</p><p>基础操作中有查询全部的功能，而在这个基础上只需要升级一下（PLUS）就可以得到分页操作。所以MP将分页操作做成了一个开关，你用分页功能就分页操作是没有的。这个开关是通过MP的拦截器的形式存在的，其中的原理这里不分析了，有兴趣的小伙伴可以学习MyBatisPlus这门课程进行详细解读。具体设置方式如下<br>把开关开启，不用就不需要开启这个开关。而我们现在没有开启这个开关，所以<br><strong>定义MP拦截器并将其设置为Spring管控的bean</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MPConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MybatisPlusInterceptor <span class="title">mybatisPlusInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//创建MP的拦截器栈，这个时候拦截器栈中没有具体的拦截器</span></span><br><span class="line">        MybatisPlusInterceptor interceptor = <span class="keyword">new</span> MybatisPlusInterceptor(); <span class="comment">//1.定义Mp拦截器</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化了分页拦截器，并添加到拦截器栈中。如果后期开发其他功能，需要添加全新的拦截器，按照第二行的格式继续add进去新的拦截器就可以了。</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> PaginationInnerInterceptor()); <span class="comment">//2.添加具体的拦截器</span></span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-条件查询功能制作"><a href="#4-条件查询功能制作" class="headerlink" title="4.条件查询功能制作"></a>4.条件查询功能制作</h3><p>除了分页功能，MP还提供有强大的条件查询功能。以往我们写条件查询要自己动态拼写复杂的SQL语句，现在简单了，MP将这些操作都制作成API接口，调用一个又一个的方法就可以实现各种套件的拼装。这里给大家普及一下基本格式，详细的操作还是到MP的课程中查阅吧</p><p>下面的操作就是执行一个模糊匹配对应的操作，由like条件书写变为了like方法的调用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetBy</span><span class="params">()</span></span>{</span><br><span class="line">        QueryWrapper&lt;Book&gt; qw=<span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">        qw.like(<span class="string">"name"</span>,<span class="string">"Spring"</span>);</span><br><span class="line">        bookDao.selectList(qw);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>其中第一句QueryWrapper对象是一个用于封装查询条件的对象，该对象可以动态使用API调用的方法添加条件，最终转化成对应的SQL语句。第二句就是一个条件了，需要什么条件，使用QueryWapper对象直接调用对应操作即可。比如做大于小于关系，就可以使用lt或gt方法，等于使用eq方法，等等，此处不做更多的解释了。</p><p>这组API使用还是比较简单的，但是关于属性字段名的书写存在着安全隐患，比如查询字段name，当前是以字符串的形态书写的，万一写错，编译器还没有办法发现，只能将问题抛到运行器通过异常堆栈告诉开发者，不太友好。</p><p>MP针对字段检查进行了功能升级，全面支持Lambda表达式，就有了下面这组API。由QueryWrapper对象升级为LambdaQueryWrapper对象，这下就变了上述问题的出现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetBy2</span><span class="params">()</span></span>{</span><br><span class="line">        String name=<span class="string">"1"</span>;</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw=<span class="keyword">new</span> LambdaQueryWrapper&lt;Book&gt;();</span><br><span class="line">        lqw.like(Book::getName,name);</span><br><span class="line">        bookDao.selectList(lqw);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>​ 为了便于开发者动态拼写SQL，防止将null数据作为条件使用，MP还提供了动态拼装SQL的快捷书写方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetBy2</span><span class="params">()</span></span>{</span><br><span class="line">        String name=<span class="string">"1"</span>;</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw=<span class="keyword">new</span> LambdaQueryWrapper&lt;Book&gt;();</span><br><span class="line">        <span class="comment">//if(name != null) lqw.like(Book::getName,name);  //方式一：JAVA代码控制</span></span><br><span class="line">        lqw.like(name!=<span class="keyword">null</span>,Book::getName,name);                <span class="comment">//方式二：API接口提供控制开关</span></span><br><span class="line">        bookDao.selectList(lqw);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>​ 其实就是个格式，没有区别。关于MP的基础操作就说到这里吧，如果这一块知识不太熟悉的小伙伴还是去完整的学习一下MP的知识吧，这里只是蜻蜓点水的用了几个操作而已。</p><p><strong>总结</strong></p><ol><li><p>使用QueryWrapper对象封装查询条件</p></li><li><p>推荐使用LambdaQueryWrapper对象</p></li><li><p>所有查询操作封装成方法调用</p></li><li><p>查询条件支持动态条件拼装</p></li></ol><h2 id="业务层"><a href="#业务层" class="headerlink" title="业务层"></a>业务层</h2><p>其实标准业务层开发很多初学者认为就是调用数据层，怎么说呢？这个理解是没有大问题的，更精准的说法应该是组织业务逻辑功能，并根据业务需求，对数据持久层发起调用。</p><p>有什么差别呢？目标是为了组织出符合需求的业务逻辑功能，至于调不调用数据层还真不好说，有需求就调用，没有需求就不调用。</p><p>​ 一个常识性的知识普及一下，业务层的方法名定义一定要与业务有关，例如登录操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login(String username,String password);</span><br></pre></td></tr></tbody></table></figure><p>​ 而数据层的方法名定义一定与业务无关，是一定，不是可能，也不是有可能，例如根据用户名密码查询</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">selectByUserNameAndPassword(String username,String password);</span><br></pre></td></tr></tbody></table></figure><p>​ 我们在开发的时候是可以根据完成的工作不同划分成不同职能的开发团队的。比如一个哥们制作数据层，他就可以不知道业务是什么样子，拿到的需求文档要求可能是这样的</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口：传入用户名与密码字段，查询出对应结果，结果是单条数据</span><br><span class="line">接口：传入ID字段，查询出对应结果，结果是单条数据</span><br><span class="line">接口：传入离职字段，查询出对应结果，结果是多条数据</span><br></pre></td></tr></tbody></table></figure><p>​ 但是进行业务功能开发的哥们，拿到的需求文档要求差别就很大</p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">接口：传入用户名与密码字段，对用户名字段做长度校验，4-15位，对密码字段做长度校验，8到24位，对喵喵喵字段做特殊字符校验，不允许存在空格，查询结果为对象。如果为null，返回BusinessException，封装消息码INFO<span class="built_in">_</span>LOGON<span class="built_in">_</span>USERNAME<span class="built_in">_</span>PASSWORD<span class="built_in">_</span>ERROR</span><br></pre></td></tr></tbody></table></figure><p>​ 你比较一下，能是一回事吗？差别太大了，所以说业务层方法定义与数据层方法定义差异化很大，只不过有些入门级的开发者手懒或者没有使用过公司相关的ISO标准化文档而已。</p><h3 id="业务层接口"><a href="#业务层接口" class="headerlink" title="业务层接口"></a>业务层接口</h3><p>业务层接口定义如下：<br>/service/BookService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="function">Boolean <span class="title">save</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Boolean <span class="title">update</span><span class="params">(Book book)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Boolean <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Book <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Book&gt; <span class="title">getAll</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">IPage&lt;Book&gt; <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="业务层实现类"><a href="#业务层实现类" class="headerlink" title="业务层实现类"></a>业务层实现类</h3><p>/service/Impl/BookServiceImpl.java<br>​<strong>业务层实现类</strong>如下，转调数据层即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">save</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.insert(book) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">update</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">delete</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAll</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectList(<span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title">getPage</span><span class="params">(<span class="keyword">int</span> currentPage, <span class="keyword">int</span> pageSize)</span> </span>{</span><br><span class="line">        IPage page = <span class="keyword">new</span> Page(currentPage, pageSize);</span><br><span class="line">        bookDao.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>​ 别忘了对业务层接口进行测试，测试类如下</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceTest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(bookService.getById(<span class="number">4</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setType(<span class="string">"测试数据123"</span>);</span><br><span class="line">        book.setName(<span class="string">"测试数据123"</span>);</span><br><span class="line">        book.setDescription(<span class="string">"测试数据123"</span>);</span><br><span class="line">        bookService.save(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">17</span>);</span><br><span class="line">        book.setType(<span class="string">"-----------------"</span>);</span><br><span class="line">        book.setName(<span class="string">"测试数据123"</span>);</span><br><span class="line">        book.setDescription(<span class="string">"测试数据123"</span>);</span><br><span class="line">        bookService.updateById(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> </span>{</span><br><span class="line">        bookService.removeById(<span class="number">18</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>{</span><br><span class="line">        bookService.list();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetPage</span><span class="params">()</span> </span>{</span><br><span class="line">        IPage&lt;Book&gt; page = <span class="keyword">new</span> Page&lt;Book&gt;(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        bookService.page(page);</span><br><span class="line">        System.out.println(page.getCurrent());</span><br><span class="line">        System.out.println(page.getSize());</span><br><span class="line">        System.out.println(page.getTotal());</span><br><span class="line">        System.out.println(page.getPages());</span><br><span class="line">        System.out.println(page.getRecords());</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>Service接口名称定义成业务名称，并与Dao接口名称进行区分</li><li>制作测试类测试Service功能是否有效</li></ol><h3 id="业务层快速开发"><a href="#业务层快速开发" class="headerlink" title="业务层快速开发"></a>业务层快速开发</h3><p>其实MP技术不仅提供了数据层快速开发方案，业务层MP也给了一个通用接口，个人观点不推荐使用，凑合能用吧，其实就是一个封装+继承的思想，代码给出，实际开发慎用</p><h4 id="业务层接口快速开发"><a href="#业务层接口快速开发" class="headerlink" title="业务层接口快速开发"></a>业务层接口快速开发</h4><p>/service/Impl/IBookService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Book</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//添加非通用操作API接口</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="业务层接口实现类"><a href="#业务层接口实现类" class="headerlink" title="业务层接口实现类"></a>业务层接口实现类</h4><p>/service/Impl/BookServiceImpl.java<br>业务层接口实现类快速开发，关注继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BookDao</span>, <span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">IBookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="comment">//添加非通用操作API</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果感觉MP提供的功能不足以支撑你的使用需要，其实是一定不能支撑的，因为需求不可能是通用的，在原始接口基础上接着定义新的API接口就行了，此处不再说太多了，就是自定义自己的操作了，但是不要和已有的API接口名冲突即可。</p><p><strong>总结</strong></p><ol><li>使用通用接口（ISerivce<t>）快速开发Service</t></li><li>使用通用实现类（ServiceImpl&lt;M,T&gt;）快速开发ServiceImpl</li><li>可以在通用接口基础上做功能重载或功能追加</li><li>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</li></ol><h2 id="6-表现层开发"><a href="#6-表现层开发" class="headerlink" title="6.表现层开发"></a>6.表现层开发</h2><p>表现层/控制器层的开发使用基于Restful的表现层接口开发，功能测试通过Postman工具进行</p><p>/controller/BookController.java<br>​ 表现层接口如下:</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IBookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getAll</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.list();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.modify(book);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping("{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("{currentPage}/{pageSize}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> currentPage, <span class="meta">@PathVariable</span> <span class="keyword">int</span> pageSize)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookService.getPage(currentPage, pageSize, <span class="keyword">null</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​ 在实用Postman测试时关注提交类型，对应上即可，不然就会报405的错误码了</p><p><strong>普通GET请求</strong></p><p><img src="img%5Cimage-20211129152237371.png" alt="image-20211129152237371"></p><p><strong>PUT请求传递json数据，后台实用@RequestBody接收数据</strong></p><p><img src="img%5Cimage-20211129152300177.png" alt="image-20211129152300177"></p><p><strong>GET请求传递路径变量，后台实用@PathVariable接收数据</strong></p><p><img src="C:\Users\itcast\AppData\Roaming\Typora\typora-user-images\image-20211129152320073.png" alt="image-20211129152320073"></p><p><strong>总结</strong></p><ol><li>基于Restful制作表现层接口<ul><li>新增：POST</li><li>删除：DELETE</li><li>修改：PUT</li><li>查询：GET</li></ul></li><li>接收参数<ul><li>实体数据：@RequestBody</li><li>路径变量：@PathVariable</li></ul></li></ol><h3 id="7-表现层消息一致性处理"><a href="#7-表现层消息一致性处理" class="headerlink" title="7.表现层消息一致性处理"></a>7.表现层消息一致性处理</h3><p>目前我们通过Postman测试后业务层接口功能时通的，但是这样的结果给到前端开发者会出现一个小问题。不同的操作结果所展示的数据格式差异化严重</p><p><strong>增删改操作结果</strong></p><figure class="highlight tex"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">true</span><br></pre></td></tr></tbody></table></figure><p>​    <strong>查询单个数据操作结果</strong></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"计算机理论"</span>,</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Spring实战&nbsp;第5版"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"Spring入门经典教程"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​    <strong>查询全部数据操作结果</strong></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"计算机理论"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Spring实战&nbsp;第5版"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Spring入门经典教程"</span></span><br><span class="line">  },</span><br><span class="line">  {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"计算机理论"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Spring&nbsp;5核心原理与30个类手写实战"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"十年沉淀之作"</span></span><br><span class="line">  }</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><p>每种不同操作返回的数据格式都不一样，而且还不知道以后还会有什么格式，这样的结果让前端人员看了是很容易让人崩溃的，必须将所有操作的操作结果数据格式统一起来，需要设计表现层返回结果的模型类，用于后端与前端进行数据格式统一，也称为**<br>前后端数据协议**</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​ 其中flag用于标识操作是否成功，data用于封装操作数据，现在的数据格式就变了</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"计算机理论"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Spring实战&nbsp;第5版"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Spring入门经典教程"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​ 表现层开发格式也需要转换一下</p><img src="img\image-20211129153301262.png" alt="image-20211129153301262" style="zoom:80%;"><img src="img\image-20211129153319052.png" alt="image-20211129153319052" style="zoom:80%;"><img src="img\image-20211129153332499.png" alt="image-20211129153332499" style="zoom:80%;"><p>​ 结果这么一折腾，全格式统一，现在后端发送给前端的数据格式就统一了，免去了不少前端解析数据的麻烦。</p><p><strong>总结</strong></p><ol><li><p>设计统一的返回值结果类型便于前端开发读取数据</p></li><li><p>返回值结果类型可以根据需求自行设定，没有固定格式</p></li><li><p>返回值结果模型类用于后端与前端进行数据格式统一，也称为前后端数据协议</p></li></ol><h2 id="8-前后端联通性测试"><a href="#8-前后端联通性测试" class="headerlink" title="8.前后端联通性测试"></a>8.前后端联通性测试</h2><p>​ 后端的表现层接口开发完毕，就可以进行前端的开发了。</p><p>​ 将前端人员开发的页面保存到lresources目录下的static目录中，建议执行maven的clean生命周期，避免缓存的问题出现。</p><p>​  <img src="img%5Cimage-20211129153831990.png" alt="image-20211129153831990"></p><p>​ 在进行具体的功能开发之前，先做联通性的测试，通过页面发送异步提交（axios），这一步调试通过后再进行进一步的功能开发</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="function"><span class="title">getAll</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    axios.get(<span class="string">"/books"</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(res.data);</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​ 只要后台代码能够正常工作，前端能够在日志中接收到数据，就证明前后端是通的，也就可以进行下一步的功能开发了</p><p><strong>总结</strong></p><ol><li>单体项目中页面放置在resources/static目录下</li><li>created钩子函数用于初始化页面时发起调用</li><li>页面使用axios发送异步请求获取数据后确认前后端是否联通</li></ol><h2 id="9-页面基础功能开发"><a href="#9-页面基础功能开发" class="headerlink" title="9.页面基础功能开发"></a>9.页面基础功能开发</h2><h3 id="列表功能（非分页版）"><a href="#列表功能（非分页版）" class="headerlink" title="列表功能（非分页版）"></a>列表功能（非分页版）</h3><p>列表功能主要操作就是加载完数据，将数据展示到页面上，此处要利用VUE的数据模型绑定，发送请求得到数据，然后页面上读取指定数据即可</p><p><strong>页面数据模型定义</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data:{</span><br><span class="line"> dataList: [],//当前页要展示的列表数据</span><br><span class="line"> ...</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="function"><span class="title">getAll</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">// 异步请求获取数据，这样在页面加载时就可以获取到数据，并且由VUE将数据展示到页面上了</span></span><br><span class="line">    axios.get(<span class="string">"/books"</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.dataList = res.data.data; <span class="comment">//将查询数据返回到页面，利用前端数据绑定进行数据展示</span></span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><h3 id="添加功能"><a href="#添加功能" class="headerlink" title="添加功能"></a>添加功能</h3><p>添加功能用于收集数据的表单是通过一个弹窗展示的，因此在添加操作前首先要进行弹窗的展示，添加后隐藏弹窗即可。因为这个弹窗一直存在，因此当页面加载时首先设置这个弹窗为不可显示状态，需要展示，切换状态即可</p><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p><strong>默认状态</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data:{</span><br><span class="line"> dialogFormVisible: false,//添加表单是否可见</span><br><span class="line"> ...</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p><strong>切换为显示状态</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line"><span class="function"><span class="title">handleCreate</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>由于每次添加数据都是使用同一个弹窗录入数据，所以每次操作的痕迹将在下一次操作时展示出来，需要在每次操作之前清理掉上次操作的痕迹</p><p><strong>定义清理数据操作</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重置表单</span></span><br><span class="line"><span class="function"><span class="title">resetForm</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">this</span>.formData = {};</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>切换弹窗状态时清理数据</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line"><span class="function"><span class="title">handleCreate</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">this</span>.resetForm();</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​ 至此准备工作完成，下面就要调用后台完成添加操作了</p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a><strong>添加操作</strong></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="function"><span class="title">handleAdd</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//发送异步请求</span></span><br><span class="line">    axios.post(<span class="string">"/books"</span>, <span class="built_in">this</span>.formData).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) {</span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">"添加成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">this</span>.$message.error(<span class="string">"添加失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }).finally(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><ol><li>将要保存的数据传递到后台，通过post请求的第二个参数传递json数据到后台</li><li>根据返回的操作结果决定下一步操作<ul><li>如何是true就关闭添加窗口，显示添加成功的消息</li><li>如果是false保留添加窗口，显示添加失败的消息</li></ul></li><li>无论添加是否成功，页面均进行刷新，动态加载数据（对getAll操作发起调用）</li></ol><h4 id="取消添加操作"><a href="#取消添加操作" class="headerlink" title="取消添加操作"></a><strong>取消添加操作</strong></h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="function"><span class="title">cancel</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">    <span class="built_in">this</span>.$message.info(<span class="string">"操作取消"</span>);</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>请求方式使用POST调用后台对应操作</li><li>添加操作结束后动态刷新页面加载数据</li><li>根据操作结果不同，显示对应的提示信息</li><li>弹出添加Div时清除表单数据</li></ol><h3 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h3><p>模仿添加操作制作删除功能，差别之处在于删除操作仅传递一个待删除的数据id到后台即可</p><p><strong>删除操作</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="title">handleDelete</span>(<span class="params">row</span>)</span></span><br><span class="line">{</span><br><span class="line">    axios.delete(<span class="string">"/books/"</span> + row.id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) {</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">"删除成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">this</span>.$message.error(<span class="string">"删除失败"</span>);</span><br><span class="line">        }</span><br><span class="line">    }).finally(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>删除操作提示信息</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="function"><span class="title">handleDelete</span>(<span class="params">row</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//1.弹出提示框</span></span><br><span class="line">    <span class="built_in">this</span>.$confirm(<span class="string">"此操作永久删除当前数据，是否继续？"</span>, <span class="string">"提示"</span>, {</span><br><span class="line">        <span class="attr">type</span>: <span class="string">'info'</span></span><br><span class="line">    }).then(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">//2.做删除业务</span></span><br><span class="line">        axios.delete(<span class="string">"/books/"</span> + row.id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">            <span class="keyword">if</span> (res.data.flag) {</span><br><span class="line">                <span class="built_in">this</span>.$message.success(<span class="string">"删除成功"</span>);</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="built_in">this</span>.$message.error(<span class="string">"删除失败"</span>);</span><br><span class="line">            }</span><br><span class="line">        }).finally(<span class="function">() =&gt;</span> {</span><br><span class="line">            <span class="built_in">this</span>.getAll();</span><br><span class="line">        });</span><br><span class="line">    }).catch(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="comment">//3.取消删除</span></span><br><span class="line">        <span class="built_in">this</span>.$message.info(<span class="string">"取消删除操作"</span>);</span><br><span class="line">    });</span><br><span class="line">}，    </span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>请求方式使用Delete调用后台对应操作</li><li>删除操作需要传递当前行数据对应的id值到后台</li><li>删除操作结束后动态刷新页面加载数据</li><li>根据操作结果不同，显示对应的提示信息</li><li>删除操作前弹出提示框避免误操作</li></ol><h3 id="F-4-修改功能"><a href="#F-4-修改功能" class="headerlink" title="F-4.修改功能"></a>F-4.修改功能</h3><p>​ 修改功能可以说是列表功能、删除功能与添加功能的合体。几个相似点如下：</p><ol><li><p>页面也需要有一个弹窗用来加载修改的数据，这一点与添加相同，都是要弹窗</p></li><li><p>弹出窗口中要加载待修改的数据，而数据需要通过查询得到，这一点与查询全部相同，都是要查数据</p></li><li><p>查询操作需要将要修改的数据id发送到后台，这一点与删除相同，都是传递id到后台</p></li><li><p>查询得到数据后需要展示到弹窗中，这一点与查询全部相同，都是要通过数据模型绑定展示数据</p></li><li><p>修改数据时需要将被修改的数据传递到后台，这一点与添加相同，都是要传递数据</p><p>所以整体上来看，修改功能就是前面几个功能的大合体</p><p><strong>查询并展示数据</strong></p></li></ol><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//弹出编辑窗口</span></span><br><span class="line"><span class="function"><span class="title">handleUpdate</span>(<span class="params">row</span>)</span></span><br><span class="line">{</span><br><span class="line">    axios.get(<span class="string">"/books/"</span> + row.id).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) {</span><br><span class="line">            <span class="comment">//展示弹层，加载数据</span></span><br><span class="line">            <span class="built_in">this</span>.formData = res.data.data;</span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible4Edit = <span class="literal">true</span>;</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">this</span>.$message.error(<span class="string">"数据同步失败，自动刷新"</span>);</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​        <strong>修改操作</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="title">handleEdit</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    axios.put(<span class="string">"/books"</span>, <span class="built_in">this</span>.formData).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层并刷新页面</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) {</span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible4Edit = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">"修改成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">this</span>.$message.error(<span class="string">"修改失败，请重试"</span>);</span><br><span class="line">        }</span><br><span class="line">    }).finally(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>加载要修改数据通过传递当前行数据对应的id值到后台查询数据（同删除与查询全部）</li><li>利用前端双向数据绑定将查询到的数据进行回显（同查询全部）</li><li>请求方式使用PUT调用后台对应操作（同新增传递数据）</li><li>修改操作结束后动态刷新页面加载数据（同新增）</li><li>根据操作结果不同，显示对应的提示信息（同新增）</li></ol><p>​</p><h2 id="10-业务消息一致性处理"><a href="#10-业务消息一致性处理" class="headerlink" title="10.业务消息一致性处理"></a>10.业务消息一致性处理</h2><h3 id="为什么要一致性处理"><a href="#为什么要一致性处理" class="headerlink" title="为什么要一致性处理"></a>为什么要一致性处理</h3><p>目前的功能制作基本上达成了正常使用的情况，什么叫正常使用呢？也就是这个程序不出BUG，如果我们搞一个BUG出来，你会发现程序马上崩溃掉。比如后台手工抛出一个异常，看看前端接收到的数据什么样子</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"timestamp"</span>: <span class="string">"2021-09-15T03:27:31.038+00:00"</span>,</span><br><span class="line">  <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">  <span class="attr">"error"</span>: <span class="string">"Internal&nbsp;Server&nbsp;Error"</span>,</span><br><span class="line">  <span class="attr">"path"</span>: <span class="string">"/books"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​ 面对这种情况，前端的同学又不会了，这又是什么格式？怎么和之前的格式不一样？</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"flag"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"data"</span>: {</span><br><span class="line">    <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"计算机理论"</span>,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"Spring实战&nbsp;第5版"</span>,</span><br><span class="line">    <span class="attr">"description"</span>: <span class="string">"Spring入门经典教程"</span></span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="处理数据格式"><a href="#处理数据格式" class="headerlink" title="处理数据格式"></a>处理数据格式</h3><p>看来不仅要对正确的操作数据格式做处理，还要对错误的操作数据格式做同样的格式处理</p><p>首先在当前的数据结果中添加消息字段，用来兼容后台出现的操作消息<br>/controller/util/R.java<br>为了防止链式调用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Boolean flag;</span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="keyword">private</span> String msg;        <span class="comment">//用于封装消息</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​ 后台代码也要根据情况做处理，当前是模拟的错误</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span><span class="keyword">throws</span> IOException</span>{</span><br><span class="line">        Boolean flag=bookService.insert(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R(flag,flag?<span class="string">"添加成功^_^"</span>:<span class="string">"添加失败-_-!"</span>);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>​ 然后在表现层做统一的异常处理，使用SpringMVC提供的异常处理器做统一的异常处理</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectExceptionAdvice</span> </span>{</span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">doOtherException</span><span class="params">(Exception ex)</span> </span>{</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        ex.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R(<span class="keyword">false</span>, <span class="keyword">null</span>, <span class="string">"系统错误，请稍后再试！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​ 页面上得到数据后，先判定是否有后台传递过来的消息，标志就是当前操作是否成功，如果返回操作结果false，就读取后台传递的消息</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line"><span class="function"><span class="title">handleAdd</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.post(<span class="string">"/books"</span>, <span class="built_in">this</span>.formData).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span> (res.data.flag) {</span><br><span class="line">            <span class="built_in">this</span>.dialogFormVisible = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">this</span>.$message.success(<span class="string">"添加成功"</span>);</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="built_in">this</span>.$message.error(res.data.msg);   <span class="comment">//消息来自于后台传递过来，而非固定内容</span></span><br><span class="line">        }</span><br><span class="line">    }).finally(<span class="function">() =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.getAll();</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>使用注解@RestControllerAdvice定义SpringMVC异常处理器用来处理异常的</li><li>异常处理器必须被扫描加载，否则无法生效</li><li>表现层返回结果的模型类中添加消息属性用来传递消息到页面</li></ol><p>​</p><h2 id="11-页面功能开发"><a href="#11-页面功能开发" class="headerlink" title="11.页面功能开发"></a>11.页面功能开发</h2><h3 id="分页功能"><a href="#分页功能" class="headerlink" title="分页功能"></a>分页功能</h3><p>​ 分页功能的制作用于替换前面的查询全部，其中要使用到elementUI提供的分页组件</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--分页组件--&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pagination-container"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">        <span class="attr">class</span>=<span class="string">"pagiantion"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    @<span class="attr">current-change</span>=<span class="string">"handleCurrentChange"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:current-page</span>=<span class="string">"pagination.currentPage"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:page-size</span>=<span class="string">"pagination.pageSize"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">layout</span>=<span class="string">"total, prev, pager, next, jumper"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">:total</span>=<span class="string">"pagination.total"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p>​ 为了配合分页组件，封装分页对应的数据模型</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data:{</span><br><span class="line"> pagination: { </span><br><span class="line">  //分页相关模型数据</span><br><span class="line">  currentPage: 1, //当前页码</span><br><span class="line">  pageSize:10, //每页显示的记录数</span><br><span class="line">  total:0,  //总记录数</span><br><span class="line"> }</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>​ 修改查询全部功能为分页查询，通过路径变量传递页码信息参数</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getAll</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    axios.get(<span class="string">"/books/"</span> + <span class="built_in">this</span>.pagination.currentPage + <span class="string">"/"</span> + <span class="built_in">this</span>.pagination.pageSize).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​ 后台提供对应的分页功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/{currentPage}/{pageSize}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getAll</span><span class="params">(<span class="meta">@PathVariable</span> Integer currentPage,<span class="meta">@PathVariable</span> Integer pageSize)</span></span>{</span><br><span class="line">        IPage&lt;Book&gt; pageBook=bookService.getPage(currentPage,pageSize);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R(<span class="keyword">null</span>!=pageBook,pageBook);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><p>​ 页面根据分页操作结果读取对应数据，并进行数据模型绑定</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getAll</span>(<span class="params"></span>)</span></span><br><span class="line">{</span><br><span class="line">    axios.get(<span class="string">"/books/"</span> + <span class="built_in">this</span>.pagination.currentPage + <span class="string">"/"</span> + <span class="built_in">this</span>.pagination.pageSize).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.pagination.total = res.data.data.total;</span><br><span class="line">        <span class="built_in">this</span>.pagination.currentPage = res.data.data.current;</span><br><span class="line">        <span class="built_in">this</span>.pagination.pagesize = res.data.data.size;</span><br><span class="line">        <span class="built_in">this</span>.dataList = res.data.data.records;</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p>​ 对切换页码操作设置调用当前分页操作</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//切换页码</span></span><br><span class="line"><span class="function"><span class="title">handleCurrentChange</span>(<span class="params">currentPage</span>)</span></span><br><span class="line">{</span><br><span class="line">    <span class="built_in">this</span>.pagination.currentPage = currentPage;</span><br><span class="line">    <span class="built_in">this</span>.getAll();</span><br><span class="line">}</span><br><span class="line">,</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>使用el分页组件</li><li>定义分页组件绑定的数据模型</li><li>异步调用获取分页数据</li><li>分页数据页面回显</li></ol><h3 id="删除功能维护"><a href="#删除功能维护" class="headerlink" title="删除功能维护"></a>删除功能维护</h3><p>​ 由于使用了分页功能，当最后一页只有一条数据时，删除操作就会出现BUG，最后一页无数据但是独立展示，对分页查询功能进行后台功能维护，如果当前页码值大于最大页码值，重新执行查询。其实这个问题解决方案很多，这里给出比较简单的一种处理方案</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("{currentPage}/{pageSize}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getPage</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="keyword">int</span> pageSize)</span></span>{</span><br><span class="line">        IPage&lt;Book&gt; page=bookService.getPage(currentPage,pageSize);</span><br><span class="line">        <span class="comment">//如果当前页码值大于了总页码值，那么重新执行查询操作，使用最大页码值作为当前页码值</span></span><br><span class="line">        <span class="keyword">if</span>(currentPage&gt;page.getPages()){</span><br><span class="line">        page=bookService.getPage((<span class="keyword">int</span>)page.getPages(),pageSize);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> R(<span class="keyword">true</span>,page);</span><br><span class="line">        }</span><br></pre></td></tr></tbody></table></figure><h3 id="条件查询功能"><a href="#条件查询功能" class="headerlink" title="条件查询功能"></a>条件查询功能</h3><p>​ 最后一个功能来做条件查询，其实条件查询可以理解为分页查询的时候除了携带分页数据再多带几个数据的查询。这些多带的数据就是查询条件。比较一下不带条件的分页查询与带条件的分页查询差别之处，这个功能就好做了</p><ul><li><p>页面封装的数据：带不带条件影响的仅仅是一次性传递到后台的数据总量，由传递2个分页相关的数据转换成2个分页数据加若干个条件</p></li><li><p>后台查询功能：查询时由不带条件，转换成带条件，反正不带条件的时候查询条件对象使用的是null，现在换成具体条件，差别不大</p></li><li><p>查询结果：不管带不带条件，出来的数据只是有数量上的差别，其他都差别，这个可以忽略</p><p>经过上述分析，看来需要在页面发送请求的格式方面做一定的修改，后台的调用数据层操作时发送修改，其他没有区别</p><p>页面发送请求时，两个分页数据仍然使用路径变量，其他条件采用动态拼装url参数的形式传递</p><p><strong>页面封装查询条件字段</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">pagination: {  </span><br><span class="line">//分页相关模型数据</span><br><span class="line"> currentPage: 1,  //当前页码</span><br><span class="line"> pageSize:10,  //每页显示的记录数</span><br><span class="line"> total:0,   //总记录数</span><br><span class="line"> name: "",</span><br><span class="line"> type: "",</span><br><span class="line"> description: ""</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>页面添加查询条件字段对应的数据模型绑定名称</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"filter-container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"图书类别"</span> <span class="attr">v-model</span>=<span class="string">"pagination.type"</span> <span class="attr">class</span>=<span class="string">"filter-item"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"图书名称"</span> <span class="attr">v-model</span>=<span class="string">"pagination.name"</span> <span class="attr">class</span>=<span class="string">"filter-item"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">"图书描述"</span> <span class="attr">v-model</span>=<span class="string">"pagination.description"</span> <span class="attr">class</span>=<span class="string">"filter-item"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">"getAll()"</span> <span class="attr">class</span>=<span class="string">"dalfBut"</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">class</span>=<span class="string">"butT"</span> @<span class="attr">click</span>=<span class="string">"handleCreate()"</span>&gt;</span>新建<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>将查询条件组织成url参数，添加到请求url地址中，这里可以借助其他类库快速开发，当前使用手工形式拼接，降低学习要求</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getAll</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">//1.获取查询条件,拼接查询条件</span></span><br><span class="line">    param = <span class="string">"?name="</span>+<span class="built_in">this</span>.pagination.name;</span><br><span class="line">    param += <span class="string">"&amp;type="</span>+<span class="built_in">this</span>.pagination.type;</span><br><span class="line">    param += <span class="string">"&amp;description="</span>+<span class="built_in">this</span>.pagination.description;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"-----------------"</span>+ param);</span><br><span class="line">    axios.get(<span class="string">"/books/"</span>+<span class="built_in">this</span>.pagination.currentPage+<span class="string">"/"</span>+<span class="built_in">this</span>.pagination.pageSize+param).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.dataList = res.data.data.records;</span><br><span class="line">    });</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>后台代码中定义实体类封查询条件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("{currentPage}/{pageSize}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getAll</span><span class="params">(<span class="meta">@PathVariable</span> <span class="keyword">int</span> currentPage,<span class="meta">@PathVariable</span> <span class="keyword">int</span> pageSize,Book book)</span> </span>{</span><br><span class="line">    System.out.println(<span class="string">"参数=====&gt;"</span>+book);</span><br><span class="line">    IPage&lt;Book&gt; pageBook = bookService.getPage(currentPage,pageSize);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> R(<span class="keyword">null</span> != pageBook ,pageBook);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>对应业务层接口与实现类进行修正</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Book</span>&gt; </span>{</span><br><span class="line">    <span class="function">IPage&lt;Book&gt; <span class="title">getPage</span><span class="params">(Integer currentPage,Integer pageSize,Book queryBook)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl2</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BookDao</span>,<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">IBookService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IPage&lt;Book&gt; <span class="title">getPage</span><span class="params">(Integer currentPage,Integer pageSize,Book queryBook)</span></span>{</span><br><span class="line">        IPage page = <span class="keyword">new</span> Page(currentPage,pageSize);</span><br><span class="line">        LambdaQueryWrapper&lt;Book&gt; lqw = <span class="keyword">new</span> LambdaQueryWrapper&lt;Book&gt;();</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getName()),Book::getName,queryBook.getName());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getType()),Book::getType,queryBook.getType());</span><br><span class="line">        lqw.like(Strings.isNotEmpty(queryBook.getDescription()),Book::getDescription,queryBook.getDescription());</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectPage(page,lqw);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>页面回显数据</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">getAll</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="comment">//1.获取查询条件,拼接查询条件</span></span><br><span class="line">    param = <span class="string">"?name="</span>+<span class="built_in">this</span>.pagination.name;</span><br><span class="line">    param += <span class="string">"&amp;type="</span>+<span class="built_in">this</span>.pagination.type;</span><br><span class="line">    param += <span class="string">"&amp;description="</span>+<span class="built_in">this</span>.pagination.description;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"-----------------"</span>+ param);</span><br><span class="line">    axios.get(<span class="string">"/books/"</span>+<span class="built_in">this</span>.pagination.currentPage+<span class="string">"/"</span>+<span class="built_in">this</span>.pagination.pageSize+param).then(<span class="function">(<span class="params">res</span>) =&gt;</span> {</span><br><span class="line">        <span class="built_in">this</span>.pagination.total = res.data.data.total;</span><br><span class="line">        <span class="built_in">this</span>.pagination.currentPage = res.data.data.current;</span><br><span class="line">        <span class="built_in">this</span>.pagination.pagesize = res.data.data.size;</span><br><span class="line">        <span class="built_in">this</span>.dataList = res.data.data.records;</span><br><span class="line">    });</span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>总结</strong></p><ol><li>定义查询条件数据模型（当前封装到分页数据模型中）</li><li>异步调用分页功能并通过请求参数传递数据到后台</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>黑马瑞吉外卖</title>
      <link href="/2022/09185610.html"/>
      <url>/2022/09185610.html</url>
      
        <content type="html"><![CDATA[<h1 id="软件开发流程"><a href="#软件开发流程" class="headerlink" title="软件开发流程"></a>软件开发流程</h1><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><ul><li><input disabled="" type="checkbox"> <strong>后台系统</strong></li></ul><p>​ 菜品管理（批量删除、起售停售）<br>​ 套餐管理（修改、起售停售）<br>​ 订单明细</p><ul><li><input disabled="" type="checkbox"> <strong>移动端</strong></li></ul><p> 个人中心（退出登录、最新订单查询、历史订单、地址管理-修改地址、地址管理-删除地址）<br> 购物车（删除购物车中的商品)</p><h2 id="详细设计"><a href="#详细设计" class="headerlink" title="详细设计"></a>详细设计</h2><p>在概要设计的基础上，开发者需要进行软件系统的详细设计。在详细设计中，描述实现具体模块所涉及到的主要算法、数据结构、类的层次结构及调用关系，需要说明软件系统各个层次中的每一个程序(每个模块或子程序)的设计考虑，以便进行编码和测试。应当保证软件的需求完全分配给整个软件。详细设计应当足够详细，能够根据详细设计报告进行编码。<br>产品文档，UI界面设计，概要设计，数据库设计</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p>在软件编码阶段，开发者根据《软件系统详细设计报告》中对数据结构、算法分析和模块实现等方面的设计要求，开始具体的编写程序工作，分别实现各模块的功能，从而实现对目标系统的功能、性能、接口、界面等方面的要求。<br>项目代码，单元测试</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>测试编写好的系统。交给用户使用，用户使用后一个一个的确认每个功能。测试同样是项目研发中一个相当重要的步骤，对于一个大型软件，3个月到1年的外部测试都是正常的，因为永远都会有不可预料的问题存在。完成测试后，完成验收并完成最后的一些帮助文档，整体项目才算告一段落，当然日后少不了升级，修补等等工作，只要不是想通过一锤子买卖骗钱，就要不停的跟踪软件的运营状况并持续修补升级，直到这个软件被彻底淘汰为止。</p><h1 id="项目介绍"><a href="#项目介绍" class="headerlink" title="项目介绍"></a>项目介绍</h1><p><a href="https://www.cnblogs.com/KizunaAI/p/16253032.html">https://www.cnblogs.com/KizunaAI/p/16253032.html</a><br>本项目（瑞吉外卖）是专门为餐饮企业(餐厅、饭店)定制的一款软件产品，包括系统管理后台和移动端应用两部分。<br>其中系统管理后台主要提供给餐饮企业内部员工使用，可以对餐厅的菜品、套餐、订单等进行管理维护。</p><p>移动端应用主要提供给消费者使用，可以在线浏览菜品、添加购物车、下单等。</p><p>本项目共分为3期进行开发：<br>第一期主要实现基本需求，其中移动端应用通过H5实现，用户可以通过手机浏览器访问。<br>第二期主要针对移动端应用进行改进，使用微信小程序实现，用户使用起来更加方便。<br>第三期主要针对系统进行优化升级，提高系统的访问性能。</p><h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>用户层,H5,VUE.js,ElementUl,微信小程序<br>网关层Nginx,<br>应用层,Spring,Swagger,lombok,Spring Boot,Spring MVC,Spring Session<br>数据层,Mysql,Mybatis,Mybatis Plus,Redis<br>工具git,,maven,junit</p><h2 id="功能架构"><a href="#功能架构" class="headerlink" title="功能架构"></a>功能架构</h2><h3 id="移动端前台-H5、微信小程序"><a href="#移动端前台-H5、微信小程序" class="headerlink" title="移动端前台(H5、微信小程序"></a>移动端前台(H5、微信小程序</h3><p>手机号登录<br>微信登录<br>地址管理<br>历史订单</p><p>菜品规格<br>购物车<br>下单<br>菜品浏览</p><h3 id="系统管理后台"><a href="#系统管理后台" class="headerlink" title="系统管理后台"></a>系统管理后台</h3><p>分类管理<br>菜品管理<br>套餐管理<br>菜品口味管理<br>员工登录<br>员工退出<br>员工管理<br>订单管理</p><h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h2><p>employee  员工表<br>category  菜品和套餐分类表<br>dish     菜品表<br>setmeal   套餐表<br>setmeal_dish   套餐菜品关系表<br>dish flavor   菜品口味关系表<br>user     用户表(C端)<br>address_book    地址簿表<br>shopping_cart   购物车表<br>orders   订单表<br>order_detail   订单明细表</p><h2 id="设置静态资源映射"><a href="#设置静态资源映射" class="headerlink" title="设置静态资源映射"></a>设置静态资源映射</h2><p>/config/WebMvcConfig.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"开始静态资源映射"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/backend/**"</span>).addResourceLocations(<span class="string">"classpath:/backend/"</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">"/front/**"</span>).addResourceLocations(<span class="string">"classpath:/front/"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="后台登录功能开发"><a href="#后台登录功能开发" class="headerlink" title="后台登录功能开发"></a>后台登录功能开发</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring boot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云计算-OpenStack</title>
      <link href="/2022/091616699.html"/>
      <url>/2022/091616699.html</url>
      
        <content type="html"><![CDATA[<h1 id="OpenStack"><a href="#OpenStack" class="headerlink" title="OpenStack"></a>OpenStack</h1><p>OpenStack是一个云平台管理的项目，它不是一个软件，它是由几个主要的组件组合起来，为公有云、私有云和混合云的建设与管理提供软件的开源项目。现在已经有来自100多个国家的数万名个人和200多家企业参与到OpenStack的开发，如 NASA、华为、谷歌、惠普、Intel、IBM、微软等。这些机构与个人将 OpenStack作为基础设施即服务资源的通用前端。Openstack项目的首要任务是简化云的部署过程并为其带来良好的可扩展性。OpenStack系统或其演变版本目前被广泛应用在各行各业，包括自建私有云、公共云、租赁私有云及混合云，用户包括思科、英特尔、IBM、华为、希捷等，OpenStack 支持 KVM、Xen、Lvc、Docker等虚拟机软件或容器。</p><p>OpenStack从一开始，就是为了云计算服务的。简单来说，它就是一个操作系统，一套软件，一套IaaS软件。</p><p>管理“基础设施资源”，便于用户调用和使用，是OpenStack的首要任务。<br>基础设施资源，主要包括三个方面：计算、存储、网络。说通俗点，就是CPU，硬盘，网卡。</p><p>OpenStack给每个版本都单独取了一个名字</p><h2 id="受欢迎"><a href="#受欢迎" class="headerlink" title="受欢迎"></a>受欢迎</h2><p>OpenStack之所以这么受欢迎，主要原因有三个方面：</p><p>首先是快速。OpenStack安装部署所需要的时间很少，而时间就是价值。</p><p>其次是灵活。OpenStack获得了各大领导厂商的广泛支持，兼容性和适用性极强，使用起来非常方便可靠。</p><p>最后是便宜。作为开源项目，OpenStack的使用成本相对低廉，还能获得源源不断的更新，因为开源社区在为项目贡献活力。</p><p>总而言之，Openstack拥有非常大的发展潜力，目前处于高速发展的上升期。在未来很长一段时间内，这种趋势都不会改变。</p><h2 id="OpenStack能做什么"><a href="#OpenStack能做什么" class="headerlink" title="OpenStack能做什么"></a>OpenStack能做什么</h2><p>OpenStack的主要目标是管理数据中心的资源，简化资源分配。它管理三部分资源，分别是：</p><p>计算资源：OpenStack可以规划并管理大量虚拟机，从而允许企业或服务提供商按需提供计算资源；开发者可以通过API访问计算资源从而创建云应用，管理员与用户则可以通过web访问这些资源；<br>存储资源：OpenStack可以为云服务或云应用提供所需的对象及块存储资源。因为对性能及价格有需求，很多组织已经不能满足于传统的企业级存储技术，因此OpenStack可以根据用户需要提供可配置的对象存储或块存储功能；<br>网络资源：如今的数据中心存在大量的配置工作，如服务器、网络设备、存储设备、安全设备均需要配置，而它们还将被划分成更多的虚拟设备或虚拟网络；这会导致 IP 地址的数量、路由配置、安全规则将爆炸式增长；传统的网络管理技术无法真正的可高扩展、高自动化地管理下一代网络；因而OpenStack 提供了插件式、可扩展、API 驱动型的网络及IP管理功能；</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>网上也有很多手把手进行教学的文档和视频，可以方便新人学习时进行参考。</p><p>推荐几个大咖，大家可以百度找他们的博客来看：陈沙克、何明桂、孔令贤，Cloudman。</p><h2 id="Openstack框架图"><a href="#Openstack框架图" class="headerlink" title="Openstack框架图"></a>Openstack框架图</h2><p>Keystone：认证服务、授权中心，完成用户登录的一致性<br>Nova：提供云主机，nova通过管理libvirtd来启动虚拟机<br>Glance：镜像服务、管理模板<br>Neutron：网络服务，分配ip<br>Cinder：提供块存储服务<br>Ceph：存储<br>Horizon：提供ui，web界面<br>Heat：编排，编排资源的一个工具，一次启动10台云主机<br>Cellometer：监控服务，监控neutron带宽、cinder存储额外的磁盘、快照glance占用空间</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Nova<br>Nova是整个Openstack里面最核心的组件。当初Rackspace和NASA贡献代码时，NASA贡献的那部分就是Nova最早的代码（Rackspace贡献的代码是Swift）。OpenStack云实例生命期所需的各种动作都将由Nova进行处理和支撑，它负责管理整个云的计算资源、网络、授权及测度。</p><p>Keystone<br>Keystone为所有的OpenStack组件提供认证和访问策略服务，主要对（但不限于）Swift、Glance、Nova等进行认证与授权。</p><p>Horizon<br>Horizon是一个用以管理、控制OpenStack服务的Web控制面板。用户可以通过这个界面对OpenStack状态进行查看和管理。</p><h2 id="单节点的OpenStack一体化部署"><a href="#单节点的OpenStack一体化部署" class="headerlink" title="单节点的OpenStack一体化部署"></a>单节点的OpenStack一体化部署</h2><p>RDO的Packstack非常适合使用单一的AIl-in-One（一体化）节点来验证OpenStack云部署。</p><h3 id="创建虚拟机"><a href="#创建虚拟机" class="headerlink" title="创建虚拟机"></a>创建虚拟机</h3><p>在启用或关闭window功能中关闭Hyper-v<br>打开Windows安全中心&gt;设备安全性&gt;内核隔离，关闭了内核隔离</p><p>建议采用16GB内存，使用8GB也能运行。<br>CPU双核且支持虚拟化。如InterVT或AMD V技术<br>硬盘不低于200GB.<br>网卡（网络适配器）以桥接模式接入主机（物理机）网络。</p><h3 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h3><h4 id="1-设置静态ip-192-168-88-140"><a href="#1-设置静态ip-192-168-88-140" class="headerlink" title="1.设置静态ip(192.168.88.140)"></a>1.设置静态ip(192.168.88.140)</h4><h4 id="2-关闭网络管理器"><a href="#2-关闭网络管理器" class="headerlink" title="2.关闭网络管理器"></a>2.关闭网络管理器</h4><p>CentOS7网络默认由NetworkManager（网络管理器）负责管理，但是NetworkManager与OpenStack网络组件Neutron有冲突，应停用它，改用传统的网络服务Network来管理网络。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 停止网络管理器服务</span></span><br><span class="line">systemctl stop NetworkManager</span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭网络管理器开机自启动</span></span><br><span class="line">systemctl disable NetworkManager</span><br></pre></td></tr></tbody></table></figure><h4 id="3-关闭防火墙"><a href="#3-关闭防火墙" class="headerlink" title="3.关闭防火墙"></a>3.关闭防火墙</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="4-关闭SELinux"><a href="#4-关闭SELinux" class="headerlink" title="4.关闭SELinux"></a>4.关闭SELinux</h4><p>编辑/etc/selinux/config文件，将“SELINUX”的值设置为“disabled”，重启系统使禁用SELinux<br>生效。</p><h2 id="devstack搭建"><a href="#devstack搭建" class="headerlink" title="devstack搭建"></a>devstack搭建</h2><p><a href="https://zhuanlan.zhihu.com/p/440120871">https://zhuanlan.zhihu.com/p/440120871</a></p><p>devstack：OpenStack为入门者和开发者推出了一个OpenStack开发环境：devstack。通过devstack，你可以在一个主机节点上部署一个“五脏俱全”的OpenStack Cloud。</p><p>Github: <a href="https://github.com/openstack-dev/devstack">https://github.com/openstack-dev/devstack</a></p><p>Wiki: <a href="https://wiki.openstack.org/wiki">https://wiki.openstack.org/wiki</a></p><h2 id="Rdo搭建"><a href="#Rdo搭建" class="headerlink" title="Rdo搭建"></a>Rdo搭建</h2><p>红帽推出了OpenStack的快捷安装部署项目，这个项目就是RDO。RDO项目的原理是整合上游的OpenStack版本，然后根据红帽的系统做裁剪和定制，帮助用户进行选择，对用户来说，就是简单的几步，完成了OpenStack的部署。</p><p>Docs：<a href="https://www.rdoproject.org/install/">https://www.rdoproject.org/install/</a></p><h2 id="手动部署"><a href="#手动部署" class="headerlink" title="手动部署"></a>手动部署</h2><p>手动部署all-in-one、multi-node、multi-HA-node环境。</p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenStack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据格式</title>
      <link href="/2022/091525750.html"/>
      <url>/2022/091525750.html</url>
      
        <content type="html"><![CDATA[<h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>• XML是指可扩展标记语言(Xtensible Markup Language),它是一种标记语言，html是用于显示数据，xml主要功能是为了存储数据，xml也可以显示数据（不是主要功能)<br>• XML标签没有被预定义，需要用户自行定义标签。</p><p>XML的应用<br>1.不同的系统之间传输数据</p><p>2.用来表示生活中有关系的数据</p><p>3.经常用在配置文件<br>    例如现在连接数据库知道数据库的用户名和密码，数据名称，修改数据库的信息，不需要修改源代码，只要修改配置文件就可以了</p><h2 id="JSON语言"><a href="#JSON语言" class="headerlink" title="JSON语言"></a>JSON语言</h2><p>在开发中凡是涉及到『跨平台数据传输』，JSON格式一定是首选</p><p>JSON（JavaScript Object Notation，即JS对象标记）是一种轻量级的数据交换语言，该语言以易于让人阅读的文字（纯文本）为基础，用来传输由属性值或者序列性的值组成的数据对象。尽管JSON是最初只是Javascript中一种创建对象的字面量语法，但它在当下更是一种独立于语言的数据格式，很多编程语言都支持JSON格式数据的生成和解析，Python内置的json模块也提供了这方面的功能。由于JSON是纯文本，它和<a href="https://zh.wikipedia.org/wiki/XML">XML</a>一样都适用于异构系统之间的数据交换，而相较于XML，JSON显得更加的轻便和优雅。下面是表达同样信息的XML和JSON，而JSON的优势是相当直观的。</p><p>它是基于 ECMAScript （欧洲计算机协会制定的js规范）的一个子集，从JavaScript脚本语言中演变而来的，采用完全独立于编程语言的文本格式来存储和表示数据。由于JSON有简洁、清晰的层次结构，因此使得JSON成为理想的数据交换语言。JSON易于程序开发者阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输的效率。</p><p>XML的例子：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">from</span>&gt;</span>Alice<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">to</span>&gt;</span>Bob<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">content</span>&gt;</span>Will you marry me?<span class="tag">&lt;/<span class="name">content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>JSON的例子：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"from"</span>: <span class="string">"Alice"</span>,</span><br><span class="line">    <span class="attr">"to"</span>: <span class="string">"Bob"</span>,</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"Will you marry me?"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="JSON格式定义"><a href="#JSON格式定义" class="headerlink" title="JSON格式定义"></a>JSON格式定义</h3><p>{}定义JSON对象<br>[]定义JSON数组</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// JSON对象的格式是：</span></span><br><span class="line">{key:value,key:value,...,key:value}</span><br><span class="line"></span><br><span class="line"><span class="comment">// JOSN数组的格式是：</span></span><br><span class="line">[value,value,...,value]</span><br></pre></td></tr></tbody></table></figure><p>key的类型固定是字符串<br>value的类型可以是：<br>基本数据类型<br>引用类型：JSON对象或JSON数组</p><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>后缀使用.yml或者.yaml都行</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>易阅读<br>易于脚本语言交互<br>以数据为核心，重数据轻格式</p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>1.大小写敏感<br>2.属性层级关系使用多行描述，每行结尾使用冒号结束<br>3.使用缩进表示层级关系，同层级左侧对齐，只允许使用空格(不允许使用Tab键)<br>4.属性值前面添加空格(属性名与属性值之间使用冒号+空格作为分隔)<br>5.#表示注释<br>6.使用” “括住的内容可以使用转义字符</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>用$进行变量引用<br>path: c:\user\bin</p><p>temp: ${path}\temp</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean:</span> <span class="literal">TRUE</span>                        <span class="comment">#TRUE,true,True,FALSE,false，False均可</span></span><br><span class="line"><span class="attr">float:</span> <span class="number">3.14</span>                            <span class="comment">#6.8523015e+5  #支持科学计数法</span></span><br><span class="line"><span class="attr">int:</span> <span class="number">123</span>                            <span class="comment">#0b1010_0111_0100_1010_1110    #支持二进制、八进制、十六进制</span></span><br><span class="line"><span class="attr">null:</span> <span class="string">~</span>                                <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span> <span class="string">HelloWorld</span>                <span class="comment">#字符串可以直接书写</span></span><br><span class="line"><span class="attr">string2:</span> <span class="string">"Hello World"</span>            <span class="comment">#可以使用双引号包裹特殊字符</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018-02-17</span>                    <span class="comment">#日期必须使用yyyy-MM-dd格式</span></span><br><span class="line"><span class="attr">datetime:</span> <span class="number">2018-02-17T15:02:31+08:00</span>  <span class="comment">#时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h4><p>键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)</p><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><p>一组按次序排列的值，又称为序列(sequence) / 列表(list)</p><p>使用一个短横线+一个空格代表一个数组项：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subject:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">subject:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">likes:</span> [ <span class="string">王者荣耀</span>,<span class="string">刺激战场</span> ]            <span class="comment">#数组书写缩略格式</span></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式一</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users:</span> <span class="comment">#对象数组格式二</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">4</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jerry</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">users2:</span> [ { <span class="string">name:Tom</span> , <span class="string">age:4</span> } , { <span class="string">name:Jerry</span> , <span class="string">age:5</span> } ]    <span class="comment">#对象数组缩略格式</span></span><br></pre></td></tr></tbody></table></figure><h4 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h4><p>(scalars)：单个的、不可再分的值</p><h3 id="读取yml数据"><a href="#读取yml数据" class="headerlink" title="读取yml数据"></a>读取yml数据</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">lesson:</span> <span class="string">SpringBoot</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br><span class="line"><span class="attr">enterprise:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">itcast</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">16</span></span><br><span class="line">  <span class="attr">tel:</span> <span class="number">4006184000</span></span><br><span class="line">  <span class="attr">subject:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">Java</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">前端</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">大数据</span></span><br><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><h4 id="读取单个数据"><a href="#读取单个数据" class="headerlink" title="读取单个数据"></a>读取单个数据</h4><p>使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Value("${lesson}")</span></span><br><span class="line">    <span class="keyword">private</span> String lessonName;</span><br><span class="line">    <span class="meta">@Value("${server.port}")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="meta">@Value("${enterprise.subject[1]}")</span></span><br><span class="line">    <span class="keyword">private</span> String[] subject_01;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在配置文件中可以使用属性名引用方式引用属性</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">baseDir:</span> <span class="string">/usr/local/fire</span></span><br><span class="line"><span class="attr">center:</span></span><br><span class="line">  <span class="attr">dataDir:</span> <span class="string">${baseDir}/data</span></span><br><span class="line">  <span class="attr">tmpDir:</span> <span class="string">${baseDir}/tmp</span></span><br><span class="line">  <span class="attr">logDir:</span> <span class="string">${baseDir}/log</span></span><br><span class="line">  <span class="attr">msgDir:</span> <span class="string">${baseDir}/msgDir</span></span><br></pre></td></tr></tbody></table></figure><p> 属性值中如果出现转移字符，需要使用双引号包裹<br><code>lesson: "Spring\tboot\nlesson"</code></p><h4 id="读取全部数据"><a href="#读取全部数据" class="headerlink" title="读取全部数据"></a>读取全部数据</h4><p>封装全部数据到Environment对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span>   <span class="comment">//自动装配数据到Environment对象中</span></span><br><span class="line">    <span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> </span>{</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">"lesson"</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">"enterprise.name"</span>));</span><br><span class="line">        System.out.println(env.getProperty(<span class="string">"enterprise.subject[0]"</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello , spring boot!"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="读取指定数据"><a href="#读取指定数据" class="headerlink" title="读取指定数据"></a>读取指定数据</h4><p>自定义对象封装指定数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "enterprise")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Enterprise</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Enterprise enterprise;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="电子书格式"><a href="#电子书格式" class="headerlink" title="电子书格式"></a>电子书格式</h2><p>EPUB （英语：Electronic Publication，电子出版物）是一种电子图书标准，由国际数字出版论坛（IDPF）提出，常见的电子书格式之一，市面上大部分的阅读设备和软件都支持 epub 格式 （除了 Kindle）。EPub 是一个自由的开源标准，是一种富文本格式，可以自动重新排版，也就是文字内容可以根据阅读设备的特性，以最适于阅读的方式显示。所以我们把 .epub 格式作为第一选择。</p><p>PDF（英语：Portable Document Format，便携式文档格式）是一种用独立于应用程序、硬件、操作系统的方式呈现文档的文件格式。是一种富文本格式。独立特性使得 PDF 成为最通用的电子书格式，可以在大屏设备上很方便地阅读而不用担心信息遗失或遭修改。但这也意味着不可重排，所以不太适合小屏设备阅读。所以我们把 .pdf 格式作为第二选择。</p><p>mobi, azw(3)：亚马逊电子书私有格式，是富文本格式，Kindle 阅读器支持以上三种格式。本着开源与自由的精神，不推荐这些格式。</p><p>txt：最简单的的文本，非富文本格式。由于功能单一，不推荐这一格式。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据格式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据-数据采集和清洗</title>
      <link href="/2022/091540050.html"/>
      <url>/2022/091540050.html</url>
      
        <content type="html"><![CDATA[<h1 id="Kettle工具"><a href="#Kettle工具" class="headerlink" title="Kettle工具"></a>Kettle工具</h1><p>Kettle是一款国外免费开源的轻量级ETL工具，是基于Java语言开发的，可以在Windows、Linux、Unix系统上运行，并且是绿色无需安装的，它可以用于各种数据库之间数据的迁移。<br>Kettle的中文名称为水壶，其设计理念是主程序员Matt希望将来自不同数据库中的数据放到一个壶里，然后以一种指定的格式流出（即按照用户要求的格式进行输出）。Kettle支持管理来自不同数据库的的数据，通过提供一个图形化的用户环境来描述用户想要做什么，而不是用户想要怎么做。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>下载Kettle安装包：下载地址<a href="https://sourceforge.net/projects/pentaho/files/Data%20Integration/">https://sourceforge.net/projects/pentaho/files/Data%20Integration/</a>。</p><p>安装Kettle：由于Kettle工具是绿色无需安装的，因此我们只要解压下载的Kettle工具pdi-ce-8.2.0.0-342.zip即可。</p><p>由于Kettle工具是运行在JVM平台上的，所以安装Kettle之前必须配置好JDK环境，（需要注意的是Kettle版本和JDK版本的兼容性）。<br>最好是jdk8</p><p>配置Kettle：将Java和Kettle的安装路径都添加至系统环境变量；将数据库驱动添加至Kettle安装包下的lib文件夹下。</p><p>启动Kettle：双击Kettle安装目录下的Spoon.bat脚本，启动Kettle。</p><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>Kettle工具主要是由四个组件组成，分别是Spoon、Pan、Kitchen及Carte组件，具体功能介绍如下：</p><p>Spoon是Kettle的集成开发环境，它会提供一个基于SWT的图形用户界面，主要用于构建ETL Jobs和Transformtions，也可以用于执行或调试作业、转换，还可以用于监控ETL操作的性能。</p><p>Pan是以命令行的方式执行Spoon生成的Transformtions程序，运行在后台，并且该组件没有图形化用户界面。</p><p>Kitchen是以命令行的方式执行Spoon生成的Jobs程序，运行在后台，并且该组件没有图形化用户界面。</p><p>Carte是Kettle中的一个重要组件，基于Jetty的轻量级HTTP服务器，运行在后台，用于远程监控HTTP执行Jobs和Transformtions的进度。</p><h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p>Kettle工具的执行分为两个层次，即转换和作业，这两个层次的最主要区别在于数据传递和执行方式</p><p>转换是ETL解决方案中重要的组成部分之一，它主要用于数据的抽取、转换以及加载等操作，其本质是一组图形化的数据转换配置的逻辑结构。一个转换包括一个或多个步骤，例如读取文件、过滤输出行、数据清洗或将数据加载到数据库中等步骤。转换中的步骤是通过跳来连接的，跳定义了一个单向通道，允许数据从一个步骤向另一个步骤流动。在Kettle中，数据的单位是行，数据流就是数据行从一个步骤到另一个步骤的移动。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>步骤是转换里的基本组成部分，也可被称为控件。步骤是以图标的方式展现。例如“表输入”步骤、“文本文件输出”等步骤。<br>Kettle转换中的步骤按功能分类可以分为输入类、输出类、操作类以及脚本类等，每一个步骤都完成一种特定的功能。例如，“表输入”步骤主要用于向关系型数据库的数据表发出一个SQL查询，并将得到的数据行写到它的输出跳中，“文本文件输出”步骤主要用于从它的输入跳读取数据行，并将数据行写到文本文件中。</p><h3 id="跳"><a href="#跳" class="headerlink" title="跳"></a>跳</h3><p>跳是步骤之间带箭头的连接线，即数据的通道，用于连接两个步骤，实现将元数据从一个步骤传递到另一个步骤，支持分发和复制方式。需要注意的是，由于每个步骤都是单独线程，当启动转换时，每个步骤都会创建各自线程并接收和推送传递数据，因此数据处理的顺序并不是按照节点连接箭头的顺序来执行的。<br>实际上，跳是两个步骤之间的被称为行集（Row Set）的数据行缓存。若行集满了，则向行集写数据的步骤将停止写入，直到行集里又有空间。若行集空了，则从行集读取数据的步骤就会停止读取，直到行集里又有可读取的数据行。</p><h2 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h2><p>目前，大多数的ETL项目都需要完成各种各样的维护工作。例如，如何传送文件、验证数据库中的数据表是否存在等操作，这些操作都必须按照一定顺序完成，由于转换是以并行方式执行的，因此需要一个可以串行执行的作业来处理这些操作。<br>一个作业包含一个或者多个作业项，并且这些作业项都是以某种顺序来进行执行的。作业执行的顺序由作业项之间的跳（Job Hop）和每个作业项的执行结果来决定。</p><h2 id="数据抽取"><a href="#数据抽取" class="headerlink" title="数据抽取"></a>数据抽取</h2><p>数据抽取主要是从一个或多个数据源中获取所需的数据。数据抽取的数据源可以是文本数据、Web数据以及数据库数据</p><h3 id="TSV文件的抽取"><a href="#TSV文件的抽取" class="headerlink" title="TSV文件的抽取"></a>TSV文件的抽取</h3><p>TSV是Tab-separated values的缩写，即制表符分隔值。使用制表符分隔数据字段的文件被称为制表符文件。制表符文件中的数据以表格结构储存，每一行储存一条记录，每条记录的各个字段间使用制表符分隔。大多数的操作系统和常用文本编辑器中，按一次“Tab”键表示默认插入一个制表符。</p><p>现有一个名为tsv_extract.tsv的TSV文件<br>通过使用Kettle工具，创建一个转换tsv_extract，添加“文本文件输入”控件、“表输出”控件以及Hop跳连接线</p><h4 id="配置文本文件输入控件"><a href="#配置文本文件输入控件" class="headerlink" title="配置文本文件输入控件"></a>配置文本文件输入控件</h4><p>双击“文本文件输入”控件，进入“文本文件输入”界面<br>单击【浏览】按钮，选择要抽取的文件tsv_extract.tsv。<br>单击【增加】按钮，将要抽取的TSV文件添加到转换“tsv_extract”中。<br>单击“内容”选项卡，清除分隔符处默认分隔符“；”并单击【Insert TAB】按钮，在分隔符处插入一个制表符；取消勾选“头部”复选框。<br>单击“字段”选项卡，<strong>获取字段</strong>，<br>单击【预览记录】按钮，查看文件tsv_extract.tsv的数据是否成功抽取到文本文件输入流中</p><h4 id="配置表输出控件"><a href="#配置表输出控件" class="headerlink" title="配置表输出控件"></a>配置表输出控件</h4><p>双击“表输出”控件，进入“表输出”控件的配置界面。<br>单击【新建】按钮，配置数据库连接，配置完成后单击【确认】按钮。<br>单击目标表右侧的【浏览】按钮，获取目标表，即数据表tsv。<br>勾选“指定数据库字段”复选框。<br>单击“数据库字段”选项卡,再单击【输入字段映射】按钮，弹出“映射匹配”对话框,将“源字段”选项框的字段和“目标字段”选项框对应的字段进行映射匹配。</p><h2 id="抽取Web数据"><a href="#抽取Web数据" class="headerlink" title="抽取Web数据"></a>抽取Web数据</h2><p>抽取Web数据主要是获取网页上的数据。Web网页上出现的数据形式主要有三种，分别是HTML形式、XML形式以及JSON形式。</p><h2 id="JSON文件的数据抽取"><a href="#JSON文件的数据抽取" class="headerlink" title="JSON文件的数据抽取"></a>JSON文件的数据抽取</h2>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据采集和清洗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据-Hadoop</title>
      <link href="/2022/091349020.html"/>
      <url>/2022/091349020.html</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Hadoop是一个开源的分布式框架，允许使用简单的编程模型在跨计算机集群的分布式环境中存储和处理大数据。它的设计是从单个服务器扩展到数千个机器，每个都提供本地计算和存储。可利用服务器集群，根据用户的自定义业务逻辑，对海量数据进行分布式计算</p><p>广义上说，Hadoop是一个更广泛的概念–Hadoop生态圈，包括Hadoop,Hive,HBase,Flume,Kafka，Sqoop,Spark,Flink</p><h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>适合<br>大规模数据<br>流式数据（写一次，读多次）<br>商用硬件（一般硬件）<br>不适合<br>低延时的数据访问<br>大量的小文件<br>频繁修改文件（基本就是写1次）</p><h3 id="Hadoop架构"><a href="#Hadoop架构" class="headerlink" title="Hadoop架构"></a>Hadoop架构</h3><p>HDFS: 分布式文件存储系统:<br>YARN: 分布式资源管理：负责作业调度与集群资源管理的框架<br>MapReduce: 分布式计算：基于YARN系统的分布式离线并行计算框架<br>Others: 利用YARN的资源管理功能实现其他的数据处理方式</p><h3 id="hadoop目录结构"><a href="#hadoop目录结构" class="headerlink" title="hadoop目录结构"></a>hadoop目录结构</h3><p>bin:Hadoop相关服务(HDFS,YARN)的操作脚本存放在这，但是通常使用的脚本在sbin目录<br>sbin:hadoop管理脚本存放在此目录下，主要包含HDFS，YARN中各类服务的启动和关闭脚本<br>etc:放置配置文件</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><h3 id="设置静态ip"><a href="#设置静态ip" class="headerlink" title="设置静态ip"></a>设置静态ip</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ifconfig   #查看网络</span><br><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33    #编辑网卡配置文件</span><br></pre></td></tr></tbody></table></figure><p>参考配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DEFROUTE="yes"</span><br><span class="line">IPV4_FAILURE_FATAL="no"</span><br><span class="line">IPV6INIT="yes"</span><br><span class="line">IPV6_AUTOCONF="yes"</span><br><span class="line">IPV6_DEFROUTE="yes"</span><br><span class="line">IPV6_FAILURE_FATAL="no"</span><br><span class="line">IPV6_ADDR_GEN_MODE="stable-privacy"</span><br><span class="line">NAME="ens33"</span><br><span class="line">UUID="f59f2104-66d4-42a3-9302-996c5b8c261b"</span><br><span class="line">DEVICE="ens33"</span><br><span class="line">ONBOOT="yes"</span><br><span class="line">TYPE="Ethernet"</span><br><span class="line">PROXY_METHOD="none"</span><br><span class="line">BROWSER_ONLY="no"</span><br><span class="line">BOOTPROTO="static"       #static表示静态IP</span><br><span class="line">IPADDR=192.168.212.133   #配置IP地址 </span><br><span class="line">NETMASK=255.255.255.0    #配置子网掩码</span><br><span class="line">GATEWAY=192.168.212.2     #配置网关,一般是ip地址最后一位改为2</span><br><span class="line">DNS1=8.8.8.8             #配置DNS服务器地址，8.8.8.8是谷歌免费的DNS服务器</span><br></pre></td></tr></tbody></table></figure><p>service network restart  #重启网络服务</p><h3 id="centos7关闭防火墙"><a href="#centos7关闭防火墙" class="headerlink" title="centos7关闭防火墙"></a>centos7关闭防火墙</h3><p>（所有虚拟机都要操作）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state  #查看防火墙信息</span><br><span class="line">systemctl stop firewalld    #关闭防火墙</span><br><span class="line">systemctl disable firewalld   #关闭防火墙开机启动</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">systemctl start firewalld  #开启防火墙</span><br><span class="line">systemctl enable firewalld  #开启防火墙开机启动</span><br></pre></td></tr></tbody></table></figure><h3 id="Linux中主机名与ip映射"><a href="#Linux中主机名与ip映射" class="headerlink" title="Linux中主机名与ip映射"></a>Linux中主机名与ip映射</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">配置文件改主机名</span></span><br><span class="line">vi /etc/sysconfig/network   </span><br><span class="line">加入HOSTNAME=master</span><br><span class="line"></span><br><span class="line">hostnamectl set-hostname 主机名</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在ip映射文件hosts编辑</span></span><br><span class="line">vi /etc/hosts</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">加入</span></span><br><span class="line">192.168.88.130 master</span><br><span class="line">192.168.88.131 slave1</span><br><span class="line">192.168.88.132 slave2</span><br></pre></td></tr></tbody></table></figure><p>在将要搭建的集群主机都配置主机名和ip映射<br>在master中分发出去<br>scp /etc/hosts slave1:/etc/hosts<br>scp /etc/hosts slave2:/etc/hosts</p><h3 id="在宿主机window添加主机名与ip映射"><a href="#在宿主机window添加主机名与ip映射" class="headerlink" title="在宿主机window添加主机名与ip映射"></a>在宿主机window添加主机名与ip映射</h3><p>打开window下的C:\Windows\System32\drivers\etc打开hosts文件，在文件末添加三行代码：<br>192.168.88.130 master<br>192.168.88.131 slave1<br>192.168.88.132 slave2</p><h3 id="ssh服务配置免密登录"><a href="#ssh服务配置免密登录" class="headerlink" title="ssh服务配置免密登录"></a>ssh服务配置免密登录</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa </span><br><span class="line"><span class="meta">#</span><span class="bash"> 秘钥生成后在~/.ssh/目录下，有两个文件id_rsa(私钥)和id_rsa.pub（公钥）</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将公钥复制到authorized_keys并赋予authorized_keys600权限</span></span><br><span class="line">cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">到每个虚拟机都复制将本机公钥文件复制到其它虚拟机上（接收方需先开机）</span></span><br><span class="line">ssh-copy-id slave1</span><br><span class="line">ssh-copy-id slave2</span><br><span class="line">ssh-copy-id master</span><br><span class="line"></span><br><span class="line">logout  #退出ssh连接</span><br></pre></td></tr></tbody></table></figure><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><h2 id="搭建Hadoop集群"><a href="#搭建Hadoop集群" class="headerlink" title="搭建Hadoop集群"></a>搭建Hadoop集群</h2><h3 id="集群规划"><a href="#集群规划" class="headerlink" title="集群规划"></a>集群规划</h3><p>安装VMware，使用三台虚拟机进行集群搭建，下面是每台虚拟机的规划：<br>| 主机名  | IP             | 用户      | HDFS                       | YARN                        |<br>|——–|—————- |———|—————————-|—————————–|<br>| master | 192.168.88.130  | rmc0924 | NameNode、DataNode          | NodeManager、ResourceManager |<br>| slave1 | 192.168.88.131  | rmc0924 | DataNode、SecondaryNameNode | NodeManager                 |<br>| slave2 | 192.168.88.132  | rmc0924 | DataNode                   | NodeManager                 |</p><h3 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h3><p>将安装包放到/root</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf /root/hadoop-2.9.1.tar.gz -C /usr/local   #解压并放到/usr/local </span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile     #配置环境变量</span><br><span class="line"><span class="meta">#</span><span class="bash">加入</span></span><br><span class="line">export HADOOP_HOME=/usr/local/hadoop-2.9.1</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$HADOOP_HOME/bin:$HADOOP_HOME/sbin</span><br><span class="line"></span><br><span class="line">source /etc/profile   #重新加载</span><br><span class="line"></span><br><span class="line">hadoop version</span><br></pre></td></tr></tbody></table></figure><h3 id="配置Hadoop集群主节点"><a href="#配置Hadoop集群主节点" class="headerlink" title="配置Hadoop集群主节点"></a>配置Hadoop集群主节点</h3><p><a href="https://blog.csdn.net/qq_38358709/article/details/84347158">https://blog.csdn.net/qq_38358709/article/details/84347158</a><br>以下操作确保在你安装的Hadoop目录下</p><h4 id="hadoop-env-sh"><a href="#hadoop-env-sh" class="headerlink" title="hadoop-env.sh"></a>hadoop-env.sh</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/hadoop-2.9.1/etc/hadoop/hadoop-env.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">修改Java环境变量</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.x86_64  </span><br><span class="line"></span><br><span class="line">source /usr/local/hadoop-2.9.1/etc/hadoop/hadoop-env.sh   #重新加载</span><br></pre></td></tr></tbody></table></figure><h4 id="yarn-env-sh"><a href="#yarn-env-sh" class="headerlink" title="yarn-env.sh"></a>yarn-env.sh</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/hadoop-2.9.1/etc/hadoop/yarn-env.sh </span><br><span class="line">#配置java路径</span><br></pre></td></tr></tbody></table></figure><h4 id="core-site-xml"><a href="#core-site-xml" class="headerlink" title="core-site.xml"></a>core-site.xml</h4><p>hadoop核心配置文件：用于配置HDFS地址，端口号，临时目录<br>vi /usr/local/hadoop-2.9.1/etc/hadoop/core-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 指定文件系统的名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://master:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置Hadoop运行时产生的临时数据存储目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/tmp/hadoop-master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置操作HDFS的缓存大小 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>io.file.buffer.size<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="hdfs-site-xml"><a href="#hdfs-site-xml" class="headerlink" title="hdfs-site.xml"></a>hdfs-site.xml</h4><p>vi /usr/local/hadoop-2.9.1/etc/hadoop/hdfs-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置HDFS块的副本数(全分布式默认副本数为3，最大512) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>salve1:50090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用于确定将HDFS文件系统的元信息保存在什么目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.namenode.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/name<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个参数用于确定将HDFS文件系统的数据保存在什么目录下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.datanode.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>file:/usr/local/hadoop/tmp/dfs/data<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="mapred-site-xml"><a href="#mapred-site-xml" class="headerlink" title="mapred-site.xml"></a>mapred-site.xml</h4><p>mapred-site.xml:用来指定mapreduce运行框架，mapreduce相关配置文件（目录下默认没有该文件，需要先执行命令cp mapred-site.xml.template mapred-site.xml ）</p><p>vi /usr/local/hadoop-2.9.1/etc/hadoop/mapred-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定mapreduce运行框架 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>指定mapreduce使用yarn框架<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master.hadoop.com:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>master.hadoop.com:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title="yarn-site.xml"></a>yarn-site.xml</h4><p>vi /usr/local/hadoop-2.9.1/etc/hadoop/yarn-site.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 指定启动YARN的ResourceManager服务的主机--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>指定resourcemanager所在的hostname<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--     NodeManager上运行的附属服务。配置成mapreduce_shuffle，才可运行MapReduce程序 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>master.hadoop.com<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>    </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>${yarn.resourcemanager.hostname}:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.scheduler.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>${yarn.resourcemanager.hostname}:8030<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>${yarn.resourcemanager.hostname}:8088<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.webapp.https.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>${yarn.resourcemanager.hostname}:8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.resource-tracker.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>${yarn.resourcemanager.hostname}:8031<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.admin.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>${yarn.resourcemanager.hostname}:8033<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.local-dirs<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>app/data/hadoop/yarn/local<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log-aggregation-enable<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.remote-app-log-dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>app/data/tmp/logs<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">value</span>&gt;</span>http://master.hadoop.com:19888/jobhistory/logs/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">description</span>&gt;</span>URL for job history server<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.vmem-check-enabled<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.minimum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>512<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span>   </span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.scheduler.maximum-allocation-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>4096<span class="tag">&lt;/<span class="name">value</span>&gt;</span>  </span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.map.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.reduce.memory.mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>2048<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.cpu-vcores<span class="tag">&lt;/<span class="name">name</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span> </span><br><span class="line"> <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="配置slaves"><a href="#配置slaves" class="headerlink" title="配置slaves"></a>配置slaves</h4><p>打开hadoop目录下的slaves或者works（Centos7下为works），去掉localhost，加入从节点名<br>vi /usr/local/hadoop-2.9.1/etc/hadoop/slaves</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave1</span><br><span class="line">slave2</span><br></pre></td></tr></tbody></table></figure><h4 id="将集群主节点的配置文件分发到其他节点"><a href="#将集群主节点的配置文件分发到其他节点" class="headerlink" title="将集群主节点的配置文件分发到其他节点"></a>将集群主节点的配置文件分发到其他节点</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">scp /etc/profile qf02:/etc/profile</span><br><span class="line">scp /etc/profile qf03:/etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 分发hadoop</span></span><br><span class="line">scp -r /usr/local/hadoop-2.9.1 slave1:/usr/local/</span><br><span class="line">scp -r /usr/local/hadoop-2.9.1 slave2:/usr/local/</span><br><span class="line"></span><br><span class="line">source /etc/profile   #在qf02,qf03分别执行</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只分发hadoop配置文件</span></span><br><span class="line">scp -r /usr/local/hadoop-2.9.1/etc/hadoop slave1:/usr/local/hadoop-2.9.1/etc/hadoop</span><br><span class="line">scp -r /usr/local/hadoop-2.9.1/etc/hadoop slave2:/usr/local/hadoop-2.9.1/etc/hadoop</span><br></pre></td></tr></tbody></table></figure><h2 id="hadoop集群测试"><a href="#hadoop集群测试" class="headerlink" title="hadoop集群测试"></a>hadoop集群测试</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>如果是第一次启动，需要在主节点节点格式化文件系统，</p><p>hdfs namenode -format</p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>启动HDFS<br>cd /usr/local/hadoop-2.9.1/sbin<br>start-dfs.sh</p><h1 id="在主节点启动所有yarn服务进程"><a href="#在主节点启动所有yarn服务进程" class="headerlink" title="在主节点启动所有yarn服务进程"></a>在主节点启动所有yarn服务进程</h1><p>start-yarn.sh</p><h3 id="访问web管理"><a href="#访问web管理" class="headerlink" title="访问web管理"></a>访问web管理</h3><p>查看HDFS集群状态<br>通过UI界面查看Hadoop运行状态，在Windows系统下，访问<a href="http://master:50070/">http://master:50070</a></p><p>查看Yarn集群状态<br>在Windows系统下，访问<a href="http://master:8088/">http://master:8088</a></p><h3 id="关闭集群"><a href="#关闭集群" class="headerlink" title="关闭集群"></a>关闭集群</h3><p>./sbin/stop-yarn.sh<br>./sbin/stop-dfs.sh<br>./sbin/mr-jobhistory-daemon.sh stop historyserver</p><h1 id="HDFS操作"><a href="#HDFS操作" class="headerlink" title="HDFS操作"></a>HDFS操作</h1><p>上面配置过sbin和bin的环境变量，则可以在任意的路径下可直接使用hdfs，否则需要进入hadoop安装路径HADOOP_HOME后，使用如下<br>HADOOP_HOME/bin<br>HADOOP_HOME/sbin</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> sbin</span></span><br><span class="line">start-dfs.sh    #启动hdfs分布式系统</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./bin/hdfs dfs   #查看hdfs dfs总共支持哪些操作</span><br><span class="line"></span><br><span class="line">./bin/hdfs dfs –help put   #查询put命令的具体用法</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="hdfs目录操作"><a href="#hdfs目录操作" class="headerlink" title="hdfs目录操作"></a>hdfs目录操作</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">./bin/hdfs dfs –mkdir –p /user/hadoop    #HDFS中创建用户目录</span><br><span class="line"></span><br><span class="line">./bin/hdfs dfs –ls .  #显示HDFS中与当前用户hadoop对应的用户目录下的内容</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./bin/hdfs dfs –ls  #列出HDFS上的所有目录</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建一个input目录</span></span><br><span class="line">./bin/hdfs dfs –mkdir -p input</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> HDFS的根目录下创建一个名称为input的目录</span></span><br><span class="line">./bin/hdfs dfs –mkdir -p /input</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除在HDFS中创建的“/input”目录</span></span><br><span class="line">./bin/hdfs dfs –rm –r /input</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">上传文件</span></span><br><span class="line">./bin/hdfs dfs -put /home/hadoop/myLocalFile.txt  input</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看文件内容</span></span><br><span class="line">./bin/hdfs dfs –cat input/myLocalFile.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">将上面的myLocalFile.txt下载到本地/home目录下</span></span><br><span class="line">./bin/hdfs dfs -get input/myLocalFile.txt  /home</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把文件从HDFS中的一个目录拷贝到HDFS中的另外一个目录</span></span><br><span class="line">./bin/hdfs dfs -cp input/myLocalFile.txt  /input</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autojs-Node.js</title>
      <link href="/2022/090561402.html"/>
      <url>/2022/090561402.html</url>
      
        <content type="html"><![CDATA[<h1 id="Autojs-Node-js"><a href="#Autojs-Node-js" class="headerlink" title="Autojs-Node.js"></a>Autojs-Node.js</h1><h2 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"nodejs"</span><span class="token keyword">const</span> <span class="token punctuation">{</span> showToast <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'toast'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">showToast</span><span class="token punctuation">(</span><span class="token string">'Hello world!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//Toast气泡信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="accessibility模块"><a href="#accessibility模块" class="headerlink" title="accessibility模块"></a>accessibility模块</h2><p>back<br>click<br>clickText<br>currentPackage<br>home<br>inputText<br>lockScreen<br>longClick<br>openNotifications<br>openQuickSettings<br>performGesture<br>performGestures<br>performGlobalAction<br>press<br>scrollBackward<br>scrollForward<br>select<br>sendKeyCodeHeadsethook<br>setText<br>showLauncherAllApps<br>swipe<br>takeScreenshot<br>togglePowerDialog<br>toggleRecents<br>toggleSplitScreen<br>triggerAccessibilityButton<br>triggerAccessibilityShortcut</p>]]></content>
      
      
      <categories>
          
          <category> Autojs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合和泛型</title>
      <link href="/2022/090214184.html"/>
      <url>/2022/090214184.html</url>
      
        <content type="html"><![CDATA[<h1 id="Java容器-集合"><a href="#Java容器-集合" class="headerlink" title="Java容器/集合"></a>Java容器/集合</h1><p>概念：对象的容器，定义了对多个对象进行操作的常用方法，可以实现数组的功能<br>都是Object类型</p><p>Java集合类框架总共有两大接口：Collection 和Map ，一个元素集合，一个是键值对集合； 其中List和Set接口继承了Collection接口，一个是有序元素集合，一个是无序元素集合； 而ArrayList和 LinkedList 实现了List接口，HashSet实现了Set接口，这几个都比较常用； HashMap 和HashTable实现了Map接口，并且HashTable是线程安全的，但是HashMap性能更好；</p><h2 id="集合的优点"><a href="#集合的优点" class="headerlink" title="集合的优点"></a>集合的优点</h2><p>解决数组存储数据方面的弊端。</p><p>与数组的区别：<br>    数组长度固定，集合长度不固定。<br>    数组可以存储基本类型和引用数据类型，集合只能储存引用类型<br>    3.集合也不能直接存储Java对象，集合当中存储的都是Java对象的内存地址。（或者说集合中存储的是引用。）<br>位置：Java.util.*;</p><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p>Collection接口被List和Set接口继承</p><ul><li>常用方法<br>boolean add(Object e) 向集合中添加一个元素对象<br>boolean addAll(Collection c)  将一个集合的所有对象添加到此集合中<br>int size() 获取集合中元素的个数</li></ul><p>boolean remove(Object o) 删除集合中的某个元素。<br>void clear() 清空集合</p><p>boolean contains(Object o) 判断当前集合中是否包含元素o，<br>boolean aquals(object o)   //比较此集合与指定对象是否相等。</p><p>boolean isEmpty() 判断该集合中元素的个数是否为0<br>Object[] toArray() 调用这个方法可以把集合转换成数组。【作为了解，使用不多。】</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Collection c = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">c.add(<span class="number">1200</span>); <span class="comment">// 自动装箱(Java5的新特性。),实际上是放进去了一个对象的内存地址。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="List-列表-接口与实现类"><a href="#List-列表-接口与实现类" class="headerlink" title="List(列表)接口与实现类"></a>List(列表)接口与实现类</h3><p>List接口：有序，有下标，元素可重复<br>ArrayList和 LinkedList 实现了List接口</p><h4 id="ArrayList类（常用）"><a href="#ArrayList类（常用）" class="headerlink" title="ArrayList类（常用）"></a>ArrayList类（常用）</h4><p>ArrayList：作为List接口的主要实现类；线程不安全的(非线程安全。)，效率高；底层使用Object[] elementData存储.集合底层采用了数组这种数据结构，<br>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// jdk 8中ArrayList的变化:</span></span><br><span class="line">ArrayList list = <span class="keyword">new</span> ArrayList(); <span class="comment">//底层Object[] elementData初始化为{}.并没创建长度为10的数组</span></span><br><span class="line">list.add(<span class="number">123</span>); <span class="comment">//第一次调用add()时，底层才创建了长度10的数组，并将数据123添加到elementData[0] …  如果此次的添加导致底层elementData数组容量不够，则扩容。默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 结论：建议开发中使用带参的构造器：ArrayList list = new ArrayList(int capacity)</span></span><br><span class="line"><span class="comment">// 使用带参构造器事先确定数组长度，避免底层的默认自动扩容，提高了效率</span></span><br></pre></td></tr></tbody></table></figure><h4 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h4><p>LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储.</p><p>Java LinkedList 类是List和Deque接口的双向链表实现。<br>它实现了所有可选的列表操作，并允许所有元素（包括空值）。</p><p><strong>Java LinkedList特性</strong><br>    双向链表实现，实现了 List 和 Deque 接口。因此，它也可以用作队列、双端队列或者堆栈。<br>    允许所有元素，包括重复项和 NULL。<br>    LinkedList 维护元素的插入顺序。<br>    它不是同步的。如果多个线程并发访问一个链表，并且至少有一个线程在结构上修改了链表，则必须进行外部同步。<br>    使用 Collections.synchronizedList(new LinkedList()) 获取同步链表。<br>    此类返回的迭代器是快速失败的，可能会抛出 ConcurrentModificationException。<br>    它没有实现 RandomAccess 接口。</p><p><strong>LinkedList的方法</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(Object o)</span> ：将指定的元素添加到列表的末尾。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, Object element)</span> ：在列表中的指定位置索引处插入指定元素。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(Object o)</span> ：在列表的开头插入给定的元素。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addLast</span><span class="params">(Object o)</span> ：将给定元素添加到列表的末尾。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> : 返回列表中元素的数量</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> : 如果列表包含指定元素，则返回 <span class="keyword">true</span>，否则返回 <span class="keyword">false</span>。</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> ：删除列表中第一次出现的指定元素。</span></span><br><span class="line"><span class="function">Object <span class="title">getFirst</span><span class="params">()</span> ：返回列表中的第一个元素。</span></span><br><span class="line"><span class="function">Object <span class="title">getLast</span><span class="params">()</span> ：返回列表中的最后一个元素。</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">indexOf</span><span class="params">(Object o)</span> ：返回指定元素第一次出现在列表中的索引，如果列表不包含指定元素，则返回 -1.</span></span><br><span class="line"><span class="function"><span class="title">lastIndexOf</span><span class="params">(Object o)</span> ：返回指定元素最后一次出现在列表中的索引，如果列表不包含指定元素，则返回 -1.</span></span><br><span class="line"><span class="function">Iterator <span class="title">iterator</span><span class="params">()</span> ：以适当的顺序返回此列表中元素的迭代器。</span></span><br><span class="line"><span class="function">Object[] <span class="title">toArray</span><span class="params">()</span> ：以适当的顺序返回一个包含此列表中所有元素的数组。</span></span><br><span class="line"><span class="function">List <span class="title">subList</span><span class="params">(<span class="keyword">int</span> fromIndex, <span class="keyword">int</span> toIndex)</span> ：返回此列表中指定 fromIndex（包含）和 toIndex（不包含）之间的部分的视图。</span></span><br><span class="line"><span class="function"></span></span><br></pre></td></tr></tbody></table></figure><h4 id="ArrayList和LinkedList的区别"><a href="#ArrayList和LinkedList的区别" class="headerlink" title="ArrayList和LinkedList的区别"></a>ArrayList和LinkedList的区别</h4><p>底层实现：ArrayList是实现了基于动态数组的数据结构，而LinkedList是基于链表的数据结构，ArrayList需要扩容、LinkedList不需要<br>时间复杂度：对于随机访问get和set，ArrayList要优于LinkedList，因为LinkedList要移动指针<br>使用场景：LinkedList是个双向链表，它同样可以被当作栈、队列或双端队列来使用。</p><h4 id="Vector集"><a href="#Vector集" class="headerlink" title="Vector集"></a>Vector集</h4><p>合底层采用了数组这种数据结构，线程安全的，所有的方法都有synchronized关键字修饰，比较安全但效率低，所以使用率低</p><h3 id="Set-集-接口与实现类"><a href="#Set-集-接口与实现类" class="headerlink" title="Set(集)接口与实现类"></a>Set(集)接口与实现类</h3><p>Set接口：无序，无下标，元素不能重复<br>HashSet实现了Set接口</p><h4 id="HashSet-Hash-表"><a href="#HashSet-Hash-表" class="headerlink" title="HashSet(Hash 表)"></a>HashSet(Hash 表)</h4><p>不能保证元素的排列顺序，顺序有可能发生变化<br>不是同步的<br>集合元素可以是null,但只能放入一个null 当向HashSet结合中存入一个元素时，HashSet会调用该对象的hashCode()方法来得到该对象的hashCode值，然后根据 hashCode值来决定该对象在HashSet中存储位置。</p><h4 id="TreeSet-二叉树"><a href="#TreeSet-二叉树" class="headerlink" title="TreeSet(二叉树)"></a>TreeSet(二叉树)</h4><p>TreeSet是SortedSet接口的唯一实现类<br>TreeSet可以确保集合元素处于排序状态。TreeSet支持两种排序方式，自然排序 和定制排序，其中自然排序为默认的排序方式。向TreeSet中加入的应该是同一个类的对象</p><h3 id="泛型和工具类"><a href="#泛型和工具类" class="headerlink" title="泛型和工具类"></a>泛型和工具类</h3><h2 id="Map-映射-接口与实现类"><a href="#Map-映射-接口与实现类" class="headerlink" title="Map(映射)接口与实现类"></a>Map(映射)接口与实现类</h2><p>Map用于保存具有映射关系的数据，Map里保存着两组数据：key和value，它们都可以使任何引用类型的数据，但key不能重复。所以通过指定的key就可以取出对应的value。</p><p>map中的containsKey（key）方法是判断该key在map中是否有key存在。如果存在则返回true。如果不存在则返回false。<br>HashMap 和HashTable实现了Map接口，并且HashTable是线程安全的，但是HashMap性能更好；</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;Integer,String&gt; map =<span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">map.put(<span class="number">1</span>,<span class="string">"a"</span>);</span><br><span class="line">map.put(<span class="number">2</span>,<span class="string">"b"</span>);</span><br><span class="line">System.out.println(map.get(<span class="number">1</span>));     <span class="comment">//获取键为1的值</span></span><br><span class="line"><span class="comment">// 判断map中是否有某一个键</span></span><br><span class="line">map.containsKey()</span><br></pre></td></tr></tbody></table></figure><h3 id="HashTable"><a href="#HashTable" class="headerlink" title="HashTable"></a>HashTable</h3><h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java容器 </tag>
            
            <tag> 集合 </tag>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内网穿透</title>
      <link href="/2022/09016932.html"/>
      <url>/2022/09016932.html</url>
      
        <content type="html"><![CDATA[<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p>内网穿透就是别人通过外网能够访问到我们本地的服务器。</p><p>内网，就是在公司或者家庭内部，建立的局域网络或者是办公网络，可以实现多台电脑之间的资源共享，包括设备、资料、数据等。<br>外网则是通过一个网关与其它的网络系统连接，相对于内网而言，这种网络系统称之为外部网络，常见的就是我们日常使用的互联网。</p><p>内网穿透，即NAT穿透，网络连接时术语，计算机是局域网内时，外网与内网的计算机节点需要连接通信，有时就会出现不支持内网穿透。就是说映射端口，能让外网的电脑找到处于内网的电脑，提高下载速度。不管是内网穿透还是其他类型的网络穿透，都是网络穿透的统一方法来研究和解决。</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>内网穿透，又称为NAT穿透。NAT背后的设备，它们的主要特点是 ，可以访问外网，但不能被外网设备有效访问。基于这一特点，NAT穿透技术是让NAT背后的设备，先访问指定的外网服务器，由指定的外网服务器搭建桥梁，打通内、外网设备的访问通道，实现外网设备访问到内网设备。</p><p>该技术除了可以访问隐藏在NAT后的设备，同样可以穿透防火墙。这是因为防火墙一般只拦截了入站没有拦截出站，所以也可以让防火墙内的设备对外提供服务。</p><p>由于内网设备并不是与外网设备直接相连，所以在安全性上是毋庸置疑的，内网穿透可以说是安全与效率兼得。</p><p>对于内网来说，其不是不能主动访问公网端口，而是不能反过来有效的被公网访问。内网穿透的主要思路就是利用这一点，让在内网的节点主动访问一个拥有公网IP地址的服务器，并由中间服务器搭桥，打通经过该服务器从其他主机到NAT之后节点的隧道。</p><p>我们在做开发时，不想购买服务器，只想搭建我们本地的服务器，我们搭建的本地服务器只能供我们自己电脑的浏览器访问，或者处于同一个wifi下的手机访问</p><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>提供内网穿透服务<br>连接内网服务器，在外网演示内网web站点<br>无需服务器部署，快速调试本地程序，微信公众号开发利器<br>支持http、https协议站点，省去证书中间件复杂配置，http协议站点直接升级为https站点<br>支持TCP，UDP协议端口转发。支持数据库、SSH、远程桌面、网络摄像头等等开放到外网</p><h2 id="“内网”与“外网”的概念："><a href="#“内网”与“外网”的概念：" class="headerlink" title="“内网”与“外网”的概念："></a>“内网”与“外网”的概念：</h2><p>内网：即所说的局域网，比如学校的局域网，局域网内每台计算机的IP地址在本局域网内具有互异性，是不可重复的。但两个局域网内的内网IP可以有相同的。<br>外网：即互联网，局域网通过一台服务器或是一个路由器对外连接的网络，这个IP地址是唯一的。也就是说内网里所有的计算机都是连接到这一个外网IP上，通过这一个外网IP对外进行交换数据的。也就是说，一个局域网里所有电脑的内网IP是互不相同的,但共用一个外网IP。（用ipconfig/all查到的IP是你本机的内网IP；在<a href="http://www.ip138.com上看到的是你连接互联网所使用的ip/">http://www.ip138.com上看到的是你连接互联网所使用的IP</a>，即外网）。</p><h2 id="公有-IP-和私有-IP-的区别："><a href="#公有-IP-和私有-IP-的区别：" class="headerlink" title="公有 IP 和私有 IP 的区别："></a>公有 IP 和私有 IP 的区别：</h2><p>公有地址(Public address)：由 Inter NIC(Internet Network Information Center 因特网信息中心)负责。这些 IP 地址分配给注册并向Inter NIC提出申请的组织机构，公有 IP 全球唯一，通过它直接访问因特网(直接能上网)。</p><p>私有地址(Private address)：属于非注册地址，专门为组织机构内部使用，说白了，私有 IP 不能直接上网。<br>而我们平时通过运营商(电信、移动、联通宽带等)上网，家里面通过路由器分出来的 IP 都是私有 IP(局域网 IP)，大家可能会疑问，我们可以上网啊，怎么会是私有 IP 呢?租用(申请)公有 IP 是需要钱的。 运营商买了一些公有 IP，然后通过这些公有 IP 分出来，再分给一个一个的用户使用。这个过程有点类似于，我们去安装了宽度，通过路由器分出几个 IP，让好几个人都能上网，当然运营商通过公有 IP 分出来的过程肯定比这个复杂多了。所以，我们平时上网用的 IP 是私有 IP，真正拥有公有 IP 的是运营商(当然，我们可以租用一个公有 IP )。所以，A 家庭的局域网 IP 和 B 家庭的局域网 IP 相同很正常，但是，最终 A 和 B 能上网(数据走出去)还是通过运营商的公有 IP，毕竟，公有 IP 的资源有限，这一片区域的用户使用的很有可能(实际上就是这样的)是同一个公有 IP</p><h2 id="端口映射："><a href="#端口映射：" class="headerlink" title="端口映射："></a>端口映射：</h2><p>端口映射是 NAT 的一种，它将外网主机的 IP 地址的一个端口映射到内网中一台机器，提供相应的服务。当用户访问该 IP 的这个端口时，服务器自动将请求映射到对应局域网内部的机器上。<br>之前提到的内网，是不能被外网直接的访问的，只能通过一些中转技术，让内网“假装”成外网。<br>这就平常所说的内网穿透。</p><h2 id="NPS"><a href="#NPS" class="headerlink" title="NPS"></a>NPS</h2><p><a href="https://mp.weixin.qq.com/s/slxUTaFkdzfYK7auHxeyAA">参考</a></p><p>nps是一款轻量级、高性能、功能强大的内网穿透代理服务器。目前支持tcp、udp流量转发，可支持任何tcp、udp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面，内网dns解析等等……），此外还支持内网http代理、内网socks5代理、p2p等，并带有功能强大的web管理端。</p><p><a href="https://github.com/ehang-io/nps">Github主页</a><br><a href="https://ehang-io.github.io/nps/#/">文档</a></p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>服务器端(nps)，一般安装在公网服务器上，是所有内网资源对外的统一入口。</p><p>客户端(npc)，一般安装在内网服务器上，是内网服务器与公网服务器的桥梁。</p><p>客户端连接端口，客户端使用该秘钥连接服务端连接端口建立长连接，用于将外网服务器请求信息转发至对应客户端，对应客户端也通过该端口返回相关信息。</p><p>客户端秘钥，在服务端部署完成后，需要建立客户端秘钥，并在客户端连接时需要使用该秘钥进行连接。</p><p>一个服务器端，可以对应多个客户端。在服务器端的不同端口，可以映射在不同客户端的对应本地端口之上。</p><h3 id="server"><a href="#server" class="headerlink" title="server"></a>server</h3><p><a href="https://hub.docker.com/r/ffdfgdfg/nps">https://hub.docker.com/r/ffdfgdfg/nps</a></p><p>服务端推荐有配置文件<br>下载配置文件<br>sudo weget <a href="https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/ehang-io/nps/tree/master/conf">https://minhaskamal.github.io/DownGit/#/home?url=https://github.com/ehang-io/nps/tree/master/conf</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name nps --net=host -v &lt;本机conf目录&gt;:/conf ffdfgdfg/nps</span><br><span class="line"></span><br><span class="line">docker run -d --restart=always --name nps --net=host -v /app/nps/conf:/conf ffdfgdfg/nps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line">docker logs nps</span><br></pre></td></tr></tbody></table></figure><p>vi /app/nps/conf/nps.conf    #修改配置</p><p>开放端口<br>auth_crypt_key<br>只需要修改下面的web的host、账号、密码和端口号</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">#nps.conf</span><br><span class="line"></span><br><span class="line">appname = nps</span><br><span class="line">#Boot mode(dev|pro)</span><br><span class="line">runmode = dev</span><br><span class="line"></span><br><span class="line">#HTTP(S) proxy port, no startup if empty</span><br><span class="line">http_proxy_ip=0.0.0.0</span><br><span class="line"></span><br><span class="line">http_proxy_port=808</span><br><span class="line">#域名代理https代理监听端口</span><br><span class="line">https_proxy_port=4434</span><br><span class="line">https_just_proxy=true</span><br><span class="line">#default https certificate setting</span><br><span class="line">https_default_cert_file=conf/server.pem</span><br><span class="line">https_default_key_file=conf/server.key</span><br><span class="line"></span><br><span class="line">##bridge</span><br><span class="line">#客户端与服务端连接方式kcp或tcp</span><br><span class="line">bridge_type=tcp</span><br><span class="line">#服务端客户端通信端口</span><br><span class="line">bridge_port=8024</span><br><span class="line">bridge_ip=0.0.0.0</span><br><span class="line"></span><br><span class="line"># Public password, which clients can use to connect to the server</span><br><span class="line"># After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.</span><br><span class="line">#客户端以配置文件模式启动时的密钥，设置为空表示关闭客户端配置文件连接模式</span><br><span class="line">public_vkey=123</span><br><span class="line"></span><br><span class="line">#Traffic data persistence interval(minute)</span><br><span class="line">#Ignorance means no persistence</span><br><span class="line">#服务端流量数据持久化间隔，单位分钟，忽略表示不持久化</span><br><span class="line">#flow_store_interval=1</span><br><span class="line"></span><br><span class="line"># log level LevelEmergency-&gt;0  LevelAlert-&gt;1 LevelCritical-&gt;2 LevelError-&gt;3 LevelWarning-&gt;4 LevelNotice-&gt;5 LevelInformational-&gt;6 LevelDebug-&gt;7</span><br><span class="line">#日志输出级别</span><br><span class="line">log_level=7</span><br><span class="line">#log_path=nps.log</span><br><span class="line"></span><br><span class="line">#Whether to restrict IP access, true or false or ignore</span><br><span class="line">#是否限制ip访问，true或false或忽略</span><br><span class="line">#ip_limit=true</span><br><span class="line"></span><br><span class="line">#p2p</span><br><span class="line">#服务端Ip，使用p2p模式必填</span><br><span class="line">#p2p_ip=127.0.0.1</span><br><span class="line">#p2p模式开启的udp端口</span><br><span class="line">#p2p_port=6000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#web</span><br><span class="line">web_host=a.o.com</span><br><span class="line">web_username=admin</span><br><span class="line">#web界面管理密码</span><br><span class="line">web_password=admin</span><br><span class="line">#web管理端口</span><br><span class="line">web_port = 1000</span><br><span class="line">web_ip=0.0.0.0</span><br><span class="line">#web管理主路径,用于将web管理置于代理子路径后面</span><br><span class="line">web_base_url=</span><br><span class="line">web_open_ssl=false</span><br><span class="line">web_cert_file=conf/server.pem</span><br><span class="line">web_key_file=conf/server.key</span><br><span class="line"># if web under proxy use sub path. like http://host/nps need this.</span><br><span class="line">#web_base_url=/nps</span><br><span class="line"></span><br><span class="line">#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)</span><br><span class="line">#Remove comments if needed</span><br><span class="line">#web api密钥</span><br><span class="line">#auth_key=test</span><br><span class="line">#获取服务端authKey时的aes加密密钥，16位</span><br><span class="line">auth_crypt_key =1234567812345678</span><br><span class="line"></span><br><span class="line">#allow_ports=9001-9009,10001,11000-12000</span><br><span class="line"></span><br><span class="line">#Web management multi-user login</span><br><span class="line">allow_user_login=false</span><br><span class="line">allow_user_register=false</span><br><span class="line">allow_user_change_username=false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#extension</span><br><span class="line">allow_flow_limit=false</span><br><span class="line">allow_rate_limit=false</span><br><span class="line">allow_tunnel_num_limit=false</span><br><span class="line">allow_local_proxy=false</span><br><span class="line">allow_connection_num_limit=false</span><br><span class="line">allow_multi_ip=false</span><br><span class="line">system_info_display=false</span><br><span class="line"></span><br><span class="line">#cache</span><br><span class="line">http_cache=false</span><br><span class="line">http_cache_length=100</span><br><span class="line"></span><br><span class="line">#get origin ip</span><br><span class="line">http_add_origin_header=false</span><br><span class="line"></span><br><span class="line">#pprof debug options</span><br><span class="line">#pprof_ip=0.0.0.0   #debug pprof 服务端ip</span><br><span class="line">#pprof_port=9999    #debug pprof 端口</span><br><span class="line"></span><br><span class="line">#client disconnect timeout</span><br><span class="line">#客户端连接超时，单位 5s，默认值 60，即 300s = 5mins</span><br><span class="line">disconnect_timeout=60</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="设置反代"><a href="#设置反代" class="headerlink" title="设置反代"></a>设置反代</h3><p>在宝塔的网站配置文件中设置反代</p><p>删除默认的location块，并加入以下location块</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># Reverse Porxy For nps</span><br><span class="line">    location / {</span><br><span class="line">        proxy_pass http://127.0.0.1:1000/;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header Range $http_range;</span><br><span class="line">        proxy_set_header If-Range $http_if_range;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        client_max_body_size 20000m;</span><br><span class="line">        proxy_connect_timeout 600; #代理的连接超时时间（单位：毫秒）</span><br><span class="line">        proxy_read_timeout 600; #代理的读取资源超时时间（单位：毫秒）</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>在域名解析控制台中，域名绑定</p><h3 id="通过web管理台配置客户端接入信息"><a href="#通过web管理台配置客户端接入信息" class="headerlink" title="通过web管理台配置客户端接入信息"></a>通过web管理台配置客户端接入信息</h3><p>使用浏览器登录相关端口，提示用户名称与密码。使用如下修改后用户名密码进行登录。</p><p>点击 客户端 -&gt; 新增 ，依次填写 备注（inner-server1）、允许客户端通过配置文件连接（是）、压缩（是）、加密（是），不填写Basic 认证用户名、Basic 认证密码、唯一验证密钥</p><p>新建完成后查看客户端清单，保存好两台服务器自动生成的唯一验证密钥、客户端ID备用</p><p>新建的客户端前面有个+，点开就可以看到客户端命令</p><h3 id="外网服务器public-server-linux-服务端端口映射配置"><a href="#外网服务器public-server-linux-服务端端口映射配置" class="headerlink" title="外网服务器public-server(linux)服务端端口映射配置"></a>外网服务器public-server(linux)服务端端口映射配置</h3><p>使用浏览器登录相关端口，提示用户名称与密码。使用如下修改后用户名密码进行登录。</p><p>在此需要使用到上文谈到创建客户端后自动生成的客户端ID。</p><p>选择TCP 隧道-&gt;新增 ，依次填写 模式（TCP）、客户端ID（client-id）、备注（inner-server1-80）、**服务端端口（8081）、目标（127.0.0.1:80）</p><h3 id="client"><a href="#client" class="headerlink" title="client"></a>client</h3><h4 id="客户端配置文件"><a href="#客户端配置文件" class="headerlink" title="客户端配置文件"></a>客户端配置文件</h4><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server_addr服务端ip/域名:port</span><br><span class="line">conn_type与服务端通信模式(tcp或kcp)</span><br><span class="line">vkey服务端配置文件中的密钥(非web)</span><br><span class="line">usernamesocks5或http(s)密码保护用户名(可忽略)</span><br><span class="line">passwordsocks5或http(s)密码保护密码(可忽略)</span><br><span class="line">compress是否压缩传输(true或false或忽略)</span><br><span class="line">crypt是否加密传输(true或false或忽略)</span><br><span class="line">rate_limit速度限制，可忽略</span><br><span class="line">flow_limit流量限制，可忽略</span><br><span class="line">remark客户端备注，可忽略</span><br><span class="line">max_conn最大连接数，可忽略</span><br><span class="line">pprof_addrdebug pprof ip:port</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="docker搭建"><a href="#docker搭建" class="headerlink" title="docker搭建"></a>docker搭建</h4><p><a href="https://hub.docker.com/r/ffdfgdfg/npc">https://hub.docker.com/r/ffdfgdfg/npc</a></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker pull ffdfgdfg/npc   #拉取镜像</span><br><span class="line"><span class="meta">#</span><span class="bash">docker启动一个镜像实例（有配置文件）要下载配置文件到本地</span></span><br><span class="line">docker run -d -p 18080-18090:8080-8090 -v &lt;本机conf目录&gt;:/conf --name=npc ffdfgdfg/npc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> docker启动一个镜像实例（无配置文件，推荐，异常方便）</span></span><br><span class="line">docker run -d --name npc --net=host ffdfgdfg/npc -server=ip地址:20002 -vkey=z8lduhyk0g0cashx -type=tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> -server=ip地址:20002 -vkey=z8lduhyk0g0cashx -<span class="built_in">type</span>=tcp (这段可以在服务端自动生成)</span></span><br><span class="line">docker run -d --name npc --net=host ffdfgdfg/npc  -server=nps.7zk.fun:6770 -vkey=fi1ob8iz61her26a -type=tcp</span><br><span class="line"></span><br><span class="line">docker run -d --name npc --net=host ffdfgdfg/npc -server=nps.wenkex.top:6770 -vkey=4xgf376g5p8v4js6 -type=tcp</span><br></pre></td></tr></tbody></table></figure><p>解压文件包结构如下</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- conf       #客户端配置文件夹  </span><br><span class="line">- npc.exe    #客户端运行程序</span><br></pre></td></tr></tbody></table></figure><p>客户端的版本一定要与服务端保持一致, 不然会报:</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2021/05/02 13:41:50.302 [I] [npc.go:225]  the version of client is 0.26.4, the core version of client is 0.26.0</span><br><span class="line">2021/05/02 13:41:50.345 [I] [control.go:97]  Loading configuration file conf/npc.conf successfully</span><br></pre></td></tr></tbody></table></figure><h4 id="win11无配置文件搭建"><a href="#win11无配置文件搭建" class="headerlink" title="win11无配置文件搭建"></a>win11无配置文件搭建</h4><p>此模式的各种配置在服务端web管理中完成,客户端除运行一条命令外无需任何其他设置</p><p><a href="https://github.com/ehang-io/nps">Github主页</a>下载window压缩包(windows_amd64_client.tar.gz)<br>window下解压tar.gz文件</p><p>注意要用cmd的管理员模式打开，尽量把电脑管家等软件全部关闭<br>火绒会直接查杀npc.exe，所以我直接卸载了火绒<br>目前win11无法注册为系统服务，<del>我退而求之使用有配置文件启动npc.exe，并手动设置开机自启<br>Win+r进入运行，输入shell:startup，把npc.exe快捷方式拉进这个开机自启文件夹中</del></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压tar.gz文件</span></span><br><span class="line">tar -zxvf name.tar.gz</span><br><span class="line">tar -zxvf windows_amd64_client.tar.gz</span><br><span class="line"></span><br><span class="line">对于windows，使用管理员身份运行cmd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注册到系统服务(开机启动、守护进程)：注册到服务后，日志文件windows位于当前目录下</span></span><br><span class="line">./npc.exe install 其他参数（例如-server=xx -vkey=xx或者-config=xxx）</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动：</span></span><br><span class="line">./npc.exe start</span><br><span class="line"><span class="meta">#</span><span class="bash"> 停止：</span></span><br><span class="line">./npc.exe stop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要更换命令内容需要先卸载./npc.exe uninstall，再重新注册</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>./npc.exe install  -server=nps.wenkex.top:8024 -vkey=4xgf376g5p8v4js6 -type=tcp</p><h4 id="window有配置文件搭建"><a href="#window有配置文件搭建" class="headerlink" title="window有配置文件搭建"></a>window有配置文件搭建</h4><p>修改/conf/npc.conf配置文件</p><h2 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h2><p>frp 是一个专注于内网穿透的高性能的反向代理应用，支持 TCP、UDP、HTTP、HTTPS 等多种协议。可以将内网服务以安全、便捷的方式通过具有公网 IP 节点的中转暴露到公网。<br>特点<br>  客户端服务端通信支持 TCP、KCP 以及 Websocket 等多种协议。<br>  端口复用，多个服务通过同一个服务端端口暴露。<br>  跨平台，但是支持的比nps少一点<br>  多种插件，提供很多功能</p><p>Frp<br>项目主页：<a href="https://github.com/fatedier/frp">https://github.com/fatedier/frp</a><br>项目介绍：frp 是一个可用于内网穿透的高性能的反向代理应用，支持 tcp, udp, http, https 协议。利用处于内网或防火墙后的机器，对外网环境提供 http 或 https 服务。对于 http, https 服务支持基于域名的虚拟主机，支持自定义域名绑定，使多个域名可以共用一个80端口。利用处于内网或防火墙后的机器，对外网环境提供 tcp 和 udp 服务，例如在家里通过 ssh 访问处于公司内网环境内的主机。开源，强大牛逼，适合企业中开发使用，可穿透任意常规合法端口（包含22），需要提供云服务器，自己的域名，宽带上限由你的服务器所决定。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>钉钉穿透</p><p>工具基于ngrok封装，简单、见效快，新手、个人开发者最佳选择</p><p>Ngrok<br>项目主页：<a href="https://ngrok.com/">https://ngrok.com/</a><br>项目介绍： 一个通过任何NAT或防火墙为您的本地主机服务器提供即时访问、安全的URL的命令。类似花生壳，分为服务端和客户端，也可以自己搭建服务端。开源，老牌穿透工具，源码很久没有更新了</p><p>Ssh&nbsp;配合autossh工具使用，因为autossh会容错<br>项目主页：<a href="http://www.harding.motd.ca/autossh/">http://www.harding.motd.ca/autossh/</a><br>项目介绍：自动重新启动SSH会话和隧道。autossh是一个程序，用于启动ssh的副本并进行监控，在死亡或停止传输流量时根据需要重新启动它。 这个想法来自rstunnel（Reliable SSH Tunnel），但是在C中实现。作者的观点是，它不像匆匆忙忙的工作那么容易。使用端口转发环路或远程回显服务进行连接监视。在遇到连接拒绝等快速故障时，关闭连接尝试的速度。在OpenBSD，Linux，Solaris，Mac OS X，Cygwin和AIX上编译和测试; 应该在其他BSD上工作。免费软件。<br>Natapp<br>项目主页：<a href="https://natapp.cn/">https://natapp.cn/</a><br>项目介绍：基于ngrok的国内收费内网穿透工具，4包卫龙辣条的费用可以享有不限流量，自定义域名等好处类似花生壳，有免费版本，比花生壳好。免费版本：提供http,https,tcp全隧道穿透，随机域名/TCP端口，不定时强制更换域名/端口，自定义本地端口</p><p>Spike<br>项目主页：<a href="https://github.com/slince/spike">https://github.com/slince/spike</a><br>项目介绍：Spike是一个可以用来将你的内网服务暴露在公网的快速的反向代理，基于ReactPHP，采用IO多路复用模型。采用Php实现。</p><p>个人不推荐<br>花生壳<br>项目主页：<a href="https://hsk.oray.com/">https://hsk.oray.com/</a><br>项目介绍：商业化比较成功的内网穿透。个人开发很不推荐，收费贵，企业可以考虑使用。<br>需要建立账号实名认证，支付2包卫龙辣条费用，可自选一个壳域名，注册过程比较麻烦，流量限制<br>Lanproxy<br>项目主页：<a href="https://github.com/ffay/lanproxy">https://github.com/ffay/lanproxy</a><br>项目介绍：lanproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具，目前仅支持tcp流量转发，可支持任何tcp上层协议（访问内网网站、本地支付接口调试、ssh访问、远程桌面…）。目前市面上提供类似服务的有花生壳、TeamView、GoToMyCloud等等，但要使用第三方的公网服务器就必须为第三方付费，并且这些服务都有各种各样的限制，此外，由于数据包会流经第三方，因此对数据安全也是一大隐患。</p><p>工具选择<br><a href="https://juejin.cn/post/6860694239412649991?share_token=26950be9-39b6-432c-b29a-a26df3e8cae4">https://juejin.cn/post/6860694239412649991?share_token=26950be9-39b6-432c-b29a-a26df3e8cae4</a><br>内网穿透工具比较(ngrok,frp,lanproxy,goproxy,nps)<br><a href="https://blog.csdn.net/a1035434631/article/details/108010819">https://blog.csdn.net/a1035434631/article/details/108010819</a></p><p>ngork<br>基本原理是通过客户端与公网服务端建立通道及映射关系，然后服务端提供可访问的公网地址。当外网访问此公网地址时，ngrok服务端根据映射关系找到客户端，然后转发给客户端的服务<br><a href="https://juejin.cn/post/6844903993911558157?share_token=1b8c42ab-1174-48a2-9122-00e008829d45">https://juejin.cn/post/6844903993911558157?share_token=1b8c42ab-1174-48a2-9122-00e008829d45</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 内网穿透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript学习</title>
      <link href="/2022/081920764.html"/>
      <url>/2022/081920764.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript是一种解释型的脚本语言。不同于C、C++、Java等语言先编译后执行, JavaScript不会产生编译出来的字节码文件，而是在程序的运行过程中对源文件逐行进行解释。</p><p>JavaScript 插入 HTML 页面后，由浏览器执行。JavaScript 控制了网页的行为</p><p>推荐<a href="https://www.w3school.com.cn/js/index.asp">w3school</a>或者<a href="https://www.runoob.com/js/js-tutorial.html">runoob</a><br><a href="https://www.yuque.com/yashujs/bfug6u/ntxhzu#cc4dd1da">https://www.yuque.com/yashujs/bfug6u/ntxhzu#cc4dd1da</a><br><a href="https://www.w3cschool.cn/escript6/">ES6</a></p><h2 id="浏览器端和服务器端JavaScript组成区别"><a href="#浏览器端和服务器端JavaScript组成区别" class="headerlink" title="浏览器端和服务器端JavaScript组成区别"></a>浏览器端和服务器端JavaScript组成区别</h2><pre><code>浏览器端：ECMAScript，描述了JavaScript语言的语法和基本对象文档对象模型（DOM），描述处理网页内容的方法和接口浏览器对象模型（BOM），描述与浏览器进行交互的方法和接口服务器端：ECMAScriptnode.js内置模块：文件系统I/O、网络（HTTP、TCP、UDP、DNS、TLS/SSL等）、二进制数据流、加密算法、数据流等等</code></pre><h2 id="浏览器端"><a href="#浏览器端" class="headerlink" title="浏览器端"></a>浏览器端</h2><p>Chrome浏览器运行环境包括V8引擎，内置API<br>  V8引擎负责解析和执行js代码<br>  内置API是由运行环境提供的特殊接口</p><h3 id="js代码嵌入方式"><a href="#js代码嵌入方式" class="headerlink" title="js代码嵌入方式"></a>js代码嵌入方式</h3><h4 id="HTML文档内"><a href="#HTML文档内" class="headerlink" title="HTML文档内"></a>HTML文档内</h4><p>JavaScript代码要写在script标签内<br>script标签可以写在文档内的任意位置<br>为了能够方便查询或操作HTML标签（元素）script标签可以写在body标签后面</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"> </span></span><br><span class="line"><span class="javascript"> <span class="comment">// 下面是同样实现HelloWorld功能的简化版代码</span></span></span><br><span class="line"><span class="javascript"> <span class="built_in">document</span>.getElementById(<span class="string">"helloBtn"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">  alert(<span class="string">"Hello simple"</span>);</span></span><br><span class="line"><span class="javascript"> };</span></span><br><span class="line"><span class="javascript"> </span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="引入外部JavaScript文档"><a href="#引入外部JavaScript文档" class="headerlink" title="引入外部JavaScript文档"></a>引入外部JavaScript文档</h4><p>在script标签内通过src属性指定外部xxx.js文件的路径即可。但是要注意以下两点：</p><p>引用外部JavaScript文件的script标签里面不能写JavaScript代码<br>先引入，再使用<br>script标签不能写成单标签</p><h3 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h3><p>DOM是Document Object Model的缩写，意思是『文档对象模型』——将HTML文档抽象成模型，再封装成对象方便用程序操作。</p><p>这是一种非常常用的编程思想：将现实世界的事物抽象成模型，这样就非常容易使用对象来量化的描述现实事物，从而把生活中的问题转化成一个程序问题，最终实现用应用软件协助解决现实问题。而在这其中『模型』就是那个连通现实世界和代码世界的桥梁。</p><h4 id="DOM树"><a href="#DOM树" class="headerlink" title="DOM树"></a>DOM树</h4><p>浏览器把HTML文档从服务器上下载下来之后就开始按照『从上到下』的顺序『读取HTML标签』。每一个标签都会被封装成一个『对象』。</p><p>而第一个读取到的肯定是根标签html，然后是它的子标签head，再然后是head标签里的子标签……所以从html标签开始，整个文档中的所有标签都会根据它们之间的『父子关系』被放到一个『树形结构』的对象中。</p><h4 id="各个组成部分的类型"><a href="#各个组成部分的类型" class="headerlink" title="各个组成部分的类型"></a>各个组成部分的类型</h4><p>整个文档 文档节点 Document<br>HTML标签 元素节点 Element<br>HTML标签内的文本 文本节点 Text<br>HTML标签内的属性 属性节点 Attr<br>注释 注释节点 Comment</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>单行注释//<br>块注释/**/</p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>var 存在变量提升的情况，即 var 声明会被提升至该作用域的顶部，但是他们的赋值并不会。而 const 和 let 并不存在这种情况，</p><p>在作用域顶部声明变量，避免变量声明和赋值引起的相关问题。<br>var的作用域被规定为一个函数作用域，</p><p>但是如果两者既没在函数中，也没在块作用域中定义，那么两者都属于全局作用域。</p><p>ES5 只有两种声明变量的方法：var命令和function命令,ES6 除了添加let和const命令，后面章节还会提到，另外两种声明变量的方法：import命令和class命令。所以，ES6 一共有 6 种声明变量的方法。</p><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>ES6 新增了let命令，用来声明变量。它的用法类似于var，但是所声明的变量，只在let命令所在的代码块内有效</p><p>而let则被规定为块作用域，块作用域要比函数作用域小一些<br>for循环的计数器，就很合适使用let命令。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i);  <span class="comment">// ReferenceError: i is not defined</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h4><p>var命令会发生“变量提升”现象，即变量可以在声明之前使用，值为undefined。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，let命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><p>上面代码中，变量foo用var命令声明，会发生变量提升，即脚本开始运行时，变量foo已经存在了，但是没有值，所以会输出undefined。变量bar用let命令声明，不会发生变量提升。这表示在声明它之前，变量bar是不存在的，这时如果用到它，就会抛出一个错误。</p><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>只要块级作用域内存在let命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响。</p><p>var tmp = 123;</p><p>if (true) {<br>  tmp = ‘abc’; // ReferenceError<br>  let tmp;<br>}<br>上面代码中，存在全局变量tmp，但是块级作用域内let又声明了一个局部变量tmp，导致后者绑定这个块级作用域，所以在let声明变量前，对tmp赋值会报错。</p><p>ES6 明确规定，如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><p>总之，在代码块内，使用let命令声明变量之前，该变量都是不可用的。这在语法上，称为“暂时性死区”（temporal dead zone，简称 TDZ）。</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const声明一个只读的常量。一旦声明，常量的值就不能改变。<br>const声明的变量不得改变值，这意味着，const一旦声明变量，就必须立即初始化，不能留到以后赋值。<br>const的作用域与let命令相同：只在声明所在的块级作用域内有效。<br>const命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><p>本质 const实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址所保存的数据不得改动。对于简单类型的数据（数值、字符串、布尔值），值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指向实际数据的指针，const只能保证这个指针是固定的（即总是指向另一个固定的地址），至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个对象声明为常量必须非常小心。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = {};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 foo 添加一个属性，可以成功</span></span><br><span class="line">foo.prop = <span class="number">123</span>;</span><br><span class="line">foo.prop <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 foo 指向另一个对象，就会报错</span></span><br><span class="line">foo = {}; <span class="comment">// TypeError: "foo" is read-only</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>上面代码中，常量foo储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本身是可变的，所以依然可以为其添加新属性。</p><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>在 JavaScript 函数内部声明的变量是局部变量，所以只能在函数内部访问它，局部变量生命期从被声明的时间开始。在函数运行以后被删除。</p><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>数值型：JavaScript不区分整数、小数</p><p>布尔型：true、false<br>    在JavaScript中，其他类型和布尔类型的自动转换。<br>    true：非零的数值，非空字符串，非空对象<br>    false：零，空字符串，null，undefined</p><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串：JavaScript不区分字符、字符串；单引号、双引号意思一样。</p><p><code>String</code>和<code>Number</code>相加时，会将数字转为字符串；<code>String</code>和<code>Number</code>相减时，会将字符串转为数字；</p><p>字符串太长的时候，请不要使用字符串连接符换行 \，而是使用 +</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'牙叔教程 牙叔教程 牙叔教程'</span> +</span><br><span class="line">  <span class="string">'牙叔教程 牙叔教程 牙叔教程'</span> +</span><br><span class="line">  <span class="string">'牙叔教程 牙叔教程'</span></span><br></pre></td></tr></tbody></table></figure><p>编程时使用join而不是字符串连接来构建字符串  </p><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.show();</span><br><span class="line"><span class="keyword">var</span> i = { <span class="attr">name</span>: <span class="string">"小明"</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">height</span>: <span class="number">1.72</span> }; </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"大家好, 我叫%s, 今年%d岁, 身高%d米"</span>, i.name, i.age, i.height);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"实际上我是一个对象啦，长这样子: %j"</span>, i);</span><br></pre></td></tr></tbody></table></figure><h4 id="随机字符"><a href="#随机字符" class="headerlink" title="随机字符"></a>随机字符</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Radom</span>(<span class="params">n</span>)</span>{</span><br><span class="line">    <span class="comment">//如果不传参就是n=8</span></span><br><span class="line">    <span class="keyword">var</span> n= n || <span class="number">8</span></span><br><span class="line">    <span class="keyword">var</span> str=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;n;i++){</span><br><span class="line">        str+=<span class="built_in">String</span>.fromCharCode(random(<span class="number">0</span>,<span class="number">65535</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">log(Radom(<span class="number">8</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p>所有new出来的对象<br>用[]声明的数组<br>用{}声明的对象</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>JavaScript 对象是变量的容器。但是，我们通常认为 “JavaScript 对象是键值对的容器”。<br>对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 name:value 对呈现。<br>总结：JavaScript 对象是属性和方法的容器。</p><p>JavaScript中没有『类』的概念，对于系统内置的对象可以直接创建使用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> item = {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  <span class="attr">addValue</span>: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> item.value + val</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 请使用对象方法的简写方式, 属性不可简写, 方法可以简写  </span></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> item = {</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line"></span><br><span class="line">  addValue (val) {</span><br><span class="line">    <span class="keyword">return</span> item.value + val</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><h4 id="使用new关键字创建对象"><a href="#使用new关键字创建对象" class="headerlink" title="使用new关键字创建对象"></a>使用new关键字创建对象</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj01 = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给对象设置属性和属性值</span></span><br><span class="line">obj01.stuName = <span class="string">"tom"</span>;</span><br><span class="line">obj01.stuAge = <span class="number">20</span>;</span><br><span class="line">obj01.stuSubject = <span class="string">"java"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj01);</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-创建对象"><a href="#使用-创建对象" class="headerlink" title="使用{}创建对象"></a>使用{}创建对象</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj02 = {</span><br><span class="line">  <span class="string">"soldierName"</span>:<span class="string">"john"</span>,</span><br><span class="line">  <span class="string">"soldierAge"</span>:<span class="number">35</span>,</span><br><span class="line">  <span class="string">"soldierWeapon"</span>:<span class="string">"gun"</span></span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在控制台输出对象</span></span><br><span class="line"><span class="built_in">console</span>.log(obj02);</span><br></pre></td></tr></tbody></table></figure><h3 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h3><p>键值对在 JavaScript 对象通常称为 对象属性。<br>访问对象属性<br>你可以通过两种方式访问对象属性:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>person.lastName;</span><br><span class="line"><span class="number">2.</span>person[<span class="string">"lastName"</span>];</span><br></pre></td></tr></tbody></table></figure><h3 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h3><pre><code><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以通过person.firstName="..."的方式初始化</span></span><br><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">"Bill"</span>,</span><br><span class="line"><span class="attr">lastName</span> : <span class="string">"Gates"</span>,</span><br><span class="line"><span class="attr">id</span>       : <span class="number">678</span>,</span><br><span class="line"><span class="attr">fullName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{   <span class="comment">//成员函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">" "</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></code></pre><h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>this关键字只有两种情况：</p><ul><li>在函数外面：this关键字指向window对象（代表当前浏览器窗口）</li><li>在函数里面：this关键字指向调用函数的对象</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接打印this</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数中的this</span></span><br><span class="line"><span class="comment">// 1.声明函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>{</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.创建对象</span></span><br><span class="line"><span class="keyword">var</span> obj01 = {</span><br><span class="line"> <span class="string">"name"</span>:<span class="string">"tom"</span>,</span><br><span class="line"> <span class="string">"getName"</span>:getName</span><br><span class="line">};</span><br><span class="line"><span class="keyword">var</span> obj02 = {</span><br><span class="line"> <span class="string">"name"</span>:<span class="string">"jerry"</span>,</span><br><span class="line"> <span class="string">"getName"</span>:getName</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.调用函数</span></span><br><span class="line">obj01.getName();</span><br><span class="line">obj02.getName();</span><br></pre></td></tr></tbody></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><p>JavaScript 语言中，生成实例对象的传统方法是通过构造函数。下面是一个例子。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.x = x;</span><br><span class="line">  <span class="built_in">this</span>.y = y;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Point.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'('</span> + <span class="built_in">this</span>.x + <span class="string">', '</span> + <span class="built_in">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Point(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></tbody></table></figure><p>上面这种写法跟传统的面向对象语言（比如 C++ 和 Java）差异很大，很容易让新学习这门语言的程序员感到困惑。</p><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。</p><p>基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做到，新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用 ES6 的 class 改写，就是下面这样。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>{</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> {</span><br><span class="line">    <span class="built_in">this</span>.x = x;</span><br><span class="line">    <span class="built_in">this</span>.y = y;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">toString</span>(<span class="params"></span>)</span> {</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'('</span> + <span class="built_in">this</span>.x + <span class="string">', '</span> + <span class="built_in">this</span>.y + <span class="string">')'</span>;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上面代码定义了一个“类”，可以看到里面有一个 constructor 方法，这就是构造方法，而 this 关键字则代表实例对象。也就是说，ES5 的构造函数 Point ，对应 ES6 的 Point 类的构造方法。</p><p>Point 类除了构造方法，还定义了一个 toString 方法。注意，定义“类”的方法的时候，前面不需要加上 function 这个关键字，直接把函数定义放进去了就可以了。另外，方法之间不需要逗号分隔，加了会报错。</p><p>ES6 的类，完全可以看作构造函数的另一种写法。</p><p>上面代码表明，类的数据类型就是函数，类本身就指向构造函数。</p><p>使用的时候，也是直接对类使用 new 命令，跟构造函数的用法完全一致。<br>构造函数的 prototype 属性，在 ES6 的“类”上面继续存在。事实上，类的所有方法都定义在类的 prototype 属性上面。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><h4 id="使用new关键字创建数组"><a href="#使用new关键字创建数组" class="headerlink" title="使用new关键字创建数组"></a>使用new关键字创建数组</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1.创建数组对象</span></span><br><span class="line"><span class="keyword">var</span> arr01 = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.压入数据</span></span><br><span class="line">arr01.push(<span class="string">"apple"</span>);</span><br><span class="line">arr01.push(<span class="string">"orange"</span>);</span><br><span class="line">arr01.push(<span class="string">"banana"</span>);</span><br><span class="line">arr01.push(<span class="string">"grape"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.遍历数组</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr01.length; i++) {</span><br><span class="line"> <span class="built_in">console</span>.log(arr01[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.数组元素反序</span></span><br><span class="line">arr01.reverse();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr01.length; i++) {</span><br><span class="line"> <span class="built_in">console</span>.log(arr01[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.数组元素拼接成字符串</span></span><br><span class="line"><span class="keyword">var</span> arrStr = arr01.join(<span class="string">","</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arrStr);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.字符串拆分成数组</span></span><br><span class="line"><span class="keyword">var</span> arr02 = arrStr.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr02.length; i++) {</span><br><span class="line"> <span class="built_in">console</span>.log(arr02[i]);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7.弹出数组中最后一个元素</span></span><br><span class="line"><span class="keyword">var</span> ele = arr01.pop();</span><br><span class="line"><span class="built_in">console</span>.log(ele);</span><br></pre></td></tr></tbody></table></figure><h4 id="使用-创建数组"><a href="#使用-创建数组" class="headerlink" title="使用[]创建数组"></a>使用[]创建数组</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 8.使用[]创建数组</span></span><br><span class="line"><span class="keyword">var</span> arr03 = [<span class="string">"cat"</span>,<span class="string">"dog"</span>,<span class="string">"tiger"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr03);</span><br></pre></td></tr></tbody></table></figure><p>arr.push()<br>arr.sort()</p><h3 id="数组转字符串"><a href="#数组转字符串" class="headerlink" title="数组转字符串"></a>数组转字符串</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// join() 方法可以把数组转换为字符串，不过它可以指定分隔符。在调用 join() 方法时，可以传递一个参数作为分隔符来连接每个元素。如果省略参数，默认使用逗号作为分隔符</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];  <span class="comment">//定义数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = a.join(<span class="string">""</span>);  <span class="comment">//指定分隔符</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(s);  <span class="comment">//返回字符串“12345”</span></span><br></pre></td></tr></tbody></table></figure><h3 id="使用数组的多个值时"><a href="#使用数组的多个值时" class="headerlink" title="使用数组的多个值时"></a>使用数组的多个值时</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当需要使用数组的多个值时，请使用解构赋值  </span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">const</span> first = arr[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> second = arr[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">const</span> [first, second] = arr</span><br></pre></td></tr></tbody></table></figure><h3 id="调用数组每个元素"><a href="#调用数组每个元素" class="headerlink" title="调用数组每个元素"></a>调用数组每个元素</h3><p>forEach() 方法用于调用数组的每个元素，并将元素传递给回调函数。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{<span class="built_in">console</span>.log(i);})</span><br></pre></td></tr></tbody></table></figure><h3 id="反序使用数组"><a href="#反序使用数组" class="headerlink" title="反序使用数组"></a>反序使用数组</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">arr=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.slice(-<span class="number">1</span>)[<span class="number">0</span>])  <span class="comment">//截取数组最后一位（返回的是个数组）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// .at(index): 可以获取到index索引处的元素(就是这么直接)</span></span><br><span class="line"><span class="comment">// .at()是ES2022的新语法，目前兼容性还不是很好，慎用！</span></span><br><span class="line"><span class="comment">// .at()支持正索引和负索引</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.at(-<span class="number">1</span>)); <span class="comment">// 4</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="filter-函数"><a href="#filter-函数" class="headerlink" title="filter()函数"></a>filter()函数</h3><p>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。用于把Array中的某些元素过滤掉，然后返回剩下的未被过滤掉的元素。<br>和map()类似，Array的filter()也接收一个函数。和map()不同的是，filter()把传入的函数依次作用于每个元素，然后根据返回值是true还是false决定保留还是丢弃该元素。</p><p>filter() 不会对空数组进行检测；</p><p>filter() 不会改变原始数组。<br>array.filter(function(currentValue,index,arr), thisValue);</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/dy5mld">autojs之递归</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历文件夹, 获取文件列表</span></span><br><span class="line"><span class="keyword">let</span> dirPath = <span class="string">"/sdcard/脚本"</span>;</span><br><span class="line"><span class="keyword">let</span> filePathList = getFilePathList(dirPath);</span><br><span class="line">log(filePathList);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFilePathList</span>(<span class="params">dirPath, filePathList</span>) </span>{</span><br><span class="line">  filePathList = filePathList || [];</span><br><span class="line">  <span class="keyword">var</span> fileNameList = files.listDir(dirPath);</span><br><span class="line">  <span class="keyword">var</span> len = fileNameList.length;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) {</span><br><span class="line">    <span class="keyword">let</span> filepath = files.join(dirPath, fileNameList[i]);</span><br><span class="line">    <span class="keyword">if</span> (files.isFile(filepath)) {</span><br><span class="line">      filePathList.push(filepath);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="comment">// 文件夹, 继续向下递  </span></span><br><span class="line">      getFilePathList(filepath, filePathList);</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// 文件遍历完成, 终止条件, 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> filePathList;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>js的传参按顺序传递，如果接收参数是三位，而你只传了两位，不会报错但是会返回undefined</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置默认参数</span></span><br><span class="line"><span class="keyword">var</span> n= n || <span class="number">8</span></span><br></pre></td></tr></tbody></table></figure><h3 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 匿名函数表达式</span></span><br><span class="line"><span class="keyword">var</span> anonymous = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有名函数表达式(在一个非函数块里声明一个函数)</span></span><br><span class="line"><span class="keyword">if</span> (currentUser) {</span><br><span class="line">  <span class="keyword">var</span> test = <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Yup.'</span>);</span><br><span class="line">  };</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 自执行匿名函数 </span></span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Welcome to the Internet. Please follow me.'</span>);</span><br><span class="line">})();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数(使用函数表达式（传递匿名函数）时)</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">const</span> y = x + <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>相比于其他面向对象语言，JavaScript对象的构造函数比较特殊，它可以是任何一个普通的函数，而且无需在对象中定义。只有两个约定：<br>构造函数的命名通常以大写开头；<br>构造函数只能由new操作符执行；</p><p>当使用new调用一个函数时，这个函数就会变成构造函数<br>使用new调用函数后，函数是有返回值的，即使在定义函数时没有return语句。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.name = name;}</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> xiaoming = <span class="keyword">new</span> People(<span class="string">'xiaoming'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单独运行一个匿名函数，由于不符合语法要求，报错啦！解决方法只需要给匿名函数包裹一个括号即可：</span></span><br><span class="line"><span class="comment">//匿名函数在其它应用场景括号可以省略</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">//由于没有执行该匿名函数，所以不会执行匿名函数体内的语句。</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"张培跃"</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>如果需要执行匿名函数，在匿名函数后面加上一个括号即可立即执行！</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>{</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"张培跃"</span>);</span><br><span class="line">})()</span><br></pre></td></tr></tbody></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.经典格式： 函数名 = ( 参数 ) =&gt; { 方法体 } </span></span><br><span class="line"><span class="keyword">const</span> sum3 = <span class="function">(<span class="params">x,y</span>)=&gt;</span>{ </span><br><span class="line">  <span class="keyword">return</span> x+y; </span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(sum3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.当方法体只有一行时，花括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> sum4 = <span class="function">(<span class="params">x,y</span>) =&gt;</span> x+y;  </span><br><span class="line"><span class="built_in">console</span>.log(sum4) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只有一个参数时，括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> sum4 = <span class="function"><span class="params">x</span> =&gt;</span> x+<span class="number">1</span>;  </span><br><span class="line"><span class="built_in">console</span>.log(sum4) </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><p>eval() 函数会将传入的字符串当做 JavaScript 代码进行执行。<br>stringObject.split(separator,howmany) 方法用于把一个字符串分割成字符串数组。<br>    separator 必需。字符串或正则表达式，从该参数指定的地方分割 stringObject。</p><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>1.== 双等号 返回值只有true 和false 类型为布尔型，只比较左右的值，若相等则返回true，反之false<br>2.=== 全等号 返回值为true或false 若左右两边的值和类型均相等，则返回true，反之false<br>3.!= 不相等号 返回值为true或false 不比较类型，只比较值，若左边不等于右边则返回true，反正false</p><p>●  使用 === 和 !== 而非 == 和 !=，eslint: eqeqeq<br>●  条件声明例如 if 会用 ToBoolean 这个抽象方法将表达式转成布尔值并遵循如下规则<br>    Objects 等于 true<br>    Undefined 等于 false<br>    Null 等于 false<br>    Booleans 等于 布尔值<br>    Numbers 在 +0, -0, 或者 NaN 的情况下等于 false, 其他情况是 true<br>    Strings 为 ‘’ 时等于 false, 否则是 true  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果等于 ==</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>==<span class="number">1</span>){toastLog(<span class="string">"正确"</span>)};</span><br><span class="line"><span class="comment">//如果 不等于 !=</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span> != <span class="number">2</span>){toastLog(<span class="string">"正确"</span>)};</span><br><span class="line"><span class="comment">//如果 大于小于 &gt; &lt; 不举例子</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a=<span class="literal">true</span>;b=<span class="literal">false</span>;</span><br><span class="line"><span class="comment">//如果真判断简写 正常写 if(a == true){ }</span></span><br><span class="line"><span class="keyword">if</span>(a){toastLog(<span class="string">"a=真"</span>)}</span><br><span class="line"><span class="comment">//如果假判断简写 正常写 if(b == false){ }</span></span><br><span class="line"><span class="keyword">if</span>(!b){toastLog(<span class="string">"b=假"</span>)}</span><br><span class="line"></span><br><span class="line"><span class="comment">// &amp;&amp; = 并且</span></span><br><span class="line"><span class="keyword">if</span>( a==<span class="literal">true</span> &amp;&amp; b==<span class="literal">false</span> ){</span><br><span class="line">toastLog(<span class="string">"a为真-b为假"</span>)</span><br><span class="line">}</span><br><span class="line"><span class="comment">// || = 或者</span></span><br><span class="line"><span class="keyword">if</span>( a==<span class="literal">false</span> || b==<span class="literal">false</span> ){</span><br><span class="line">toastLog(<span class="string">"a或者b其中为假"</span>)</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="if-else-if-else"><a href="#if-else-if-else" class="headerlink" title="if else if else"></a>if else if else</h3><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1)</span><br><span class="line">{</span><br><span class="line">    当条件 <span class="number">1</span> 为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2)</span><br><span class="line">{</span><br><span class="line">    当条件 <span class="number">2</span> 为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">  当条件 <span class="number">1</span> 和 条件 <span class="number">2</span> 都不为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Switch-语句"><a href="#Switch-语句" class="headerlink" title="Switch 语句"></a>Switch 语句</h3><p>计算一次 switch 表达式<br>把表达式的值与每个 case 的值进行对比<br>如果存在匹配，则执行关联代码</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(表达式) {</span><br><span class="line">     <span class="keyword">case</span> n:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> n:</span><br><span class="line">        代码块</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">default</span>:</span><br><span class="line">        默认代码块</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p><strong>for语句</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (语句 <span class="number">1</span>; 语句 <span class="number">2</span>; 语句 <span class="number">3</span>)</span><br><span class="line">{</span><br><span class="line">    被执行的代码块</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>for/in - 循环遍历对象的属性</p><p><strong>while</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (条件)</span><br><span class="line">{</span><br><span class="line">    需要执行的代码</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>do/while</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line">    需要执行的代码</span><br><span class="line">}</span><br><span class="line"><span class="keyword">while</span> (条件);</span><br></pre></td></tr></tbody></table></figure><h2 id="js正则"><a href="#js正则" class="headerlink" title="js正则"></a>js正则</h2><p>autojspro不支持正则前向断言</p><h3 id="str正则"><a href="#str正则" class="headerlink" title="str正则"></a>str正则</h3><p>str.search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。<br>match    找到一个或多个正则表达式的匹配。<br>str.replace() 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。</p><h3 id="RegExp正则对象"><a href="#RegExp正则对象" class="headerlink" title="RegExp正则对象"></a>RegExp正则对象</h3><p>RegExp.exec    检索字符串中指定的值。返回找到的值，并确定其位置。<br>RegExp.test    检索字符串中指定的值。返回 true 或 false。<br>RegExp.toString    返回正则表达式的字符串。<br>该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</p><h2 id="模块管理"><a href="#模块管理" class="headerlink" title="模块管理"></a>模块管理</h2><h3 id="CJS模块管理"><a href="#CJS模块管理" class="headerlink" title="CJS模块管理"></a>CJS模块管理</h3><p><strong>模块化</strong>主要是用于管理代码，解决解耦与复用问题<br>命名冲突，全局污染<br>模块内部逻辑的封装性隔离<br>模块之间的通讯（依赖引用、循环引用、引用顺序）</p><p>CJSCommonJS，主要用于服务器端如node.js，主要使用如下：</p><p><strong>CommonJS规范缺点</strong><br>CommonJS加载模块是同步的：同步的意味着只有等到对应的模块加载完毕，当前模块中的内容才能被运行。<br>这个在服务器不会有什么问题，因为服务器加载的js文件都是本地文件，加载速度非常快。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在模块文件中导出</span></span><br><span class="line"><span class="keyword">const</span> object = {</span><br><span class="line">    <span class="attr">HaoranOcrClick</span>: HaoranOcrClick,</span><br><span class="line">    <span class="attr">BdOcrClick</span>: BdOcrClick,</span><br><span class="line">};</span><br><span class="line"><span class="built_in">module</span>.exports = object;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 在使用文件引入</span></span><br><span class="line"><span class="keyword">const</span> ocr = <span class="built_in">require</span>(<span class="string">"/sdcard/脚本/模块/ocr模块.js"</span>);</span><br><span class="line"><span class="comment">// "/storage/emulated/0/"</span></span><br><span class="line">ocr.HaoranOcrClick(<span class="string">''</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="ESM"><a href="#ESM" class="headerlink" title="ESM"></a>ESM</h3><p>ESM是ESModule，是ECMAScript自己的模块体系，于ES6引入，基本上可以完全取代CJS和AMD。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导出：export命令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = {<span class="attr">name</span>: <span class="string">'E1e'</span>}；</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 默认导出 export default命令</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> {<span class="attr">name</span>: <span class="string">'E1e'</span>};</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 引入接口：import命令</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 引入普通导出</span></span><br><span class="line"><span class="keyword">import</span> { obj } <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 引入默认导出</span></span><br><span class="line"><span class="keyword">import</span> obj <span class="keyword">from</span> <span class="string">'./test.js'</span>;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="命名约定"><a href="#命名约定" class="headerlink" title="命名约定"></a>命名约定</h2><h3 id="方法命名"><a href="#方法命名" class="headerlink" title="方法命名"></a>方法命名</h3><p>initXX：初始化相关方法，使用 init 为前缀标识，如初始化布局 initView<br>isXX：方法返回值为 boolean 型的请使用 is 或 check 为前缀标识<br>getXX：返回某个值的方法，使用 get 为前缀标识，例如 getName<br>setXX：设置某个属性值，使用 set 为前缀标识，例如 setName<br>handleXX/processXX：对数据进行处理的方法，例如 handleMessage<br>displayXX/showXX：弹出提示框和提示信息，例如 showDialog<br>updateXX：更新某个东西，例如 updateData<br>saveXX：保存某个东西，例如 saveData<br>resetXX：重置某个东西，例如 resetData<br>clearXX：清除某个东西，例如 clearData<br>removeXX：移除数据或者视图等，例如 removeView<br>drawXX：绘制数据或效果相关的，使用 draw 前缀标识，例如 drawText</p><h3 id="避免单个字符名，让你的变量名有描述意义"><a href="#避免单个字符名，让你的变量名有描述意义" class="headerlink" title="避免单个字符名，让你的变量名有描述意义"></a>避免单个字符名，让你的变量名有描述意义</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">q</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="comment">// ...stuff...</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="comment">// ..stuff..</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="当命名对象、函数和实例时使用驼峰命名规则"><a href="#当命名对象、函数和实例时使用驼峰命名规则" class="headerlink" title="当命名对象、函数和实例时使用驼峰命名规则"></a>当命名对象、函数和实例时使用驼峰命名规则</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bad</span></span><br><span class="line"><span class="keyword">var</span> OBJEcttsssss = {};</span><br><span class="line"><span class="keyword">var</span> this_is_my_object = {};</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">this</span>-is-my-object = {};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>{};</span><br><span class="line"><span class="keyword">var</span> u = <span class="keyword">new</span> user({</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">// good</span></span><br><span class="line"><span class="keyword">var</span> thisIsMyObject = {};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">thisIsMyFunction</span>(<span class="params"></span>) </span>{};</span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User({</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Bob Parr'</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>promise是一个异步编程的抽象，它是一个返回值或抛出exception的代理对象，<br>一般promise对象都有一个then方法，这个then方法是我们如何获得返回值(成功实现承诺的结果值，称为fulfillment)或抛出exception(拒绝承诺的理由，称为rejection)，then是用两个可选的回调作为参数，我们可以称为onFulfilled和OnRejected：</p><pre><code>一个promise有下面三个不同状态：pending待承诺 - promise初始状态fulfilled实现承诺 - 一个承诺成功实现状态rejected拒绝承诺 - 一个承诺失败的状态</code></pre><p>　以读取文件为案例，下面是使用回调实现读取文件后应该做什么事情(输出打印)：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">readFile(<span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>{</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>　如果我们的readFile函数返回一个promise，那么我们可以如下实现同样的逻辑(输出打印)：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = readFile()</span><br><span class="line">promise.then(<span class="built_in">console</span>.log, <span class="built_in">console</span>.error)</span><br></pre></td></tr></tbody></table></figure><h3 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// await 关键字后的函数</span></span><br><span class="line"><span class="keyword">var</span> Delay_Time = <span class="function"><span class="keyword">function</span>(<span class="params">ms</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>{</span><br><span class="line">        <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>)</span><br><span class="line">    } )</span><br><span class="line">}</span><br><span class="line"><span class="comment">// async 函数(在函数体前通过关键字async可以将函数变为async函数)</span></span><br><span class="line"><span class="keyword">var</span> Delay_Print = <span class="keyword">async</span> <span class="function"><span class="keyword">function</span>(<span class="params">ms</span>) </span>{</span><br><span class="line">  <span class="comment">// 在async函数中对需要异步执行的函数前需加await关键字</span></span><br><span class="line">  <span class="keyword">await</span> Delay_Time(ms)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">    resolve(<span class="string">"End"</span>);</span><br><span class="line">  })</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 执行async函数后</span></span><br><span class="line">Delay_Print(<span class="number">1000</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>{</span><br><span class="line">    <span class="built_in">console</span>.log(resolve);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><p>上面的示例代码定义了三个方法块，分别是async 声明的函数体、await 执行的函数体、async 函数执行后的函数体。整段代码执行的结果是在1000毫秒后，控制台打印出“End”。</p><p>通过整段代码我们可以看出：<br>c. await后的函数必须使用Promise对象封装<br>d. async函数执行后返回的是一个Promise对象</p><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。电脑安装了Node.js后， Node.js 相当于浏览器，也可以在里面运行 JavaScript 了！</p><h2 id="Nodejs的组成"><a href="#Nodejs的组成" class="headerlink" title="Nodejs的组成"></a>Nodejs的组成</h2><p>ECMAScript(语言基础，如：语法、数据类型结构以及一些内置对象)</p><p>os(操作系统)</p><p>file(文件系统)</p><p>net(网络系统)</p><p>database(数据库)</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://nodejs.org/en/">Node.js下载地址</a></p><p>打开cmd输入命令检查是否安装成功：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v  #查看node版本</span><br><span class="line">npm -v   #查看npm版本</span><br></pre></td></tr></tbody></table></figure><p>Node.js 安装成功时也默认安装了 npm， npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。是用来安装/卸载Node.js需要装的东西</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>1.修改全局模块路径和缓存路径<br>当我们在执行<code>npm install express -g</code>命令时，会默认下载到c盘，更改下载盘<br>在nodejs安装目录下创建创建两个文件夹，名称分别为：node_global(全局模块)和node_cache(缓存)，在node_global文件夹下再建一个node_modules文件夹，配置环境变量用</p><p>2.win+R打开运行窗口，输入cmd，再输入以下两条指令<br>npm config set prefix “创建的node_global文件夹所在路径”<br>npm config set cache “创建的node_cache文件夹所在路径”</p><p>3.修改完毕后，再配置环境变量<br>右键此电脑——&gt;高级系统设置——&gt;环境变量<br>在系统变量中，新建，变量名：NODE_PATH<br>变量值：node_global文件夹下的node_modules文件夹。如：E:\develop\nodejs\node_global\node_modules</p><p>修改用户变量中的Path变量，将默认的npm路径修改为新建的node_global路径<br>如：D:\ruanjian\nodejs\node_global</p><h2 id="nodejs执行js代码"><a href="#nodejs执行js代码" class="headerlink" title="nodejs执行js代码"></a>nodejs执行js代码</h2><h3 id="命令行运行nodejs文件"><a href="#命令行运行nodejs文件" class="headerlink" title="命令行运行nodejs文件"></a>命令行运行nodejs文件</h3><p>打开命令行窗口，把当前目录切换到.js所在目录  </p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 文件名.js</span><br></pre></td></tr></tbody></table></figure><h3 id="vscode搭建node开发环境"><a href="#vscode搭建node开发环境" class="headerlink" title="vscode搭建node开发环境"></a>vscode搭建node开发环境</h3><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><a href="https://yafine-blog.cn/posts/8094.html">参考</a><br>npm (node package manager) 是 JavaScript 的包管理工具，是 Node.js 平台的默认包管理工具，简单地说，就是通过 npm 下载模块，复用已有的代码，提高工作效率。</p><p>NPM是随同NodeJS一起安装的包管理工具，能解决NodeJS代码部署上的很多问题，常见的使用场景有以下几种：</p><p>允许用户从NPM服务器下载别人编写的第三方包到本地使用。<br>允许用户从NPM服务器下载并安装别人编写的命令行程序到本地使用。<br>允许用户将自己编写的包或命令行程序上传到NPM服务器供别人使用。<br><code>npm -v   #npm版本</code></p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>npm 由三个独立的部分组成：</p><ul><li>网站</li><li>注册表（registry）</li><li>命令行工具 (CLI)</li></ul><p><a href="https://www.npmjs.com/">网站</a> 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。</p><p>注册表 是一个巨大的数据库，保存了每个包（package）的信息。</p><p>CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。<br> <a href="https://www.axihe.com/api/npm/api/api.html">npm中文文档</a></p><h3 id="切换为-taobao-镜像源"><a href="#切换为-taobao-镜像源" class="headerlink" title="切换为 taobao 镜像源"></a>切换为 taobao 镜像源</h3><p>国内使用 npm 可能很慢。你可以考虑切换为 taobao 镜像源。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">npm install <span class="comment"># 安装</span></span><br><span class="line"></span><br><span class="line">npm uninstall  <span class="comment"># 卸载</span></span><br><span class="line"></span><br><span class="line">npm cache clean -f  <span class="comment"># 清理缓存</span></span><br><span class="line"></span><br><span class="line">npm list -g  <span class="comment">#查看所有全局安装的模块</span></span><br><span class="line">npm list &lt;Module Name&gt; <span class="comment">#查看某个模块的版本</span></span><br><span class="line"><span class="comment">#使用 npm 命令安装模块</span></span><br><span class="line">npm install &lt;Module Name&gt;  <span class="comment"># 本地安装</span></span><br><span class="line">npm install &lt;Module Name&gt; -g   <span class="comment"># 全局安装</span></span><br><span class="line"></span><br><span class="line">npm uninstall &lt;Module Name&gt;   <span class="comment">#卸载</span></span><br><span class="line">npm update</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>本地安装：</p><ol><li>将安装包放在 ./node_modules 下（运行 npm 命令时所在的目录），如果没有 node_modules 目录，会在当前执行 npm 命令的目录下生成 node_modules 目录。</li><li>可以通过 require() 来引入本地安装的包。<br>全局安装：</li><li>将安装包放在 /usr/local 下或者你 node 的安装目录。</li><li>可以直接在命令行里使用。</li></ol><h3 id="创建npm模块"><a href="#创建npm模块" class="headerlink" title="创建npm模块"></a>创建npm模块</h3><p><code>npm init</code></p><p>版本号:<br>  使用NPM下载和发布代码时都会接触到版本号。NPM使用语义版本号来管理代码，这里简单介绍一下。</p><p>  语义版本号分为X.Y.Z三位，分别代表主版本号、次版本号和补丁版本号。当代码变更时，版本号按以下原则更新。</p><p>  如果只是修复bug，需要更新Z位。<br>  如果是新增了功能，但是向下兼容，需要更新Y位。<br>  如果有大变动，向下不兼容，需要更新X位。</p><h2 id="cnpm-是什么？"><a href="#cnpm-是什么？" class="headerlink" title="cnpm 是什么？"></a>cnpm 是什么？</h2><p>简单的讲就是中国版的 NPM，因为 npm 安装插件是从国外服务器下载，受网络影响大，可能出现异常，<br>需要安装 cnpm 模块，命令如下：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></tbody></table></figure><p>cnpm 支持可以使用支持 npm 除 publish 之外的所有命令。</p><p>因为 cnpm 的仓库只是 npm 仓库的一个拷贝，它不承担 publish 工作，所以执行 cnpm publish 命令会失败的。</p><h2 id="yarn-是什么？"><a href="#yarn-是什么？" class="headerlink" title="yarn 是什么？"></a>yarn 是什么？</h2><p>Yarn 是一个软件包管理器，还可以作为项目管理工具，你可以通过它使用全世界开发者的代码， 或者分享自己的代码。</p><p>从 npm 安装软件包并保持相同的包管理流程。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>1.速度超快。<br>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p>2.超级安全<br>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p><p>3.超级可靠<br>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。<br>通过命令安装</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></tbody></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>yarn init：初始化项目，会在根目录下生成一个 package.json，与 npm 类似具体不做解释</p><p>yarn add <package name="">：安装依赖包，会自动安装最新版本，会覆盖指定版本号</package></p><p>yarn add <package name1=""> <package name1="">：一次性添加多个包</package></package></p><p>yarn add <package name="">@version：添加指定版本的包</package></p><p>yarn upgrade <package name="">@version：将包更新到指定版本</package></p><p>yarn upgrade –latest <package name="">：将包更新到最新版本</package></p><p>yarn remove <package name="">：删除包</package></p><p>yarn remove <package name1=""> <package name2="">：一次性删除多个包</package></package></p><p>yarn info <packagename> ：可以用来查看某个模块的最新版本信息</packagename></p><p>yarn install：安装 package.json 里所有包，并将包及它的所有依赖项保存进 yarn.lock</p><p>yarn install –force ：强制重新下载所有包</p><p>yarn install –flat：安装一个包的单一版本</p><p>yarn install –production：只安装 dependencies 里的包</p><p>yarn install –no-lockfile：不读取或生成 yarn.lock</p><p>yarn install –pure-lockfile：不生成 yarn.lock</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>安装npm模块时，没有权限<br>解决方法：打开nodejs安装目录的属性把权限全部勾上</p><p>npm的包安装分为本地安装（local）、全局安装（global）两种<br> 本地安装: npm install xxx 安装到命令行所在目录的node_module目录。<br> 全局安装: npm install xxx -g 安装到 \AppData\Roaming\npm\node_modules目录。</p><h1 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h1><p><a href="https://www.axios-http.cn/docs/intro">Axios中文网</a><br>Axios 是一个基于 promise 网络请求库，作用于node.js 和浏览器中。 它是 isomorphic 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js http 模块, 而在客户端 (浏览端) 则使用 XMLHttpRequests。</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">使用 npm:</span><br><span class="line"></span><br><span class="line">$ npm install axios</span><br><span class="line">使用 bower:</span><br><span class="line"></span><br><span class="line">$ bower install axios</span><br><span class="line">使用 yarn:</span><br><span class="line"></span><br><span class="line">$ yarn add axios</span><br><span class="line">使用 jsDelivr CDN:</span><br><span class="line"></span><br><span class="line">&lt;script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"&gt;&lt;/script&gt;</span><br><span class="line">使用 unpkg CDN:</span><br><span class="line"></span><br><span class="line">&lt;script src="https://unpkg.com/axios/dist/axios.min.js"&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机原理</title>
      <link href="/2022/051717870.html"/>
      <url>/2022/051717870.html</url>
      
        <content type="html"><![CDATA[<h1 id="计算机操作系统"><a href="#计算机操作系统" class="headerlink" title="计算机操作系统"></a>计算机操作系统</h1><h2 id="操作系统的功能和目标"><a href="#操作系统的功能和目标" class="headerlink" title="操作系统的功能和目标"></a>操作系统的功能和目标</h2><p>作为用户与计算机硬件之间的接口</p><h3 id="用户接口"><a href="#用户接口" class="headerlink" title="用户接口"></a>用户接口</h3><p>操作系统作为用户和计算机硬件之间的接口，需要向上提供一些服务，主要包括命令接口和程序接口</p><h4 id="命令接口"><a href="#命令接口" class="headerlink" title="命令接口"></a>命令接口</h4><p>允许用户直接使用<br><strong>交互式命令接口</strong><br>cmd<br>联机命令接口=交互式命令接口：用户说一句，系统做一件</p><p><strong>批处理命令接口</strong><br>脱机命令接口=批处理命令接口：用户说一堆，系统做一堆</p><h4 id="系统调用-程序接口"><a href="#系统调用-程序接口" class="headerlink" title="系统调用(程序接口)"></a>系统调用(程序接口)</h4><p>允许用户通过程序间接使用<br>用户进程想要使用硬件资源，只能通过系统调用向操作系统发出请求，操作系统会对各个请求进行协调管理</p><h4 id="GUI图形用户界面"><a href="#GUI图形用户界面" class="headerlink" title="GUI图形用户界面"></a>GUI图形用户界面</h4><h2 id="并发："><a href="#并发：" class="headerlink" title="并发："></a>并发：</h2><p>并发指两个或者多个事件同一时间间隔内发生。这些事件在宏观上是同时发生的，但在微观上是交替发生。</p><p>并行：指两个或者多个事件同一时刻同时发生。</p><h2 id="共享："><a href="#共享：" class="headerlink" title="共享："></a>共享：</h2><p>共享即资源共享，是指系统中的资源可供内存中多个并发执行的进程共同使用。</p><p><strong>两种资源共享方式：</strong></p><p>互斥共享方式：系统中的某些资源，虽然可以提供给多个进程使用，但是一个时间段<br>同时共享方式：系统中的某些资源，允许一个时间段内由多个进程”同时”对其进行访问<br>        所谓的”同时”往往是指宏观上的，而为微观上，这些进程可能是交替地对该资源进行访问（即分时共享）。</p><p><strong>并发和共享的关系：</strong></p><p>并发性：指计算机系统中同时存在着多个运行着的程序。<br>共享性：指系统中的资源可以提供给内存中多个并发执行的进程共同使用。<br>如果失去并发性，则系统中只有一个程序正在运行，则共享性失去存在的意义。<br>如果失去共享性，则多个程序进程不能同时访问硬盘资源，就无法同时对硬盘中的数据进行操作，也就无法并发。</p><h2 id="进程与进程管理"><a href="#进程与进程管理" class="headerlink" title="进程与进程管理"></a>进程与进程管理</h2><p>引入进程的<strong>作用</strong>：为了方便操作系统管理，完成各个程序并发执行<br><strong>程序</strong>：就是一个指令序列！ </p><p><strong>进程的构成</strong><br>程序段：程序的代码存放的内存空间<br>数据段：程序运行过程中处理的数据存放的内存空间<br>PCB：称为进程控制块（PCB），用来描述进程的各种信息（如程序代码存放位置）PCB是进程存在的唯一标志</p><p>程序段、数据段、PCB三部分组成了进程实体（进程映像）。一般情况下，我们把进程实体就简称为进程。例如，所谓创建进程，实质上是创建进程实体中的PCB；而撤销进程，实质上是撤销进程实体中的PCB。注意：PCB是进程存在的唯一标志！</p><p>从不同的角度，<strong>进程</strong>可以有不同的定义，比较传统典型的定义有：<br>  进程是程序的一次执行过程。执行前需要将该程序放到内存中，才能够被CPU处理<br>  进程是一个程序及其数据在处理机上顺序执行时所发生的活动。<br>  进程是具有独立功能的程序在数据集合上运行的过程，它是系统进行资源分配和调度的一个独立单位。</p><p>引用进程实体的概念后，可把进程定义为：<br>  进程是进程实体的运行过程，是系统进程资源分配和调度的一个独立单位。<br>  严格来说，进程实体和进程并不一样，进程实体是静态的，进程则是动态的。</p><h3 id="进程特性"><a href="#进程特性" class="headerlink" title="进程特性"></a>进程特性</h3><p>进程的异步性：并发执行的进程以各自独立的、不可预知的速度向前推进</p><h3 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h3><p>进程控制相关的原语：创建、终止、阻塞、唤醒、切换。也就是说我们通过原语进行进程控制，原语的执行具有原子性，不允许被中断，原语的实现可以通过“关中断指令”和“开中断指令”实现。</p><p>进程状态：运行态，就绪态，阻塞态</p><p>进程状态转换的条件：</p><p>  运行 -&gt; 阻塞 等待I/O或事件完成</p><p>  运行 -&gt; 就绪 进程的CPU时间片用完</p><p>  就绪 -&gt; 运行 获得了CPU的时间片</p><p>  阻塞 -&gt; 就绪 I/O或事件完成</p><h3 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h3><p><a href="https://blog.csdn.net/weixin_46013401/article/details/110819774">https://blog.csdn.net/weixin_46013401/article/details/110819774</a></p><p>1.先来先服务（FCFS）算法：按到达的先后顺序</p><p>2.短作业优先算法：选择当前已到达的，且运行时间最短的进程</p><p>3.优先级调度算法：</p><h3 id="各种时间"><a href="#各种时间" class="headerlink" title="各种时间"></a>各种时间</h3><p>周转时间：作业被提交给系统开始，到作业完成为止的这段时间间隔。<br>包括：（1）作业在外存后备队列上的等待作业调度的时间。（2）进程在就绪队列上等待进程调度的时间。（3）进程在CPU上执行的时间。（4）进程等待IO操作完成的时间（阻塞队列中等待时间）。<br><strong>公式</strong><br>等待时间=周转时间-运行时间<br>周转时间=等待时间+运行时间=完成时间-到达时间</p><p>平均周转时间=各个作业周转时间之和/作业数</p><p>带权周转时间=作业周转时间/作业实际运行时间</p><p>平均带权周转时间=各个作业带权周转时间之和/作业数</p><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><h3 id="死锁的概念与处理"><a href="#死锁的概念与处理" class="headerlink" title="死锁的概念与处理"></a>死锁的概念与处理</h3><p><strong>死锁的4个条件</strong>，缺一不可</p><p>互斥条件：对必须互斥使用的资源的争抢才会导致死锁</p><p>不剥夺条件：进程所获得的资源未使用完之前，不能被其他进程强行夺走，只能主动释放。</p><p>请求和保持条件：进程已经保持了至少一个资源，但又提出了新的资源请求，而该资源又被其他进程占有，此时请求进程被阻塞，但又对自己有的资源保持不放。就像很窄的桥，两个人都要去对面，但谁又都无法让出位置来</p><p>循环等待条件：存在一种进程资源的循环等待，链中的每一个进程已获得的资源同时被下一个进程所请求。想象有一个闭环，闭环上每个人都需要下一个人手上的某个资源，那么所有人都没办法满足</p><p><strong>死锁预防</strong></p><p>破坏互斥条件(创建一个队列，所有的请求都会被快速响应，然后队列逐渐将请求发送到处理器进行整理)</p><p>破坏不剥夺条件(进程的某个资源得不到满足时，就必须立刻释放所持有的资源)</p><p>破坏请求和保持条件(静态分配，进程在运行前就一次性申请全部的资源，不满足就不让允许，就像过桥时保证桥上没人才让通行，否则禁止通行)</p><p>破坏循环等待条件(资源编号，进程必须按照编号递增的顺序请求资源,这样就不会出现持有大资源请求小资源的情况，也就不会有循环的等待)</p><p>(方式较多，这里简单列举一些案例)</p><p><strong>死锁避免</strong></p><p>银行家算法：进程提出资源申请时，先判断这次分配会不会导致系统进入不安全状态，如果会则不答应请求，让该进程阻塞。简而言之，请求不能大于手中的资源。这种算法也叫银行家算法。</p><h3 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h3><p><strong>原语</strong>：是一种特殊的程序段。其执行只能一气呵成，不可被中断<br>用户进程通过使用操作系统提供的一对原语来对信号量进行操作，从而实现对进程互斥，进程同步</p><p>信号量其实是一个变量，用一个信号量来表示系统中某种资源的数量<br>对信号量的操作只有三种(初始化，P操作，V操作)</p><p>整型信号量:<br>记录型信号量</p><h3 id="进程同步和进程互斥"><a href="#进程同步和进程互斥" class="headerlink" title="进程同步和进程互斥"></a>进程同步和进程互斥</h3><h3 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h3><p>1.管道（pipe）及有名管道（named pipe）：</p><p>管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p><p>有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p><p>2.信号（signal）：</p><p>  信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p><p>3.消息队列（message queue）：</p><p>消息队列是消息的链接表，它克服了上两种通信方式中信号量有限的缺点，具有写权限得进程可以按照一定得规则向消息队列中添加新信息；对消息队列有读权限得进程则可以从消息队列中读取信息。       </p><p>其基本思想是:根据”生产者-消费者”原理,利用内存中公用消息缓冲区实现进程之间的信息交换.  </p><p>内存中开辟了若干消息缓冲区,用以存放消息.每当一个进程向另一个进程发送消息时,便申请一个消息缓冲区,并把已准备好的消息送到缓冲区,然后把该消息缓冲区插入到接收进程的消息队列中,最后通知接收进程.接收进程收到发送里程发来的通知后,从本进程的消息队列中摘下一消息缓冲区,取出所需的信息,然后把消息缓冲区不定期给系统.系统负责管理公用消息缓冲区以及消息的传递.<br>一个进程可以给若干个进程发送消息,反之,一个进程可以接收不同进程发来的消息.显然,进程中关于消息队列的操作是临界区.当发送进程正往接收进程的消息队列中添加一条消息时,接收进程不能同时从该消息队列中到出消息:反之也一样.<br>4.共享内存（shared memory）：</p><p>  可以说这是最有用的进程间通信方式。它使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据得更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。</p><p>这种通信模式需要解决两个问题：第一个问题是怎样提供共享内存；第二个是公共内存的互斥关系则是程序开发人员的责任。   </p><p>5.信号量（semaphore）：</p><p>  主要作为进程之间及同一种进程的不同线程之间得同步和互斥手段。</p><p>6.套接字（socket）；</p><p>  套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</p><h2 id="中断与异常"><a href="#中断与异常" class="headerlink" title="中断与异常"></a>中断与异常</h2><p>中断机制实现了多道程序并发执行，<br>发生中断意味着需要操作系统介入，开展管理工作。由于操作系统的管理工作（比如进程切换、分配i/o设备）需要特权指令，中断使cpu从用户态转换到核心态。并且是唯一途径</p><p><strong>内中断(异常)</strong><br>内中断也称为异常，例外，陷入</p><p><strong>外中断</strong>：信号来源于cpu外部，于当前指令无关</p><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>死锁（Deadlock）：是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。称此时系统处于死锁状态或系统产生了死锁。<br>称这些永远在互相等待的进程为死锁进程。</p><h2 id="存储管理"><a href="#存储管理" class="headerlink" title="存储管理"></a>存储管理</h2><h3 id="固定分区存储管理"><a href="#固定分区存储管理" class="headerlink" title="固定分区存储管理"></a>固定分区存储管理</h3><h3 id="可变分区存储管理"><a href="#可变分区存储管理" class="headerlink" title="可变分区存储管理"></a>可变分区存储管理</h3><h3 id="分页存储管理"><a href="#分页存储管理" class="headerlink" title="分页存储管理"></a>分页存储管理</h3><h2 id="磁盘移臂调度"><a href="#磁盘移臂调度" class="headerlink" title="磁盘移臂调度"></a>磁盘移臂调度</h2><p>磁盘移臂调度的目的是尽可能地减少输入输出操作中的寻找时间。<br>常用的移臂调度算法有：① 先来先服务算法② 最短寻找时间优先算法③ 电梯调度算法④ 单向扫描算法。</p><h2 id="I-O-控制方式"><a href="#I-O-控制方式" class="headerlink" title="I/O 控制方式"></a>I/O 控制方式</h2><p>①程序I/O控制方式:适用于结构简单，只需少量硬件的电路；<br>②中断驱动I/O控制方式：适用于高效场合；<br>③直接存储访问DMA I/O控制方式：适用于无须CPU介入的控制器来控制内存与外设之间的数据交流的场合；</p><p>④I/O通道控制方式：适用于以字节为单位的干预，同时实现CPU，通道和I/O设备三者并行操作的场合。<br>—- I/O通道控制方式是对DMA控制方式的发展，它进一步使CPU参与到数据传输的控制减少，即把对一个数据块的读/写为单位的干预，减少为对一组数据块的读/写及有关的控制和管理为单位的干预。同时，又可实现CPU、通道和I/O设备的并行操作，从而更有效地提高整个系统的资源利用率。在通道控制方式中，CPU只需发出启动指令，指出要求通道执行的操作和使用的I/O设备，该指令就可以启动通道并使该通道从内存中调出相应的通道程序执行。</p><h1 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h1><p>在计算机中任意数据都是以二进制的形式来储存的</p><h2 id="任意进制转十进制"><a href="#任意进制转十进制" class="headerlink" title="任意进制转十进制"></a>任意进制转十进制</h2><p>系数*基数的权次幂 相加<br>基数：当前机制数<br>权：从左到右依次是0，1，2，3</p><h3 id="二进制转十进制"><a href="#二进制转十进制" class="headerlink" title="二进制转十进制"></a>二进制转十进制</h3><p>8421快速转换法：<br>每一位二进制值的1都代表一个固定数值，把每一位的1代表的十进制数加起来的结果就是所代表的十进制数<br>记住 256      128      64       32      16      8        4         2         1</p><p>01111101<br>先写上 ：  0         1         1       1         1         1          0          1<br>然后填充   128      64        32       16        8          4          2          1<br>十进制为 64+32+16+8+4+1=125</p><h2 id="十进制转其他进制"><a href="#十进制转其他进制" class="headerlink" title="十进制转其他进制"></a>十进制转其他进制</h2><p>除基取余法：不断的除以基数,得到余数，知道商为0，再将余数倒着拼起来即为所求进制数</p><p>注意16进制A<del>F表示10</del>15</p><h1 id="路径相关"><a href="#路径相关" class="headerlink" title="路径相关"></a>路径相关</h1><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h1 id="图像相关"><a href="#图像相关" class="headerlink" title="图像相关"></a>图像相关</h1><p>我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。</p><table><thead><tr><th align="center">名称</th><th align="center">RGBA值</th><th align="center">名称</th><th align="center">RGBA值</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">(255, 255, 255, 255)</td><td align="center">Red</td><td align="center">(255, 0, 0, 255)</td></tr><tr><td align="center">Green</td><td align="center">(0, 255, 0, 255)</td><td align="center">Blue</td><td align="center">(0, 0, 255, 255)</td></tr><tr><td align="center">Gray</td><td align="center">(128, 128, 128, 255)</td><td align="center">Yellow</td><td align="center">(255, 255, 0, 255)</td></tr><tr><td align="center">Black</td><td align="center">(0, 0, 0, 255)</td><td align="center">Purple</td><td align="center">(128, 0, 128, 255)</td></tr></tbody></table><ol start="2"><li>像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。<h2 id="分辨率"><a href="#分辨率" class="headerlink" title="分辨率"></a>分辨率</h2><h3 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h3>例如，屏幕分辨率是1024×768，也就是说设备屏幕的水平方向上有1024个像素点，垂直方向上有768个像素点。像素的大小是没有固定长度的，不同设备上一<br>个单位像素色块的大小是不一样的。<br>例如，尺寸面积大小相同的两块屏幕，分辨率大小可以是不一样的，</li></ol><p>分辨率高的屏幕上面像素点（色块）就多，所以屏幕内可以展示的画面就更细致，单个色<br>块面积更小。</p><p>分辨率低的屏幕上像素点（色块）更少，单个像素面积更大，可以显示的画面就没那么细致。</p><h3 id="图像分辨率"><a href="#图像分辨率" class="headerlink" title="图像分辨率"></a>图像分辨率</h3><p>例如，一张图片分辨率是500x200,也就是说这张图片在屏幕上按1:1放大时，水平方向有500个像素点（色块），垂直方向有200个像素点（色块）。</p><p>在同一台设备上，图片分辨率越高，这张图片1:1放大时，图片面积越大；图片分辨率越低，这张图片1:1缩放时，图片面积越小。（可以理解为图片的像素点和<br>屏幕的像素点是一个一个对应的）。</p><p>但是，在屏幕上把图片超过100%放大时，为什么图片上像素色块也变的越大，其实是设备通过算法对图像进行了像素补足，我们把图片放的很大后看到的一块<br>一块的方格子，虽然理解为一个图像像素，但是其实是已经补充了很多个屏幕像素；同理，把图片小于100%缩小时，也是通过算法将图片像素进行减少。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式学习</title>
      <link href="/2022/050513105.html"/>
      <url>/2022/050513105.html</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p><a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a></p><p>正则表达式是一种工具<br>验证字符串是否与指定模式匹配(例如，字符串具有电子邮件地址的格式)<br>在字符串中执行替换(例如，将所有美国拼写更改为英国拼写)。</p><p>学习正则表达式的最好方法是从例子开始，理解例子之后再自己对例子进行修改，</p><h2 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">. 匹配除换行符 (\n)以外的任意字符</span><br><span class="line">\w 匹配字母或数字或下划线或汉字</span><br><span class="line"></span><br><span class="line">\b 匹配单词的开始或结束，只匹配一个位置。</span><br><span class="line"></span><br><span class="line">"/" 是表达式开始和结束的标记</span><br><span class="line"></span><br><span class="line">^ 脱字符 表示字符串的开始 </span><br><span class="line">$ 表示字符串的结束</span><br><span class="line">\w 匹配字母/数字/下划线</span><br><span class="line">\W 匹配非字母/非数字/非下划线</span><br><span class="line">[] 匹配来自括号内字符集的任意单一字符</span><br><span class="line">[^] 匹配不在字符集中的任意单一字符，^在[]表示取反</span><br><span class="line">\d 匹配数字</span><br><span class="line">\s 匹配空白字符（包括\r、\n、\t等）</span><br></pre></td></tr></tbody></table></figure><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* 重复零次或更多次</span><br><span class="line">+ 重复一次或更多次</span><br><span class="line">? 重复零次或一次</span><br><span class="line">{n} 重复n次</span><br><span class="line">{n,} 重复n次或更多次</span><br><span class="line">{n,m} 重复n到m次</span><br></pre></td></tr></tbody></table></figure><p>当? 字符紧跟在任何一个其他限制符 (*, +, ?, {n}, {n,}, {n,m}) 后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串<br>而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，’o+?’ 将匹配单个 “o”，而 ‘o+’ 将匹配所有 ‘o’。</p><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则<strong>圆括号被视为正则表达式中的分组。</strong></p></blockquote><h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><p><strong>从高到底</strong><br>\ 转义符<br>(), (?:), (?=), [] 圆括号和方括号<br>*, +, ?, {n}, {n,}, {n,m} 限定符<br>^, $, \任何元字符、任何字符 定位点和序列（即：位置和顺序）<br>| 替换，”或”操作字符具有高于替换运算符的优先级，使得”m|food”匹配”m”或”food”。若要匹配”mood”或”food”，请使用括号创建子表达式，从而产生”(m|f)ood”。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>从浏览器拷贝出来请求头后， 需要手动的一个个加引号和逗号。现在我们利用Pycharm来进行批量替换。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Cookie: read_mode=day; default_font=font2; locale=zh-CN; remember_user_token=W1231sxMzYwNzkwMF0sIiQyYSQxMSRnNVl5MWpmZ0JINXJVazFreXlzQ0V1IiwiMTU0MDI1NTAzNS4xMDE5NDAyIl0%3D--10326e210f857747d9a7c9ace127cab6cdf8d947e; Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1540276756,1540284104,1540301802,1540371744; _m7e_session=dbf3985c991afa4c90bb79228626ed6e; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1540453366; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%221663393b621590-01c145ebcced4d-8383268-2073600-1663393b62272c%22%2C%22%24device_id%22%3A%221663393b621590-01c145ebcced4d-8383268-2073600-1663393b62272c%22%2C%22props%22%3A%7B%22%24latest_traffic_source_type%22%3A%22%E8%87%AA%E7%84%B6%E6%90%9C%E7%B4%A2%E6%B5%81%E9%87%8F%22%2C%22%24latest_referrer%22%3A%22https%3A%2F%2Fwww.baidu.com%2Flink%22%2C%22%24latest_referrer_host%22%3A%22www.baidu.com%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC%22%2C%22%24latest_utm_source%22%3A%22desktop%22%2C%22%24latest_utm_medium%22%3A%22not-signed-in-like-button%22%2C%22%24latest_utm_campaign%22%3A%22maleskine%22%2C%22%24latest_utm_content%22%3A%22note%22%7D%2C%22first_id%22%3A%22%22%7D</span><br><span class="line">Host: www.jianshu.com</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Referer: https://www.jianshu.com/c/068668542235</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">勾选Regex使用正则来对数据进行匹配批量修改</span><br><span class="line">//利用冒号做分割</span><br><span class="line">正则表达式：(.*?): ?(.*)</span><br><span class="line">//给冒号两边的数据都加上单引号， 并且在末尾增加逗号</span><br><span class="line">//$1表示第一组</span><br><span class="line">需要替换成：'$1':'$2',    </span><br></pre></td></tr></tbody></table></figure><h1 id="js的正则"><a href="#js的正则" class="headerlink" title="js的正则"></a>js的正则</h1><p>exec 一个在字符串中执行查找匹配的 RegExp 方法，它返回一个数组（未匹配到则返回 null）。</p><p>matchAll 一个在字符串中执行查找所有匹配的 String 方法，它返回一个迭代器（iterator）。</p><p>search 一个在字符串中测试匹配的 String 方法，它返回匹配到的位置索引，或者在失败时返回-1。</p><p>replace 一个在字符串中执行查找匹配的 String 方法，并且使用替换字符串替换掉匹配到的子字符串。</p><p>split 一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的 String 方法。</p><h2 id="match-方法"><a href="#match-方法" class="headerlink" title="match()方法"></a>match()方法</h2><p>stringObj.match(regExp)<br>一个在字符串中执行查找匹配的 String 方法，它返回一个数组，在未匹配到时会返回 null。<br>    stringObj是必选项，对其进行查找的string对象或字符串文字；<br>    regExp是必选项，为包含正则表达式模式和可用标志的正则表达式对象。</p><h2 id="test-方法"><a href="#test-方法" class="headerlink" title="test()方法"></a>test()方法</h2><p>一个在字符串中测试是否匹配的 RegExp 方法，它返回 true 或 false。<br>RegExpObject.test(string)<br>    string是必需。要检测的字符串。</p><h1 id="python的re正则模块"><a href="#python的re正则模块" class="headerlink" title="python的re正则模块"></a>python的re正则模块</h1><p>Python提供了re模块来支持正则表达式相关操作</p><h2 id="通用参数"><a href="#通用参数" class="headerlink" title="通用参数"></a>通用参数</h2><p>pattern : 一个字符串形式的正则表达式</p><p>string : 要匹配的内容</p><p>flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：<br>  re.I 忽略大小写<br>  re.L 表示特殊字符集 w, W, 方形, B, s, S 依赖于当前环境<br>  re.M 多行模式<br>  re.S 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）<br>  re.U 表示特殊字符集 w, W,方形, B, d, D, s, S 依赖于 Unicode 字符属性数据库<br>  re.X 为了增加可读性，忽略空格和 # 后面的注释<br>如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p><h2 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h2><p>re.compile(pattern, flags=0)<br>将正则表达式转化为对象。需要和findall(), search(), match(）搭配使用</p><p>re.search(pattern, string)的调用方式就转换为 pattern.search(string)的调用方式，多次调用一个正则表达式就重复利用这个正则对象，可以实现更有效率的匹配</p><h2 id="返回Match-object"><a href="#返回Match-object" class="headerlink" title="返回Match object"></a>返回Match object</h2><h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search()"></a>re.search()</h3><p>search(pattern, string, flags=0)<br>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象(Match object) 否则返回None<br>    pattern: 匹配的规则,<br>    string : 要匹配的内容<br>    flags : 可选，表示匹配模式，</p><h3 id="re-match"><a href="#re-match" class="headerlink" title="re.match()"></a>re.match()</h3><p>必须从字符串开头匹配,如果不是起始位置匹配成功的话，match()就返回none<br>    match函数的第一个参数是正则表达式字符串或正则表达式对象<br>    第二个参数是要跟正则表达式做匹配的字符串对象</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户名必须由字母、数字或下划线构成且长度在6~20个字符之间</span></span><br><span class="line">m1 = re.match(<span class="string">r'^[0-9a-zA-Z_]{6,20}$'</span>, username)</span><br><span class="line"><span class="comment"># QQ号是5~12的数字且首位不能为0</span></span><br><span class="line">m2 = re.match(<span class="string">r'^[1-9]\d{4,11}$'</span>, qq)</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h3 id="re-fullmatch"><a href="#re-fullmatch" class="headerlink" title="re.fullmatch()"></a>re.fullmatch()</h3><p>re.fullmatch(pattern, string, flags=0)<br> match函数的完全匹配（从字符串开头到结尾）版本</p><h3 id="group"><a href="#group" class="headerlink" title=".group()"></a>.group()</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">content = <span class="string">"abc123def"</span></span><br><span class="line">rex_compile = re.<span class="built_in">compile</span>(<span class="string">"([a-z]*)([0-9]*)([a-z]*)"</span>)</span><br><span class="line">rex = rex_compile.search(content)</span><br><span class="line"><span class="built_in">print</span>(rex.group(<span class="number">0</span>))  <span class="comment"># group()和group(0) 一样匹配的是整体</span></span><br><span class="line"><span class="built_in">print</span>(rex.group(<span class="number">1</span>))  <span class="comment"># 匹配第一个小括号的内容  abc</span></span><br><span class="line"><span class="built_in">print</span>(rex.group(<span class="number">2</span>))  <span class="comment"># 匹配第二个小括号的内容   123</span></span><br></pre></td></tr></tbody></table></figure><h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a>findall()</h2><p>findall(pattern, string, flags=0)<br>查找字符串所有与正则表达式匹配的模式 返回字符串的列表  </p><h2 id="finditer-pattern-string-flags-0"><a href="#finditer-pattern-string-flags-0" class="headerlink" title="finditer(pattern, string, flags=0)"></a>finditer(pattern, string, flags=0)</h2><p>函数re.finditer与re.findall做同样的事情，只是它返回一个迭代器，而不是列表。<br>查找字符串所有与正则表达式匹配的模式 返回一个迭代器</p><h2 id="split-pattern-string-maxsplit-0-flags-0"><a href="#split-pattern-string-maxsplit-0-flags-0" class="headerlink" title="split(pattern, string, maxsplit=0, flags=0)"></a>split(pattern, string, maxsplit=0, flags=0)</h2><p>用正则表达式指定的模式分隔符拆分字符串 返回列表</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 拆分长字符串</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[，。, .]'</span>, poem)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)</span><br><span class="line">        <span class="comment"># 删除列表中的空字符串</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)  <span class="comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="替换"><a href="#替换" class="headerlink" title="替换"></a>替换</h2><p>re.sub(pattern, repl, string, count=0, flags=0)<br>用指定的字符串替换原字符串中与正则表达式匹配的模式</p><p>  pattern : 正则中的模式字符串。<br>  repl : 替换的字符串，也可为一个函数。<br>  string : 要被查找替换的原始字符串。<br>  count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。<br>  flags : 编译时用的匹配模式，数字形式。</p><h2 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h2><h3 id="查找字符串中有多少个af"><a href="#查找字符串中有多少个af" class="headerlink" title="查找字符串中有多少个af"></a>查找字符串中有多少个af</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找字符串中有多少个af</span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">s = <span class="string">"asdfjvjadsffvaadfkfasaffdsasdffadsafafsafdadsfaafd"</span></span><br><span class="line"> </span><br><span class="line">ret = re.findall(<span class="string">r'(af)'</span> , s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(ret))</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 提取国内手机号码</span></span><br><span class="line"></span><br><span class="line">```Python,</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r'(?&lt;=\D)1[34578]\d{9}(?=\D)'</span>)</span><br><span class="line">    sentence = <span class="string">'''</span></span><br><span class="line"><span class="string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span></span><br><span class="line"><span class="string">    不是15600998765，也不是110或119，是不是13512346789，王大锤的手机号才是15600998765。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'查找所有匹配并保存到一个列表中'</span>)</span><br><span class="line">    mylist = re.findall(pattern, sentence)</span><br><span class="line">    <span class="built_in">print</span>(mylist)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'--------通过迭代器取出匹配对象并获得匹配的内容--------'</span>)</span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> pattern.finditer(sentence):</span><br><span class="line">        <span class="built_in">print</span>(temp.group())</span><br><span class="line">    <span class="comment"># 搜索字符串中第一次出现正则表达式的模式 </span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'--------通过search函数指定搜索位置找出所有匹配--------'</span>)</span><br><span class="line">    m = pattern.search(sentence)</span><br><span class="line">    <span class="keyword">while</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m.group())</span><br><span class="line">        m = pattern.search(sentence, m.end())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d{9}|14[57]\d{8}|15[0-35-9]\d{8}|17[678]\d{8})(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h3 id="替换字符串中的不良内容"><a href="#替换字符串中的不良内容" class="headerlink" title="替换字符串中的不良内容"></a>替换字符串中的不良内容</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    sentence = <span class="string">'你丫是傻叉吗? 我操你大爷的. Fuck you.'</span></span><br><span class="line">    purified = re.sub(<span class="string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,</span><br><span class="line">                      <span class="string">'*'</span>, sentence, flags=re.IGNORECASE)</span><br><span class="line">    <span class="built_in">print</span>(purified)  <span class="comment"># 你丫是*吗? 我*你大爷的. * you.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h3 id="按规则拆分长字符串"><a href="#按规则拆分长字符串" class="headerlink" title="按规则拆分长字符串"></a>按规则拆分长字符串</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[，。, .]'</span>, poem)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)</span><br><span class="line">        <span class="comment"># 删除列表中的空字符串</span></span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)  <span class="comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h1 id="正则表达式在线工具"><a href="#正则表达式在线工具" class="headerlink" title="正则表达式在线工具"></a>正则表达式在线工具</h1><p><a href="https://c.runoob.com/front-end/854/">https://c.runoob.com/front-end/854/</a></p><p><a href="https://deerchao.cn/tools/wegester/">https://deerchao.cn/tools/wegester/</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-SQLite</title>
      <link href="/2022/042334747.html"/>
      <url>/2022/042334747.html</url>
      
        <content type="html"><![CDATA[<h1 id="SQLite"><a href="#SQLite" class="headerlink" title="SQLite"></a>SQLite</h1><p>SQLite是一个进程内的库，实现了自给自足的、无服务器的、零配置的、事务性的 SQL 数据库引擎。它是一个零配置的数据库，这意味着与其他数据库不一样，您不需要在系统中配置。</p><p>sql语句不区分大小写</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="SQLite-存储类"><a href="#SQLite-存储类" class="headerlink" title="SQLite 存储类"></a>SQLite 存储类</h3><p>每个存储在 SQLite 数据库中的值都具有以下存储类之一：</p><p>NULL    值是一个 NULL 值。<br>INTEGER    值是一个带符号的整数，根据值的大小存储在 1、2、3、4、6 或 8 字节中。<br>REAL    值是一个浮点值，存储为 8 字节的 IEEE 浮点数字。<br>TEXT    值是一个文本字符串，使用数据库编码（UTF-8、UTF-16BE 或 UTF-16LE）存储。<br>BLOB    值是一个 blob 数据，完全根据它的输入存储。</p><p>SQLite 的存储类稍微比数据类型更普遍。INTEGER 存储类，例如，包含 6 种不同的不同长度的整数数据类型。</p><h3 id="SQLite-亲和-Affinity-类型"><a href="#SQLite-亲和-Affinity-类型" class="headerlink" title="SQLite 亲和(Affinity)类型"></a>SQLite 亲和(Affinity)类型</h3><p>SQLite支持列的亲和类型概念。任何列仍然可以存储任何类型的数据，当数据插入时，该字段的数据将会优先采用亲缘类型作为该值的存储方式。SQLite目前的版本支持以下五种亲缘类型：</p><p>亲和类型    描述<br>TEXT    数值型数据在被插入之前，需要先被转换为文本格式，之后再插入到目标字段中。<br>NUMERIC    当文本数据被插入到亲缘性为NUMERIC的字段中时，如果转换操作不会导致数据信息丢失以及完全可逆，那么SQLite就会将该文本数据转换为INTEGER或REAL类型的数据，如果转换失败，SQLite仍会以TEXT方式存储该数据。对于NULL或BLOB类型的新数据，SQLite将不做任何转换，直接以NULL或BLOB的方式存储该数据。需要额外说明的是，对于浮点格式的常量文本，如”30000.0”，如果该值可以转换为INTEGER同时又不会丢失数值信息，那么SQLite就会将其转换为INTEGER的存储方式。<br>INTEGER    对于亲缘类型为INTEGER的字段，其规则等同于NUMERIC，唯一差别是在执行CAST表达式时。<br>REAL    其规则基本等同于NUMERIC，唯一的差别是不会将”30000.0”这样的文本数据转换为INTEGER存储方式。<br>NONE    不做任何的转换，直接以该数据所属的数据类型进行存储。　　</p><h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><h3 id="Insert-语句"><a href="#Insert-语句" class="headerlink" title="Insert 语句"></a>Insert 语句</h3><p>insert or replace：如果不存在就插入，存在就更新<br>insert or ignore：如果不存在就插入，存在就忽略</p><h3 id="Delete-语句"><a href="#Delete-语句" class="headerlink" title="Delete 语句"></a>Delete 语句</h3><h3 id="Update-语句"><a href="#Update-语句" class="headerlink" title="Update 语句"></a>Update 语句</h3><h3 id="Select-语句"><a href="#Select-语句" class="headerlink" title="Select 语句"></a>Select 语句</h3><h2 id="SQLite-Python接口"><a href="#SQLite-Python接口" class="headerlink" title="SQLite-Python接口"></a>SQLite-Python接口</h2><p>SQLite3 可使用 sqlite3 模块与 Python 进行集成</p><h3 id="connection对象"><a href="#connection对象" class="headerlink" title="connection对象"></a>connection对象</h3><p>sqlite3.connect(database [,timeout ,other optional arguments])<br>连接数据库，自动创建</p><p>返回一个连接对象。<br><strong>connection对象方法</strong><br>close()    关闭数据库连接<br>commit()    提交事务<br>rollback()    回滚数据库事务<br>cursor()    获得cursor游标对象</p><h3 id="cursor游标对象"><a href="#cursor游标对象" class="headerlink" title="cursor游标对象"></a>cursor游标对象</h3><p>connection.cursor([cursorClass])</p><p><strong>游标对象方法</strong><br>cursor.execute(sql [, optional parameters])<br>执行sql语句</p><p>cursor.executemany(sql, seq_of_parameters)<br>cursor.executescript(sql_script)</p><p><strong>获取游标的查询结果集</strong><br>cursor.fetchone()<br>返回结果集的下一行(Row对象)，返回一个序列，无数据时，则返回 None。</p><p>cursor.fetchmany([size=cursor.arraysize])<br>返回结果集的多行(Row对象列表)，返回一个列表。无数据时，则返回一个空的列表。该方法尝试获取由 size 参数指定的尽可能多的行。</p><p>cursor.fetchall()<br>返回结果集中所有（剩余）的行(Row对象列表)，返回一个列表。无数据时，则返回一个空的列表。</p><h3 id="创建表-1"><a href="#创建表-1" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">conn = sqlite3.connect(<span class="string">'test.db'</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"数据库打开成功"</span>)</span><br><span class="line">c = conn.cursor()</span><br><span class="line">c.execute(<span class="string">'''CREATE TABLE COMPANY</span></span><br><span class="line"><span class="string">       (ID INT PRIMARY KEY     NOT NULL,</span></span><br><span class="line"><span class="string">       NAME           TEXT    NOT NULL,</span></span><br><span class="line"><span class="string">       AGE            INT     NOT NULL,</span></span><br><span class="line"><span class="string">       ADDRESS        CHAR(50),</span></span><br><span class="line"><span class="string">       SALARY         REAL);'''</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">"数据表创建成功"</span>)</span><br><span class="line">conn.commit()</span><br><span class="line">conn.close()</span><br></pre></td></tr></tbody></table></figure><h3 id="数据库的增删改查"><a href="#数据库的增删改查" class="headerlink" title="数据库的增删改查"></a>数据库的增删改查</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建数据库</span></span><br><span class="line">cursor.execute(<span class="string">'CREATE TABLE [exam] ([question] VARCHAR(80)  NULL,[Answer_A] VARCHAR(1)  NULL,[Answer_B] VARCHAR(1)  NULL,[Answer_C] VARCHAR(1)  NULL,[Answer_D] VARCHAR(1)  NULL,[right_Answer] VARCHAR(1)  NULL)'</span>)</span><br><span class="line"><span class="comment">#插入一条数据</span></span><br><span class="line">cursor.execute(<span class="string">"insert into exam (question, Answer_A,Answer_B,Answer_C,Answer_D,right_Answer) values ('哈雷慧星的平均周期为', '54年', '56年', '73年', '83年', 'C')"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入SQLite驱动:</span></span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">path=<span class="string">'test.db'</span></span><br><span class="line">conn = sqlite3.connect(path) <span class="comment"># 建立数据库连接，返回一个连接对象。</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"连接<span class="subst">{path}</span>数据库成功"</span>)</span><br><span class="line">cursor = conn.cursor()  <span class="comment">#创建游标对象</span></span><br><span class="line"></span><br><span class="line">cursor.close()  <span class="comment"># 关闭Cursor:</span></span><br><span class="line">conn.commit()   <span class="comment"># 提交事务:</span></span><br><span class="line">conn.close()   <span class="comment"># 关闭Connection:</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQLite </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web接口测试</title>
      <link href="/2022/04205354.html"/>
      <url>/2022/04205354.html</url>
      
        <content type="html"><![CDATA[<h1 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h1><p>抓包（packet capture）就是将网络传输发送与接收的数据包进行截获、重发、编辑、转存等操作，也用来检查网络安全。抓包也经常被用来进行数据截取等。抓包的目的就是为了获取到想要的原始数据，拿到数据以后，我们就可以做以下一些事情:  </p><ol><li><p>分析数据传输协议。 </p></li><li><p>定位网络协议的问题。 </p></li><li><p>从数据包中获取想要的信息。 </p></li><li><p>将截取到的数据包进行修改，伪造，重发。</p><h2 id="为什么抓包？"><a href="#为什么抓包？" class="headerlink" title="为什么抓包？"></a>为什么抓包？</h2></li><li><p>从功能测试角度，通过抓包查看隐藏字段</p></li></ol><p>Web 表单中会有很多隐藏的字段，这些隐藏字段一般都有一些特殊的用途，比如收集用户的数据，预防 CRSF 攻击，防网络爬虫，以及一些其他用途。这些隐藏字段在界面上都看不到，如果想检测这些字段，就必须要使用抓包工具。</p><ol start="2"><li>通过抓包工具了解协议内容，方便开展接口和性能测试</li></ol><p>性能测试方面，性能测试其实就是大量模拟用户的请求，所以我们必须要知道请求中的协议内容和特点，才能更好的模拟用户请求，分析协议就需要用到抓包工具；接口测试方面，在接口测试时，虽然我们尽量要求有完善的接口文档。但很多时候接口文档不可能覆盖所有的情况，或者因为文档滞后，在接口测试过程中，还时需要借助抓包工具来辅助我们进行接口测试。</p><ol start="3"><li>需要通过抓包工具，检查数据加密</li></ol><p>安全测试方面，我们需要检查敏感数据在传输过程中是否加密，也需要借助抓包工具才能检查。</p><ol start="4"><li>处理前后端 bug 归属之争</li></ol><p>在我们提交bug的时候，经常会出现前端（客户端展示）和后端（服务端的逻辑）的争议，那么可以通过抓包工具，确实是数据传递问题还是前端显示的问题。如果抓出来的数据就有问题的话，那么一般是后端的问题；如果抓出来的数据是正确的，那么基本上可以断定是前端显示的问题。</p><ol start="5"><li>通过抓包分析，可以更好的理解整个系统</li></ol><p>经常使用抓包工具辅助测试，可以很好的了解整个系统，比如数据传输过程前后端的关系，以及整个系统的结构。特别是对现在的微服务架构的产品，抓包能够更好的梳理和掌握整个系统各个服务之间的关系，大大增加测试的覆盖度。另外还可以增进对代码、HTTP协议方面知识的理解。</p><h2 id="浏览器抓包"><a href="#浏览器抓包" class="headerlink" title="浏览器抓包"></a>浏览器抓包</h2><p>最简单的抓包工具——浏览器开发者工具</p><h1 id="开放api"><a href="#开放api" class="headerlink" title="开放api"></a>开放api</h1><h2 id="API-Hub"><a href="#API-Hub" class="headerlink" title="API Hub"></a>API Hub</h2><h1 id="接口调试工具"><a href="#接口调试工具" class="headerlink" title="接口调试工具"></a>接口调试工具</h1><h2 id="Apifox"><a href="#Apifox" class="headerlink" title="Apifox"></a>Apifox</h2><p>API 文档、API 调试、API Mock、API 自动化测试</p><p>和市面上的老牌调试工具Postman相比，Apifox毫不逊色——Postman支持的功能它都能支持，并且Apifox还提供了支持可视化断言，连接数据库，调用外部函数与脚本，支持多种语言，环境变量设置等功能，调试起来也很快捷方便。</p><h2 id="postman接口测试"><a href="#postman接口测试" class="headerlink" title="postman接口测试"></a>postman接口测试</h2><p>responseCode ：包含请求的返回的状态信息(如：code)<br>responseBody：为接口请求放回的数据内容（类型为字符串）<br>tests ：为键值对形式，用于表示我们的测试结果是成功与否，最终展示在 Test Results 中。<br>key ：（如：code 200）我们可以用来当做结果的一个描述<br>value：其值为布尔型，ture 表示测试通过， false 表示测试失败。<br>所以上述代码应该不难理解了，而有了返回结果的数据以及表示结果成功与否</p><h2 id="预请求脚本-Pre-request-Script"><a href="#预请求脚本-Pre-request-Script" class="headerlink" title="(预请求脚本)Pre-request Script"></a>(预请求脚本)Pre-request Script</h2>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-redis</title>
      <link href="/2022/041918402.html"/>
      <url>/2022/041918402.html</url>
      
        <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>Redis 是键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><h1 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h1><h2 id="安装-Redis的docker环境"><a href="#安装-Redis的docker环境" class="headerlink" title="安装 Redis的docker环境"></a>安装 Redis的docker环境</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要确保docker环境已经安装成功</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">docker search redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取最新版本</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d：使用指定的镜像在后台运行容器，（使用守护进程运行）通过 docker ps查看不到的。因为在 docker 中，后台服务必须要有一个前台服务才能运行（前台服务即使用 -it 选项启动的服务）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -it 表示已交互模式运行容器,为容器重新分配一个伪输入终端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 6379:6379 将容器的6379端口映射到主机的6379端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name=<span class="string">"myredis"</span> 表示自定义容器名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --requirepass <span class="string">"root"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v /docker/redis/data:/data: 将主机中当前目录下的data挂载到容器的/data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis-server : 在容器执行redis-server启动命令，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --appendonly yes  打开redis持久化配置</span></span><br><span class="line">docker run -d redis:latest -p 6379:6379  redis-server --appendonly yes --name="myredis" --requirepass "root"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker start 容器名或容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis容器并启动一个redis交互式会话</span></span><br><span class="line">docker exec -it redis容器名 /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在redis交互式会话中连接 redis 服务</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理容器(停止 docker-redis 容器并删除)：</span></span><br><span class="line"></span><br><span class="line">docker stop redis容器名</span><br><span class="line">docker rm redis容器名</span><br></pre></td></tr></tbody></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis-cli  #在redis交互式会话中连接 redis 服务</span><br><span class="line"></span><br><span class="line">config get requirepass  #查看现有的redis密码</span><br><span class="line"></span><br><span class="line">config set requirepass pass_123456 #设置redis密码</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java高级</title>
      <link href="/2022/040423525.html"/>
      <url>/2022/040423525.html</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><p>Maven是一个项目管理及自动构建工具,<br>作为依赖管理工具：管理第三方的外部依赖。使用Maven后，依赖对应的jar包能够自动下载<br>作为构建管理工具</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="Maven-功能"><a href="#Maven-功能" class="headerlink" title="Maven 功能"></a>Maven 功能</h3><p>Maven 能够帮助开发者完成以下工作：</p><p>构建<br>文档生成<br>报告<br>依赖<br>SCMs<br>发布<br>分发<br>邮件列表</p><h2 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h2><h3 id="idea自带maven"><a href="#idea自带maven" class="headerlink" title="idea自带maven"></a>idea自带maven</h3><p>idea有捆绑的 Maven 我们只需要搞一个配置文件就行了，无需再官网下载Maven包</p><p>以后再在新电脑装环境的时候，只需要下载idea ，网上找一个Maven的配置文件 放到 默认的 包下面就可以了！也省得每次创建项目都要重新配一次Maven了。</p><p>如果不想每次新建项目都要重新配置Maven，一种方法就是使用默认的配置，另一种方法就是配置 new Projects Settings(新项目的配置)</p><h4 id="配置阿里云中央仓库"><a href="#配置阿里云中央仓库" class="headerlink" title="配置阿里云中央仓库"></a>配置阿里云中央仓库</h4><p>1.进入到idea安装目录，找到\plugins\maven\lib 目录，可以看到maven有几个<br>2.修改maven2 或maven3 下conf目录下的settings.xml 文件如下<br><code>\IntelliJ IDEA 2022.1.2\plugins\maven\lib\maven3\conf\settings.xml</code><br>找到mirrors，添加以下内容</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自行配置maven"><a href="#自行配置maven" class="headerlink" title="自行配置maven"></a>自行配置maven</h3><p><a href="https://www.runoob.com/maven/maven-setup.html">https://www.runoob.com/maven/maven-setup.html</a><br>总的来说，使用自带maven能省去繁琐的配置过程，可马上用来使用，但除此之外，还是劣势更多；相反，自行配置maven会显得使用起来更自由方便。<br>自行配置maven的好处：<br>1、如果你是新手的话，建议自行配置maven，有助于你更好的学习和理解maven，毕竟IDE会屏蔽很多细节，不利于新手学习。<br>2、idea自带的maven在它自己的路径和配置中，为避免升级（无论升级idea还是想升级maven）时发生莫名其妙的问题，自定义配置更能少遇到错误。<br>3、不依赖IDEA，你也可以在其他的IDE上开发。如果你恰好还要同时用eclipse，独立出来会更好管理，可在两个环境间共享配置和仓库。<br>4、idea自带的maven配置文件和仓库都在C盘，而且C盘一般不要放东西，自行配置maven，不仅可以自由管理配置文件和仓库的位置，而且可以任意换maven的版本。</p><p>Maven 下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a></p><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>右键此电脑–&gt;属性–&gt;高级系统设置–&gt;环境变量<br>新建变量MAVEN_HOME = E:\Tools\Maven\apache-maven-3.8.1（以自己的安装路径为准）<br>编辑变量Path，添加变量值%MAVEN_HOME%\bin<br>然后win+R运行cmd，输入mvn -version，如图所示则配置成功</p><h4 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h4><p>1.在E:\Tools\Maven\路径下新建maven-repository文件夹，用作maven的本地库。<br>2.在路径E:\Tools\Maven\apache-maven-3.8.1\conf下找到settings.xml文件<br>3.找到节点localRepository，在注释外添加<br><code>&lt;localRepository&gt;E:\Tools\Maven\maven-repository&lt;/localRepository&gt;</code></p><p>localRepository节点用于配置本地仓库，本地仓库其实起到了一个缓存的作用，它的默认地址是 C:\Users\用户名.m2。<br>当我们从maven中获取jar包的时候，maven首先会在本地仓库中查找，如果本地仓库有则返回；如果没有则从远程仓库中获取包，并在本地库中保存。<br>此外，我们在maven项目中运行mvn install，项目将会自动打包并安装到本地仓库中。</p><h4 id="配置镜像"><a href="#配置镜像" class="headerlink" title="配置镜像"></a>配置镜像</h4><p>在settings.xml配置文件中找到mirrors节点<br>添加如下配置（注意要添加在<code>&lt;mirrors&gt;</code>和<code>&lt;/mirrors&gt;</code>两个标签之间，其它配置同理）</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 阿里云仓库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>无法更新仓库：<a href="https://blog.csdn.net/m0_67401382/article/details/123939452">https://blog.csdn.net/m0_67401382/article/details/123939452</a></p><p><a href="https://www.jianshu.com/p/184e19796437">https://www.jianshu.com/p/184e19796437</a><br><a href="https://its301.com/article/Werdio/116549969">https://its301.com/article/Werdio/116549969</a></p><h2 id="文件和目录结构"><a href="#文件和目录结构" class="headerlink" title="文件和目录结构"></a>文件和目录结构</h2><h3 id="POM-xml"><a href="#POM-xml" class="headerlink" title="POM.xml"></a>POM.xml</h3><p>Project Object Model 项目对象模型， maven把项目当做模型处理。 操作这个模型就是操作项目。<br>maven通过pom.xml文件实现 项目的构建和依赖的管理。</p><p>学习框架首先要先了解它是干什么的，然后了解它的项目结构即每个文件有什么用</p><h2 id="在idea搜索maven依赖"><a href="#在idea搜索maven依赖" class="headerlink" title="在idea搜索maven依赖"></a>在idea搜索maven依赖</h2><h1 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h1><p>使用其核心思想IOC管理组件，使用AOP思想实现功能增强</p><h1 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h1><p>接受浏览器发送的请求，并响应浏览器数据</p><h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程</p><ul><li><p>Spring程序缺点<br> 依赖设置繁琐<br> 配置繁琐</p></li><li><p>Idea中隐藏指定文件或指定类型文件<br> Setting → File Types → Ignored Files and Folders<br> 输入要隐藏的文件名，支持*号通配符<br> 回车确认添加</p></li></ul><h3 id="Spring-Boot-的优点"><a href="#Spring-Boot-的优点" class="headerlink" title="Spring Boot 的优点"></a>Spring Boot 的优点</h3><ul><li>使用 Spring Initializr 可以在几秒钟就配置好一个 Spring Boot 应用。</li><li>对大量的框架都可以无缝集成，基本不需要配置或者很少的配置就可以运行。</li><li>简化的安全性。</li><li>丰富的 SQL 和 NoSQL 支持。</li><li>嵌入式 Servlet 容器的支持。如：Tomcat，Jetty 和 Undertow。</li><li>提高开发、生产效率，如热部署等功能。</li><li>提供监控功能，如跟踪，指标和健康状况。</li></ul><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>创建SpringBoot工程的四种方式</p><h3 id="基于Idea创建SpringBoot工程"><a href="#基于Idea创建SpringBoot工程" class="headerlink" title="基于Idea创建SpringBoot工程"></a>基于Idea创建SpringBoot工程</h3><p>基于idea开发SpringBoot程序需要确保联网且能够加载到程序框架结构</p><p>spring默认服务器：<a href="https://start.spring.io/">https://start.spring.io</a></p><p>创建新模块，选择Spring Initializr，并配置模块相关基础信息</p><h3 id="基于阿里云创建SpringBoot工程"><a href="#基于阿里云创建SpringBoot工程" class="headerlink" title="基于阿里云创建SpringBoot工程"></a>基于阿里云创建SpringBoot工程</h3><p>1.通过idea创建，可以更改成阿里云镜像服务：<a href="https://start.aliyun.com/">https://start.aliyun.com</a><br>阿里云提供的坐标版本较低，如果需要使用高版本，进入工程后手工切换SpringBoot版本<br>阿里云提供的工程模板与Spring官网提供的工程模板略有不同</p><h3 id="基于官网创建SpringBoot工程"><a href="#基于官网创建SpringBoot工程" class="headerlink" title="基于官网创建SpringBoot工程"></a>基于官网创建SpringBoot工程</h3><p>2.若idea不能联网，通过spring boot官网创建</p><h3 id="手工创建Maven工程修改为SpringBoot工程"><a href="#手工创建Maven工程修改为SpringBoot工程" class="headerlink" title="手工创建Maven工程修改为SpringBoot工程"></a>手工创建Maven工程修改为SpringBoot工程</h3><ul><li>创建普通Maven工程</li><li>继承spring-boot-starter-parent<br>spring-boot-starter-parent中定义了若干个依赖管理<br>继承parent模块可以避免多个依赖使用相同技术时出现依赖版本冲突<br>继承parent的形式也可以采用引入依赖的形式实现效果</li></ul><h2 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h2><ul><li><p>parent<br>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的<br>spring-boot-starter-parent各版本间存在着诸多坐标版本不同</p></li><li><p>starter<br>SpringBoot中常见项目名称，定义了当前项目使用的所有依赖坐标，以达到减少依赖配置的目的</p></li><li><p>实际开发<br>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供，除非SpringBoot未提供对应版本V<br>如发生坐标错误，再指定Version（要小心版本冲突）</p></li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--设置父模块 这样就可以继承父模块中的配置信息--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--添加web依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--spirng Boot maven插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="修改服务器"><a href="#修改服务器" class="headerlink" title="修改服务器"></a>修改服务器</h3><p>使用maven依赖管理变更起步依赖项</p><ul><li>内置服务器<br>tomcat(默认)   apache出品，粉丝多，应用面广，负载了若干较重的组件<br>jetty 更轻量级，负载性能远不及tomcat.Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat）<br>undertow undertow，负载性能勉强跑赢tomcat</li></ul><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加Jetty起步依赖，版本由SpringBoot的starter控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="基础配置"><a href="#基础配置" class="headerlink" title="基础配置"></a>基础配置</h2><p>在resources目录下面有一个空白的文件，叫做application.properties。这是一个配置文件</p><ul><li>优点<ul><li>SpringBoot程序可以在application.properties文件中进行属性配置</li><li>application.properties文件中只要输入要配置的属性关键字就可以根据提示进行设置</li><li>SpringBoot将配置信息集中在一个文件中写，不管你是服务器的配置，还是数据库的配置，总之都写在一起，逃离一个项目十几种配置文件格式的尴尬局面</li></ul></li></ul><p>在官方文档里找到application.properties文件，可查看可修改的配置<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">官方文档</a></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>[SpringBoot内置属性查询] (<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties">https://docs.spring.io/spring-boot/docs/current/reference/html/application-properties.html#application-properties</a>)</p><ol><li>SpringBoot中导入对应starter后，提供对应配置属性</li><li>书写SpringBoot配置采用关键字+提示形式书写</li></ol><p><strong>若自动提示消失</strong>，指定SpringBoot配置文件<br>文件-项目结构-Facets-spring-选择配置文件</p><h3 id="复制工程"><a href="#复制工程" class="headerlink" title="复制工程"></a>复制工程</h3><p>原则：保留工程基础结构，抹掉原始工程痕迹</p><ol><li>在工作空间中复制对应工程，并修改工程名称</li><li>删除与Idea相关配置文件，仅保留src目录与pom.xml文件</li><li>修改pom.xml文件中的artifactId与新工程/模块名相同</li><li>删除name标签（可选）</li><li>保留备份工程供后期使用</li></ol><h3 id="三种文件格式"><a href="#三种文件格式" class="headerlink" title="三种文件格式"></a>三种文件格式</h3><p>properties格式的配置写起来总是觉得看着不舒服，所以就期望存在一种书写起来更简便的配置格式提供给开发者使用。有吗？还真有，SpringBoot除了支持properties格式的配置文件，还支持另外两种格式的配置文件。分别如下:</p><ul><li>1.application.properties（properties格式）</li></ul><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></tbody></table></figure><ul><li>2.application.yml（yml格式）</li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><ul><li>3.application.yaml（yaml格式）</li></ul><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></tbody></table></figure><p>仔细看会发现yml格式和yaml格式除了文件名后缀不一样，格式完全一样，是这样的，yml和yaml文件格式就是一模一样的，只是文件后缀不同，所以可以合并成一种格式来看。<br>那对于这三种格式来说，以后用哪一种比较多呢？记清楚，以后基本上都是用<strong>yml格式</strong>的，本课程后面的所有知识都是基于yml格式来制作的，以后在企业开发过程中用这个格式的机会也最多，一定要重点掌握。</p><p><strong>总结</strong></p><pre><code>1. 配置文件间的加载优先级 properties（最高）&gt;  yml  &gt;  yaml（最低）2. 不同配置文件中相同配置按照加载优先级相互覆盖，不同配置文件中不同配置全部保留 </code></pre><h2 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h2><p>​  什么是热部署？简单说就是你程序改了，现在要重新启动服务器，嫌麻烦？不用重启，服务器会自己悄悄的把更新后的程序给重新加载一遍，这就是热部署。</p><p>​  热部署的功能是如何实现的呢？这就要分两种情况来说了，非springboot工程和springboot工程的热部署实现方式完全不一样。先说一下原始的非springboot项目是如何实现热部署的。</p><p><strong>非springboot项目热部署实现原理</strong></p><p>​  开发非springboot项目时，我们要制作一个web工程并通过tomcat启动，通常需要先安装tomcat服务器到磁盘中，开发的程序配置发布到安装的tomcat服务器上。如果想实现热部署的效果，这种情况其实有两种做法，一种是在tomcat服务器的配置文件中进行配置，这种做法与你使用什么IDE工具无关，不管你使用eclipse还是idea都行。还有一种做法是通过IDE工具进行配置，比如在idea工具中进行设置，这种形式需要依赖IDE工具，每款IDE工具不同，对应的配置也不太一样。但是核心思想是一样的，就是使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。</p><p>​  上面所说的非springboot项目实现热部署看上去是一个非常简单的过程，几乎每个小伙伴都能自己写出来。如果你不会写，我给你个最简单的思路，但是实际设计要比这复杂一些。例如启动一个定时任务，任务启动时记录每个文件的大小，以后每5秒比对一下每个文件的大小是否有改变，或者是否有新文件。如果没有改变，放行，如果有改变，刷新当前记录的文件信息，然后重新启动服务器，这就可以实现热部署了。当然，这个过程肯定不能这么做，比如我把一个打印输出的字符串”abc”改成”cba”，比对大小是没有变化的，但是内容缺实变了，所以这么做肯定不行，只是给大家打个比方，而且重启服务器这就是冷启动了，不能算热部署，领会精神吧。</p><p>​  看上去这个过程也没多复杂，在springboot项目中难道还有其他的弯弯绕吗？还真有。</p><p><strong>springboot项目热部署实现原理</strong></p><p>​  基于springboot开发的web工程其实有一个显著的特征，就是tomcat服务器内置了，还记得内嵌服务器吗？服务器是以一个对象的形式在spring容器中运行的。本来我们期望于tomcat服务器加载程序后由tomcat服务器盯着程序，你变化后我就重新启动重新加载，但是现在tomcat和我们的程序是平级的了，都是spring容器中的组件，这下就麻烦了，缺乏了一个直接的管理权，那该怎么做呢？简单，再搞一个程序X在spring容器中盯着你原始开发的程序A不就行了吗？确实，搞一个盯着程序A的程序X就行了，如果你自己开发的程序A变化了，那么程序X就命令tomcat容器重新加载程序A就OK了。并且这样做有一个好处，spring容器中东西不用全部重新加载一遍，只需要重新加载你开发的程序那一部分就可以了，这下效率又高了，挺好。</p><p>​ 下面就说说，怎么搞出来这么一个程序X，肯定不是我们自己手写了，springboot早就做好了，搞一个坐标导入进去就行了。</p><h3 id="手动启动热部署"><a href="#手动启动热部署" class="headerlink" title="手动启动热部署"></a>手动启动热部署</h3><p><strong>步骤①</strong>：导入开发者工具对应的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：构建项目，可以使用快捷键激活此功能</p><p><img src="img%5Cimage-20220222121257218.png" alt="image-20220222121257218"></p><p>​  对应的快捷键一定要记得</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CTR&gt;L+&lt;F9&gt;</span><br></pre></td></tr></tbody></table></figure><p>​  以上过程就实现了springboot工程的热部署，是不是挺简单的。不过这里需要把底层的工作工程给普及一下。</p><p><strong>重启与重载</strong></p><p>​  一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。</p><ul><li>base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化</li><li>restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响</li></ul><p>​  当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。</p><p><strong>总结</strong></p><ol><li>使用开发者工具可以为当前项目开启热部署功能</li><li>使用构建项目操作对工程进行热部署</li></ol><p><strong>思考</strong></p><p>​  上述过程每次进行热部署都需要开发者手工操作，不管是点击按钮还是快捷键都需要开发者手工执行。这种操作的应用场景主要是在开发调试期，并且调试的代码处于不同的文件中，比如服务器启动了，我需要改4个文件中的内容，然后重启，等4个文件都改完了再执行热部署，使用一个快捷键就OK了。但是如果现在开发者要修改的内容就只有一个文件中的少量代码，这个时候代码修改完毕如果能够让程序自己执行热部署功能，就可以减少开发者的操作，也就是自动进行热部署，能这么做吗？是可以的。咱们下一节再说。</p><p>​  </p><h3 id="自动启动热部署"><a href="#自动启动热部署" class="headerlink" title="自动启动热部署"></a>自动启动热部署</h3><p>​  自动热部署其实就是设计一个开关，打开这个开关后，IDE工具就可以自动热部署。因此这个操作和IDE工具有关，以下以idea为例设置idea中启动热部署</p><p><strong>步骤①</strong>：设置自动构建项目</p><p>​  打开【File】，选择【settings…】,在面板左侧的菜单中找到【Compile】选项，然后勾选【Build project automatically】，意思是自动构建项目</p><p>构建、执行、部署-&gt;编译器-&gt;​勾选自动构建项目选项</p><p>​  自动构建项目选项勾选后</p><p><strong>步骤②</strong>：允许在程序运行时进行自动构建</p><p>​  使用快捷键【Ctrl】+【Alt】+【Shit】+【/】打开维护面板，选择第1项【Registry…】</p><p><img src="img%5Cimage-20220222124006910.png" alt="image-20220222124006910"></p><p>​  在选项中搜索comple，然后勾选对应项即可</p><img src="img\image-20220222124240069.png" alt="image-20220222124240069" style="zoom:80%;"><p>​  这样程序在运行的时候就可以进行自动构建了，实现了热部署的效果。</p><p><font color="#ff0000"><b>关注</b></font>：如果你每敲一个字母，服务器就重新构建一次，这未免有点太频繁了，所以idea设置当idea工具失去焦点5秒后进行热部署。其实就是你从idea工具中切换到其他工具时进行热部署，比如改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作。</p><p><strong>总结</strong></p><ol><li>自动热部署要开启自动构建项目</li><li>自动热部署要开启在程序运行时自动构建项目</li></ol><p><strong>思考</strong></p><p>​  现在已经实现了热部署了，但是到企业开发的时候你会发现，为了便于管理，在你的程序目录中除了有代码，还有可能有文档，如果你修改了一下文档，这个时候会进行热部署吗？不管是否进行热部署，这个过程我们需要自己控制才比较合理，那这个东西能控制吗？咱们下一节再说。</p><h3 id="参与热部署监控的文件范围配置"><a href="#参与热部署监控的文件范围配置" class="headerlink" title="参与热部署监控的文件范围配置"></a>参与热部署监控的文件范围配置</h3><p>​  通过修改项目中的文件，你可以发现其实并不是所有的文件修改都会激活热部署的，原因在于在开发者工具中有一组配置，当满足了配置中的条件后，才会启动热部署，配置中默认不参与热部署的目录信息如下</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><p>​  以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过application.yml文件进行设定哪些文件不参与热部署操作</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># 设置不参与热部署的文件或文件夹</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>通过配置可以修改不参与热部署的文件或目录</li></ol><p><strong>思考</strong></p><p>​  热部署功能是一个典型的开发阶段使用的功能，到了线上环境运行程序时，这个功能就没有意义了。能否关闭热部署功能呢？咱们下一节再说。</p><h3 id="关闭热部署"><a href="#关闭热部署" class="headerlink" title="关闭热部署"></a>关闭热部署</h3><p>​  线上环境运行时是不可能使用热部署功能的，所以需要强制关闭此功能，通过配置可以关闭此功能。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><p>​  如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSMPApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.setProperty(<span class="string">"spring.devtools.restart.enabled"</span>,<span class="string">"false"</span>);</span><br><span class="line">        SpringApplication.run(SSMPApplication.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  其实上述担心略微有点多余，因为线上环境的维护是不可能出现修改代码的操作的，这么做唯一的作用是降低资源消耗，毕竟那双盯着你项目是不是产生变化的眼睛只要闭上了，就不具有热部署功能了，这个开关的作用就是禁用对应功能。</p><p><strong>总结</strong></p><ol><li>通过配置可以关闭热部署功能降低线上程序的资源消耗</li></ol><h2 id="设置静态资源路径"><a href="#设置静态资源路径" class="headerlink" title="设置静态资源路径"></a>设置静态资源路径</h2><h2 id="启动类-引导类"><a href="#启动类-引导类" class="headerlink" title="启动类(引导类)"></a>启动类(引导类)</h2><p>运行SpringBoot程序通过运行Application程序入口进行<br>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目<br>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span> <span class="comment">//可使用信息提示 log.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// @SpringBootApplication 注解相当于同时使用 @EnableAutoConfiguration、@ComponentScan、@Configurations 三个注解</span></span><br><span class="line"><span class="comment">// @EnableAutoConfiguration 用于打开 Spring Boot 自动配置，而其余注解为 Spring 注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//在SpringBoot启动类上配置mapper接口的扫描路径</span></span><br><span class="line"><span class="meta">@MapperScan("com.example.mp.mappers")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        log.info(<span class="string">"项目启动成功！！！"</span>);</span><br><span class="line">        <span class="comment">// 定义容器对象，并启动</span></span><br><span class="line">        SpringApplication.run(MybatisPlusApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p>REST(Representational State Transfer),表现形式状态转换。它是一种针对网络应用的设计风格，只是建议，并不是规范</p><ul><li>优点<br>1.隐藏资源的访问行为，无法通过地址得知对资源是何种操作<br>2.书写简化</li></ul><p>传统风格资源描述形式：<a href="http://localhost/user/getByID?id=1">http://localhost/user/getByID?id=1</a><br>REST风格描述：<a href="http://localhost/user/1">http://localhost/user/1</a></p><p>根据REST风格对资源进行访问称为RESTful</p><h3 id="请求动作映射"><a href="#请求动作映射" class="headerlink" title="请求动作映射"></a>请求动作映射</h3><p>名称：@GetMapping @PostMapping @PutMapping @DeleteMapping<br>类型：方法注解<br>位置：基于SpringMVC的RESTful开发控制器方法定义上方<br>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求</p><p>GET(查询)<br>POST(新增)<br>PUT(修改/更新)<br>DELECT(删除)</p><h3 id="RequestParam"><a href="#RequestParam" class="headerlink" title="@RequestParam"></a>@RequestParam</h3><p>@RequestParam用于接收url地址传参或表单传参</p><p>应用<br>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody,应用较广<br>如果发送非json格式数据，选用@RequestParam接收请求参数<br>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p>类型：<br>位置：springMVC控制器方法形参定义前面<br>作用：绑定url路径参数与处理器方法形参间的关系</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{}</span><br></pre></td></tr></tbody></table></figure><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1.设定http请求动作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Controller</span>    <span class="comment">//声明是控制器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping(value = "/users", method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@ResponseBody</span> User user)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"user save"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"{'module':'save'}"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>2.设定请求参数(路径变量)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径上要有参数占位{id}</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}", method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span>    <span class="comment">//用于接收json数据</span></span><br><span class="line"><span class="comment">// 形参注解在形参上加@PathVariable用于接收路径参数，使用{参数名称）描述路径参数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"user save"</span>+id);</span><br><span class="line">        <span class="keyword">return</span><span class="string">"{'module':'delete'}"</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="快速开发"><a href="#快速开发" class="headerlink" title="快速开发"></a>快速开发</h3><h4 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h4><p>类型：类注解<br>位置：springMVC控制器类定义上方<br>作用：设置当前控制器类为RESTful风格，等同于@Controller + @ResponseBody两个注解组合功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span>   <span class="comment">//@RestController=@Controller + @ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping("/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="comment">// @RequestMapping(value = "/users",method = RequestMethod.POST)    //用@PostMapping代替</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"user save"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"{'module':'save'}"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="lombok工具"><a href="#lombok工具" class="headerlink" title="lombok工具"></a>lombok工具</h2><p>一个Java类库，提供了一组注解，简化POJO实体类开发，SpringBoot目前默认集成了lombok技术，并提供了对应的版本控制，所以只需要提供对应的坐标即可，</p><p>最常用的用法就是在实体类中使用它的@Data注解，这样实体类就不用写set、get、toString等方法</p><p>@Data注解包含了 @ToString、@EqualsAndHashCode、@Getter / @Setter和@RequiredArgsConstructor的功能</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>在pom.xml中添加lombok的坐标。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.24<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>controller调用service,service调用dao</p><h2 id="实体层"><a href="#实体层" class="headerlink" title="实体层"></a>实体层</h2><p>先编写实体层，一般数据库一张表对应一个实体类，类属性同表字段一一对应</p><p>entity层即数据库实体层，也被称为model层，pojo层，domain层存放的是实体类，属性值与数据库中的属性值保持一致。 实现set和get方法。</p><p>使用了 Lombok 简化代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entity:</span></span><br><span class="line"><span class="meta">@TableName(value = "user")</span>  <span class="comment">//value指定表名</span></span><br><span class="line"><span class="meta">@Date</span>     <span class="comment">//使用Lombok插件，这样实体类就不用写set、get、toString等方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">//value与数据库主键列名一致，若实体类属性名与表主键列名一致可省略value</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.AUTO)</span>  <span class="comment">//指定自增策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">//若没有开启驼峰命名，或者表中列名不符合驼峰规则，可通过该注解指定数据库表中的列名，exist标明数据表中有没有对应列</span></span><br><span class="line">    <span class="meta">@TableField(value = "last_name", exist = true)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="数据访问层-DAO"><a href="#数据访问层-DAO" class="headerlink" title="数据访问层(DAO)"></a>数据访问层(DAO)</h2><p>第二步定义数据层接口，继承BaseMapper&lt;把实体类作为泛型传入&gt;</p><p>DAO(Data Access Object) 是数据访问层，也被称为mapper层。即数据持久层，对数据做持久化操作。dao层的作用为访问数据库，向数据库发送sql语句，完成数据的增删改查任务。</p><p>使用mybatis-plus后不用写mapper.xml文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dao/接口名.java</span></span><br><span class="line"><span class="comment">// 定义数据层接口与映射配置，继承BaseMapper&lt;把实体类作为泛型传入&gt;</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;实体类&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="业务层-service"><a href="#业务层-service" class="headerlink" title="业务层(service)"></a>业务层(service)</h2><p>service层的作用为完成功能设计。存放业务逻辑处理，不直接对数据库进行操作，<br>有接口和接口实现类(定义一个接口，然后再一个或多个类去实现)<br>/IBookService.java<br>/impl/IBookServiceImpl.java</p><p>提供controller层调用的方法。调用dao层接口，接收dao层返回的数据，完成项目的基本功能设计。（也就是说对于项目中的功能的需求就是在这里完成的）</p><h4 id="快速开发方案"><a href="#快速开发方案" class="headerlink" title="快速开发方案"></a>快速开发方案</h4><p>使用MyBatisPlus提供有业务层通用接口(ISerivce<t>)与业务层通用实现类(ServiceImpl&lt;M,T&gt;)<br>在通用类基础上做功能重载或功能追加<br>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</t></p><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>在java内的项目包下 新建 service包（一般接口都放在其中） 然后再其中新建XXXService接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于mybatisplus快速开发，ctrl+o查看mp帮你重写或覆盖的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;实体类&gt; </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="创建接口实现类"><a href="#创建接口实现类" class="headerlink" title="创建接口实现类"></a>创建接口实现类</h4><p>service 包内 新建 impl 包（实现类全部在impl包内）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类</span></span><br><span class="line"><span class="comment">// extends ServiceImpl&lt;BookDao,Book&gt;  //传入两个泛型(dao层,实体类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IBookServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BookDao</span>, <span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">IBookService</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="单元测试类"><a href="#单元测试类" class="headerlink" title="单元测试类"></a>单元测试类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ke.bookm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wenke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BookServiceTestCasde</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 20:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceTestCase</span> </span>{</span><br><span class="line">    <span class="comment">// 接口有多个实现类时使用@Qualifier注解指定实现类：</span></span><br><span class="line">    <span class="comment">// @Qualifier("qualifierServiceImpl2")</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span> </span>{</span><br><span class="line">        bookService.getById(<span class="number">4</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="表现层-控制器层-controller"><a href="#表现层-控制器层-controller" class="headerlink" title="表现层/控制器层(controller)"></a>表现层/控制器层(controller)</h2><p>controller层的功能为请求和响应控制。controller层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端。</p><p>创建控制器类com.controller.UserController.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line">    <span class="comment">// 添加业务层对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="映射url请求"><a href="#映射url请求" class="headerlink" title="映射url请求"></a>映射url请求</h3><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><p>@RequestMapping注解是用来映射请求的，即指明处理器可以处理哪些URL请求，该注解既可以用在类上，也可以用在方法上。<br>当使用@RequestMapping标记控制器类时，方法的请求地址是相对类的请求地址而言的；<br>当没有使用@RequestMapping标记类时，方法的请求地址是绝对路径。</p><h4 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h4><p> 新增：POST请求<br> 删除：DELETE请求 @DeleteMapping<br> 修改：PUT请求<br> 查询：GET请求 @GetMapping</p><h4 id="接收参数"><a href="#接收参数" class="headerlink" title="接收参数"></a>接收参数</h4><p> 实体数据：@RequestBody<br> 路径变量：@PathVariable<br>@RequestMapping的地址可以是url变量，并且通过@PathVariable注解获取作为方法的参数。也可以是通配符来筛选请求地址。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/{id}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Controller和-ResponseBody注解"><a href="#Controller和-ResponseBody注解" class="headerlink" title="@Controller和@ResponseBody注解"></a>@Controller和@ResponseBody注解</h3><p>在一个类上添加@Controller注解，表明了这个类是一个控制器类<br>在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面</p><p>若返回json等内容到页面，则需要加@ResponseBody注解<br>@ResponseBody表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径。<br>格式的转换是通过HttpMessageConverter中的方法实现的，因为它是一个接口，因此由其实现类完成转换。</p><h3 id="RestController-1"><a href="#RestController-1" class="headerlink" title="@RestController"></a>@RestController</h3><p>如果需要返回的是数据（如：JSON、XML或自定义的metatype等数据类型）时，@RestController完全等同于@Controller+@Responsebody</p><p>如果要求方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注@RestController，而不用在每个方法中标注@ResponseBody，简化了开发过程。但使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面</p><p>@RestController注解将此类标注为@Controller,并且类方法上面都默认有@ResponseBody</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p><p>在使用@Autowired时，首先在容器中查询对应类型的bean<br>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据<br>如果查询的结果不止一个，那么@Autowired会根据名称来查找。</p><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><p>@Override 注解是用来指定方法重写的，只能修饰方法并且只能用于方法重写，不能修饰其它的元素。它可以强制一个子类必须重写父类方法或者实现接口的方法。</p><h3 id="controller-utils"><a href="#controller-utils" class="headerlink" title="controller.utils"></a>controller.utils</h3><p>表现层数据一致性处理</p><h2 id="整合JUnit"><a href="#整合JUnit" class="headerlink" title="整合JUnit"></a>整合JUnit</h2><h3 id="dao层"><a href="#dao层" class="headerlink" title="dao层"></a>dao层</h3><p>src/main/java/com.arts.demo/dao/BookDao.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo_1.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>src/main/java/com.arts.demo/dao/impl/BookDaoImpl</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.example.demo_1.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.demo_1.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title">BookDao</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"save book"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><p>src/test/java/com.arts.demo/ApplicationTests</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span>  <span class="comment">//测试类注解：设置JUnit加载的SpringBoot启动类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot04JunitApplicationTests</span> </span>{</span><br><span class="line">    <span class="comment">//1.注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//2.执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">"two..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>classes属性：设置SpringBoot启动类<br>如果测试类在SpringBoot启动类的包或子包中，可以省略启动类的设置，也就是省略classes的设定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(classes = Springboot05JUnitApplication.class)</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="数据库环境搭建"><a href="#数据库环境搭建" class="headerlink" title="数据库环境搭建"></a>数据库环境搭建</h1><h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><h3 id="数据源与数据库连接池"><a href="#数据源与数据库连接池" class="headerlink" title="数据源与数据库连接池"></a>数据源与数据库连接池</h3><h4 id="什么是数据源？"><a href="#什么是数据源？" class="headerlink" title="什么是数据源？"></a>什么是数据源？</h4><p>JDBC2.0提供了javax.sql.DataSource接口，它负责建立与数据库的连接，当在应用程序中访问数据库时，不必编写连接数据库的代码，直接引用DataSource获取数据库的连接对象即可。用于获取操作数据的Connection对象。</p><h4 id="什么是数据库连接池？"><a href="#什么是数据库连接池？" class="headerlink" title="什么是数据库连接池？"></a>什么是数据库连接池？</h4><p>数据库连接池的思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。可通过设定连接池的最大连接数来防止系统无尽的与数据库连接。更重要的是我们可以通过连接池的管理机制监视数据库的连接的数量、使用情况，为系统开发、测试以及性能调整提供依据。</p><h4 id="数据源和数据库连接池的关系？"><a href="#数据源和数据库连接池的关系？" class="headerlink" title="数据源和数据库连接池的关系？"></a>数据源和数据库连接池的关系？</h4><p>数据源建立多个数据库连接，这些数据库连接将会保存在数据库连接池中，当需要访问数据库时，只需要从数据库连接池中获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。</p><h4 id="为什么要使用数据库连接池？"><a href="#为什么要使用数据库连接池？" class="headerlink" title="为什么要使用数据库连接池？"></a>为什么要使用数据库连接池？</h4><p>传统的JDBC访问数据库技术，每次访问数据库都需要通过数据库驱动器Driver和数据库名称以及密码等等资源建立数据库连接。</p><p>如此就会存在两大问题：</p><p>频繁的建立与断开数据库连接，会降低执行效率，增加系统资源的开销。<br>数据库的连接需要用户名和密码等资源，这些也需要一定的内存和CPU的开销。<br>而数据库连接池很好地解决了这些问题。</p><h3 id="加载依赖"><a href="#加载依赖" class="headerlink" title="加载依赖"></a>加载依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="更改配置"><a href="#更改配置" class="headerlink" title="更改配置"></a>更改配置</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_db?serverTimezone=UTC</span>  <span class="comment">#Mysql驱动版本大于8.0时，需要在url连接串中配置时区,</span></span><br><span class="line">      <span class="comment">#或者在MySQL数据库端配置时区</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><p>封装JDBC，负责访问数据库，完成持久化操作</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><p>1） MyBatis 是支持定制化 SQL、存储过程以及高级映射的优秀的持久层框架<br>2） MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集<br>3） MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java<br>Objects，普通的Java对象）映射成数据库中的记录<br>4） MyBatis 是一个 半自动的ORM（Object Relation Mapping）框架</p><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>缺点：</p><p>1、编写SQL语句时工作量很大，尤其是字段多、关联表多时，更是如此。</p><p>2、SQL语句依赖于数据库，导致数据库移植性差，不能更换数据库。</p><p>3、框架还是比较简陋，功能尚有缺失，虽然简化了数据绑定代码，但是整个底层数据库查询实际还是要自己写的，工作量也比较大，而且不太容易适应快速数据库修改。</p><p>4、二级缓存机制不佳。</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>MySQL不同版本的注意事项<br>1、驱动类driver-class-name<br>MySQL 5版本使用jdbc5驱动，驱动类使用：com.mysql.jdbc.Driver<br>MySQL 8版本使用jdbc8驱动，驱动类使用：com.mysql.cj.jdbc.Driver<br>2、连接地址url<br>MySQL 5版本的url：<br>jdbc:mysql://localhost:3306/ssm<br>MySQL 8版本的url：<br>jdbc:mysql://localhost:3306/ssm?serverTimezone=UTC<br>否则运行测试用例报告如下错误：<br>java.sql.SQLException: The server time zone value ‘ÖÐ¹ú±ê×¼Ê±¼ä’ is unrecognized or<br>represents more</p><h3 id="导入坐标"><a href="#导入坐标" class="headerlink" title="导入坐标"></a>导入坐标</h3><p>pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="设置数据源参数"><a href="#设置数据源参数" class="headerlink" title="设置数据源参数"></a>设置数据源参数</h3><p>src/main/resources/applacation.yml</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/demo_db?serverTimezone=UTC</span>  <span class="comment">#Mysql驱动版本大于8.0时，需要在url连接串中配置时区,</span></span><br><span class="line">    <span class="string">或者在MySQL数据库端配置时区</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">use bookdb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> book</span><br><span class="line">(</span><br><span class="line">    `id`          <span class="type">int</span>          <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">    `name`        <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `type`        <span class="type">VARCHAR</span>(<span class="number">40</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `description` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring?实战第5版'</span>, <span class="string">'Spring入门经典教程，深入理解Spring原理技术内幕'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring5核心原理与30个类手写实战'</span>, <span class="string">'十年沉淀之作，手写Spring精华思想'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring5设计模式'</span>, <span class="string">'深入Spring源码剖析Spring源码中蕴含的10大设计模式'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'计算机理论'</span>, <span class="string">'Spring MVC+MyBatis开发从入门到项目实战'</span>, <span class="string">'全方位解析面向Web应用的轻量级框架，带你成为Spring MVC开发高手'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'计算机理论'</span>, <span class="string">'轻量级Java Web企业应用实战'</span>, <span class="string">'源码级剖析Spring框架，适合已掌握ava基础的读者'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'6'</span>, <span class="string">'计算机理论'</span>, <span class="string">'Java核心技术卷1基础知识(原书第11版)'</span>, <span class="string">'Core Java第11版，Jolt大奖获奖作品，针对）ava SE9、10、11全面更新'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'7'</span>, <span class="string">'计算机理论'</span>, <span class="string">'深入理解ava虚拟机'</span>, <span class="string">'5个维度全面剖析VM,大厂面试知识点全覆盖'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'8'</span>, <span class="string">'计算机理论'</span>, <span class="string">'Java编程思想(第4版)'</span>, <span class="string">'Java学习必读经典，殿堂级著作！赢得了全球程序员的广泛赞誉'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'9'</span>, <span class="string">'计算机理论'</span>, <span class="string">'零基础学）ava（全彩版）'</span>, <span class="string">'零基础自学编程的入门图书，由浅入深，详解Java语言的编程思想和核心技术'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'10'</span>, <span class="string">'市场营销'</span>, <span class="string">'直播就该这么做：主播高效沟通实战指南'</span>, <span class="string">'李子柒、李佳琦、薇娅成长为网红的秘密都在书中'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'11'</span>, <span class="string">'市场营销'</span>, <span class="string">'直播销讲实战一本通'</span>, <span class="string">'和秋叶一起学系列网络营销书籍'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> book(id, type, name, description)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'12'</span>, <span class="string">'市场营销'</span>, <span class="string">'直播带货：淘宝、天猫直播从新手到高手'</span>, <span class="string">'一本教你如何玩转直播的书，10堂课轻松实现带货月入3W+'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="创建实体类"><a href="#创建实体类" class="headerlink" title="创建实体类"></a>创建实体类</h3><p>src.main/.resources.java.main.com.arts.demo.domain.Book.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arts.demo.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set/get方法</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="定义数据层接口与映射配置"><a href="#定义数据层接口与映射配置" class="headerlink" title="定义数据层接口与映射配置"></a>定义数据层接口与映射配置</h3><p>src.main/.resources.java.main.com.arts.demo.dao.BookDao.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arts.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.arts.demo.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>{</span><br><span class="line">    <span class="meta">@Select("select * from book where id = #{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="测试类中注入dao接口，测试功能"><a href="#测试类中注入dao接口，测试功能" class="headerlink" title="测试类中注入dao接口，测试功能"></a>测试类中注入dao接口，测试功能</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arts.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.arts.demo.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> com.arts.demo.domain.Book;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = bookDao.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="创建maven工程"><a href="#创建maven工程" class="headerlink" title="创建maven工程"></a>创建maven工程</h3><p>①打包方式：jar<br>②引入依赖</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mybatis核心 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建MyBatis的核心配置文件"><a href="#创建MyBatis的核心配置文件" class="headerlink" title="创建MyBatis的核心配置文件"></a>创建MyBatis的核心配置文件</h3><p>习惯上命名为mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合Spring<br>之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。<br>核心配置文件主要用于配置连接数据库的环境以及MyBatis的全局配置信息<br>核心配置文件存放的位置是src/main/resources目录下</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--MyBatis核心配置文件中，标签的顺序： properties?,settings?,typeAliases?,typeHandlers?, objectFactory?,</span></span><br><span class="line"><span class="comment">    objectWrapperFactory?,reflectorFactory?, plugins?,environments?,databaseIdProvider?,mappers? --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"jdbc.properties"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置类型别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--typeAlias：设置某个类型的别名</span></span><br><span class="line"><span class="comment">        属性：</span></span><br><span class="line"><span class="comment">            type：设置需要设置别名的类型</span></span><br><span class="line"><span class="comment">            alias：设置某个类型的别名，若不设置该属性，那么该类型拥有默认的别名，即类名 且不区分大小写 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;typeAlias type="com.atguigu.mybatis.pojo.User"&gt;&lt;/typeAlias&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位，将包下所有的类型设置默认的类型别名，即类名且不区分大小写--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.atguigu.mybatis.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--environments：配置多个连接数据库的环境 属性：default：设置默认使用的环境的id --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--environment：配置某个具体的环境 属性：id：表示连接数据库的环境的唯一标识，不能重复 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span></span></span><br><span class="line"><span class="tag">                <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--transactionManager：设置事务管理方式 属性：type="JDBC|MANAGED" JDBC：表示当前环境中，执行SQL时，使用的是JDBC中原生的事务管理方式，事 务的提交或回滚需要手动处理MANAGED：被管理，例如Spring --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--dataSource：配置数据源 属性：type：设置数据源的类型 type="POOLED|UNPOOLED|JNDI" POOLED：表示使用数据库连接池缓存数据库连接 UNPOOLED：表示不使用数据库连接池 JNDI：表示使用上下文中的数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的驱动--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"${jdbc.driver}"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的连接地址--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"${jdbc.url}"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"${jdbc.username}"</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--设置连接数据库的密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"${jdbc.password}"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.cj.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/ssmserverTimezone=UTC"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入映射文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper resource="mappers/UserMapper.xml"/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--以包为单位引入映射文件 要求： 1、mapper接口所在的包要和映射文件所在的包一致 2、mapper接口要和映射文件的名字一致 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.atguigu.mybatis.mapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="创建mapper接口"><a href="#创建mapper接口" class="headerlink" title="创建mapper接口"></a>创建mapper接口</h3><p>MyBatis中的mapper接口相当于以前的dao。但是区别在于，mapper仅仅是接口，我们不需要<br>提供实现类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/main/resources/mappers/UserMapper.java</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>{</span><br><span class="line">    <span class="comment">/*** 添加用户信息 */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insertUser</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="创建MyBatis的映射文件"><a href="#创建MyBatis的映射文件" class="headerlink" title="创建MyBatis的映射文件"></a>创建MyBatis的映射文件</h3><p>相关概念：ORM（Object Relationship Mapping）对象关系映射。<br>对象：Java的实体类对象<br>关系：关系型数据库<br>映射：二者之间的对应关系</p><p>1、映射文件的<strong>命名规则</strong>：<br>表所对应的实体类的类名+Mapper.xml<br>例如：表t_user，映射的实体类为User，所对应的映射文件为UserMapper.xml<br>因此一个映射文件对应一个实体类，对应一张表的操作<br>MyBatis映射文件用于编写SQL，访问以及操作表中的数据<br>MyBatis映射文件存放的位置是src/main/resources/mappers目录下</p><p>2、 MyBatis中可以<strong>面向接口操作数据</strong>，要保证两个一致：<br>a&gt;mapper接口的全类名和映射文件的命名空间（namespace）保持一致<br>b&gt;mapper接口中方法的方法名和映射文件中编写SQL的标签的id属性保持一致</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">src/main/resources/mappers/UserMapper.xml</span><br><span class="line">        <span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span> <span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.atguigu.mybatis.mapper.UserMapper"</span>&gt;</span> <span class="comment">&lt;!--int insertUser();--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span>&gt;</span>insert into t_user</span><br><span class="line">        values (null, 'admin', '123456', 23, '男', '12345@qq.com')</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="mybatis-plus"><a href="#mybatis-plus" class="headerlink" title="mybatis-plus"></a>mybatis-plus</h2><p><a href="https://baomidou.com/pages/24112f/">mybatis-plus文档</a></p><p>数据库框架：Mybatis Plus &gt; Mybatis<br>代码生成器：Mybatis Plus Generator &gt; Mybatis Generator</p><p>mybatis-plus是对mybatis的封装，有一些复杂的东西，mybatis-plus可能本身做不到，还是得用回mybatis本身的功能去实现的。</p><p>Mybatis Plus<br>针对单表的基本CRUD操作，只需要创建好实体类，并创建一个继承自BaseMapper的接口即可，可谓非常简洁。并且，我们注意到，User类中的managerId，createTime属性，自动和数据库表中的manager_id，create_time对应了起来，这是因为mp自动做了数据库下划线命名，到Java类的驼峰命名之间的转化。</p><h3 id="导入依赖坐标"><a href="#导入依赖坐标" class="headerlink" title="导入依赖坐标"></a>导入依赖坐标</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml  </span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?serverTimezone=Asia/Shanghai</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#开启SQL语句打印</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># mybatis-plus:</span></span><br><span class="line"><span class="comment">#   global-config:</span></span><br><span class="line"><span class="comment">#     db-config:</span></span><br><span class="line"><span class="comment">#       table-prefix: tbl_        #设置表名通用前缀</span></span><br><span class="line"><span class="comment">#       id-type: auto                #设置主键id字段的生成策略为参照数据库设定的策略，当前数据库设置id生成策略为自增</span></span><br></pre></td></tr></tbody></table></figure><h3 id="定义数据层接口与映射配置，继承BaseMapper"><a href="#定义数据层接口与映射配置，继承BaseMapper" class="headerlink" title="定义数据层接口与映射配置，继承BaseMapper"></a>定义数据层接口与映射配置，继承BaseMapper</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arts.demo.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.arts.demo.domain.Book;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Book</span>&gt; </span>{</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其他同SpringBoot整合MyBatis</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.arts.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.arts.demo.dao.BookDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(bookDao.selectById(<span class="number">2</span>));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetAll</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(bookDao.selectList(<span class="keyword">null</span>));</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="dao数据层CRUD-接口"><a href="#dao数据层CRUD-接口" class="headerlink" title="dao数据层CRUD 接口"></a>dao数据层CRUD 接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//Dao层  操作数据库的   指定操作Student对象的增删改查基本操作</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">Student</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//继承mybatis-plus的BaseMapper接口</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="service业务层CRUD-接口"><a href="#service业务层CRUD-接口" class="headerlink" title="service业务层CRUD 接口"></a>service业务层CRUD 接口</h3><p>IService接口封装了对数据的增删改查<br>泛型中填上实体类</p><p>service/UserService.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">Student</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//继承mybatis-plus的IService接口</span></span><br><span class="line"><span class="comment">//    若封装好的增删改查不能完成我们所需要的操作，我们依然可以在下面进行方法书写，切记不要将方法覆盖</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>Save<br>SaveOrUpdate<br>Remove<br>Update<br>Get<br>List<br>Page<br>Count<br>Chain</p><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询所有</span></span><br><span class="line"><span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">()</span></span>;   <span class="comment">//返回类型是List&lt;T&gt;   </span></span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">        <span class="function">List&lt;T&gt; <span class="title">list</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据ID 批量查询）</span></span><br><span class="line">        <span class="function">Collection&lt;T&gt; <span class="title">listByIds</span><span class="params">(Collection&lt;?extends Serializable&gt; idList)</span></span>;</span><br><span class="line"><span class="comment">// 查询（根据 columnMap 条件）</span></span><br><span class="line">        <span class="function">Collection&lt;T&gt; <span class="title">listByMap</span><span class="params">(Map&lt;String, Object&gt; columnMap)</span></span>;</span><br><span class="line"><span class="comment">// 查询所有列表</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt;listMaps();</span><br><span class="line"><span class="comment">// 查询列表</span></span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt;listMaps(Wrapper&lt;T&gt; queryWrapper);</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">        <span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Function&lt;? <span class="keyword">super</span> Object,V&gt;mapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">        <span class="function">List&lt;Object&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper)</span></span>;</span><br><span class="line"><span class="comment">// 根据 Wrapper 条件，查询全部记录</span></span><br><span class="line">&lt;V&gt; <span class="function">List&lt;V&gt; <span class="title">listObjs</span><span class="params">(Wrapper&lt;T&gt; queryWrapper,Function&lt;? <span class="keyword">super</span> Object,V&gt;mapper)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="运维实用篇"><a href="#运维实用篇" class="headerlink" title="运维实用篇"></a>运维实用篇</h1><p>​  基础篇发布以后，看到了很多小伙伴在网上的留言，也帮助超过100位小伙伴解决了一些遇到的问题，并且已经发现了部分问题具有典型性，预计将有些问题在后面篇章的合适位置添加到本套课程中，作为解决方案提供给大家。</p><p>​  从此刻开始，咱们就要进入到实用篇的学习了。实用篇是在基础篇的根基之上，补全SpringBoot的知识图谱。比如在基础篇中只给大家讲了yaml的语法格式，但是具体写yaml文件的时候还有很多实用开发过程中的坑，这些在实用篇中都要进行学习。</p><p>​  实用篇共分为两块内容，分别是运维实用篇和开发实用篇。其实划分的标准是我自己制定的，因为这里面的知识有一些还是比较散的，做两个阶段的划分是为了更好的将同类知识点进行归类，帮助学习者找到知识之间的关联性，这样有助于知识的记忆存储转换，经过一系列的知识反复出现与强化练习，将临时记忆转换成永久性记忆。做课程嘛，不能仅以讲完为目标，要以学习者的学习收获为目标，这也是我这么多年教学秉承的基本理念。</p><p>​  下面就从运维实用篇开始讲，在运维实用篇中，我给学习者的定位是玩转配置，为开发实用篇中做各种技术的整合做好准备工作。与开发实用篇相比，运维实用篇的内容显得略微单薄，并且有部分知识模块在运维实用篇和开发实用篇中都要讲一部分，这些内容都后置到开发实用篇中了。废话不说了，先看看运维实用篇中都包含哪些内容：</p><ul><li>SpringBoot程序的打包与运行</li><li>配置高级</li><li>多环境开发</li><li>日志</li></ul><p>​  下面开启第一部分SpringBoot程序打包与运行的学习</p><h2 id="SpringBoot程序的打包与运行"><a href="#SpringBoot程序的打包与运行" class="headerlink" title="SpringBoot程序的打包与运行"></a>SpringBoot程序的打包与运行</h2><p>​  刚开始做开发学习的小伙伴可能在有一个知识上面有错误的认知，我们天天写程序是在Idea下写的，运行也是在Idea下运行的。</p><p>​  但是实际开发完成后，我们的项目是不可能运行在自己的电脑上的。</p><p>​  我们以后制作的程序是运行在专用的服务器上的，简单说就是将你做的程序放在一台独立运行的电脑上，这台电脑要比你开发使用的计算机更专业，并且安全等级各个方面要远超过你现在的电脑。</p><p>​  那我们的程序如何放置在这台专用的电脑上呢，这就要将我们的程序先组织成一个文件，然后将这个文件传输到这台服务器上。这里面就存在两个过程，一个是打包的过程，另一个是运行的过程。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​  企业项目上线为了保障环境适配性会采用下面流程发布项目，这里不讨论此过程。</p><ol><li>开发部门使用Git、SVN等版本控制工具上传工程到版本服务器</li><li>服务器使用版本控制工具下载工程</li><li>服务器上使用Maven工具在当前真机环境下重新构建项目</li><li>启动服务</li></ol><p>​  继续说我们的打包和运行过程。所谓打包指将程序转换成一个可执行的文件，所谓运行指不依赖开发环境执行打包产生的文件。上述两个操作都有对应的命令可以快速执行。</p><h3 id="程序打包"><a href="#程序打包" class="headerlink" title="程序打包"></a>程序打包</h3><p>​  SpringBoot程序是基于Maven创建的，在Maven中提供有打包的指令，叫做package。本操作可以在Idea环境下执行。</p><p>在idea中点击Maven-生命周期-package</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn <span class="keyword">package</span></span><br></pre></td></tr></tbody></table></figure><p>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<br>​  打包后会产生一个与工程名类似的jar文件，其名称是由模块名+版本号+.jar组成的。</p><p>使用SpringBoot提供的maven插件可以将工程打包成可执行jar包</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.7.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="程序运行"><a href="#程序运行" class="headerlink" title="程序运行"></a>程序运行</h3><p>​  程序包打好以后，就可以直接执行了。在程序包所在路径下，执行指令。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar 工程包名.jar</span><br></pre></td></tr></tbody></table></figure><p>​  执行程序打包指令后，程序正常运行，与在Idea下执行程序没有区别。</p><p>​  <font color="#ff0000"><b>特别关注</b></font>：如果你的计算机中没有安装java的jdk环境，是无法正确执行上述操作的，因为程序执行使用的是java指令。</p><p>​  <font color="#ff0000"><b>特别关注</b></font>：在使用向导创建SpringBoot工程时，pom.xml文件中会有如下配置，这一段配置千万不能删除，否则打包后无法正常执行程序。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>SpringBoot工程可以基于java环境下独立运行jar文件启动服务</li><li>SpringBoot工程执行mvn命令package进行打包</li><li>执行jar命令：java –jar 工程名.jar</li></ol><h3 id="SpringBoot程序打包失败处理"><a href="#SpringBoot程序打包失败处理" class="headerlink" title="SpringBoot程序打包失败处理"></a>SpringBoot程序打包失败处理</h3><p>​  有些小伙伴打包以后执行会出现一些问题，导致程序无法正常执行，例如下面的现象</p><p>​  要想搞清楚这个问题就要说说.jar文件的工作机制了，知道了这个东西就知道如何避免此类问题的发生了。</p><p>​  搞java开发平时会接触很多jar包，比如mysql的驱动jar包，而上面我们打包程序后得到的也是一个jar文件。这个时候如果你使用上面的java -jar指令去执行mysql的驱动jar包就会出现上述不可执行的现象，而我们的SpringBoot项目为什么能执行呢？其实是因为打包方式不一样。</p><p>​  在SpringBoot工程的pom.xml中有下面这组配置，这组配置决定了打包出来的程序包是否可以执行。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  我们分别开启这段配置和注释掉这段配置分别执行两次打包，然后观察两次打包后的程序包的差别，共有3处比较明显的特征</p><ul><li>打包后文件的大小不同</li><li>打包后所包含的内容不同</li><li>打包程序中个别文件内容不同</li></ul><p>​  先看第一个现象，文件大小不同。带有配置时打包生成的程序包大小如下：</p><img src="img\image-20211201095610270.png" alt="image-20211201095610270" style="zoom:150%;"><p>​  不难看出，带有配置的程序包体积比不带配置的大了30倍，那这里面都有什么呢？能差这么多？下面看看里面的内容有什么区别。</p><p>​  <img src="img\image-20211201101541267.png" alt="image-20211201101541267" style="zoom:50%;"><img src="img\image-20211201101652868.png" alt="image-20211201101652868" style="zoom:50%;"></p><p>​  我们发现内容也完全不一样，仅有一个目录是一样的，叫做META-INF。打开容量大的程序包中的BOOT-INF目录下的classes目录，我们发现其中的内容居然和容量小的程序包中的内容完全一样。</p><p>​  <img src="img\image-20211201101805569.png" alt="image-20211201101805569" style="zoom:50%;"><img src="img\image-20211201101652868.png" alt="image-20211201101652868" style="zoom:50%;"></p><p>​  原来大的程序包中除了包含小的程序包中的内容，还有别的东西。都有什么呢？回到BOOT-INF目录下，打开lib目录，里面显示了很多个jar文件。</p><p>​  <img src="img\image-20211201102025791.png" alt="image-20211201102025791" style="zoom:50%;"></p><p>​  仔细翻阅不难发现，这些jar文件都是我们制作这个工程时导入的坐标对应的文件。大概可以想明白了，SpringBoot程序为了让自己打包生成的程序可以独立运行，不仅将项目中自己开发的内容进行了打包，还把当前工程运行需要使用的jar包全部打包进来了。为什么这样做呢？就是为了可以独立运行。不依赖程序包外部的任何资源可以独立运行当前程序。这也是为什么大的程序包容量是小的程序包容量的30倍的主要原因。</p><p>​  再看看大程序包还有什么不同之处，在最外层目录包含一个org目录，进入此目录，目录名是org\springframework\boot\loader，在里面可以找到一个<font color="#ff0000"><b>JarLauncher.class</b></font>的文件，先记得这个文件。再看这套目录名，明显是一个Spring的目录名，为什么要把Spring框架的东西打包到这个程序包中呢？不清楚。</p><p>​  回到两个程序包的最外层目录，查看名称相同的文件夹META-INF下都有一个叫做MANIFEST.MF的文件，但是大小不同，打开文件，比较内容区别</p><ul><li><p>小容量文件的MANIFEST.MF</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Implementation-Title: springboot_08_ssmp</span><br><span class="line">Implementation-Version: <span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT</span><br><span class="line">Build-Jdk-Spec: <span class="number">1.8</span></span><br><span class="line">Created-By: Maven Jar Plugin <span class="number">3.2</span><span class="number">.0</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>大容量文件的MANIFEST.MF</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Manifest-Version: <span class="number">1.0</span></span><br><span class="line">Spring-Boot-Classpath-Index: BOOT-INF/classpath.idx</span><br><span class="line">Implementation-Title: springboot_08_ssmp</span><br><span class="line">Implementation-Version: <span class="number">0.0</span><span class="number">.1</span>-SNAPSHOT</span><br><span class="line">Spring-Boot-Layers-Index: BOOT-INF/layers.idx</span><br><span class="line">Start-Class: com.itheima.SSMPApplication</span><br><span class="line">Spring-Boot-Classes: BOOT-INF/classes/</span><br><span class="line">Spring-Boot-Lib: BOOT-INF/lib/</span><br><span class="line">Build-Jdk-Spec: <span class="number">1.8</span></span><br><span class="line">Spring-Boot-Version: <span class="number">2.5</span><span class="number">.4</span></span><br><span class="line">Created-By: Maven Jar Plugin <span class="number">3.2</span><span class="number">.0</span></span><br><span class="line">Main-Class: org.springframework.boot.loader.JarLauncher</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​  大文件中明显比小文件中多了几行信息，其中最后一行信息是Main-Class: org.springframework.boot.loader.<font color="#ff0000"><b>JarLauncher</b></font>。这句话什么意思呢？如果使用java -jar执行此程序包，将执行Main-Class属性配置的类，这个类恰巧就是前面看到的那个文件。原来SpringBoot打包程序中出现Spring框架的东西是为这里服务的。而这个org.springframework.boot.loader.<font color="#ff0000"><b>JarLauncher</b></font>类内部要查找Start-Class属性中配置的类，并执行对应的类。这个属性在当前配置中也存在，对应的就是我们的引导类类名。</p><p>​  现在这组设定的作用就搞清楚了</p><ol><li>SpringBoot程序添加配置后会打出一个特殊的包，包含Spring框架部分功能，原始工程内容，原始工程依赖的jar包</li><li>首先读取MANIFEST.MF文件中的Main-Class属性，用来标记执行java -jar命令后运行的类</li><li>JarLauncher类执行时会找到Start-Class属性，也就是启动类类名</li><li>运行启动类时会运行当前工程的内容</li><li>运行当前工程时会使用依赖的jar包，从lib目录中查找</li></ol><p>​  看来SpringBoot打出来了包为了能够独立运行，简直是煞费苦心，将所有需要使用的资源全部都添加到了这个包里。这就是为什么这个jar包能独立运行的原因。</p><p>​  再来看之前的报错信息：</p><img src="img\image-20211201094223991.png" alt="image-20211201094223991" style="zoom:67%;"><p>​  由于打包时没有使用那段配置，结果打包后形成了一个普通的jar包，在MANIFEST.MF文件中也就没有了Main-Class对应的属性了，所以运行时提示找不到主清单属性，这就是报错的原因。</p><p>​  上述内容搞清楚对我们编程意义并不大，但是对各位小伙伴理清楚SpringBoot工程独立运行的机制是有帮助的。其实整体过程主要是带着大家分析，如果以后遇到了类似的问题，多给自己提问，多问一个为什么，兴趣自己就可以独立解决问题了。</p><p><strong>总结</strong></p><ol><li>spring-boot-maven-plugin插件用于将当前程序打包成一个可以独立运行的程序包</li></ol><h3 id="命令行启动常见问题及解决方案"><a href="#命令行启动常见问题及解决方案" class="headerlink" title="命令行启动常见问题及解决方案"></a>命令行启动常见问题及解决方案</h3><p>​  各位小伙伴在DOS环境下启动SpringBoot工程时，可能会遇到端口占用的问题。给大家一组命令，不用深入学习，备用吧。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查询端口</span></span><br><span class="line">netstat -ano</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查询指定端口</span></span><br><span class="line">netstat -ano |findstr "端口号"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据进程PID查询进程名称</span></span><br><span class="line">tasklist |findstr "进程PID号"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据PID杀死任务</span></span><br><span class="line">taskkill /F /PID "进程PID号"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 根据进程名称杀死任务</span></span><br><span class="line">taskkill -f -t -im "进程名称"</span><br></pre></td></tr></tbody></table></figure><p>​  关于打包与运行程序其实还有一系列的配置和参数，下面的内容中遇到再说，这里先开个头，知道如何打包和运行程序。</p><h3 id="SpringBoot项目快速启动（Linux版）"><a href="#SpringBoot项目快速启动（Linux版）" class="headerlink" title="SpringBoot项目快速启动（Linux版）"></a>SpringBoot项目快速启动（Linux版）</h3><p>​  其实对于Linux系统下的程序运行与Windows系统下的程序运行差别不大，命令还是那组命令，只不过各位小伙伴可能对Linux指令不太熟悉，结果就会导致各种各样的问题发生。比如防火墙如何关闭，IP地址如何查询，JDK如何安装等等。这里不作为重点内容给大家普及了，了解一下整体过程就行了。</p><h2 id="配置高级"><a href="#配置高级" class="headerlink" title="配置高级"></a>配置高级</h2><p>​  关于配置在基础篇讲过一部分，基础篇的配置总体上来说就是让各位小伙伴掌握配置的格式。比如配置文件如何写啊，写好的数据如何读取啊，都是基础的语法级知识。在实用篇中就要集中在配置的应用这个方面了，下面就开始配置高级相关内容的第一部分学习，为什么说第一部分，因为在开发实用篇中还有对应的配置高级知识要进行学习。</p><h3 id="临时属性设置"><a href="#临时属性设置" class="headerlink" title="临时属性设置"></a>临时属性设置</h3><p>​  目前我们的程序包打好了，可以发布了。但是程序包打好以后，里面的配置都已经是固定的了，比如配置了服务器的端口是8080。如果我要启动项目，发现当前我的服务器上已经有应用启动起来并且占用了8080端口，这个时候就尴尬了。难道要重新把打包好的程序修改一下吗？比如我要把打包好的程序启动端口改成80。</p><p>​  SpringBoot提供了灵活的配置方式，如果你发现你的项目中有个别属性需要重新配置，可以使用临时属性的方式快速修改某些配置。方法也特别简单，在启动的时候添加上对应参数就可以了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=<span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>​  上面的命令是启动SpringBoot程序包的命令，在命令输入完毕后，空一格，然后输入两个-号。下面按照属性名=属性值的形式添加对应参数就可以了。记得，这里的格式不是yaml中的书写格式，当属性存在多级名称时，中间使用点分隔，和properties文件中的属性格式完全相同。</p><p>​  如果你发现要修改的属性不止一个，可以按照上述格式继续写，属性与属性之间使用空格分隔。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java –jar springboot.jar –-server.port=<span class="number">80</span> --logging.level.root=debug</span><br></pre></td></tr></tbody></table></figure><h4 id="属性加载优先级"><a href="#属性加载优先级" class="headerlink" title="属性加载优先级"></a>属性加载优先级</h4><p>​  现在我们的程序配置受两个地方控制了，第一配置文件，第二临时属性。并且我们发现临时属性的加载优先级要高于配置文件的。那是否还有其他的配置方式呢？其实是有的，而且还不少，打开官方文档中对应的内容，就可以查看配置读取的优先顺序。地址奉上：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></p><img src="img\image-20211206100859236.png" alt="image-20211206100859236" style="zoom:67%;"><p>​  我们可以看到，居然有14种配置的位置，而我们现在使用的是这里面的2个。第3条Config data说的就是使用配置文件，第11条Command line arguments说的就是使用命令行临时参数。而这14种配置的顺序就是SpringBoot加载配置的顺序，言外之意，命令行临时属性比配置文件的加载优先级高，所以这个列表上面的优先级低，下面的优先级高。其实这个东西不用背的，你就记得一点，你最终要什么效果，你自己是知道的，不管这个顺序是怎么个高低排序，开发时一定要配置成你要的顺序为准。这个顺序只是在你想不明白问题的时候帮助你分析罢了。</p><p>​  比如你现在加载了一个user.name属性。结果你发现出来的结果和你想的不一样，那肯定是别的优先级比你高的属性覆盖你的配置属性了，那你就可以看着这个顺序挨个排查。哪个位置有可能覆盖了你的属性。</p><p>​  我在课程评论区看到小伙伴学习基础篇的时候问这个问题了，就是这个原因造成的。在yaml中配置了user.name属性值，然后读取出来的时候居然不是自己的配置值，因为在系统属性中有一个属性叫做user.name，两个相互冲突了。而系统属性的加载优先顺序在上面这个列表中是5号，高于3号，所以SpringBoot最终会加载系统配置属性user.name。</p><p><strong>总结</strong></p><ol><li>使用jar命令启动SpringBoot工程时可以使用临时属性替换配置文件中的属性</li><li>临时属性添加方式：java –jar 工程名.jar –-属性名=值</li><li>多个临时属性之间使用空格分隔</li><li>临时属性必须是当前boot工程支持的属性，否则设置无效</li></ol><h4 id="开发环境中使用临时属性"><a href="#开发环境中使用临时属性" class="headerlink" title="开发环境中使用临时属性"></a>开发环境中使用临时属性</h4><p>​  临时使用目前是有了，但是上线的时候通过命令行输入的临时属性必须是正确的啊，那这些属性配置值我们必须在开发环境中测试好才行。下面说一下开发环境中如何使用临时属性，其实就是Idea界面下如何操作了。</p><p>​  打开SpringBoot引导类的运行界面，在里面找到配置项。其中Program arguments对应的位置就是添加临时属性的，可以加几个试试效果。</p><p>​  做到这里其实可以产生一个思考了，如果对java编程熟悉的小伙伴应该知道，我们运行main方法的时候，如果想使用main方法的参数，也就是下面的args参数，就是在上面这个位置添加的参数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  原来是这样，通过这个args就可以获取到参数。再来看我们的引导类是如何书写的</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    SpringApplication.run(SSMPApplication.class,args);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  这个args参数居然传递给了run方法，看来在Idea中配置的临时参数就是通过这个位置传递到我们的程序中的。言外之意，这里如果不用这个args是不是就断开了外部传递临时属性的入口呢？是这样的，我们可以使用下面的调用方式，这样外部临时属性就无法进入到SpringBoot程序中了。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    SpringApplication.run(SSMPApplication.class);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  或者还可以使用如下格式来玩这个操作，就是将配置不写在配置文件中，直接写成一个字符串数组，传递给程序入口。当然，这种做法并没有什么实际开发意义。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">    String[] arg = <span class="keyword">new</span> String[<span class="number">1</span>];</span><br><span class="line">    arg[<span class="number">0</span>] = <span class="string">"--server.port=8082"</span>;</span><br><span class="line">    SpringApplication.run(SSMPApplication.class, arg);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>启动SpringBoot程序时，可以选择是否使用命令行属性为SpringBoot程序传递启动属性</li></ol><p><strong>思考</strong></p><p>​  现在使用临时属性可以在启动项目前临时更改配置了，但是新的问题又出来了。临时属性好用是好用，就是写的多了会很麻烦。比如我现在有个需求，上线的时候使用临时属性配置20个值，这下可麻烦了，能不能搞得简单点，集中管理一下呢？比如说搞个文件，加载指定文件？还真可以。怎么做呢？咱们下一节再说。</p><h3 id="配置文件分类"><a href="#配置文件分类" class="headerlink" title="配置文件分类"></a>配置文件分类</h3><p>​  SpringBoot提供了配置文件和临时属性的方式来对程序进行配置。前面一直说的是临时属性，这一节要说说配置文件了。其实这个配置文件我们一直在使用，只不过我们用的是SpringBoot提供的4级配置文件中的其中一个级别。4个级别分别是：</p><ul><li>类路径下配置文件（一直使用的是这个，也就是resources目录中的application.yml文件）</li><li>类路径下config目录下配置文件</li><li>程序包所在目录中配置文件</li><li>程序包所在目录中config目录下配置文件</li></ul><p>​  好复杂，一个一个说。其实上述4种文件是提供给你了4种配置文件书写的位置，功能都是一样的，都是做配置的。那大家关心的就是差别了，没错，就是因为位置不同，产生了差异。总体上来说，4种配置文件如果都存在的话，有一个优先级的问题，说白了就是加入4个文件我都有，里面都有一样的配置，谁生效的问题。上面4个文件的加载优先顺序为</p><ol><li>file ：config/application.yml <strong>【最高】</strong></li><li>file ：application.yml</li><li>classpath：config/application.yml</li><li>classpath：application.yml  <strong>【最低】</strong></li></ol><p>​  那为什么设计这种多种呢？说一个最典型的应用吧。</p><ul><li>场景A：你作为一个开发者，你做程序的时候为了方便自己写代码，配置的数据库肯定是连接你自己本机的，咱们使用4这个级别，也就是之前一直用的application.yml。</li><li>场景B：现在项目开发到了一个阶段，要联调测试了，连接的数据库是测试服务器的数据库，肯定要换一组配置吧。你可以选择把你之前的文件中的内容都改了，目前还不麻烦。</li><li>场景C：测试完了，一切OK。你继续写你的代码，你发现你原来写的配置文件被改成测试服务器的内容了，你要再改回来。现在明白了不？场景B中把你的内容都改掉了，你现在要重新改回来，以后呢？改来改去吗？</li></ul><p>​  解决方案很简单，用上面的3这个级别的配置文件就可以快速解决这个问题，再写一个配置就行了。两个配置文件共存，因为config目录中的配置加载优先级比你的高，所以配置项如果和级别4里面的内容相同就覆盖了，这样是不是很简单？</p><p>​  级别1和2什么时候使用呢？程序打包以后就要用这个级别了，管你程序里面配置写的是什么？我的级别高，可以轻松覆盖你，就不用考虑这些配置冲突的问题了。</p><p><strong>总结</strong></p><ol><li>配置文件分为4种</li></ol><ul><li>项目类路径配置文件：服务于开发人员本机开发与测试</li><li>项目类路径config目录中配置文件：服务于项目经理整体调控</li><li>工程路径配置文件：服务于运维人员配置涉密线上环境</li><li>工程路径config目录中配置文件：服务于运维经理整体调控</li></ul><ol start="2"><li>多层级配置文件间的属性采用叠加并覆盖的形式作用于程序</li></ol><h3 id="自定义配置文件"><a href="#自定义配置文件" class="headerlink" title="自定义配置文件"></a>自定义配置文件</h3><p>​  之前咱们做配置使用的配置文件都是application.yml，其实这个文件也是可以改名字的，这样方便维护。比如我2020年4月1日搞活动，走了一组配置，2020年5月1日活动取消，恢复原始配置，这个时候只需要重新更换一下配置文件就可以了。但是你总不能在原始配置文件上修改吧，不然搞完活动以后，活动的配置就留不下来了，不利于维护。</p><p>​  自定义配置文件方式有如下两种：</p><p><strong>方式一：使用临时属性设置配置文件名，注意仅仅是名称，不要带扩展名</strong></p><img src="img\image-20211206105548238.png" alt="image-20211206105548238" style="zoom:67%;"><p><strong>方式二：使用临时属性设置配置文件路径，这个是全路径名</strong></p><img src="img\image-20211206105716450.png" alt="image-20211206105716450" style="zoom:67%;"><p>​  也可以设置加载多个配置文件</p><img src="img\image-20211206105750285.png" alt="image-20211206105750285" style="zoom:67%;"><p>​  使用的属性一个是spring.config.name，另一个是spring.config.location，这个一定要区别清楚。</p><p><font color="#f0f"><b>温馨提示</b></font></p><p>​  我们现在研究的都是SpringBoot单体项目，就是单服务器版本。其实企业开发现在更多的是使用基于SpringCloud技术的多服务器项目。这种配置方式和我们现在学习的完全不一样，所有的服务器将不再设置自己的配置文件，而是通过配置中心获取配置，动态加载配置信息。为什么这样做？集中管理。这里不再说这些了，后面再讲这些东西。</p><p><strong>总结</strong></p><ol><li>配置文件可以修改名称，通过启动参数设定</li><li>配置文件可以修改路径，通过启动参数设定</li><li>微服务开发中配置文件通过配置中心进行设置</li></ol><h2 id="多环境开发"><a href="#多环境开发" class="headerlink" title="多环境开发"></a>多环境开发</h2><p>​  讲的内容距离线上开发越来越近了，下面说一说多环境开发问题。</p><p>​  什么是多环境？其实就是说你的电脑上写的程序最终要放到别人的服务器上去运行。每个计算机环境不一样，这就是多环境。常见的多环境开发主要兼顾3种环境设置，开发环境——自己用的，测试环境——自己公司用的，生产环境——甲方爸爸用的。因为这是绝对不同的三台电脑，所以环境肯定有所不同，比如连接的数据库不一样，设置的访问端口不一样等等。</p><img src="img\image-20211206110958819.png" alt="image-20211206110958819" style="zoom:67%;"><h3 id="多环境开发（yaml单一文件版）"><a href="#多环境开发（yaml单一文件版）" class="headerlink" title="多环境开发（yaml单一文件版）"></a>多环境开发（yaml单一文件版）</h3><p>​  那什么是多环境开发？就是针对不同的环境设置不同的配置属性即可。比如你自己开发时，配置你的端口如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>​  如何想设计两组环境呢？中间使用三个减号分隔开</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><p>​  如何区分两种环境呢？起名字呗</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><p>​  那用哪一个呢？设置默认启动哪个就可以了</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">pro</span>  <span class="comment"># 启动pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><p>​  就这么简单，再多来一组环境也OK</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">pro</span>  <span class="comment"># 启动pro</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">pro</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">81</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span> <span class="string">test</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></tbody></table></figure><p>​  其中关于环境名称定义上述格式是过时格式，标准格式如下</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">config:</span></span><br><span class="line">     <span class="attr">activate:</span></span><br><span class="line">         <span class="attr">on-profile:</span> <span class="string">pro</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>多环境开发需要设置若干种常用环境，例如开发、生产、测试环境</li><li>yaml格式中设置多环境使用—区分环境设置边界</li><li>每种环境的区别在于加载的配置属性不同</li><li>启用某种环境时需要指定启动时使用该环境</li></ol><h3 id="多环境开发（yaml多文件版）"><a href="#多环境开发（yaml多文件版）" class="headerlink" title="多环境开发（yaml多文件版）"></a>多环境开发（yaml多文件版）</h3><p>​  将所有的配置都放在一个配置文件中，尤其是每一个配置应用场景都不一样，这显然不合理，于是就有了将一个配置文件拆分成多个配置文件的想法。拆分后，每个配置文件中写自己的配置，主配置文件中写清楚用哪一个配置文件就好了。</p><p><strong>主配置文件</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">  <span class="attr">active:</span> <span class="string">pro</span>  <span class="comment"># 启动pro</span></span><br></pre></td></tr></tbody></table></figure><p><strong>环境配置文件</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p>​  环境配置文件因为每一个都是配置自己的项，所以连名字都不用写里面了。那问题是如何区分这是哪一组配置呢？使用文件名区分。</p><p><strong>application-pro.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">80</span></span><br></pre></td></tr></tbody></table></figure><p><strong>application-dev.yaml</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"> <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></tbody></table></figure><p>​  文件的命名规则为：application-环境名.yml。</p><p>​  在配置文件中，如果某些配置项所有环境都一样，可以将这些项写入到主配置中，只有哪些有区别的项才写入到环境配置文件中。</p><ul><li>主配置文件中设置公共配置（全局）</li><li>环境分类配置文件中常用于设置冲突属性（局部）</li></ul><p><strong>总结</strong></p><ol><li><p>可以使用独立配置文件定义环境属性</p></li><li><p>独立配置文件便于线上系统维护更新并保障系统安全性</p></li></ol><h3 id="多环境开发（properties多文件版）"><a href="#多环境开发（properties多文件版）" class="headerlink" title="多环境开发（properties多文件版）"></a>多环境开发（properties多文件版）</h3><p>​  SpringBoot最早期提供的配置文件格式是properties格式的，这种格式的多环境配置也了解一下吧。</p><p><strong>主配置文件</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></tbody></table></figure><p><strong>环境配置文件</strong></p><p><strong>application-pro.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></tbody></table></figure><p><strong>application-dev.properties</strong></p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></tbody></table></figure><p>​  文件的命名规则为：application-环境名.properties。</p><p><strong>总结</strong></p><ol><li>properties文件多环境配置仅支持多文件格式</li></ol><h3 id="多环境开发独立配置文件书写技巧"><a href="#多环境开发独立配置文件书写技巧" class="headerlink" title="多环境开发独立配置文件书写技巧"></a>多环境开发独立配置文件书写技巧</h3><p>​  作为程序员在搞配置的时候往往处于一种分久必合合久必分的局面。开始先写一起，后来为了方便维护就拆分。对于多环境开发也是如此，下面给大家说一下如何基于多环境开发做配置独立管理，务必掌握。</p><p><strong>准备工作</strong></p><p>​  将所有的配置根据功能对配置文件中的信息进行拆分，并制作成独立的配置文件，命名规则如下</p><ul><li>application-devDB.yml</li><li>application-devRedis.yml</li><li>application-devMVC.yml</li></ul><p><strong>使用</strong></p><p>​  使用include属性在激活指定环境的情况下，同时对多个环境进行加载使其生效，多个环境间使用逗号分隔</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">     <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">devDB,devRedis,devMVC</span></span><br></pre></td></tr></tbody></table></figure><p>​  比较一下，现在相当于加载dev配置时，再加载对应的3组配置，从结构上就很清晰，用了什么，对应的名称是什么</p><p><strong>注意</strong></p><p>​  当主环境dev与其他环境有相同属性时，主环境属性生效；其他环境中有相同属性时，最后加载的环境属性生效</p><p><strong>改良</strong></p><p>​  但是上面的设置也有一个问题，比如我要切换dev环境为pro时，include也要修改。因为include属性只能使用一次，这就比较麻烦了。SpringBoot从2.4版开始使用group属性替代include属性，降低了配置书写量。简单说就是我先写好，你爱用哪个用哪个。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">     <span class="attr">active:</span> <span class="string">dev</span></span><br><span class="line">        <span class="attr">group:</span></span><br><span class="line">         <span class="attr">"dev":</span> <span class="string">devDB,devRedis,devMVC</span></span><br><span class="line">        <span class="attr">"pro":</span> <span class="string">proDB,proRedis,proMVC</span></span><br><span class="line">        <span class="attr">"test":</span> <span class="string">testDB,testRedis,testMVC</span></span><br></pre></td></tr></tbody></table></figure><p>​  现在再来看，如果切换dev到pro，只需要改一下是不是就结束了？完美！</p><p><strong>总结</strong></p><ol><li>多环境开发使用group属性设置配置文件分组，便于线上维护管理</li></ol><h3 id="多环境开发控制"><a href="#多环境开发控制" class="headerlink" title="多环境开发控制"></a>多环境开发控制</h3><p>​  多环境开发到这里基本上说完了，最后说一个冲突问题。就是maven和SpringBoot同时设置多环境的话怎么搞。</p><p>​  要想处理这个冲突问题，你要先理清一个关系，究竟谁在多环境开发中其主导地位。也就是说如果现在都设置了多环境，谁的应该是保留下来的，另一个应该遵从相同的设置。</p><p>​  maven是做什么的？项目构建管理的，最终生成代码包的，SpringBoot是干什么的？简化开发的。简化，又不是其主导作用。最终还是要靠maven来管理整个工程，所以SpringBoot应该听maven的。整个确认后下面就好做了。大体思想如下：</p><ul><li>先在maven环境中设置用什么具体的环境</li><li>在SpringBoot中读取maven设置的环境即可</li></ul><p><strong>maven中设置多环境（使用属性方式区分环境）</strong></p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_dev<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>  <span class="comment">&lt;!--默认启动环境--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>env_pro<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>SpringBoot中读取maven设置值</strong></p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"> <span class="attr">profiles:</span></span><br><span class="line">     <span class="attr">active:</span> <span class="string">@profile.active@</span></span><br></pre></td></tr></tbody></table></figure><p>​  上面的@属性名@就是读取maven中配置的属性值的语法格式。</p><p><strong>总结</strong></p><ol><li>当Maven与SpringBoot同时对多环境进行控制时，以Mavn为主，SpringBoot使用@..@占位符读取Maven对应的配置属性值</li><li>基于SpringBoot读取Maven配置属性的前提下，如果在Idea下测试工程时pom.xml每次更新需要手动compile方可生效</li></ol><h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>​  运维篇最后一部分我们来聊聊日志，日志大家不陌生，简单介绍一下。日志其实就是记录程序日常运行的信息，主要作用如下：</p><ul><li>编程期调试代码</li><li>运营期记录信息</li><li>记录日常运营重要信息（峰值流量、平均响应时长……）</li><li>记录应用报错信息（错误堆栈）</li><li>记录运维过程数据（扩容、宕机、报警……）</li></ul><p>​  或许各位小伙伴并不习惯于使用日志，没关系，慢慢多用，习惯就好。想进大厂，这是最基本的，别去面试的时候说没用过，完了，没机会了。</p><h4 id="代码中使用日志工具记录日志"><a href="#代码中使用日志工具记录日志" class="headerlink" title="代码中使用日志工具记录日志"></a>代码中使用日志工具记录日志</h4><p>​  日志的使用格式非常固定，直接上操作步骤：</p><p><strong>步骤①</strong>：添加日志记录操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> <span class="keyword">extends</span> <span class="title">BaseClass</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(BookController.class);</span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getById</span><span class="params">()</span></span>{</span><br><span class="line">        log.debug(<span class="string">"debug..."</span>);</span><br><span class="line">        log.info(<span class="string">"info..."</span>);</span><br><span class="line">        log.warn(<span class="string">"warn..."</span>);</span><br><span class="line">        log.error(<span class="string">"error..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"springboot is running...2"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  上述代码中log对象就是用来记录日志的对象，下面的log.debug，log.info这些操作就是写日志的API了。</p><p><strong>步骤②</strong>：设置日志输出级别</p><p>​  日志设置好以后可以根据设置选择哪些参与记录。这里是根据日志的级别来设置的。日志的级别分为6种，分别是：</p><ul><li>TRACE：运行堆栈信息，使用率低</li><li>DEBUG：程序员调试代码使用</li><li>INFO：记录运维过程数据</li><li>WARN：记录运维过程报警数据</li><li>ERROR：记录错误堆栈信息</li><li>FATAL：灾难信息，合并计入ERROR</li></ul><p>​  一般情况下，开发时候使用DEBUG，上线后使用INFO，运维信息记录使用WARN即可。下面就设置一下日志级别：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>​  这么设置太简单粗暴了，日志系统通常都提供了细粒度的控制</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启debug模式，输出调试信息，常用于检查系统运行状况</span></span><br><span class="line"><span class="attr">debug:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志级别，root表示根节点，即整体应用日志级别</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="attr">level:</span></span><br><span class="line">     <span class="attr">root:</span> <span class="string">debug</span></span><br></pre></td></tr></tbody></table></figure><p>​  还可以再设置更细粒度的控制</p><p><strong>步骤③</strong>：设置日志组，控制指定包对应的日志输出级别，也可以直接控制指定包对应的日志输出级别</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="comment"># 设置日志组</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">     <span class="comment"># 自定义组名，设置当前组中所包含的包</span></span><br><span class="line">        <span class="attr">ebank:</span> <span class="string">com.itheima.controller</span></span><br><span class="line">    <span class="attr">level:</span></span><br><span class="line">     <span class="attr">root:</span> <span class="string">warn</span></span><br><span class="line">        <span class="comment"># 为对应组设置日志级别</span></span><br><span class="line">        <span class="attr">ebank:</span> <span class="string">debug</span></span><br><span class="line">     <span class="comment"># 为对包设置日志级别</span></span><br><span class="line">        <span class="attr">com.itheima.controller:</span> <span class="string">debug</span></span><br></pre></td></tr></tbody></table></figure><p>​  说白了就是总体设置一下，每个包设置一下，如果感觉设置的麻烦，就先把包分个组，对组设置，没了，就这些。</p><p><strong>总结</strong></p><ol><li>日志用于记录开发调试与运维过程消息</li><li>日志的级别共6种，通常使用4种即可，分别是DEBUG，INFO,WARN,ERROR</li><li>可以通过日志组或代码包的形式进行日志显示级别的控制</li></ol><h4 id="优化日志对象创建代码"><a href="#优化日志对象创建代码" class="headerlink" title="优化日志对象创建代码"></a>优化日志对象创建代码</h4><p>​  写代码的时候每个类都要写创建日志记录对象，这个可以优化一下，使用前面用过的lombok技术给我们提供的工具类即可。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> <span class="keyword">extends</span> <span class="title">BaseClass</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(BookController.class); <span class="comment">//这一句可以不写了</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  导入lombok后使用注解搞定，日志对象名为log</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  <span class="comment">//这个注解替代了下面那一行</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/books")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> <span class="keyword">extends</span> <span class="title">BaseClass</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(BookController.class); <span class="comment">//这一句可以不写了</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>基于lombok提供的@Slf4j注解为类快速添加日志对象</li></ol><h4 id="YW-4-2-日志输出格式控制"><a href="#YW-4-2-日志输出格式控制" class="headerlink" title="YW-4-2.日志输出格式控制"></a>YW-4-2.日志输出格式控制</h4><p>​  日志已经能够记录了，但是目前记录的格式是SpringBoot给我们提供的，如果想自定义控制就需要自己设置了。先分析一下当前日志的记录格式。</p><p><img src="img%5Cimage-20211206123431222.png" alt="image-20211206123431222"></p><p>​  对于单条日志信息来说，日期，触发位置，记录信息是最核心的信息。级别用于做筛选过滤，PID与线程名用于做精准分析。了解这些信息后就可以DIY日志格式了。本课程不做详细的研究，有兴趣的小伙伴可以学习相关的知识。下面给出课程中模拟的官方日志模板的书写格式，便于大家学习。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="attr">pattern:</span></span><br><span class="line">     <span class="attr">console:</span> <span class="string">"%d %clr(%p) --- [%16t] %clr(%-40.40c){cyan} : %m %n"</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>日志输出格式设置规则</li></ol><h4 id="日志文件"><a href="#日志文件" class="headerlink" title="日志文件"></a>日志文件</h4><p>​  日志信息显示，记录已经控制住了，下面就要说一下日志的转存了。日志不能仅显示在控制台上，要把日志记录到文件中，方便后期维护查阅。</p><p>​  对于日志文件的使用存在各种各样的策略，例如每日记录，分类记录，报警后记录等。这里主要研究日志文件如何记录。</p><p>​  记录日志到文件中格式非常简单，设置日志文件名即可。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="attr">file:</span></span><br><span class="line">     <span class="attr">name:</span> <span class="string">server.log</span></span><br></pre></td></tr></tbody></table></figure><p>​  虽然使用上述格式可以将日志记录下来了，但是面对线上的复杂情况，一个文件记录肯定是不能够满足运维要求的，通常会每天记录日志文件，同时为了便于维护，还要限制每个日志文件的大小。下面给出日志文件的常用配置方式：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"> <span class="attr">logback:</span></span><br><span class="line">     <span class="attr">rollingpolicy:</span></span><br><span class="line">         <span class="attr">max-file-size:</span> <span class="string">3KB</span></span><br><span class="line">            <span class="attr">file-name-pattern:</span> <span class="string">server.%d{yyyy-MM-dd}.%i.log</span></span><br></pre></td></tr></tbody></table></figure><p>​  以上格式是基于logback日志技术设置每日日志文件的设置格式，要求容量到达3KB以后就转存信息到第二个文件中。文件命名规则中的%d标识日期，%i是一个递增变量，用于区分日志文件。</p><p><strong>总结</strong></p><ol><li>日志记录到文件</li><li>日志文件格式设置</li></ol><h1 id="开发实用篇"><a href="#开发实用篇" class="headerlink" title="开发实用篇"></a>开发实用篇</h1><p>​  开发实用篇中因为牵扯到SpringBoot整合各种各样的技术，由于不是每个小伙伴对各种技术都有所掌握，所以在整合每一个技术之前，都会做一个快速的普及，这样的话内容整个开发实用篇所包含的内容就会比较多。各位小伙伴在学习的时候，如果对某一个技术不是很清楚，可以先跳过对应章节，或者先补充一下技术知识，然后再来看对应的课程。开发实用篇具体包含的内容如下：</p><ul><li>热部署</li><li>配置高级</li><li>测试</li><li>数据层解决方案</li><li>整合第三方技术</li><li>监控</li></ul><p>​  看目录感觉内容量并不是很大，但是在数据层解决方案和整合第三方技术中包含了大量的知识，一点一点慢慢学吧。下面开启第一部分热部署相关知识的学习</p><h2 id="1-热部署"><a href="#1-热部署" class="headerlink" title="1.热部署"></a>1.热部署</h2><p>​  什么是热部署？简单说就是你程序改了，现在要重新启动服务器，嫌麻烦？不用重启，服务器会自己悄悄的把更新后的程序给重新加载一遍，这就是热部署。</p><p>​  热部署的功能是如何实现的呢？这就要分两种情况来说了，非springboot工程和springboot工程的热部署实现方式完全不一样。先说一下原始的非springboot项目是如何实现热部署的。</p><p><strong>非springboot项目热部署实现原理</strong></p><p>​  开发非springboot项目时，我们要制作一个web工程并通过tomcat启动，通常需要先安装tomcat服务器到磁盘中，开发的程序配置发布到安装的tomcat服务器上。如果想实现热部署的效果，这种情况其实有两种做法，一种是在tomcat服务器的配置文件中进行配置，这种做法与你使用什么IDE工具无关，不管你使用eclipse还是idea都行。还有一种做法是通过IDE工具进行配置，比如在idea工具中进行设置，这种形式需要依赖IDE工具，每款IDE工具不同，对应的配置也不太一样。但是核心思想是一样的，就是使用服务器去监控其中加载的应用，发现产生了变化就重新加载一次。</p><p>​  上面所说的非springboot项目实现热部署看上去是一个非常简单的过程，几乎每个小伙伴都能自己写出来。如果你不会写，我给你个最简单的思路，但是实际设计要比这复杂一些。例如启动一个定时任务，任务启动时记录每个文件的大小，以后每5秒比对一下每个文件的大小是否有改变，或者是否有新文件。如果没有改变，放行，如果有改变，刷新当前记录的文件信息，然后重新启动服务器，这就可以实现热部署了。当然，这个过程肯定不能这么做，比如我把一个打印输出的字符串”abc”改成”cba”，比对大小是没有变化的，但是内容缺实变了，所以这么做肯定不行，只是给大家打个比方，而且重启服务器这就是冷启动了，不能算热部署，领会精神吧。</p><p>​  看上去这个过程也没多复杂，在springboot项目中难道还有其他的弯弯绕吗？还真有。</p><p><strong>springboot项目热部署实现原理</strong></p><p>​  基于springboot开发的web工程其实有一个显著的特征，就是tomcat服务器内置了，还记得内嵌服务器吗？服务器是以一个对象的形式在spring容器中运行的。本来我们期望于tomcat服务器加载程序后由tomcat服务器盯着程序，你变化后我就重新启动重新加载，但是现在tomcat和我们的程序是平级的了，都是spring容器中的组件，这下就麻烦了，缺乏了一个直接的管理权，那该怎么做呢？简单，再搞一个程序X在spring容器中盯着你原始开发的程序A不就行了吗？确实，搞一个盯着程序A的程序X就行了，如果你自己开发的程序A变化了，那么程序X就命令tomcat容器重新加载程序A就OK了。并且这样做有一个好处，spring容器中东西不用全部重新加载一遍，只需要重新加载你开发的程序那一部分就可以了，这下效率又高了，挺好。</p><p>​ 下面就说说，怎么搞出来这么一个程序X，肯定不是我们自己手写了，springboot早就做好了，搞一个坐标导入进去就行了。</p><h3 id="KF-1-1-手动启动热部署"><a href="#KF-1-1-手动启动热部署" class="headerlink" title="KF-1-1.手动启动热部署"></a>KF-1-1.手动启动热部署</h3><p><strong>步骤①</strong>：导入开发者工具对应的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：构建项目，可以使用快捷键激活此功能</p><p><img src="img%5Cimage-20220222121257218.png" alt="image-20220222121257218"></p><p>​  对应的快捷键一定要记得</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;CTR&gt;L+&lt;F9&gt;</span><br></pre></td></tr></tbody></table></figure><p>​  以上过程就实现了springboot工程的热部署，是不是挺简单的。不过这里需要把底层的工作工程给普及一下。</p><p><strong>重启与重载</strong></p><p>​  一个springboot项目在运行时实际上是分两个过程进行的，根据加载的东西不同，划分成base类加载器与restart类加载器。</p><ul><li>base类加载器：用来加载jar包中的类，jar包中的类和配置文件由于不会发生变化，因此不管加载多少次，加载的内容不会发生变化</li><li>restart类加载器：用来加载开发者自己开发的类、配置文件、页面等信息，这一类文件受开发者影响</li></ul><p>​  当springboot项目启动时，base类加载器执行，加载jar包中的信息后，restart类加载器执行，加载开发者制作的内容。当执行构建项目后，由于jar中的信息不会变化，因此base类加载器无需再次执行，所以仅仅运行restart类加载即可，也就是将开发者自己制作的内容重新加载就行了，这就完成了一次热部署的过程，也可以说热部署的过程实际上是重新加载restart类加载器中的信息。</p><p><strong>总结</strong></p><ol><li>使用开发者工具可以为当前项目开启热部署功能</li><li>使用构建项目操作对工程进行热部署</li></ol><p><strong>思考</strong></p><p>​  上述过程每次进行热部署都需要开发者手工操作，不管是点击按钮还是快捷键都需要开发者手工执行。这种操作的应用场景主要是在开发调试期，并且调试的代码处于不同的文件中，比如服务器启动了，我需要改4个文件中的内容，然后重启，等4个文件都改完了再执行热部署，使用一个快捷键就OK了。但是如果现在开发者要修改的内容就只有一个文件中的少量代码，这个时候代码修改完毕如果能够让程序自己执行热部署功能，就可以减少开发者的操作，也就是自动进行热部署，能这么做吗？是可以的。咱们下一节再说。</p><p>​  </p><h3 id="KF-1-2-自动启动热部署"><a href="#KF-1-2-自动启动热部署" class="headerlink" title="KF-1-2.自动启动热部署"></a>KF-1-2.自动启动热部署</h3><p>​  自动热部署其实就是设计一个开关，打开这个开关后，IDE工具就可以自动热部署。因此这个操作和IDE工具有关，以下以idea为例设置idea中启动热部署</p><p><strong>步骤①</strong>：设置自动构建项目</p><p>​  打开【File】，选择【settings…】,在面板左侧的菜单中找到【Compile】选项，然后勾选【Build project automatically】，意思是自动构建项目</p><p><img src="img%5Cimage-20220222123543551.png" alt="image-20220222123543551"></p><p>​  自动构建项目选项勾选后</p><p><strong>步骤②</strong>：允许在程序运行时进行自动构建</p><p>​  使用快捷键【Ctrl】+【Alt】+【Shit】+【/】打开维护面板，选择第1项【Registry…】</p><p><img src="img%5Cimage-20220222124006910.png" alt="image-20220222124006910"></p><p>​  在选项中搜索comple，然后勾选对应项即可</p><img src="img\image-20220222124240069.png" alt="image-20220222124240069" style="zoom:80%;"><p>​  这样程序在运行的时候就可以进行自动构建了，实现了热部署的效果。</p><p><font color="#ff0000"><b>关注</b></font>：如果你每敲一个字母，服务器就重新构建一次，这未免有点太频繁了，所以idea设置当idea工具失去焦点5秒后进行热部署。其实就是你从idea工具中切换到其他工具时进行热部署，比如改完程序需要到浏览器上去调试，这个时候idea就自动进行热部署操作。</p><p><strong>总结</strong></p><ol><li>自动热部署要开启自动构建项目</li><li>自动热部署要开启在程序运行时自动构建项目</li></ol><p><strong>思考</strong></p><p>​  现在已经实现了热部署了，但是到企业开发的时候你会发现，为了便于管理，在你的程序目录中除了有代码，还有可能有文档，如果你修改了一下文档，这个时候会进行热部署吗？不管是否进行热部署，这个过程我们需要自己控制才比较合理，那这个东西能控制吗？咱们下一节再说。</p><h3 id="KF-1-3-参与热部署监控的文件范围配置"><a href="#KF-1-3-参与热部署监控的文件范围配置" class="headerlink" title="KF-1-3.参与热部署监控的文件范围配置"></a>KF-1-3.参与热部署监控的文件范围配置</h3><p>​  通过修改项目中的文件，你可以发现其实并不是所有的文件修改都会激活热部署的，原因在于在开发者工具中有一组配置，当满足了配置中的条件后，才会启动热部署，配置中默认不参与热部署的目录信息如下</p><ul><li>/META-INF/maven</li><li>/META-INF/resources</li><li>/resources</li><li>/static</li><li>/public</li><li>/templates</li></ul><p>​  以上目录中的文件如果发生变化，是不参与热部署的。如果想修改配置，可以通过application.yml文件进行设定哪些文件不参与热部署操作</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="comment"># 设置不参与热部署的文件或文件夹</span></span><br><span class="line">      <span class="attr">exclude:</span> <span class="string">static/**,public/**,config/application.yml</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>通过配置可以修改不参与热部署的文件或目录</li></ol><p><strong>思考</strong></p><p>​  热部署功能是一个典型的开发阶段使用的功能，到了线上环境运行程序时，这个功能就没有意义了。能否关闭热部署功能呢？咱们下一节再说。</p><h3 id="KF-1-4-关闭热部署"><a href="#KF-1-4-关闭热部署" class="headerlink" title="KF-1-4.关闭热部署"></a>KF-1-4.关闭热部署</h3><p>​  线上环境运行时是不可能使用热部署功能的，所以需要强制关闭此功能，通过配置可以关闭此功能。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">devtools:</span></span><br><span class="line">    <span class="attr">restart:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><p>​  如果当心配置文件层级过多导致相符覆盖最终引起配置失效，可以提高配置的层级，在更高层级中配置关闭热部署。例如在启动容器前通过系统属性设置关闭热部署功能。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SSMPApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.setProperty(<span class="string">"spring.devtools.restart.enabled"</span>,<span class="string">"false"</span>);</span><br><span class="line">        SpringApplication.run(SSMPApplication.class);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  其实上述担心略微有点多余，因为线上环境的维护是不可能出现修改代码的操作的，这么做唯一的作用是降低资源消耗，毕竟那双盯着你项目是不是产生变化的眼睛只要闭上了，就不具有热部署功能了，这个开关的作用就是禁用对应功能。</p><p><strong>总结</strong></p><ol><li>通过配置可以关闭热部署功能降低线上程序的资源消耗</li></ol><h2 id="KF-2-配置高级"><a href="#KF-2-配置高级" class="headerlink" title="KF-2.配置高级"></a>KF-2.配置高级</h2><p>​  进入开发实用篇第二章内容，配置高级，其实配置在基础篇讲了一部分，在运维实用篇讲了一部分，这里还要讲，讲的东西有什么区别呢？距离开发过程越来越接近，解决的问题也越来越靠近线上环境，下面就开启本章的学习。</p><h3 id="KF-2-1-ConfigurationProperties"><a href="#KF-2-1-ConfigurationProperties" class="headerlink" title="KF-2-1.@ConfigurationProperties"></a>KF-2-1.@ConfigurationProperties</h3><p>​  在基础篇学习了@ConfigurationProperties注解，此注解的作用是用来为bean绑定属性的。开发者可以在yml配置文件中以对象的格式添加若干属性</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">ip-address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">2345</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br></pre></td></tr></tbody></table></figure><p>​  然后再开发一个用来封装数据的实体类，注意要提供属性对应的setter方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String ipAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用@ConfigurationProperties注解就可以将配置中的属性值关联到开发的模型类上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "servers")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String ipAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  这样加载对应bean的时候就可以直接加载配置属性值了。但是目前我们学的都是给自定义的bean使用这种形式加载属性值，如果是第三方的bean呢？能不能用这种形式加载属性值呢？为什么会提出这个疑问？原因就在于当前@ConfigurationProperties注解是写在类定义的上方，而第三方开发的bean源代码不是你自己书写的，你也不可能到源代码中去添加@ConfigurationProperties注解，这种问题该怎么解决呢？下面就来说说这个问题。</p><p>​  使用@ConfigurationProperties注解其实可以为第三方bean加载属性，格式特殊一点而已。</p><p><strong>步骤①</strong>：使用@Bean注解定义第三方bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">datasource</span><span class="params">()</span></span>{</span><br><span class="line">    DruidDataSource ds = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：在yml中定义要绑定的属性，注意datasource此时全小写</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：使用@ConfigurationProperties注解为第三方bean进行属性绑定，注意前缀是全小写的datasource</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "datasource")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">datasource</span><span class="params">()</span></span>{</span><br><span class="line">    DruidDataSource ds = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  操作方式完全一样，只不过@ConfigurationProperties注解不仅能添加到类上，还可以添加到方法上，添加到类上是为spring容器管理的当前类的对象绑定属性，添加到方法上是为spring容器管理的当前方法的返回值对象绑定属性，其实本质上都一样。</p><p>​  做到这其实就出现了一个新的问题，目前我们定义bean不是通过类注解定义就是通过@Bean定义，使用@ConfigurationProperties注解可以为bean进行属性绑定，那在一个业务系统中，哪些bean通过注解@ConfigurationProperties去绑定属性了呢？因为这个注解不仅可以写在类上，还可以写在方法上，所以找起来就比较麻烦了。为了解决这个问题，spring给我们提供了一个全新的注解，专门标注使用@ConfigurationProperties注解绑定属性的bean是哪些。这个注解叫做@EnableConfigurationProperties。具体如何使用呢？</p><p><strong>步骤①</strong>：在配置类上开启@EnableConfigurationProperties注解，并标注要使用@ConfigurationProperties注解绑定属性的类</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">@SpringBootApplication</span></span><br><span class="line"><span class="string">@EnableConfigurationProperties(ServerConfig.class)</span></span><br><span class="line"><span class="string">public</span> <span class="string">class</span> <span class="string">Springboot13ConfigurationApplication</span> {</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：在对应的类上直接使用@ConfigurationProperties进行属性绑定</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "servers")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String ipAddress;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> timeout;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  有人感觉这没区别啊？注意观察，现在绑定属性的ServerConfig类并没有声明@Component注解。当使用@EnableConfigurationProperties注解时，spring会默认将其标注的类定义为bean，因此无需再次声明@Component注解了。</p><p>​  最后再说一个小技巧，使用@ConfigurationProperties注解时，会出现一个提示信息</p><p><img src="img%5Cimage-20220222145535749.png" alt="image-20220222145535749"></p><p>​  出现这个提示后只需要添加一个坐标此提醒就消失了</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>使用@ConfigurationProperties可以为使用@Bean声明的第三方bean绑定属性</li><li>当使用@EnableConfigurationProperties声明进行属性绑定的bean后，无需使用@Component注解再次进行bean声明</li></ol><h3 id="KF-2-2-宽松绑定-松散绑定"><a href="#KF-2-2-宽松绑定-松散绑定" class="headerlink" title="KF-2-2.宽松绑定/松散绑定"></a>KF-2-2.宽松绑定/松散绑定</h3><p>​  在进行属性绑定时，可能会遇到如下情况，为了进行标准命名，开发者会将属性名严格按照驼峰命名法书写，在yml配置文件中将datasource修改为dataSource，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dataSource:</span></span><br><span class="line">  <span class="attr">driverClassName:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure><p>​  此时程序可以正常运行，然后又将代码中的前缀datasource修改为dataSource，如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "dataSource")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> DruidDataSource <span class="title">datasource</span><span class="params">()</span></span>{</span><br><span class="line">    DruidDataSource ds = <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  此时就发生了编译错误，而且并不是idea工具导致的，运行后依然会出现问题，配置属性名dataSource是无效的</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Configuration property name 'dataSource' is <span class="keyword">not</span> valid:</span><br><span class="line"></span><br><span class="line">    Invalid characters: 'S'</span><br><span class="line"><span class="function">    Bean: <span class="title">datasource</span></span></span><br><span class="line"><span class="function">    <span class="title">Reason</span>: <span class="title">Canonical</span> <span class="title">names</span> <span class="title">should</span> <span class="title">be</span> <span class="title">kebab</span>-<span class="title">case</span> ('-' <span class="title">separated</span>), <span class="title">lowercase</span> <span class="title">alpha</span>-<span class="title">numeric</span> <span class="title">characters</span> <span class="title">and</span> <span class="title">must</span> <span class="title">start</span> <span class="title">with</span> <span class="title">a</span> <span class="title">letter</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Action</span>:</span></span><br><span class="line"><span class="function"><span class="title">Modify</span> '<span class="title">dataSource</span>' <span class="title">so</span> <span class="title">that</span> <span class="title">it</span> <span class="title">conforms</span> <span class="title">to</span> <span class="title">the</span> <span class="title">canonical</span> <span class="title">names</span> <span class="title">requirements</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>​  为什么会出现这种问题，这就要来说一说springboot进行属性绑定时的一个重要知识点了，有关属性名称的宽松绑定，也可以称为宽松绑定。</p><p>​  什么是宽松绑定？实际上是springboot进行编程时人性化设计的一种体现，即配置文件中的命名格式与变量名的命名格式可以进行格式上的最大化兼容。兼容到什么程度呢？几乎主流的命名格式都支持，例如：</p><p>​  在ServerConfig中的ipAddress属性名</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "servers")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String ipAddress;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  可以与下面的配置属性名规则全兼容</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">ipAddress:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>       <span class="comment"># 驼峰模式</span></span><br><span class="line">  <span class="attr">ip_address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>      <span class="comment"># 下划线模式</span></span><br><span class="line">  <span class="attr">ip-address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>      <span class="comment"># 烤肉串模式</span></span><br><span class="line">  <span class="attr">IP_ADDRESS:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.2</span>      <span class="comment"># 常量模式</span></span><br></pre></td></tr></tbody></table></figure><p>​  也可以说，以上4种模式最终都可以匹配到ipAddress这个属性名。为什么这样呢？原因就是在进行匹配时，配置中的名称要去掉中划线和下划线后，忽略大小写的情况下去与java代码中的属性名进行忽略大小写的等值匹配，以上4种命名去掉下划线中划线忽略大小写后都是一个词ipaddress，java代码中的属性名忽略大小写后也是ipaddress，这样就可以进行等值匹配了，这就是为什么这4种格式都能匹配成功的原因。不过springboot官方推荐使用烤肉串模式，也就是中划线模式。</p><p>​  到这里我们掌握了一个知识点，就是命名的规范问题。再来看开始出现的编程错误信息</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Configuration property name 'dataSource' is <span class="keyword">not</span> valid:</span><br><span class="line"></span><br><span class="line">    Invalid characters: 'S'</span><br><span class="line"><span class="function">    Bean: <span class="title">datasource</span></span></span><br><span class="line"><span class="function">    <span class="title">Reason</span>: <span class="title">Canonical</span> <span class="title">names</span> <span class="title">should</span> <span class="title">be</span> <span class="title">kebab</span>-<span class="title">case</span> ('-' <span class="title">separated</span>), <span class="title">lowercase</span> <span class="title">alpha</span>-<span class="title">numeric</span> <span class="title">characters</span> <span class="title">and</span> <span class="title">must</span> <span class="title">start</span> <span class="title">with</span> <span class="title">a</span> <span class="title">letter</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">Action</span>:</span></span><br><span class="line"><span class="function"><span class="title">Modify</span> '<span class="title">dataSource</span>' <span class="title">so</span> <span class="title">that</span> <span class="title">it</span> <span class="title">conforms</span> <span class="title">to</span> <span class="title">the</span> <span class="title">canonical</span> <span class="title">names</span> <span class="title">requirements</span>.</span></span><br></pre></td></tr></tbody></table></figure><p>​  其中Reason描述了报错的原因，规范的名称应该是烤肉串(kebab)模式(case)，即使用-分隔，使用小写字母数字作为标准字符，且必须以字母开头。然后再看我们写的名称dataSource，就不满足上述要求。闹了半天，在书写前缀时，这个词不是随意支持的，必须使用上述标准。编程写了这么久，基本上编程习惯都养成了，到这里又被springboot教育了，没辙，谁让人家东西好用呢，按照人家的要求写吧。</p><p>​  最后说一句，以上规则仅针对springboot中@ConfigurationProperties注解进行属性绑定时有效，对@Value注解进行属性映射无效。有人就说，那我不用你不就行了？不用，你小看springboot的推广能力了，到原理篇我们看源码时，你会发现内部全是这玩意儿，算了，拿人手短吃人嘴短，认怂吧。</p><p><strong>总结</strong></p><ol><li>@ConfigurationProperties绑定属性时支持属性名宽松绑定，这个宽松体现在属性名的命名规则上</li><li>@Value注解不支持松散绑定规则</li><li>绑定前缀名推荐采用烤肉串命名规则，即使用中划线做分隔符</li></ol><h3 id="KF-2-3-常用计量单位绑定"><a href="#KF-2-3-常用计量单位绑定" class="headerlink" title="KF-2-3.常用计量单位绑定"></a>KF-2-3.常用计量单位绑定</h3><p>​  在前面的配置中，我们书写了如下配置值，其中第三项超时时间timeout描述了服务器操作超时时间，当前值是-1表示永不超时。</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">servers:</span></span><br><span class="line">  <span class="attr">ip-address:</span> <span class="number">192.168</span><span class="number">.0</span><span class="number">.1</span> </span><br><span class="line">  <span class="attr">port:</span> <span class="number">2345</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">-1</span></span><br></pre></td></tr></tbody></table></figure><p>​  但是每个人都这个值的理解会产生不同，比如线上服务器完成一次主从备份，配置超时时间240，这个240如果单位是秒就是超时时间4分钟，如果单位是分钟就是超时时间4小时。面对一次线上服务器的主从备份，设置4分钟，简直是开玩笑，别说拷贝过程，备份之前的压缩过程4分钟也搞不定，这个时候问题就来了，怎么解决这个误会？</p><p>​  除了加强约定之外，springboot充分利用了JDK8中提供的全新的用来表示计量单位的新数据类型，从根本上解决这个问题。以下模型类中添加了两个JDK8中新增的类，分别是Duration和DataSize</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "servers")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">    <span class="meta">@DurationUnit(ChronoUnit.HOURS)</span></span><br><span class="line">    <span class="keyword">private</span> Duration serverTimeOut;</span><br><span class="line">    <span class="meta">@DataSizeUnit(DataUnit.MEGABYTES)</span></span><br><span class="line">    <span class="keyword">private</span> DataSize dataSize;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>Duration</strong>：表示时间间隔，可以通过@DurationUnit注解描述时间单位，例如上例中描述的单位为小时（ChronoUnit.HOURS）</p><p><strong>DataSize</strong>：表示存储空间，可以通过@DataSizeUnit注解描述存储空间单位，例如上例中描述的单位为MB（DataUnit.MEGABYTES）</p><p>​  使用上述两个单位就可以有效避免因沟通不同步或文档不健全导致的信息不对称问题，从根本上解决了问题，避免产生误读。</p><p>Druation常用单位如下：</p><img src="img\image-20220222173911102.png" alt="image-20220222173911102" style="zoom:50%;"><p>DataSize常用单位如下：</p><img src="img\image-20220222174130102.png" alt="image-20220222174130102" style="zoom:67%;"><h3 id="KF-2-4-校验"><a href="#KF-2-4-校验" class="headerlink" title="KF-2-4.校验"></a>KF-2-4.校验</h3><p>​  目前我们在进行属性绑定时可以通过松散绑定规则在书写时放飞自我了，但是在书写时由于无法感知模型类中的数据类型，就会出现类型不匹配的问题，比如代码中需要int类型，配置中给了非法的数值，例如写一个“a”，这种数据肯定无法有效的绑定，还会引发错误。  SpringBoot给出了强大的数据校验功能，可以有效的避免此类问题的发生。在JAVAEE的JSR303规范中给出了具体的数据校验标准，开发者可以根据自己的需要选择对应的校验框架，此处使用Hibernate提供的校验框架来作为实现进行数据校验。书写应用格式非常固定，话不多说，直接上步骤</p><p><strong>步骤①</strong>：开启校验框架</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.导入JSR303规范--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.validation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>validation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用hibernate框架提供的校验器做实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：在需要开启校验功能的类上使用注解@Validated开启校验功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "servers")</span></span><br><span class="line"><span class="comment">//开启对当前bean的属性注入校验</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：对具体的字段设置校验规则</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "servers")</span></span><br><span class="line"><span class="comment">//开启对当前bean的属性注入校验</span></span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServerConfig</span> </span>{</span><br><span class="line">    <span class="comment">//设置具体的规则</span></span><br><span class="line">    <span class="meta">@Max(value = 8888,message = "最大值不能超过8888")</span></span><br><span class="line">    <span class="meta">@Min(value = 202,message = "最小值不能低于202")</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  通过设置数据格式校验，就可以有效避免非法数据加载，其实使用起来还是挺轻松的，基本上就是一个格式。</p><p><strong>总结</strong></p><ol><li>开启Bean属性校验功能一共3步：导入JSR303与Hibernate校验框架坐标、使用@Validated注解启用校验功能、使用具体校验规则规范数据校验格式</li></ol><h3 id="KF-2-5-数据类型转换"><a href="#KF-2-5-数据类型转换" class="headerlink" title="KF-2-5.数据类型转换"></a>KF-2-5.数据类型转换</h3><p>​  有关spring属性注入的问题到这里基本上就讲完了，但是最近一名开发者向我咨询了一个问题，我觉得需要给各位学习者分享一下。在学习阶段其实我们遇到的问题往往复杂度比较低，单一性比较强，但是到了线上开发时，都是综合性的问题，而这个开发者遇到的问题就是由于bean的属性注入引发的灾难。</p><p>​  先把问题描述一下，这位开发者连接数据库正常操作，但是运行程序后显示的信息是密码错误。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">java.sql.SQLException: <span class="title">Access</span> <span class="title">denied</span> <span class="title">for</span> <span class="title">user</span> '<span class="title">root</span>'@'<span class="title">localhost</span>' (<span class="title">using</span> <span class="title">password</span>: <span class="title">YES</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>​  其实看到这个报错，几乎所有的学习者都能分辨出来，这是用户名和密码不匹配，就就是密码输入错了，但是问题就在于密码并没有输入错误，这就比较讨厌了。给的报错信息无法帮助你有效的分析问题，甚至会给你带到沟里。如果是初学者，估计这会心态就崩了，我密码没错啊，你怎么能说我有错误呢？来看看用户名密码的配置是如何写的：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">0127</span></span><br></pre></td></tr></tbody></table></figure><p>​  这名开发者的生日是1月27日，所以密码就使用了0127，其实问题就出在这里了。</p><p>​  之前在基础篇讲属性注入时，提到过类型相关的知识，在整数相关知识中有这么一句话，<strong>支持二进制，八进制，十六进制</strong></p><img src="img\image-20220222225748370.png" alt="image-20220222225748370" style="zoom:80%;"><p>​  这个问题就处在这里了，因为0127在开发者眼中是一个字符串“0127”，但是在springboot看来，这就是一个数字，而且是一个八进制的数字。当后台使用String类型接收数据时，如果配置文件中配置了一个整数值，他是先安装整数进行处理，读取后再转换成字符串。巧了，0127撞上了八进制的格式，所以最终以十进制数字87的结果存在了。</p><p>​  这里提两个注意点，第一，字符串标准书写加上引号包裹，养成习惯，第二，遇到0开头的数据多注意吧。</p><p><strong>总结</strong></p><ol><li>yaml文件中对于数字的定义支持进制书写格式，如需使用字符串请使用引号明确标注</li></ol><h2 id="KF-3-测试"><a href="#KF-3-测试" class="headerlink" title="KF-3.测试"></a>KF-3.测试</h2><p>​  说完bean配置相关的内容，下面要对前面讲过的一个知识做加强了，测试。测试是保障程序正确性的唯一屏障，在企业级开发中更是不可缺少，但是由于测试代码往往不产生实际效益，所以一些小型公司并不是很关注，导致一些开发者从小型公司进入中大型公司后，往往这一块比较短板，所以还是要拿出来把这一块知识好好说说，做一名专业的开发人员。</p><h3 id="KF-3-1-加载测试专用属性"><a href="#KF-3-1-加载测试专用属性" class="headerlink" title="KF-3-1.加载测试专用属性"></a>KF-3-1.加载测试专用属性</h3><p>​  测试过程本身并不是一个复杂的过程，但是很多情况下测试时需要模拟一些线上情况，或者模拟一些特殊情况。如果当前环境按照线上环境已经设定好了，例如是下面的配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">maxMemory:</span> <span class="string">32GB</span></span><br><span class="line">  <span class="attr">minMemory:</span> <span class="string">16GB</span></span><br></pre></td></tr></tbody></table></figure><p>​  但是你现在想测试对应的兼容性，需要测试如下配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">env:</span></span><br><span class="line">  <span class="attr">maxMemory:</span> <span class="string">16GB</span></span><br><span class="line">  <span class="attr">minMemory:</span> <span class="string">8GB</span></span><br></pre></td></tr></tbody></table></figure><p>​  这个时候我们能不能每次测试的时候都去修改源码application.yml中的配置进行测试呢？显然是不行的。每次测试前改过来，每次测试后改回去，这太麻烦了。于是我们就想，需要在测试环境中创建一组临时属性，去覆盖我们源码中设定的属性，这样测试用例就相当于是一个独立的环境，能够独立测试，这样就方便多了。</p><p><strong>临时属性</strong></p><p>​  springboot已经为我们开发者早就想好了这种问题该如何解决，并且提供了对应的功能入口。在测试用例程序中，可以通过对注解@SpringBootTest添加属性来模拟临时属性，具体如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//properties属性可以为当前测试用例添加临时的属性配置</span></span><br><span class="line"><span class="meta">@SpringBootTest(properties = {"test.prop=testValue1"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesAndArgsTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value("${test.prop}")</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testProperties</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用注解@SpringBootTest的properties属性就可以为当前测试用例添加临时的属性，覆盖源码配置文件中对应的属性值进行测试。</p><p><strong>临时参数</strong></p><p>​  除了上述这种情况，在前面讲解使用命令行启动springboot程序时讲过，通过命令行参数也可以设置属性值。而且线上启动程序时，通常都会添加一些专用的配置信息。作为运维人员他们才不懂java，更不懂这些配置的信息具体格式该怎么写，那如果我们作为开发者提供了对应的书写内容后，能否提前测试一下这些配置信息是否有效呢？当时是可以的，还是通过注解@SpringBootTest的另一个属性来进行设定。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//args属性可以为当前测试用例添加临时的命令行参数</span></span><br><span class="line"><span class="meta">@SpringBootTest(args={"--test.prop=testValue2"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesAndArgsTest</span> </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value("${test.prop}")</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testProperties</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用注解@SpringBootTest的args属性就可以为当前测试用例模拟命令行参数并进行测试。</p><p>​  说到这里，好奇宝宝们肯定就有新问题了，如果两者共存呢？其实如果思考一下配置属性与命令行参数的加载优先级，这个结果就不言而喻了。在属性加载的优先级设定中，有明确的优先级设定顺序，还记得下面这个顺序吗？</p><img src="img\image-20211206100859236.png" alt="image-20211206100859236" style="zoom:67%;"><p>​  在这个属性加载优先级的顺序中，明确规定了命令行参数的优先级排序是11，而配置属性的优先级是3，结果不言而喻了，args属性配置优先于properties属性配置加载。</p><p>​  到这里我们就掌握了如果在测试用例中去模拟临时属性的设定。</p><p><strong>总结</strong></p><ol><li>加载测试临时属性可以通过注解@SpringBootTest的properties和args属性进行设定，此设定应用范围仅适用于当前测试用例</li></ol><p><strong>思考</strong></p><p>​  应用于测试环境的临时属性解决了，如果想在测试的时候临时加载一些bean能不做呢？也就是说我测试时，想搞一些独立的bean出来，专门应用于测试环境，能否实现呢？咱们下一节再讲。</p><h3 id="KF-3-2-加载测试专用配置"><a href="#KF-3-2-加载测试专用配置" class="headerlink" title="KF-3-2.加载测试专用配置"></a>KF-3-2.加载测试专用配置</h3><p>​  上一节提出了临时配置一些专用于测试环境的bean的需求，这一节我们就来解决这个问题。</p><p>​  学习过Spring的知识，我们都知道，其实一个spring环境中可以设置若干个配置文件或配置类，若干个配置信息可以同时生效。现在我们的需求就是在测试环境中再添加一个配置类，然后启动测试环境时，生效此配置就行了。其实做法和spring环境中加载多个配置信息的方式完全一样。具体操作步骤如下：</p><p><strong>步骤①</strong>：在测试包test中创建专用的测试环境配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">msg</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"bean msg"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  上述配置仅用于演示当前实验效果，实际开发可不能这么注入String类型的数据</p><p><strong>步骤②</strong>：在启动测试环境时，导入测试环境专用的配置类，使用@Import注解即可实现</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Import({MsgConfig.class})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigurationTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testConfiguration</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(msg);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  到这里就通过@Import属性实现了基于开发环境的配置基础上，对配置进行测试环境的追加操作，实现了1+1的配置环境效果。这样我们就可以实现每一个不同的测试用例加载不同的bean的效果，丰富测试用例的编写，同时不影响开发环境的配置。</p><p><strong>总结</strong></p><ol><li>定义测试环境专用的配置类，然后通过@Import注解在具体的测试中导入临时的配置，例如测试用例，方便测试过程，且上述配置不影响其他的测试类环境</li></ol><p><strong>思考</strong></p><p>​  当前我们已经可以实现业务层和数据层的测试，并且通过临时配置，控制每个测试用例加载不同的测试数据。但是实际企业开发不仅要保障业务层与数据层的功能安全有效，也要保障表现层的功能正常。但是我们目的对表现层的测试都是通过postman手工测试的，并没有在打包过程中体现表现层功能被测试通过。能否在测试用例中对表现层进行功能测试呢？还真可以，咱们下一节再讲。</p><h3 id="KF-3-3-Web环境模拟测试"><a href="#KF-3-3-Web环境模拟测试" class="headerlink" title="KF-3-3.Web环境模拟测试"></a>KF-3-3.Web环境模拟测试</h3><p>​  在测试中对表现层功能进行测试需要一个基础和一个功能。所谓的一个基础是运行测试程序时，必须启动web环境，不然没法测试web功能。一个功能是必须在测试程序中具备发送web请求的能力，不然无法实现web功能的测试。所以在测试用例中测试表现层接口这项工作就转换成了两件事，一，如何在测试类中启动web测试，二，如何在测试类中发送web请求。下面一件事一件事进行，先说第一个</p><p><strong>测试类中启动web环境</strong></p><p>​  每一个springboot的测试类上方都会标准@SpringBootTest注解，而注解带有一个属性，叫做webEnvironment。通过该属性就可以设置在测试用例中启动web环境，具体如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebTest</span> </span>{ </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  测试类中启动web环境时，可以指定启动的Web环境对应的端口，springboot提供了4种设置值，分别如下：</p><img src="img\image-20220223125453317.png" alt="image-20220223125453317" style="zoom:80%;"><ul><li>MOCK：根据当前设置确认是否启动web环境，例如使用了Servlet的API就启动web环境，属于适配性的配置</li><li>DEFINED_PORT：使用自定义的端口作为web服务器端口</li><li>RANDOM_PORT：使用随机端口作为web服务器端口</li><li>NONE：不启动web环境</li></ul><p>​  通过上述配置，现在启动测试程序时就可以正常启用web环境了，建议大家测试时使用RANDOM_PORT，避免代码中因为写死设定引发线上功能打包测试时由于端口冲突导致意外现象的出现。就是说你程序中写了用8080端口，结果线上环境8080端口被占用了，结果你代码中所有写的东西都要改，这就是写死代码的代价。现在你用随机端口就可以测试出来你有没有这种问题的隐患了。</p><p>​  测试环境中的web环境已经搭建好了，下面就可以来解决第二个问题了，如何在程序代码中发送web请求。</p><p><strong>测试类中发送请求</strong></p><p>​  对于测试类中发送请求，其实java的API就提供对应的功能，只不过平时各位小伙伴接触的比较少，所以较为陌生。springboot为了便于开发者进行对应的功能开发，对其又进行了包装，简化了开发步骤，具体操作如下：</p><p><strong>步骤①</strong>：在测试类中开启web虚拟调用功能，通过注解@AutoConfigureMockMvc实现此功能的开启</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">//开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebTest</span> </span>{</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：定义发起虚拟调用的对象MockMVC，通过自动装配的形式初始化对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">//开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> </span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：创建一个虚拟请求对象，封装请求的路径，并使用MockMVC对象发送对应请求</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br><span class="line"><span class="comment">//开启虚拟MVC调用</span></span><br><span class="line"><span class="meta">@AutoConfigureMockMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebTest</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testWeb</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="comment">//http://localhost:8080/books</span></span><br><span class="line">        <span class="comment">//创建虚拟请求，当前访问/books</span></span><br><span class="line">        MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/books"</span>);</span><br><span class="line">        <span class="comment">//执行对应的请求</span></span><br><span class="line">        mvc.perform(builder);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  执行测试程序，现在就可以正常的发送/books对应的请求了，注意访问路径不要写<a href="http://localhost:8080/books%EF%BC%8C%E5%9B%A0%E4%B8%BA%E5%89%8D%E9%9D%A2%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8IP%E5%9C%B0%E5%9D%80%E5%92%8C%E7%AB%AF%E5%8F%A3%E4%BD%BF%E7%94%A8%E7%9A%84%E6%98%AF%E5%BD%93%E5%89%8D%E8%99%9A%E6%8B%9F%E7%9A%84web">http://localhost:8080/books，因为前面的服务器IP地址和端口使用的是当前虚拟的web</a>环境，无需指定，仅指定请求的具体路径即可。</p><p><strong>总结</strong></p><ol><li>在测试类中测试web层接口要保障测试类启动时启动web容器，使用@SpringBootTest注解的webEnvironment属性可以虚拟web环境用于测试</li><li>为测试方法注入MockMvc对象，通过MockMvc对象可以发送虚拟请求，模拟web请求调用过程</li></ol><p><strong>思考</strong></p><p>​  目前已经成功的发送了请求，但是还没有起到测试的效果，测试过程必须出现预计值与真实值的比对结果才能确认测试结果是否通过，虚拟请求中能对哪些请求结果进行比对呢？咱们下一节再讲。</p><p><strong>web环境请求结果比对</strong></p><p>​  上一节已经在测试用例中成功的模拟出了web环境，并成功的发送了web请求，本节就来解决发送请求后如何比对发送结果的问题。其实发完请求得到的信息只有一种，就是响应对象。至于响应对象中包含什么，就可以比对什么。常见的比对内容如下：</p><ul><li><p>响应状态匹配</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testStatus</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/books"</span>);</span><br><span class="line">    ResultActions action = mvc.perform(builder);</span><br><span class="line">    <span class="comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    StatusResultMatchers status = MockMvcResultMatchers.status();</span><br><span class="line">    <span class="comment">//预计本次调用时成功的：状态200</span></span><br><span class="line">    ResultMatcher ok = status.isOk();</span><br><span class="line">    <span class="comment">//添加预计值到本次调用过程中进行匹配</span></span><br><span class="line">    action.andExpect(ok);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>响应体匹配（非json数据格式）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testBody</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/books"</span>);</span><br><span class="line">    ResultActions action = mvc.perform(builder);</span><br><span class="line">    <span class="comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    ContentResultMatchers content = MockMvcResultMatchers.content();</span><br><span class="line">    ResultMatcher result = content.string(<span class="string">"springboot2"</span>);</span><br><span class="line">    <span class="comment">//添加预计值到本次调用过程中进行匹配</span></span><br><span class="line">    action.andExpect(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>响应体匹配（json数据格式，开发中的主流使用方式）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testJson</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/books"</span>);</span><br><span class="line">    ResultActions action = mvc.perform(builder);</span><br><span class="line">    <span class="comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    ContentResultMatchers content = MockMvcResultMatchers.content();</span><br><span class="line">    ResultMatcher result = content.json(<span class="string">"{\"id\":1,\"name\":\"springboot2\",\"type\":\"springboot\"}"</span>);</span><br><span class="line">    <span class="comment">//添加预计值到本次调用过程中进行匹配</span></span><br><span class="line">    action.andExpect(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>响应头信息匹配</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testContentType</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/books"</span>);</span><br><span class="line">    ResultActions action = mvc.perform(builder);</span><br><span class="line">    <span class="comment">//设定预期值 与真实值进行比较，成功测试通过，失败测试失败</span></span><br><span class="line">    <span class="comment">//定义本次调用的预期值</span></span><br><span class="line">    HeaderResultMatchers header = MockMvcResultMatchers.header();</span><br><span class="line">    ResultMatcher contentType = header.string(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    <span class="comment">//添加预计值到本次调用过程中进行匹配</span></span><br><span class="line">    action.andExpect(contentType);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>​  基本上齐了，头信息，正文信息，状态信息都有了，就可以组合出一个完美的响应结果比对结果了。以下范例就是三种信息同时进行匹配校验，也是一个完整的信息匹配过程。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGetById</span><span class="params">(<span class="meta">@Autowired</span> MockMvc mvc)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    MockHttpServletRequestBuilder builder = MockMvcRequestBuilders.get(<span class="string">"/books"</span>);</span><br><span class="line">    ResultActions action = mvc.perform(builder);</span><br><span class="line"></span><br><span class="line">    StatusResultMatchers status = MockMvcResultMatchers.status();</span><br><span class="line">    ResultMatcher ok = status.isOk();</span><br><span class="line">    action.andExpect(ok);</span><br><span class="line"></span><br><span class="line">    HeaderResultMatchers header = MockMvcResultMatchers.header();</span><br><span class="line">    ResultMatcher contentType = header.string(<span class="string">"Content-Type"</span>, <span class="string">"application/json"</span>);</span><br><span class="line">    action.andExpect(contentType);</span><br><span class="line"></span><br><span class="line">    ContentResultMatchers content = MockMvcResultMatchers.content();</span><br><span class="line">    ResultMatcher result = content.json(<span class="string">"{\"id\":1,\"name\":\"springboot\",\"type\":\"springboot\"}"</span>);</span><br><span class="line">    action.andExpect(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>web虚拟调用可以对本地虚拟请求的返回响应信息进行比对，分为响应头信息比对、响应体信息比对、响应状态信息比对</li></ol><h3 id="KF-3-4-数据层测试回滚"><a href="#KF-3-4-数据层测试回滚" class="headerlink" title="KF-3-4.数据层测试回滚"></a>KF-3-4.数据层测试回滚</h3><p>​  当前我们的测试程序可以完美的进行表现层、业务层、数据层接口对应的功能测试了，但是测试用例开发完成后，在打包的阶段由于test生命周期属于必须被运行的生命周期，如果跳过会给系统带来极高的安全隐患，所以测试用例必须执行。但是新的问题就呈现了，测试用例如果测试时产生了事务提交就会在测试过程中对数据库数据产生影响，进而产生垃圾数据。这个过程不是我们希望发生的，作为开发者测试用例该运行运行，但是过程中产生的数据不要在我的系统中留痕，这样该如何处理呢？</p><p>​  springboot早就为开发者想到了这个问题，并且针对此问题给出了最简解决方案，在原始测试用例中添加注解@Transactional即可实现当前测试用例的事务不提交。当程序运行后，只要注解@Transactional出现的位置存在注解@SpringBootTest，springboot就会认为这是一个测试程序，无需提交事务，所以也就可以避免事务的提交。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@Rollback(true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoTest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span></span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setName(<span class="string">"springboot3"</span>);</span><br><span class="line">        book.setType(<span class="string">"springboot3"</span>);</span><br><span class="line">        book.setDescription(<span class="string">"springboot3"</span>);</span><br><span class="line"></span><br><span class="line">        bookService.save(book);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  如果开发者想提交事务，也可以，再添加一个@RollBack的注解，设置回滚状态为false即可正常提交事务，是不是很方便？springboot在辅助开发者日常工作这一块展现出了惊人的能力，实在太贴心了。</p><p><strong>总结</strong></p><ol><li>在springboot的测试类中通过添加注解@Transactional来阻止测试用例提交事务</li><li>通过注解@Rollback控制springboot测试类执行结果是否提交事务，需要配合注解@Transactional使用</li></ol><p><strong>思考</strong></p><p>​  当前测试程序已经近乎完美了，但是由于测试用例中书写的测试数据属于固定数据，往往失去了测试的意义，开发者可以针对测试用例进行针对性开发，这样就有可能出现测试用例不能完美呈现业务逻辑代码是否真实有效的达成业务目标的现象，解决方案其实很容易想，测试用例的数据只要随机产生就可以了，能实现吗？咱们下一节再讲。</p><h3 id="KF-3-5-测试用例数据设定"><a href="#KF-3-5-测试用例数据设定" class="headerlink" title="KF-3-5.测试用例数据设定"></a>KF-3-5.测试用例数据设定</h3><p>​  对于测试用例的数据固定书写肯定是不合理的，springboot提供了在配置中使用随机值的机制，确保每次运行程序加载的数据都是随机的。具体如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">testcase:</span></span><br><span class="line">  <span class="attr">book:</span></span><br><span class="line">    <span class="attr">id:</span> <span class="string">${random.int}</span></span><br><span class="line">    <span class="attr">id2:</span> <span class="string">${random.int(10)}</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">${random.int!5,10!}</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">${random.value}</span></span><br><span class="line">    <span class="attr">uuid:</span> <span class="string">${random.uuid}</span></span><br><span class="line">    <span class="attr">publishTime:</span> <span class="string">${random.long}</span></span><br></pre></td></tr></tbody></table></figure><p>​  当前配置就可以在每次运行程序时创建一组随机数据，避免每次运行时数据都是固定值的尴尬现象发生，有助于测试功能的进行。数据的加载按照之前加载数据的形式，使用@ConfigurationProperties注解即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "testcase.book")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookCase</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String uuid;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> publishTime;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  对于随机值的产生，还有一些小的限定规则，比如产生的数值性数据可以设置范围等，具体如下：</p><img src="img\image-20220223135454862.png" alt="image-20220223135454862" style="zoom:80%;"><ul><li>${random.int}表示随机整数</li><li>${random.int(10)}表示10以内的随机数</li><li>${random.int(10,20)}表示10到20的随机数</li><li>其中()可以是任意字符，例如[]，!!均可</li></ul><p><strong>总结</strong></p><ol><li>使用随机数据可以替换测试用例中书写的固定数据，提高测试用例中的测试数据有效性</li></ol><h2 id="4-数据层解决方案"><a href="#4-数据层解决方案" class="headerlink" title="4.数据层解决方案"></a>4.数据层解决方案</h2><p>​  开发实用篇前三章基本上是开胃菜，从第四章开始，开发实用篇进入到了噩梦难度了，从这里开始，不再是单纯的在springboot内部搞事情了，要涉及到很多相关知识。本章节主要内容都是和数据存储与读取相关，前期学习的知识与数据层有关的技术基本上都围绕在数据库这个层面上，所以本章要讲的第一个大的分支就是SQL解决方案相关的内容，除此之外，数据的来源还可以是非SQL技术相关的数据操作，因此第二部分围绕着NOSQL解决方案讲解。至于什么是NOSQL解决方案，讲到了再说吧。下面就从SQL解决方案说起。</p><h3 id="4-1-SQL"><a href="#4-1-SQL" class="headerlink" title="4-1.SQL"></a>4-1.SQL</h3><p>​  回忆一下之前做SSMP整合的时候数据层解决方案涉及到了哪些技术？MySQL数据库与MyBatisPlus框架，后面又学了Druid数据源的配置，所以现在数据层解决方案可以说是Mysql+Druid+MyBatisPlus。而三个技术分别对应了数据层操作的三个层面：</p><ul><li>数据源技术：Druid</li><li>持久化技术：MyBatisPlus</li><li>数据库技术：MySQL</li></ul><p>​  下面的研究就分为三个层面进行研究，对应上面列出的三个方面，咱们就从第一个数据源技术开始说起。</p><h4 id="数据源技术"><a href="#数据源技术" class="headerlink" title="数据源技术"></a>数据源技术</h4><p>​  目前我们使用的数据源技术是Druid，运行时可以在日志中看到对应的数据源初始化信息，具体如下：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO <span class="number">28600</span> --- [           main] c.a.d.s.b.a.DruidDataSourceAutoConfigure : Init DruidDataSource</span><br><span class="line">INFO <span class="number">28600</span> --- [           main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-<span class="number">1</span>} inited</span><br></pre></td></tr></tbody></table></figure><p>​  如果不使用Druid数据源，程序运行后是什么样子呢？是独立的数据库连接对象还是有其他的连接池技术支持呢？将Druid技术对应的starter去掉再次运行程序可以在日志中找到如下初始化信息：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">INFO <span class="number">31820</span> --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-<span class="number">1</span> - Starting...</span><br><span class="line">INFO <span class="number">31820</span> --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-<span class="number">1</span> - <span class="built_in">Start</span> completed.</span><br></pre></td></tr></tbody></table></figure><p>​  虽然没有DruidDataSource相关的信息了，但是我们发现日志中有HikariDataSource这个信息，就算不懂这是个什么技术，看名字也能看出来，以DataSource结尾的名称，这一定是一个数据源技术。我们又没有手工添加这个技术，这个技术哪里来的呢？这就是这一节要讲的知识，springboot内嵌数据源。</p><p>​  数据层技术是每一个企业级应用程序都会用到的，而其中必定会进行数据库连接的管理。springboot根据开发者的习惯出发，开发者提供了数据源技术，就用你提供的，开发者没有提供，那总不能手工管理一个一个的数据库连接对象啊，怎么办？我给你一个默认的就好了，这样省心又省事，大家都方便。</p><p>​  springboot提供了3款内嵌数据源技术，分别如下：</p><ul><li>HikariCP</li><li>Tomcat提供DataSource</li><li>Commons DBCP</li></ul><p>​  第一种，HikartCP，这是springboot官方推荐的数据源技术，作为默认内置数据源使用。啥意思？你不配置数据源，那就用这个。</p><p>​  第二种，Tomcat提供的DataSource，如果不想用HikartCP，并且使用tomcat作为web服务器进行web程序的开发，使用这个。为什么是Tomcat，不是其他web服务器呢？因为web技术导入starter后，默认使用内嵌tomcat，既然都是默认使用的技术了，那就一用到底，数据源也用它的。有人就提出怎么才能不使用HikartCP用tomcat提供的默认数据源对象呢？把HikartCP技术的坐标排除掉就OK了。</p><p>​  第三种，DBCP，这个使用的条件就更苛刻了，既不使用HikartCP也不使用tomcat的DataSource时，默认给你用这个。</p><p>​  springboot这心操的，也是稀碎啊，就怕你自己管不好连接对象，给你一顿推荐，真是开发界的最强辅助。既然都给你奶上了，那就受用吧，怎么配置使用这些东西呢？之前我们配置druid时使用druid的starter对应的配置如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">druid:</span> </span><br><span class="line">      <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><p>​  换成是默认的数据源HikariCP后，直接吧druid删掉就行了，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><p>​   当然，也可以写上是对hikari做的配置，但是url地址要单独配置，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></tbody></table></figure><p>​  这就是配置hikari数据源的方式。如果想对hikari做进一步的配置，可以继续配置其独立的属性。例如：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">50</span></span><br></pre></td></tr></tbody></table></figure><p>​  如果不想使用hikari数据源，使用tomcat的数据源或者DBCP配置格式也是一样的。学习到这里，以后我们做数据层时，数据源对象的选择就不再是单一的使用druid数据源技术了，可以根据需要自行选择。</p><p><strong>总结</strong></p><ol><li>springboot技术提供了3种内置的数据源技术，分别是Hikari、tomcat内置数据源、DBCP</li></ol><h4 id="持久化技术"><a href="#持久化技术" class="headerlink" title="持久化技术"></a>持久化技术</h4><p>​  说完数据源解决方案，再来说一下持久化解决方案。springboot充分发挥其最强辅助的特征，给开发者提供了一套现成的数据层技术，叫做JdbcTemplate。其实这个技术不能说是springboot提供的，因为不使用springboot技术，一样能使用它，谁提供的呢？spring技术提供的，所以在springboot技术范畴中，这个技术也是存在的，毕竟springboot技术是加速spring程序开发而创建的。</p><p>​  这个技术其实就是回归到jdbc最原始的编程形式来进行数据层的开发，下面直接上操作步骤：</p><p><strong>步骤①</strong>：导入jdbc对应的坐标，记得是starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">&lt;/dependency</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：自动装配JdbcTemplate对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot15SqlApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span></span>{</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：使用JdbcTemplate实现查询操作（非实体类封装数据的查询操作）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span></span>{</span><br><span class="line">    String sql = <span class="string">"select * from tbl_book"</span>;</span><br><span class="line">    List&lt;Map&lt;String, Object&gt;&gt; maps = jdbcTemplate.queryForList(sql);</span><br><span class="line">    System.out.println(maps);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤④</strong>：使用JdbcTemplate实现查询操作（实体类封装数据的查询操作）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testJdbcTemplate</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span></span>{</span><br><span class="line"></span><br><span class="line">    String sql = <span class="string">"select * from tbl_book"</span>;</span><br><span class="line">    RowMapper&lt;Book&gt; rm = <span class="keyword">new</span> RowMapper&lt;Book&gt;() {</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Book <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line">            Book temp = <span class="keyword">new</span> Book();</span><br><span class="line">            temp.setId(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            temp.setName(rs.getString(<span class="string">"name"</span>));</span><br><span class="line">            temp.setType(rs.getString(<span class="string">"type"</span>));</span><br><span class="line">            temp.setDescription(rs.getString(<span class="string">"description"</span>));</span><br><span class="line">            <span class="keyword">return</span> temp;</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">    List&lt;Book&gt; list = jdbcTemplate.query(sql, rm);</span><br><span class="line">    System.out.println(list);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤⑤</strong>：使用JdbcTemplate实现增删改操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testJdbcTemplateSave</span><span class="params">(<span class="meta">@Autowired</span> JdbcTemplate jdbcTemplate)</span></span>{</span><br><span class="line">    String sql = <span class="string">"insert into tbl_book values(3,'springboot1','springboot2','springboot3')"</span>;</span><br><span class="line">    jdbcTemplate.update(sql);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  如果想对JdbcTemplate对象进行相关配置，可以在yml文件中进行设定，具体如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">jdbc:</span></span><br><span class="line">    <span class="attr">template:</span></span><br><span class="line">      <span class="attr">query-timeout:</span> <span class="number">-1</span>   <span class="comment"># 查询超时时间</span></span><br><span class="line">      <span class="attr">max-rows:</span> <span class="number">500</span>       <span class="comment"># 最大行数</span></span><br><span class="line">      <span class="attr">fetch-size:</span> <span class="number">-1</span>      <span class="comment"># 缓存行数</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>SpringBoot内置JdbcTemplate持久化解决方案</li><li>使用JdbcTemplate需要导入spring-boot-starter-jdbc的坐标</li></ol><h4 id="数据库技术"><a href="#数据库技术" class="headerlink" title="数据库技术"></a>数据库技术</h4><p>​  截止到目前，springboot给开发者提供了内置的数据源解决方案和持久化解决方案，在数据层解决方案三件套中还剩下一个数据库，莫非springboot也提供有内置的解决方案？还真有，还不是一个，三个，这一节就来说说内置的数据库解决方案。</p><p>​  springboot提供了3款内置的数据库，分别是</p><ul><li>H2</li><li>HSQL</li><li>Derby</li></ul><p>​  以上三款数据库除了可以独立安装之外，还可以像是tomcat服务器一样，采用内嵌的形式运行在spirngboot容器中。内嵌在容器中运行，那必须是java对象啊，对，这三款数据库底层都是使用java语言开发的。</p><p>​  我们一直使用MySQL数据库就挺好的，为什么有需求用这个呢？原因就在于这三个数据库都可以采用内嵌容器的形式运行，在应用程序运行后，如果我们进行测试工作，此时测试的数据无需存储在磁盘上，但是又要测试使用，内嵌数据库就方便了，运行在内存中，该测试测试，该运行运行，等服务器关闭后，一切烟消云散，多好，省得你维护外部数据库了。这也是内嵌数据库的最大优点，方便进行功能测试。</p><p>​  下面以H2数据库为例讲解如何使用这些内嵌数据库，操作步骤也非常简单，简单才好用嘛</p><p><strong>步骤①</strong>：导入H2数据库对应的坐标，一共2个</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：将工程设置为web工程，启动工程时启动H2数据库</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：通过配置开启H2数据库控制台访问程序，也可以使用其他的数据库连接软件操作</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">h2:</span></span><br><span class="line">    <span class="attr">console:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">path:</span> <span class="string">/h2</span></span><br></pre></td></tr></tbody></table></figure><p>​  web端访问路径/h2，访问密码123456，如果访问失败，先配置下列数据源，启动程序运行后再次访问/h2路径就可以正常访问了</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:h2:~/test</span></span><br><span class="line">  <span class="attr">hikari:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.h2.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">sa</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤④</strong>：使用JdbcTemplate或MyBatisPlus技术操作数据库</p><p>（略）</p><p>​  其实我们只是换了一个数据库而已，其他的东西都不受影响。一个重要提醒，别忘了，上线时，把内存级数据库关闭，采用MySQL数据库作为数据持久化方案，关闭方式就是设置enabled属性为false即可。</p><p><strong>总结</strong></p><ol><li>H2内嵌式数据库启动方式，添加坐标，添加配置</li><li>H2数据库线上运行时请务必关闭</li></ol><p>​  到这里SQL相关的数据层解决方案就讲完了，现在的可选技术就丰富的多了。</p><ul><li>数据源技术：Druid、Hikari、tomcat DataSource、DBCP</li><li>持久化技术：MyBatisPlus、MyBatis、JdbcTemplate</li><li>数据库技术：MySQL、H2、HSQL、Derby</li></ul><p>​  现在开发程序时就可以在以上技术中任选一种组织成一套数据库解决方案了。</p><h3 id="4-2-NoSQL"><a href="#4-2-NoSQL" class="headerlink" title="4-2.NoSQL"></a>4-2.NoSQL</h3><p>​  SQL数据层解决方案说完了，下面来说收NoSQL数据层解决方案。这个NoSQL是什么意思呢？从字面来看，No表示否定，NoSQL就是非关系型数据库解决方案，意思就是数据该存存该取取，只是这些数据不放在关系型数据库中了，那放在哪里？自然是一些能够存储数据的其他相关技术中了，比如Redis等。本节讲解的内容就是springboot如何整合这些技术，在springboot官方文档中提供了10种相关技术的整合方案，我们将讲解国内市场上最流行的几款NoSQL数据库整合方案，分别是Redis、MongoDB、ES。</p><p>​  因为每个小伙伴学习这门课程的时候起点不同，为了便于各位学习者更好的学习，每种技术在讲解整合前都会先讲一下安装和基本使用，然后再讲整合。如果对某个技术比较熟悉的小伙伴可以直接跳过安装的学习过程，直接看整合方案即可。此外上述这些技术最佳使用方案都是在Linux服务器上部署，但是考虑到各位小伙伴的学习起点差异过大，所以下面的课程都是以Windows平台作为安装基础讲解，如果想看Linux版软件安装，可以再找到对应技术的学习文档查阅学习。</p><h4 id="SpringBoot整合Redis"><a href="#SpringBoot整合Redis" class="headerlink" title="SpringBoot整合Redis"></a>SpringBoot整合Redis</h4><p>​  Redis是一款采用key-value数据存储格式的内存级NoSQL数据库，重点关注数据存储格式，是key-value格式，也就是键值对的存储形式。与MySQL数据库不同，MySQL数据库有表、有字段、有记录，Redis没有这些东西，就是一个名称对应一个值，并且数据以存储在内存中使用为主。什么叫以存储在内存中为主？其实Redis有它的数据持久化方案，分别是RDB和AOF，但是Redis自身并不是为了数据持久化而生的，主要是在内存中保存数据，加速数据访问的，所以说是一款内存级数据库。</p><p>​  Redis支持多种数据存储格式，比如可以直接存字符串，也可以存一个map集合，list集合，后面会涉及到一些不同格式的数据操作，这个需要先学习一下才能进行整合，所以在基本操作中会介绍一些相关操作。下面就先安装，再操作，最后说整合</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><p>​  下载的安装包有两种形式，一种是一键安装的msi文件，还有一种是解压缩就能使用的zip文件，哪种形式都行，这里就不介绍安装过程了，本课程采用的是msi一键安装的msi文件进行安装的。</p><p>​  啥是msi，其实就是一个文件安装包，不仅安装软件，还帮你把安装软件时需要的功能关联在一起，打包操作。比如如安装序列、创建和设置安装路径、设置系统依赖项、默认设定安装选项和控制安装过程的属性。说简单点就是一站式服务，安装过程一条龙操作一气呵成，就是为小白用户提供的软件安装程序。</p><p>​  安装完毕后会得到如下文件，其中有两个文件对应两个命令，是启动Redis的核心命令，需要再CMD命令行模式执行。</p><img src="img\image-20220224091709173.png" alt="image-20220224091709173" style="zoom: 80%;"><p><strong>启动服务器</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe redis.windows.conf</span><br></pre></td></tr></tbody></table></figure><p>​  初学者无需调整服务器对外服务端口，默认6379。</p><p><strong>启动客户端</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli.exe</span><br></pre></td></tr></tbody></table></figure><p>​  如果启动redis服务器失败，可以先启动客户端，然后执行shutdown操作后退出，此时redis服务器就可以正常执行了。</p><h5 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h5><p>​  服务器启动后，使用客户端就可以连接服务器，类似于启动完MySQL数据库，然后启动SQL命令行操作数据库。  </p><p>​  放置一个字符串数据到redis中，先为数据定义一个名称，比如name,age等，然后使用命令set设置数据到redis服务器中即可</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> name itheima</span><br><span class="line"><span class="built_in">set</span> age <span class="number">12</span></span><br></pre></td></tr></tbody></table></figure><p>​  从redis中取出已经放入的数据，根据名称取，就可以得到对应数据。如果没有对应数据就会得到(nil)</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">get name</span><br><span class="line">get age</span><br></pre></td></tr></tbody></table></figure><p>​  以上使用的数据存储是一个名称对应一个值，如果要维护的数据过多，可以使用别的数据存储结构。例如hash，它是一种一个名称下可以存储多个数据的存储模型，并且每个数据也可以有自己的二级存储名称。向hash结构中存储数据格式如下：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hset a a1 aa1  #对外key名称是a，在名称为a的存储模型中，a1这个key中保存了数据aa1</span><br><span class="line">hset a a2 aa2</span><br></pre></td></tr></tbody></table></figure><p>​  获取hash结构中的数据命令如下</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hget a a1   #得到aa1</span><br><span class="line">hget a a2   #得到aa2</span><br></pre></td></tr></tbody></table></figure><p>​  有关redis的基础操作就普及到这里，需要全面掌握redis技术，请参看相关教程学习。</p><h5 id="整合"><a href="#整合" class="headerlink" title="整合"></a>整合</h5><p>​  在进行整合之前先梳理一下整合的思想，springboot整合任何技术其实就是在springboot中使用对应技术的API。如果两个技术没有交集，就不存在整合的概念了。所谓整合其实就是使用springboot技术去管理其他技术，几个问题是躲不掉的。</p><p>​  第一，需要先导入对应技术的坐标，而整合之后，这些坐标都有了一些变化</p><p>​  第二，任何技术通常都会有一些相关的设置信息，整合之后，这些信息如何写，写在哪是一个问题</p><p>​  第三，没有整合之前操作如果是模式A的话，整合之后如果没有给开发者带来一些便捷操作，那整合将毫无意义，所以整合后操作肯定要简化一些，那对应的操作方式自然也有所不同</p><p>​  按照上面的三个问题去思考springboot整合所有技术是一种通用思想，在整合的过程中会逐步摸索出整合的套路，而且适用性非常强，经过若干种技术的整合后基本上可以总结出一套固定思维。</p><p>​  下面就开始springboot整合redis，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合redis的starter坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  上述坐标可以在创建模块的时候通过勾选的形式进行选择，归属NoSQL分类中</p><img src="img\image-20220224101142220.png" alt="image-20220224101142220" style="zoom:50%;"><p><strong>步骤②</strong>：进行基础配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br></pre></td></tr></tbody></table></figure><p>​  操作redis，最基本的信息就是操作哪一台redis服务器，所以服务器地址属于基础配置信息，不可缺少。但是即便你不配置，目前也是可以用的。因为以上两组信息都有默认配置，刚好就是上述配置值。</p><p><strong>步骤③</strong>：使用springboot整合redis的专用客户端接口操作，此处使用的是RedisTemplate</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot16RedisApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">()</span> </span>{</span><br><span class="line">        ValueOperations ops = redisTemplate.opsForValue();</span><br><span class="line">        ops.set(<span class="string">"age"</span>,<span class="number">41</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>{</span><br><span class="line">        ValueOperations ops = redisTemplate.opsForValue();</span><br><span class="line">        Object age = ops.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(age);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hset</span><span class="params">()</span> </span>{</span><br><span class="line">        HashOperations ops = redisTemplate.opsForHash();</span><br><span class="line">        ops.put(<span class="string">"info"</span>,<span class="string">"b"</span>,<span class="string">"bb"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hget</span><span class="params">()</span> </span>{</span><br><span class="line">        HashOperations ops = redisTemplate.opsForHash();</span><br><span class="line">        Object val = ops.get(<span class="string">"info"</span>, <span class="string">"b"</span>);</span><br><span class="line">        System.out.println(val);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>​  在操作redis时，需要先确认操作何种数据，根据数据种类得到操作接口。例如使用opsForValue()获取string类型的数据操作接口，使用opsForHash()获取hash类型的数据操作接口，剩下的就是调用对应api操作了。各种类型的数据操作接口如下：</p><img src="img\image-20220224103104908.png" alt="image-20220224103104908" style="zoom:80%;"><p><strong>总结</strong></p><ol><li>springboot整合redis步骤<ol><li>导入springboot整合redis的starter坐标</li><li>进行基础配置</li><li>使用springboot整合redis的专用客户端接口RedisTemplate操作</li></ol></li></ol><p><strong>StringRedisTemplate</strong></p><p>​  由于redis内部不提供java对象的存储格式，因此当操作的数据以对象的形式存在时，会进行转码，转换成字符串格式后进行操作。为了方便开发者使用基于字符串为数据的操作，springboot整合redis时提供了专用的API接口StringRedisTemplate，你可以理解为这是RedisTemplate的一种指定数据泛型的操作API。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringRedisTemplateTest</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>{</span><br><span class="line">        ValueOperations&lt;String, String&gt; ops = stringRedisTemplate.opsForValue();</span><br><span class="line">        String name = ops.get(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>redis客户端选择</strong></p><p>   springboot整合redis技术提供了多种客户端兼容模式，默认提供的是lettucs客户端技术，也可以根据需要切换成指定客户端技术，例如jedis客户端技术，切换成jedis客户端技术操作步骤如下：</p><p><strong>步骤①</strong>：导入jedis坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  jedis坐标受springboot管理，无需提供版本号</p><p><strong>步骤②</strong>：配置客户端技术类型，设置为jedis</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">client-type:</span> <span class="string">jedis</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：根据需要设置对应的配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">client-type:</span> <span class="string">jedis</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">16</span></span><br><span class="line">    <span class="attr">jedis:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">16</span></span><br></pre></td></tr></tbody></table></figure><p><strong>lettcus与jedis区别</strong></p><ul><li>jedis连接Redis服务器是直连模式，当多线程模式下使用jedis会存在线程安全问题，解决方案可以通过配置连接池使每个连接专用，这样整体性能就大受影响</li><li>lettcus基于Netty框架进行与Redis服务器连接，底层设计中采用StatefulRedisConnection。 StatefulRedisConnection自身是线程安全的，可以保障并发访问安全问题，所以一个连接可以被多线程复用。当然lettcus也支持多连接实例一起工作</li></ul><p><strong>总结</strong></p><ol><li>springboot整合redis提供了StringRedisTemplate对象，以字符串的数据格式操作redis</li><li>如果需要切换redis客户端实现技术，可以通过配置的形式进行</li></ol><h4 id="SpringBoot整合MongoDB"><a href="#SpringBoot整合MongoDB" class="headerlink" title="SpringBoot整合MongoDB"></a>SpringBoot整合MongoDB</h4><p>​  使用Redis技术可以有效的提高数据访问速度，但是由于Redis的数据格式单一性，无法操作结构化数据，当操作对象型的数据时，Redis就显得捉襟见肘。在保障访问速度的情况下，如果想操作结构化数据，看来Redis无法满足要求了，此时需要使用全新的数据存储结束来解决此问题，本节讲解springboot如何整合MongoDB技术。</p><p>​  MongoDB是一个开源、高性能、无模式的文档型数据库，它是NoSQL数据库产品中的一种，是最像关系型数据库的非关系型数据库。</p><p>​  上述描述中几个词，其中对于我们最陌生的词是无模式的。什么叫无模式呢？简单说就是作为一款数据库，没有固定的数据存储结构，第一条数据可能有A、B、C一共3个字段，第二条数据可能有D、E、F也是3个字段，第三条数据可能是A、C、E3个字段，也就是说数据的结构不固定，这就是无模式。有人会说这有什么用啊？灵活，随时变更，不受约束。基于上述特点，MongoDB的应用面也会产生一些变化。以下列出了一些可以使用MongoDB作为数据存储的场景，但是并不是必须使用MongoDB的场景：</p><ul><li>淘宝用户数据<ul><li>存储位置：数据库</li><li>特征：永久性存储，修改频度极低</li></ul></li><li>游戏装备数据、游戏道具数据<ul><li>存储位置：数据库、Mongodb</li><li>特征：永久性存储与临时存储相结合、修改频度较高</li></ul></li><li>直播数据、打赏数据、粉丝数据<ul><li>存储位置：数据库、Mongodb</li><li>特征：永久性存储与临时存储相结合，修改频度极高</li></ul></li><li>物联网数据<ul><li>存储位置：Mongodb</li><li>特征：临时存储，修改频度飞速</li></ul></li></ul><p>​  快速了解一下MongoDB，下面直接开始我们的学习，老规矩，先安装，再操作，最后说整合</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://www.mongodb.com/try/download">https://www.mongodb.com/try/download</a></p><p>​  下载的安装包也有两种形式，一种是一键安装的msi文件，还有一种是解压缩就能使用的zip文件，哪种形式都行，本课程采用解压缩zip文件进行安装。</p><p>​  解压缩完毕后会得到如下文件，其中bin目录包含了所有mongodb的可执行命令</p><p><img src="img%5Cimage-20220224111306933.png" alt="image-20220224111306933"></p><p>​  mongodb在运行时需要指定一个数据存储的目录，所以创建一个数据存储目录，通常放置在安装目录中，此处创建data的目录用来存储数据，具体如下</p><p><img src="img%5Cimage-20220224111053408.png" alt="image-20220224111053408"></p><p>​  如果在安装的过程中出现了如下警告信息，就是告诉你，你当前的操作系统缺少了一些系统文件，这个不用担心。</p><img src="img\image-20220224113956882.png" alt="image-20220224113956882" style="zoom:50%;"><p>​  根据下列方案即可解决，在浏览器中搜索提示缺少的名称对应的文件，并下载，将下载的文件拷贝到windows安装目录的system32目录下，然后在命令行中执行regsvr32命令注册此文件。根据下载的文件名不同，执行命令前更改对应名称。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">regsvr32 vcruntime140_1.dll</span><br></pre></td></tr></tbody></table></figure><p><strong>启动服务器</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=..\data\db</span><br></pre></td></tr></tbody></table></figure><p>​  启动服务器时需要指定数据存储位置，通过参数–dbpath进行设置，可以根据需要自行设置数据存储路径。默认服务端口27017。</p><p><strong>启动客户端</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo --host=<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span> --port=<span class="number">27017</span></span><br></pre></td></tr></tbody></table></figure><h5 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h5><p>​  MongoDB虽然是一款数据库，但是它的操作并不是使用SQL语句进行的，因此操作方式各位小伙伴可能比较陌生，好在有一些类似于Navicat的数据库客户端软件，能够便捷的操作MongoDB，先安装一个客户端，再来操作MongoDB。</p><p>​  同类型的软件较多，本次安装的软件时Robo3t，Robot3t是一款绿色软件，无需安装，解压缩即可。解压缩完毕后进入安装目录双击robot3t.exe即可使用。</p><img src="img\image-20220224114911573.png" alt="image-20220224114911573" style="zoom: 33%;"><p>​  打开软件首先要连接MongoDB服务器，选择【File】菜单，选择【Connect…】</p><p><img src="img%5Cimage-20220224115202422.png" alt="image-20220224115202422"></p><p>​  进入连接管理界面后，选择左上角的【Create】链接，创建新的连接设置</p><img src="img\image-20220224115254200.png" alt="image-20220224115254200" style="zoom:80%;"><p>​  如果输入设置值即可连接（默认不修改即可连接本机27017端口）</p><p><img src="img%5Cimage-20220224115300266.png" alt="image-20220224115300266"></p><p>​  连接成功后在命令输入区域输入命令即可操作MongoDB。</p><p>​  创建数据库：在左侧菜单中使用右键创建，输入数据库名称即可</p><p>​  创建集合：在Collections上使用右键创建，输入集合名称即可，集合等同于数据库中的表的作用</p><p>​  新增文档：（文档是一种类似json格式的数据，初学者可以先把数据理解为就是json数据） </p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.insert/save/insertOne(文档)</span><br></pre></td></tr></tbody></table></figure><p>​  删除文档：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.remove(条件)</span><br></pre></td></tr></tbody></table></figure><p>​  修改文档：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.集合名称.update(条件，{操作种类:{文档}})</span><br></pre></td></tr></tbody></table></figure><p>​  查询文档：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">基础查询</span><br><span class="line">查询全部：     db.集合.<span class="built_in">find</span>();</span><br><span class="line">查第一条：     db.集合.findOne()</span><br><span class="line">查询指定数量文档： db.集合.<span class="built_in">find</span>().limit(<span class="number">10</span>)     //查<span class="number">10</span>条文档</span><br><span class="line">跳过指定数量文档： db.集合.<span class="built_in">find</span>().skip(<span class="number">20</span>)     //跳过<span class="number">20</span>条文档</span><br><span class="line">统计：      db.集合.count()</span><br><span class="line">排序：    db.集合.<span class="built_in">sort</span>({age:<span class="number">1</span>})      //按age升序排序</span><br><span class="line">投影：    db.集合名称.<span class="built_in">find</span>(条件,{name:<span class="number">1</span>,age:<span class="number">1</span>})   //仅保留name与age域</span><br><span class="line"></span><br><span class="line">条件查询</span><br><span class="line">基本格式：   db.集合.<span class="built_in">find</span>({条件})</span><br><span class="line">模糊查询：   db.集合.<span class="built_in">find</span>({域名:/正则表达式/})    //等同SQL中的like，比like强大，可以执行正则所有规则</span><br><span class="line">条件比较运算：     db.集合.<span class="built_in">find</span>({域名:{$gt:值}})    //等同SQL中的数值比较操作，例如：name&gt;<span class="number">18</span></span><br><span class="line">包含查询：   db.集合.<span class="built_in">find</span>({域名:{$<span class="keyword">in</span>:[值<span class="number">1</span>，值<span class="number">2</span>]}})  //等同于SQL中的<span class="keyword">in</span></span><br><span class="line">条件连接查询：     db.集合.<span class="built_in">find</span>({$and:[{条件<span class="number">1</span>},{条件<span class="number">2</span>}]})    //等同于SQL中的and、or</span><br></pre></td></tr></tbody></table></figure><p>​  有关MongoDB的基础操作就普及到这里，需要全面掌握MongoDB技术，请参看相关教程学习。</p><h5 id="整合-1"><a href="#整合-1" class="headerlink" title="整合"></a>整合</h5><p>​  使用springboot整合MongDB该如何进行呢？其实springboot为什么使用的开发者这么多，就是因为他的套路几乎完全一样。导入坐标，做配置，使用API接口操作。整合Redis如此，整合MongoDB同样如此。</p><p>​  第一，先导入对应技术的整合starter坐标</p><p>​  第二，配置必要信息</p><p>​  第三，使用提供的API操作即可</p><p>​  下面就开始springboot整合MongoDB，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合MongoDB的starter坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  上述坐标也可以在创建模块的时候通过勾选的形式进行选择，同样归属NoSQL分类中</p><img src="img\image-20220224120721626.png" alt="image-20220224120721626" style="zoom: 67%;"><p><strong>步骤②</strong>：进行基础配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">data:</span></span><br><span class="line">    <span class="attr">mongodb:</span></span><br><span class="line">      <span class="attr">uri:</span> <span class="string">mongodb://localhost/itheima</span></span><br></pre></td></tr></tbody></table></figure><p>​  操作MongoDB需要的配置与操作redis一样，最基本的信息都是操作哪一台服务器，区别就是连接的服务器IP地址和端口不同，书写格式不同而已。</p><p><strong>步骤③</strong>：使用springboot整合MongoDB的专用客户端接口MongoTemplate来进行操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot17MongodbApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        Book book = <span class="keyword">new</span> Book();</span><br><span class="line">        book.setId(<span class="number">2</span>);</span><br><span class="line">        book.setName(<span class="string">"springboot2"</span>);</span><br><span class="line">        book.setType(<span class="string">"springboot2"</span>);</span><br><span class="line">        book.setDescription(<span class="string">"springboot2"</span>);</span><br><span class="line">        mongoTemplate.save(book);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Book&gt; all = mongoTemplate.findAll(Book.class);</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  整合工作到这里就做完了，感觉既熟悉也陌生。熟悉的是这个套路，三板斧，就这三招，导坐标做配置用API操作，陌生的是这个技术，里面具体的操作API可能会不熟悉，有关springboot整合MongoDB我们就讲到这里。有兴趣可以继续学习MongoDB的操作，然后再来这里通过编程的形式操作MongoDB。</p><p><strong>总结</strong></p><ol><li>springboot整合MongoDB步骤<ol><li>导入springboot整合MongoDB的starter坐标</li><li>进行基础配置</li><li>使用springboot整合MongoDB的专用客户端接口MongoTemplate操作</li></ol></li></ol><h4 id="SpringBoot整合ES"><a href="#SpringBoot整合ES" class="headerlink" title="SpringBoot整合ES"></a>SpringBoot整合ES</h4><p>​  NoSQL解决方案已经讲完了两种技术的整合了，Redis可以使用内存加载数据并实现数据快速访问，MongoDB可以在内存中存储类似对象的数据并实现数据的快速访问，在企业级开发中对于速度的追求是永无止境的。下面要讲的内容也是一款NoSQL解决方案，只不过他的作用不是为了直接加速数据的读写，而是加速数据的查询的，叫做ES技术。</p><p>​  ES（Elasticsearch）是一个分布式全文搜索引擎，重点是全文搜索。</p><p>​  那什么是全文搜索呢？比如用户要买一本书，以Java为关键字进行搜索，不管是书名中还是书的介绍中，甚至是书的作者名字，只要包含java就作为查询结果返回给用户查看，上述过程就使用了全文搜索技术。搜索的条件不再是仅用于对某一个字段进行比对，而是在一条数据中使用搜索条件去比对更多的字段，只要能匹配上就列入查询结果，这就是全文搜索的目的。而ES技术就是一种可以实现上述效果的技术。</p><p>​  要实现全文搜索的效果，不可能使用数据库中like操作去进行比对，这种效率太低了。ES设计了一种全新的思想，来实现全文搜索。具体操作过程如下：</p><ol><li><p>将被查询的字段的数据全部文本信息进行查分，分成若干个词</p><ul><li>例如“中华人民共和国”就会被拆分成三个词，分别是“中华”、“人民”、“共和国”，此过程有专业术语叫做分词。分词的策略不同，分出的效果不一样，不同的分词策略称为分词器。</li></ul></li><li><p>将分词得到的结果存储起来，对应每条数据的id</p><ul><li><p>例如id为1的数据中名称这一项的值是“中华人民共和国”，那么分词结束后，就会出现“中华”对应id为1，“人民”对应id为1，“共和国”对应id为1</p></li><li><p>例如id为2的数据中名称这一项的值是“人民代表大会“，那么分词结束后，就会出现“人民”对应id为2，“代表”对应id为2，“大会”对应id为2</p></li><li><p>此时就会出现如下对应结果，按照上述形式可以对所有文档进行分词。需要注意分词的过程不是仅对一个字段进行，而是对每一个参与查询的字段都执行，最终结果汇总到一个表格中</p><table><thead><tr><th>分词结果关键字</th><th>对应id</th></tr></thead><tbody><tr><td>中华</td><td>1</td></tr><tr><td>人民</td><td>1,2</td></tr><tr><td>共和国</td><td>1</td></tr><tr><td>代表</td><td>2</td></tr><tr><td>大会</td><td>2</td></tr></tbody></table></li></ul></li><li><p>当进行查询时，如果输入“人民”作为查询条件，可以通过上述表格数据进行比对，得到id值1,2，然后根据id值就可以得到查询的结果数据了。</p></li></ol><p>​  上述过程中分词结果关键字内容每一个都不相同，作用有点类似于数据库中的索引，是用来加速数据查询的。但是数据库中的索引是对某一个字段进行添加索引，而这里的分词结果关键字不是一个完整的字段值，只是一个字段中的其中的一部分内容。并且索引使用时是根据索引内容查找整条数据，全文搜索中的分词结果关键字查询后得到的并不是整条的数据，而是数据的id，要想获得具体数据还要再次查询，因此这里为这种分词结果关键字起了一个全新的名称，叫做<strong>倒排索引</strong>。</p><p>​  通过上述内容的学习，发现使用ES其实准备工作还是挺多的，必须先建立文档的倒排索引，然后才能继续使用。快速了解一下ES的工作原理，下面直接开始我们的学习，老规矩，先安装，再操作，最后说整合。</p><h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://www.elastic.co/cn/downloads/elasticsearch">https://</a><a href="https://www.elastic.co/cn/downloads/elasticsearch">www.elastic.co/cn/downloads/elasticsearch</a></p><p>​  下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p><p><img src="img%5Cimage-20220225132756400.png" alt="image-20220225132756400"></p><ul><li>bin目录：包含所有的可执行命令</li><li>config目录：包含ES服务器使用的配置文件</li><li>jdk目录：此目录中包含了一个完整的jdk工具包，版本17，当ES升级时，使用最新版本的jdk确保不会出现版本支持性不足的问题</li><li>lib目录：包含ES运行的依赖jar文件</li><li>logs目录：包含ES运行后产生的所有日志文件</li><li>modules目录：包含ES软件中所有的功能模块，也是一个一个的jar包。和jar目录不同，jar目录是ES运行期间依赖的jar包，modules是ES软件自己的功能jar包</li><li>plugins目录：包含ES软件安装的插件，默认为空</li></ul><p><strong>启动服务器</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elasticsearch.bat</span><br></pre></td></tr></tbody></table></figure><p>​  双击elasticsearch.bat文件即可启动ES服务器，默认服务端口9200。通过浏览器访问<a href="http://localhost:9200看到如下信息视为ES">http://localhost:9200看到如下信息视为ES</a>服务器正常启动</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  "name" : "CZBK-**********",</span><br><span class="line">  "cluster_name" : "elasticsearch",</span><br><span class="line">  "cluster_uuid" : "j137DSswTPG8U4Yb-<span class="number">0</span>T1Mg",</span><br><span class="line">  "version" : {</span><br><span class="line">    "number" : "<span class="number">7</span>.<span class="number">16</span>.<span class="number">2</span>",</span><br><span class="line">    "build_flavor" : "default",</span><br><span class="line">    "build_type" : "zip",</span><br><span class="line">    "build_hash" : "<span class="number">2</span>b937c44140b6559905130a8650c64dbd0879cfb",</span><br><span class="line">    "build_date" : "<span class="number">2021</span>-<span class="number">12</span>-<span class="number">18</span>T19:<span class="number">42</span>:<span class="number">46</span>.<span class="number">604893745</span>Z",</span><br><span class="line">    "build_snapshot" : false,</span><br><span class="line">    "lucene_version" : "<span class="number">8</span>.<span class="number">10</span>.<span class="number">1</span>",</span><br><span class="line">    "minimum_wire_compatibility_version" : "<span class="number">6</span>.<span class="number">8</span>.<span class="number">0</span>",</span><br><span class="line">    "minimum_index_compatibility_version" : "<span class="number">6</span>.<span class="number">0</span>.<span class="number">0</span>-beta1"</span><br><span class="line">  },</span><br><span class="line">  "tagline" : "You Know, <span class="keyword">for</span> Search"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h5><p>​  ES中保存有我们要查询的数据，只不过格式和数据库存储数据格式不同而已。在ES中我们要先创建倒排索引，这个索引的功能又点类似于数据库的表，然后将数据添加到倒排索引中，添加的数据称为文档。所以要进行ES的操作要先创建索引，再添加文档，这样才能进行后续的查询操作。</p><p>​  要操作ES可以通过Rest风格的请求来进行，也就是说发送一个请求就可以执行一个操作。比如新建索引，删除索引这些操作都可以使用发送请求的形式来进行。</p><ul><li><p>创建索引，books是索引名称，下同</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PUT请求  http://localhost:<span class="number">9200</span>/books</span><br></pre></td></tr></tbody></table></figure><p>发送请求后，看到如下信息即索引创建成功</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"shards_acknowledged"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"index"</span>: <span class="string">"books"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>重复创建已经存在的索引会出现错误信息，reason属性中描述错误原因</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error"</span>: {</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"resource_already_exists_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"index [books/VgC_XMVAQmedaiBNSgO2-w] already exists"</span>,</span><br><span class="line">                <span class="attr">"index_uuid"</span>: <span class="string">"VgC_XMVAQmedaiBNSgO2-w"</span>,</span><br><span class="line">                <span class="attr">"index"</span>: <span class="string">"books"</span></span><br><span class="line">            }</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"resource_already_exists_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"index [books/VgC_XMVAQmedaiBNSgO2-w] already exists"</span>, # books索引已经存在</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"VgC_XMVAQmedaiBNSgO2-w"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"book"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">400</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询索引</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET请求  http://localhost:<span class="number">9200</span>/books</span><br></pre></td></tr></tbody></table></figure><p>查询索引得到索引相关信息，如下</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"book"</span>: {</span><br><span class="line">        <span class="attr">"aliases"</span>: {},</span><br><span class="line">        <span class="attr">"mappings"</span>: {},</span><br><span class="line">        <span class="attr">"settings"</span>: {</span><br><span class="line">            <span class="attr">"index"</span>: {</span><br><span class="line">                <span class="attr">"routing"</span>: {</span><br><span class="line">                    <span class="attr">"allocation"</span>: {</span><br><span class="line">                        <span class="attr">"include"</span>: {</span><br><span class="line">                            <span class="attr">"_tier_preference"</span>: <span class="string">"data_content"</span></span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"number_of_shards"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"provided_name"</span>: <span class="string">"books"</span>,</span><br><span class="line">                <span class="attr">"creation_date"</span>: <span class="string">"1645768584849"</span>,</span><br><span class="line">                <span class="attr">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"uuid"</span>: <span class="string">"VgC_XMVAQmedaiBNSgO2-w"</span>,</span><br><span class="line">                <span class="attr">"version"</span>: {</span><br><span class="line">                    <span class="attr">"created"</span>: <span class="string">"7160299"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果查询了不存在的索引，会返回错误信息，例如查询名称为book的索引后信息如下</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error"</span>: {</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"no such index [book]"</span>,</span><br><span class="line">                <span class="attr">"resource.type"</span>: <span class="string">"index_or_alias"</span>,</span><br><span class="line">                <span class="attr">"resource.id"</span>: <span class="string">"book"</span>,</span><br><span class="line">                <span class="attr">"index_uuid"</span>: <span class="string">"_na_"</span>,</span><br><span class="line">                <span class="attr">"index"</span>: <span class="string">"book"</span></span><br><span class="line">            }</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"no such index [book]"</span>,  # 没有book索引</span><br><span class="line">        <span class="attr">"resource.type"</span>: <span class="string">"index_or_alias"</span>,</span><br><span class="line">        <span class="attr">"resource.id"</span>: <span class="string">"book"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"_na_"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"book"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>删除索引</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE请求 http://localhost:<span class="number">9200</span>/books</span><br></pre></td></tr></tbody></table></figure><p>删除所有后，给出删除结果</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"acknowledged"</span>: <span class="literal">true</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>如果重复删除，会给出错误信息，同样在reason属性中描述具体的错误原因</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"error"</span>: {</span><br><span class="line">        <span class="attr">"root_cause"</span>: [</span><br><span class="line">            {</span><br><span class="line">                <span class="attr">"type"</span>: <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">                <span class="attr">"reason"</span>: <span class="string">"no such index [books]"</span>,</span><br><span class="line">                <span class="attr">"resource.type"</span>: <span class="string">"index_or_alias"</span>,</span><br><span class="line">                <span class="attr">"resource.id"</span>: <span class="string">"book"</span>,</span><br><span class="line">                <span class="attr">"index_uuid"</span>: <span class="string">"_na_"</span>,</span><br><span class="line">                <span class="attr">"index"</span>: <span class="string">"book"</span></span><br><span class="line">            }</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"index_not_found_exception"</span>,</span><br><span class="line">        <span class="attr">"reason"</span>: <span class="string">"no such index [books]"</span>,  # 没有books索引</span><br><span class="line">        <span class="attr">"resource.type"</span>: <span class="string">"index_or_alias"</span>,</span><br><span class="line">        <span class="attr">"resource.id"</span>: <span class="string">"book"</span>,</span><br><span class="line">        <span class="attr">"index_uuid"</span>: <span class="string">"_na_"</span>,</span><br><span class="line">        <span class="attr">"index"</span>: <span class="string">"book"</span></span><br><span class="line">    },</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">404</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>创建索引并指定分词器</p><p>​  前面创建的索引是未指定分词器的，可以在创建索引时添加请求参数，设置分词器。目前国内较为流行的分词器是IK分词器，使用前先在下对应的分词器，然后使用。IK分词器下载地址：<a href="https://github.com/medcl/elasticsearch-analysis-ik/releases">https://github.com/medcl/elasticsearch-analysis-ik/releases</a></p><p>​  分词器下载后解压到ES安装目录的plugins目录中即可，安装分词器后需要重新启动ES服务器。使用IK分词器创建索引格式：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">PUT请求  http:<span class="comment">//localhost:9200/books</span></span><br><span class="line"></span><br><span class="line">请求参数如下（注意是json格式的参数）</span><br><span class="line">{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"mappings"</span>:{       #定义mappings属性，替换创建索引时对应的mappings属性  </span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"properties"</span>:{      #定义索引中包含的属性设置</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"id"</span>:{       #设置索引中包含id属性</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"keyword"</span>   #当前属性可以被直接搜索</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"name"</span>:{      #设置索引中包含name属性</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"text"</span>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;#当前属性是文本信息，参与分词&nbsp;&nbsp;</span><br><span class="line">                <span class="attr">"analyzer"</span>:<span class="string">"ik_max_word"</span>,&nbsp;&nbsp;&nbsp;#使用IK分词器进行分词&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class="line">                <span class="attr">"copy_to"</span>:<span class="string">"all"</span>    #分词结果拷贝到all属性中</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"description"</span>:{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"text"</span>, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class="line">                <span class="attr">"analyzer"</span>:<span class="string">"ik_max_word"</span>,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class="line">                <span class="attr">"copy_to"</span>:<span class="string">"all"</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"all"</span>:{       #定义属性，用来描述多个字段的分词结果集合，当前属性可以参与查询</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"text"</span>, &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><br><span class="line">                <span class="attr">"analyzer"</span>:<span class="string">"ik_max_word"</span></span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  创建完毕后返回结果和不使用分词器创建索引的结果是一样的，此时可以通过查看索引信息观察到添加的请求参数mappings已经进入到了索引属性中</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"books"</span>: {</span><br><span class="line">        <span class="attr">"aliases"</span>: {},</span><br><span class="line">        <span class="attr">"mappings"</span>: {      #mappings属性已经被替换</span><br><span class="line">            <span class="attr">"properties"</span>: {</span><br><span class="line">                <span class="attr">"all"</span>: {</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"description"</span>: {</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"copy_to"</span>: [</span><br><span class="line">                        <span class="string">"all"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"id"</span>: {</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"name"</span>: {</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"text"</span>,</span><br><span class="line">                    <span class="attr">"copy_to"</span>: [</span><br><span class="line">                        <span class="string">"all"</span></span><br><span class="line">                    ],</span><br><span class="line">                    <span class="attr">"analyzer"</span>: <span class="string">"ik_max_word"</span></span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"type"</span>: {</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="string">"keyword"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"settings"</span>: {</span><br><span class="line">            <span class="attr">"index"</span>: {</span><br><span class="line">                <span class="attr">"routing"</span>: {</span><br><span class="line">                    <span class="attr">"allocation"</span>: {</span><br><span class="line">                        <span class="attr">"include"</span>: {</span><br><span class="line">                            <span class="attr">"_tier_preference"</span>: <span class="string">"data_content"</span></span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line">                },</span><br><span class="line">                <span class="attr">"number_of_shards"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"provided_name"</span>: <span class="string">"books"</span>,</span><br><span class="line">                <span class="attr">"creation_date"</span>: <span class="string">"1645769809521"</span>,</span><br><span class="line">                <span class="attr">"number_of_replicas"</span>: <span class="string">"1"</span>,</span><br><span class="line">                <span class="attr">"uuid"</span>: <span class="string">"DohYKvr_SZO4KRGmbZYmTQ"</span>,</span><br><span class="line">                <span class="attr">"version"</span>: {</span><br><span class="line">                    <span class="attr">"created"</span>: <span class="string">"7160299"</span></span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p>目前我们已经有了索引了，但是索引中还没有数据，所以要先添加数据，ES中称数据为文档，下面进行文档操作。</p><ul><li><p>添加文档，有三种方式</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">POST请求 http:<span class="comment">//localhost:9200/books/_doc  #使用系统生成id</span></span><br><span class="line">POST请求 http:<span class="comment">//localhost:9200/books/_create/1 #使用指定id</span></span><br><span class="line">POST请求 http:<span class="comment">//localhost:9200/books/_doc/1  #使用指定id，不存在创建，存在更新（版本递增）</span></span><br><span class="line"></span><br><span class="line">文档通过请求参数传递，数据格式json</span><br><span class="line">{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"name"</span>:<span class="string">"springboot"</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"springboot"</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"description"</span>:<span class="string">"springboot"</span></span><br><span class="line">}  </span><br></pre></td></tr></tbody></table></figure></li><li><p>查询文档</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">GET请求 http:<span class="comment">//localhost:9200/books/_doc/1   #查询单个文档   </span></span><br><span class="line">GET请求 http:<span class="comment">//localhost:9200/books/_search   #查询全部文档</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>条件查询</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET请求 http:<span class="comment">//localhost:9200/books/_search?q=name:springboot # q=查询属性名:查询属性值</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>删除文档</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE请求 http:<span class="comment">//localhost:9200/books/_doc/1</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改文档（全量更新）</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT请求 http:<span class="comment">//localhost:9200/books/_doc/1</span></span><br><span class="line"></span><br><span class="line">文档通过请求参数传递，数据格式json</span><br><span class="line">{</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"name"</span>:<span class="string">"springboot"</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"type"</span>:<span class="string">"springboot"</span>,</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;<span class="attr">"description"</span>:<span class="string">"springboot"</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>修改文档（部分更新）</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST请求 http:<span class="comment">//localhost:9200/books/_update/1</span></span><br><span class="line"></span><br><span class="line">文档通过请求参数传递，数据格式json</span><br><span class="line">{   </span><br><span class="line">    <span class="attr">"doc"</span>:{      #部分更新并不是对原始文档进行更新，而是对原始文档对象中的doc属性中的指定属性更新</span><br><span class="line">&nbsp;&nbsp;&nbsp;&nbsp;    <span class="attr">"name"</span>:<span class="string">"springboot"</span>  #仅更新提供的属性值，未提供的属性值不参与更新操作</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h5 id="整合-2"><a href="#整合-2" class="headerlink" title="整合"></a>整合</h5><p>​  使用springboot整合ES该如何进行呢？老规矩，导入坐标，做配置，使用API接口操作。整合Redis如此，整合MongoDB如此，整合ES依然如此。太没有新意了，其实不是没有新意，这就是springboot的强大之处，所有东西都做成相同规则，对开发者来说非常友好。</p><p>​  下面就开始springboot整合ES，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合ES的starter坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：进行基础配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">elasticsearch:</span></span><br><span class="line">    <span class="attr">rest:</span></span><br><span class="line">      <span class="attr">uris:</span> <span class="string">http://localhost:9200</span></span><br></pre></td></tr></tbody></table></figure><p>​  配置ES服务器地址，端口9200</p><p><strong>步骤③</strong>：使用springboot整合ES的专用客户端接口ElasticsearchRestTemplate来进行操作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot18EsApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchRestTemplate template;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  上述操作形式是ES早期的操作方式，使用的客户端被称为Low Level Client，这种客户端操作方式性能方面略显不足，于是ES开发了全新的客户端操作方式，称为High Level Client。高级别客户端与ES版本同步更新，但是springboot最初整合ES的时候使用的是低级别客户端，所以企业开发需要更换成高级别的客户端模式。</p><p>​  下面使用高级别客户端方式进行springboot整合ES，操作步骤如下：</p><p><strong>步骤①</strong>：导入springboot整合ES高级别客户端的坐标，此种形式目前没有对应的starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch.client<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch-rest-high-level-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：使用编程的形式设置连接的ES服务器，并获取客户端对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot18EsApplicationTests</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">testCreateClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">          HttpHost host = HttpHost.create(<span class="string">"http://localhost:9200"</span>);</span><br><span class="line">          RestClientBuilder builder = RestClient.builder(host);</span><br><span class="line">          client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">  </span><br><span class="line">          client.close();</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  配置ES服务器地址与端口9200，记得客户端使用完毕需要手工关闭。由于当前客户端是手工维护的，因此不能通过自动装配的形式加载对象。</p><p><strong>步骤③</strong>：使用客户端对象操作ES，例如创建索引</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot18EsApplicationTests</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">      <span class="meta">@Test</span></span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">          HttpHost host = HttpHost.create(<span class="string">"http://localhost:9200"</span>);</span><br><span class="line">          RestClientBuilder builder = RestClient.builder(host);</span><br><span class="line">          client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">          </span><br><span class="line">          CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"books"</span>);</span><br><span class="line">          client.indices().create(request, RequestOptions.DEFAULT); </span><br><span class="line">          </span><br><span class="line">          client.close();</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  高级别客户端操作是通过发送请求的方式完成所有操作的，ES针对各种不同的操作，设定了各式各样的请求对象，上例中创建索引的对象是CreateIndexRequest，其他操作也会有自己专用的Request对象。</p><p>​  当前操作我们发现，无论进行ES何种操作，第一步永远是获取RestHighLevelClient对象，最后一步永远是关闭该对象的连接。在测试中可以使用测试类的特性去帮助开发者一次性的完成上述操作，但是在业务书写时，还需要自行管理。将上述代码格式转换成使用测试类的初始化方法和销毁方法进行客户端对象的维护。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot18EsApplicationTests</span> </span>{</span><br><span class="line">    <span class="meta">@BeforeEach</span>  <span class="comment">//在测试类中每个操作运行前运行的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> </span>{</span><br><span class="line">        HttpHost host = HttpHost.create(<span class="string">"http://localhost:9200"</span>);</span><br><span class="line">        RestClientBuilder builder = RestClient.builder(host);</span><br><span class="line">        client = <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span>  <span class="comment">//在测试类中每个操作运行后运行的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        client.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testCreateIndex</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"books"</span>);</span><br><span class="line">        client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  现在的书写简化了很多，也更合理。下面使用上述模式将所有的ES操作执行一遍，测试结果</p><p><strong>创建索引（IK分词器）</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateIndexByIK</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    CreateIndexRequest request = <span class="keyword">new</span> CreateIndexRequest(<span class="string">"books"</span>);</span><br><span class="line">    String json = <span class="string">"{\n"</span> +</span><br><span class="line">            <span class="string">"    \"mappings\":{\n"</span> +</span><br><span class="line">            <span class="string">"        \"properties\":{\n"</span> +</span><br><span class="line">            <span class="string">"            \"id\":{\n"</span> +</span><br><span class="line">            <span class="string">"                \"type\":\"keyword\"\n"</span> +</span><br><span class="line">            <span class="string">"            },\n"</span> +</span><br><span class="line">            <span class="string">"            \"name\":{\n"</span> +</span><br><span class="line">            <span class="string">"                \"type\":\"text\",\n"</span> +</span><br><span class="line">            <span class="string">"                \"analyzer\":\"ik_max_word\",\n"</span> +</span><br><span class="line">            <span class="string">"                \"copy_to\":\"all\"\n"</span> +</span><br><span class="line">            <span class="string">"            },\n"</span> +</span><br><span class="line">            <span class="string">"            \"type\":{\n"</span> +</span><br><span class="line">            <span class="string">"                \"type\":\"keyword\"\n"</span> +</span><br><span class="line">            <span class="string">"            },\n"</span> +</span><br><span class="line">            <span class="string">"            \"description\":{\n"</span> +</span><br><span class="line">            <span class="string">"                \"type\":\"text\",\n"</span> +</span><br><span class="line">            <span class="string">"                \"analyzer\":\"ik_max_word\",\n"</span> +</span><br><span class="line">            <span class="string">"                \"copy_to\":\"all\"\n"</span> +</span><br><span class="line">            <span class="string">"            },\n"</span> +</span><br><span class="line">            <span class="string">"            \"all\":{\n"</span> +</span><br><span class="line">            <span class="string">"                \"type\":\"text\",\n"</span> +</span><br><span class="line">            <span class="string">"                \"analyzer\":\"ik_max_word\"\n"</span> +</span><br><span class="line">            <span class="string">"            }\n"</span> +</span><br><span class="line">            <span class="string">"        }\n"</span> +</span><br><span class="line">            <span class="string">"    }\n"</span> +</span><br><span class="line">            <span class="string">"}"</span>;</span><br><span class="line">    <span class="comment">//设置请求中的参数</span></span><br><span class="line">    request.source(json, XContentType.JSON);</span><br><span class="line">    client.indices().create(request, RequestOptions.DEFAULT);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  IK分词器是通过请求参数的形式进行设置的，设置请求参数使用request对象中的source方法进行设置，至于参数是什么，取决于你的操作种类。当请求中需要参数时，均可使用当前形式进行参数设置。 </p><p><strong>添加文档</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//添加文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateDoc</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    Book book = bookDao.selectById(<span class="number">1</span>);</span><br><span class="line">    IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"books"</span>).id(book.getId().toString());</span><br><span class="line">    String json = JSON.toJSONString(book);</span><br><span class="line">    request.source(json,XContentType.JSON);</span><br><span class="line">    client.index(request,RequestOptions.DEFAULT);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  添加文档使用的请求对象是IndexRequest，与创建索引使用的请求对象不同。 </p><p><strong>批量添加文档</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//批量添加文档</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testCreateDocAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    List&lt;Book&gt; bookList = bookDao.selectList(<span class="keyword">null</span>);</span><br><span class="line">    BulkRequest bulk = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    <span class="keyword">for</span> (Book book : bookList) {</span><br><span class="line">        IndexRequest request = <span class="keyword">new</span> IndexRequest(<span class="string">"books"</span>).id(book.getId().toString());</span><br><span class="line">        String json = JSON.toJSONString(book);</span><br><span class="line">        request.source(json,XContentType.JSON);</span><br><span class="line">        bulk.add(request);</span><br><span class="line">    }</span><br><span class="line">    client.bulk(bulk,RequestOptions.DEFAULT);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  批量做时，先创建一个BulkRequest的对象，可以将该对象理解为是一个保存request对象的容器，将所有的请求都初始化好后，添加到BulkRequest对象中，再使用BulkRequest对象的bulk方法，一次性执行完毕。</p><p><strong>按id查询文档</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//按id查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testGet</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    GetRequest request = <span class="keyword">new</span> GetRequest(<span class="string">"books"</span>,<span class="string">"1"</span>);</span><br><span class="line">    GetResponse response = client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    String json = response.getSourceAsString();</span><br><span class="line">    System.out.println(json);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  根据id查询文档使用的请求对象是GetRequest。</p><p><strong>按条件查询文档</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="comment">//按条件查询</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">testSearch</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">    SearchRequest request = <span class="keyword">new</span> SearchRequest(<span class="string">"books"</span>);</span><br><span class="line"></span><br><span class="line">    SearchSourceBuilder builder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    builder.query(QueryBuilders.termQuery(<span class="string">"all"</span>,<span class="string">"spring"</span>));</span><br><span class="line">    request.source(builder);</span><br><span class="line"></span><br><span class="line">    SearchResponse response = client.search(request, RequestOptions.DEFAULT);</span><br><span class="line">    SearchHits hits = response.getHits();</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : hits) {</span><br><span class="line">        String source = hit.getSourceAsString();</span><br><span class="line">        <span class="comment">//System.out.println(source);</span></span><br><span class="line">        Book book = JSON.parseObject(source, Book.class);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  按条件查询文档使用的请求对象是SearchRequest，查询时调用SearchRequest对象的termQuery方法，需要给出查询属性名，此处支持使用合并字段，也就是前面定义索引属性时添加的all属性。</p><p>​  springboot整合ES的操作到这里就说完了，与前期进行springboot整合redis和mongodb的差别还是蛮大的，主要原始就是我们没有使用springboot整合ES的客户端对象。至于操作，由于ES操作种类过多，所以显得操作略微有点复杂。有关springboot整合ES就先学习到这里吧。</p><p><strong>总结</strong></p><ol><li>springboot整合ES步骤<ol><li>导入springboot整合ES的High Level Client坐标</li><li>手工管理客户端对象，包括初始化和关闭操作</li><li>使用High Level Client根据操作的种类不同，选择不同的Request对象完成对应操作</li></ol></li></ol><h2 id="整合第三方技术"><a href="#整合第三方技术" class="headerlink" title="整合第三方技术"></a>整合第三方技术</h2><p>​  通过第四章的学习，我们领略到了springboot在整合第三方技术时强大的一致性，在第五章中我们要使用springboot继续整合各种各样的第三方技术，通过本章的学习，可以将之前学习的springboot整合第三方技术的思想贯彻到底，还是那三板斧。导坐标、做配置、调API。</p><p>​  springboot能够整合的技术实在是太多了，可以说是万物皆可整。本章将从企业级开发中常用的一些技术作为出发点，对各种各样的技术进行整合。</p><h3 id="KF-5-1-缓存"><a href="#KF-5-1-缓存" class="headerlink" title="KF-5-1.缓存"></a>KF-5-1.缓存</h3><p>​  企业级应用主要作用是信息处理，当需要读取数据时，由于受限于数据库的访问效率，导致整体系统性能偏低。</p><img src="img\image-20220226154148303.png" alt="image-20220226154148303" style="zoom:67%;"><p>​                         应用程序直接与数据库打交道，访问效率低</p><p>​  为了改善上述现象，开发者通常会在应用程序与数据库之间建立一种临时的数据存储机制，该区域中的数据在内存中保存，读写速度较快，可以有效解决数据库访问效率低下的问题。这一块临时存储数据的区域就是缓存。</p><img src="img\image-20220226154233010.png" alt="image-20220226154233010" style="zoom:67%;"><pre><code>        使用缓存后，应用程序与缓存打交道，缓存与数据库打交道，数据访问效率提高</code></pre><p>​  缓存是什么？缓存是一种介于数据永久存储介质与应用程序之间的数据临时存储介质，使用缓存可以有效的减少低速数据读取过程的次数（例如磁盘IO），提高系统性能。此外缓存不仅可以用于提高永久性存储介质的数据读取效率，还可以提供临时的数据存储空间。而springboot提供了对市面上几乎所有的缓存技术进行整合的方案，下面就一起开启springboot整合缓存之旅。</p><h4 id="SpringBoot内置缓存解决方案"><a href="#SpringBoot内置缓存解决方案" class="headerlink" title="SpringBoot内置缓存解决方案"></a>SpringBoot内置缓存解决方案</h4><p>​  springboot技术提供有内置的缓存解决方案，可以帮助开发者快速开启缓存技术，并使用缓存技术进行数据的快速操作，例如读取缓存数据和写入数据到缓存。</p><p><strong>步骤①</strong>：导入springboot提供的缓存技术对应的starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：启用缓存，在引导类上方标注注解@EnableCaching配置springboot程序中可以使用缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启缓存功能</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot19CacheApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot19CacheApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：设置操作的数据是否使用缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value="cacheSpace",key="#id")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  在业务方法上面使用注解@Cacheable声明当前方法的返回值放入缓存中，其中要指定缓存的存储位置，以及缓存中保存当前方法返回值对应的名称。上例中value属性描述缓存的存储位置，可以理解为是一个存储空间名，key属性描述了缓存中保存数据的名称，使用#id读取形参中的id值作为缓存名称。</p><p>​  使用@Cacheable注解后，执行当前操作，如果发现对应名称在缓存中没有数据，就正常读取数据，然后放入缓存；如果对应名称在缓存中有数据，就终止当前业务方法执行，直接返回缓存中的数据。</p><h4 id="手机验证码案例"><a href="#手机验证码案例" class="headerlink" title="手机验证码案例"></a>手机验证码案例</h4><p>​  为了便于下面演示各种各样的缓存技术，我们创建一个手机验证码的案例环境，模拟使用缓存保存手机验证码的过程。</p><p>​  手机验证码案例需求如下：</p><ul><li>输入手机号获取验证码，组织文档以短信形式发送给用户（页面模拟）</li><li>输入手机号和验证码验证结果</li></ul><p>​  为了描述上述操作，我们制作两个表现层接口，一个用来模拟发送短信的过程，其实就是根据用户提供的手机号生成一个验证码，然后放入缓存，另一个用来模拟验证码校验的过程，其实就是使用传入的手机号和验证码进行匹配，并返回最终匹配结果。下面直接制作本案例的模拟代码，先以上例中springboot提供的内置缓存技术来完成当前案例的制作。</p><p><strong>步骤①</strong>：导入springboot提供的缓存技术对应的starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：启用缓存，在引导类上方标注注解@EnableCaching配置springboot程序中可以使用缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启缓存功能</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot19CacheApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot19CacheApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：定义验证码对应的实体类，封装手机号与验证码两个属性</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCode</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String tele;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤④</strong>：定义验证码功能的业务层接口与实现类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CachePut(value = "smsCode", key = "#tele")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">        String code = codeUtils.generator(tele);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span> </span>{</span><br><span class="line">        <span class="comment">//取出内存中的验证码与传递过来的验证码比对，如果相同，返回true</span></span><br><span class="line">        String code = smsCode.getCode();</span><br><span class="line">        String cacheCode = codeUtils.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> code.equals(cacheCode);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  获取验证码后，当验证码失效时必须重新获取验证码，因此在获取验证码的功能上不能使用@Cacheable注解，@Cacheable注解是缓存中没有值则放入值，缓存中有值则取值。此处的功能仅仅是生成验证码并放入缓存，并不具有从缓存中取值的功能，因此不能使用@Cacheable注解，应该使用仅具有向缓存中保存数据的功能，使用@CachePut注解即可。</p><p>​  对于校验验证码的功能建议放入工具类中进行。</p><p><strong>步骤⑤</strong>：定义验证码的生成策略与根据手机号读取验证码的功能</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeUtils</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String [] patch = {<span class="string">"000000"</span>,<span class="string">"00000"</span>,<span class="string">"0000"</span>,<span class="string">"000"</span>,<span class="string">"00"</span>,<span class="string">"0"</span>,<span class="string">""</span>};</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generator</span><span class="params">(String tele)</span></span>{</span><br><span class="line">        <span class="keyword">int</span> hash = tele.hashCode();</span><br><span class="line">        <span class="keyword">int</span> encryption = <span class="number">20206666</span>;</span><br><span class="line">        <span class="keyword">long</span> result = hash ^ encryption;</span><br><span class="line">        <span class="keyword">long</span> nowTime = System.currentTimeMillis();</span><br><span class="line">        result = result ^ nowTime;</span><br><span class="line">        <span class="keyword">long</span> code = result % <span class="number">1000000</span>;</span><br><span class="line">        code = code &lt; <span class="number">0</span> ? -code : code;</span><br><span class="line">        String codeStr = code + <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> len = codeStr.length();</span><br><span class="line">        <span class="keyword">return</span> patch[len] + codeStr;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = "smsCode",key="#tele")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">get</span><span class="params">(String tele)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤⑥</strong>：定义验证码功能的web层接口，一个方法用于提供手机号获取验证码，一个方法用于提供手机号和验证码进行校验</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/sms")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SMSCodeService smsCodeService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">(String tele)</span></span>{</span><br><span class="line">        String code = smsCodeService.sendCodeToSMS(tele);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span></span>{</span><br><span class="line">        <span class="keyword">return</span> smsCodeService.checkCode(smsCode);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="SpringBoot整合Ehcache缓存"><a href="#SpringBoot整合Ehcache缓存" class="headerlink" title="SpringBoot整合Ehcache缓存"></a>SpringBoot整合Ehcache缓存</h4><p>​  手机验证码的案例已经完成了，下面就开始springboot整合各种各样的缓存技术，第一个整合Ehcache技术。Ehcache是一种缓存技术，使用springboot整合Ehcache其实就是变更一下缓存技术的实现方式，话不多说，直接开整</p><p><strong>步骤①</strong>：导入Ehcache的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  此处为什么不是导入Ehcache的starter，而是导入技术坐标呢？其实springboot整合缓存技术做的是通用格式，不管你整合哪种缓存技术，只是实现变化了，操作方式一样。这也体现出springboot技术的优点，统一同类技术的整合方式。</p><p><strong>步骤②</strong>：配置缓存技术实现使用Ehcache</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">ehcache</span></span><br><span class="line">    <span class="attr">ehcache:</span></span><br><span class="line">      <span class="attr">config:</span> <span class="string">ehcache.xml</span></span><br></pre></td></tr></tbody></table></figure><p>​  配置缓存的类型type为ehcache，此处需要说明一下，当前springboot可以整合的缓存技术中包含有ehcach，所以可以这样书写。其实这个type不可以随便写的，不是随便写一个名称就可以整合的。</p><p>​  由于ehcache的配置有独立的配置文件格式，因此还需要指定ehcache的配置文件，以便于读取相应配置</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">updateCheck</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"D:\ehcache"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--默认缓存策略 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- external：是否永久存在，设置为true则不会被清除，此时与timeout冲突，通常设置为false--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- diskPersistent：是否启用磁盘持久化--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- maxElementsInMemory：最大缓存数量--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- overflowToDisk：超过最大缓存数量是否持久化到磁盘--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToIdleSeconds：最大不活动间隔，设置过长缓存容易溢出，设置过短无效果，可用于记录时效性数据，例如验证码--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- timeToLiveSeconds：最大存活时间--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- memoryStoreEvictionPolicy：缓存清除策略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"60"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"60"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span></span></span><br><span class="line"><span class="tag">        <span class="attr">name</span>=<span class="string">"smsCode"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">diskPersistent</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToIdleSeconds</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">timeToLiveSeconds</span>=<span class="string">"10"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  注意前面的案例中，设置了数据保存的位置是smsCode</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CachePut(value = "smsCode", key = "#tele")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">    String code = codeUtils.generator(tele);</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">} </span><br></pre></td></tr></tbody></table></figure><p>​  这个设定需要保障ehcache中有一个缓存空间名称叫做smsCode的配置，前后要统一。在企业开发过程中，通过设置不同名称的cache来设定不同的缓存策略，应用于不同的缓存数据。</p><p>​  到这里springboot整合Ehcache就做完了，可以发现一点，原始代码没有任何修改，仅仅是加了一组配置就可以变更缓存供应商了，这也是springboot提供了统一的缓存操作接口的优势，变更实现并不影响原始代码的书写。</p><p><strong>总结</strong></p><ol><li>springboot使用Ehcache作为缓存实现需要导入Ehcache的坐标</li><li>修改设置，配置缓存供应商为ehcache，并提供对应的缓存配置文件</li></ol><p>​  </p><h4 id="SpringBoot整合Redis缓存"><a href="#SpringBoot整合Redis缓存" class="headerlink" title="SpringBoot整合Redis缓存"></a>SpringBoot整合Redis缓存</h4><p>​  上节使用Ehcache替换了springboot内置的缓存技术，其实springboot支持的缓存技术还很多，下面使用redis技术作为缓存解决方案来实现手机验证码案例。</p><p>​  比对使用Ehcache的过程，加坐标，改缓存实现类型为ehcache，做Ehcache的配置。如果还成redis做缓存呢？一模一样，加坐标，改缓存实现类型为redis，做redis的配置。差别之处只有一点，redis的配置可以在yml文件中直接进行配置，无需制作独立的配置文件。</p><p><strong>步骤①</strong>：导入redis的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置缓存技术实现使用redis</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br></pre></td></tr></tbody></table></figure><p>​  如果需要对redis作为缓存进行配置，注意不是对原始的redis进行配置，而是配置redis作为缓存使用相关的配置，隶属于spring.cache.redis节点下，注意不要写错位置了。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">redis:</span></span><br><span class="line">      <span class="attr">use-key-prefix:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">key-prefix:</span> <span class="string">sms_</span></span><br><span class="line">      <span class="attr">cache-null-values:</span> <span class="literal">false</span></span><br><span class="line">      <span class="attr">time-to-live:</span> <span class="string">10s</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>springboot使用redis作为缓存实现需要导入redis的坐标</li><li>修改设置，配置缓存供应商为redis，并提供对应的缓存配置</li></ol><h4 id="SpringBoot整合Memcached缓存"><a href="#SpringBoot整合Memcached缓存" class="headerlink" title="SpringBoot整合Memcached缓存"></a>SpringBoot整合Memcached缓存</h4><p>​  目前我们已经掌握了3种缓存解决方案的配置形式，分别是springboot内置缓存，ehcache和redis，本节研究一下国内比较流行的一款缓存memcached。</p><p>​  按照之前的套路，其实变更缓存并不繁琐，但是springboot并没有支持使用memcached作为其缓存解决方案，也就是说在type属性中没有memcached的配置选项，这里就需要更变一下处理方式了。在整合之前先安装memcached。</p><p><strong>安装</strong></p><p>​  windows版安装包下载地址：<a href="https://www.runoob.com/memcached/window-install-memcached.html">https://www.runoob.com/memcached/window-install-memcached.html</a></p><p>​  下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p><p><img src="img%5Cimage-20220226174957040.png" alt="image-20220226174957040"></p><p>​  可执行文件只有一个memcached.exe，使用该文件可以将memcached作为系统服务启动，执行此文件时会出现报错信息，如下：</p><img src="img\image-20220226175141986.png" alt="image-20220226175141986" style="zoom:80%;"><p>​  此处出现问题的原因是注册系统服务时需要使用管理员权限，当前账号权限不足导致安装服务失败，切换管理员账号权限启动命令行</p><img src="img\image-20220226175302903.png" alt="image-20220226175302903" style="zoom:80%;"><p>​  然后再次执行安装服务的命令即可，如下：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcached.exe -d install</span><br></pre></td></tr></tbody></table></figure><p>​  服务安装完毕后可以使用命令启动和停止服务，如下：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">memcached.exe -d <span class="built_in">start</span>  # 启动服务</span><br><span class="line">memcached.exe -d stop  # 停止服务</span><br></pre></td></tr></tbody></table></figure><p>​  也可以在任务管理器中进行服务状态的切换</p><img src="img\image-20220226175441675.png" alt="image-20220226175441675" style="zoom:67%;"><p><strong>变更缓存为Memcached</strong></p><p>​  由于memcached未被springboot收录为缓存解决方案，因此使用memcached需要通过手工硬编码的方式来使用，于是前面的套路都不适用了，需要自己写了。</p><p>​  memcached目前提供有三种客户端技术，分别是Memcached Client for Java、SpyMemcached和Xmemcached，其中性能指标各方面最好的客户端是Xmemcached，本次整合就使用这个作为客户端实现技术了。下面开始使用Xmemcached</p><p><strong>步骤①</strong>：导入xmemcached的坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.googlecode.xmemcached<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xmemcached<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置memcached，制作memcached的配置类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMemcachedConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MemcachedClient <span class="title">getMemcachedClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        MemcachedClientBuilder memcachedClientBuilder = <span class="keyword">new</span> XMemcachedClientBuilder(<span class="string">"localhost:11211"</span>);</span><br><span class="line">        MemcachedClient memcachedClient = memcachedClientBuilder.build();</span><br><span class="line">        <span class="keyword">return</span> memcachedClient;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  memcached默认对外服务端口11211。</p><p><strong>步骤③</strong>：使用xmemcached客户端操作缓存，注入MemcachedClient对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MemcachedClient memcachedClient;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">        String code = codeUtils.generator(tele);</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            memcachedClient.set(tele,<span class="number">10</span>,code);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span> </span>{</span><br><span class="line">        String code = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            code = memcachedClient.get(smsCode.getTele()).toString();</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  设置值到缓存中使用set操作，取值使用get操作，其实更符合我们开发者的习惯。</p><p>​  上述代码中对于服务器的配置使用硬编码写死到了代码中，将此数据提取出来，做成独立的配置属性。</p><p><strong>定义配置属性</strong></p><p>​  以下过程采用前期学习的属性配置方式进行，当前操作有助于理解原理篇中的很多知识。</p><ul><li><p>定义配置类，加载必要的配置属性，读取配置文件中memcached节点信息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "memcached")</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMemcachedProperties</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String servers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> poolSize;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> opTimeout;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>定义memcached节点信息</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">memcached:</span></span><br><span class="line">  <span class="attr">servers:</span> <span class="string">localhost:11211</span></span><br><span class="line">  <span class="attr">poolSize:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">opTimeout:</span> <span class="number">3000</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>在memcached配置类中加载信息</p></li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XMemcachedConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XMemcachedProperties props;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MemcachedClient <span class="title">getMemcachedClient</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>{</span><br><span class="line">        MemcachedClientBuilder memcachedClientBuilder = <span class="keyword">new</span> XMemcachedClientBuilder(props.getServers());</span><br><span class="line">        memcachedClientBuilder.setConnectionPoolSize(props.getPoolSize());</span><br><span class="line">        memcachedClientBuilder.setOpTimeout(props.getOpTimeout());</span><br><span class="line">        MemcachedClient memcachedClient = memcachedClientBuilder.build();</span><br><span class="line">        <span class="keyword">return</span> memcachedClient;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>memcached安装后需要启动对应服务才可以对外提供缓存功能，安装memcached服务需要基于windows系统管理员权限</li><li>由于springboot没有提供对memcached的缓存整合方案，需要采用手工编码的形式创建xmemcached客户端操作缓存</li><li>导入xmemcached坐标后，创建memcached配置类，注册MemcachedClient对应的bean，用于操作缓存</li><li>初始化MemcachedClient对象所需要使用的属性可以通过自定义配置属性类的形式加载</li></ol><p><strong>思考</strong></p><p>​  到这里已经完成了三种缓存的整合，其中redis和mongodb需要安装独立的服务器，连接时需要输入对应的服务器地址，这种是远程缓存，Ehcache是一个典型的内存级缓存，因为它什么也不用安装，启动后导入jar包就有缓存功能了。这个时候就要问了，能不能这两种缓存一起用呢？咱们下节再说。</p><h4 id="SpringBoot整合jetcache缓存"><a href="#SpringBoot整合jetcache缓存" class="headerlink" title="SpringBoot整合jetcache缓存"></a>SpringBoot整合jetcache缓存</h4><p>​  目前我们使用的缓存都是要么A要么B，能不能AB一起用呢？这一节就解决这个问题。springboot针对缓存的整合仅仅停留在用缓存上面，如果缓存自身不支持同时支持AB一起用，springboot也没办法，所以要想解决AB缓存一起用的问题，就必须找一款缓存能够支持AB两种缓存一起用，有这种缓存吗？还真有，阿里出品，jetcache。</p><p>​  jetcache严格意义上来说，并不是一个缓存解决方案，只能说他算是一个缓存框架，然后把别的缓存放到jetcache中管理，这样就可以支持AB缓存一起用了。并且jetcache参考了springboot整合缓存的思想，整体技术使用方式和springboot的缓存解决方案思想非常类似。下面咱们就先把jetcache用起来，然后再说它里面的一些小的功能。</p><p>​  做之前要先明确一下，jetcache并不是随便拿两个缓存都能拼到一起去的。目前jetcache支持的缓存方案本地缓存支持两种，远程缓存支持两种，分别如下：</p><ul><li>本地缓存（Local）<ul><li>LinkedHashMap</li><li>Caffeine</li></ul></li><li>远程缓存（Remote）<ul><li>Redis</li><li>Tair</li></ul></li></ul><p>​  其实也有人问我，为什么jetcache只支持2+2这么4款缓存呢？阿里研发这个技术其实主要是为了满足自身的使用需要。最初肯定只有1+1种，逐步变化成2+2种。下面就以LinkedHashMap+Redis的方案实现本地与远程缓存方案同时使用。</p><h5 id="纯远程方案"><a href="#纯远程方案" class="headerlink" title="纯远程方案"></a>纯远程方案</h5><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter，当前坐标默认使用的远程方案是redis</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alicp.jetcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：远程方案基本配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></tbody></table></figure><p>​  其中poolConfig是必配项，否则会报错</p><p><strong>步骤③</strong>：启用缓存，在引导类上方标注注解@EnableCreateCacheAnnotation配置springboot程序中可以使用注解的形式创建缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot20JetCacheApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot20JetCacheApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤④</strong>：创建缓存对象Cache，并使用注解@CreateCache标记当前缓存的信息，然后使用Cache对象的API操作缓存，put写缓存，get读缓存。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CreateCache(name="jetCache_",expire = 10,timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String ,String&gt; jetCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">        String code = codeUtils.generator(tele);</span><br><span class="line">        jetCache.put(tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span> </span>{</span><br><span class="line">        String code = jetCache.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  通过上述jetcache使用远程方案连接redis可以看出，jetcache操作缓存时的接口操作更符合开发者习惯，使用缓存就先获取缓存对象Cache，放数据进去就是put，取数据出来就是get，更加简单易懂。并且jetcache操作缓存时，可以为某个缓存对象设置过期时间，将同类型的数据放入缓存中，方便有效周期的管理。</p><p>​  上述方案中使用的是配置中定义的default缓存，其实这个default是个名字，可以随便写，也可以随便加。例如再添加一种缓存解决方案，参照如下配置进行：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">sms:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></tbody></table></figure><p>​  如果想使用名称是sms的缓存，需要再创建缓存时指定参数area，声明使用对应缓存即可</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@CreateCache(area="sms",name="jetCache_",expire = 10,timeUnit = TimeUnit.SECONDS)</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String ,String&gt; jetCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">        String code = codeUtils.generator(tele);</span><br><span class="line">        jetCache.put(tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span> </span>{</span><br><span class="line">        String code = jetCache.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="纯本地方案"><a href="#纯本地方案" class="headerlink" title="纯本地方案"></a>纯本地方案</h5><p>​  远程方案中，配置中使用remote表示远程，换成local就是本地，只不过类型不一样而已。</p><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alicp.jetcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：本地缓存基本配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br></pre></td></tr></tbody></table></figure><p>​  为了加速数据获取时key的匹配速度，jetcache要求指定key的类型转换器。简单说就是，如果你给了一个Object作为key的话，我先用key的类型转换器给转换成字符串，然后再保存。等到获取数据时，仍然是先使用给定的Object转换成字符串，然后根据字符串匹配。由于jetcache是阿里的技术，这里推荐key的类型转换器使用阿里的fastjson。</p><p><strong>步骤③</strong>：启用缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot20JetCacheApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot20JetCacheApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤④</strong>：创建缓存对象Cache时，标注当前使用本地缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@CreateCache(name="jetCache_",expire = 1000,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.LOCAL)</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String ,String&gt; jetCache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">        String code = codeUtils.generator(tele);</span><br><span class="line">        jetCache.put(tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span> </span>{</span><br><span class="line">        String code = jetCache.get(smsCode.getTele());</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  cacheType控制当前缓存使用本地缓存还是远程缓存，配置cacheType=CacheType.LOCAL即使用本地缓存。</p><h5 id="本地-远程方案"><a href="#本地-远程方案" class="headerlink" title="本地+远程方案"></a>本地+远程方案</h5><p>​  本地和远程方法都有了，两种方案一起使用如何配置呢？其实就是将两种配置合并到一起就可以了。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">sms:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></tbody></table></figure><p>​  在创建缓存的时候，配置cacheType为BOTH即则本地缓存与远程缓存同时使用。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@CreateCache(name="jetCache_",expire = 1000,timeUnit = TimeUnit.SECONDS,cacheType = CacheType.BOTH)</span></span><br><span class="line">    <span class="keyword">private</span> Cache&lt;String ,String&gt; jetCache;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  cacheType如果不进行配置，默认值是REMOTE，即仅使用远程缓存方案。关于jetcache的配置，参考以下信息</p><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>jetcache.statIntervalMinutes</td><td>0</td><td>统计间隔，0表示不统计</td></tr><tr><td>jetcache.hiddenPackages</td><td>无</td><td>自动生成name时，隐藏指定的包名前缀</td></tr><tr><td>jetcache.[local|remote].${area}.type</td><td>无</td><td>缓存类型，本地支持linkedhashmap、caffeine，远程支持redis、tair</td></tr><tr><td>jetcache.[local|remote].${area}.keyConvertor</td><td>无</td><td>key转换器，当前仅支持fastjson</td></tr><tr><td>jetcache.[local|remote].${area}.valueEncoder</td><td>java</td><td>仅remote类型的缓存需要指定，可选java和kryo</td></tr><tr><td>jetcache.[local|remote].${area}.valueDecoder</td><td>java</td><td>仅remote类型的缓存需要指定，可选java和kryo</td></tr><tr><td>jetcache.[local|remote].${area}.limit</td><td>100</td><td>仅local类型的缓存需要指定，缓存实例最大元素数</td></tr><tr><td>jetcache.[local|remote].${area}.expireAfterWriteInMillis</td><td>无穷大</td><td>默认过期时间，毫秒单位</td></tr><tr><td>jetcache.local.${area}.expireAfterAccessInMillis</td><td>0</td><td>仅local类型的缓存有效，毫秒单位，最大不活动间隔</td></tr></tbody></table><p>​  以上方案仅支持手工控制缓存，但是springcache方案中的方法缓存特别好用，给一个方法添加一个注解，方法就会自动使用缓存。jetcache也提供了对应的功能，即方法缓存。</p><p><strong>方法缓存</strong></p><p>​  jetcache提供了方法缓存方案，只不过名称变更了而已。在对应的操作接口上方使用注解@Cached即可</p><p><strong>步骤①</strong>：导入springboot整合jetcache对应的坐标starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alicp.jetcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jetcache-starter-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置缓存</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">linkedhashmap</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">  <span class="attr">remote:</span></span><br><span class="line">    <span class="attr">default:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">keyConvertor:</span> <span class="string">fastjson</span></span><br><span class="line">      <span class="attr">valueEncode:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">valueDecode:</span> <span class="string">java</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br><span class="line">    <span class="attr">sms:</span></span><br><span class="line">      <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">      <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">      <span class="attr">poolConfig:</span></span><br><span class="line">        <span class="attr">maxTotal:</span> <span class="number">50</span></span><br></pre></td></tr></tbody></table></figure><p>​  由于redis缓存中不支持保存对象，因此需要对redis设置当Object类型数据进入到redis中时如何进行类型转换。需要配置keyConvertor表示key的类型转换方式，同时标注value的转换类型方式，值进入redis时是java类型，标注valueEncode为java，值从redis中读取时转换成java，标注valueDecode为java。</p><p>​  注意，为了实现Object类型的值进出redis，需要保障进出redis的Object类型的数据必须实现序列化接口。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：启用缓存时开启方法缓存功能，并配置basePackages，说明在哪些包中开启方法缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//jetcache启用缓存的主开关</span></span><br><span class="line"><span class="meta">@EnableCreateCacheAnnotation</span></span><br><span class="line"><span class="comment">//开启方法注解缓存</span></span><br><span class="line"><span class="meta">@EnableMethodCache(basePackages = "com.itheima")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot20JetCacheApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot20JetCacheApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤④</strong>：使用注解@Cached标注当前方法使用缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title">BookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Cached(name="book_",key="#id",expire = 3600,cacheType = CacheType.REMOTE)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="远程方案的数据同步"><a href="#远程方案的数据同步" class="headerlink" title="远程方案的数据同步"></a>远程方案的数据同步</h5><p>​  由于远程方案中redis保存的数据可以被多个客户端共享，这就存在了数据同步问题。jetcache提供了3个注解解决此问题，分别在更新、删除操作时同步缓存数据，和读取缓存时定时刷新数据</p><p><strong>更新缓存</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheUpdate(name="book_",key="#book.id",value="#book")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">update</span><span class="params">(Book book)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> bookDao.updateById(book) &gt; <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>删除缓存</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CacheInvalidate(name="book_",key = "#id")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>定时刷新缓存</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Cached(name="book_",key="#id",expire = 3600,cacheType = CacheType.REMOTE)</span></span><br><span class="line"><span class="meta">@CacheRefresh(refresh = 5)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getById</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> bookDao.selectById(id);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h5 id="数据报表"><a href="#数据报表" class="headerlink" title="数据报表"></a>数据报表</h5><p>​  jetcache还提供有简单的数据报表功能，帮助开发者快速查看缓存命中信息，只需要添加一个配置即可</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">jetcache:</span></span><br><span class="line">  <span class="attr">statIntervalMinutes:</span> <span class="number">1</span></span><br></pre></td></tr></tbody></table></figure><p>​  设置后，每1分钟在控制台输出缓存数据命中信息</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[DefaultExecutor] c.alicp.jetcache.support.StatInfoLogger  : jetcache stat from <span class="number">2022</span>-<span class="number">02</span>-<span class="number">28</span> <span class="number">09</span>:<span class="number">32</span>:<span class="number">15</span>,<span class="number">892</span> to <span class="number">2022</span>-<span class="number">02</span>-<span class="number">28</span> <span class="number">09</span>:<span class="number">33</span>:<span class="number">00</span>,<span class="number">003</span></span><br><span class="line">cache    |    qps|   rate|   get|    hit|   fail|   expire|   avgLoadTime|   maxLoadTime</span><br><span class="line">---------+-------+-------+------+-------+-------+---------+--------------+--------------</span><br><span class="line">book_    |   <span class="number">0</span>.<span class="number">66</span>| <span class="number">75</span>.<span class="number">86</span>%|    <span class="number">29</span>|     <span class="number">22</span>|      <span class="number">0</span>|        <span class="number">0</span>|          <span class="number">28</span>.<span class="number">0</span>|           <span class="number">188</span></span><br><span class="line">---------+-------+-------+------+-------+-------+---------+--------------+--------------</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>jetcache是一个类似于springcache的缓存解决方案，自身不具有缓存功能，它提供有本地缓存与远程缓存多级共同使用的缓存解决方案</li><li>jetcache提供的缓存解决方案受限于目前支持的方案，本地缓存支持两种，远程缓存支持两种</li><li>注意数据进入远程缓存时的类型转换问题</li><li>jetcache提供方法缓存，并提供了对应的缓存更新与刷新功能</li><li>jetcache提供有简单的缓存信息命中报表方便开发者即时监控缓存数据命中情况</li></ol><p><strong>思考</strong></p><p>​  jetcache解决了前期使用缓存方案单一的问题，但是仍然不能灵活的选择缓存进行搭配使用，是否存在一种技术可以灵活的搭配各种各样的缓存使用呢？有，咱们下一节再讲。</p><h4 id="SpringBoot整合j2cache缓存"><a href="#SpringBoot整合j2cache缓存" class="headerlink" title="SpringBoot整合j2cache缓存"></a>SpringBoot整合j2cache缓存</h4><p>​  jetcache可以在限定范围内构建多级缓存，但是灵活性不足，不能随意搭配缓存，本节介绍一种可以随意搭配缓存解决方案的缓存整合框架，j2cache。下面就来讲解如何使用这种缓存框架，以Ehcache与redis整合为例：</p><p><strong>步骤①</strong>：导入j2cache、redis、ehcache坐标</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.4-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.oschina.j2cache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>j2cache-spring-boot2-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0-release<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  j2cache的starter中默认包含了redis坐标，官方推荐使用redis作为二级缓存，因此此处无需导入redis坐标</p><p><strong>步骤②</strong>：配置一级与二级缓存，并配置一二级缓存间数据传递方式，配置书写在名称为j2cache.properties的文件中。如果使用ehcache还需要单独添加ehcache的配置文件</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1级缓存</span></span><br><span class="line"><span class="string">j2cache.L1.provider_class</span> <span class="string">=</span> <span class="string">ehcache</span></span><br><span class="line"><span class="string">ehcache.configXml</span> <span class="string">=</span> <span class="string">ehcache.xml</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2级缓存</span></span><br><span class="line"><span class="string">j2cache.L2.provider_class</span> <span class="string">=</span> <span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisProvider</span></span><br><span class="line"><span class="string">j2cache.L2.config_section</span> <span class="string">=</span> <span class="string">redis</span></span><br><span class="line"><span class="string">redis.hosts</span> <span class="string">=</span> <span class="string">localhost:6379</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1级缓存中的数据如何到达二级缓存</span></span><br><span class="line"><span class="string">j2cache.broadcast</span> <span class="string">=</span> <span class="string">net.oschina.j2cache.cache.support.redis.SpringRedisPubSubPolicy</span></span><br></pre></td></tr></tbody></table></figure><p>​  此处配置不能乱配置，需要参照官方给出的配置说明进行。例如1级供应商选择ehcache，供应商名称仅仅是一个ehcache，但是2级供应商选择redis时要写专用的Spring整合Redis的供应商类名SpringRedisProvider，而且这个名称并不是所有的redis包中能提供的，也不是spring包中提供的。因此配置j2cache必须参照官方文档配置，而且还要去找专用的整合包，导入对应坐标才可以使用。</p><p>​  一级与二级缓存最重要的一个配置就是两者之间的数据沟通方式，此类配置也不是随意配置的，并且不同的缓存解决方案提供的数据沟通方式差异化很大，需要查询官方文档进行设置。</p><p><strong>步骤③</strong>：使用缓存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SMSCodeServiceImpl</span> <span class="keyword">implements</span> <span class="title">SMSCodeService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CodeUtils codeUtils;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> CacheChannel cacheChannel;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendCodeToSMS</span><span class="params">(String tele)</span> </span>{</span><br><span class="line">        String code = codeUtils.generator(tele);</span><br><span class="line">        cacheChannel.set(<span class="string">"sms"</span>,tele,code);</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkCode</span><span class="params">(SMSCode smsCode)</span> </span>{</span><br><span class="line">        String code = cacheChannel.get(<span class="string">"sms"</span>,smsCode.getTele()).asString();</span><br><span class="line">        <span class="keyword">return</span> smsCode.getCode().equals(code);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  j2cache的使用和jetcache比较类似，但是无需开启使用的开关，直接定义缓存对象即可使用，缓存对象名CacheChannel。</p><p>​  j2cache的使用不复杂，配置是j2cache的核心，毕竟是一个整合型的缓存框架。缓存相关的配置过多，可以查阅j2cache-core核心包中的j2cache.properties文件中的说明。如下：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#J2Cache configuration</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Cache Broadcast Method</span></span><br><span class="line"><span class="comment"># values:</span></span><br><span class="line"><span class="comment"># jgroups -&gt; use jgroups's multicast</span></span><br><span class="line"><span class="comment"># redis -&gt; use redis publish/subscribe mechanism (using jedis)</span></span><br><span class="line"><span class="comment"># lettuce -&gt; use redis publish/subscribe mechanism (using lettuce, Recommend)</span></span><br><span class="line"><span class="comment"># rabbitmq -&gt; use RabbitMQ publisher/consumer mechanism</span></span><br><span class="line"><span class="comment"># rocketmq -&gt; use RocketMQ publisher/consumer mechanism</span></span><br><span class="line"><span class="comment"># none -&gt; don't notify the other nodes in cluster</span></span><br><span class="line"><span class="comment"># xx.xxxx.xxxx.Xxxxx your own cache broadcast policy classname that implement net.oschina.j2cache.cluster.ClusterPolicy</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="meta">j2cache.broadcast</span> = <span class="string">redis</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># jgroups properties</span></span><br><span class="line"><span class="meta">jgroups.channel.name</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="meta">jgroups.configXml</span> = <span class="string">/network.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># RabbitMQ properties</span></span><br><span class="line"><span class="meta">rabbitmq.exchange</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="meta">rabbitmq.host</span> = <span class="string">localhost</span></span><br><span class="line"><span class="meta">rabbitmq.port</span> = <span class="string">5672</span></span><br><span class="line"><span class="meta">rabbitmq.username</span> = <span class="string">guest</span></span><br><span class="line"><span class="meta">rabbitmq.password</span> = <span class="string">guest</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># RocketMQ properties</span></span><br><span class="line"><span class="meta">rocketmq.name</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="meta">rocketmq.topic</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="comment"># use ; to split multi hosts</span></span><br><span class="line"><span class="meta">rocketmq.hosts</span> = <span class="string">127.0.0.1:9876</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Level 1&amp;2 provider</span></span><br><span class="line"><span class="comment"># values:</span></span><br><span class="line"><span class="comment"># none -&gt; disable this level cache</span></span><br><span class="line"><span class="comment"># ehcache -&gt; use ehcache2 as level 1 cache</span></span><br><span class="line"><span class="comment"># ehcache3 -&gt; use ehcache3 as level 1 cache</span></span><br><span class="line"><span class="comment"># caffeine -&gt; use caffeine as level 1 cache(only in memory)</span></span><br><span class="line"><span class="comment"># redis -&gt; use redis as level 2 cache (using jedis)</span></span><br><span class="line"><span class="comment"># lettuce -&gt; use redis as level 2 cache (using lettuce)</span></span><br><span class="line"><span class="comment"># readonly-redis -&gt; use redis as level 2 cache ,but never write data to it. if use this provider, you must uncomment `j2cache.L2.config_section` to make the redis configurations available.</span></span><br><span class="line"><span class="comment"># memcached -&gt; use memcached as level 2 cache (xmemcached),</span></span><br><span class="line"><span class="comment"># [classname] -&gt; use custom provider</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">j2cache.L1.provider_class</span> = <span class="string">caffeine</span></span><br><span class="line"><span class="meta">j2cache.L2.provider_class</span> = <span class="string">redis</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># When L2 provider isn't `redis`, using `L2.config_section = redis` to read redis configurations</span></span><br><span class="line"><span class="comment"># j2cache.L2.config_section = redis</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Enable/Disable ttl in redis cache data (if disabled, the object in redis will never expire, default:true)</span></span><br><span class="line"><span class="comment"># NOTICE: redis hash mode (redis.storage = hash) do not support this feature)</span></span><br><span class="line"><span class="meta">j2cache.sync_ttl_to_redis</span> = <span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Whether to cache null objects by default (default false)</span></span><br><span class="line"><span class="meta">j2cache.default_cache_null_object</span> = <span class="string">true</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Cache Serialization Provider</span></span><br><span class="line"><span class="comment"># values:</span></span><br><span class="line"><span class="comment"># fst -&gt; using fast-serialization (recommend)</span></span><br><span class="line"><span class="comment"># kryo -&gt; using kryo serialization</span></span><br><span class="line"><span class="comment"># json -&gt; using fst's json serialization (testing)</span></span><br><span class="line"><span class="comment"># fastjson -&gt; using fastjson serialization (embed non-static class not support)</span></span><br><span class="line"><span class="comment"># java -&gt; java standard</span></span><br><span class="line"><span class="comment"># fse -&gt; using fse serialization</span></span><br><span class="line"><span class="comment"># [classname implements Serializer]</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">j2cache.serialization</span> = <span class="string">json</span></span><br><span class="line"><span class="comment">#json.map.person = net.oschina.j2cache.demo.Person</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Ehcache configuration</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ehcache.configXml = /ehcache.xml</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># ehcache3.configXml = /ehcache3.xml</span></span><br><span class="line"><span class="comment"># ehcache3.defaultHeapSize = 1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Caffeine configuration</span></span><br><span class="line"><span class="comment"># caffeine.region.[name] = size, xxxx[s|m|h|d]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="meta">caffeine.properties</span> = <span class="string">/caffeine.properties</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Redis connection configuration</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Redis Cluster Mode</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># single -&gt; single redis server</span></span><br><span class="line"><span class="comment"># sentinel -&gt; master-slaves servers</span></span><br><span class="line"><span class="comment"># cluster -&gt; cluster servers (数据库配置无效，使用 database = 0）</span></span><br><span class="line"><span class="comment"># sharded -&gt; sharded servers  (密码、数据库必须在 hosts 中指定，且连接池配置无效 ; redis://user:password@127.0.0.1:6379/0）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">redis.mode</span> = <span class="string">single</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#redis storage mode (generic|hash)</span></span><br><span class="line"><span class="meta">redis.storage</span> = <span class="string">generic</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## redis pub/sub channel name</span></span><br><span class="line"><span class="meta">redis.channel</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="comment">## redis pub/sub server (using redis.hosts when empty)</span></span><br><span class="line"><span class="meta">redis.channel.host</span> =<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#cluster name just for sharded</span></span><br><span class="line"><span class="meta">redis.cluster_name</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## redis cache namespace optional, default[empty]</span></span><br><span class="line"><span class="meta">redis.namespace</span> =<span class="string"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## redis command scan parameter count, default[1000]</span></span><br><span class="line"><span class="comment">#redis.scanCount = 1000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## connection</span></span><br><span class="line"><span class="comment"># Separate multiple redis nodes with commas, such as 192.168.0.10:6379,192.168.0.11:6379,192.168.0.12:6379</span></span><br><span class="line"></span><br><span class="line"><span class="meta">redis.hosts</span> = <span class="string">127.0.0.1:6379</span></span><br><span class="line"><span class="meta">redis.timeout</span> = <span class="string">2000</span></span><br><span class="line"><span class="meta">redis.password</span> =<span class="string"></span></span><br><span class="line"><span class="meta">redis.database</span> = <span class="string">0</span></span><br><span class="line"><span class="meta">redis.ssl</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## redis pool properties</span></span><br><span class="line"><span class="meta">redis.maxTotal</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">redis.maxIdle</span> = <span class="string">10</span></span><br><span class="line"><span class="meta">redis.maxWaitMillis</span> = <span class="string">5000</span></span><br><span class="line"><span class="meta">redis.minEvictableIdleTimeMillis</span> = <span class="string">60000</span></span><br><span class="line"><span class="meta">redis.minIdle</span> = <span class="string">1</span></span><br><span class="line"><span class="meta">redis.numTestsPerEvictionRun</span> = <span class="string">10</span></span><br><span class="line"><span class="meta">redis.lifo</span> = <span class="string">false</span></span><br><span class="line"><span class="meta">redis.softMinEvictableIdleTimeMillis</span> = <span class="string">10</span></span><br><span class="line"><span class="meta">redis.testOnBorrow</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">redis.testOnReturn</span> = <span class="string">false</span></span><br><span class="line"><span class="meta">redis.testWhileIdle</span> = <span class="string">true</span></span><br><span class="line"><span class="meta">redis.timeBetweenEvictionRunsMillis</span> = <span class="string">300000</span></span><br><span class="line"><span class="meta">redis.blockWhenExhausted</span> = <span class="string">false</span></span><br><span class="line"><span class="meta">redis.jmxEnabled</span> = <span class="string">false</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Lettuce scheme</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># redis -&gt; single redis server</span></span><br><span class="line"><span class="comment"># rediss -&gt; single redis server with ssl</span></span><br><span class="line"><span class="comment"># redis-sentinel -&gt; redis sentinel</span></span><br><span class="line"><span class="comment"># redis-cluster -&gt; cluster servers</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># Lettuce Mode</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># single -&gt; single redis server</span></span><br><span class="line"><span class="comment"># sentinel -&gt; master-slaves servers</span></span><br><span class="line"><span class="comment"># cluster -&gt; cluster servers (数据库配置无效，使用 database = 0）</span></span><br><span class="line"><span class="comment"># sharded -&gt; sharded servers  (密码、数据库必须在 hosts 中指定，且连接池配置无效 ; redis://user:password@127.0.0.1:6379/0）</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## redis command scan parameter count, default[1000]</span></span><br><span class="line"><span class="comment">#lettuce.scanCount = 1000</span></span><br><span class="line"><span class="meta">lettuce.mode</span> = <span class="string">single</span></span><br><span class="line"><span class="meta">lettuce.namespace</span> =<span class="string"></span></span><br><span class="line"><span class="meta">lettuce.storage</span> = <span class="string">hash</span></span><br><span class="line"><span class="meta">lettuce.channel</span> = <span class="string">j2cache</span></span><br><span class="line"><span class="meta">lettuce.scheme</span> = <span class="string">redis</span></span><br><span class="line"><span class="meta">lettuce.hosts</span> = <span class="string">127.0.0.1:6379</span></span><br><span class="line"><span class="meta">lettuce.password</span> =<span class="string"></span></span><br><span class="line"><span class="meta">lettuce.database</span> = <span class="string">0</span></span><br><span class="line"><span class="meta">lettuce.sentinelMasterId</span> =<span class="string"></span></span><br><span class="line"><span class="meta">lettuce.maxTotal</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">lettuce.maxIdle</span> = <span class="string">10</span></span><br><span class="line"><span class="meta">lettuce.minIdle</span> = <span class="string">10</span></span><br><span class="line"><span class="comment"># timeout in milliseconds</span></span><br><span class="line"><span class="meta">lettuce.timeout</span> = <span class="string">10000</span></span><br><span class="line"><span class="comment"># redis cluster topology refresh interval in milliseconds</span></span><br><span class="line"><span class="meta">lettuce.clusterTopologyRefresh</span> = <span class="string">3000</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"><span class="comment"># memcached server configurations</span></span><br><span class="line"><span class="comment"># refer to https://gitee.com/mirrors/XMemcached</span></span><br><span class="line"><span class="comment">#########################################</span></span><br><span class="line"></span><br><span class="line"><span class="meta">memcached.servers</span> = <span class="string">127.0.0.1:11211</span></span><br><span class="line"><span class="meta">memcached.username</span> =<span class="string"></span></span><br><span class="line"><span class="meta">memcached.password</span> =<span class="string"></span></span><br><span class="line"><span class="meta">memcached.connectionPoolSize</span> = <span class="string">10</span></span><br><span class="line"><span class="meta">memcached.connectTimeout</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">memcached.failureMode</span> = <span class="string">false</span></span><br><span class="line"><span class="meta">memcached.healSessionInterval</span> = <span class="string">1000</span></span><br><span class="line"><span class="meta">memcached.maxQueuedNoReplyOperations</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">memcached.opTimeout</span> = <span class="string">100</span></span><br><span class="line"><span class="meta">memcached.sanitizeKeys</span> = <span class="string">false</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>j2cache是一个缓存框架，自身不具有缓存功能，它提供多种缓存整合在一起使用的方案</li><li>j2cache需要通过复杂的配置设置各级缓存，以及缓存之间数据交换的方式</li><li>j2cache操作接口通过CacheChannel实现</li></ol><h3 id="KF-5-2-任务"><a href="#KF-5-2-任务" class="headerlink" title="KF-5-2.任务"></a>KF-5-2.任务</h3><p>​  springboot整合第三方技术第二部分我们来说说任务系统，其实这里说的任务系统指的是定时任务。定时任务是企业级开发中必不可少的组成部分，诸如长周期业务数据的计算，例如年度报表，诸如系统脏数据的处理，再比如系统性能监控报告，还有抢购类活动的商品上架，这些都离不开定时任务。本节将介绍两种不同的定时任务技术。</p><h4 id="Quartz"><a href="#Quartz" class="headerlink" title="Quartz"></a>Quartz</h4><p>​  Quartz技术是一个比较成熟的定时任务框架，怎么说呢？有点繁琐，用过的都知道，配置略微复杂。springboot对其进行整合后，简化了一系列的配置，将很多配置采用默认设置，这样开发阶段就简化了很多。再学习springboot整合Quartz前先普及几个Quartz的概念。</p><ul><li>工作（Job）：用于定义具体执行的工作</li><li>工作明细（JobDetail）：用于描述定时工作相关的信息</li><li>触发器（Trigger）：描述了工作明细与调度器的对应关系</li><li>调度器（Scheduler）：用于描述触发工作的执行规则，通常使用cron表达式定义规则</li></ul><p>​  简单说就是你定时干什么事情，这就是工作，工作不可能就是一个简单的方法，还要设置一些明细信息。工作啥时候执行，设置一个调度器，可以简单理解成设置一个工作执行的时间。工作和调度都是独立定义的，它们两个怎么配合到一起呢？用触发器。完了，就这么多。下面开始springboot整合Quartz。</p><p><strong>步骤①</strong>：导入springboot整合Quartz的starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-quartz<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：定义任务Bean，按照Quartz的开发规范制作，继承QuartzJobBean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyQuartz</span> <span class="keyword">extends</span> <span class="title">QuartzJobBean</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">executeInternal</span><span class="params">(JobExecutionContext context)</span> <span class="keyword">throws</span> JobExecutionException </span>{</span><br><span class="line">        System.out.println(<span class="string">"quartz task run..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：创建Quartz配置类，定义工作明细（JobDetail）与触发器的（Trigger）bean</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuartzConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JobDetail <span class="title">printJobDetail</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//绑定具体的工作</span></span><br><span class="line">        <span class="keyword">return</span> JobBuilder.newJob(MyQuartz.class).storeDurably().build();</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Trigger <span class="title">printJobTrigger</span><span class="params">()</span></span>{</span><br><span class="line">        ScheduleBuilder schedBuilder = CronScheduleBuilder.cronSchedule(<span class="string">"0/5 * * * * ?"</span>);</span><br><span class="line">        <span class="comment">//绑定对应的工作明细</span></span><br><span class="line">        <span class="keyword">return</span> TriggerBuilder.newTrigger().forJob(printJobDetail()).withSchedule(schedBuilder).build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  工作明细中要设置对应的具体工作，使用newJob()操作传入对应的工作任务类型即可。</p><p>​  触发器需要绑定任务，使用forJob()操作传入绑定的工作明细对象。此处可以为工作明细设置名称然后使用名称绑定，也可以直接调用对应方法绑定。触发器中最核心的规则是执行时间，此处使用调度器定义执行时间，执行时间描述方式使用的是cron表达式。有关cron表达式的规则，各位小伙伴可以去参看相关课程学习，略微复杂，而且格式不能乱设置，不是写个格式就能用的，写不好就会出现冲突问题。</p><p><strong>总结</strong></p><ol><li>springboot整合Quartz就是将Quartz对应的核心对象交给spring容器管理，包含两个对象，JobDetail和Trigger对象</li><li>JobDetail对象描述的是工作的执行信息，需要绑定一个QuartzJobBean类型的对象</li><li>Trigger对象定义了一个触发器，需要为其指定绑定的JobDetail是哪个，同时要设置执行周期调度器</li></ol><p><strong>思考</strong></p><p>​  上面的操作看上去不多，但是Quartz将其中的对象划分粒度过细，导致开发的时候有点繁琐，spring针对上述规则进行了简化，开发了自己的任务管理组件——Task，如何用呢？咱们下节再说。</p><h4 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h4><p>​  spring根据定时任务的特征，将定时任务的开发简化到了极致。怎么说呢？要做定时任务总要告诉容器有这功能吧，然后定时执行什么任务直接告诉对应的bean什么时间执行就行了，就这么简单，一起来看怎么做</p><p><strong>步骤①</strong>：开启定时任务功能，在引导类上开启定时任务功能的开关，使用注解@EnableScheduling</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="comment">//开启定时任务功能</span></span><br><span class="line"><span class="meta">@EnableScheduling</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot22TaskApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot22TaskApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：定义Bean，在对应要定时执行的操作上方，使用注解@Scheduled定义执行的时间，执行时间的描述方式还是cron表达式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBean</span> </span>{</span><br><span class="line">    <span class="meta">@Scheduled(cron = "0/1 * * * * ?")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">" :spring task run..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  完事，这就完成了定时任务的配置。总体感觉其实什么东西都没少，只不过没有将所有的信息都抽取成bean，而是直接使用注解绑定定时执行任务的事情而已。</p><p>​  如何想对定时任务进行相关配置，可以通过配置文件进行</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">task:</span></span><br><span class="line">    <span class="attr">scheduling:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">size:</span> <span class="number">1</span>       <span class="comment"># 任务调度线程池大小 默认 1</span></span><br><span class="line">      <span class="attr">thread-name-prefix:</span> <span class="string">ssm_</span>       <span class="comment"># 调度线程名称前缀 默认 scheduling-      </span></span><br><span class="line">        <span class="attr">shutdown:</span></span><br><span class="line">          <span class="attr">await-termination:</span> <span class="literal">false</span>  <span class="comment"># 线程池关闭时等待所有任务完成</span></span><br><span class="line">          <span class="attr">await-termination-period:</span> <span class="string">10s</span> <span class="comment"># 调度线程关闭前最大等待时间，确保最后一定关闭</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li><p>spring task需要使用注解@EnableScheduling开启定时任务功能</p></li><li><p>为定时执行的的任务设置执行周期，描述方式cron表达式</p></li></ol><h3 id="KF-5-3-邮件"><a href="#KF-5-3-邮件" class="headerlink" title="KF-5-3.邮件"></a>KF-5-3.邮件</h3><p>​  springboot整合第三方技术第三部分我们来说说邮件系统，发邮件是java程序的基本操作，springboot整合javamail其实就是简化开发。不熟悉邮件的小伙伴可以先学习完javamail的基础操作，再来看这一部分内容才能感触到springboot整合javamail究竟简化了哪些操作。简化的多码？其实不多，差别不大，只是还个格式而已。</p><p>​  学习邮件发送之前先了解3个概念，这些概念规范了邮件操作过程中的标准。</p><ul><li>SMTP（Simple Mail Transfer Protocol）：简单邮件传输协议，用于<strong>发送</strong>电子邮件的传输协议</li><li>POP3（Post Office Protocol - Version 3）：用于<strong>接收</strong>电子邮件的标准协议</li><li>IMAP（Internet Mail Access Protocol）：互联网消息协议，是POP3的替代协议</li></ul><p>​  简单说就是SMPT是发邮件的标准，POP3是收邮件的标准，IMAP是对POP3的升级。我们制作程序中操作邮件，通常是发邮件，所以SMTP是使用的重点，收邮件大部分都是通过邮件客户端完成，所以开发收邮件的代码极少。除非你要读取邮件内容，然后解析，做邮件功能的统一处理。例如HR的邮箱收到求职者的简历，可以读取后统一处理。但是为什么不制作独立的投递简历的系统呢？所以说，好奇怪的需求，因为要想收邮件就要规范发邮件的人的书写格式，这个未免有点强人所难，并且极易收到外部攻击，你不可能使用白名单来收邮件。如果能使用白名单来收邮件然后解析邮件，还不如开发个系统给白名单中的人专用呢，更安全，总之就是鸡肋了。下面就开始学习springboot如何整合javamail发送邮件。</p><h4 id="发送简单邮件"><a href="#发送简单邮件" class="headerlink" title="发送简单邮件"></a>发送简单邮件</h4><p><strong>步骤①</strong>：导入springboot整合javamail的starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置邮箱的登录信息</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.126.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">test@126.com</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">test</span></span><br></pre></td></tr></tbody></table></figure><p>​  java程序仅用于发送邮件，邮件的功能还是邮件供应商提供的，所以这里是用别人的邮件服务，要配置对应信息。</p><p>​  host配置的是提供邮件服务的主机协议，当前程序仅用于发送邮件，因此配置的是smtp的协议。</p><p>​  password并不是邮箱账号的登录密码，是邮件供应商提供的一个加密后的密码，也是为了保障系统安全性。不然外部人员通过地址访问下载了配置文件，直接获取到了邮件密码就会有极大的安全隐患。有关该密码的获取每个邮件供应商提供的方式都不一样，此处略过。可以到邮件供应商的设置页面找POP3或IMAP这些关键词找到对应的获取位置。下例仅供参考：</p><p><img src="img%5Cimage-20220228111251036.png" alt="image-20220228111251036"></p><p><strong>步骤③</strong>：使用JavaMailSender接口发送邮件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailServiceImpl</span> <span class="keyword">implements</span> <span class="title">SendMailService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> String from = <span class="string">"test@qq.com"</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> String to = <span class="string">"test@126.com"</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String subject = <span class="string">"测试邮件"</span>;</span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    <span class="keyword">private</span> String context = <span class="string">"测试邮件正文内容"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>{</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setFrom(from+<span class="string">"(小甜甜)"</span>);</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(context);</span><br><span class="line">        javaMailSender.send(message);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  将发送邮件的必要信息（发件人、收件人、标题、正文）封装到SimpleMailMessage对象中，可以根据规则设置发送人昵称等。</p><h4 id="发送多组件邮件（附件、复杂正文）"><a href="#发送多组件邮件（附件、复杂正文）" class="headerlink" title="发送多组件邮件（附件、复杂正文）"></a>发送多组件邮件（附件、复杂正文）</h4><p>​  发送简单邮件仅需要提供对应的4个基本信息就可以了，如果想发送复杂的邮件，需要更换邮件对象。使用MimeMessage可以发送特殊的邮件。</p><p><strong>发送网页正文邮件</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailServiceImpl2</span> <span class="keyword">implements</span> <span class="title">SendMailService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> String from = <span class="string">"test@qq.com"</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> String to = <span class="string">"test@126.com"</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String subject = <span class="string">"测试邮件"</span>;</span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    <span class="keyword">private</span> String context = <span class="string">"&lt;img src='ABC.JPG'/&gt;&lt;a href='https://www.itcast.cn'&gt;点开有惊喜&lt;/a&gt;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            MimeMessage message = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message);</span><br><span class="line">            helper.setFrom(to+<span class="string">"(小甜甜)"</span>);</span><br><span class="line">            helper.setTo(from);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(context,<span class="keyword">true</span>);  <span class="comment">//此处设置正文支持html解析</span></span><br><span class="line"></span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>发送带有附件的邮件</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMailServiceImpl2</span> <span class="keyword">implements</span> <span class="title">SendMailService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender javaMailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送人</span></span><br><span class="line">    <span class="keyword">private</span> String from = <span class="string">"test@qq.com"</span>;</span><br><span class="line">    <span class="comment">//接收人</span></span><br><span class="line">    <span class="keyword">private</span> String to = <span class="string">"test@126.com"</span>;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String subject = <span class="string">"测试邮件"</span>;</span><br><span class="line">    <span class="comment">//正文</span></span><br><span class="line">    <span class="keyword">private</span> String context = <span class="string">"测试邮件正文"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            MimeMessage message = javaMailSender.createMimeMessage();</span><br><span class="line">            MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message,<span class="keyword">true</span>);  <span class="comment">//此处设置支持附件</span></span><br><span class="line">            helper.setFrom(to+<span class="string">"(小甜甜)"</span>);</span><br><span class="line">            helper.setTo(from);</span><br><span class="line">            helper.setSubject(subject);</span><br><span class="line">            helper.setText(context);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//添加附件</span></span><br><span class="line">            File f1 = <span class="keyword">new</span> File(<span class="string">"springboot_23_mail-0.0.1-SNAPSHOT.jar"</span>);</span><br><span class="line">            File f2 = <span class="keyword">new</span> File(<span class="string">"resources\\logo.png"</span>);</span><br><span class="line"></span><br><span class="line">            helper.addAttachment(f1.getName(),f1);</span><br><span class="line">            helper.addAttachment(<span class="string">"最靠谱的培训结构.png"</span>,f2);</span><br><span class="line"></span><br><span class="line">            javaMailSender.send(message);</span><br><span class="line">        } <span class="keyword">catch</span> (Exception e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li>springboot整合javamail其实就是简化了发送邮件的客户端对象JavaMailSender的初始化过程，通过配置的形式加载信息简化开发过程</li></ol><h3 id="KF-5-4-消息"><a href="#KF-5-4-消息" class="headerlink" title="KF-5-4.消息"></a>KF-5-4.消息</h3><p>​  springboot整合第三方技术最后一部分我们来说说消息中间件，首先先介绍一下消息的应用。</p><h4 id="消息的概念"><a href="#消息的概念" class="headerlink" title="消息的概念"></a>消息的概念</h4><p>​  从广义角度来说，消息其实就是信息，但是和信息又有所不同。信息通常被定义为一组数据，而消息除了具有数据的特征之外，还有消息的来源与接收的概念。通常发送消息的一方称为消息的生产者，接收消息的一方称为消息的消费者。这样比较后，发现其实消息和信息差别还是很大的。</p><p>​  为什么要设置生产者和消费者呢？这就是要说到消息的意义了。信息通常就是一组数据，但是消息由于有了生产者和消费者，就出现了消息中所包含的信息可以被二次解读，生产者发送消息，可以理解为生产者发送了一个信息，也可以理解为生产者发送了一个命令；消费者接收消息，可以理解为消费者得到了一个信息，也可以理解为消费者得到了一个命令。对比一下我们会发现信息是一个基本数据，而命令则可以关联下一个行为动作，这样就可以理解为基于接收的消息相当于得到了一个行为动作，使用这些行为动作就可以组织成一个业务逻辑，进行进一步的操作。总的来说，消息其实也是一组信息，只是为其赋予了全新的含义，因为有了消息的流动，并且是有方向性的流动，带来了基于流动的行为产生的全新解读。开发者就可以基于消息的这种特殊解，将其换成代码中的指令。</p><p>​  对于消息的理解，初学者总认为消息内部的数据非常复杂，这是一个误区。比如我发送了一个消息，要求接受者翻译发送过去的内容。初学者会认为消息中会包含被翻译的文字，已经本次操作要执行翻译操作而不是打印操作。其实这种现象有点过度解读了，发送的消息中仅仅包含被翻译的文字，但是可以通过控制不同的人接收此消息来确认要做的事情。例如发送被翻译的文字仅到A程序，而A程序只能进行翻译操作，这样就可以发送简单的信息完成复杂的业务了，是通过接收消息的主体不同，进而执行不同的操作，而不会在消息内部定义数据的操作行为，当然如果开发者希望消息中包含操作种类信息也是可以的，只是提出消息的内容可以更简单，更单一。</p><p>​  对于消息的生产者与消费者的工作模式，还可以将消息划分成两种模式，同步消费与异步消息。</p><p>​  所谓同步消息就是生产者发送完消息，等待消费者处理，消费者处理完将结果告知生产者，然后生产者继续向下执行业务。这种模式过于卡生产者的业务执行连续性，在现在的企业级开发中，上述这种业务场景通常不会采用消息的形式进行处理。</p><p>​  所谓异步消息就是生产者发送完消息，无需等待消费者处理完毕，生产者继续向下执行其他动作。比如生产者发送了一个日志信息给日志系统，发送过去以后生产者就向下做其他事情了，无需关注日志系统的执行结果。日志系统根据接收到的日志信息继续进行业务执行，是单纯的记录日志，还是记录日志并报警，这些和生产者无关，这样生产者的业务执行效率就会大幅度提升。并且可以通过添加多个消费者来处理同一个生产者发送的消息来提高系统的高并发性，改善系统工作效率，提高用户体验。一旦某一个消费者由于各种问题宕机了，也不会对业务产生影响，提高了系统的高可用性。</p><p>​  以上简单的介绍了一下消息这种工作模式存在的意义，希望对各位学习者有所帮助。</p><h4 id="Java处理消息的标准规范"><a href="#Java处理消息的标准规范" class="headerlink" title="Java处理消息的标准规范"></a>Java处理消息的标准规范</h4><p>​  目前企业级开发中广泛使用的消息处理技术共三大类，具体如下：</p><ul><li>JMS</li><li>AMQP</li><li>MQTT</li></ul><p>​  为什么是三大类，而不是三个技术呢？因为这些都是规范，就想JDBC技术，是个规范，开发针对规范开发，运行还要靠实现类，例如MySQL提供了JDBC的实现，最终运行靠的还是实现。并且这三类规范都是针对异步消息进行处理的，也符合消息的设计本质，处理异步的业务。对以上三种消息规范做一下普及</p><h5 id="JMS"><a href="#JMS" class="headerlink" title="JMS"></a>JMS</h5><p>​  JMS（Java Message Service）,这是一个规范，作用等同于JDBC规范，提供了与消息服务相关的API接口。</p><p><strong>JMS消息模型</strong></p><p>​  JMS规范中规范了消息有两种模型。分别是<strong>点对点模型</strong>和<strong>发布订阅模型</strong>。</p><p>​  <strong>点对点模型</strong>：peer-2-peer，生产者会将消息发送到一个保存消息的容器中，通常使用队列模型，使用队列保存消息。一个队列的消息只能被一个消费者消费，或未被及时消费导致超时。这种模型下，生产者和消费者是一对一绑定的。</p><p>​  <strong>发布订阅模型</strong>：publish-subscribe，生产者将消息发送到一个保存消息的容器中，也是使用队列模型来保存。但是消息可以被多个消费者消费，生产者和消费者完全独立，相互不需要感知对方的存在。</p><p>​  以上这种分类是从消息的生产和消费过程来进行区分，针对消息所包含的信息不同，还可以进行不同类别的划分。</p><p><strong>JMS消息种类</strong></p><p>​  根据消息中包含的数据种类划分，可以将消息划分成6种消息。</p><ul><li>TextMessage</li><li>MapMessage</li><li>BytesMessage</li><li>StreamMessage</li><li>ObjectMessage</li><li>Message （只有消息头和属性）</li></ul><p>​  JMS主张不同种类的消息，消费方式不同，可以根据使用需要选择不同种类的消息。但是这一点也成为其诟病之处，后面再说。整体上来说，JMS就是典型的保守派，什么都按照J2EE的规范来，做一套规范，定义若干个标准，每个标准下又提供一大批API。目前对JMS规范实现的消息中间件技术还是挺多的，毕竟是皇家御用，肯定有人舔，例如ActiveMQ、Redis、HornetMQ。但是也有一些不太规范的实现，参考JMS的标准设计，但是又不完全满足其规范，例如：RabbitMQ、RocketMQ。</p><h5 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h5><p>​  JMS的问世为消息中间件提供了很强大的规范性支撑，但是使用的过程中就开始被人诟病，比如JMS设置的极其复杂的多种类消息处理机制。本来分门别类处理挺好的，为什么会被诟病呢？原因就在于JMS的设计是J2EE规范，站在Java开发的角度思考问题。但是现实往往是复杂度很高的。比如我有一个.NET开发的系统A，有一个Java开发的系统B，现在要从A系统给B系统发业务消息，结果两边数据格式不统一，没法操作。JMS不是可以统一数据格式吗？提供了6种数据种类，总有一款适合你啊。NO，一个都不能用。因为A系统的底层语言不是Java语言开发的，根本不支持那些对象。这就意味着如果想使用现有的业务系统A继续开发已经不可能了，必须推翻重新做使用Java语言开发的A系统。</p><p>​  这时候有人就提出说，你搞那么复杂，整那么多种类干什么？找一种大家都支持的消息数据类型不就解决这个跨平台的问题了吗？大家一想，对啊，于是AMQP孕育而生。</p><p>​  单从上面的说明中其实可以明确感知到，AMQP的出现解决的是消息传递时使用的消息种类的问题，化繁为简，但是其并没有完全推翻JMS的操作API，所以说AMQP仅仅是一种协议，规范了数据传输的格式而已。</p><p>​  AMQP（advanced message queuing protocol）：一种协议（高级消息队列协议，也是消息代理规范），规范了网络交换的数据格式，兼容JMS操作。<br><strong>优点</strong></p><p>​  具有跨平台性，服务器供应商，生产者，消费者可以使用不同的语言来实现</p><p><strong>JMS消息种类</strong></p><p>​  AMQP消息种类：byte[]</p><p>​  AMQP在JMS的消息模型基础上又进行了进一步的扩展，除了点对点和发布订阅的模型，开发了几种全新的消息模型，适应各种各样的消息发送。</p><p><strong>AMQP消息模型</strong></p><ul><li>direct exchange</li><li>fanout exchange</li><li>topic exchange</li><li>headers exchange</li><li>system exchange</li></ul><p>​  目前实现了AMQP协议的消息中间件技术也很多，而且都是较为流行的技术，例如：RabbitMQ、StormMQ、RocketMQ</p><h5 id="MQTT"><a href="#MQTT" class="headerlink" title="MQTT"></a>MQTT</h5><p>​  MQTT（Message Queueing Telemetry Transport）消息队列遥测传输，专为小设备设计，是物联网（IOT）生态系统中主要成分之一。由于与JavaEE企业级开发没有交集，此处不作过多的说明。</p><p>​  除了上述3种J2EE企业级应用中广泛使用的三种异步消息传递技术，还有一种技术也不能忽略，Kafka。</p><h5 id="KafKa"><a href="#KafKa" class="headerlink" title="KafKa"></a>KafKa</h5><p>​  Kafka，一种高吞吐量的分布式发布订阅消息系统，提供实时消息功能。Kafka技术并不是作为消息中间件为主要功能的产品，但是其拥有发布订阅的工作模式，也可以充当消息中间件来使用，而且目前企业级开发中其身影也不少见。</p><p>​  本节内容讲围绕着上述内容中的几种实现方案讲解springboot整合各种各样的消息中间件。由于各种消息中间件必须先安装再使用，下面的内容采用Windows系统安装，降低各位学习者的学习难度，基本套路和之前学习NoSQL解决方案一样，先安装再整合。</p><h4 id="购物订单发送手机短信案例"><a href="#购物订单发送手机短信案例" class="headerlink" title="购物订单发送手机短信案例"></a>购物订单发送手机短信案例</h4><p>​  为了便于下面演示各种各样的消息中间件技术，我们创建一个购物过程生成订单时为用户发送短信的案例环境，模拟使用消息中间件实现发送手机短信的过程。</p><p>​  手机验证码案例需求如下：</p><ul><li><p>执行下单业务时（模拟此过程），调用消息服务，将要发送短信的订单id传递给消息中间件</p></li><li><p>消息处理服务接收到要发送的订单id后输出订单id（模拟发短信）</p><p>由于不涉及数据读写，仅开发业务层与表现层，其中短信处理的业务代码独立开发，代码如下：</p></li></ul><p><strong>订单业务</strong></p><p>​  <strong>业务层接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OrderService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">order</span><span class="params">(String id)</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  模拟传入订单id，执行下订单业务，参数为虚拟设定，实际应为订单对应的实体类</p><p>​  <strong>业务层实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        <span class="comment">//一系列操作，包含各种服务调用，处理各种业务</span></span><br><span class="line">        System.out.println(<span class="string">"订单处理开始"</span>);</span><br><span class="line">        <span class="comment">//短信消息处理</span></span><br><span class="line">        messageService.sendMessage(id);</span><br><span class="line">        System.out.println(<span class="string">"订单处理结束"</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  业务层转调短信处理的服务MessageService</p><p>​  <strong>表现层服务</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/orders")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderService orderService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping("{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">order</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span></span>{</span><br><span class="line">        orderService.order(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  表现层对外开发接口，传入订单id即可（模拟）</p><p><strong>短信处理业务</strong></p><p>​  <strong>业务层接口</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">doMessage</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  短信处理业务层接口提供两个操作，发送要处理的订单id到消息中间件，另一个操作目前暂且设计成处理消息，实际消息的处理过程不应该是手动执行，应该是自动执行，到具体实现时再进行设计</p><p>​  <strong>业务层实现</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;String&gt; msgList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"待发送短信的订单已纳入处理队列，id："</span>+id);</span><br><span class="line">        msgList.add(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doMessage</span><span class="params">()</span> </span>{</span><br><span class="line">        String id = msgList.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务，id："</span>+id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  短信处理业务层实现中使用集合先模拟消息队列，观察效果</p><p>​  <strong>表现层服务</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/msgs")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageService messageService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doMessage</span><span class="params">()</span></span>{</span><br><span class="line">        String id = messageService.doMessage();</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  短信处理表现层接口暂且开发出一个处理消息的入口，但是此业务是对应业务层中设计的模拟接口，实际业务不需要设计此接口。</p><p>​  下面开启springboot整合各种各样的消息中间件，从严格满足JMS规范的ActiveMQ开始</p><h4 id="SpringBoot整合ActiveMQ"><a href="#SpringBoot整合ActiveMQ" class="headerlink" title="SpringBoot整合ActiveMQ"></a>SpringBoot整合ActiveMQ</h4><p>​  ActiveMQ是MQ产品中的元老级产品，早期标准MQ产品之一，在AMQP协议没有出现之前，占据了消息中间件市场的绝大部分份额，后期因为AMQP系列产品的出现，迅速走弱，目前仅在一些线上运行的产品中出现，新产品开发较少采用。</p><h5 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://activemq.apache.org/components/classic/download/">https://activemq.apache.org/components/classic/download</a><a href="https://activemq.apache.org/components/classic/download/">/</a></p><p>​  下载的安装包是解压缩就能使用的zip文件，解压缩完毕后会得到如下文件</p><p><img src="img%5Cimage-20220228160001620.png" alt="image-20220228160001620"></p><p><strong>启动服务器</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activemq.bat</span><br></pre></td></tr></tbody></table></figure><p>​  运行bin目录下的win32或win64目录下的activemq.bat命令即可，根据自己的操作系统选择即可，默认对外服务端口61616。</p><p><strong>访问web管理服务</strong></p><p>​  ActiveMQ启动后会启动一个Web控制台服务，可以通过该服务管理ActiveMQ。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">http://127.0.0.1:8161/</span></span><br></pre></td></tr></tbody></table></figure><p>​  web管理服务默认端口8161，访问后可以打开ActiveMQ的管理界面，如下：</p><img src="img\image-20220228160844972.png" alt="image-20220228160844972" style="zoom:67%;"><p>​  首先输入访问用户名和密码，初始化用户名和密码相同，均为：admin，成功登录后进入管理后台界面，如下：</p><p><img src="img%5Cimage-20220228161010401.png" alt="image-20220228161010401"></p><p>​  看到上述界面视为启动ActiveMQ服务成功。</p><p><strong>启动失败</strong></p><p>​  在ActiveMQ启动时要占用多个端口，以下为正常启动信息：</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">wrapper  | --&gt; Wrapper Started as Console</span><br><span class="line">wrapper  | Launching a JVM...</span><br><span class="line">jvm <span class="number">1</span>    | Wrapper (Version <span class="number">3</span>.<span class="number">2</span>.<span class="number">3</span>) http://wrapper.tanukisoftware.org</span><br><span class="line">jvm <span class="number">1</span>    |   Copyright <span class="number">1999</span>-<span class="number">2006</span> Tanuki Software, Inc.  All Rights Reserved.</span><br><span class="line">jvm <span class="number">1</span>    |</span><br><span class="line">jvm <span class="number">1</span>    | Java Runtime: Oracle Corporation <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_172 D:\soft\jdk1.<span class="number">8</span>.<span class="number">0</span>_172\jre</span><br><span class="line">jvm <span class="number">1</span>    |   Heap sizes: current=<span class="number">249344</span>k  free=<span class="number">235037</span>k  max=<span class="number">932352</span>k</span><br><span class="line">jvm <span class="number">1</span>    |     JVM args: -Dactivemq.home=../.. -Dactivemq.base=../.. -Djavax.<span class="built_in">net</span>.ssl.keyStorePassword=password -Djavax.<span class="built_in">net</span>.ssl.trustStorePassword=password -Djavax.<span class="built_in">net</span>.ssl.keyStore=../../conf/broker.ks -Djavax.<span class="built_in">net</span>.ssl.trustStore=../../conf/broker.ts -Dcom.sun.management.jmxremote -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.conf=../../conf -Dactivemq.data=../../data -Djava.security.auth.login.config=../../conf/login.config -Xmx1024m -Djava.library.<span class="built_in">path</span>=../../bin/win64 -Dwrapper.key=<span class="number">7</span>ySrCD75XhLCpLjd -Dwrapper.port=<span class="number">32000</span> -Dwrapper.jvm.port.min=<span class="number">31000</span> -Dwrapper.jvm.port.max=<span class="number">31999</span> -Dwrapper.pid=<span class="number">9364</span> -Dwrapper.version=<span class="number">3</span>.<span class="number">2</span>.<span class="number">3</span> -Dwrapper.native_library=wrapper -Dwrapper.cpu.timeout=<span class="number">10</span> -Dwrapper.jvmid=<span class="number">1</span></span><br><span class="line">jvm <span class="number">1</span>    | Extensions classpath:</span><br><span class="line">jvm <span class="number">1</span>    |   [..\..\lib,..\..\lib\camel,..\..\lib\optional,..\..\lib\web,..\..\lib\extra]</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_HOME: ..\..</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_BASE: ..\..</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_CONF: ..\..\conf</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_DATA: ..\..\data</span><br><span class="line">jvm <span class="number">1</span>    | Loading message broker from: xbean:activemq.xml</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory$<span class="number">1</span>@<span class="number">5</span>f3ebfe0: startup <span class="built_in">date</span> [Mon Feb <span class="number">28</span> <span class="number">16</span>:<span class="number">07</span>:<span class="number">48</span> CST <span class="number">2022</span>]; root of context hierarchy</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Using Persistence Adapter: KahaDBPersistenceAdapter[D:\soft\activemq\bin\win64\..\..\data\kahadb]</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | KahaDB is version <span class="number">7</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | PListStore:[D:\soft\activemq\bin\win64\..\..\data\localhost\tmp_storage] started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Apache ActiveMQ <span class="number">5</span>.<span class="number">16</span>.<span class="number">3</span> (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10434</span>-<span class="number">1646035669595</span>-<span class="number">0</span>:<span class="number">1</span>) is starting</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Listening <span class="keyword">for</span> connections <span class="built_in">at</span>: tcp://CZBK-<span class="number">20210302</span>VL:<span class="number">61616</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector openwire started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Listening <span class="keyword">for</span> connections <span class="built_in">at</span>: amqp://CZBK-<span class="number">20210302</span>VL:<span class="number">5672</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector amqp started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Listening <span class="keyword">for</span> connections <span class="built_in">at</span>: stomp://CZBK-<span class="number">20210302</span>VL:<span class="number">61613</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector stomp started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Listening <span class="keyword">for</span> connections <span class="built_in">at</span>: mqtt://CZBK-<span class="number">20210302</span>VL:<span class="number">1883</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector mqtt started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Starting Jetty server</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Creating Jetty connector</span><br><span class="line">jvm <span class="number">1</span>    |  WARN | ServletContext@o.e.j.s.ServletContextHandler@<span class="number">7350746</span>f{/,null,STARTING} has uncovered http methods <span class="keyword">for</span> <span class="built_in">path</span>: /</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Listening <span class="keyword">for</span> connections <span class="built_in">at</span> ws://CZBK-<span class="number">20210302</span>VL:<span class="number">61614</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector ws started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Apache ActiveMQ <span class="number">5</span>.<span class="number">16</span>.<span class="number">3</span> (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10434</span>-<span class="number">1646035669595</span>-<span class="number">0</span>:<span class="number">1</span>) started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | <span class="keyword">For</span> <span class="built_in">help</span> or <span class="built_in">more</span> information please see: http://activemq.apache.org</span><br><span class="line">jvm <span class="number">1</span>    |  WARN | Store limit is <span class="number">102400</span> mb (current store usage is <span class="number">0</span> mb). The data directory: D:\soft\activemq\bin\win64\..\..\data\kahadb only has <span class="number">68936</span> mb of usable space. - resetting to maximum available disk space: <span class="number">68936</span> mb</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | ActiveMQ WebConsole available <span class="built_in">at</span> http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8161</span>/</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | ActiveMQ Jolokia REST API available <span class="built_in">at</span> http://<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">8161</span>/api/jolokia/</span><br></pre></td></tr></tbody></table></figure><p>​  其中占用的端口有：61616、5672、61613、1883、61614，如果启动失败，请先管理对应端口即可。以下就是某个端口占用的报错信息，可以从抛出异常的位置看出，启动5672端口时端口被占用，显示java.net.BindException: Address already in use: JVM_Bind。Windows系统中终止端口运行的操作参看<a href="#%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%90%AF%E5%8A%A8%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">【命令行启动常见问题及解决方案】</a></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">wrapper  | --&gt; Wrapper Started as Console</span><br><span class="line">wrapper  | Launching a JVM...</span><br><span class="line">jvm <span class="number">1</span>    | Wrapper (Version <span class="number">3</span>.<span class="number">2</span>.<span class="number">3</span>) http://wrapper.tanukisoftware.org</span><br><span class="line">jvm <span class="number">1</span>    |   Copyright <span class="number">1999</span>-<span class="number">2006</span> Tanuki Software, Inc.  All Rights Reserved.</span><br><span class="line">jvm <span class="number">1</span>    |</span><br><span class="line">jvm <span class="number">1</span>    | Java Runtime: Oracle Corporation <span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_172 D:\soft\jdk1.<span class="number">8</span>.<span class="number">0</span>_172\jre</span><br><span class="line">jvm <span class="number">1</span>    |   Heap sizes: current=<span class="number">249344</span>k  free=<span class="number">235038</span>k  max=<span class="number">932352</span>k</span><br><span class="line">jvm <span class="number">1</span>    |     JVM args: -Dactivemq.home=../.. -Dactivemq.base=../.. -Djavax.<span class="built_in">net</span>.ssl.keyStorePassword=password -Djavax.<span class="built_in">net</span>.ssl.trustStorePassword=password -Djavax.<span class="built_in">net</span>.ssl.keyStore=../../conf/broker.ks -Djavax.<span class="built_in">net</span>.ssl.trustStore=../../conf/broker.ts -Dcom.sun.management.jmxremote -Dorg.apache.activemq.UseDedicatedTaskRunner=true -Djava.util.logging.config.file=logging.properties -Dactivemq.conf=../../conf -Dactivemq.data=../../data -Djava.security.auth.login.config=../../conf/login.config -Xmx1024m -Djava.library.<span class="built_in">path</span>=../../bin/win64 -Dwrapper.key=QPJoy9ZoXeWmmwTS -Dwrapper.port=<span class="number">32000</span> -Dwrapper.jvm.port.min=<span class="number">31000</span> -Dwrapper.jvm.port.max=<span class="number">31999</span> -Dwrapper.pid=<span class="number">14836</span> -Dwrapper.version=<span class="number">3</span>.<span class="number">2</span>.<span class="number">3</span> -Dwrapper.native_library=wrapper -Dwrapper.cpu.timeout=<span class="number">10</span> -Dwrapper.jvmid=<span class="number">1</span></span><br><span class="line">jvm <span class="number">1</span>    | Extensions classpath:</span><br><span class="line">jvm <span class="number">1</span>    |   [..\..\lib,..\..\lib\camel,..\..\lib\optional,..\..\lib\web,..\..\lib\extra]</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_HOME: ..\..</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_BASE: ..\..</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_CONF: ..\..\conf</span><br><span class="line">jvm <span class="number">1</span>    | ACTIVEMQ_DATA: ..\..\data</span><br><span class="line">jvm <span class="number">1</span>    | Loading message broker from: xbean:activemq.xml</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Refreshing org.apache.activemq.xbean.XBeanBrokerFactory$<span class="number">1</span>@<span class="number">2</span>c9392f5: startup <span class="built_in">date</span> [Mon Feb <span class="number">28</span> <span class="number">16</span>:<span class="number">06</span>:<span class="number">16</span> CST <span class="number">2022</span>]; root of context hierarchy</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Using Persistence Adapter: KahaDBPersistenceAdapter[D:\soft\activemq\bin\win64\..\..\data\kahadb]</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | KahaDB is version <span class="number">7</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | PListStore:[D:\soft\activemq\bin\win64\..\..\data\localhost\tmp_storage] started</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Apache ActiveMQ <span class="number">5</span>.<span class="number">16</span>.<span class="number">3</span> (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10257</span>-<span class="number">1646035577620</span>-<span class="number">0</span>:<span class="number">1</span>) is starting</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Listening <span class="keyword">for</span> connections <span class="built_in">at</span>: tcp://CZBK-<span class="number">20210302</span>VL:<span class="number">61616</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector openwire started</span><br><span class="line">jvm <span class="number">1</span>    | ERROR | Failed to <span class="built_in">start</span> Apache ActiveMQ (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10257</span>-<span class="number">1646035577620</span>-<span class="number">0</span>:<span class="number">1</span>)</span><br><span class="line">jvm <span class="number">1</span>    | java.io.IOException: Transport Connector could <span class="keyword">not</span> be registered <span class="keyword">in</span> JMX: java.io.IOException: Failed to bind to server socket: amqp://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">5672</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span> due to: java.<span class="built_in">net</span>.BindException: Address already <span class="keyword">in</span> use: JVM_Bind</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:<span class="number">28</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:<span class="number">2288</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.startTransportConnector(BrokerService.java:<span class="number">2769</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.startAllConnectors(BrokerService.java:<span class="number">2665</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.doStartBroker(BrokerService.java:<span class="number">780</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.startBroker(BrokerService.java:<span class="number">742</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.<span class="built_in">start</span>(BrokerService.java:<span class="number">645</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerService.afterPropertiesSet(XBeanBrokerService.java:<span class="number">73</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeCustomInitMethod(AbstractAutowireCapableBeanFactory.java:<span class="number">1748</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:<span class="number">1685</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:<span class="number">1615</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:<span class="number">553</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:<span class="number">481</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractBeanFactory$<span class="number">1</span>.getObject(AbstractBeanFactory.java:<span class="number">312</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:<span class="number">230</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:<span class="number">308</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:<span class="number">197</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:<span class="number">756</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:<span class="number">867</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">542</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:<span class="number">64</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:<span class="number">52</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory$<span class="number">1</span>.&lt;init&gt;(XBeanBrokerFactory.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:<span class="number">67</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:<span class="number">71</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:<span class="number">54</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:<span class="number">87</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:<span class="number">63</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:<span class="number">154</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:<span class="number">63</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.Main.runTaskClass(Main.java:<span class="number">262</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.Main.main(Main.java:<span class="number">115</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:<span class="number">240</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">jvm <span class="number">1</span>    | Caused by: java.io.IOException: Failed to bind to server socket: amqp://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">5672</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span> due to: java.<span class="built_in">net</span>.BindException: Address already <span class="keyword">in</span> use: JVM_Bind</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.util.IOExceptionSupport.create(IOExceptionSupport.java:<span class="number">34</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:<span class="number">146</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.transport.tcp.TcpTransportFactory.doBind(TcpTransportFactory.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.transport.TransportFactorySupport.bind(TransportFactorySupport.java:<span class="number">40</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.TransportConnector.createTransportServer(TransportConnector.java:<span class="number">335</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.TransportConnector.getServer(TransportConnector.java:<span class="number">145</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.TransportConnector.asManagedConnector(TransportConnector.java:<span class="number">110</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerService.registerConnectorMBean(BrokerService.java:<span class="number">2283</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      ... <span class="number">46</span> <span class="built_in">more</span></span><br><span class="line">jvm <span class="number">1</span>    | Caused by: java.<span class="built_in">net</span>.BindException: Address already <span class="keyword">in</span> use: JVM_Bind</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.<span class="built_in">net</span>.DualStackPlainSocketImpl.bind0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.<span class="built_in">net</span>.DualStackPlainSocketImpl.socketBind(DualStackPlainSocketImpl.java:<span class="number">106</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.<span class="built_in">net</span>.AbstractPlainSocketImpl.bind(AbstractPlainSocketImpl.java:<span class="number">387</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.<span class="built_in">net</span>.PlainSocketImpl.bind(PlainSocketImpl.java:<span class="number">190</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.<span class="built_in">net</span>.ServerSocket.bind(ServerSocket.java:<span class="number">375</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.<span class="built_in">net</span>.ServerSocket.&lt;init&gt;(ServerSocket.java:<span class="number">237</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> javax.<span class="built_in">net</span>.DefaultServerSocketFactory.createServerSocket(ServerSocketFactory.java:<span class="number">231</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.transport.tcp.TcpTransportServer.bind(TcpTransportServer.java:<span class="number">143</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      ... <span class="number">52</span> <span class="built_in">more</span></span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Apache ActiveMQ <span class="number">5</span>.<span class="number">16</span>.<span class="number">3</span> (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10257</span>-<span class="number">1646035577620</span>-<span class="number">0</span>:<span class="number">1</span>) is shutting down</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | socketQueue interrupted - stopping</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector openwire stopped</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Could <span class="keyword">not</span> accept connection during shutdown  : null (null)</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector amqp stopped</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector stomp stopped</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector mqtt stopped</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Connector ws stopped</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | PListStore:[D:\soft\activemq\bin\win64\..\..\data\localhost\tmp_storage] stopped</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Stopping async queue tasks</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Stopping async topic tasks</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Stopped KahaDB</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Apache ActiveMQ <span class="number">5</span>.<span class="number">16</span>.<span class="number">3</span> (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10257</span>-<span class="number">1646035577620</span>-<span class="number">0</span>:<span class="number">1</span>) uptime <span class="number">0</span>.<span class="number">426</span> seconds</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Apache ActiveMQ <span class="number">5</span>.<span class="number">16</span>.<span class="number">3</span> (localhost, ID:CZBK-<span class="number">20210302</span>VL-<span class="number">10257</span>-<span class="number">1646035577620</span>-<span class="number">0</span>:<span class="number">1</span>) is shutdown</span><br><span class="line">jvm <span class="number">1</span>    |  INFO | Closing org.apache.activemq.xbean.XBeanBrokerFactory$<span class="number">1</span>@<span class="number">2</span>c9392f5: startup <span class="built_in">date</span> [Mon Feb <span class="number">28</span> <span class="number">16</span>:<span class="number">06</span>:<span class="number">16</span> CST <span class="number">2022</span>]; root of context hierarchy</span><br><span class="line">jvm <span class="number">1</span>    |  WARN | Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'org.apache.activemq.xbean.XBeanBrokerService#<span class="number">0</span>' <span class="keyword">defined</span> <span class="keyword">in</span> class <span class="built_in">path</span> resource [activemq.xml]: Invocation of init method failed; nested exception is java.io.IOException: Transport Connector could <span class="keyword">not</span> be registered <span class="keyword">in</span> JMX: java.io.IOException: Failed to bind to server socket: amqp://<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>:<span class="number">5672</span>?maximumConnections=<span class="number">1000</span>&amp;wireFormat.maxFrameSize=<span class="number">104857600</span> due to: java.<span class="built_in">net</span>.BindException: Address already <span class="keyword">in</span> use: JVM_Bind</span><br><span class="line">jvm <span class="number">1</span>    | ERROR: java.lang.RuntimeException: Failed to execute <span class="built_in">start</span> task. Reason: java.lang.IllegalStateException: BeanFactory <span class="keyword">not</span> initialized or already closed - <span class="keyword">call</span> 'refresh' before accessing beans via the ApplicationContext</span><br><span class="line">jvm <span class="number">1</span>    | java.lang.RuntimeException: Failed to execute <span class="built_in">start</span> task. Reason: java.lang.IllegalStateException: BeanFactory <span class="keyword">not</span> initialized or already closed - <span class="keyword">call</span> 'refresh' before accessing beans via the ApplicationContext</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:<span class="number">91</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:<span class="number">63</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:<span class="number">154</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:<span class="number">63</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.Main.runTaskClass(Main.java:<span class="number">262</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.Main.main(Main.java:<span class="number">115</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:<span class="number">240</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">jvm <span class="number">1</span>    | Caused by: java.lang.IllegalStateException: BeanFactory <span class="keyword">not</span> initialized or already closed - <span class="keyword">call</span> 'refresh' before accessing beans via the ApplicationContext</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:<span class="number">164</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:<span class="number">1034</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">555</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:<span class="number">64</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:<span class="number">52</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory$<span class="number">1</span>.&lt;init&gt;(XBeanBrokerFactory.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:<span class="number">67</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:<span class="number">71</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:<span class="number">54</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:<span class="number">87</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      ... <span class="number">16</span> <span class="built_in">more</span></span><br><span class="line">jvm <span class="number">1</span>    | ERROR: java.lang.IllegalStateException: BeanFactory <span class="keyword">not</span> initialized or already closed - <span class="keyword">call</span> 'refresh' before accessing beans via the ApplicationContext</span><br><span class="line">jvm <span class="number">1</span>    | java.lang.IllegalStateException: BeanFactory <span class="keyword">not</span> initialized or already closed - <span class="keyword">call</span> 'refresh' before accessing beans via the ApplicationContext</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractRefreshableApplicationContext.getBeanFactory(AbstractRefreshableApplicationContext.java:<span class="number">164</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:<span class="number">1034</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:<span class="number">555</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:<span class="number">64</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.xbean.spring.context.ResourceXmlApplicationContext.&lt;init&gt;(ResourceXmlApplicationContext.java:<span class="number">52</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory$<span class="number">1</span>.&lt;init&gt;(XBeanBrokerFactory.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory.createApplicationContext(XBeanBrokerFactory.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.xbean.XBeanBrokerFactory.createBroker(XBeanBrokerFactory.java:<span class="number">67</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:<span class="number">71</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.broker.BrokerFactory.createBroker(BrokerFactory.java:<span class="number">54</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.StartCommand.runTask(StartCommand.java:<span class="number">87</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:<span class="number">63</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.ShellCommand.runTask(ShellCommand.java:<span class="number">154</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.AbstractCommand.execute(AbstractCommand.java:<span class="number">63</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.command.ShellCommand.main(ShellCommand.java:<span class="number">104</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.Main.runTaskClass(Main.java:<span class="number">262</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.apache.activemq.console.Main.main(Main.java:<span class="number">115</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> org.tanukisoftware.wrapper.WrapperSimpleApp.run(WrapperSimpleApp.java:<span class="number">240</span>)</span><br><span class="line">jvm <span class="number">1</span>    |      <span class="built_in">at</span> java.lang.Thread.run(Thread.java:<span class="number">748</span>)</span><br><span class="line">wrapper  | &lt;-- Wrapper Stopped</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></tbody></table></figure><h5 id="整合-3"><a href="#整合-3" class="headerlink" title="整合"></a>整合</h5><p>​  做了这么多springboot整合第三方技术，已经摸到门路了，加坐标，做配置，调接口，直接开工</p><p><strong>步骤①</strong>：导入springboot整合ActiveMQ的starter</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-activemq<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置ActiveMQ的服务器地址</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：使用JmsMessagingTemplate操作ActiveMQ</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceActivemqImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JmsMessagingTemplate messagingTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"待发送短信的订单已纳入处理队列，id："</span>+id);</span><br><span class="line">        messagingTemplate.convertAndSend(<span class="string">"order.queue.id"</span>,id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">doMessage</span><span class="params">()</span> </span>{</span><br><span class="line">        String id = messagingTemplate.receiveAndConvert(<span class="string">"order.queue.id"</span>,String.class);</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务，id："</span>+id);</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  发送消息需要先将消息的类型转换成字符串，然后再发送，所以是convertAndSend，定义消息发送的位置，和具体的消息内容，此处使用id作为消息内容。</p><p>​  接收消息需要先将消息接收到，然后再转换成指定的数据类型，所以是receiveAndConvert，接收消息除了提供读取的位置，还要给出转换后的数据的具体类型。</p><p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>{</span><br><span class="line">    <span class="meta">@JmsListener(destination = "order.queue.id")</span></span><br><span class="line">    <span class="meta">@SendTo("order.other.queue.id")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">receive</span><span class="params">(String id)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务，id："</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"new:"</span>+id;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用注解@JmsListener定义当前方法监听ActiveMQ中指定名称的消息队列。</p><p>​  如果当前消息队列处理完还需要继续向下传递当前消息到另一个队列中使用注解@SendTo即可，这样即可构造连续执行的顺序消息队列。</p><p><strong>步骤⑤</strong>：切换消息模型由点对点模型到发布订阅模型，修改jms配置即可</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">activemq:</span></span><br><span class="line">    <span class="attr">broker-url:</span> <span class="string">tcp://localhost:61616</span></span><br><span class="line">  <span class="attr">jms:</span></span><br><span class="line">    <span class="attr">pub-sub-domain:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>​  pub-sub-domain默认值为false，即点对点模型，修改为true后就是发布订阅模型。</p><p><strong>总结</strong></p><ol><li>springboot整合ActiveMQ提供了JmsMessagingTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口61616</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@JmsListener</li><li>配置jms的pub-sub-domain属性可以在点对点模型和发布订阅模型间切换消息模型</li></ol><h4 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h4><p>​  RabbitMQ是MQ产品中的目前较为流行的产品之一，它遵从AMQP协议。RabbitMQ的底层实现语言使用的是Erlang，所以安装RabbitMQ需要先安装Erlang。</p><p><strong>Erlang安装</strong></p><p>​  windows版安装包下载地址：<a href="https://www.erlang.org/downloads">https</a><a href="https://www.erlang.org/downloads">://www.erlang.org/downloads</a></p><p>​  下载完毕后得到exe安装文件，一键傻瓜式安装，安装完毕需要重启，需要重启，需要重启。</p><p>​  安装的过程中可能会出现依赖Windows组件的提示，根据提示下载安装即可，都是自动执行的，如下：</p><p><img src="img%5Cimage-20220228164851551.png" alt="image-20220228164851551"></p><p>​  Erlang安装后需要配置环境变量，否则RabbitMQ将无法找到安装的Erlang。需要配置项如下，作用等同JDK配置环境变量的作用。</p><ul><li>ERLANG_HOME</li><li>PATH</li></ul><h5 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://rabbitmq.com/install-windows.html">https://</a><a href="https://rabbitmq.com/install-windows.html">rabbitmq.com/install-windows.html</a></p><p>​  下载完毕后得到exe安装文件，一键傻瓜式安装，安装完毕后会得到如下文件</p><img src="img\image-20220228165151524.png" alt="image-20220228165151524" style="zoom:67%;"><p><strong>启动服务器</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-service.bat <span class="built_in">start</span>  # 启动服务</span><br><span class="line">rabbitmq-service.bat stop  # 停止服务</span><br><span class="line">rabbitmqctl status    # 查看服务状态</span><br></pre></td></tr></tbody></table></figure><p>​  运行sbin目录下的rabbitmq-service.bat命令即可，start参数表示启动，stop参数表示退出，默认对外服务端口5672。</p><p>​  注意：启动rabbitmq的过程实际上是开启rabbitmq对应的系统服务，需要管理员权限方可执行。</p><p>​  说明：有没有感觉5672的服务端口很熟悉？activemq与rabbitmq有一个端口冲突问题，学习阶段无论操作哪一个？请确保另一个处于关闭状态。</p><p>​  说明：不喜欢命令行的小伙伴可以使用任务管理器中的服务页，找到RabbitMQ服务，使用鼠标右键菜单控制服务的启停。</p><img src="img\image-20220228170147193.png" alt="image-20220228170147193" style="zoom:67%;"><p><strong>访问web管理服务</strong></p><p>​  RabbitMQ也提供有web控制台服务，但是此功能是一个插件，需要先启用才可以使用。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq-plugins.bat list       # 查看当前所有插件的运行状态</span><br><span class="line">rabbitmq-plugins.bat enable rabbitmq_management  # 启动rabbitmq_management插件</span><br></pre></td></tr></tbody></table></figure><p>​  启动插件后可以在插件运行状态中查看是否运行，运行后通过浏览器即可打开服务后台管理界面</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">http://<span class="title">localhost</span>:15672</span></span><br></pre></td></tr></tbody></table></figure><p>​  web管理服务默认端口15672，访问后可以打开RabbitMQ的管理界面，如下：</p><p><img src="img%5Cimage-20220228170504793.png" alt="image-20220228170504793"></p><p>​  首先输入访问用户名和密码，初始化用户名和密码相同，均为：guest，成功登录后进入管理后台界面，如下：</p><p><img src="img%5Cimage-20220228170535261.png" alt="image-20220228170535261"></p><h5 id="整合-direct模型"><a href="#整合-direct模型" class="headerlink" title="整合(direct模型)"></a>整合(direct模型)</h5><p>​  RabbitMQ满足AMQP协议，因此不同的消息模型对应的制作不同，先使用最简单的direct模型开发。</p><p><strong>步骤①</strong>：导入springboot整合amqp的starter，amqp协议默认实现为rabbitmq方案</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置RabbitMQ的服务器地址</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5672</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤③</strong>：初始化直连模式系统设置</p><p>​  由于RabbitMQ不同模型要使用不同的交换机，因此需要先初始化RabbitMQ相关的对象，例如队列，交换机等</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfigDirect</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"direct_queue"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">directQueue2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"direct_queue2"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DirectExchange <span class="title">directExchange</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DirectExchange(<span class="string">"directExchange"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue()).to(directExchange()).with(<span class="string">"direct"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDirect2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(directQueue2()).to(directExchange()).with(<span class="string">"direct2"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  队列Queue与直连交换机DirectExchange创建后，还需要绑定他们之间的关系Binding，这样就可以通过交换机操作对应队列。</p><p><strong>步骤④</strong>：使用AmqpTemplate操作RabbitMQ</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceRabbitmqDirectImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"待发送短信的订单已纳入处理队列（rabbitmq direct），id："</span>+id);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"directExchange"</span>,<span class="string">"direct"</span>,id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  amqp协议中的操作API接口名称看上去和jms规范的操作API接口很相似，但是传递参数差异很大。</p><p><strong>步骤⑤</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>{</span><br><span class="line">    <span class="meta">@RabbitListener(queues = "direct_queue")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String id)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务(rabbitmq direct)，id："</span>+id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用注解@RabbitListener定义当前方法监听RabbitMQ中指定名称的消息队列。</p><h5 id="整合-topic模型"><a href="#整合-topic模型" class="headerlink" title="整合(topic模型)"></a>整合(topic模型)</h5><p><strong>步骤①</strong>：同上</p><p><strong>步骤②</strong>：同上</p><p><strong>步骤③</strong>：初始化主题模式系统设置</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfigTopic</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"topic_queue"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">topicQueue2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"topic_queue2"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TopicExchange <span class="title">topicExchange</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(<span class="string">"topicExchange"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingTopic</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue()).to(topicExchange()).with(<span class="string">"topic.*.id"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Binding <span class="title">bindingTopic2</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(topicQueue2()).to(topicExchange()).with(<span class="string">"topic.orders.*"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  主题模式支持routingKey匹配模式，*表示匹配一个单词，#表示匹配任意内容，这样就可以通过主题交换机将消息分发到不同的队列中，详细内容请参看RabbitMQ系列课程。 </p><table><thead><tr><th><strong>匹配键</strong></th><th><strong>topic.*.*</strong></th><th><strong>topic.#</strong></th></tr></thead><tbody><tr><td>topic.order.id</td><td>true</td><td>true</td></tr><tr><td>order.topic.id</td><td>false</td><td>false</td></tr><tr><td>topic.sm.order.id</td><td>false</td><td>true</td></tr><tr><td>topic.sm.id</td><td>false</td><td>true</td></tr><tr><td>topic.id.order</td><td>true</td><td>true</td></tr><tr><td>topic.id</td><td>false</td><td>true</td></tr><tr><td>topic.order</td><td>false</td><td>true</td></tr></tbody></table><p><strong>步骤④</strong>：使用AmqpTemplate操作RabbitMQ</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceRabbitmqTopicImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"待发送短信的订单已纳入处理队列（rabbitmq topic），id："</span>+id);</span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">"topicExchange"</span>,<span class="string">"topic.orders.id"</span>,id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  发送消息后，根据当前提供的routingKey与绑定交换机时设定的routingKey进行匹配，规则匹配成功消息才会进入到对应的队列中。</p><p><strong>步骤⑤</strong>：使用消息监听器在服务器启动后，监听指定队列</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>{</span><br><span class="line">    <span class="meta">@RabbitListener(queues = "topic_queue")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(String id)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务(rabbitmq topic 1)，id："</span>+id);</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@RabbitListener(queues = "topic_queue2")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive2</span><span class="params">(String id)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务(rabbitmq topic 22222222)，id："</span>+id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用注解@RabbitListener定义当前方法监听RabbitMQ中指定名称的消息队列。</p><p><strong>总结</strong></p><ol><li>springboot整合RabbitMQ提供了AmqpTemplate对象作为客户端操作消息队列</li><li>操作ActiveMQ需要配置ActiveMQ服务器地址，默认端口5672</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RabbitListener</li><li>RabbitMQ有5种消息模型，使用的队列相同，但是交换机不同。交换机不同，对应的消息进入的策略也不同</li></ol><h4 id="SpringBoot整合RocketMQ"><a href="#SpringBoot整合RocketMQ" class="headerlink" title="SpringBoot整合RocketMQ"></a>SpringBoot整合RocketMQ</h4><p>​  RocketMQ由阿里研发，后捐赠给apache基金会，目前是apache基金会顶级项目之一，也是目前市面上的MQ产品中较为流行的产品之一，它遵从AMQP协议。</p><h5 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://rocketmq.apache.org/">https://rocketmq.apache.org</a><a href="https://rocketmq.apache.org/">/</a></p><p>​  下载完毕后得到zip压缩文件，解压缩即可使用，解压后得到如下文件</p><p><img src="img%5Cimage-20220228174453471.png" alt="image-20220228174453471"></p><p>​  RocketMQ安装后需要配置环境变量，具体如下：</p><ul><li>ROCKETMQ_HOME</li><li>PATH</li><li>NAMESRV_ADDR （建议）： 127.0.0.1:9876</li></ul><p>​  关于NAMESRV_ADDR对于初学者来说建议配置此项，也可以通过命令设置对应值，操作略显繁琐，建议配置。系统学习RocketMQ知识后即可灵活控制该项。</p><p><strong>RocketMQ工作模式</strong></p><p>​  在RocketMQ中，处理业务的服务器称为broker，生产者与消费者不是直接与broker联系的，而是通过命名服务器进行通信。broker启动后会通知命名服务器自己已经上线，这样命名服务器中就保存有所有的broker信息。当生产者与消费者需要连接broker时，通过命名服务器找到对应的处理业务的broker，因此命名服务器在整套结构中起到一个信息中心的作用。并且broker启动前必须保障命名服务器先启动。</p><img src="img\image-20220228175123790.png" alt="image-20220228175123790" style="zoom:80%;"><p><strong>启动服务器</strong></p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mqnamesrv  # 启动命名服务器</span><br><span class="line">mqbroker  # 启动broker</span><br></pre></td></tr></tbody></table></figure><p>​  运行bin目录下的mqnamesrv命令即可启动命名服务器，默认对外服务端口9876。</p><p>​  运行bin目录下的mqbroker命令即可启动broker服务器，如果环境变量中没有设置NAMESRV_ADDR则需要在运行mqbroker指令前通过set指令设置NAMESRV_ADDR的值，并且每次开启均需要设置此项。</p><p><strong>测试服务器启动状态</strong></p><p>​  RocketMQ提供有一套测试服务器功能的测试程序，运行bin目录下的tools命令即可使用。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tools org.apache.rocketmq.example.quickstart.Producer  # 生产消息</span><br><span class="line">tools org.apache.rocketmq.example.quickstart.Consumer  # 消费消息</span><br></pre></td></tr></tbody></table></figure><h5 id="整合（异步消息）"><a href="#整合（异步消息）" class="headerlink" title="整合（异步消息）"></a>整合（异步消息）</h5><p><strong>步骤①</strong>：导入springboot整合RocketMQ的starter，此坐标不由springboot维护版本</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置RocketMQ的服务器地址</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">name-server:</span> <span class="string">localhost:9876</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">group_rocketmq</span></span><br></pre></td></tr></tbody></table></figure><p>​  设置默认的生产者消费者所属组group。</p><p><strong>步骤③</strong>：使用RocketMQTemplate操作RocketMQ</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceRocketmqImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RocketMQTemplate rocketMQTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"待发送短信的订单已纳入处理队列（rocketmq），id："</span>+id);</span><br><span class="line">        SendCallback callback = <span class="keyword">new</span> SendCallback() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(SendResult sendResult)</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"消息发送成功"</span>);</span><br><span class="line">            }</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(Throwable e)</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"消息发送失败！！！！！"</span>);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        rocketMQTemplate.asyncSend(<span class="string">"order_id"</span>,id,callback);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>​  使用asyncSend方法发送异步消息。</p><p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = "order_id",consumerGroup = "group_rocketmq")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> <span class="keyword">implements</span> <span class="title">RocketMQListener</span>&lt;<span class="title">String</span>&gt; </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务(rocketmq)，id："</span>+id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  RocketMQ的监听器必须按照标准格式开发，实现RocketMQListener接口，泛型为消息类型。</p><p>​  使用注解@RocketMQMessageListener定义当前类监听RabbitMQ中指定组、指定名称的消息队列。</p><p><strong>总结</strong></p><ol><li>springboot整合RocketMQ使用RocketMQTemplate对象作为客户端操作消息队列</li><li>操作RocketMQ需要配置RocketMQ服务器地址，默认端口9876</li><li>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@RocketMQMessageListener</li></ol><h4 id="SpringBoot整合Kafka"><a href="#SpringBoot整合Kafka" class="headerlink" title="SpringBoot整合Kafka"></a>SpringBoot整合Kafka</h4><h5 id="安装-6"><a href="#安装-6" class="headerlink" title="安装"></a>安装</h5><p>​  windows版安装包下载地址：<a href="https://kafka.apache.org/downloads">https://</a><a href="https://kafka.apache.org/downloads">kafka.apache.org/downloads</a></p><p>​  下载完毕后得到tgz压缩文件，使用解压缩软件解压缩即可使用，解压后得到如下文件</p><p><img src="img%5Cimage-20220228181442155.png" alt="image-20220228181442155"></p><p>​  建议使用windows版2.8.1版本。</p><p><strong>启动服务器</strong></p><p>​  kafka服务器的功能相当于RocketMQ中的broker，kafka运行还需要一个类似于命名服务器的服务。在kafka安装目录中自带一个类似于命名服务器的工具，叫做zookeeper，它的作用是注册中心，相关知识请到对应课程中学习。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zookeeper-server-<span class="built_in">start</span>.bat ..\..\config\zookeeper.properties  # 启动zookeeper</span><br><span class="line">kafka-server-<span class="built_in">start</span>.bat ..\..\config\server.properties    # 启动kafka</span><br></pre></td></tr></tbody></table></figure><p>​  运行bin目录下的windows目录下的zookeeper-server-start命令即可启动注册中心，默认对外服务端口2181。</p><p>​  运行bin目录下的windows目录下的kafka-server-start命令即可启动kafka服务器，默认对外服务端口9092。</p><p><strong>创建主题</strong></p><p>​  和之前操作其他MQ产品相似，kakfa也是基于主题操作，操作之前需要先初始化topic。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 创建topic</span><br><span class="line">kafka-topics.bat --create --zookeeper localhost:<span class="number">2181</span> --replication-factor <span class="number">1</span> --partitions <span class="number">1</span> --topic itheima</span><br><span class="line"># 查询topic</span><br><span class="line">kafka-topics.bat --zookeeper <span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>:<span class="number">2181</span> --list     </span><br><span class="line"># 删除topic</span><br><span class="line">kafka-topics.bat --delete --zookeeper localhost:<span class="number">2181</span> --topic itheima</span><br></pre></td></tr></tbody></table></figure><p><strong>测试服务器启动状态</strong></p><p>​  Kafka提供有一套测试服务器功能的测试程序，运行bin目录下的windows目录下的命令即可使用。</p><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kafka-console-producer.bat --broker-list localhost:<span class="number">9092</span> --topic itheima       # 测试生产消息</span><br><span class="line">kafka-console-consumer.bat --bootstrap-server localhost:<span class="number">9092</span> --topic itheima --from-beginning # 测试消息消费</span><br></pre></td></tr></tbody></table></figure><h5 id="整合-4"><a href="#整合-4" class="headerlink" title="整合"></a>整合</h5><p><strong>步骤①</strong>：导入springboot整合Kafka的starter，此坐标由springboot维护版本</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.kafka<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-kafka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><strong>步骤②</strong>：配置Kafka的服务器地址</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">kafka:</span></span><br><span class="line">    <span class="attr">bootstrap-servers:</span> <span class="string">localhost:9092</span></span><br><span class="line">    <span class="attr">consumer:</span></span><br><span class="line">      <span class="attr">group-id:</span> <span class="string">order</span></span><br></pre></td></tr></tbody></table></figure><p>​  设置默认的生产者消费者所属组id。</p><p><strong>步骤③</strong>：使用KafkaTemplate操作Kafka</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageServiceKafkaImpl</span> <span class="keyword">implements</span> <span class="title">MessageService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String,String&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String id)</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"待发送短信的订单已纳入处理队列（kafka），id："</span>+id);</span><br><span class="line">        kafkaTemplate.send(<span class="string">"itheima2022"</span>,id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用send方法发送消息，需要传入topic名称。</p><p><strong>步骤④</strong>：使用消息监听器在服务器启动后，监听指定位置，当消息出现后，立即消费消息</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageListener</span> </span>{</span><br><span class="line">    <span class="meta">@KafkaListener(topics = "itheima2022")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(ConsumerRecord&lt;String,String&gt; record)</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"已完成短信发送业务(kafka)，id："</span>+record.value());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  使用注解@KafkaListener定义当前方法监听Kafka中指定topic的消息，接收到的消息封装在对象ConsumerRecord中，获取数据从ConsumerRecord对象中获取即可。</p><p><strong>总结</strong></p><ol><li><p>springboot整合Kafka使用KafkaTemplate对象作为客户端操作消息队列</p></li><li><p>操作Kafka需要配置Kafka服务器地址，默认端口9092</p></li><li><p>企业开发时通常使用监听器来处理消息队列中的消息，设置监听器使用注解@KafkaListener。接收消息保存在形参ConsumerRecord对象中</p></li></ol><h2 id="KF-6-监控"><a href="#KF-6-监控" class="headerlink" title="KF-6.监控"></a>KF-6.监控</h2><p>​  在说监控之前，需要回顾一下软件业的发展史。最早的软件完成一些非常简单的功能，代码不多，错误也少。随着软件功能的逐步完善，软件的功能变得越来越复杂，功能不能得到有效的保障，这个阶段出现了针对软件功能的检测，也就是软件测试。伴随着计算机操作系统的逐步升级，软件的运行状态也变得开始让人捉摸不透，出现了不稳定的状况。伴随着计算机网络的发展，程序也从单机状态切换成基于计算机网络的程序，应用于网络的程序开始出现，由于网络的不稳定性，程序的运行状态让使用者更加堪忧。互联网的出现彻底打破了软件的思维模式，随之而来的互联网软件就更加凸显出应对各种各样复杂的网络情况之下的弱小。计算机软件的运行状况已经成为了软件运行的一个大话题，针对软件的运行状况就出现了全新的思维，建立起了初代的软件运行状态监控。</p><p>​  什么是监控？就是通过软件的方式展示另一个软件的运行情况，运行的情况则通过各种各样的指标数据反馈给监控人员。例如网络是否顺畅、服务器是否在运行、程序的功能是否能够整百分百运行成功，内存是否够用，等等等等。</p><p>​  本章要讲解的监控就是对软件的运行情况进行监督，但是springboot程序与非springboot程序的差异还是很大的，为了方便监控软件的开发，springboot提供了一套功能接口，为开发者加速开发过程。</p><h3 id="KF-6-1-监控的意义"><a href="#KF-6-1-监控的意义" class="headerlink" title="KF-6-1.监控的意义"></a>KF-6-1.监控的意义</h3><p>​  对于现代的互联网程序来说，规模越来越大，功能越来越复杂，还要追求更好的客户体验，因此要监控的信息量也就比较大了。由于现在的互联网程序大部分都是基于微服务的程序，一个程序的运行需要若干个服务来保障，因此第一个要监控的指标就是服务是否正常运行，也就是<strong>监控服务状态是否处理宕机状态</strong>。一旦发现某个服务宕机了，必须马上给出对应的解决方案，避免整体应用功能受影响。其次，由于互联网程序服务的客户量是巨大的，当客户的请求在短时间内集中达到服务器后，就会出现各种程序运行指标的波动。比如内存占用严重，请求无法及时响应处理等，这就是第二个要监控的重要指标，<strong>监控服务运行指标</strong>。虽然软件是对外提供用户的访问需求，完成对应功能的，但是后台的运行是否平稳，是否出现了不影响客户使用的功能隐患，这些也是要密切监控的，此时就需要在不停机的情况下，监控系统运行情况，日志是一个不错的手段。如果在众多日志中找到开发者或运维人员所关注的日志信息，简单快速有效的过滤出要看的日志也是监控系统需要考虑的问题，这就是第三个要监控的指标，<strong>监控程序运行日志</strong>。虽然我们期望程序一直平稳运行，但是由于突发情况的出现，例如服务器被攻击、服务器内存溢出等情况造成了服务器宕机，此时当前服务不能满足使用需要，就要将其重启甚至关闭，如果快速控制服务器的启停也是程序运行过程中不可回避的问题，这就是第四个监控项，<strong>管理服务状态</strong>。以上这些仅仅是从大的方面来思考监控这个问题，还有很多的细节点，例如上线了一个新功能，定时提醒用户续费，这种功能不是上线后马上就运行的，但是当前功能是否真的启动，如果快速的查询到这个功能已经开启，这也是监控中要解决的问题，等等。看来监控真的是一项非常重要的工作。</p><p>​  通过上述描述，可以看出监控很重要。那具体的监控要如何开展呢？还要从实际的程序运行角度出发。比如现在有3个服务支撑着一个程序的运行，每个服务都有自己的运行状态。</p><img src="img\image-20220301093704396.png" alt="image-20220301093704396" style="zoom:50%;"><p>​  此时被监控的信息就要在三个不同的程序中去查询并展示，但是三个服务是服务于一个程序的运行的，如果不能合并到一个平台上展示，监控工作量巨大，而且信息对称性差，要不停的在三个监控端查看数据。如果将业务放大成30个，300个，3000个呢？看来必须有一个单独的平台，将多个被监控的服务对应的监控指标信息汇总在一起，这样更利于监控工作的开展。</p><img src="img\image-20220301094001896.png" alt="image-20220301094001896" style="zoom:50%;"><p>​  新的程序专门用来监控，新的问题就出现了，是被监控程序主动上报信息还是监控程序主动获取信息？如果监控程序不能主动获取信息，这就意味着监控程序有可能看到的是很久之前被监控程序上报的信息，万一被监控程序宕机了，监控程序就无法区分究竟是好久没法信息了，还是已经下线了。所以监控程序必须具有主动发起请求获取被监控服务信息的能力。</p><img src="img\image-20220301094259844.png" alt="image-20220301094259844" style="zoom:50%;"><p>​  如果监控程序要监控服务时，主动获取对方的信息。那监控程序如何知道哪些程序被自己监控呢？不可能在监控程序中设置我监控谁，这样互联网上的所有程序岂不是都可以被监控到，这样的话信息安全将无法得到保障。合理的做法只能是在被监控程序启动时上报监控程序，告诉监控程序你可以监控我了。看来需要在被监控程序端做主动上报的操作，这就要求被监控程序中配置对应的监控程序是谁。</p><img src="img\image-20220301094547748.png" alt="image-20220301094547748" style="zoom:50%;"><p>​  被监控程序可以提供各种各样的指标数据给监控程序看，但是每一个指标都代表着公司的机密信息，并不是所有的指标都可以给任何人看的，乃至运维人员，所以对被监控指标的是否开放出来给监控系统看，也需要做详细的设定。</p><p>​  以上描述的整个过程就是一个监控系统的基本流程。</p><p><strong>总结</strong></p><ol><li>监控是一个非常重要的工作，是保障程序正常运行的基础手段</li><li>监控的过程通过一个监控程序进行，它汇总所有被监控的程序的信息集中统一展示</li><li>被监控程序需要主动上报自己被监控，同时要设置哪些指标被监控</li></ol><p><strong>思考</strong></p><p>​  下面就要开始做监控了，新的问题就来了，监控程序怎么做呢？难道要自己写吗？肯定是不现实的，如何进行监控，咱们下节再讲。</p><h3 id="KF-6-2-可视化监控平台"><a href="#KF-6-2-可视化监控平台" class="headerlink" title="KF-6-2.可视化监控平台"></a>KF-6-2.可视化监控平台</h3><p>​  springboot抽取了大部分监控系统的常用指标，提出了监控的总思想。然后就有好心的同志根据监控的总思想，制作了一个通用性很强的监控系统，因为是基于springboot监控的核心思想制作的，所以这个程序被命名为<strong>Spring Boot Admin</strong>。</p><p>​  Spring Boot Admin，这是一个开源社区项目，用于管理和监控SpringBoot应用程序。这个项目中包含有客户端和服务端两部分，而监控平台指的就是服务端。我们做的程序如果需要被监控，将我们做的程序制作成客户端，然后配置服务端地址后，服务端就可以通过HTTP请求的方式从客户端获取对应的信息，并通过UI界面展示对应信息。</p><p>​  下面就来开发这套监控程序，先制作服务端，其实服务端可以理解为是一个web程序，收到一些信息后展示这些信息。</p><p><strong>服务端开发</strong></p><p><strong>步骤①</strong>：导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致，并将其配置成web工程</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  上述过程可以通过创建项目时使用勾选的形式完成。</p><img src="img\image-20220301102432817.png" alt="image-20220301102432817" style="zoom:50%;"><p><strong>步骤②</strong>：在引导类上添加注解@EnableAdminServer，声明当前应用启动后作为SpringBootAdmin的服务器使用</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAdminServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springboot25AdminServerApplication</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Springboot25AdminServerApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  做到这里，这个服务器就开发好了，启动后就可以访问当前程序了，界面如下。</p><img src="img\image-20220301103028468.png" alt="image-20220301103028468" style="zoom: 50%;"><p>​  由于目前没有启动任何被监控的程序，所以里面什么信息都没有。下面制作一个被监控的客户端程序。</p><p><strong>客户端开发</strong></p><p>​  客户端程序开发其实和服务端开发思路基本相似，多了一些配置而已。</p><p><strong>步骤①</strong>：导入springboot admin对应的starter，版本与当前使用的springboot版本保持一致，并将其配置成web工程</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>de.codecentric<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-admin-starter-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​  上述过程也可以通过创建项目时使用勾选的形式完成，不过一定要小心，端口配置成不一样的，否则会冲突。</p><p><strong>步骤②</strong>：设置当前客户端将信息上传到哪个服务器上，通过yml文件配置</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br></pre></td></tr></tbody></table></figure><p>​  做到这里，这个客户端就可以启动了。启动后再次访问服务端程序，界面如下。</p><img src="img\image-20220301103838079.png" alt="image-20220301103838079" style="zoom: 50%;"><p>​  可以看到，当前监控了1个程序，点击进去查看详细信息。</p><img src="img\image-20220301103936386.png" alt="image-20220301103936386" style="zoom: 50%;"><p>​  由于当前没有设置开放哪些信息给监控服务器，所以目前看不到什么有效的信息。下面需要做两组配置就可以看到信息了。</p><ol><li><p>开放指定信息给服务器看</p></li><li><p>允许服务器以HTTP请求的方式获取对应的信息</p><p>配置如下：</p></li></ol><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">boot:</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">      <span class="attr">client:</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">http://localhost:8080</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure><p>​  上述配置对于初学者来说比较容易混淆。简单解释一下，到下一节再做具体的讲解。springbootadmin的客户端默认开放了13组信息给服务器，但是这些信息除了一个之外，其他的信息都不让通过HTTP请求查看。所以你看到的信息基本上就没什么内容了，只能看到一个内容，就是下面的健康信息。</p><img src="img\image-20220301104742563.png" alt="image-20220301104742563" style="zoom: 50%;"><p>​  但是即便如此我们看到健康信息中也没什么内容，原因在于健康信息中有一些信息描述了你当前应用使用了什么技术等信息，如果无脑的对外暴露功能会有安全隐患。通过配置就可以开放所有的健康信息明细查看了。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br></pre></td></tr></tbody></table></figure><p>​  健康明细信息如下：</p><img src="img\image-20220301105116554.png" alt="image-20220301105116554" style="zoom: 50%;"><p>​  目前除了健康信息，其他信息都查阅不了。原因在于其他12种信息是默认不提供给服务器通过HTTP请求查阅的，所以需要开启查阅的内容项，使用*表示查阅全部。记得带引号。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">endpoints:</span></span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">exposure:</span></span><br><span class="line">      <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure><p>​  配置后再刷新服务器页面，就可以看到所有的信息了。</p><img src="img\image-20220301105554494.png" alt="image-20220301105554494" style="zoom: 50%;"><p>​  以上界面中展示的信息量就非常大了，包含了13组信息，有性能指标监控，加载的bean列表，加载的系统属性，日志的显示控制等等。</p><p><strong>配置多个客户端</strong></p><p>​  可以通过配置客户端的方式在其他的springboot程序中添加客户端坐标，这样当前服务器就可以监控多个客户端程序了。每个客户端展示不同的监控信息。</p><img src="img\image-20220301110352170.png" alt="image-20220301110352170" style="zoom: 50%;"><p>​  进入监控面板，如果你加载的应用具有功能，在监控面板中可以看到3组信息展示的与之前加载的空工程不一样。</p><ul><li>类加载面板中可以查阅到开发者自定义的类，如左图</li></ul><p>​                        <img src="img\image-20220301161246835.png" alt="image-20220301161246835" style="zoom:33%;"><img src="img\image-20220301161949431.png" alt="image-20220301161949431" style="zoom:33%;"></p><ul><li>映射中可以查阅到当前应用配置的所有请求</li></ul><p>​                        <img src="img\image-20220301161418791.png" alt="image-20220301161418791" style="zoom: 33%;"><img src="img\image-20220301162008737.png" alt="image-20220301162008737" style="zoom:33%;"></p><ul><li>性能指标中可以查阅当前应用独有的请求路径统计数据</li></ul><p>​                        <img src="img\image-20220301161906949.png" alt="image-20220301161906949" style="zoom: 33%;"><img src="img\image-20220301162040670.png" alt="image-20220301162040670" style="zoom: 33%;"></p><p><strong>总结</strong></p><ol><li>开发监控服务端需要导入坐标，然后在引导类上添加注解@EnableAdminServer，并将其配置成web程序即可</li><li>开发被监控的客户端需要导入坐标，然后配置服务端服务器地址，并做开放指标的设定即可</li><li>在监控平台中可以查阅到各种各样被监控的指标，前提是客户端开放了被监控的指标</li></ol><p><strong>思考</strong></p><p>​  之前说过，服务端要想监控客户端，需要主动的获取到对应信息并展示出来。但是目前我们并没有在客户端开发任何新的功能，但是服务端确可以获取监控信息，谁帮我们做的这些功能呢？咱们下一节再讲。</p><h3 id="KF-6-3-监控原理"><a href="#KF-6-3-监控原理" class="headerlink" title="KF-6-3.监控原理"></a>KF-6-3.监控原理</h3><p>​  通过查阅监控中的映射指标，可以看到当前系统中可以运行的所有请求路径，其中大部分路径以/actuator开头</p><img src="img\image-20220301170214076.png" alt="image-20220301170214076" style="zoom: 50%;"><p>​  首先这些请求路径不是开发者自己编写的，其次这个路径代表什么含义呢？既然这个路径可以访问，就可以通过浏览器发送该请求看看究竟可以得到什么信息。</p><p><img src="img%5Cimage-20220301170723057.png" alt="image-20220301170723057"></p><p>​  通过发送请求，可以得到一组json信息，如下</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"_links"</span>: {</span><br><span class="line">        <span class="attr">"self"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"beans"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/beans"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"caches-cache"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/caches/{cache}"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"caches"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/caches"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"health"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/health"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"health-path"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/health/{*path}"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"info"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/info"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"conditions"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/conditions"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"shutdown"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/shutdown"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"configprops"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/configprops"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"configprops-prefix"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/configprops/{prefix}"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"env"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/env"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"env-toMatch"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/env/{toMatch}"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"loggers"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/loggers"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"loggers-name"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/loggers/{name}"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"heapdump"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/heapdump"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"threaddump"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/threaddump"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"metrics-requiredMetricName"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/metrics/{requiredMetricName}"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">true</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"metrics"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/metrics"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"scheduledtasks"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/scheduledtasks"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"mappings"</span>: {</span><br><span class="line">            <span class="attr">"href"</span>: <span class="string">"http://localhost:81/actuator/mappings"</span>,</span><br><span class="line">            <span class="attr">"templated"</span>: <span class="literal">false</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  其中每一组数据都有一个请求路径，而在这里请求路径中有之前看到过的health，发送此请求又得到了一组信息</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">    <span class="attr">"components"</span>: {</span><br><span class="line">        <span class="attr">"diskSpace"</span>: {</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"UP"</span>,</span><br><span class="line">            <span class="attr">"details"</span>: {</span><br><span class="line">                <span class="attr">"total"</span>: <span class="number">297042808832</span>,</span><br><span class="line">                <span class="attr">"free"</span>: <span class="number">72284409856</span>,</span><br><span class="line">                <span class="attr">"threshold"</span>: <span class="number">10485760</span>,</span><br><span class="line">                <span class="attr">"exists"</span>: <span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">"ping"</span>: {</span><br><span class="line">            <span class="attr">"status"</span>: <span class="string">"UP"</span></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  当前信息与监控面板中的数据存在着对应关系</p><img src="img\image-20220301171025615.png" alt="image-20220301171025615" style="zoom:50%;"><p>​  原来监控中显示的信息实际上是通过发送请求后得到json数据，然后展示出来。按照上述操作，可以发送更多的以/actuator开头的链接地址，获取更多的数据，这些数据汇总到一起组成了监控平台显示的所有数据。</p><p>​  到这里我们得到了一个核心信息，监控平台中显示的信息实际上是通过对被监控的应用发送请求得到的。那这些请求谁开发的呢？打开被监控应用的pom文件，其中导入了springboot admin的对应的client，在这个资源中导入了一个名称叫做actuator的包。被监控的应用之所以可以对外提供上述请求路径，就是因为添加了这个包。</p><p><img src="img%5Cimage-20220301171437817.png" alt="image-20220301171437817"></p><p>​  这个actuator是什么呢？这就是本节要讲的核心内容，监控的端点。</p><p>​  Actuator，可以称为端点，描述了一组监控信息，SpringBootAdmin提供了多个内置端点，通过访问端点就可以获取对应的监控信息，也可以根据需要自定义端点信息。通过发送请求路劲**/actuator<strong>可以访问应用所有端点信息，如果端点中还有明细信息可以发送请求</strong>/actuator/端点名称**来获取详细信息。以下列出了所有端点信息说明：</p><table><thead><tr><th>ID</th><th>描述</th><th>默认启用</th></tr></thead><tbody><tr><td>auditevents</td><td>暴露当前应用程序的审计事件信息。</td><td>是</td></tr><tr><td>beans</td><td>显示应用程序中所有 Spring bean 的完整列表。</td><td>是</td></tr><tr><td>caches</td><td>暴露可用的缓存。</td><td>是</td></tr><tr><td>conditions</td><td>显示在配置和自动配置类上评估的条件以及它们匹配或不匹配的原因。</td><td>是</td></tr><tr><td>configprops</td><td>显示所有 @ConfigurationProperties 的校对清单。</td><td>是</td></tr><tr><td>env</td><td>暴露 Spring ConfigurableEnvironment 中的属性。</td><td>是</td></tr><tr><td>flyway</td><td>显示已应用的 Flyway 数据库迁移。</td><td>是</td></tr><tr><td>health</td><td>显示应用程序健康信息</td><td>是</td></tr><tr><td>httptrace</td><td>显示 HTTP 追踪信息（默认情况下，最后 100 个  HTTP 请求/响应交换）。</td><td>是</td></tr><tr><td>info</td><td>显示应用程序信息。</td><td>是</td></tr><tr><td>integrationgraph</td><td>显示 Spring Integration 图。</td><td>是</td></tr><tr><td>loggers</td><td>显示和修改应用程序中日志记录器的配置。</td><td>是</td></tr><tr><td>liquibase</td><td>显示已应用的 Liquibase 数据库迁移。</td><td>是</td></tr><tr><td>metrics</td><td>显示当前应用程序的指标度量信息。</td><td>是</td></tr><tr><td>mappings</td><td>显示所有 @RequestMapping 路径的整理清单。</td><td>是</td></tr><tr><td>scheduledtasks</td><td>显示应用程序中的调度任务。</td><td>是</td></tr><tr><td>sessions</td><td>允许从 Spring Session 支持的会话存储中检索和删除用户会话。当使用 Spring Session 的响应式 Web 应用程序支持时不可用。</td><td>是</td></tr><tr><td>shutdown</td><td>正常关闭应用程序。</td><td>否</td></tr><tr><td>threaddump</td><td>执行线程 dump。</td><td>是</td></tr><tr><td>heapdump</td><td>返回一个 hprof 堆 dump 文件。</td><td>是</td></tr><tr><td>jolokia</td><td>通过 HTTP 暴露 JMX bean（当  Jolokia 在 classpath 上时，不适用于 WebFlux）。</td><td>是</td></tr><tr><td>logfile</td><td>返回日志文件的内容（如果已设置 logging.file 或 logging.path 属性）。支持使用 HTTP Range 头来检索部分日志文件的内容。</td><td>是</td></tr><tr><td>prometheus</td><td>以可以由 Prometheus 服务器抓取的格式暴露指标。</td><td>是</td></tr></tbody></table><p>​  上述端点每一项代表被监控的指标，如果对外开放则监控平台可以查询到对应的端点信息，如果未开放则无法查询对应的端点信息。通过配置可以设置端点是否对外开放功能。使用enable属性控制端点是否对外开放。其中health端点为默认端点，不能关闭。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span></span><br><span class="line">    <span class="attr">health:</span>      <span class="comment"># 端点名称</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">info:</span>      <span class="comment"># 端点名称</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span>    <span class="comment"># 是否开放</span></span><br></pre></td></tr></tbody></table></figure><p>​  为了方便开发者快速配置端点，springboot admin设置了13个较为常用的端点作为默认开放的端点，如果需要控制默认开放的端点的开放状态，可以通过配置设置，如下：</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span> <span class="comment"># 是否开启默认端点，默认值true</span></span><br></pre></td></tr></tbody></table></figure><p>​  上述端点开启后，就可以通过端点对应的路径查看对应的信息了。但是此时还不能通过HTTP请求查询此信息，还需要开启通过HTTP请求查询的端点名称，使用“*”可以简化配置成开放所有端点的WEB端HTTP请求权限。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br></pre></td></tr></tbody></table></figure><p>​  整体上来说，对于端点的配置有两组信息，一组是endpoints开头的，对所有端点进行配置，一组是endpoint开头的，对具体端点进行配置。</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">management:</span></span><br><span class="line">  <span class="attr">endpoint:</span>  <span class="comment"># 具体端点的配置</span></span><br><span class="line">    <span class="attr">health:</span></span><br><span class="line">      <span class="attr">show-details:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">info:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">endpoints:</span> <span class="comment"># 全部端点的配置</span></span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">      <span class="attr">exposure:</span></span><br><span class="line">        <span class="attr">include:</span> <span class="string">"*"</span></span><br><span class="line">    <span class="attr">enabled-by-default:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p><strong>总结</strong></p><ol><li><p>被监控客户端通过添加actuator的坐标可以对外提供被访问的端点功能</p></li><li><p>端点功能的开放与关闭可以通过配置进行控制</p></li><li><p>web端默认无法获取所有端点信息，通过配置开放端点功能</p></li></ol><h3 id="KF-6-4-自定义监控指标"><a href="#KF-6-4-自定义监控指标" class="headerlink" title="KF-6-4.自定义监控指标"></a>KF-6-4.自定义监控指标</h3><p>​  端点描述了被监控的信息，除了系统默认的指标，还可以自行添加显示的指标，下面就通过3种不同的端点的指标自定义方式来学习端点信息的二次开发。</p><p><strong>INFO端点</strong></p><p>​  info端点描述了当前应用的基本信息，可以通过两种形式快速配置info端点的信息</p><ul><li><p>配置形式</p><p>在yml文件中通过设置info节点的信息就可以快速配置端点信息</p><figure class="highlight yaml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">info:</span></span><br><span class="line">  <span class="attr">appName:</span> <span class="string">@project.artifactId@</span></span><br><span class="line">  <span class="attr">version:</span> <span class="string">@project.version@</span></span><br><span class="line">  <span class="attr">company:</span> <span class="string">传智教育</span></span><br><span class="line">  <span class="attr">author:</span> <span class="string">itheima</span></span><br></pre></td></tr></tbody></table></figure><p>配置完毕后，对应信息显示在监控平台上</p><img src="img\image-20220301174133248.png" alt="image-20220301174133248" style="zoom:50%;"><p>也可以通过请求端点信息路径获取对应json信息</p><img src="img\image-20220301174241310.png" alt="image-20220301174241310" style="zoom:50%;"></li><li><p>编程形式</p><p>通过配置的形式只能添加固定的数据，如果需要动态数据还可以通过配置bean的方式为info端点添加信息，此信息与配置信息共存</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoConfig</span> <span class="keyword">implements</span> <span class="title">InfoContributor</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contribute</span><span class="params">(Info.Builder builder)</span> </span>{</span><br><span class="line">        builder.withDetail(<span class="string">"runTime"</span>,System.currentTimeMillis());  <span class="comment">//添加单个信息</span></span><br><span class="line">        Map infoMap = <span class="keyword">new</span> HashMap();  </span><br><span class="line">        infoMap.put(<span class="string">"buildTime"</span>,<span class="string">"2006"</span>);</span><br><span class="line">        builder.withDetails(infoMap);         <span class="comment">//添加一组信息</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><p><strong>Health端点</strong></p><p>​  health端点描述当前应用的运行健康指标，即应用的运行是否成功。通过编程的形式可以扩展指标信息。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HealthConfig</span> <span class="keyword">extends</span> <span class="title">AbstractHealthIndicator</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHealthCheck</span><span class="params">(Health.Builder builder)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">        <span class="keyword">boolean</span> condition = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(condition) {</span><br><span class="line">            builder.status(Status.UP);     <span class="comment">//设置运行状态为启动状态</span></span><br><span class="line">            builder.withDetail(<span class="string">"runTime"</span>, System.currentTimeMillis());</span><br><span class="line">            Map infoMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">            infoMap.put(<span class="string">"buildTime"</span>, <span class="string">"2006"</span>);</span><br><span class="line">            builder.withDetails(infoMap);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            builder.status(Status.OUT_OF_SERVICE);  <span class="comment">//设置运行状态为不在服务状态</span></span><br><span class="line">            builder.withDetail(<span class="string">"上线了吗？"</span>,<span class="string">"你做梦"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  当任意一个组件状态不为UP时，整体应用对外服务状态为非UP状态。</p><img src="img\image-20220301174751845.png" alt="image-20220301174751845" style="zoom:50%;"><p><strong>Metrics端点</strong></p><p>​  metrics端点描述了性能指标，除了系统自带的监控性能指标，还可以自定义性能指标。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BookDao</span>, <span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">IBookService</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Counter counter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BookServiceImpl</span><span class="params">(MeterRegistry meterRegistry)</span></span>{</span><br><span class="line">        counter = meterRegistry.counter(<span class="string">"用户付费操作次数："</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(Integer id)</span> </span>{</span><br><span class="line">        <span class="comment">//每次执行删除业务等同于执行了付费业务</span></span><br><span class="line">        counter.increment();</span><br><span class="line">        <span class="keyword">return</span> bookDao.deleteById(id) &gt; <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  在性能指标中就出现了自定义的性能指标监控项</p><img src="img\image-20220301175101812.png" alt="image-20220301175101812" style="zoom:50%;"><p><strong>自定义端点</strong></p><p>​  可以根据业务需要自定义端点，方便业务监控</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Endpoint(id="pay",enableByDefault = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PayEndpoint</span> </span>{</span><br><span class="line">    <span class="meta">@ReadOperation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getPay</span><span class="params">()</span></span>{</span><br><span class="line">        Map payMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        payMap.put(<span class="string">"level 1"</span>,<span class="string">"300"</span>);</span><br><span class="line">        payMap.put(<span class="string">"level 2"</span>,<span class="string">"291"</span>);</span><br><span class="line">        payMap.put(<span class="string">"level 3"</span>,<span class="string">"666"</span>);</span><br><span class="line">        <span class="keyword">return</span> payMap;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>​  由于此端点数据spirng boot admin无法预知该如何展示，所以通过界面无法看到此数据，通过HTTP请求路径可以获取到当前端点的信息，但是需要先开启当前端点对外功能，或者设置当前端点为默认开发的端点。</p><img src="img\image-20220301175355482.png" alt="image-20220301175355482" style="zoom:50%;"><p><strong>总结</strong></p><ol><li>端点的指标可以自定义，但是每种不同的指标根据其功能不同，自定义方式不同</li><li>info端点通过配置和编程的方式都可以添加端点指标</li><li>health端点通过编程的方式添加端点指标，需要注意要为对应指标添加启动状态的逻辑设定</li><li>metrics指标通过在业务中添加监控操作设置指标</li><li>可以自定义端点添加更多的指标</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端学习</title>
      <link href="/2022/040312750.html"/>
      <url>/2022/040312750.html</url>
      
        <content type="html"><![CDATA[<h1 id="好用的网站"><a href="#好用的网站" class="headerlink" title="好用的网站"></a>好用的网站</h1><h2 id="CODEPEN"><a href="#CODEPEN" class="headerlink" title="CODEPEN"></a>CODEPEN</h2><p>CodePen 是一个基于 Web 的开发平台，允许用户在网页编写 HTML、CSS 和 JavaScript 等前端语言。并且它是实时可见的，这会使故障排除更加容易。开发人员和设计人员还可以与世界其他地方交换代码示例。</p><h2 id="Responsively"><a href="#Responsively" class="headerlink" title="Responsively"></a>Responsively</h2><p>这是一个基于开源项目的网站，它能够将各个设备屏幕展现在同一个页面上，能够让你非常方便的开发响应式网站，大幅提高前端开发的效率。</p><h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML:（HyperText Markup Language）【超文本标记语言】</p><p>狭义的HTML指的是网页；<br>广义的HTML指的是前端技术（html,css,js,以及各种框架）——网页，移动端网页，小程序，公众号，移动端的app，快应用等。</p><p>HTML是一门标记语言，标记语言由一套标记标签组成，学习HTML，就是学习标签。</p><h2 id="vscode编辑html"><a href="#vscode编辑html" class="headerlink" title="vscode编辑html"></a>vscode编辑html</h2><p>open in brower<br>按下快捷键ALT+B 即可在浏览器运行html</p><p>HTMLHint<br>错误提示</p><p>html snippets<br>常用html代码片段模板</p><p>live server<br>实时预览html文件</p><p>beautify<br>格式化代码工具，美化javascript，JSON，CSS，Sass，和HTML</p><h2 id="HTML文件结构"><a href="#HTML文件结构" class="headerlink" title="HTML文件结构"></a>HTML文件结构</h2><p>1.文档类型声明<br>HTML5版本的文档类型声明是：<br><code>&lt;!DOCTYPE html&gt;</code></p><p>2.根标签<br>html标签是整个文档的根标签，所有其他标签都必须放在html标签里面。上面的文档类型不能当做普通标签看待。</p><p>所谓『根』其实是『树根』的意思。在一个树形结构中，根节点只能有一个。</p><p>3.头部<br>head标签用于定义文档的头部，其他头部元素都放在head标签里。头部元素包括title标签、script标签、style标签、link标签、meta标签等等。和网页设置相关的内容都写在head标签里；</p><p>4.主体<br>body标签定义网页的主体内容，在浏览器窗口内显示的内容都定义到body标签内。</p><p>5.注释<code>&lt;!-- 注释内容 --&gt;</code></p><h2 id="HTML语法规则"><a href="#HTML语法规则" class="headerlink" title="HTML语法规则"></a>HTML语法规则</h2><p>根标签有且只能有一个<br>无论是双标签还是单标签都必须正确关闭<br>标签可以嵌套但不能交叉嵌套<br>注释不能嵌套<br>属性必须有值，值必须加引号，单引号或双引号均可<br>标签名不区分大小写但建议使用小写</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><code>由尖括号包裹单词构成，如：&lt;html&gt;，所以标签不可能以数字开头。</code><br>标签不区分大小写，但推荐小写。<br>标签也称为元素。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">单标签有两种写法：</span><br><span class="line">   写法一：只写开标签即可<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">   写法二：在开标签的结尾写一个/，如<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">双标签：</span><br><span class="line">开始标签又称开放标签<span class="tag">&lt;<span class="name">a</span>&gt;</span>标签体<span class="tag">&lt;/<span class="name">a</span>&gt;</span>结束标签又称闭合标签或关标签</span><br><span class="line">自闭合标签/单标签，如：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>，<span class="tag">&lt;<span class="name">br</span>&gt;</span>等</span><br></pre></td></tr></tbody></table></figure><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p>注意：标题标签前后有换行。</p><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><p><code>&lt;p&gt;There is clearly a need for CSS to be taken seriously by graphic artists. The Zen Garden aims to excite, inspire, and encourage participation. To begin, view some of the existing designs in the list. Clicking on any one will load the style sheet into this very page. The code remains the same, the only thing that has changed is the external .css file. Yes, really.&lt;/p&gt;</code></p><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>  &gt;</span>文字说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>点击后跳转到href属性指定的页面</p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p>表格由 <code>&lt;table&gt;</code> 标签来定义。<br><code>&lt;th&gt;</code> 定义表头<br>每个表格均有若干行（由 <code>&lt;tr&gt;</code>标签定义），<br>每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">"1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 1, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>row 2, cell 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span>Grape<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="块"><a href="#块" class="headerlink" title="块"></a>块</h3><p>『块』并不是为了显示文章内容的，而是为了方便结合CSS对页面进行布局。块有两种，div是前后有换行的块，span是前后没有换行的块。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black;width: 100px;height: 100px;"</span>&gt;</span>This is a div block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black;width: 100px;height: 100px;"</span>&gt;</span>This is a div block<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black;width: 100px;height: 100px;"</span>&gt;</span>This is a span block<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"border: 1px solid black;width: 100px;height: 100px;"</span>&gt;</span>This is a span block<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h3><p>src属性用来指定图片文件的路径，这里同样按我们前面说的使用『绝对路径』。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"/aaa/pro01-HTML/./images/mi.jpg"</span>/&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>凡是需要用户填写的信息都需要用到表单。</p><h3 id="form标签"><a href="#form标签" class="headerlink" title="form标签"></a>form标签</h3><p>在HTML中我们使用form标签来定义一个表单。而对于form标签来说有两个最重要的属性：action和method。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/aaa/pro01-HTML/page05-form-target.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>action 属性规定当提交表单时，向何处发送表单数据。填写服务器端的能够接收表单数据的地址</li><li>method属性。用来定义提交表单的『请求方式』。method属性只有两个可选值：get或post，没有极特殊情况的话使用post即可。</li></ul><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p>input 标签用于搜集用户信息。<br>根据不同的 type 属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。<br><code>&lt;input type="表单元素的类型" name="名称" value="默认值" size="宽度"&gt; </code></p><h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>text    单行文本框    省略时默认就是text<br>password    密码框    输入时以点号显示，安全<br>redio    单选按钮    只能选择其中一个<br>checkbox    多选框    可以同时选择多个<br>submit    提交按钮    提交表单数据<br>reset    重置按钮    重置表单元素的初始值<br>image    图像按钮    可以使用图片作为按钮<br>button    普通按钮    默认情况下无功能<br>file    文件选择器    选择要上传的文件<br>hidden    隐藏域    在页面上不显示，但是会提交，可以用来存储数据</p><h4 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h4><p>placeholder属性提供可描述输入字段预期值的提示信息</p><h3 id="下拉列表"><a href="#下拉列表" class="headerlink" title="下拉列表"></a>下拉列表</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">你喜欢的运动是：</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"interesting"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"swimming"</span>&gt;</span>游泳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"running"</span>&gt;</span>跑步<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shooting"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>射击<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"skating"</span>&gt;</span>溜冰<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>下拉列表用到了两种标签，其中select标签用来定义下拉列表，而option标签设置列表项。<br>name属性在select标签中设置。<br>value属性在option标签中设置。<br>option标签的标签体是显示出来给用户看的，提交到服务器的是value属性的值。<br>通过在option标签中设置selected=”selected”属性实现默认选中的效果</p><h3 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span>&gt;</span>普通按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span>重置按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>普通按钮    点击后无效果，需要通过JavaScript绑定单击响应函数<br>重置按钮    点击后将表单内的所有表单项都恢复为默认值<br>提交按钮    点击后提交表单</p><h3 id="多行文本框"><a href="#多行文本框" class="headerlink" title="多行文本框"></a>多行文本框</h3><p><code>自我介绍：&lt;textarea name="desc"&gt;&lt;/textarea&gt;</code><br>textarea没有value属性，如果要设置默认值需要写在开始和结束标签之间。</p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="设置CSS样式的三种方式"><a href="#设置CSS样式的三种方式" class="headerlink" title="设置CSS样式的三种方式"></a>设置CSS样式的三种方式</h2><h3 id="在HTML标签内设置"><a href="#在HTML标签内设置" class="headerlink" title="在HTML标签内设置"></a>在HTML标签内设置</h3><p>仅对当前标签有效</p><p><code>&lt;div style="border: 1px solid black;width: 100px; height: 100px;"&gt;&amp;nbsp;&lt;/div&gt;</code></p><h3 id="在head标签内设置"><a href="#在head标签内设置" class="headerlink" title="在head标签内设置"></a>在head标签内设置</h3><p>对当前页面有效<br>在<code>&lt;style&gt;&lt;/style&gt;</code>里写</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> {</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">background-color</span>: lightgreen;</span></span><br><span class="line"><span class="css">            <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="css">        }</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="引入外部CSS样式文件"><a href="#引入外部CSS样式文件" class="headerlink" title="引入外部CSS样式文件"></a>引入外部CSS样式文件</h3><p>在需要使用这个CSS文件的HTML页面的head标签内加入：</p><p><code>&lt;link rel="stylesheet" type="text/css" href="/aaa/pro01-HTML/style/example.css" /&gt;</code></p><h2 id="CSS代码语法"><a href="#CSS代码语法" class="headerlink" title="CSS代码语法"></a>CSS代码语法</h2><p>CSS样式由选择器和声明组成，而声明又由属性和值组成。<br>属性和值之间用冒号隔开。<br>多条声明之间用分号隔开。<br>使用/* … */声明注释。</p><p><img src="https://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img046.cb990aa2.png"></p><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p>CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。</p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器:"></a>id选择器:</h3><p>#id</p><p>id 名称不能以数字开头。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这条CSS 规则将应用于 id="para1" 的 HTML 元素 */</span></span><br><span class="line"><span class="selector-id">#para1</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器:"></a>类选择器:</h3><p>如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在此例中，所有带有 class="center" 的 HTML 元素将为红色且居中对齐： */</span></span><br><span class="line"><span class="selector-class">.center</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>通用选择器（*）选择页面上的所有的 HTML 元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面的 CSS 规则会影响页面上的每个 HTML 元素： */</span></span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h3><p>分组选择器选取所有具有相同样式定义的 HTML 元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="组合器选择器（根据它们之间的特定关系来选取元素）"><a href="#组合器选择器（根据它们之间的特定关系来选取元素）" class="headerlink" title="组合器选择器（根据它们之间的特定关系来选取元素）"></a>组合器选择器（根据它们之间的特定关系来选取元素）</h2><h2 id="伪类选择器（根据特定状态选取元素）"><a href="#伪类选择器（根据特定状态选取元素）" class="headerlink" title="伪类选择器（根据特定状态选取元素）"></a>伪类选择器（根据特定状态选取元素）</h2><h2 id="伪元素选择器（选取元素的一部分并设置其样式）"><a href="#伪元素选择器（选取元素的一部分并设置其样式）" class="headerlink" title="伪元素选择器（选取元素的一部分并设置其样式）"></a>伪元素选择器（选取元素的一部分并设置其样式）</h2><h2 id="属性选择器（根据属性或属性值来选取元素）"><a href="#属性选择器（根据属性或属性值来选取元素）" class="headerlink" title="属性选择器（根据属性或属性值来选取元素）"></a>属性选择器（根据属性或属性值来选取元素）</h2><h2 id="css基础属性"><a href="#css基础属性" class="headerlink" title="css基础属性"></a>css基础属性</h2><h3 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h3><p>color<br>font-size<br>text-decoration<br>text-align</p><h3 id="尺寸类"><a href="#尺寸类" class="headerlink" title="尺寸类"></a>尺寸类</h3><p>width<br>height</p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>background-color<br>background-image<br>background-size:cover</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h3><h4 id="CSS-Overview"><a href="#CSS-Overview" class="headerlink" title="CSS Overview"></a>CSS Overview</h4><p>在 Chrome 的管理面板中，开启CSS Overview面板之后，就可以查看当前网站的样式信息了，包括颜色信息、字体信息、媒体查询等</p><p>1.在任意页面打开 Chrome 浏览器的 DevTools；<br>2.单击更多选项 -&gt; More tools -&gt; CSS Overview。</p><h4 id="新的字体编辑器工具"><a href="#新的字体编辑器工具" class="headerlink" title="新的字体编辑器工具"></a>新的字体编辑器工具</h4><p>Chrome DevTools 提供了一个实验性的字体编辑器工具，可以用来改变字体设置。可以用它来改变字体、大小、粗细、行高、字符间距，并实时看到变化</p><p>1.在任意页面打开 Chrome 浏览器的 DevTools；<br>2.点击右上角设置图标 -&gt; 选中左侧 Experiments -&gt; 勾选 Enable New Font Editor Tools within Styles Pane；<br>3.重启浏览器的 DevTools；<br>4.选择HTML元素，其中包括想改变的字体，点击字体图标即可。</p><h1 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h1><p><a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的html文档。</p><p>将模板设计好之后直接填充数据即可而不需要重新设计整个页面。让网站实现界面和数据分离，提高页面、代码的复用性。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎</p><p>特点<br>1.动静分离： Thymeleaf选用html作为模板页，这是任何一款其他模板引擎做不到的！Thymeleaf使用html通过一些特定标签语法代表其含义，但并未破坏html结构，即使无网络、不通过后端渲染也能在浏览器成功打开，大大方便界面的测试和修改。</p><p>2.开箱即用： Thymeleaf提供标准和Spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p><p>3.Springboot官方大力推荐和支持，Springboot官方做了很多默认配置，开发者只需编写对应html即可，大大减轻了上手难度和配置复杂度。</p><h2 id="第一个Thymeleaf程序"><a href="#第一个Thymeleaf程序" class="headerlink" title="第一个Thymeleaf程序"></a>第一个Thymeleaf程序</h2><p>步骤</p><h2 id="创建程序，添加依赖"><a href="#创建程序，添加依赖" class="headerlink" title="创建程序，添加依赖"></a>创建程序，添加依赖</h2><p>首先，打开你的IDEA创建新项目，选择Spring Initializr方式创建Springboot项目 ，然后点击next，然后填写项目名</p><p>勾选其中Web 模块的Spring web依赖以及Template 模块的Thymeleaf依赖。finish 即可：</p><p>如果你创建项目时没有勾选依赖也不要紧，在pom.xml中添加以下依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><p>pom.xml：是项目中的Maven依赖，因为Springboot使用Maven来管理外部jar包依赖，我们只需填写依赖名称配置即可引入该依赖，在本系统中引入Spring web模块(Springmvc)和Thymeleaf的依赖.我们不需要自己去招相关jar包。<br>application.properties: 编写Springboot与各框架整合的一些配置内容。<br>controller：用来编写控制器，主要负责处理请求以及和视图(Thymeleaf)绑定。<br>static：用于存放静态资源，例如html、JavaScript、css以及图片等。<br>templates：用来存放模板引擎Thymeleaf(本质依然是.html文件)</p><h2 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h2><p>项目基于Springboot框架，且选了Spring web(Springmvc)作为mvc框架，其中Thymeleaf就是v(view)视图层，我们需要在controller中指定Thymeleaf页面的url，然后再Model中绑定数据。</p><p>我们在com.Thymeleaf文件下创建controller文件夹，在其中创建urlController.java的controller文件，文件内容(代码)为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thymeleaf.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">urlController</span> </span>{</span><br><span class="line">    <span class="meta">@GetMapping("index")</span><span class="comment">//页面的url地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span></span><br><span class="line"><span class="function">    </span>{</span><br><span class="line">        model.addAttribute(<span class="string">"name"</span>,<span class="string">"bigsai"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>部分含义如下：<br>@controller 注解的意思就是声明这个java文件为一个controller控制器。<br>@GetMapping(“index”) 其中@GetMapping的意思是请求的方式为get方式(即可通过浏览器直接请求)，而里面的index表示这个页面(接口)的url地址(路径)。即在浏览器对项目网页访问的地址。<br>getindex() 是@GetMapping(“index”)注解对应的函数，其类型为String类型返回一个字符串，参数Model类型即用来储存数据供我们Thymeleaf页面使用。<br>model.addAttribute(“name”,”bigsai”) 就是Model存入数据的书写方式，Model是一个特殊的类，相当于维护一个Map一样，而Model中的数据通过controller层的关联绑定在view层(即Thymeleaf中)可以直接使用。<br>return “hello”：这个index就是在templates目录下对应模板(本次为Thymeleaf模板)的名称，即应该对应hello.html这个Thymeleaf文件(与页面关联默认规则为：templates目录下返回字符串.html)。</p><h2 id="编写Thymeleaf页面"><a href="#编写Thymeleaf页面" class="headerlink" title="编写Thymeleaf页面"></a>编写Thymeleaf页面</h2><p>咱们在项目的resources目录下的templates文件夹下面创建一个叫index.html的文件，咱们在这个html文件中的标签修改为这样在Thymeleaf中就可以使用Thymeleaf的语法和规范啦。</p><p>对于第一个Thymelaf程序，你只需将index.html文件改成这样即可：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>  <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello 第一个Thymeleaf程序</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">"${name}"</span>&gt;</span>name是bigsai(我是离线数据)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Thymeleaf语法详解"><a href="#Thymeleaf语法详解" class="headerlink" title="Thymeleaf语法详解"></a>Thymeleaf语法详解</h2><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h2 id="链接表达式-…"><a href="#链接表达式-…" class="headerlink" title="链接表达式: @{…}"></a>链接表达式: @{…}</h2><h2 id="变量表达式-…"><a href="#变量表达式-…" class="headerlink" title="变量表达式: ${…}"></a>变量表达式: ${…}</h2><h2 id="选择变量表达式-…"><a href="#选择变量表达式-…" class="headerlink" title="选择变量表达式: *{…}"></a>选择变量表达式: *{…}</h2><h2 id="消息表达-…"><a href="#消息表达-…" class="headerlink" title="消息表达: #{…}"></a>消息表达: #{…}</h2><h1 id="Bootstrap组件库"><a href="#Bootstrap组件库" class="headerlink" title="Bootstrap组件库"></a>Bootstrap组件库</h1><p>Bootstrap:前端页面框架，用于快速开发响应式页面，一套代码就可以适应平板和PC</p><p>Bootstrap 3 是移动设备优先的，在这个意义上，Bootstrap 代码从小屏幕设备（比如移动设备、平板电脑）开始，然后扩展到大屏幕设备（比如笔记本电脑、台式电脑）上的组件和网格。</p><p><a href="https://www.runoob.com/bootstrap/bootstrap-tutorial.html">教程</a></p><p><a href="https://www.runoob.com/try/bootstrap/layoutit/">Bootstrap 可视化布局系统！</a></p><h2 id="引入bootstrap框架"><a href="#引入bootstrap框架" class="headerlink" title="引入bootstrap框架"></a>引入bootstrap框架</h2><p>1、直接引入：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>优点：方便，简单；</p><p>缺点：使网页加载缓慢，需要有网络的情况；</p><p>2.下载好库再进行引入：<br>优点：加载网页会快点，没有网络的情况也可用；</p><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p><a href="https://www.runoob.com/jquery/jquery-tutorial.html">jQuery菜鸟教程</a><br>jQuery ：是一个 JavaScript 函数库。使用选择器（$）选取DOM对象，并对其进行赋值、取值、事件绑定等操作；主要是操作DOM</p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>国内用百度CDN</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h2><p>基础语法： $(selector).action()</p><p>美元符号定义 jQuery<br>选择符（selector）”查询”和”查找” HTML 元素<br>jQuery 的 action() 执行对元素的操作</p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h2><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>可实现页面无刷新更新数据</p><p>Ajax相当于浏览器发送请求与接受响应的代理人，以实现在不重新加载整个页面下，与服务器交换数据并局部更新网页数据</p><h2 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h2><p>open(method,url,async)<br>规定请求的类型、URL 以及是否异步处理请求。<br>参数<br>    method：请求的类型；GET 或 POST<br>    url：文件在服务器上的位置<br>    async：true（异步）或 false（同步）</p><p>send(string)<br>    将请求发送到服务器。</p><pre><code>string：仅用于 POST 请求</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>{</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line"><span class="javascript">{</span></span><br><span class="line"><span class="javascript"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 XMLHttpRequest 对象</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">{</span></span><br><span class="line"><span class="javascript"><span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>{</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">{</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"/try/ajax/ajax_info.txt"</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">xmlhttp.send();</span></span><br><span class="line"><span class="javascript">}</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"myDiv"</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"loadXMLDoc()"</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios实现了对ajax的封装。<br>Axios 是可以发出 http 请求的 JavaScript 库，在 浏览器 和 node.js 环境中都可以运行。</p><h2 id="axios与ajax的优缺点"><a href="#axios与ajax的优缺点" class="headerlink" title="axios与ajax的优缺点"></a>axios与ajax的优缺点</h2><p>1.axios优点：<br>（1）从浏览器中创建 XMLHttpRequest；<br>（2）支持 Promise API；<br>（3）从 node.js 创建 http 请求；<br>（4）转换请求和响应数据；<br>（5）自动转换JSON数据。</p><p>1.ajax缺点:<br>（1）基于原生的XHR开发，XHR本身的架构不清晰；<br>（2）JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理；<br>（3）不符合关注分离（Separation of Concerns）的原则；<br>（4）配置和调用方式非常混乱，而且基于事件的异步模型不友好。</p><h2 id="GET-请求和POST-请求"><a href="#GET-请求和POST-请求" class="headerlink" title="GET 请求和POST 请求"></a>GET 请求和POST 请求</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../js/axios-0.18.0.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1、向给定ID的用户发起GET 请求</span></span></span><br><span class="line"><span class="javascript">axios.get(<span class="string">'/user?ID=12345'</span>)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理成功情况</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理错误情况</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 总是会执行</span></span></span><br><span class="line"><span class="javascript">  });</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.POST 请求</span></span></span><br><span class="line"><span class="javascript">axios.post(<span class="string">'/user'</span>, {</span></span><br><span class="line"><span class="javascript">    <span class="attr">firstName</span>: <span class="string">'Fred'</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">lastName</span>: <span class="string">'Flintstone'</span></span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>{</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  })</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>{</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">  });</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><p>官方文档：<a href="http://vuejs.org/v2/guide/syntax.html">http://vuejs.org/v2/guide/syntax.html</a></p><p>中文文档: <a href="https://cn.vuejs.org/v2/guide/syntax.html">https://cn.vuejs.org/v2/guide/syntax.html</a></p><h2 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h2><h3 id="标签引入"><a href="#标签引入" class="headerlink" title="标签引入"></a>标签引入</h3><h3 id="本地文件引入"><a href="#本地文件引入" class="headerlink" title="本地文件引入"></a>本地文件引入</h3><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><h3 id="绑定元素属性"><a href="#绑定元素属性" class="headerlink" title="绑定元素属性"></a>绑定元素属性</h3><p>基本语法<br>v-bind:HTML标签的原始属性名=”表达式”</p><p>HTML代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind:value表示将value属性交给Vue来进行管理，也就是绑定到Vue对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- vueValue是一个用来渲染属性值的表达式，相当于标签体中加{{}}的表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"vueValue"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 同样的表达式，在标签体内通过{{}}告诉Vue这里需要渲染； --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在HTML标签的属性中，通过v-bind:属性名="表达式"的方式告诉Vue这里要渲染 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{vueValue}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Vue代码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 创建Vue对象，挂载#app这个div标签</span><br><span class="line">var app = new Vue({</span><br><span class="line">"el":"#app",</span><br><span class="line">"data":{</span><br><span class="line">"vueValue":"太阳当空照"</span><br><span class="line">}</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h4><p>v-bind用于单向绑定数据和元素属性</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可简写为： --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>使用了双向绑定后，就可以实现：页面上数据被修改后，Vue对象中的数据属性也跟着被修改。</p><p>双向数据绑定,一般用在表单类元素如：input，select</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-bind:属性名 效果是从Vue对象渲染到页面 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- v-model:属性名 效果不仅是从Vue对象渲染到页面，而且能够在页面上数据修改后反向修改Vue对象中的数据属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model:value</span>=<span class="string">"vueValue"</span> /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 因为v-model默认收集的就是value值，所以可简写为 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"vueValue"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 考虑到用户在输入数据时，有可能会包含前后空格。而这些前后的空格对我们程序运行来说都是干扰因素，要去掉。在v-model后面加上.trim修饰符即可实现。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model.trim</span>=<span class="string">"vueValue"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>{{vueValue}}<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 创建Vue对象，挂载#app这个div标签</span><br><span class="line">var app = new Vue({</span><br><span class="line">"el":"#app",</span><br><span class="line">"data":{</span><br><span class="line">"vueValue":"太阳当空照"</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h3><h2 id="js表达式与js代码-语句-的区别"><a href="#js表达式与js代码-语句-的区别" class="headerlink" title="js表达式与js代码(语句)的区别"></a>js表达式与js代码(语句)的区别</h2><p>1.表达式：一个表达式会生成一个值<br>  (1)a+b<br>  (2)x===y ‘a’ ? ‘b’</p><p>2.代码<br>  (1)if (){}  </p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- {{ }} 用于输出对象属性和函数返回值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : {{site}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>url : {{url}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>{{details()}}<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对于制作原型或学习，你可以这样导入最新版本： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue({</span></span><br><span class="line"><span class="javascript">        <span class="comment">// el 参数的两种写法</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vm.$mount('#rood'),</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">'#rood'</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// data参数用于定义属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.data参数的对象式写法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: {</span></span><br><span class="line"><span class="javascript">            <span class="attr">site</span>: <span class="string">"菜鸟教程"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">"www.runoob.com"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">alexa</span>: <span class="string">"10000"</span></span></span><br><span class="line"><span class="javascript">        },</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.data参数的函数式写法(vue管理的函数，不能用箭头函数)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data:function(){</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   return{</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     name:'菜鸟'</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   }</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// }</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// methods参数用于定义函数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: {</span></span><br><span class="line"><span class="javascript">            <span class="attr">details</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>  <span class="built_in">this</span>.site + <span class="string">" - 学的不仅是技术，更是梦想！"</span>;</span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }</span></span><br><span class="line"><span class="javascript">    })</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>created() {}<br>VUE对象初始化完成后自动执行</p><h2 id="Element-UI组件库"><a href="#Element-UI组件库" class="headerlink" title="Element UI组件库"></a>Element UI组件库</h2><p>Element UI 是一套采用 Vue 2.0 作为基础框架实现的组件库</p><p><a href="https://element.eleme.cn/#/zh-CN/component/installation">组件</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://unpkg.com/element-ui/lib/theme-chalk/index.css"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/element-ui/lib/index.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>Layout 布局<br>Container 布局容器<br>Color 色彩<br>Typography 字体<br>Border 边框<br>Icon 图标<br>Button 按钮<br>Link 文字链接<br>Form</p><h3 id="表单-1"><a href="#表单-1" class="headerlink" title="表单"></a>表单</h3><p>Radio 单选框<br>Checkbox 多选框<br>Input 输入框<br>InputNumber 计数器<br>Select 选择器<br>Cascader 级联选择器<br>Switch 开关<br>Slider 滑块<br>TimePicker 时间选择器<br>DatePicker 日期选择器<br>DateTimePicker 日期时间选择器<br>Upload 上传<br>Rate 评分<br>ColorPicker 颜色选择器<br>Transfer 穿梭框<br>Form 表单</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>Table 表格<br>Tag 标签<br>Progress 进度条<br>Tree 树形控件<br>Pagination 分页<br>Badge 标记<br>Avatar 头像<br>Skeleton 骨架屏<br>Empty 空状态<br>Descriptions 描述列表<br>Result 结果</p><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p><code>  &lt;el-input v-model="input1"&gt;&lt;/el-input&gt; 输入内容为：{{input1}}</code></p><h3 id="Table表格组件"><a href="#Table表格组件" class="headerlink" title="Table表格组件"></a>Table表格组件</h3><h4 id="el-table"><a href="#el-table" class="headerlink" title="el-table"></a>el-table</h4><p>:data属性   单向数据绑定</p><p>stripe属性可以创建带斑马纹的表格</p><p>Table 组件提供了单选的支持，只需要配置highlight-current-row属性即可实现单选。之后由current-change事件来管理选中时触发的事件，它会传入currentRow，oldCurrentRow。如果需要显示索引，可以增加一列el-table-column，设置type属性为index即可显示从 1 开始的索引号。</p><h4 id="el-table-column"><a href="#el-table-column" class="headerlink" title="el-table-column"></a>el-table-column</h4><p>prop属性来对应对象中的键名即可填入数据，<br>label属性来定义表格的列名。<br>width属性来定义列宽。<br>align=“center”：设置表格内居中</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">size</span>=<span class="string">"small"</span> <span class="attr">current-row-key</span>=<span class="string">"id"</span> <span class="attr">:data</span>=<span class="string">"dataList"</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">"index"</span> <span class="attr">align</span>=<span class="string">"center"</span> <span class="attr">label</span>=<span class="string">"序号"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"type"</span> <span class="attr">label</span>=<span class="string">"图书类别"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span> <span class="attr">label</span>=<span class="string">"图书名称"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"description"</span> <span class="attr">label</span>=<span class="string">"描述"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">"操作"</span> <span class="attr">align</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"mini"</span> @<span class="attr">click</span>=<span class="string">"handleUpdate(scope.row)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"danger"</span> <span class="attr">size</span>=<span class="string">"mini"</span> @<span class="attr">click</span>=<span class="string">"handleDelete(scope.row)"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h3><p>Alert 警告<br>Loading 加载<br>Message 消息提示<br>MessageBox 弹框<br>Notification 通知<br>Navigation<br>NavMenu 导航菜单<br>Tabs 标签页<br>Breadcrumb 面包屑<br>PageHeader 页头<br>Dropdown 下拉菜单<br>Steps 步骤条</p><h3 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>Dialog 对话框<br>Tooltip 文字提示<br>Popover 弹出框<br>Popconfirm 气泡确认框<br>Card 卡片<br>Carousel 走马灯<br>Collapse 折叠面板<br>Timeline 时间线<br>Divider 分割线<br>Calendar 日历<br>Image 图片<br>Backtop 回到顶部<br>InfiniteScroll 无限滚动<br>Drawer 抽屉<br>¶Button 按钮</p><h3 id="通过js触发按钮的点击事件"><a href="#通过js触发按钮的点击事件" class="headerlink" title="通过js触发按钮的点击事件"></a>通过js触发按钮的点击事件</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">"primary"</span> <span class="attr">size</span>=<span class="string">"mini"</span> @<span class="attr">click</span>=<span class="string">"handleUpdate(scope.row)"</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//弹出编辑窗口</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleUpdate</span>(<span class="params">row</span>)</span> {</span></span><br><span class="line"><span class="javascript">        axios.get(<span class="string">"/books/"</span>+row.id).then(<span class="function">(<span class="params">res</span>)=&gt;</span>{</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(res.data.flag &amp;&amp; res.data.data != <span class="literal">null</span> ){</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible4Edit = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.formData = res.data.data;</span></span><br><span class="line"><span class="javascript">            }<span class="keyword">else</span>{</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$message.error(<span class="string">"数据同步失败，自动刷新"</span>);</span></span><br><span class="line"><span class="javascript">            }</span></span><br><span class="line"><span class="javascript">        }).finally(<span class="function">()=&gt;</span>{</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.重新加载数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.getAll();</span></span><br><span class="line"><span class="javascript">        });</span></span><br><span class="line"><span class="javascript">    },</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="javaweb"><a href="#javaweb" class="headerlink" title="javaweb"></a>javaweb</h1><h1 id="https-heavy-code-industry-gitee-io-code-heavy-industry-read-me-vuepress-html"><a href="#https-heavy-code-industry-gitee-io-code-heavy-industry-read-me-vuepress-html" class="headerlink" title="https://heavy_code_industry.gitee.io/code_heavy_industry/read-me/vuepress.html"></a><a href="https://heavy_code_industry.gitee.io/code_heavy_industry/read-me/vuepress.html">https://heavy_code_industry.gitee.io/code_heavy_industry/read-me/vuepress.html</a></h1><p><a href="https://vuepress.vuejs.org/zh/guide/">https://vuepress.vuejs.org/zh/guide/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器人</title>
      <link href="/2022/032659541.html"/>
      <url>/2022/032659541.html</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h1><p>WebSocket是一种在单个TCP连接上进行全双工通信的协议。WebSocket使得客户端和服务器之间的数据交换变得更加简单，允许服务端主动向客户端推送数据。在WebSocket API中，浏览器和服务器只需要完成一次握手，两者之间就直接可以创建持久性的连接，并进行双向数据传输。</p><h1 id="OneBot标准"><a href="#OneBot标准" class="headerlink" title="OneBot标准"></a>OneBot标准</h1><p>OneBot标准是一个聊天机器人应用接口标准，旨在统一不同聊天平台上的机器人应用开发接口，使开发者只需编写一次代码即可应用到多种机器人平台。</p><h1 id="QQ机器人"><a href="#QQ机器人" class="headerlink" title="QQ机器人"></a>QQ机器人</h1><p>茉莉QQ机器人<br>项目：<a href="https://github.com/xggz/mqr">https://github.com/xggz/mqr</a><br>文档：<a href="http://mqr.molicloud.com/">http://mqr.molicloud.com/</a></p><p>QQBotHub<br>QQ 机器人 | 基于 Konata.Core | 一键免费部署<br>项目：<a href="https://github.com/yiyungent/QQBotHub">https://github.com/yiyungent/QQBotHub</a><br>文档：<a href="https://moeci.com/QQBotHub/#/">https://moeci.com/QQBotHub/#/</a></p><p>高效率 QQ 机器人支持库<br><a href="https://github.com/mamoe/mirai">https://github.com/mamoe/mirai</a></p><h2 id="go-cqhttp"><a href="#go-cqhttp" class="headerlink" title="go-cqhttp"></a>go-cqhttp</h2><p><a href="https://onebot.dev/ecosystem.html#onebot-%E5%AE%9E%E7%8E%B0">OneBot</a><br>go-cqhttp（一个 QQ 平台的 OneBot 实现）<br><a href="https://docs.go-cqhttp.org/guide/quick_start.html#%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B"> go-cqhttp 文档</a><br>go-cqhttp模拟了qq的客户端，同时提供了一系列的接口，用来收发信息。只是一个框架</p><h3 id="搭建"><a href="#搭建" class="headerlink" title="搭建"></a>搭建</h3><p>建议使用ubuntu服务器<br>下载：64 位 Linux    Not available    go-cqhttp_linux_amd64.tar.gz</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 创建并进入一个目录</span></span><br><span class="line">cd /usr/local/app/goqq</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">tar -xzvf [文件名] </span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">sudo ./go-cqhttp</span><br></pre></td></tr></tbody></table></figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>config.yml</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>1.第一次无法登录，隔了一天再登录又可以了</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>进入对应目录 <code>./go-cqhttp</code>前台运行。如果你操作其他命令或者关闭 ssh 工具，程序自然就关闭了</p><h2 id="Nonebot2框架"><a href="#Nonebot2框架" class="headerlink" title="Nonebot2框架"></a>Nonebot2框架</h2><p>是一个可扩展的 Python 异步机器人框架：</p><p>Nonebot2需要先搭建go-cqhttp<br>官方文档：<a href="https://v2.nonebot.dev/docs/">https://v2.nonebot.dev/docs/</a><br>教程博客：<a href="http://blog.well404.top/">http://blog.well404.top/</a></p><h3 id="搭建-1"><a href="#搭建-1" class="headerlink" title="搭建"></a>搭建</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv qqbot  #创建虚拟环境</span><br><span class="line">workon qqbot   #进入虚拟环境</span><br><span class="line"></span><br><span class="line">pip install nb-cli    #通过脚手架安装，NoneBot2 会作为其依赖被一起安装</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在提示选择通信方式时，选择「反向 Websocket 通信」，程序将会自动生成默认配置文件。</p><p>打开 go-cqhttp 默认配置文件 config.yml 进行简单配置，修改 QQ 账号以及密码。再次运行 go-cqhttp，可能需要根据提示进行扫码或滑块验证，如果得到以下提示则登录成功：</p><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><p><a href="https://v2.nonebot.dev/store">插件商店</a><br>前往商店点击复制 nb-cli 安装命令至命令行执行即可安装。</p><p><a href="https://github.com/nonepkg/nonebot-plugin-manager">https://github.com/nonepkg/nonebot-plugin-manager</a></p><h3 id="创建一个bot"><a href="#创建一个bot" class="headerlink" title="创建一个bot"></a>创建一个bot</h3><p>若你已经安装了 nb-cli，可以使用（lan）引（ren）导安装方式：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nb create</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>选择第二项Create a New Project创建一个 bot 项目<br>  输入项目名<br>  选择第一项新建文件夹<br>  载入 nonebot 内置插件<br>  因为我们使用 cqhttp，所以只选择 cqhttp 就行了</p><p>之后在目录下就会创建一个以 bot 项目命名的文件夹<br>cd 项目名<br>nb run  #运行Nonebot2</p><h3 id="使用-Docker-部署（推荐）"><a href="#使用-Docker-部署（推荐）" class="headerlink" title="使用 Docker 部署（推荐）"></a>使用 Docker 部署（推荐）</h3><p><a href="https://v2.nonebot.dev/docs/tutorial/deployment">https://v2.nonebot.dev/docs/tutorial/deployment</a></p><h2 id="Mirai"><a href="#Mirai" class="headerlink" title="Mirai"></a>Mirai</h2><p>使用 Kotlin 编写的高效率 QQ 机器人框架<br><a href="https://github.com/mamoe/mirai">github地址</a></p><p><a href="https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md">mirai官方生态文档</a></p><h3 id="下载-MCL-Installer"><a href="#下载-MCL-Installer" class="headerlink" title="下载 MCL Installer"></a>下载 MCL Installer</h3><p><a href="https://github.com/iTXTech/mcl-installer">MCL Installer</a><br>支持自动下载Java运行环境 和 Mirai Console Loader </p><p>MCL Installer安装时自动下载了 Mirai Console Loader（简称 MCL）。</p><p>Mirai Console Loader它的工作就是简化 console 启动流程，一键帮你下载 jar 文件，自动更新，文件损坏检查…… 你能在手动启动时担心的问题 mirai-console-loader 都帮你想到了</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -LJO https://github.com/iTXTech/mcl-installer/releases/download/v1.0.7/mcl-installer-1.0.7-linux-amd64-musl </span><br><span class="line"></span><br><span class="line">chmod +x mcl-installer-1.0.7-linux-amd64-musl</span><br><span class="line">./mcl-installer-1.0.7-linux-amd64-musl</span><br><span class="line"></span><br><span class="line">./mcl   #启动</span><br></pre></td></tr></tbody></table></figure><h3 id="了解运行环境"><a href="#了解运行环境" class="headerlink" title="了解运行环境"></a>了解运行环境</h3><p>文件夹名称    用途<br>scripts    存放启动器的脚本，一般不需要在意他们<br>plugins    存放插件<br>data    存放插件的数据，一般不需要在意它们<br>config    存放插件的配置，可以打开并修改配置<br>logs    存放运行时的日志，日志默认保留 7 天</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><a href="https://github.com/mzdluo123/TxCaptchaHelper">https://github.com/mzdluo123/TxCaptchaHelper</a></p><p>下载滑动验证助手客户端<br>在mcl控制台中使用命令<code>login &lt;qq&gt; [password] [protocol]</code><br>会弹出url,把它复制到滑动验证助手app中</p><p>第二种登录方式（将弹出的链接发送给手机QQ打开，会得到一个二维码，使用手机QQ扫码验证）</p><p>ANDROID_PAD是ipad</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">login 3385642151 lyxwlp0301 ANDROID_PAD</span><br></pre></td></tr></tbody></table></figure><p>(如果你想让bot自动登录，可以编辑mcl文件夹下的config/Console/AutoLogin.yml)</p><p>自动登录 配置（同协议文件）&nbsp;&nbsp;&nbsp;<br>  账号 account:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ‘如account:3488890641<br>  密码 value:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ‘如value:123123645.</p><h3 id="插件-1"><a href="#插件-1" class="headerlink" title="插件"></a>插件</h3><p>官方(chat-command，mirai-api-http，mirai-native）</p><p>刚刚装好的 Mirai Console 是没有任何功能的。功能将由插件提供。<br><a href="https://mirai.mamoe.net/category/11/%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83">插件发布</a><br>如果是 JAR 文件的插件，放入 plugins 即可。其他插件一般都有特殊说明如何使用，请参考它们的说明。<br>下载插件<br>将插件解压到 mcl目录\plugins 文件夹下</p><h4 id="占卜、周易、运势插件巫毒插件"><a href="#占卜、周易、运势插件巫毒插件" class="headerlink" title="占卜、周易、运势插件巫毒插件"></a>占卜、周易、运势插件巫毒插件</h4><p><a href="https://mirai.mamoe.net/topic/666/%E5%8D%A0%E5%8D%9C-%E5%91%A8%E6%98%93-%E8%BF%90%E5%8A%BF%E6%8F%92%E4%BB%B6%E5%B7%AB%E6%AF%92%E6%8F%92%E4%BB%B6">https://mirai.mamoe.net/topic/666/%E5%8D%A0%E5%8D%9C-%E5%91%A8%E6%98%93-%E8%BF%90%E5%8A%BF%E6%8F%92%E4%BB%B6%E5%B7%AB%E6%AF%92%E6%8F%92%E4%BB%B6</a></p><h4 id="Plum"><a href="#Plum" class="headerlink" title="Plum"></a>Plum</h4><p><a href="https://mirai.mamoe.net/topic/241/plum-%E6%A2%85%E8%8A%B1%E5%A8%98-%E6%8A%A5%E6%97%A9%E6%99%9A%E5%AE%89-%E6%99%BA%E8%83%BD%E7%82%B9%E6%AD%8C-%E4%B8%80%E8%A8%80-%E9%9A%8F%E6%9C%BA%E5%8A%A8%E6%BC%AB%E5%A3%81%E7%BA%B8-%E8%81%8A%E5%A4%A9ai/2">Plum</a></p><p>Plum-1.0-SNAPSHOT.mirai.jar<br>功能</p><p>每天5点：每日句子 + 倒计时（可自定义倒计时事件）<br>每天21点：每日诗词<br>戳一戳：随机一言<br>@ + 问题：AI聊天（默认实现是青云客API，可自行修改）<br>点歌：本插件支持3种主流音乐平台 网易云音乐，酷狗音乐，QQ音乐。默认按照 网易云音乐 -&gt; 酷狗音乐 -&gt; QQ音乐 顺序查找。通过“点歌”指令以卡片形式点歌，通过“唱歌”指令以语音条形式唱歌。</p><h4 id="自动定义回复插件"><a href="#自动定义回复插件" class="headerlink" title="自动定义回复插件"></a>自动定义回复插件</h4><p><a href="https://mirai.mamoe.net/topic/636/console-%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D%E6%8F%92%E4%BB%B6">https://mirai.mamoe.net/topic/636/console-%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D%E6%8F%92%E4%BB%B6</a></p><p>浏览器进入<a href="http://localhost:20044/index.html">http://localhost:20044/index.html</a></p><h4 id="思知机器人插件"><a href="#思知机器人插件" class="headerlink" title="思知机器人插件"></a>思知机器人插件</h4><p>自己跟自己聊天，不好用<br><a href="https://github.com/thetbw/my-bot">https://github.com/thetbw/my-bot</a> </p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://zhuanlan.zhihu.com/p/411513359">https://zhuanlan.zhihu.com/p/411513359</a></p><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><p>下载插件：Mirai Console</p><h1 id="微信机器人"><a href="#微信机器人" class="headerlink" title="微信机器人"></a>微信机器人</h1><p>WeChat SDK for Go （微信SDK：简单、易用）<br>使用Golang开发的微信SDK，简单、易用。<br>项目：<a href="https://github.com/silenceper/wechat">https://github.com/silenceper/wechat</a><br>文档：<a href="https://silenceper.com/wechat/">https://silenceper.com/wechat/</a></p><p>微信助手<br>本项目依赖于网页版微信进行开发，如登录不了，则无法使用此项目；且无任何解决办法。<br>1.每日定时给好友（女友）发送定制消息。<br>2.机器人自动回复好友。<br>3.群助手功能（例如：查询垃圾分类、天气、日历、电影实时票房、快递物流、PM2.5等）<br><a href="https://github.com/sfyc23/EverydayWechat">https://github.com/sfyc23/EverydayWechat</a></p><p>微信每日说<br>教你用Node做一个微信哄女友(基友)神器！还能帮女朋友解决垃圾分类难题<br><a href="https://github.com/leochen-g/wechatBot">https://github.com/leochen-g/wechatBot</a></p><p>itchat开源的微信个人号接口<br>微信个人号接口、微信机器人及命令行微信，三十行即可自定义个人号机器人<br>项目：<a href="https://github.com/littlecodersh/ItChat">https://github.com/littlecodersh/ItChat</a><br>文档：<a href="https://itchat.readthedocs.io/zh/latest/">https://itchat.readthedocs.io/zh/latest/</a></p><h2 id="Wechaty"><a href="#Wechaty" class="headerlink" title="Wechaty"></a>Wechaty</h2><p>一个开源的的对话机器人 SDK，支持 个人号 微信<br>项目：<a href="https://github.com/wechaty/wechaty">https://github.com/wechaty/wechaty</a><br>文档：<a href="https://wechaty.gitbook.io/wechaty/v/zh/">https://wechaty.gitbook.io/wechaty/v/zh/</a></p><h2 id="贴心小助手客户端"><a href="#贴心小助手客户端" class="headerlink" title="贴心小助手客户端"></a>贴心小助手客户端</h2><p>微信机器人, 群管理、头像处理、智能机器人对话、好友互动、定时任务，情侣每日说等功能的配置<br>项目：<a href="https://github.com/lizhounet/wx-intimate-pro">https://github.com/lizhounet/wx-intimate-pro</a></p><h2 id="WxPusher-微信推送服务"><a href="#WxPusher-微信推送服务" class="headerlink" title="WxPusher (微信推送服务)"></a>WxPusher (微信推送服务)</h2><p>一个使用微信公众号作为通道的，实时信息推送平台，你可以通过调用API的方式，把信息推送到微信上，无需安装额外的软件，即可做到信息实时通知。 你可以使用WxPusher来做服务器报警通知、抢课通知、抢票通知，信息更新提示等。<br>项目：<a href="https://github.com/wxpusher/wxpusher-sdk-java/">https://github.com/wxpusher/wxpusher-sdk-java/</a><br>文档：<a href="https://wxpusher.zjiecode.com/docs/#/">https://wxpusher.zjiecode.com/docs/#/</a></p><h1 id="智能机器人"><a href="#智能机器人" class="headerlink" title="智能机器人"></a>智能机器人</h1><p>傻妞机器人<br><a href="https://github.com/cdle/sillyGirl">https://github.com/cdle/sillyGirl</a></p><p>图灵机器人<br>需求实名制认证，并每天免费数量只有 100 条<br><a href="http://www.turingapi.com/">http://www.turingapi.com/</a></p><p>青云客智能聊天机器人<br>无须申请，无数量限制，但有点智障，分手神器。分手神器，慎用<br><a href="http://api.qingyunke.com/">http://api.qingyunke.com/</a></p><p>智能闲聊（腾讯）<br>申请使用，免费且无限量。大厂靠谱<br><a href="https://ai.qq.com/">https://ai.qq.com/</a></p><p>天行机器人<br>认证后有 7 万条免费使用。之后收费：1 万条/1 块钱<br><a href="https://www.tianapi.com/apiview/47">https://www.tianapi.com/apiview/47</a></p><p>海知智能<br>功能很强大，不仅仅用于聊天。需申请 key，免费<br><a href="https://ruyi.ai/">https://ruyi.ai/</a></p><p>思知对话机器人<br>免费，可不申请 appid<br><a href="https://www.ownthink.com/">https://www.ownthink.com/</a></p><p>一个AI<br>免费且无数量限制。可自定义回复、对话、场景。但高级功能使用比较复杂。但已长时间没人维护<br><a href="http://www.yige.ai/">http://www.yige.ai/</a></p><p>小I机器人<br><a href="https://www.xiaoi.com/index">https://www.xiaoi.com/index</a></p><p>茉莉机器人<br><a href="https://mlyai.com/">https://mlyai.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> qq机器人,微信机器人 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python高级</title>
      <link href="/2022/03267198.html"/>
      <url>/2022/03267198.html</url>
      
        <content type="html"><![CDATA[<h1 id="FuzzyWuzzy模糊匹配库"><a href="#FuzzyWuzzy模糊匹配库" class="headerlink" title="FuzzyWuzzy模糊匹配库"></a>FuzzyWuzzy模糊匹配库</h1><p><a href="https://mp.weixin.qq.com/s/Zj6AoQSD4u2KwY6D1PCfew">https://mp.weixin.qq.com/s/Zj6AoQSD4u2KwY6D1PCfew</a></p><p>FuzzyWuzzy 是一个简单易用的模糊字符串匹配工具包。它依据 Levenshtein Distance 算法，计算两个序列之间的差异。</p><p>Levenshtein Distance算法，又叫 Edit Distance算法，是指两个字符串之间，由一个转成另一个所需的最少编辑操作次数。许可的编辑操作包括将一个字符替换成另一个字符，插入一个字符，删除一个字符。一般来说，编辑距离越小，两个串的相似度越大。</p><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h2 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h2><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。<br>Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    download_task(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    download_task(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>下面是运行程序得到的一次运行结果。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了6秒</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">总共耗费了13.01秒.</span><br></pre></td></tr></tbody></table></figure><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="comment"># Process类创建了进程对象</span></span><br><span class="line">    <span class="comment"># 通过target参数我们传入一个函数来表示进程启动后要执行的代码，后面的args是一个元组，它代表了传递给函数的参数。</span></span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">'Python从入门到住院.pdf'</span>, ))</span><br><span class="line">    p1.start()   <span class="comment">#启动进程</span></span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">'Peking Hot.avi'</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()  <span class="comment">#表示等待进程执行结束</span></span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动下载进程，进程号[1530].</span><br><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">启动下载进程，进程号[1531].</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了10秒</span><br><span class="line">总共耗费了10.01秒.</span><br></pre></td></tr></tbody></table></figure><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_task</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(string, end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Ping'</span>, )).start()</span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Pong'</span>, )).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h2 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h2><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="comment"># 使用threading模块的Thread类来创建线程</span></span><br><span class="line">    t1 = Thread(target=download, args=(<span class="string">'Python从入门到住院.pdf'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = Thread(target=download, args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.3f秒'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (self._filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, money</span>):</span></span><br><span class="line">        <span class="comment"># 计算存款后的余额</span></span><br><span class="line">        new_balance = self._balance + money</span><br><span class="line">        <span class="comment"># 模拟受理存款业务需要0.01秒的时间</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line">        <span class="comment"># 修改账户余额</span></span><br><span class="line">        self._balance = new_balance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account, money</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建100个存款的线程向同一个账户中存钱</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="comment"># 等所有存款的线程都执行完毕</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line">        self._lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, money</span>):</span></span><br><span class="line">        <span class="comment"># 先获取锁才能执行后续的代码</span></span><br><span class="line">        self._lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_balance = self._balance + money</span><br><span class="line">            sleep(<span class="number">0.01</span>)</span><br><span class="line">            self._balance = new_balance</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            self._lock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account, money</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h2 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h2><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到过Python中有嵌入C/C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。有一大类的任务都属于I/O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h2 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h2><p>现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，在后续的课程中会进行讲解。</p><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><h3 id="将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="将耗时间的任务放到线程中以获得更好的用户体验。"></a>将耗时间的任务放到线程中以获得更好的用户体验。</h3><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验</p><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadTaskHandler</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'下载完成!'</span>)</span><br><span class="line">            <span class="comment"># 启用下载按钮</span></span><br><span class="line">            button1.config(state=tkinter.NORMAL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">        <span class="comment"># 禁用下载按钮</span></span><br><span class="line">        button1.config(state=tkinter.DISABLED)</span><br><span class="line">        <span class="comment"># 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)</span></span><br><span class="line">        <span class="comment"># 在线程中处理耗时间的下载任务</span></span><br><span class="line">        DownloadTaskHandler(daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_about</span>():</span></span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">'关于'</span>, <span class="string">'作者: 骆昊(v1.0)'</span>)</span><br><span class="line"></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200x150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'下载'</span>, command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'关于'</span>, command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h3 id="使用多进程对复杂任务进行“分而治之”。"><a href="#使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="使用多进程对复杂任务进行“分而治之”。"></a>使用多进程对复杂任务进行“分而治之”。</h3><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br><span class="line">        total += number</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Execution time: %.3fs'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_handler</span>(<span class="params">curr_list, result_queue</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> curr_list:</span><br><span class="line">        total += number</span><br><span class="line">    result_queue.put(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    processes = []</span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 启动8个进程将数据切片后进行运算</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        p = Process(target=task_handler,</span><br><span class="line">                    args=(number_list[index:index + <span class="number">12500000</span>], result_queue))</span><br><span class="line">        index += <span class="number">12500000</span></span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># 开始记录所有进程执行完成花费的时间</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line">    <span class="comment"># 合并执行结果</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> result_queue.empty():</span><br><span class="line">        total += result_queue.get()</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Execution time: '</span>, (end - start), <span class="string">'s'</span>, sep=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p><h1 id="openpyxl模块处理Excel电子表格"><a href="#openpyxl模块处理Excel电子表格" class="headerlink" title="openpyxl模块处理Excel电子表格"></a>openpyxl模块处理Excel电子表格</h1><p><a href="https://zhuanlan.zhihu.com/p/351814769">https://zhuanlan.zhihu.com/p/351814769</a></p><p><a href="https://blog.csdn.net/weixin_44288604/article/details/120731317">https://blog.csdn.net/weixin_44288604/article/details/120731317</a></p><p>Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，由于微软从Office 2007开始使用了新的文件格式，这使得Office Excel和LibreOffice Calc、OpenOffice Calc是完全兼容的，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line">ws[<span class="string">'A1'</span>] = <span class="number">42</span></span><br><span class="line">ws.append([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">ws[<span class="string">'A2'</span>] = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">"sample.xlsx"</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="excel文档和创建对象"><a href="#excel文档和创建对象" class="headerlink" title="excel文档和创建对象"></a>excel文档和创建对象</h2><ol><li>工作薄(workbook):一个EXCEL文件就称为一个工作薄,一个工作薄中可以包含若干张工作表。打开或者创建一个Excel需要创建一个<strong>Workbook对象</strong></li><li>工作表(sheet):工作薄中的每一张表格称为工作表,每张工作表都有一个标签,默认为sheet1\sheet2\sheet3来命名，(一个工作 薄默认为由3个工作表组成)。获取一个表则需要先创建一个Workbook对象，然后使用该对象的方法来得到一个<strong>Worksheet对象</strong></li><li>活动表(active sheet)：指当前正在操作的工作表</li><li>行(row): 工作表中的每一行行首数字(1、2、3、)称为行标题;一张工作表最多有65536行</li><li>列(column): 列标题:工作表中每一列列首的字母(A、B、C)称为列标题;一张工作表最多有256列</li><li>单元格(cell): 工作表的每一个格称为单元格。如果要获取表中的数据，那么得到Worksheet对象以后再从中获取代表单元格的<strong>Cell对象</strong></li></ol><h2 id="Workbook对象"><a href="#Workbook对象" class="headerlink" title="Workbook对象"></a>Workbook对象</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.创建</span></span><br><span class="line"><span class="keyword">from</span>  openpyxl <span class="keyword">import</span>  Workbook </span><br><span class="line"><span class="comment">#实例化Workbook对象</span></span><br><span class="line">wb = Workbook()</span><br><span class="line"><span class="comment"># 激活 worksheet</span></span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.打开已有的excel</span></span><br><span class="line"><span class="keyword">from</span> openpyxl  <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="comment">#实例化Workbook对象</span></span><br><span class="line">wb2 = load_workbook(<span class="string">'文件名称.xlsx'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="Workbook对象属性（工作簿操作）"><a href="#Workbook对象属性（工作簿操作）" class="headerlink" title="Workbook对象属性（工作簿操作）"></a>Workbook对象属性（工作簿操作）</h3><p>sheetnames：获取工作簿中的表（列表）<br>active：获取当前活跃的Worksheet<br>worksheets：以列表的形式返回所有的Worksheet(表格)<br>read_only：判断是否以read_only模式打开Excel文档<br>encoding：获取文档的字符集编码<br>properties：获取文档的元数据，如标题，创建者，创建日期等</p><h2 id="Worksheet对象-工作表操作"><a href="#Worksheet对象-工作表操作" class="headerlink" title="Worksheet对象(工作表操作)"></a>Worksheet对象(工作表操作)</h2><p>title：表格的标题<br>max_row：表格的最大行<br>min_row：表格的最小行<br>max_column：表格的最大列<br>min_column：表格的最小列<br>rows：按行获取单元格(Cell对象) - 生成器<br>columns：按列获取单元格(Cell对象) - 生成器<br>values：按行获取表格的内容(数据) - 生成器</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例化Worksheet对象</span></span><br><span class="line">worksheet = wb[<span class="string">'排序商品信息'</span>]</span><br></pre></td></tr></tbody></table></figure><h2 id="Cell对象（单元格）"><a href="#Cell对象（单元格）" class="headerlink" title="Cell对象（单元格）"></a>Cell对象（单元格）</h2><p>row：单元格所在的行<br>column：单元格坐在的列<br>value：单元格的值<br>coordinate：单元格的坐标</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#实例化Cell对象</span></span><br><span class="line">cell = sheet[<span class="string">'B1'</span>]</span><br></pre></td></tr></tbody></table></figure><h1 id="docx模块处理Word文档"><a href="#docx模块处理Word文档" class="headerlink" title="docx模块处理Word文档"></a>docx模块处理Word文档</h1><p><a href="https://blog.csdn.net/weixin_44374471/article/details/100010360">https://blog.csdn.net/weixin_44374471/article/details/100010360</a></p><h2 id="Document对象"><a href="#Document对象" class="headerlink" title="Document对象"></a>Document对象</h2><h1 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h1><h2 id="Time库"><a href="#Time库" class="headerlink" title="Time库"></a>Time库</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.time() <span class="comment">#获取当前时间戳（计算机内部时间）</span></span><br><span class="line"><span class="comment"># 1643336568.9237003</span></span><br><span class="line">time.ctime(time.time())  <span class="comment">#可以传入时间戳格式化时间</span></span><br><span class="line"><span class="comment">#'Sat Jan 29 15:21:48 2022'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.loaltime() <span class="comment">#本地时间  Sat Apr 16 22:34:40 2022</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime()))  <span class="comment">#格式化时间</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>获取时间：</p><h3 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h3><p>time.strftime(tpl,ts)<br>    tpl：定义输出效果<br>    ts：struct_time元组</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>,time.gmtime())</span><br><span class="line"><span class="comment">#'2022-01-28 03:04:00'</span></span><br><span class="line"></span><br><span class="line">time.strftime(<span class="string">"%a %b %d %H:%M:%S"</span>,time.gmtime())</span><br><span class="line"><span class="comment">#'Fri Jan 28 03:07:14'</span></span><br></pre></td></tr></tbody></table></figure><h3 id="将格式化字符串转换为时间戳"><a href="#将格式化字符串转换为时间戳" class="headerlink" title="将格式化字符串转换为时间戳"></a>将格式化字符串转换为时间戳</h3><p>strptime(str,tpl)<br>    str:字符串形式的时间值<br>    tpl：定义输入效果</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">timestr = <span class="string">'2022-01-28 03:04:00'</span></span><br><span class="line">                     </span><br><span class="line">time.strptime(timestr,<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">                     </span><br><span class="line"><span class="comment">#time.struct_time(tm_year=2022, tm_mon=1, tm_mday=28, tm_hour=3, tm_min=4, tm_sec=0, #tm_wday=4, tm_yday=28, tm_isdst=-1)</span></span><br></pre></td></tr></tbody></table></figure><h3 id="计时器功能"><a href="#计时器功能" class="headerlink" title="计时器功能"></a>计时器功能</h3><h2 id="datetime库"><a href="#datetime库" class="headerlink" title="datetime库"></a>datetime库</h2><p>datetime 基于 time 进行了封装，提供了更多实用的函数。</p><h3 id="date类"><a href="#date类" class="headerlink" title="date类"></a>date类</h3><p>只关注日期</p><h3 id="time类"><a href="#time类" class="headerlink" title="time类"></a>time类</h3><p>只关注时间</p><h3 id="datetime类"><a href="#datetime类" class="headerlink" title="datetime类"></a>datetime类</h3><p>同时有时间和日期</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">d=datetime.datetime.now()</span><br><span class="line">d.year</span><br><span class="line">d.month</span><br><span class="line">d.day</span><br><span class="line">d.hour</span><br><span class="line">d.minute</span><br><span class="line">d.second</span><br><span class="line">d.microsecond</span><br><span class="line">d.tzinfo</span><br><span class="line"> </span><br><span class="line">d.date() <span class="comment"># 返回 date 对象</span></span><br><span class="line">d.time() <span class="comment"># 返回 time 对象</span></span><br><span class="line">d.replace(name=value) <span class="comment"># 前面所述各项属性是 read-only 的，需要此方法才可更改</span></span><br><span class="line">d.timetuple() <span class="comment"># 返回time.struct_time 对象</span></span><br><span class="line">dattime.strftime(<span class="built_in">format</span>) <span class="comment"># 按照 format 进行格式化输出</span></span><br><span class="line">...</span><br></pre></td></tr></tbody></table></figure><h3 id="timedelta类"><a href="#timedelta类" class="headerlink" title="timedelta类"></a>timedelta类</h3><p>主要用于计算时间跨度</p><h1 id="click命令行模块"><a href="#click命令行模块" class="headerlink" title="click命令行模块"></a>click命令行模块</h1><p>使用@click.command()装饰指定函数，使之成为命令行接口；<br>使用@click.argument()或者@click.option()装饰函数，为其添加命令行选项等。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> click </span><br><span class="line"><span class="comment"># 装饰器@click.command()会将函数包装成 click 对象</span></span><br><span class="line"><span class="meta">@click.command() </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    click.echo(<span class="string">"hello click"</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="打包跨平台可执行程序"><a href="#打包跨平台可执行程序" class="headerlink" title="打包跨平台可执行程序"></a>打包跨平台可执行程序</h2><p>通过click编写了简单的命令行方法后，还需要把.py文件转换成可以在控制台里运行的命令行程序。最简单的方法就是加上如下代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if __name__ == '__main__':</span><br><span class="line">    command()</span><br></pre></td></tr></tbody></table></figure><p>click支持使用setuptools来更好的实现命令行程序打包，把源码文件打包成系统中的可执行程序，并且不限平台。一般可通过在源码根目录下创建setup.py脚本，下面是一段简单的打包代码：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">from setuptools import setup</span><br><span class="line">setup(</span><br><span class="line">    name='hello',</span><br><span class="line">    version='0.1',</span><br><span class="line">    py_modules=['hello'],</span><br><span class="line">    install_requires=[</span><br><span class="line">        'click',</span><br><span class="line">    ],</span><br><span class="line">    entry_points='''</span><br><span class="line">        [console_scripts]</span><br><span class="line">        hello=hello:cli</span><br><span class="line">    ''',</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><p>)<br>留意entry_points字段，在console_scripts下，每一行都是一个控制台脚本，等号左边的是脚本的名称，右边的是click命令的导入路径。</p><h1 id="PyScript"><a href="#PyScript" class="headerlink" title="PyScript"></a>PyScript</h1><p><a href="https://pyscript.net/">PyScript</a>是 Anaconda 团队开发的一个 Javascipt 库，可以在 HTML 标签里嵌入 Python 代码，无需服务端就可以运行 Python 代码。</p><h2 id="如何使用-PyScript"><a href="#如何使用-PyScript" class="headerlink" title="如何使用 PyScript"></a>如何使用 PyScript</h2><p>PyScript 使用以下三个主要组件在 html 中编写 Python：</p><p>py-env 定义了运行 Python 代码所需的包。<br>py-script 是在网页中编写 Python 代码的地方。<br>py-repl 创建一个 REPL（读取-评估-打印循环）组件，用于评估用户输入的代码并显示结果。</p><h1 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h1><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime   <span class="comment">#导入datetime模块中的datetime类</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将时间戳转换为有用的时间格式。</span></span><br><span class="line">time = datetime.fromtimestamp(<span class="string">"传入时间戳"</span>)</span><br></pre></td></tr></tbody></table></figure><p><strong>程序运行时间</strong></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> b_tuple:</span><br><span class="line">  aa = b_tuple[<span class="number">20000</span>]</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"Lookup time for TUPLE: "</span>, end_time - start_time)</span><br></pre></td></tr></tbody></table></figure><h1 id="random库"><a href="#random库" class="headerlink" title="random库"></a>random库</h1><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>( random.randint(<span class="number">1</span>,<span class="number">10</span>) )        <span class="comment"># 产生 1 到 10 的一个整数型随机数  </span></span><br><span class="line"><span class="built_in">print</span>( random.randrange(<span class="number">1</span>,<span class="number">100</span>,<span class="number">2</span>) )   <span class="comment"># 生成从1到100的间隔为2的随机整数</span></span><br><span class="line"><span class="built_in">print</span>( random.random() )             <span class="comment"># 产生 0 到 1 之间的随机浮点数</span></span><br><span class="line"><span class="built_in">print</span>( random.uniform(<span class="number">1.1</span>,<span class="number">5.4</span>) )     <span class="comment"># 产生  1.1 到 5.4 之间的随机浮点数，区间可以不是整数</span></span><br><span class="line"><span class="built_in">print</span>( random.choice(<span class="string">'tomorrow'</span>) )   <span class="comment"># 从序列中随机选取一个元素</span></span><br><span class="line"></span><br><span class="line">random.shuffle(<span class="built_in">list</span>)     <span class="comment">#将一个列表内的元素打乱顺序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多个字符中选取指定数量的字符组成新字符串：</span></span><br><span class="line"><span class="string">''</span>.join(random.sample([<span class="string">'z'</span>,<span class="string">'y'</span>,<span class="string">'x'</span>,<span class="string">'w'</span>,<span class="string">'v'</span>,<span class="string">'u'</span>,<span class="string">'t'</span>,<span class="string">'s'</span>,<span class="string">'r'</span>,<span class="string">'q'</span>,<span class="string">'p'</span>,<span class="string">'o'</span>,<span class="string">'f'</span>,<span class="string">'e'</span>,<span class="string">'d'</span>,<span class="string">'c'</span>,<span class="string">'b'</span>,<span class="string">'a'</span>], <span class="number">5</span>))     </span><br><span class="line">random.shuffle([<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>])  <span class="comment"># 将序列a中的元素顺序打乱</span></span><br></pre></td></tr></tbody></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><p>文本文件：存储的是普通“字符”文本，默认为unicode字符集，可以使用记本事程序打开</p><p>二进制文件：把数据内容用“字节”进行存储，无法用记事本打开，必须使用专用的软件打开，举例：mp3音频文件，jpg图片。doc文档等<br>open(name[, mode[, buffering]])<br>参数：<br>    name : 一个包含了你要访问的文件名称的字符串值。<br>    mode : mode 决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读(r)。</p><table><thead><tr><th>打开模式</th><th>描述</th></tr></thead><tbody><tr><td>r:</td><td>只读。这是<strong>默认模式</strong>。文件不存在将报错</td></tr><tr><td>r+:</td><td>用于读写。文件指针将会放在文件的开头。</td></tr><tr><td>w:</td><td>只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。</td></tr></tbody></table><p>|w+:  |  打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。|<br>|wb+:|以二进制格式打开一个文件用于读写。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。|<br>|a:   | 追加写入内容。如果该文件已存在，文件指针将会放在文件的结尾。新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。|<br>|a+:  |  打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。|</p><p>|wb:   | 以二进制格式打开一个文件只用于写入。如果该文件已存在则将其覆盖。如果该文件不存在，创建新文件。|<br>|ab+:|以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。|<br>|rb: |以二进制格式打开一个文件用于只读,默认模式。|<br>|ab:   | 以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。|<br>|rb+:|以二进制格式打开一个文件用于读写|</p><p>要读取二进制文件，比如图片、视频等等，用’rb’模式打开文件即可<br>以二进制的形式读取，禁用encoding编码格式；读取时，不知道读多少</p><h2 id="with-open"><a href="#with-open" class="headerlink" title="with open"></a>with open</h2><p>wth语句可以自动管理上下文资源，不论什么原因跳出with，都能确保文件正确的关闭，以此来达到释放资源的目的</p><p>read()会一次性读取文件的全部内容，如果文件有20G，内存就爆了，所以，要保险起见，可以反复调用read(size)方法，每次最多读取size个字节的内容。<br>调用readline()可以每次读取一行内容，<br>调用readlines()一次读取所有内容并按行返回list。</p><p>如果文件很小，read()一次性读取最方便；如果不能确定文件大小，反复调用read(size)比较保险；如果是配置文件，调用readlines()最方便：</p><p>file.write(str)   将字符串写入文件<br>file.writelines(strings)   将字符串序列写入文件</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'Hi.text'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">"Hello, there"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># with file.open(encoding='utf-8') as f:</span></span><br></pre></td></tr></tbody></table></figure><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p><strong>glob.glob</strong><br>同时返回所有匹配的文件路径列表。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"></span><br><span class="line"><span class="comment">#获取指定目录下的所有图片</span></span><br><span class="line"><span class="built_in">print</span> (glob.glob(<span class="string">r"/home/qiaoyunhao/*/*.png"</span>),<span class="string">"\n"</span>)<span class="comment">#加上r让字符串不转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取上级目录的所有.py文件</span></span><br><span class="line"><span class="built_in">print</span> (glob.glob(<span class="string">r'../*.py'</span>)) <span class="comment">#相对路径</span></span><br></pre></td></tr></tbody></table></figure><h3 id="glob-iglob"><a href="#glob-iglob" class="headerlink" title="glob.iglob"></a>glob.iglob</h3><p>获取一个可编历对象，使用它可以逐个获取匹配的文件路径名。</p><p><strong>shutil 模块</strong>(拷贝、删除、移动、压缩和解压)<br>shutil可以简单地理解为sh + util，shell工具的意思。shutil模块是对os模块的补充，主要针对文件的拷贝、删除、移动、压缩和解压操作。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br></pre></td></tr></tbody></table></figure><h2 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h2><p>shutil会自动识别拷贝的到底是文件还是文件夹, 如果存在同名的文件将会自动进行覆盖。</p><p>shutil.copy($file_path, $dir_path)</p><h2 id="移动或重命名文件，但如果路径下已有重名的文件，将报错！"><a href="#移动或重命名文件，但如果路径下已有重名的文件，将报错！" class="headerlink" title="移动或重命名文件，但如果路径下已有重名的文件，将报错！"></a>移动或重命名文件，但如果路径下已有重名的文件，将报错！</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil </span><br><span class="line"></span><br><span class="line">shutil.move(<span class="string">r'.\practice.txt'</span>, <span class="string">r'.\文件夹1/'</span>)   <span class="comment"># 移动到另外一个文件夹中</span></span><br><span class="line">shutil.move(<span class="string">r'.\practice.txt'</span>, <span class="string">r'.\文件夹1/new.txt'</span>)    <span class="comment">#移动并重命名</span></span><br></pre></td></tr></tbody></table></figure><h2 id="拷贝文件夹-删除文件夹"><a href="#拷贝文件夹-删除文件夹" class="headerlink" title="拷贝文件夹/删除文件夹"></a>拷贝文件夹/删除文件夹</h2><p>shutil.copytree($file_path, $dir_path) # 拷贝所有文件到新的文件夹下，保持原有的文件结构。<br>shutil.rmtree($dir_path) # 删除此路径的文件夹</p><h2 id="生成压缩文件"><a href="#生成压缩文件" class="headerlink" title="生成压缩文件:"></a>生成压缩文件:</h2><p>shutil.make_archive(base_name, ‘gztar’, root_dir, [base_dir)<br>    base_name : 创建的目标文件名，包括路径，减去任何特定格式的扩展。<br>    format : 压缩包格式。”zip”, “tar”, “bztar”或”gztar”中的一个。<br>    root_dir : 需要打包的文件夹路径。打包完成时存储在上一级目录。<br>    base_dir : 使用后会将base_dir作为路径，解压后有个有层级的文件夹，而仅非只有单独的打包内容。</p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件:"></a>解压文件:</h2><p>shutil.unpack_archive(filename[, extract_dir[, format]])<br>    filename是压缩文档的完整路径<br>    extract_dir是解压缩路径，默认为当前目录。<br>    format是压缩格式。默认使用文件后缀名代码的压缩格式。”zip”, “tar”, “bztar”或”gztar”中的一个。</p><h2 id="pathlib模块"><a href="#pathlib模块" class="headerlink" title="pathlib模块"></a>pathlib模块</h2><p>多平台使用<br>对于多层文件夹的读取，用os模块只能一层一层读取出文件，要写多个for循环，效率不高，这时我们可以用 Path.glob(**/*) 大法，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime   <span class="comment">#导入datetime模块中的datetime类</span></span><br><span class="line"></span><br><span class="line">p = Path(<span class="string">'E:\github\python\自动化\打开所有网址.py'</span>)    <span class="comment">#实例化Path对象(可传入绝对路径，当前目录下文件名)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件名:<span class="subst">{p.name}</span>"</span>)     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件完整路径:<span class="subst">{p.resolve() }</span>"</span>)  </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件后缀:<span class="subst">{p.suffix}</span>"</span>)     </span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"文件前缀:<span class="subst">{p.stem}</span>"</span>)    </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="built_in">print</span>(p.stat())            <span class="comment"># 获取文件详细信息</span></span><br><span class="line"><span class="built_in">print</span>(p.stat().st_size)    <span class="comment"># 文件的字节大小</span></span><br><span class="line"><span class="built_in">print</span>(p.stat().st_ctime)   <span class="comment"># 文件创建时间戳</span></span><br><span class="line"><span class="built_in">print</span>(p.stat().st_mtime)   <span class="comment"># 上次修改文件的时间戳</span></span><br><span class="line">creat_time = datetime.fromtimestamp(p.stat().st_ctime)</span><br><span class="line">st_mtime = datetime.fromtimestamp(p.stat().st_mtime)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'该文件创建时间：<span class="subst">{creat_time}</span>'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'上次修改该文件的时间：<span class="subst">{st_mtime}</span>'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line">p = Path(<span class="string">'E:\github\python\自动化\整理文件.ipynb'</span>)    <span class="comment">#实例化Path对象(可传入绝对路径，当前目录下文件名)</span></span><br><span class="line">p1 = Path .cwd()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"上级文件夹路径:<span class="subst">{p.parent}</span>"</span>) </span><br><span class="line"><span class="built_in">print</span>(p.parts)      <span class="comment"># 将路径通过分隔符分割成一个元组</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="comment"># 获取指定文件夹下所有文件和文件夹路径</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p1.iterdir():</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)</span><br><span class="line"><span class="comment"># 返回一个iterable 包含所有父目录</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> p.parents:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"-------------------------"</span>)    </span><br><span class="line"><span class="comment"># 获取该文件目录下所有.py文件路径</span></span><br><span class="line">file_name = p1.glob(<span class="string">'**/*.py'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> file_name:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></tbody></table></figure><h1 id="os库"><a href="#os库" class="headerlink" title="os库"></a>os库</h1><p>./res是head<br>1.jpg是jpg</p><h2 id="1-os库基本介绍"><a href="#1-os库基本介绍" class="headerlink" title="1. os库基本介绍"></a>1. os库基本介绍</h2><p>用于访问操作系统相关功能</p><h2 id="2-os库之路径操作"><a href="#2-os库之路径操作" class="headerlink" title="2. os库之路径操作"></a>2. os库之路径操作</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果文件不存在，创建文件</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(folder_path): </span><br><span class="line">    os.mkdir(folder_path)</span><br><span class="line"></span><br><span class="line">os.path.isdir()   <span class="comment">#判断是否为目录</span></span><br><span class="line"></span><br><span class="line">os.path.join(<span class="string">'annotations'</span>, <span class="string">'xmls'</span>)  <span class="comment">#按照路径的方式拼接字符串</span></span><br><span class="line">os.rename(<span class="string">"要修改的目录名"</span>, <span class="string">"修改后的目录名"</span>)    <span class="comment">#重命名文件或目录，两个参数都要传入路径</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">path =./ res / <span class="number">1.j</span>pg</span><br><span class="line"></span><br><span class="line">os.path.split(path)  <span class="comment"># 将路径划分为head和tail两部分并存为元组 ('./res', '1.jpg')</span></span><br><span class="line">basename = os.path.basename(path)  <span class="comment"># 获取路径的tail部分   1.jpg</span></span><br><span class="line">name = basename.split(<span class="string">'.'</span>)[<span class="number">0</span>]   <span class="comment">#切割出文件名  1</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="os-listdir-path"><a href="#os-listdir-path" class="headerlink" title="os.listdir(path)"></a>os.listdir(path)</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(<span class="string">'.'</span>)  <span class="comment">#返回指定路径下所有文件名的列表。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="os-walk"><a href="#os-walk" class="headerlink" title="os.walk"></a>os.walk</h3><p>遍历文件夹后产生三个参数：<br>当前文件夹路径<br>包含文件夹名称[列表形式]<br>包含文件名称[列表形式]</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(<span class="string">r'C:\\Program Files (x86)'</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f'打开文件夹<span class="subst">{dirpath}</span>'</span>) <span class="comment"># 当前文件夹路径 </span></span><br><span class="line">    <span class="keyword">if</span> dirnames:</span><br><span class="line">        <span class="built_in">print</span>(dirnames) <span class="comment"># 包含文件夹名称[列表形式] </span></span><br><span class="line">    <span class="keyword">if</span> filenames:</span><br><span class="line">        <span class="built_in">print</span>(filenames) <span class="comment"># 包含文件名称[列表形式]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'-'</span> * <span class="number">10</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="os-scandir"><a href="#os-scandir" class="headerlink" title="os.scandir"></a>os.scandir</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">path = <span class="string">'.'</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.scandir(path): </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"获取路径下文件名：<span class="subst">{file.name}</span>"</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f"获取路径下文件路径：<span class="subst">{file.path}</span>\n"</span>) </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="3-os库之进程管理"><a href="#3-os库之进程管理" class="headerlink" title="3. os库之进程管理"></a>3. os库之进程管理</h2><h2 id="4-os库之环境参数"><a href="#4-os库之环境参数" class="headerlink" title="4. os库之环境参数"></a>4. os库之环境参数</h2><h1 id="web自动化selenium"><a href="#web自动化selenium" class="headerlink" title="web自动化selenium"></a>web自动化selenium</h1><h2 id="安装webdriver"><a href="#安装webdriver" class="headerlink" title="安装webdriver"></a>安装webdriver</h2><p>各大浏览器webdriver地址可参见：<a href="https://docs.seleniumhq.org/download/">https://docs.seleniumhq.org/download/</a><br>Firefox：<a href="https://github.com/mozilla/geckodriver/releases/">https://github.com/mozilla/geckodriver/releases/</a><br>Chrome：<a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a><br><strong>webdriver安装路径</strong><br>Win：复制webdriver到Python安装目录下<br>Mac：复制webdriver到/usr/local/bin目录下</p><h2 id="定位页面元素"><a href="#定位页面元素" class="headerlink" title="定位页面元素"></a>定位页面元素</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位一个元素</span></span><br><span class="line">ele = driver.find_element(By.XPATH,<span class="string">''</span>)</span><br><span class="line"><span class="comment">#表示定位一组元素(元素相同时使用)</span></span><br><span class="line">lis = driver.find_elements(By.XPATH,<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lis)&gt;<span class="number">0</span>:</span><br><span class="line">  lis[<span class="number">0</span>].click()</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'没有元素'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="id-定位"><a href="#id-定位" class="headerlink" title="id 定位"></a>id 定位</h3><h3 id="name-定位"><a href="#name-定位" class="headerlink" title="name 定位"></a>name 定位</h3><h3 id="class-定位"><a href="#class-定位" class="headerlink" title="class 定位"></a>class 定位</h3><h3 id="link定位"><a href="#link定位" class="headerlink" title="link定位"></a>link定位</h3><p>find_element_by_link_text()<br>此种方法是专门用来定位文本链接的，</p><h3 id="partial-link定位："><a href="#partial-link定位：" class="headerlink" title="partial_link定位："></a>partial_link定位：</h3><p>find_element_by_partial_link_text()</p><p>有时候一个超链接的文本很长很长，我们如果全部输入，既麻烦，又显得代码很不美观，这时候我们就可以只截取一部分字符串，用这种方法模糊匹配了。</p><h3 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h3><p>xpath定位：find_element_by_xpath()</p><p>前面介绍的几种定位方法都是在理想状态下，有一定使用范围的，那就是：在当前页面中，每个元素都有一个唯一的id或name或class或超链接文本的属性，那么我们就可以通过这个唯一的属性值来定位他们。</p><p>但是在实际工作中并非有这么美好，有时候我们要定位的元素并没有id,name,class属性，或者多个元素的这些属性值都相同，又或者刷新页面，这些属性值都会变化。那么这个时候我们就只能通过xpath或者CSS来定位了。</p><p>xpath 是一种在 XML 文档中定位元素的语言，它拥有多种定位方式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;<span class="name">head</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"csdn-toolbar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-inside"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container-left"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container-middle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-search onlySearch"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-search-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toolbar-search-input"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"C++难在哪里？"</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>根据上面的标签需要定位 最后一行 input 标签，以下列出了四种方式，xpath 定位的方式多样并不唯一，使用时根据情况进行解析即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对路径（层级关系）定位  （绝对路径以/开头）</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/div/div/div/div[2]/div/div/input[1]"</span>)</span><br><span class="line"><span class="comment"># 利用元素属性定位     （相对路径以//开头）</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='toolbar-search-input']"</span>))</span><br><span class="line"><span class="comment"># 层级+元素属性定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[@id='csdn-toolbar']/div/div/div[2]/div/div/input[1]"</span>)</span><br><span class="line"><span class="comment"># 逻辑运算符定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='toolbar-search-input' and @autocomplete='off']"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>1.相对路径+索引<br>先定位要找的元素，再找它唯一的父标签<br>2.相对路径+属性<br>3.相对路径+通配符定位<br>4.相对路径+部分属性值<br>5.相对路径+文本</p><h3 id="css-定位"><a href="#css-定位" class="headerlink" title="css 定位"></a>css 定位</h3><p>link 定位<br>partial_link 定位</p><h2 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h2><h3 id="下拉框的处理"><a href="#下拉框的处理" class="headerlink" title="下拉框的处理"></a>下拉框的处理</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--select标签--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">tabindex</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">tabindex</span>=<span class="string">"2"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">ele = driver.find_element_by_name(<span class="string">"city"</span>)</span><br><span class="line"><span class="comment">#创建Select类对象</span></span><br><span class="line">sel = Select(ele)</span><br><span class="line">sel.select_by_value(<span class="string">"3"</span>)  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="select类中的函数列表"><a href="#select类中的函数列表" class="headerlink" title="select类中的函数列表"></a>select类中的函数列表</h4><p>options    返回select元素所有的options<br>all_selected_options    返回select元素中所有已选中的选项<br>first_selected_option    返回select元素中选中的第一个选项<br>select_by_index(index)    通过索引定位，index索引是从“0”开始<br>select_by_value(value)    通过value属性值定位<br>select_by_visible_text(text)t    通过文本值定位，visible_text是在option标签中间的值，即显示在下拉框的值；<br>deselect_all()    取消全部的已选择项<br>deselect_by_index(index)    取消已选中的索引项<br>deselect_by_value(value)    取消已选中的value值<br>deselect_by_visible_text(text)    取消已选中的文本值</p><h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><p>定位到元素后用.send_keys(r’文件路径’)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_name(<span class="string">"city"</span>).send_keys(<span class="string">r'文件路径'</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="处理弹窗"><a href="#处理弹窗" class="headerlink" title="处理弹窗"></a>处理弹窗</h3><p>alert(只有确定)，confirm(有确认和取消)，prompt(有确认取消还可以输入值)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#alert是一个属性</span></span><br><span class="line"><span class="comment">#创建一个alert对象</span></span><br><span class="line">ale = driver.switch_to.alert</span><br><span class="line"></span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">ale.accept()</span><br><span class="line"><span class="comment">#点击取消</span></span><br><span class="line">ale.dismiss() </span><br><span class="line"><span class="comment">#获得文本</span></span><br><span class="line">ale.text()</span><br><span class="line"><span class="comment">#输入值</span></span><br><span class="line">ale.send_keys()</span><br></pre></td></tr></tbody></table></figure><h2 id="设计模式（封装）"><a href="#设计模式（封装）" class="headerlink" title="设计模式（封装）"></a>设计模式（封装）</h2><p>pom(page object model)页面对象模式</p><p>分三层<br>1.基础层：base 主要放seleni原生的方法<br>2.页面对象层：主要用于放页面的元素和页面的动作<br>3.测试用例层:testcase存放测试用例，测试数据</p><p>页面对象层调用基础层的方法，测试用例层调用页面对象的方法</p><h1 id="UIautomation"><a href="#UIautomation" class="headerlink" title="UIautomation"></a>UIautomation</h1><p><a href="https://blog.csdn.net/MicalChen/article/details/120296341">https://blog.csdn.net/MicalChen/article/details/120296341</a><br>最新版uiautomation2.0目前只支持Python 3版本，依赖comtypes和typing这两个包，但不要使用3.7.6和3.8.1这两个版本，comtypes在这两个版本中不能正常工作。</p><h2 id="UIautomation环境搭建"><a href="#UIautomation环境搭建" class="headerlink" title="UIautomation环境搭建"></a>UIautomation环境搭建</h2><h2 id="界面元素定位"><a href="#界面元素定位" class="headerlink" title="界面元素定位"></a>界面元素定位</h2><p>常用的控件类<br>控件类支持的参数<br>常用方法<br>窗口相关方法<br>程序关闭与打开相关方法<br>组合框相关方法<br>鼠标事件<br>键盘事件<br>延时等待<br>滚动条<br>日志<br>粘贴板<br>控件判断相关方法<br>控件矩形坐标<br>截图方法</p><h1 id="pyautogui"><a href="#pyautogui" class="headerlink" title="# pyautogui"></a># pyautogui</h1><p>是一个非常强大的库，可以操作鼠标和键盘   基于坐标操作</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># https://mp.weixin.qq.com/s/6OJYwnzC1fHyOj_rBFIGxg</span></span><br><span class="line"><span class="comment"># https://zhuanlan.zhihu.com/p/302592540</span></span><br><span class="line"><span class="keyword">import</span> pyautogui</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> apscheduler.schedulers.blocking <span class="keyword">import</span> BlockingScheduler <span class="comment"># 阻塞当前进程的调度器</span></span><br><span class="line"><span class="comment"># blocking类型调度器会阻塞当前进程，若你想要后台运行的调度器，可以使用以下代码：</span></span><br><span class="line"><span class="comment"># from apscheduler.schedulers.background import BackgroundScheduler</span></span><br><span class="line">pyautogui.PAUSE = <span class="number">1</span> <span class="comment"># 设置每一步操作的间隔（秒），可防止操作太快</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pyautogui.position()) <span class="comment"># 打印坐标，Point(x=148, y=879)</span></span><br><span class="line">icon_position = pyautogui.position() <span class="comment"># Point(x=148, y=879)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="Tkinter库-内置GUI库"><a href="#Tkinter库-内置GUI库" class="headerlink" title="Tkinter库(内置GUI库)"></a>Tkinter库(内置GUI库)</h1><p>import tkinter as tk</p><h2 id="窗口的创建和设置"><a href="#窗口的创建和设置" class="headerlink" title="窗口的创建和设置"></a>窗口的创建和设置</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">root=tk.Tk()<span class="comment">#生成主窗口</span></span><br><span class="line">root.geometry(<span class="string">'250x250'</span>)<span class="comment">#改变窗体大小（‘宽x高’），注意是x不是*</span></span><br><span class="line">root.geometry(<span class="string">'+450+450'</span>)<span class="comment">#改变窗体位置（‘+横坐标+纵坐标’）</span></span><br><span class="line">root.title(<span class="string">'标题'</span>)<span class="comment">#修改框体的名字</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root.mainloop()<span class="comment">#显示主窗口</span></span><br><span class="line"></span><br><span class="line">root.resizable(<span class="number">0</span>, <span class="number">0</span>)将窗口大小设置为不可变</span><br><span class="line">root.resizable(<span class="literal">False</span>, <span class="literal">False</span>)将窗口大小设置为不可变</span><br></pre></td></tr></tbody></table></figure><h2 id="常用控件"><a href="#常用控件" class="headerlink" title="常用控件"></a>常用控件</h2><h3 id="控件的共同属性"><a href="#控件的共同属性" class="headerlink" title="控件的共同属性"></a>控件的共同属性</h3><pre><code>height    指定控件的高度，单位为像素(文本控件的单位为行，不是像素)width    指定控件的宽度，单位为像素(文本控件的单位为行，不是像素)bg (background)    控件的背景颜色fg (foreground)    前景颜色(字体颜色)cursor    鼠标移动到框架时，光标的形状(参数值：arrow[默认箭头], circle, cross[十字], plus，watch[圈圈转动]等）justify    显示多行文本的时候,设置不同行之间的对齐方式（参数值：LEFT, RIGHT, CENTER）bd    加粗（默认 2 像素）    无padx    设置按钮文本与按钮边框x轴方向的距离pady    设置按钮文本与按钮边框y轴方向的距离state    设置按钮状态,参数值：NORMAL、ACTIVE、 DISABLED。默认 NORMALanchor    控制按钮文本的位置(参数值：S,W,E,N,SE,SW,NW,NE,CENTER,默认为CENTER)image    显示图像与PhotoImage 一起使用，图片只能为gif格式relief    三维效果 （参数值：FLAT、SUNKEN、RAISED、GROOVE、RIDGE。默认为 FLAT）bitmap    位图anchor    文本起始位置    CENTER(默认)，E,S,W,N,NE,SE,SW,NWbitmap    黑白二值图标    网上查找cursor    鼠标悬停光标    网上查找font    字体    无</code></pre><h3 id="Label标签"><a href="#Label标签" class="headerlink" title="Label标签"></a>Label标签</h3><p>用来显示文字或图片<br>tkinter.Label(text=”文字”)</p><h3 id="Button按钮控件模块"><a href="#Button按钮控件模块" class="headerlink" title="Button按钮控件模块"></a>Button按钮控件模块</h3><p>类似标签,但提供额外的功能,例如鼠标掠过、按下、释放以及键盘操作、事件<br>Button ( master, option=value, … )<br><strong>参数</strong><br>    master: 按钮的父容器。<br>    options: 可选项，即该按钮的可设置的属性。<br>    command :按钮关联的函数，当按钮被点击时，执行该函数</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"></span><br><span class="line">button=Button(root,command=绑定的函数,text=<span class="string">"转换温度"</span>)</span><br><span class="line">button.pack()</span><br></pre></td></tr></tbody></table></figure><h3 id="Entry单行文字域"><a href="#Entry单行文字域" class="headerlink" title="Entry单行文字域"></a>Entry单行文字域</h3><p>参数：<br>    show    1. 设置输入框用指定字符显示文本的内容 例如： “*”，<br>单行文字域用来收集键盘输入</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">root=tk.Tk()</span><br><span class="line">entry=Entry(root)     <span class="comment">#创建Entry对象</span></span><br><span class="line">entry.pack()  <span class="comment">#显示 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">entry.get()   <span class="comment">#获取当前输入框的文本</span></span><br><span class="line">entry.config()   <span class="comment">#修改相应属性</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">eventhandler</span>(<span class="params">event</span>):</span></span><br><span class="line">    entry.focus() <span class="comment">#(聚焦)文本框</span></span><br><span class="line">entry=Entry(root,bd=<span class="number">4</span>)</span><br><span class="line">entry.bind_all(<span class="string">'&lt;Control-f&gt;'</span>, eventhandler ) <span class="comment"># 绑定快捷键Ctrl-f</span></span><br></pre></td></tr></tbody></table></figure><p><strong>texts属性绑定变量</strong><br>在Button，Lable，Entry 这3个组件，有一个属性：textvariable 这个属性绑定一个变量后，它们的Text就会以变量方法来呈现。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var.<span class="built_in">set</span>(<span class="string">'初始文本'</span>)   <span class="comment"># 设置变量</span></span><br><span class="line"> </span><br><span class="line">la1=Label(root,textvariable=var) <span class="comment"># 将变量var跟文本绑定在一起</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Text多行文字区域"><a href="#Text多行文字区域" class="headerlink" title="Text多行文字区域"></a>Text多行文字区域</h3><pre><code>可用来收集(或显示)用户输入的文字</code></pre><h3 id="Listbox列表框："><a href="#Listbox列表框：" class="headerlink" title="Listbox列表框："></a>Listbox列表框：</h3><p>一个选项列表,用户可以从中选择</p><h3 id="Menu菜单"><a href="#Menu菜单" class="headerlink" title="Menu菜单"></a>Menu菜单</h3><p>点下菜单按钮后弹出的一个选项列表,用户可以从中选择<br>菜单栏(menu bar)、菜单(menu)、菜单项(menu item)<br><strong>菜单属性</strong><br>tearoff的作用就是可以将每个菜单分离出去，单独形成一个子窗口。默认是打开的状态1，通常将tearoff设置为0。<br>activebackground设置活动背景色。当鼠标移动到菜单选项上时，该菜单项的背景色。<br>activeforeground设置活动前景色。当鼠标移动到菜单选项上时，该菜单项文字显示的颜色。<br><strong>菜单方法</strong><br>add_command() 通常用于 给菜单添加普通的菜单项。<br>add_cascade() 通常用于 给menu对象添加一个瀑布菜单，点击menu对象就会弹出多个菜单项。<br>add_radiobutton() 给菜单添加radiobutton菜单项。<br>add_checkbutton() 给菜单添加checkbutton菜单项<br>add_separator() 给菜单添加分割线<br>add() 给菜单添加指定类型的菜单项，前面5中添加菜单项的方法其实都是在add函数的基础上做一个封装。<br>type() 查看菜单项的类型。通常菜单项的类型有”cascade”, “checkbutton”, “command”, “radiobutton”, “separator”, “tearoff”。</p><h3 id="Canvas画布控件模块"><a href="#Canvas画布控件模块" class="headerlink" title="Canvas画布控件模块"></a>Canvas画布控件模块</h3><p>create_polygon(x0, y0, x1, y1, … , xn, yn, options)  绘制一个至少三个点的多边形</p><h3 id="Frame-框架-包含其他组件的纯容器"><a href="#Frame-框架-包含其他组件的纯容器" class="headerlink" title="Frame    框架    包含其他组件的纯容器"></a>Frame    框架    包含其他组件的纯容器</h3><h3 id="Checkbutton-选择按钮-一组方框-可以选择其中的任意个"><a href="#Checkbutton-选择按钮-一组方框-可以选择其中的任意个" class="headerlink" title="Checkbutton    选择按钮    一组方框,可以选择其中的任意个"></a>Checkbutton    选择按钮    一组方框,可以选择其中的任意个</h3><h3 id="Menubutton-菜单按钮-用来包含菜单的组件-有下拉式、层叠式等等"><a href="#Menubutton-菜单按钮-用来包含菜单的组件-有下拉式、层叠式等等" class="headerlink" title="Menubutton    菜单按钮    用来包含菜单的组件(有下拉式、层叠式等等)"></a>Menubutton    菜单按钮    用来包含菜单的组件(有下拉式、层叠式等等)</h3><h3 id="Message-消息框-类似于标签-但可以显示多行文本"><a href="#Message-消息框-类似于标签-但可以显示多行文本" class="headerlink" title="Message    消息框    类似于标签,但可以显示多行文本"></a>Message    消息框    类似于标签,但可以显示多行文本</h3><h3 id="Radiobutton-单选按钮-一组按钮-其中只有一个可被“按下”-类似-HTML-中的-radio"><a href="#Radiobutton-单选按钮-一组按钮-其中只有一个可被“按下”-类似-HTML-中的-radio" class="headerlink" title="Radiobutton    单选按钮    一组按钮,其中只有一个可被“按下” (类似 HTML 中的 radio)"></a>Radiobutton    单选按钮    一组按钮,其中只有一个可被“按下” (类似 HTML 中的 radio)</h3><h3 id="Scale-进度条-线性“滑块”组件-可设定起始值和结束值-会显示当前位置的精确值"><a href="#Scale-进度条-线性“滑块”组件-可设定起始值和结束值-会显示当前位置的精确值" class="headerlink" title="Scale    进度条    线性“滑块”组件,可设定起始值和结束值,会显示当前位置的精确值"></a>Scale    进度条    线性“滑块”组件,可设定起始值和结束值,会显示当前位置的精确值</h3><h3 id="Scrollbar-滚动条-对其支持的组件-文本域、画布、列表框、文本框-提供滚动功能"><a href="#Scrollbar-滚动条-对其支持的组件-文本域、画布、列表框、文本框-提供滚动功能" class="headerlink" title="Scrollbar    滚动条    对其支持的组件(文本域、画布、列表框、文本框)提供滚动功能"></a>Scrollbar    滚动条    对其支持的组件(文本域、画布、列表框、文本框)提供滚动功能</h3><h3 id="Toplevel-顶级-类似框架-但提供一个独立的窗口容器"><a href="#Toplevel-顶级-类似框架-但提供一个独立的窗口容器" class="headerlink" title="Toplevel    顶级    类似框架,但提供一个独立的窗口容器"></a>Toplevel    顶级    类似框架,但提供一个独立的窗口容器</h3><h2 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h2><p>在tkinter中有三种标准对话框：<br>messagebox<br>filedialog<br>colorchooser</p><h3 id="弹窗messagebox"><a href="#弹窗messagebox" class="headerlink" title="弹窗messagebox"></a>弹窗messagebox</h3><p><code>from tkinter import messagebox</code></p><p>消息提示框    messagebox.showinfo(‘弹窗名称’,’弹窗内容 ‘)<br>消息警告框    messagebox.showwarning(‘弹窗名称’,’弹窗内容 ‘)<br>错误消息框    messagebox.showerror(‘弹窗名称’,’弹窗内容 ’ )<br>对话框    messagebox.askokcancel(‘弹窗名称’, ‘弹窗内容 ‘)    确定/取消，返回值true/false<br>对话框    messagebox.askquestion (‘弹窗名称’, ‘弹窗内容 ‘)    是/否，返回值yes/no<br>对话框    messagebox.askyesno (‘弹窗名称’,’弹窗内容 ‘)    是/否， 返回值true/false<br>对话框    messagebox.askretrycancel (‘弹窗名称’,’弹窗内容 ‘)    重试/取消，返回值true/false</p><h3 id="filedialog模块"><a href="#filedialog模块" class="headerlink" title="filedialog模块"></a>filedialog模块</h3><p>如果你的应用程序会需要到打开文件、保存文件、选择目录等关于文件的操作，那么就必须要用到 filedialog 。</p><p>askopenfilename 打开文件、<br>asksaveasfilename 保存文件</p><h2 id="对话输入框"><a href="#对话输入框" class="headerlink" title="对话输入框"></a>对话输入框</h2><p>Python的tkinter模块中，有一个子模块simpledialog.py，这个子模块里有这样三个函数：askinteger，askfloat，askstring。他们通过GUI窗口的方式，让用户输入一个整数，浮点数，或者字符串，并且自带输入合法性检测！使用非常方便。</p><p>from tkinter.simpledialog import askinteger,askfloat,askstring</p><h2 id="PhotoImage图片对象"><a href="#PhotoImage图片对象" class="headerlink" title="PhotoImage图片对象"></a>PhotoImage图片对象</h2><p>为了解决PhotoImage不支持jpg等格式问题，可以使用Image+ImageTk实现多种格式图片的载入。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageTk</span><br><span class="line"><span class="keyword">import</span> tkinter <span class="keyword">as</span> tk</span><br><span class="line">img = Image.<span class="built_in">open</span>(<span class="string">'1.jpg'</span>)</span><br><span class="line">photo = ImageTk.PhotoImage(img)</span><br><span class="line">tk.Label(paned, image=photo).grid(row=<span class="number">0</span>, column=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="控件几何状态管理方法"><a href="#控件几何状态管理方法" class="headerlink" title="控件几何状态管理方法"></a>控件几何状态管理方法</h2><p>pack和grid请参考：<a href="https://www.jianshu.com/p/91844c5bca78">https://www.jianshu.com/p/91844c5bca78</a></p><h3 id="pack"><a href="#pack" class="headerlink" title="pack()"></a>pack()</h3><p>是一种简单的布局方法，如果不加参数的默认方式，将按布局语句的先后，以最小占用空间的方式自上而下地排列控件实例，并且保持控件本身的最小尺寸。</p><p>使用pack()方法可设置 fill、side 等属性参数。其中，参数fill 可取值：fill=X,fill=Y或fill=BOTH，分别表示允许控件向水平方向、垂直方向或二维伸展填充未被占用控件。参数 side 可取值：side=TOP(默认)，side=LEFT,side=RIGHT,side=BOTTOM,分别表示本控件实例的布局相对于下一个控件实例的方位。</p><p>Button(root,text=’A’).pack(side=LEFT,expand=YES,fill=Y)</p><h3 id="grid"><a href="#grid" class="headerlink" title="grid()"></a>grid()</h3><p>是基于网格的布局。先虚拟一个二维表格，再在该表格中布局控件实例。由于在虚拟表格的单元中所布局的控件实例大小不一，单元格也没有固定或均一的大小，因此其仅用于布局的定位。pack()方法与grid()方法不能混合使用。<br>grid()方法常用布局参数如下：</p><p>column: 控件实例的起始列，最左边为第0列。<br>columnspan: 控件实例所跨越的列数，默认为1列。<br>ipadx,ipady: 控件实例所呈现区域内部的像素数，用来设置控件实例的大小。<br>padx,pady: 控件实例所占据空间像素数，用来设置实例所在单元格的大小。<br>row: 控件实例的起始行，最上面为第0行。<br>rowspan: 控件实例的起始行数，默认为1行。</p><h3 id="place-绝对布局"><a href="#place-绝对布局" class="headerlink" title="place()绝对布局"></a>place()绝对布局</h3><p>当使用 Place 布局管理容器中的组件时，需要设置组件的 x、y 或 relx、rely 选项，Tkinter 容器内的坐标系统的原点 (0,0) 在左上角，其中 X 轴向右延伸，Y 轴向下延伸<br>控件对象.place()</p><p>x,y：控件实例在根窗体中水平和垂直方向上的其实位置（单位为像素）。注意，根窗体左上角为0,0,水平向右，垂直向下为正方向。</p><p>relx,rely：控件实例在根窗体中水平和垂直方向上起始布局的相对位置。即相对于根窗体宽和高的比例位置，取值在0.0~1.0之间。</p><p>height,width：控件实例本身的高度和宽度（单位为像素）。</p><p>relheight,relwidth：控件实例相对于根窗体的高度和宽度比例，取值在0.0~1.0之间。</p><p>利用place()方法配合relx,rely和relheight,relwidth参数所得的到的界面可自适应根窗体尺寸的大小。place()方法与grid()方法可以混合使用。</p><h1 id="图像处理库"><a href="#图像处理库" class="headerlink" title="图像处理库"></a>图像处理库</h1><h2 id="PIL，cv2，plt的使用与区别"><a href="#PIL，cv2，plt的使用与区别" class="headerlink" title="PIL，cv2，plt的使用与区别"></a>PIL，cv2，plt的使用与区别</h2><ol><li>建议使用opencv的库来进行图像处理的基本操作，数据格式为numpy，可以直接进行numpy的处理；</li><li>进行折线图这类图绘制的时候，一般使用matplotlib库。</li><li>Opencv默认为 BGR顺序，而其他软件（PIL、scopy.misc）一般使用RGB。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较三者的打开图片、显示图片、打开图片的类型</span></span><br><span class="line"><span class="comment"># ************PIL************</span></span><br><span class="line">PIL_img = Image.<span class="built_in">open</span>(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(PIL_img))  <span class="comment"># &lt;class 'PIL.JpegImagePlugin.JpegImageFile'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(PIL_img.size)   <span class="comment"># (1152, 720) (w,h)</span></span><br><span class="line"><span class="built_in">print</span>(np.array(PIL_img).shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">PIL_img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ************cv2************</span></span><br><span class="line">cv2_img = cv2.imread(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cv2_img))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(cv2_img.shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">cv2.imshow(<span class="string">'cv2'</span>, cv2_img)</span><br><span class="line"><span class="comment"># cv2.waitKey()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ************plt***********</span></span><br><span class="line">plt_img = plt.imread(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(plt_img))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(plt_img.shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">plt.imshow(plt_img)  <span class="comment"># PIL_img也可以显示</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>OpenCV中已经包含如下应用领域功能：二维和三维特征工具箱、运动估算、人脸识别系统、姿势识别、人机交互、移动机器人、运动理解、对象鉴别、分割与识别、立体视觉、运动跟踪、增强现实（AR技术）。基于上述功能实现需要，OpenCV中还包括以下基于统计学机器学习库：Boosting算法、Decision Tree(决策树)学习、Gradient Boosting算法、EM算法(期望最大化)、KNN算法、朴素贝叶斯分类、人工神经网络、随机森林、支掌向量机。</p><p>cv2默认为 BGR顺序，而其他（PIL、scopy.misc）一般使用RGB</p><p>导入的时候采用 import cv2。</p><h3 id="cv2-imread-filepath-flags"><a href="#cv2-imread-filepath-flags" class="headerlink" title="cv2.imread(filepath,flags)"></a>cv2.imread(filepath,flags)</h3><p>加载图片</p><p>filepath：要读入图片的完整路径，路径中不要有中文名<br>flags：读入图片的标志<br>    cv2.IMREAD_COLOR：默认参数，读入一副彩色图片，忽略alpha通道<br>    cv2.IMREAD_GRAYSCALE：读入灰度图片<br>    cv2.IMREAD_UNCHANGED：顾名思义，读入完整图片，包括alpha通道</p><h3 id="cv2-cvtColor"><a href="#cv2-cvtColor" class="headerlink" title="cv2.cvtColor()"></a>cv2.cvtColor()</h3><p>颜色空间转换：其实就是数学运算</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = cv2.imread()   读取图片，默认是BGR通道</span><br><span class="line">img2 = cv2.cvtColor(img,cv2.COLOR_BGR2RGB)    <span class="comment">#BGR通道转为RGB通道</span></span><br><span class="line"><span class="comment">#img2 = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) #灰度化：彩色图像转为灰度图像</span></span><br><span class="line"><span class="comment">#img3 = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB) #彩色化：灰度图像转为彩色图像</span></span><br></pre></td></tr></tbody></table></figure><p>cv2.COLOR_X2Y，其中X,Y = RGB, BGR, GRAY, HSV, YCrCb, XYZ, Lab, Luv, HLS</p><h3 id="cv2-imshow-wname-img"><a href="#cv2-imshow-wname-img" class="headerlink" title="cv2.imshow(wname,img)"></a>cv2.imshow(wname,img)</h3><p>#显示图像</p><p>第一个参数是显示图像的窗口的名字<br>第二个参数是要显示的图像（imread读入的图像），窗口大小自动调整为图片大小<br>cv2.imshow(‘image’,img) cv2.waitKey(0) #等待键盘输入，单位为毫秒，即等待指定的毫秒数看是否有键盘输入，若在等待时间内按下任意键则返回按键的ASCII码，程序继续运行。 #若没有按下任何键，超时后返回-1。参数为0表示无限等待。不调用waitKey的话，窗口会一闪而逝，看不到显示的图片。 cv2.destroyAllWindow() #销毁所有窗口 cv2.destroyWindow(wname) #销毁指定窗口</p><h3 id="cv2-imwrite-file，img，num"><a href="#cv2-imwrite-file，img，num" class="headerlink" title="cv2.imwrite(file，img，num)"></a>cv2.imwrite(file，img，num)</h3><p>  #保存一张图像</p><p>第一个参数是要保存的文件名<br>第二个参数是要保存的图像。可选的第三个参数，它针对特定的格式：对于JPEG，其表示的是图像的质量，用0 - 100的整数表示，默认95。<br>第三个参数表示的是压缩级别。默认为3.<br>img.copy() #图像复制</p><p>cv2.resize(image, image2,dsize) #图像缩放：(输入原始图像，输出新图像，图像的大小)<br>cv2.flip(img,flipcode) #图像翻转，flipcode控制翻转效果。</p><p>flipcode = 0：沿x轴翻转；flipcode &gt; 0：沿y轴翻转；flipcode &lt; 0：x,y轴同时翻转<br>cv2.warpAffine(img, M, (400, 600)) #图像仿射变换 ：平移；裁剪、剪切、旋转、仿射变换，<br>M、M_crop、M_shear、M_rotate</p><p>cv2.putText(img,’text’,(50,150) #图像添加文字：(照片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细)</p><p>cv2.putText(image, caption, (b[0], b[1] - 10), cv2.FONT_HERSHEY_PLAIN, 1, (255, 0, 0), 1) cv2.putText(I,’there 0 error(s):’,(50,150),cv2.FONT_HERSHEY_COMPLEX,6,(0,0,255),25)</p><p>cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2) #画出矩行：img原图、(x，y)是矩阵的左上点坐标、(x+w，y+h)是矩阵的右下点坐标、(0,255,0)是画线对应的rgb颜色、2是所画的线的宽度。</p><p>cv2.boundingRect(img) #返回图像的四值属性：img是一个二值图，即是它的参数； 返回四个值，分别是x，y，w，h； x，y是矩阵左上点的坐标，w，h是矩阵的宽和高。</p><h3 id="固定阈值分隔"><a href="#固定阈值分隔" class="headerlink" title="固定阈值分隔"></a>固定阈值分隔</h3><h2 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h2><p>PIL（Python Imaging Library）是Python常用的图像处理库，而Pillow是PIL的一个友好Fork，提供了了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。相比opencv更为轻巧。Image模块是在Python PIL图像处理中常见的模块，对图像进行基础操作的功能基本都包含于此模块内。如open、save、show等功能。</p><p><a href="https://www.osgeo.cn/pillow/reference/index.html">https://www.osgeo.cn/pillow/reference/index.html</a></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>#安装pillow<br>pip install pillow</p><p>from PIL import Image<br>Image模块 是 PIL 库中代表一个图像的类（对象）</p><h3 id="ImageDraw-模块"><a href="#ImageDraw-模块" class="headerlink" title="ImageDraw 模块"></a>ImageDraw 模块</h3><p><strong>ImageDraw.text()</strong><br>ImageDraw.text(xy, text, fill=None, font=None, anchor=None, spacing=4, align=’left’, direction=None, features=None, language=None, stroke_width=0, stroke_fill=None, embedded_color=False)<br>在给定位置绘制字符串。</p><pre><code>xy -- 文本的锚点坐标。text -- 要绘制的字符串。如果它包含任何换行符，则文本将传递到 multiline_text() 。fill -- 用于文本的颜色。</code></pre><h2 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h2><p>Matplotlib是一个Python 2D绘图库，它可以在不同的平台上以各种硬拷贝格式和交互环境生成发布质量数据。Matplotlib可以用于Python脚本、Python和IPython shell、Jupyter notebook、web应用服务器和四个图形用户界面工具包。对于简单的绘图，pyplot模块提供了一个类似于matlab的接口，特别是与IPython结合使用时。对于power用户，您可以通过面向对象的界面或通过MATLAB用户熟悉的一组函数来完全控制线样式、字体属性、轴属性等.</p><p>matplotlib.pylot是绘制各类可视化图形的命令字库</p><p>更多学习，可参考Matplotlib中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn</a></p><p>#安装<br>pip install matplotlib<br>#导库<br>import matplotlib.pyplot as plt</p><h2 id="pyplot模块方法"><a href="#pyplot模块方法" class="headerlink" title="pyplot模块方法"></a>pyplot模块方法</h2><p>1.plt.imread(fname， format=None)<br>将图像从文件读取到数组中。返回一个numpy.array<br>  fname:<br>    要读取的图像文件：文件名、URL 或以读取二进制模式打开的类似文件的对象。<br>    不推荐传递 URL。请打开URL进行阅读并将结果传递给Pillow<br>  format:<br>    用于读取数据而假定的图像文件格式。如果格式设置为”png”，如果 fname 是扩展名为”.png”的路径或打开的文件，或者如果它是 URL，则图像将作为 PNG 文件加载。在所有其他情况下，格式将被忽略，PIL 会自动检测格式</p><p>2.plt.imshow(numpy.array)<br>将数据显示为图像<br>3.plt.show()<br>显示所有打开的图表</p><h1 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h1><h2 id="数学矩阵知识"><a href="#数学矩阵知识" class="headerlink" title="数学矩阵知识"></a>数学矩阵知识</h2><p><a href="https://paul.pub/the-matrix/#id-%E6%A0%87%E9%87%8F%E5%90%91%E9%87%8F%E7%9F%A9%E9%98%B5%E5%92%8C%E5%BC%A0%E9%87%8F">https://paul.pub/the-matrix/#id-%E6%A0%87%E9%87%8F%E5%90%91%E9%87%8F%E7%9F%A9%E9%98%B5%E5%92%8C%E5%BC%A0%E9%87%8F</a></p><h3 id="矩阵算术"><a href="#矩阵算术" class="headerlink" title="矩阵算术"></a>矩阵算术</h3><h4 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h4><p>矩阵的加减法只在两个矩阵具有相同大小时才有意义。</p><p>两个矩阵的加（减）法通过对应元素相加（减）得到</p><h4 id="标量乘法"><a href="#标量乘法" class="headerlink" title="标量乘法"></a>标量乘法</h4><p>设A为一矩阵，b为一标量，则bA为将A中的每一个元素乘以b而构成的一个矩阵</p><h4 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h4><p>矩阵的转置是以对角线为轴的镜像。</p><p>这条从左上角到右下角的对角线被称之为主对角线</p><h4 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h4><p>第一个矩阵的列要等于第二个矩阵的行，则两矩阵可以相乘。<br>一个m∗n的的A矩阵，和一个n∗p的B矩阵相乘，将得到一个m∗p的矩阵C</p><h3 id="逆"><a href="#逆" class="headerlink" title="逆"></a>逆</h3><p>逆(Inverse)<br>设A为n阶方阵，如果存在一个n阶方阵B，使得<br>AB=BA=In<br>AB=BA=In</p><p>则称A为可逆矩阵，B为A的逆阵，记作 B=A−1B=A−1<br>(A−1)−1=A(A−1)−1=A<br>(kA)−1=1kA−1(k≠0)(kA)−1=1kA−1(k≠0)<br>A、B均是同阶可逆矩阵，则(AB)−1=B−1A−1A、B均是同阶可逆矩阵，则(AB)−1=B−1A−1<br>(A−1)T=(AT)−1(A−1)T=(AT)−1</p><h4 id="求逆矩阵一般有三种方法。"><a href="#求逆矩阵一般有三种方法。" class="headerlink" title="求逆矩阵一般有三种方法。"></a>求逆矩阵一般有三种方法。</h4><p>1、方阵的逆矩阵等于方阵的伴随矩阵与方阵对应的行列式的值的倒数的积；</p><p>即A^-1=A*/(|A|).</p><p>只有当|A|≠0时，方阵A才可逆。</p><p>这种方法并不简便。</p><p>2、利用初等变换求逆矩阵；</p><p>一般是将矩阵(A,E)化为(E,A^-1)的形式；从而得到A逆矩阵；</p><h2 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h2><p>为了创建一个2D（二维）数组，我们传递一个列表的列表（或者是一个序列的序列）给array()函数。如果我们想要一个3D（三维）数组，我们就要传递一个列表的列表的列表，如果是一个4D（四维）数组，那就是列表的列表的列表的列表，以此类推。</p><h3 id="多维数组切片"><a href="#多维数组切片" class="headerlink" title="多维数组切片"></a>多维数组切片</h3><p>通过对每个以逗号分隔的维度执行单独的切片，你可以对多维数组进行切片。因此，对于2D数组，我们的第一片定义了行的切片，第二片定义了列的切片。</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>np.zeros():可以创建指定长度或者形状的全0数组</p><p>ones():可以创建指定长度或者形状的全1数组</p><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p><p>为了创建数字组成的数组，NumPy提供了一个类似于range的函数，该函数返回数组而不是列表。<br>array = np.arange( 10, 31,5 )   -&gt;array([10, 15, 20, 25, 30])</p><h3 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h3><p>array = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])</p><p>#数组维度<br>print(array.ndim)</p><p>#数组形状<br>print(array.shape)</p><p>#数组元素个数<br>print(array.size)</p><p>#数组元素类型<br>print(array.dtype)</p><h3 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h3><p>数组很重要，因为它可以使我们不用编写循环即可对数据执行批量运算。这通常叫做矢量化</p><h4 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h4><p>对应位置的数相运算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">arr2 = np.ones([<span class="number">2</span>,<span class="number">3</span>],dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 - arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 / arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 ** <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>print(np.dot(arr3,arr4))</p><h1 id="pandas"><a href="#pandas" class="headerlink" title="pandas"></a>pandas</h1><p>pandas是python第三方库，提供高性能易用数据类型和分析工具。</p><p>pandas基于numpy实现，常与numpy和matplotlib一同使用</p><p>更多学习，请参考pandas中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></p><h2 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类型）以及一组与之相关的数据标签（即索引）组成.</p><p>可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p><p>Seris中可以使用index设置索引列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#与字典不同的是：Series允许索引重复</span></span><br><span class="line">s = pd.Series([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>],index=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Series 可以用字典实例化</span></span><br><span class="line">d = {<span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'c'</span>: <span class="number">2</span>}</span><br><span class="line">pd.Series(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过Series的values和index属性获取其数组表示形式和索引对象</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s.values)</span><br><span class="line"><span class="built_in">print</span>(s.index)</span><br></pre></td></tr></tbody></table></figure><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame是一个表格型的数据结构，类似于Excel或sql表</p><p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）<br>DataFrame可以进行行索引和列索引，它可以被看做由Series组成的字典（共用同一个索引）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用多维数组字典、列表字典生成 DataFrame</span></span><br><span class="line">data = {<span class="string">'state'</span>: [<span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>, <span class="string">'Nevada'</span>, <span class="string">'Nevada'</span>], <span class="string">'year'</span>: [<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2001</span>, <span class="number">2002</span>], <span class="string">'pop'</span>: [<span class="number">1.5</span>, <span class="number">1.7</span>, <span class="number">3.6</span>, <span class="number">2.4</span>, <span class="number">2.9</span>]}</span><br><span class="line">frame = pd.DataFrame(data) </span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">frame2 = pd.DataFrame(data, columns=[<span class="string">'year'</span>, <span class="string">'state'</span>, <span class="string">'pop'</span>, <span class="string">'debt'</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>])</span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span></span><br><span class="line">frame2[<span class="string">'debt'</span>] = <span class="number">16.5</span></span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="内部库"><a href="#内部库" class="headerlink" title="内部库"></a>内部库</h1><h2 id="sys"><a href="#sys" class="headerlink" title="sys"></a>sys</h2><p>通过它可以获取命令行参数，从而实现从程序外部向程序内部传递参数的功能，也可以获取程序路径和当前系统平台等信息。</p><p>B. platform<br>C. math<br>D. time</p><h1 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h1><p>SMTP（Simple Mail Transfer Protocol）是简单传输协议，它是一组用于用于由源地址到目的地址的邮件传输规则。</p><p>smtplib模块</p><p>python中对SMTP进行了简单的封装，可以发送纯文本邮件、HTML邮件以及带附件的邮件。两个核心模块如下：</p><p>email模块：负责构建邮件<br>smtplib模块：负责发送邮件</p><h2 id="二、邮件发送协议介绍"><a href="#二、邮件发送协议介绍" class="headerlink" title="二、邮件发送协议介绍"></a>二、邮件发送协议介绍</h2><p>什么是POPO3、SMTP和IMAP?服务器地址和端口是什么？ </p><p>2.1、POP3<br>      POP3是Post Office Protocol 3的简称，即邮局协议的第3个版本,它规定怎样将个人计算机连接到Internet的邮件服务器和下载电子邮件的电子协议。它是因特网电子邮件的第一个离 线协议标准,POP3允许用户从服务器上把邮件存储到本地主机（即自己的计算机）上,同时删除保存在邮件服务器上的邮件，而POP3服务器则是遵循 POP3协议的接收邮件服务器，用来接收电子邮件的。(与IMAP有什么区别？) </p><p>2.2、SMTP<br>       SMTP 的全称是“Simple Mail Transfer Protocol”，即简单邮件传输协议。它是一组用于从源地址到目的地址传输邮件的规范，通过它来控制邮件的中转方式。SMTP 协议属于 TCP/IP 协议簇，它帮助每台计算机在发送或中转信件时找到下一个目的地。SMTP 服务器就是遵循 SMTP 协议的发送邮件服务器。 SMTP 认证，简单地说就是要求必须在提供了账户名和密码之后才可以登录 SMTP 服务器，这就使得那些垃圾邮件的散播者无可乘之机。 增加 SMTP 认证的目的是为了使用户避免受到垃圾邮件的侵扰。 </p><p>2.3、IMAP<br>IMAP全称是Internet Mail Access Protocol，即交互式邮件存取协议，它是跟POP3类似邮件访问标准协议之一。不同的是，开启了IMAP后，您在电子邮件客户端收取的邮件仍然保留 在服务器上，同时在客户端上的操作都会反馈到服务器上，如：删除邮件，标记已读等，服务器上的邮件也会做相应的动作。所以无论从浏览器登录邮箱或者客户端 软件登录邮箱，看到的邮件以及状态都是一致的。（与POP3有什么区别？） </p><h1 id="json"><a href="#json" class="headerlink" title="json"></a>json</h1><p>JSON 的本质是字符串。是一种通用的，跨平台的数据交换格式。类似python的字典</p><h2 id="json数据类型"><a href="#json数据类型" class="headerlink" title="json数据类型"></a>json数据类型</h2><p>json 类型转换到 python 的类型对照表：<br>| JSON          | Python     |<br>|—————|————|<br>| object        | dict       |<br>| array         | list,tuple |<br>| string        | str        |<br>| number (int)  | int, long  |<br>| number (real) | float      |<br>| true，false   | True,False |<br>| null          | None       |</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json.load()   <span class="comment">#读取json文件,转换为python字典</span></span><br><span class="line">json.loads()  <span class="comment">#将json字符串转换为python对象如字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">json.dumps()<span class="comment">#  将python数据转换为json字符串</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-pandas</title>
      <link href="/2022/03226351.html"/>
      <url>/2022/03226351.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-NumPy</title>
      <link href="/2022/032261592.html"/>
      <url>/2022/032261592.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python爬虫学习</title>
      <link href="/2022/031717083.html"/>
      <url>/2022/031717083.html</url>
      
        <content type="html"><![CDATA[<h1 id="网络数据采集概述"><a href="#网络数据采集概述" class="headerlink" title="网络数据采集概述"></a>网络数据采集概述</h1><p>爬虫（crawler）也经常被称为网络蜘蛛（spider），是按照一定的规则自动浏览网站并获取所需信息的机器人程序（自动化脚本代码），被广泛的应用于互联网搜索引擎和数据采集。使用过互联网和浏览器的人都知道，网页中除了供用户阅读的文字信息之外，还包含一些超链接，网络爬虫正是通过网页中的超链接信息，不断获得网络上其它页面的地址，然后持续的进行数据采集。正因如此，网络数据采集的过程就像一个爬虫或者蜘蛛在网络上漫游，所以才被形象的称为爬虫或者网络蜘蛛。</p><h2 id="爬虫的应用领域"><a href="#爬虫的应用领域" class="headerlink" title="爬虫的应用领域"></a>爬虫的应用领域</h2><p>爬虫的应用领域其实非常广泛，下面我们列举了其中的一部分</p><ol><li>搜索引擎</li><li>新闻聚合</li><li>社交应用</li><li>舆情监控</li><li>行业数据<h2 id="爬虫合法性探讨"><a href="#爬虫合法性探讨" class="headerlink" title="爬虫合法性探讨"></a>爬虫合法性探讨</h2></li></ol><p>经常听人说起“爬虫写得好，牢饭吃到饱”，那么编程爬虫程序是否违法呢？关于这个问题，我们可以从以下几个角度进行解读。</p><ol><li>网络爬虫这个领域目前还属于拓荒阶段，虽然互联网世界已经通过自己的游戏规则建立起了一定的道德规范，即 Robots 协议（全称是“网络爬虫排除标准”），但法律部分还在建立和完善中，也就是说，现在这个领域暂时还是灰色地带。</li><li>“法不禁止即为许可”，如果爬虫就像浏览器一样获取的是前端显示的数据（网页上的公开信息）而不是网站后台的私密敏感信息，就不太担心法律法规的约束，因为目前大数据产业链的发展速度远远超过了法律的完善程度。</li><li>在爬取网站的时候，需要限制自己的爬虫遵守 Robots 协议，同时控制网络爬虫程序的抓取数据的速度；在使用数据的时候，必须要尊重网站的知识产权（从Web 2.0时代开始，虽然Web上的数据很多都是由用户提供的，但是网站平台是投入了运营成本的，当用户在注册和发布内容时，平台通常就已经获得了对数据的所有权、使用权和分发权）。如果违反了这些规定，在打官司的时候败诉几率相当高。</li><li>适当的隐匿自己的身份在编写爬虫程序时必要的，而且最好不要被对方举证你的爬虫有破坏别人动产（例如服务器）的行为。</li><li>不要在公网（如代码托管平台）上去开源或者展示你的爬虫代码，这些行为通常会给自己带来不必要的麻烦。</li></ol><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><p>下面我们先介绍一些开发爬虫程序的辅助工具，这些工具相信能帮助你事半功倍。</p><ol><li><p>Chrome Developer Tools：谷歌浏览器内置的开发者工具。该工具最常用的几个功能模块是：</p><ul><li>元素（ELements）：用于查看或修改 HTML 元素的属性、CSS 属性、监听事件等。CSS 可以即时修改，即时显示，大大方便了开发者调试页面。</li><li>控制台（Console）：用于执行一次性代码，查看 JavaScript 对象，查看调试日志信息或异常信息。控制台其实就是一个执行 JavaScript 代码的交互式环境。</li><li>源代码（Sources）：用于查看页面的 HTML 文件源代码、JavaScript 源代码、CSS 源代码，此外最重要的是可以调试 JavaScript 源代码，可以给代码添加断点和单步执行。</li><li>网络（Network）：用于 HTTP 请求、HTTP 响应以及与网络连接相关的信息。</li><li>应用（Application）：用于查看浏览器本地存储、后台任务等内容，本地存储主要包括Cookie、Local Storage、Session Storage等。</li></ul><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004034.png" alt="chrome-developer-tools"></p></li><li><p>Postman：功能强大的网页调试与 RESTful 请求工具。Postman可以帮助我们模拟请求，非常方便的定制我们的请求以及查看服务器的响应。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004048.png" alt="postman"></p></li><li><p>HTTPie：命令行HTTP客户端。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install httpie</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http --header http --header https://movie.douban.com/</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 24 Aug 2021 16:48:00 GMT</span><br><span class="line">Keep-Alive: timeout=30</span><br><span class="line">Server: dae</span><br><span class="line">Set-Cookie: bid=58h4BdKC9lM; Expires=Wed, 24-Aug-22 16:48:00 GMT; Domain=.douban.com; Path=/</span><br><span class="line">Strict-Transport-Security: max-age=15552000</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-DOUBAN-NEWBID: 58h4BdKC9lM</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>builtwith</code>库：识别网站所用技术的工具。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install builtwith</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> builtwith</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"><span class="built_in">print</span>(builtwith.parse(<span class="string">'http://www.bootcss.com/'</span>))</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>python-whois</code>库：查询网站所有者的工具。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-whois</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> whois</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(whois.whois(<span class="string">'https://www.bootcss.com'</span>))</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="爬虫的基本工作流程"><a href="#爬虫的基本工作流程" class="headerlink" title="爬虫的基本工作流程"></a>爬虫的基本工作流程</h2><h3 id="获取网页"><a href="#获取网页" class="headerlink" title="获取网页"></a>获取网页</h3><p>获取网页源代码</p><h3 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h3><p>获取网也源代码后，接下来就是分析网页源代码，从中提取我们想要的数据。首先，最通用的方法便是采用正则表达式提取，这是一个万能的方法，但是在构造正则表达式时比较复杂且容易出错。</p><p>由于网页的结构有一定的规侧，所以还有一些根据网页节点属性、CSS选择器或XPath来提取网顶信息的库，如Beautifu1Soup、<br>pyquery、1xm1等。使用这些库，我们可以高效快速地从中提取网页信息，如节点的属性、文本值等。<br>提取信息是爬虫非常重要的部分，它可以使杂乱的数据变得条理清晰，以便我们后续处理和分析数据。</p><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>提取信息后，我们一般会将提取到的数据保存到某处以便后续使用。这里保存形式有多种多样，如可以简单保存为TXT文本或json文本，也可以保存到数据库，如MySQL和MongoDB等，也可保存至远程服务器，如借助SFTP进行操作等。</p><h1 id="代理ip"><a href="#代理ip" class="headerlink" title="代理ip"></a>代理ip</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>代理实际上指的就是代理服务器，英文叫作proxy server，它的功能是代理网络用户去取得网络信息。形象地说，它是网络信息的中转站。在我们正常请求一个网站时，是发送了请求给Web服务器，Web服务器把响应传回给我们。如果设置了代理服务器，实际上就是在本机和服务器之间搭建了一个桥，此时本机不是直接向Web服务器发起请求，而是向代理服务器发出请求，请求会发送给代理服务器，然后由代理服务器再发送给Web服务器，接着由代理服务器再把Web服务器返回的响应转发给本机。这样我们同样可以正常访问网页，但这个过程中Web服务器识别出的真实IP就不再是我们本机的IP了，就成功实现了IP伪装，这就是代理的基本原理。</p><h2 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h2><p>突破自身IP访问限制，访问一些平时不能访问的站点。<br>访问一些单位或团体内部资源：比如使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务。<br>提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。<br>隐藏真实IP：上网者也可以通过这种方法隐藏自己的IP，免受攻击。对于爬虫来说，我们用代理就是为了隐藏自身IP，防止自身的IP被封锁。</p><h1 id="浏览器抓包"><a href="#浏览器抓包" class="headerlink" title="浏览器抓包"></a>浏览器抓包</h1><h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><p>requests库是一个常用于http请求的模块，性质是和urllib，urllib2是一样的，作用就是向指定目标网站的后台服务器发起请求，并接收服务器返回的响应内容。</p><p>Python爬虫时，更建议用requests库。因为requests比urllib更为便捷，requests可以直接构造get，post请求并发起，而urllib.request只能先构造get，post请求，再发起。<br>安装<code>pip install  requests -i https://pypi.douban.com/simple</code></p><h2 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h2><p>在发起一个 HTTP 请求的时候，会有一个请求头 Request Headers，<br>如果不设置Request Headers 信息，某些网站会发现这不是一个正常的浏览器发起的请求，网站可能会返回异常的结果，导致网页抓取失败。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 headers 参数来指定请求头</span></span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36'</span>,</span><br><span class="line">}</span><br><span class="line"><span class="comment">#返回一个repose对象</span></span><br><span class="line">r = requests.get(url, headers=headers) </span><br></pre></td></tr></tbody></table></figure><h3 id="Response对象的方法"><a href="#Response对象的方法" class="headerlink" title="Response对象的方法"></a>Response对象的方法</h3><p>r.text()   </p><h3 id="Response对象的属性"><a href="#Response对象的属性" class="headerlink" title="Response对象的属性"></a>Response对象的属性</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">r.status_code： <span class="comment">#HTTP请求的返回状态码，200表示连接成功，404表示失败</span></span><br><span class="line">r.text：<span class="comment"># HTTP响应内容的字符串形式，即，url对应的页面内容</span></span><br><span class="line"></span><br><span class="line">r.encoding：<span class="comment">#从HTTP header中猜测的响应内容编码方式</span></span><br><span class="line">r.apparent_encoding：<span class="comment">#从内容中分析出的响应内容编码方式（备选编码方式）</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.content： <span class="comment">#返回HTTP响应内容的bytes(二进制)，有中文时，用这个</span></span><br><span class="line">r.content.decode(<span class="string">'utf-8'</span>)     <span class="comment">#将二进制内容解码</span></span><br><span class="line">json.loads(r.content.decode())     <span class="comment">#将json格式转换为字典  </span></span><br></pre></td></tr></tbody></table></figure><h2 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h2><p>图片、音频、视频这些文件本质上都是由二进制码组成的，由于有特定的保存格式和对应的解析方式，我们才可以看到这些形形色色的多媒体。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests r = requests.get(<span class="string">'https://github.com/favicon.ico'</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   f.write(r.content)</span><br></pre></td></tr></tbody></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = {<span class="string">'file'</span>: <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)} </span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files) </span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></tbody></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>urllib.request.urlretrieve(url, filename=None, reporthook=None, data=None)<br>参数说明<br>   url：外部或者本地url<br>   filename：指定了保存到本地的路径,文件夹必须已有（如果未指定该参数，urllib会生成一个临时文件来保存数据）；</p><p>   reporthook：是一个回调函数，当连接上服务器、以及相应的数据块传输完毕的时候会触发该回调。我们可以利用这个回调函数来显示当前的下载进度。</p><p>   data：指post到服务器的数据。该方法返回一个包含两个元素的元组(filename, headers)，filename表示保存到本地的路径，header表示服务器的响应头。</p><h2 id="获取和设置-Cookies"><a href="#获取和设置-Cookies" class="headerlink" title="获取和设置 Cookies"></a>获取和设置 Cookies</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.baidu.com'</span>) </span><br><span class="line"><span class="comment"># 先调用 cookies 属性即可成功得到 Cookies，可以发现它是 RequestCookieJar 类型</span></span><br><span class="line"><span class="built_in">print</span>(r.cookies) </span><br><span class="line"><span class="comment"># 用 items 方法将其转化为元组组成的列表，遍历输出每一个 Cookie 的名称和值，实现 Cookie 的遍历解析。</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items(): </span><br><span class="line">   <span class="built_in">print</span>(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></tbody></table></figure><h2 id="Session维持"><a href="#Session维持" class="headerlink" title="Session维持"></a>Session维持</h2><p>在 requests 中，如果直接利用 get 或 post 等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的 Session，相当于你用两个浏览器打开了不同的页面。 设想这样一个场景，第一个请求利用 post 方法登录了某个网站，第二次想获取成功登录后的自己的个人信息，你又用了一次 get 方法去请求个人信息页面。实际上，这相当于打开了两个浏览器，是两个完全不 相关的 Session，能成功获取个人信息吗？当然不能。 有人会问，我在两次请求时设置一样的 Cookies 不就行了？可以，但这样做起来很烦琐，我们有更简单的解决方法。 解决这个问题的主要方法就是维持同一个 Session，相当于打开一个新的浏览器选项卡而不是新开一个浏览器。但我又不想每次设置 Cookies，那该怎么办呢？这时候就有了新的利器 ——Session对象。 利用它，我们可以方便地维护一个 Session，而且不用担心 Cookies 的问题，它会帮我们自动处理好。</p><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><h1 id="提取html内容"><a href="#提取html内容" class="headerlink" title="提取html内容"></a>提取html内容</h1><p>Python中解析网页HTML内容的四种方法：<br>BeautifulSoup<br>lxml的XPath<br>requests-html<br>正则表达式</p><h2 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h2><p><a href="http://c.biancheng.net/python_spider/lxml.html">http://c.biancheng.net/python_spider/lxml.html</a><br>lxml 是 Python 的第三方解析库，完全使用 Python 语言编写，它对 Xpath 表达式提供了良好的支持，因此能够使用Xpath 表达式高效地解析 HTML/XML 文档，从中提取想要的内容</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#pip3 install lxml  #安装</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><p>xpath是一种HTML与XML的查询语言，能在HTML与XML的树状结构中寻找节点</p><p>开头是单斜杠就是从文档开头匹配，双斜杠就是任意位置匹配</p><p>获取文本<br>//标签一[@属性1=”属性值一”]/标签二[@属性2=”属性值2”]/…/text()</p><p>获取属性值<br>//标签一[@属性1=”属性值一”]/标签二[@属性2=”属性值2”]/.../@属性n</p><h2 id="Beautifulsoup"><a href="#Beautifulsoup" class="headerlink" title="Beautifulsoup"></a>Beautifulsoup</h2><p><a href="https://beautifulsoup.cn/">Beautiful Soup 4.4.0 文档</a><br>一个灵活又方便的HTML解析库，处理高效，支持多种解析器，利用它不使用正则表达式也能抓取网页内容。<br><code>pip install brautiful4</code><br><strong>安装解析器</strong><br>Beautiful Soup支持Python标准库中的HTML解析器,还支持一些第三方的解析器,其中一个是 lxml .根据操作系统不同,可以选择下列方法来安装lxml:</p><p>$ apt-get install Python-lxml</p><p>$ easy_install lxml</p><p>$ pip install lxml</p><p>另一个可供选择的解析器是纯Python实现的 html5lib , html5lib的解析方式与浏览器相同,可以选择下列方法来安装html5lib:</p><p>$ apt-get install Python-html5lib</p><p>$ easy_install html5lib</p><p>$ pip install html5lib</p><p><strong>BeautifulSoup类的基本元素</strong><br><img src="https://pic2.zhimg.com/80/v2-b0c428a1556d00e54cd8f4175d76bb19_1440w.jpg"></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 实例化Beautifulsoup对象，可以传入一段字符串(html字符串)或一个文件句柄(html文件).</span></span><br><span class="line">soup = Beautifulsoup(html,<span class="string">'lxml'</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">通过点号操作符，可以直接访问文档中的特定标签</span></span><br><span class="line"><span class="string">这样的方式每次只会返回文档中的第一个标签，对于多个标签，则通过find_all方法返回多个标签构成的列表。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">soup.head.tltle </span><br><span class="line"></span><br><span class="line">soup.find_all(<span class="string">'a'</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>soup.a</span><br><span class="line">&lt;a <span class="class"><span class="keyword">class</span>="<span class="title">sister</span>" <span class="title">href</span>="<span class="title">http</span>:</span>//example.com/elsie<span class="string">" id="</span>link1<span class="string">"&gt;Elsie&lt;/a&gt;</span></span><br><span class="line"><span class="string">soup.a['class']     #['sister']</span></span><br><span class="line"><span class="string">soup.a.get('class')    #['sister']  获取a标签的class属性的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">soup.a.name   'a'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">soup.a.string   #获取a标签的文本  'Elsie'</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></tbody></table></figure><p><strong>soup.find()</strong><br>find(name, attrs, recursive, text, **wargs)　只返回第一个匹配到的对象<br>参数：　<br>   name    标签名<br>   attrs ：属性{‘class’: ‘img’}   {“属性名”:”属性值”}<br>   text    查找文本</p><p><strong>soup.findAll()</strong></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pid = soup.find(attrs={"id":"aa"})</span><br><span class="line">pid = soup.findAll('a',{'class':'sister'})</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flask学习笔记</title>
      <link href="/2022/031560473.html"/>
      <url>/2022/031560473.html</url>
      
        <content type="html"><![CDATA[<h1 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h1><p><a href="https://www.w3cschool.cn/flask/">https://www.w3cschool.cn/flask/</a></p><p><a href="https://dormousehole.readthedocs.io/en/latest/index.html">flask中文文档</a></p><p><a href="https://www.imooc.com/wiki/flasklesson/flaskormoverview.html">https://www.imooc.com/wiki/flasklesson/flaskormoverview.html</a></p><p><a href="https://www.w3cschool.cn/flask/flask-kbid3h91.html">https://www.w3cschool.cn/flask/flask-kbid3h91.html</a></p><p><a href="https://www.zlkt.net/book/detail/10">知了传课</a></p><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><p><a href="https://blog.csdn.net/asd529735325/article/details/103011940">https://blog.csdn.net/asd529735325/article/details/103011940</a></p><h1 id="web前置"><a href="#web前置" class="headerlink" title="web前置"></a>web前置</h1><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><p>M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式<br>model：模型<br>view：视图<br>controler:控制器</p><h2 id="WSGI-Python-Web-Server-Gateway-Interface"><a href="#WSGI-Python-Web-Server-Gateway-Interface" class="headerlink" title="WSGI(Python Web Server Gateway Interface)"></a>WSGI(Python Web Server Gateway Interface)</h2><p>指定了web服务器和Python web应用或web框架之间的标准接口，以提高web应用在一系列web服务器间的移植性</p><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p>超文本传输协议（HTTP）<br>因为我们在网页上看到的内容通常是浏览器执行 HTML （超文本标记语言）得到的结果，而 HTTP 就是传输 HTML 数据的协议。HTTP 和其他很多应用级协议一样是构建在 TCP（传输控制协议）之上的，它利用了 TCP 提供的可靠的传输服务实现了 Web 应用中的数据交换。 关于 HTTP 的详细信息以及目前的发展状况，大家可以阅读<a href="http://www.ruanyifeng.com/blog/2016/08/http.html">《HTTP 协议入门》</a>、<a href="http://www.ruanyifeng.com/blog/2012/05/internet_protocol_suite_part_i.html">《互联网协议入门》</a>、<a href="http://www.ruanyifeng.com/blog/2014/09/illustration-ssl.html">《图解 HTTPS 协议》</a>等文章进行了解。</p><h3 id="reques请求"><a href="#reques请求" class="headerlink" title="reques请求"></a>reques请求</h3><p>请求头（headers）<br>请求头由若干键值对构成，包含了浏览器、编码方式、首选语言、缓存策略等信息；</p><p>请求体（request body）</p><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4><p>请求方法有8种：<br>GET（完整请求一个资源）、<br>POST（提交表单）<br>PUT（上传文件）<br>DELETE（删除）、</p><h3 id="repose响应"><a href="#repose响应" class="headerlink" title="repose响应"></a>repose响应</h3><p>响应行包含了协议版本和响应状态码</p><p>响应头<br>响应头与 HTTP 请求中的请求头类似，同样由头部字段名、冒号、空格和值组成<br>响应头中包含了一系列服务器的信息，以及服务器对请求的响应。</p><p>响应体<br>HTTP 响应中同样使用空行来表示响应头结束。响应体则是服务器根据客户端的请求返回给客户端的具体数据。可能是 HTML 页面，也有可能是JSON或二进制数据等</p><h1 id="flask"><a href="#flask" class="headerlink" title="flask"></a>flask</h1><p>安装<code>pip install flask</code></p><h2 id="flask应用"><a href="#flask应用" class="headerlink" title="flask应用"></a>flask应用</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入Flask模块</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建Flask实例对象，这是一个WSGI应用程序。</span></span><br><span class="line"><span class="comment"># 使用当前模块（__name __）的名称作为参数。</span></span><br><span class="line"><span class="comment">#作用一，寻找模板时以当前文件为参考</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># route装饰器将url绑定一个函数</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">'Hello World'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">   app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p>Flask类的run()方法在本地开发服务器上运行应用程序。</p><p>app.run(host, port, debug, options)<br>    host要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用<br>    port默认值为5000<br>    debug默认为false。 如果设置为true，则提供调试信息<br>    options要转发到底层的Werkzeug服务器。</p><h2 id="app-route-路由"><a href="#app-route-路由" class="headerlink" title="@app.route()路由"></a>@app.route()路由</h2><p>使用@app.route()装饰器，并传入URL规则作为参数，将函数绑定到URL，这个过程便将一个视图函数注册为路由</p><h3 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h3><p>通过把 URL 的一部分标记为 <code>&lt;variable_name&gt;</code> 就可以在 URL 中添加变量。标记的 部分会作为关键字参数传递给函数。通过使用 <code>&lt;converter:variable_name&gt;</code> ，可以 选择性的加上一个转换器，为变量指定规则。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/hello/&lt;name&gt;'</span></span>)   </span><span class="comment">#路由</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_name</span>(<span class="params">name</span>):</span>         <span class="comment">#视图函数</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">'Hello %s!'</span> % name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#调试模式,如果代码更改，服务器将自行重新加载。会在终端提示错误</span></span><br><span class="line">app.run(host=<span class="string">"127.0.0.1"</span>,post=<span class="string">''</span>,debug = <span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>还可以使用转换器构建规则<br>  <code>@app.route('/blog/&lt;int:postID&gt;')</code><br>  int    接受正整数<br>  float    接受正浮点数<br>  path    类似 string ，但可以包含斜杠<br>  uuid    接受 UUID 字符串<br>  string    （缺省值） 接受任何不包含斜杠的文本</p><h3 id="唯一的URL-重定向行为"><a href="#唯一的URL-重定向行为" class="headerlink" title="唯一的URL/重定向行为"></a>唯一的URL/重定向行为</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/user/'</span></span>) </span></span><br></pre></td></tr></tbody></table></figure><p>尾部有/，无论请求的Url是否带有/，都可以执行视图函数，访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定向，帮你在尾部加上一个斜杠。</p><p>尾部没有/，如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助 搜索引擎避免重复索引同一页面。</p><h3 id="URL-构建"><a href="#URL-构建" class="headerlink" title="URL 构建"></a>URL 构建</h3><p><strong>url_for()函数</strong>用于构建指定函数的 URL。</p><p>  接受函数的名称作为第一个参数，<br>  任意个关键字参数，每个参数对应于URL的变量部分。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, redirect, url_for</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/admin'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_admin</span>():</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">'Hello Admin'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/user/&lt;name&gt;'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_user</span>(<span class="params">name</span>):</span></span><br><span class="line">   <span class="keyword">if</span> name ==<span class="string">'admin'</span>:</span><br><span class="line">    <span class="comment"># 如果匹配，则使用url_for()将应用程序重定向到hello_admin()函数</span></span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">'hello_admin'</span>))</span><br><span class="line">   <span class="keyword">else</span>:</span><br><span class="line">      <span class="keyword">return</span> redirect(url_for(<span class="string">'hello_guest'</span>, guest = name))</span><br></pre></td></tr></tbody></table></figure><p>为什么不在把 URL 写死在模板中，而要使用反转函数 url_for() 动态构建？</p><p>1.URL反转：根据视图函数名称得到当前所指向的url,函数名一般很少更改，当更改url时就不用改全部辣</p><p>2.url_for() 函数最简单的用法是以视图函数名作为参数，返回对应的url，还可以用作加载静态文件，如在模版中加载css静态文件.<code>&lt;link rel="stylesheet" href="{{url_for('static',filename='css/index.css')}}"&gt;</code></p><h3 id="页面跳转和重定向："><a href="#页面跳转和重定向：" class="headerlink" title="页面跳转和重定向："></a>页面跳转和重定向：</h3><p>redirect 是重定向函数，输入一个URL后，自动跳转到另一个URL所在的地址 </p><ul><li><p>永久性重定向：http的状态码是301，多用于旧网址被废弃了要转到一个新的网址确保用户的访问，最经典的就是京东网站，你输入<a href="http://www.jingdong.com的时候,会被重定向到www.jd.com,因为jingdong.com这个网址已经被废弃了,被改成jd.com,所以这种情况下应该用永久重定向./">www.jingdong.com的时候，会被重定向到www.jd.com，因为jingdong.com这个网址已经被废弃了，被改成jd.com，所以这种情况下应该用永久重定向。</a></p></li><li><p>暂时性重定向：http的状态码是302，表示页面的暂时性跳转。比如访问一个需要权限的网址，如果当前用户没有登录，应该重定向到登录页面，这种情况下，应该用暂时性重定向。</p></li></ul><p>在flask中，重定向是通过flask.redirect(location,code=302)这个函数来实现的，location表示需要重定向到的URL，应该配合之前讲的url_for()函数来使用，code表示采用哪个重定向，默认是302也即暂时性重定向，可以修改成301来实现永久性重定向。</p><p>以下来看一个例子，关于在flask中怎么使用重定向：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,redirect</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.debug = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login/'</span>,methods=[<span class="string">'GET'</span>,<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'login page'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/profile/'</span>,methods=[<span class="string">'GET'</span>,<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span>():</span></span><br><span class="line">    name = request.args.get(<span class="string">'name'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> name:</span><br><span class="line">    <span class="comment"># 如果没有name，说明没有登录，重定向到登录页面</span></span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">'login'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> name</span><br></pre></td></tr></tbody></table></figure><h3 id="HTTP-方法"><a href="#HTTP-方法" class="headerlink" title="HTTP 方法"></a>HTTP 方法</h3><p>Web 应用使用不同的 HTTP 方法处理 URL 。 缺省情况下，一个路由只回应 GET 请求。 可以使用 route() 装饰器的 methods 参数来处理不同的 HTTP 方法:</p><p>1.从服务器获取数据一般用Get请求<br>2.把数据发送给服务器用Post请求</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login'</span>, methods=[<span class="string">'GET'</span>, <span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        <span class="keyword">return</span> do_the_login()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> show_the_login_form()</span><br></pre></td></tr></tbody></table></figure><p>如果当前使用了 GET 方法， Flask 会自动添加 HEAD 方法支持，并且同时还会 按照 HTTP RFC 来处理 HEAD 请求。同样， OPTIONS 也会自动实现。</p><h2 id="Jinja模板"><a href="#Jinja模板" class="headerlink" title="Jinja模板"></a>Jinja模板</h2><p>视图函数只负责业务逻辑和数据处理(业务逻辑方面)<br>而模板则取到视图函数的数据结果进行展示(视图展示方面)</p><p>在项目下创建 templates 文件夹，用于存放所有html模板文件</p><h3 id="Flask渲染Jinja模板"><a href="#Flask渲染Jinja模板" class="headerlink" title="Flask渲染Jinja模板"></a>Flask渲染Jinja模板</h3><p>当访问/about/的时候，about()函数会在当前目录下的templates文件夹下寻找about.html模板文件。如果想更改模板文件地址，应该在创建app的时候，给Flask传递一个关键字参数template_folder，指定具体的路径，再看以下例子：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"><span class="comment">#在C盘的templates文件夹中寻找模板文件。</span></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">r'C:\templates'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/about/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span>():</span></span><br><span class="line">  <span class="comment">#要渲染一个模板，通过render_template方法即可</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'about.html'</span>)```</span><br></pre></td></tr></tbody></table></figure><h3 id="静态文件的配置"><a href="#静态文件的配置" class="headerlink" title="静态文件的配置"></a>静态文件的配置</h3><p>Web应用中会出现大量的静态文件来使得网页更加生动美观。类似于CSS样式文件、JavaScript脚本文件、图片文件、字体文件等静态资源。在Jinja中加载静态文件非常简单，只需要通过url_for全局函数就可以实现，看以下代码：</p><p><code>&lt;link href="{{ url_for('static',filename='about.css') }}"&gt;</code><br>url_for函数默认会在项目根目录下的static文件夹中寻找about.css文件，如果找到了，会生成一个相对于项目根目录下的/static/about.css路径。当然我们也可以把静态文件不放在static文件夹中，此时就需要具体指定了，看以下代码：</p><p><code>app = Flask(__name__,static_folder='C:\static')</code><br>那么访问静态文件的时候，将会到/static这个文件夹下寻找。</p><h3 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h3><p> 如果想要传递变量到模板中，那么可以把变量定义成字典，然后在<code>render_template</code>中，通过关键字参数的方式传递过去。<code>render_template('',**context)</code>。<br>代码中传入字符串，列表，字典到模板中</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="comment"># 往模板中传入的数据</span></span><br><span class="line">    my_str = <span class="string">'Hello Word'</span></span><br><span class="line">    my_int = <span class="number">10</span></span><br><span class="line">    my_array = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br><span class="line">    my_dict = {</span><br><span class="line">        <span class="string">'name'</span>: <span class="string">'xiaoming'</span>,</span><br><span class="line">        <span class="string">'age'</span>: <span class="number">18</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'hello.html'</span>,</span><br><span class="line">                           my_str=my_str,</span><br><span class="line">                           my_int=my_int,</span><br><span class="line">                           my_array=my_array,</span><br><span class="line">                           my_dict=my_dict</span><br><span class="line">                           )</span><br></pre></td></tr></tbody></table></figure><p>模板中代码</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  我的模板html内容</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span>{{ my_str }}</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span>{{ my_int }}</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span>{{ my_array }}</span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span> /&gt;</span>{{ my_dict }}</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Jinja2模版概述"><a href="#Jinja2模版概述" class="headerlink" title="Jinja2模版概述"></a>Jinja2模版概述</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">1. <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">2. <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">3.    <span class="tag">&lt;<span class="name">title</span>&gt;</span>My Webpage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">4. <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">5. <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">6.     <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"navigation"</span>&gt;</span></span><br><span class="line">7.     {% for item in navigation %}</span><br><span class="line">8.         <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"{{ item.href }}"</span>&gt;</span>{{ item.caption }}<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">9.     {% endfor %}</span><br><span class="line">10.    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">11.</span><br><span class="line">12.    {{ a_variable }}</span><br><span class="line">13.    {{ user.name }}</span><br><span class="line">14.    {{ user['name'] }}</span><br><span class="line">15.</span><br><span class="line">16.    {# a comment #}</span><br><span class="line">17. <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">18.<span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>以上示例有需要进行解释：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> 第12~14行的{{ ... }}：用来装载一个变量，模板渲染的时候，会把这个变量代表的值替换掉。并且可以间接访问一个变量的属性或者一个字典的key。关于点.号访问和[]中括号访问，没有任何区别，都可以访问属性和字典的值。</span><br><span class="line">  第7~9行的{% ... %}：用来装载一个控制语句，以上装载的是for循环，</span><br><span class="line">  第14行的{# ... #}：用来装载一个注释，模板渲染的时候会忽视这中间的值。</span><br><span class="line"></span><br><span class="line">二、属性访问规则：</span><br><span class="line">比如在模板中有一个变量这样使用：foo.bar，那么在Jinja2中是这样进行访问的：</span><br><span class="line"></span><br><span class="line">先去查找foo的bar这个属性，也即通过getattr(foo,'bar')。</span><br><span class="line">如果没有，就去通过foo.__getitem__('bar')的方式进行查找。</span><br><span class="line">如果以上两种方式都没有找到，返回一个undefined。</span><br><span class="line">在模板中有一个变量这样使用：foo['bar']，那么在Jinja2中是这样进行访问：</span><br><span class="line"></span><br><span class="line">通过foo.__getitem__('bar')的方式进行查找。</span><br><span class="line">如果没有，就通过getattr(foo,'bar')的方式进行查找。</span><br><span class="line">如果以上没有找到，则返回一个undefined。</span><br></pre></td></tr></tbody></table></figure><h3 id="模版过滤器"><a href="#模版过滤器" class="headerlink" title="模版过滤器"></a>模版过滤器</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">Jinja2模版过滤器相当于是一个函数，把当前的变量传入到过滤器中，然后过滤器根据自己的功能，再返回相应的值，之后再将结果渲染到页面中。在html中使用，{{  }}</span><br><span class="line">过滤器是通过管道符号（|）进行使用的，例如：{{ name|length }}，将返回name的长度。</span><br><span class="line"></span><br><span class="line">Jinja2中内置了许多过滤器，在这里可以看到所有的过滤器，现对一些常用的过滤器进行讲解：</span><br><span class="line"></span><br><span class="line">abs(value)：返回一个数值的绝对值。 例如：-1|abs。</span><br><span class="line"></span><br><span class="line">default(value,default_value,boolean=false)：如果当前变量没有值，则会使用参数中的值来代替。name|default('xiaotuo')——如果name不存在，则会使用xiaotuo来替代。boolean=False默认是在只有这个变量为undefined的时候才会使用default中的值，如果想使用python的形式判断是否为false，则可以传递boolean=true。也可以使用or来替换。</span><br><span class="line"></span><br><span class="line">escape(value)或e：转义字符，会将&lt;、&gt;等符号转义成HTML中的符号。例如：content|escape或content|e。</span><br><span class="line"></span><br><span class="line">first(value)：返回一个序列的第一个元素。names|first。</span><br><span class="line"></span><br><span class="line">format(value,*arags,**kwargs)：格式化字符串。例如以下代码：</span><br><span class="line"></span><br><span class="line">`{{ "%s" - "%s"|format('Hello?',"Foo!") }}`</span><br><span class="line">将输出：Helloo? - Foo!</span><br><span class="line"></span><br><span class="line">last(value)：返回一个序列的最后一个元素。示例：names|last。</span><br><span class="line"></span><br><span class="line">length(value)：返回一个序列或者字典的长度。示例：names|length。</span><br><span class="line"></span><br><span class="line">join(value,d=u'')：将一个序列用d这个参数的值拼接成字符串。</span><br><span class="line"></span><br><span class="line">safe(value)：如果开启了全局转义，那么safe过滤器会将变量关掉转义。示例：content_html|safe。</span><br><span class="line"></span><br><span class="line">int(value)：将值转换为int类型。</span><br><span class="line"></span><br><span class="line">float(value)：将值转换为float类型。</span><br><span class="line"></span><br><span class="line">lower(value)：将字符串转换为小写。</span><br><span class="line"></span><br><span class="line">upper(value)：将字符串转换为小写。</span><br><span class="line"></span><br><span class="line">replace(value,old,new)： 替换将old替换为new的字符串。</span><br><span class="line"></span><br><span class="line">truncate(value,length=255,killwords=False)：截取length长度的字符串。</span><br><span class="line"></span><br><span class="line">striptags(value)：删除字符串中所有的HTML标签，如果出现多个空格，将替换成一个空格。</span><br><span class="line"></span><br><span class="line">trim：截取字符串前面和后面的空白字符。</span><br><span class="line"></span><br><span class="line">string(value)：将变量转换成字符串。</span><br><span class="line"></span><br><span class="line">wordcount(s)：计算一个长字符串中单词的个数。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="flask模版继承"><a href="#flask模版继承" class="headerlink" title="flask模版继承"></a>flask模版继承</h3><p>一个系统网站往往需要统一的结构，这样看起来比较“整洁”。<br>比如说，一个页面中都有标题、内容显示、底部等几个部分。如果在每一个网页中都进行这几部分的编写，那么这个网站将会有很多冗余部分，这时可以采用模板继承，即将相同的部分提取出来，形成一个base.html，具有这些相同部分的网页通过继承base.html来得到对应的模块。</p><p>基本模板直接在templates目录中，蓝图的模板将放置在与蓝图同名的目录中。例如：flaskr/templates/auth/register.html</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">{% extends "base.html" %}</span><br><span class="line"></span><br><span class="line">{% block 模板名称 %}</span><br><span class="line">    ....</span><br><span class="line">{% endblock %}</span><br></pre></td></tr></tbody></table></figure><p>base.html作为基类（父模块），index.html和product.html文件作为子类（子模块），子类去继承基类的基本内容。</p><p>base.html文件内容如下：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>{% block title %}{% endblock %} -我的网站<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">{% block body %}</span><br><span class="line">    这是基类（base.html）中的内容</span><br><span class="line">{% endblock %}</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>子模版</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">{% extends "base.html" %}</span><br><span class="line"></span><br><span class="line">{% block title %}产品列表页{% endblock %}</span><br><span class="line"></span><br><span class="line">{% block body %}</span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是产品列表页（product.html）的内容！<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">获取网页标题内容：<span class="tag">&lt;<span class="name">h4</span>&gt;</span>{{ self.title() }}<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">{% endblock %}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p><a href="https://flask.palletsprojects.com/en/2.1.x/config/#configuration-basics">所有的内置配置项</a><br>在Flask项目中，有四种方式进行项目的配置：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过加载模块的方式进行配置</span></span><br><span class="line"><span class="comment"># 1. 通过模块字符串</span></span><br><span class="line">app.config.from_object(<span class="string">'settings'</span>)</span><br><span class="line"><span class="comment"># 2. 通过模块对象</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line">app.config.from_object(settings)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过app.config对象来进行配置</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">'SECRET_KEY'</span>] = <span class="string">"xxx"</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 因为app.config是flask.config.Config的实例，而Config类是继承自dict，因此可以通过update方法：</span></span><br><span class="line"></span><br><span class="line">app.config.update(</span><br><span class="line">   DEBUG=<span class="literal">True</span>,</span><br><span class="line">   SECRET_KEY=<span class="string">'...'</span></span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.config.from_pyfile()，该方法传入一个文件名，通常是以.py结尾的文件，但也不限于只使用.py后缀的文件：</span></span><br><span class="line">app.config.from_pyfile(<span class="string">'settings.py'</span>,silent=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># silent=True表示如果配置文件不存在的时候不抛出异常，默认是为False，会抛出异常。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="蓝图技术"><a href="#蓝图技术" class="headerlink" title="蓝图技术"></a>蓝图技术</h2><p>蓝图技术(BluePrint )，可以帮助你实现flask应用的模块划分,一个模块拥有一个属于自己的文件目录，与之相关的代码都将写在这里</p><p>它是一个存储视图方法的集合，Flask 程序通过 Blueprint 来组织 URL 以及处理请求。</p><h3 id="功能式架构"><a href="#功能式架构" class="headerlink" title="功能式架构"></a>功能式架构</h3><p>按照 功能结构 组织。模板在一个文件夹中，静态文件在另外一个文件夹中，视图在第三个文件夹中。<br>如果应用的组件之间联系较为紧密，则建议使用功能式架构。<br>project/<br>  forms/<br>    myform.py<br>    …<br>  models/<br>    <strong>init</strong>.py<br>    mymodel.py<br>    …<br>  routes/<br>    <strong>init</strong>.py<br>    myroute.py<br>    …<br>  static/<br>    …<br>  services/<br>    <strong>init</strong>.py<br>    …<br>  templates/<br>    index.html<br>    …<br>  <strong>init</strong>.py<br>  config.py<br>  manage.py</p><p>forms(表单): 存放表单对象<br>models(模型): 存放数据模型，即库表在程序中的映射对象，以及对象之间的关系<br>routes(路由): 存放请求路由以及处理逻辑<br>static(静态文件): flask约定存放静态文件的目录<br>templates(模板): flask约定存放页面模板的目录<br>services(服务): 存放业务逻辑或者其他服务类功能<br>init.py: flask app初始化方法<br>config.py: 项目配置文件<br>manage.py: 启动一个开发服务器，但是不会在生产环境中用到</p><h3 id="分区式架构"><a href="#分区式架构" class="headerlink" title="分区式架构"></a>分区式架构</h3><p>基于应用的结构<br>如果应用是由独立的且仅仅共享模型和配置的各组件组成，建议选择分区式；<br>按照基于应用组织。同一个功能的模板，静态文件，视图都在一个文件夹内。<br>project/<br>  <strong>init</strong>.py<br>  db.py<br>  auth/<br>    <strong>init</strong>.py<br>    route.py<br>    models.py<br>    templates/<br>    static/<br>  blog/<br>    <strong>init</strong>.py<br>    route.py<br>    models.py<br>    templates/<br>    static/<br>…<br>每个目录都对应一个应用。Django 默认是使用这种方式来组织目录。当然这并不意味该方式是很好的，你需要按照项目来选择目录结构。某些时候，你将不得不使用一个混合模式。</p><h3 id="使用蓝图步骤"><a href="#使用蓝图步骤" class="headerlink" title="使用蓝图步骤"></a>使用蓝图步骤</h3><h4 id="1-创建一个蓝图对象"><a href="#1-创建一个蓝图对象" class="headerlink" title="1.创建一个蓝图对象"></a>1.创建一个蓝图对象</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># user/__init__.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个蓝图对象</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">参数1：蓝图名字</span></span><br><span class="line"><span class="string">2.模块名</span></span><br><span class="line"><span class="string">3.蓝图前缀</span></span><br><span class="line"><span class="string">4.template_folder :设置模板目录;蓝图对象默认的模板目录为系统的模版目录,如果存在同名模板文件,则系统会优先使用 系统的模版目录中的文件</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line">bp = Blueprint(<span class="string">'user'</span>,__name__,url_prefix=<span class="string">'/user/'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"用户首页"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">'profile/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">profile</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"个人简介"</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="2-主程序上注册这个蓝图对象"><a href="#2-主程序上注册这个蓝图对象" class="headerlink" title="2.主程序上注册这个蓝图对象"></a>2.主程序上注册这个蓝图对象</h4><p>然后我们在主程序中，通过app.register_blueprint()方法将这个蓝图注册进url映射中，看下主app的实现：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> user</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.register_blueprint(user.bp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">9000</span>)</span><br></pre></td></tr></tbody></table></figure><p>以后访问/user/，/user/profile/，都是执行的user.py文件中的视图函数，这样就实现了项目的模块化。</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><h4 id="1-1-寻找静态文件："><a href="#1-1-寻找静态文件：" class="headerlink" title="1.1. 寻找静态文件："></a>1.1. 寻找静态文件：</h4><p>默认不设置任何静态文件路径，Jinja2会在项目的static文件夹中寻找静态文件。也可以设置其他的路径，在初始化蓝图的时候，Blueprint这个构造函数，有一个参数static_folder可以指定静态文件的路径，如：</p><p><code>bp = Blueprint('admin',__name__,url_prefix='/admin',static_folder='static')</code><br>static_folder可以是相对路径（相对蓝图文件所在的目录），也可以是绝对路径。在配置完蓝图后，还有一个需要注意的地方是如何在模板中引用静态文件。在模板中引用蓝图，应该要使用蓝图名+.+static来引用，如下所示：</p><p><code>  &lt;link href="{{ url_for('admin.static',filename='about.css') }}"&gt;</code></p><h4 id="1-2-寻找模板文件："><a href="#1-2-寻找模板文件：" class="headerlink" title="1.2. 寻找模板文件："></a>1.2. 寻找模板文件：</h4><p>跟静态文件一样，默认不设置任何模板文件的路径，将会在项目的templates中寻找模板文件。也可以设置其他的路径，在构造函数Blueprint中有一个template_folder参数可以设置模板的路径，如下所示：</p><p><code>bp = Blueprint('admin',__name__,url_prefix='/admin',template_folder='templates')</code><br>模板文件和静态文件有点区别，以上代码写完以后，如果你渲染一个模板return render_template(‘admin.html’)，Flask默认会去项目根目录下的templates文件夹中查找admin.html文件，如果找到了就直接返回，如果没有找到，才会去蓝图文件所在的目录下的templates文件夹中寻找。</p><h4 id="1-3-url-for生成url："><a href="#1-3-url-for生成url：" class="headerlink" title="1.3. url_for生成url："></a>1.3. url_for生成url：</h4><p>用url_for生成蓝图的url，使用的格式是：蓝图名称+.+视图函数名称。比如要获取admin这个蓝图下的index视图函数的url，应该采用以下方式：</p><p><code>url_for('admin.index')</code><br>其中这个蓝图名称是在创建蓝图的时候，传入的第一个参数。bp = Blueprint(‘admin’,<strong>name</strong>,url_prefix=’/admin’,template_folder=’templates’)</p><h3 id="组织扩展-Extensions"><a href="#组织扩展-Extensions" class="headerlink" title="组织扩展(Extensions)"></a>组织扩展(Extensions)</h3><p>一般推荐将所有扩展在app/extensions.py中进行实例化，如以下代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## app/extensions.py</span></span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_login <span class="keyword">import</span> LoginManager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bootstrap = Bootstrap()</span><br><span class="line">db = SQLAlchemy()</span><br><span class="line">login_manager = LoginManager()</span><br><span class="line">login_manager.login_view = <span class="string">'auth_bp.login'</span></span><br></pre></td></tr></tbody></table></figure><p>然后在实例化Flask时，进行绑定：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## app/__init__.py</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> app.extensions <span class="keyword">import</span> bootstrap, db, login_manager</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>(<span class="params">config_name</span>):</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    app.config.from_object(config[config_name])</span><br><span class="line">    config[config_name].init_app(app)</span><br><span class="line"></span><br><span class="line">    bootstrap.init_app(app)</span><br><span class="line">    db.init_app(app)</span><br><span class="line">    login_manager.init_app(app)</span><br><span class="line"></span><br><span class="line">    <span class="comment">## register blueprint</span></span><br><span class="line">    <span class="keyword">from</span> .main <span class="keyword">import</span> main_bp</span><br><span class="line">    app.register_blueprint(main_bp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> .auth <span class="keyword">import</span> auth_bp <span class="keyword">as</span> auth_blueprint</span><br><span class="line">    app.register_blueprint(auth_blueprint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">from</span> .api <span class="keyword">import</span> api_bp <span class="keyword">as</span> api_blueprint</span><br><span class="line">    app.register_blueprint(api_blueprint, url_prefix=<span class="string">'/api'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></tbody></table></figure><h3 id="子域名"><a href="#子域名" class="headerlink" title="子域名"></a>子域名</h3><p>子域名在许多网站中都用到了，比如一个网站叫做xxx.com，那么我们可以定义一个子域名cms.xxx.com来作为cms管理系统的网址，子域名的实现一般也是通过蓝图来实现，在之前章节中，我们创建蓝图的时候添加了一个url_prefix=/user作为url前缀，那样我们就可以通过/user/来访问user下的url。但使用子域名则不需要。另外，还需要配置SERVER_NAME，比如app.config[SERVER_NAME]=’example.com:9000’。并且在注册蓝图的时候，还需要添加一个subdomain的参数，这个参数就是子域名的名称，先来看一下蓝图的实现(admin.py)：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line">bp = Blueprint(<span class="string">'admin'</span>,__name__,subdomain=<span class="string">'admin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@bp.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">admin</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Admin Page'</span></span><br></pre></td></tr></tbody></table></figure><p>这个没有多大区别，接下来看主app的实现：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置`SERVER_NAME`</span></span><br><span class="line">app.config[<span class="string">'SERVER_NAME'</span>] = <span class="string">'example.com:8000'</span></span><br><span class="line"><span class="comment"># 注册蓝图，指定了subdomain</span></span><br><span class="line">app.register_blueprint(admin.bp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>,port=<span class="number">8000</span>,debug=<span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><p>写完以上两个文件后，还是不能正常的访问admin.example.com:8000这个子域名，因为我们没有在host文件中添加域名解析，你可以在最后添加一行127.0.0.1 admin.example.com，就可以访问到了。另外，子域名不能在127.0.0.1上出现，也不能在localhost上出现。</p><h2 id="request和reposr对象"><a href="#request和reposr对象" class="headerlink" title="request和reposr对象"></a>request和reposr对象</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## request 封装了请求消息，可以获取请求的各种参数。</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义处理路径 /login 的函数 login，装饰器 @app.route(’/login’, methods = [‘GET’]) 表示使用 GET 方法处理路径 /login 的请求。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/login'</span>, methods = [<span class="string">'GET'</span>]</span>)</span></span><br><span class="line"><span class="comment">## 函数 login 返回一段用于登录的 HTML 表单，表单包括 2 个字段: name 和 password。在第 4 行，指定使用 POST 方法提交表单给服务端的 /check_login 页面。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'''</span></span><br><span class="line"><span class="string">&lt;form action="/check_login" method="POST"&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;&lt;input type="text" name="name"/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;&lt;input type="password" name="password"/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">  &lt;p&gt;&lt;input type="submit" value="submit"/&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 使用 POST 方法处理路径 /check_login 的请求。</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/check_login'</span>, methods = [<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_login</span>():</span></span><br><span class="line">    name = request.form[<span class="string">'name'</span>]</span><br><span class="line">    password = request.form[<span class="string">'password'</span>]</span><br><span class="line">    <span class="keyword">if</span> name == <span class="string">'guest'</span> <span class="keyword">and</span> password == <span class="string">'123'</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Login succeed'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Login failed'</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="setting-py"><a href="#setting-py" class="headerlink" title="setting.py"></a>setting.py</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> setting</span><br><span class="line">app.config.from_object(setting)   <span class="comment">#导入配置文件</span></span><br></pre></td></tr></tbody></table></figure><h2 id="一键安装依赖包"><a href="#一键安装依赖包" class="headerlink" title="一键安装依赖包"></a>一键安装依赖包</h2><p>##requirements.txt 用来记录项目所有的依赖包和版本号<br>pip freeze &gt; requirements.txt</p><p>##一次性安装 requirements.txt 里面所有的依赖包，<br>pip install -r requirements.txt</p><h2 id="abort函数返回异常"><a href="#abort函数返回异常" class="headerlink" title="abort函数返回异常"></a>abort函数返回异常</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response,json,request,render_template,abort</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/index'</span>,methods=[<span class="string">'GET'</span>,<span class="string">'POST'</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">  <span class="keyword">if</span> request.method == <span class="string">'GEt'</span>:</span><br><span class="line">      <span class="comment">##渲染模板</span></span><br><span class="line">      <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>)</span><br><span class="line">  <span class="keyword">if</span>  request.method == <span class="string">'POST'</span>:</span><br><span class="line">      name = request.form.get(<span class="string">'name'</span>)</span><br><span class="line">      password  = request.form.get(<span class="string">'password'</span>)</span><br><span class="line">      <span class="keyword">if</span> name == <span class="string">'zhangsan'</span> <span class="keyword">and</span> password==<span class="string">'123'</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="string">'login success'</span></span><br><span class="line">      <span class="keyword">else</span>:</span><br><span class="line">          abort(<span class="number">404</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="返回json数据给前端"><a href="#返回json数据给前端" class="headerlink" title="返回json数据给前端"></a>返回json数据给前端</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, make_response,json</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/index'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    data = {</span><br><span class="line">        <span class="string">'name'</span>:<span class="string">'张三'</span>    </span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> make_response(json.dumps(data,ensure_ascii=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(debug = <span class="literal">True</span>) </span><br></pre></td></tr></tbody></table></figure><h1 id="Flask结合Bootstrap框架"><a href="#Flask结合Bootstrap框架" class="headerlink" title="Flask结合Bootstrap框架"></a>Flask结合Bootstrap框架</h1><p>pip install flask-bootstrap</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入bootstrap并进行初始化</span></span><br><span class="line"><span class="keyword">from</span> flask_bootstrap <span class="keyword">import</span> Bootstrap</span><br><span class="line">bootstrap=Bootstrap()</span><br></pre></td></tr></tbody></table></figure><h1 id="flask扩展"><a href="#flask扩展" class="headerlink" title="flask扩展"></a>flask扩展</h1><p>Flask扩展是一个Python模块，它向Flask应用程序添加了特定类型的支持。</p><p>Flask Extension Registry（Flask扩展注册表）是一个可用的扩展目录。</p><p>Flask常用扩展包：<br>Flask-SQLalchemy：操作数据库；</p><p>Flask-script：插入脚本；</p><p>Flask-migrate：管理迁移数据库；</p><p>Flask-Session：Session存储方式指定；</p><p>Flask-WTF：表单；</p><p>Flask-Mail：邮件；</p><p>Flask-Bable：提供国际化和本地化支持，翻译；</p><p>Flask-Login：认证用户状态；</p><p>Flask-OpenID：认证；</p><p>Flask-RESTful：开发REST API的工具；</p><p>Flask-Bootstrap：集成前端Twitter Bootstrap框架；</p><p>Flask-Moment：本地化日期和时间；</p><p>Flask-Admin：简单而可扩展的管理接口的框架</p><p>每种类型的扩展通常提供有关其用法的大量文档。</p><p>由于扩展是一个Python模块，因此需要导入它才能使用它。</p><p>Flask 的扩展通常命名为“ Flask-Foo ”或者“ Foo-Flask ” 。可以在 PyPI 搜索 标记为 <a href="https://pypi.org/search/?c=Framework+::+Flask">Framework :: Flask</a> 扩展包。</p><h2 id="命令行控制启动"><a href="#命令行控制启动" class="headerlink" title="命令行控制启动"></a>命令行控制启动</h2><p>安装<br><code>pip install flask-script</code></p><p>使用</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入类库</span></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># 创建对象</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line"><span class="comment"># 启动程序</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"><span class="comment"># app.run()</span></span><br><span class="line"><span class="comment"># 命令行控制启动</span></span><br><span class="line">manager.run()</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">启动：python manager.py runserver [-d] [-r]</span><br><span class="line">-? &amp; --help 查看帮助</span><br><span class="line">-d 开启调试模式</span><br><span class="line">-r修改文件自动加载</span><br><span class="line">-h --host指定主机</span><br><span class="line">-p --port指定端口</span><br><span class="line">--threaded使用多线程  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Flask-SQLAlchemy库"><a href="#Flask-SQLAlchemy库" class="headerlink" title="Flask-SQLAlchemy库"></a>Flask-SQLAlchemy库</h2><p><strong>SQLAlchemy</strong> 是 Python 中一个通过 ORM 操作数据库的框架。SQLAlchemy 对象关系映射器提供了一种方法，用于将用户定义的 Python 类与数据库表相关联，并将这些类实例与其对应表中的行相关联。SQLAlchemy 可以让开发者使用类和对象的方式操作数据库，从而从繁琐的 sql 语句中解脱出来。</p><p><strong>Flask-SQLAlchemy</strong>是对SQLAlchemy进行了一个简单的封装，使得我们在flask中使用sqlalchemy更加的简单。只能在flask中使用</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pip install  flask-sqlalchemy  # 安装</span><br><span class="line"><span class="meta">#</span><span class="bash">如果使用 mysql 数据库，还需要安装 mysqldb 驱动。</span></span><br><span class="line">pip install pymysql</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="ORM-模型概念"><a href="#ORM-模型概念" class="headerlink" title="ORM 模型概念"></a>ORM 模型概念</h3><p>对象 - 关系映射 (Object Relation Mapping) 模型<br>ORM 模型定义了关系数据库和对象的映射关系，使得访问数据库的代码简单清晰、易于维护。</p><table><thead><tr><th align="center">关系数据库中的概念</th><th align="center">面向对象中的概念</th></tr></thead><tbody><tr><td align="center">表</td><td align="center">类</td></tr><tr><td align="center">表记录</td><td align="center">对象</td></tr><tr><td align="center">字段</td><td align="center">属性</td></tr></tbody></table><p>假设关系数据库中存在一张表 Students，包括 sno、name 和 age 等字段，使用如下 SQL 语句进行创建：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> students(</span><br><span class="line">    sno <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">    age <span class="type">INT</span></span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在 ORM 模型中，存在一个类 Student 与关系数据库中的表 students 相对应，代码如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类Student映射表students</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, sno, name, age</span>):</span></span><br><span class="line">  <span class="comment"># 属性 sno、name 和 age映射字段 sno、name 和 age</span></span><br><span class="line">        self.sno = sno</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line"><span class="comment">#对象tom映射表students中的一条记录 </span></span><br><span class="line">tom = Student(<span class="string">'1918001'</span>, <span class="string">'tom'</span>, <span class="number">12</span>)        </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="数据库连接配置"><a href="#数据库连接配置" class="headerlink" title="数据库连接配置"></a>数据库连接配置</h3><table><thead><tr><th>配置选项</th><th>说明</th></tr></thead><tbody><tr><td>SQLALCHEMY_DATABASE_URI</td><td>连接数据库。示例：mysql://username:password@host/post/db?charset=utf-8</td></tr><tr><td>SQLALCHEMY_BINDS</td><td>一个将会绑定多种数据库的字典。 更多详细信息请看官文 绑定多种数据库.</td></tr><tr><td>SQLALCHEMY_ECHO</td><td>调试设置为true</td></tr><tr><td>SQLALCHEMY_POOL_SIZE</td><td>数据库池的大小，默认值为5。</td></tr><tr><td>SQLALCHEMY_POOL_TIMEOUT</td><td>连接超时时间</td></tr><tr><td>SQLALCHEMY_POOL_RECYCLE</td><td>自动回收连接的秒数。</td></tr><tr><td>SQLALCHEMY_MAX_OVERFLOW</td><td>控制在连接池达到最大值后可以创建的连接数。当这些额外的连接回收到连接池后将会被断开和抛弃。</td></tr><tr><td>SQLALCHEMY_TRACK_MODIFICATIONS</td><td>如果设置成 True (默认情况)，Flask-SQLAlchemy 将会追踪对象的修改并且发送信号。这需要额外的内存， 如果不必要的可以禁用它。</td></tr></tbody></table><p>dialect+driver://username:password@host:port/database?charset=utf8</p><ul><li> dialect是数据库的实现，比如MySQL、PostgreSQL、SQLite，并且转换成小写</li><li> driver是Python对应的驱动，如果不指定，会选择默认的驱动，比如MySQL的默认驱动是MySQLdb</li><li> username是连接数据库的用户名</li><li> password是连接数据库的密码</li><li> host是连接数据库的域名</li><li> port是数据库监听的端口号</li><li> database是连接哪个数据库的名字。</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@file: config.py</span></span><br><span class="line"><span class="string">@author: wenke</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@time: 2022/7/19 11:23</span></span><br><span class="line"><span class="string">@Description: 数据库连接配置</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line">DIALCT = <span class="string">"mysql"</span></span><br><span class="line">DRIVER = <span class="string">"pymysql"</span></span><br><span class="line">USERNAME = <span class="string">"root"</span></span><br><span class="line">PASSWORD = <span class="string">"root"</span></span><br><span class="line">HOST = <span class="string">"127.0.0.1"</span></span><br><span class="line">PORT = <span class="string">"3306"</span></span><br><span class="line">DATABASE = <span class="string">"bookdb"</span></span><br><span class="line"><span class="comment"># 定义数据库连接字符串DB_URI</span></span><br><span class="line">DB_URI = <span class="string">"{}+{}://{}:{}@{}:{}/{}?charset=utf8"</span>.<span class="built_in">format</span>(DIALCT,DRIVER,USERNAME,PASSWORD,HOST,PORT,DATABASE)</span><br><span class="line"></span><br><span class="line">SQLALCHEMY_DATABASE_URI = DB_URI</span><br><span class="line">SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br><span class="line">SQLALCHEMY_ECHO = <span class="literal">True</span></span><br></pre></td></tr></tbody></table></figure><h3 id="model对象循环引用"><a href="#model对象循环引用" class="headerlink" title="model对象循环引用"></a>model对象循环引用</h3><p>循环引用这个问题出现的原因是</p><p>数据库脚本和主视图脚本不写在同一个脚本，数据库对象class一起写在同一个脚本下，主视图脚本调用<br>数据库脚本需要先定义db对象才能创建，因为要继承db.Model和使用db.Column等操作<br>db对象的定义在主视图脚本，因为需要传入的app在主视图脚本，但是主视图脚本在最开始就要导入数据库脚本<br>因此造成主视图脚本在启动一开始就需要数据库脚本，但是数据库脚本在一开始就需要主视图脚本，导致报错<br>解决方案</p><p>将db对象的定义单独放在一个脚本，并且先不指定app<br>数据库定义单独写一个脚本，其中调用db脚本中的空db对象，先保证语法正确，调用合法<br>在主视图函数中调用db和数据库对象，调用db.init_app(app)将app填充给空db<br>代码实现如下：分别创建db脚本exts.py，数据库脚本models.py，主视图脚本app.py</p><h3 id="创建db对象"><a href="#创建db对象" class="headerlink" title="创建db对象"></a>创建db对象</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@file: exts.py</span></span><br><span class="line"><span class="string">@author: wenke</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@time: 2022/7/19 11:34</span></span><br><span class="line"><span class="string">@Description:创建一个第三方文件，来放db对象,因为当db放在app.py时，from models import User,会从models模型中导入模型类User，</span></span><br><span class="line"><span class="string">但是在models模型又需要导入db,这就会导致循环引用，所以把db放在exts.py中</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"></span><br><span class="line">db = SQLAlchemy()</span><br></pre></td></tr></tbody></table></figure><h3 id="创建ORM模型类-建表-，并映射"><a href="#创建ORM模型类-建表-，并映射" class="headerlink" title="创建ORM模型类(建表)，并映射"></a>创建ORM模型类(建表)，并映射</h3><p>在定义模型的时候，可以不写__tablename__，那么flask_sqlalchemy会默认将类名小写化，然后映射成表名。<br>并且如果这个模型的名字用到了多个单词并且使用了驼峰命名法，那么会在多个单词之间使用下划线来进行连接，但是不推荐使用。（增强代码可读性，提高团队合作效率）app.config[‘SQLALCHEMY_TRACK_MODIFICATIONS’] = False</p><p><strong>映射模型到数据库表</strong>：使用Flask-SQLAlchemy所有的类都是继承自db.Model，并且所有的Column和数据类型也都成为db的一个属性。但是有个好处是不用写表名了，</p><p>Flask-SQLAlchemy会自动将类名小写化，然后映射成表名。写完类模型后，要将模型映射到数据库的表中，使用以下代码创建所有的表：<code>db.create_all()</code></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@file: models.py</span></span><br><span class="line"><span class="string">@author: wenke</span></span><br><span class="line"><span class="string">@software: PyCharm</span></span><br><span class="line"><span class="string">@time: 2022/7/19 11:28 </span></span><br><span class="line"><span class="string">@Description: 模型类</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">  <span class="comment"># 表示将类 Student 映射到数据库中的表 students。</span></span><br><span class="line">    __tablename__ = <span class="string">'students'</span></span><br><span class="line">    <span class="comment"># 将属性映射到表的字段</span></span><br><span class="line">    sno = db.Column(db.Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    name = db.Column(db.String(<span class="number">255</span>))</span><br><span class="line">    age = db.Column(db.Integer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">"user"</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    username = db.Column(db.String(<span class="number">200</span>),nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserExtension</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">"user_extension"</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, primary_key=<span class="literal">True</span>, autoincrement=<span class="literal">True</span>)</span><br><span class="line">    school = db.Column(db.String(<span class="number">100</span>))</span><br><span class="line">    user_id = db.Column(db.Integer,db.ForeignKey(<span class="string">"user.id"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># db.backref</span></span><br><span class="line">    <span class="comment"># 1. 在反向引用的时候，如果需要传递一些其他的参数，那么就需要用到这个函数，否则不需要使用，只要在relationship的backref参数上，设置反向引用的名称就可以了。</span></span><br><span class="line">    <span class="comment"># 2. uselist=False：代表反向引用的时候，不是一个列表，而是一个对象。</span></span><br><span class="line">    user = db.relationship(<span class="string">"User"</span>,backref=db.backref(<span class="string">"extension"</span>,uselist=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span>(<span class="params">db.Model</span>):</span></span><br><span class="line">    __tablename__ = <span class="string">"article"</span></span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer,primary_key=<span class="literal">True</span>,autoincrement=<span class="literal">True</span>)</span><br><span class="line">    title = db.Column(db.String(<span class="number">200</span>),nullable=<span class="literal">False</span>)</span><br><span class="line">    content = db.Column(db.Text,nullable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 外键：</span></span><br><span class="line">    <span class="comment"># 1. 外键的数据类型一定要看，所引用的字段的类型</span></span><br><span class="line">    <span class="comment"># 2. db.ForeignKey("表名.字段名 ")</span></span><br><span class="line">    <span class="comment"># 3. 外键是属于数据库层面的，不推荐直接在ORM中使用</span></span><br><span class="line">    author_id = db.Column(db.Integer,db.ForeignKey(<span class="string">"user.id"</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># relationship：</span></span><br><span class="line">    <span class="comment"># 1. 第一个参数是模型的名字，必须要和模型的名字保持一致</span></span><br><span class="line">    <span class="comment"># 2. backref（back reference）：代表反向引用，代表对方访问我的时候的字段名称</span></span><br><span class="line">    author = db.relationship(<span class="string">"User"</span>,backref=<span class="string">"articles"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将模型映射到数据库</span></span><br><span class="line"><span class="comment">#db.create_all()         # 创建数据库表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#db.drop_all()    # 删除数据库表：</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="主程序中使用"><a href="#主程序中使用" class="headerlink" title="主程序中使用"></a>主程序中使用</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#app.py</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> Book, Author</span><br><span class="line"><span class="keyword">from</span> exts <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line">app.config.from_object(config)  <span class="comment"># 导入数据库连接配置</span></span><br><span class="line">db.init_app(app)  <span class="comment"># 初始化db,把db对象放到app中</span></span><br><span class="line"><span class="comment"># app.app_context()上下文</span></span><br><span class="line"><span class="keyword">with</span> app.app_context():</span><br><span class="line">    db.drop_all()  <span class="comment"># 删除表</span></span><br><span class="line">    db.create_all()  <span class="comment"># 创建数据库表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/otm"</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_to_many</span>():</span></span><br><span class="line">  <span class="comment"># 插入数据进Article表</span></span><br><span class="line">    article1 = Article(title=<span class="string">"111"</span>,content=<span class="string">"xxx"</span>)</span><br><span class="line">    article2 = Article(title=<span class="string">"222"</span>, content=<span class="string">"yyy"</span>)</span><br><span class="line">    <span class="comment"># 插入数据进User表</span></span><br><span class="line">    user = User(username=<span class="string">"zhiliao"</span>)</span><br><span class="line"></span><br><span class="line">    article1.author = user</span><br><span class="line">    article2.author = user</span><br><span class="line">    db.session.add(article1,article2)</span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(user.articles)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"one to many数据操作成功"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/oto"</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">one_to_one</span>():</span></span><br><span class="line">   <span class="comment"># 插入数据进User表</span></span><br><span class="line">    user = User(username=<span class="string">"zhiliao"</span>)</span><br><span class="line">     <span class="comment"># 插入数据进UserExtension表</span></span><br><span class="line">    extension = UserExtension(school=<span class="string">"清华大学"</span>)</span><br><span class="line"></span><br><span class="line">    user.extension = extension</span><br><span class="line">    db.session.add(user)</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"one to one"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">"/article"</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">article_view</span>():</span></span><br><span class="line">    <span class="comment"># 1. 添加数据进Article表</span></span><br><span class="line">    article = Article(title=<span class="string">"钢铁是怎样炼成的"</span>,content=<span class="string">"xxx"</span>)</span><br><span class="line">    db.session.add(article)</span><br><span class="line">    <span class="comment"># 做一个提交操作</span></span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2. 查询数据</span></span><br><span class="line">    <span class="comment"># filter_by：返回一个类列表的对象</span></span><br><span class="line">    article = Article.query.filter_by(<span class="built_in">id</span>=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(article.title)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 3. 修改数据</span></span><br><span class="line">    article = Article.query.filter_by(<span class="built_in">id</span>=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    article.content = <span class="string">"yyy"</span></span><br><span class="line">    db.session.commit()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 4. 删除数据</span></span><br><span class="line">    Article.query.filter_by(<span class="built_in">id</span>=<span class="number">1</span>).delete()</span><br><span class="line">    db.session.commit()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"数据操作成功"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">'/'</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">    <span class="comment"># 写一个测试代码来验证是否连接成功</span></span><br><span class="line">    engine = db.get_engine()</span><br><span class="line">    <span class="keyword">with</span> engine.connect() <span class="keyword">as</span> conn:</span><br><span class="line">        result = conn.execute(<span class="string">"select 1"</span>)</span><br><span class="line">        <span class="built_in">print</span>(result.fetchone())</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello World!'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="flask-migrate-数据库迁移"><a href="#flask-migrate-数据库迁移" class="headerlink" title="flask-migrate(数据库迁移)"></a>flask-migrate(数据库迁移)</h2><p>flask-migrate是基于Alembic进行的一个封装，并集成到Flask中，而所有的迁移操作其实都是Alembic做的，在开发过程中，需要修改数据库模型，比如新增字段，修改字段类型，重命名等,而且还要在修改之后更新数据库。由于db.create_all()只能在表不存在时生效，所以必须删除原表，创建新表从头开始，但这样会丢失数据。更好的解决办法是使用数据库迁移框架，它可以追踪数据库模式的变化，然后把变动应用到数据库中。</p><p>多数情况下 Flask-Migrate <code>pip install flask-migrate</code>是会和命令行工具插件 Flask-Script<code>pip install Flask-Script</code> 和数据库插件 flask_sqlalchemy 一起使用的</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p><strong>linux下</strong><br>flask db init  #创建迁移仓库<br>flask db migrate  # 创建迁移脚本<br>flask db upgrade  #更新数据库</p><p><strong>window下</strong>需要重写迁移脚本文件<br>(1) 编写数据库迁移脚本manager.py<br>(2) 准备好数据模型<br>(3) 执行迁移命名<br>首先编写迁移脚本manager.py，这个是固定写法</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate, MigrateCommand</span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"><span class="keyword">from</span> main <span class="keyword">import</span> app, db</span><br><span class="line"></span><br><span class="line">migrate = Migrate(app, db)  <span class="comment"># 指定迁移的app和db</span></span><br><span class="line">manager = Manager(app)</span><br><span class="line">manager.add_command(<span class="string">'db'</span>, MigrateCommand)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manager.run()</span><br></pre></td></tr></tbody></table></figure><h3 id="创建迁移仓库和迁移脚本"><a href="#创建迁移仓库和迁移脚本" class="headerlink" title="创建迁移仓库和迁移脚本"></a>创建迁移仓库和迁移脚本</h3><p>数据库迁移时，初始化命令只需要执行一次，如果在一开始发现执行有问题，需要重新初始化，要先删除 migrations 目录才行。如果已经执行迁移命令，需要重新初始化，要先删除 migrations 目录和到数据库中删除 alembic_version 表。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">第一次运行迁移需要执行init命令，会在目录下新生成migrations目录，在目录下versions子目录下的py脚本记录了每次迁移的变化，</span></span><br><span class="line"><span class="meta">#</span><span class="bash">migrations 里面有一个 versions 文件夹，这个文件夹用于存放迁移脚本，执行迁移命令后会自动生成迁移脚本保存在里面。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">env.py 是迁移环境的相关信息。</span></span><br><span class="line">python manager.py db init    #创建迁移仓库</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">python manage.py db migrate -m "first commit"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------</span><br><span class="line"><span class="meta">#</span><span class="bash">执行 upgrade 命令后，会在数据库中创建一张 alembic_version 表，这张表是 Alembic 自动创建的，里面保存的是当前数据库的版本 id ，alembic_version 表不能删除，删除后就不能继续执行数据库迁移操作了，除非重新初始化。</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 同时，执行 upgrade 命令后，会根据代码中定义的模型类创建对应的表，表的字段与模型类中定义的一致。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果数据库中有其他表(没有对应模型类的表)，会被删除。，数据库迁移时最好使用一个新的数据库(不要与其他项目用同一个数据库)，避免造成数据丢失。</span></span><br><span class="line">python manager.py db upgrade #更新数据库</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="回退数据库"><a href="#回退数据库" class="headerlink" title="回退数据库"></a>回退数据库</h3><p>回退数据库时，需要指定回退版本号，由于版本号是随机字符串，为避免出错，建议先使用python3 db_database.py db history命令查看历史版本的具体版本号，然后复制具体版本号执行回退。</p><p>python3 db_database.py db downgrade 版本号</p><h2 id="Flask-WTF表单验证"><a href="#Flask-WTF表单验证" class="headerlink" title="Flask-WTF表单验证"></a>Flask-WTF表单验证</h2><p>在 Web 页面中，表单是一种常见的元素，表单包含有多个字段，通常字段的取值需要在一定的范围内，例如：QQ 注册时，名称不可以为空，密码的长度至少是 8 个字符,将表单提交给服务端处理时，服务端需要验证表单中的字段的取值是否符合要求。<br>Flask-WTF是简化了WTForms操作的一个第三方库。WTForms表单的两个主要功能是验证用户提交数据的合法性以及渲染模板。当然还包括一些其他的功能：CSRF保护，文件上传等。安装Flask-WTF默认也会安装WTForms，因此使用以下命令来安装Flask-WTF:</p><p><code>pip install flask-wtf</code></p><h1 id="flask-email邮箱使用"><a href="#flask-email邮箱使用" class="headerlink" title="flask-email邮箱使用"></a>flask-email邮箱使用</h1><h1 id="登录注册模块"><a href="#登录注册模块" class="headerlink" title="登录注册模块"></a>登录注册模块</h1><h2 id="flask-login"><a href="#flask-login" class="headerlink" title="flask-login"></a>flask-login</h2><p>管理已登录用户的用户会话</p><h2 id="werkzeug"><a href="#werkzeug" class="headerlink" title="werkzeug"></a>werkzeug</h2><p>计算密码散列值并进行核对</p><h2 id="itsdangerous"><a href="#itsdangerous" class="headerlink" title="itsdangerous"></a>itsdangerous</h2><p>生成并核对加密安全令牌</p><h1 id="部署到云服务器"><a href="#部署到云服务器" class="headerlink" title="部署到云服务器"></a>部署到云服务器</h1><p> 在pycharm中项目虚拟环境的终端运行<code>pip freeze &gt;requirements.txt</code></p><h1 id="出错"><a href="#出错" class="headerlink" title="出错"></a>出错</h1><p>AttributeError: module ‘time‘ has no attribute ‘clock‘的解决方法</p><p>主要原因是因为python3.8之后不支持clock了, 需要替换成 time.pref_counter() 替换就可以了</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cpmpat.py文件：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> win32 <span class="keyword">or</span> jython:</span><br><span class="line">    time_func = time.clock</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    time_func = time.time</span><br><span class="line"></span><br><span class="line"><span class="comment">#改为：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> win32 <span class="keyword">or</span> jython:</span><br><span class="line">    time_func = time.perf_counter()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    time_func = time.time</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-深度学习</title>
      <link href="/2022/030811061.html"/>
      <url>/2022/030811061.html</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能、机器学习、深度学习的关系"><a href="#人工智能、机器学习、深度学习的关系" class="headerlink" title="人工智能、机器学习、深度学习的关系"></a>人工智能、机器学习、深度学习的关系</h1><p>人工智能 &gt; 机器学习 &gt; 深度学习。</p><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><p>神经网络需要用数据来训练，它从数据中获得信息，进而把它们转换成相应的权重。这些权重能够被提取出来，迁移到其他的神经网络中，我们“迁移”了这些学来的特征，就不需要从零开始训练一个神经网络了 </p><h2 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h2><p>预训练模型(pre-trained model)是前人为了解决类似问题所创造出来的模型。你在解决问题的时候，不用从零开始训练一个新模型，可以从在类似问题中训练过的模型入手。</p><p>当在训练经网络的时候我们的目标是什么？我们希望网络能够在多次正向反向迭代的过程中，找到合适的权重。</p><p>通过使用之前在大数据集上经过训练的预训练模型，我们可以直接使用相应的结构和权重，将它们应用到我们正在面对的问题上。这被称作是“迁移学习”，即将预训练的模型“迁移”到我们正在应对的特定问题中。</p><h2 id="实践平台"><a href="#实践平台" class="headerlink" title="实践平台"></a>实践平台</h2><p>如果学员想了解更多关于飞桨、深度学习、机器学习或Python课程，可以通过如下三个途径获取。</p><p>AI Studio：<a href="https://aistudio.baidu.com/">https://aistudio.baidu.com/</a><br>飞桨官网：<a href="https://www.paddlepaddle.org.cn/">https://www.paddlepaddle.org.cn/</a><br>百度技术学院：<a href="http://bit.baidu.com/index">http://bit.baidu.com/index</a></p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习是专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构，使之不断改善自身的性能。</p><p>机器学习的实现<br>机器学习的实现可以分成两步：训练和预测，类似于归纳和演绎：</p><p>归纳： 从具体案例中抽象一般规律，机器学习中的“训练”亦是如此。从一定数量的样本（已知模型输入XXX和模型输出YYY）中，学习输出YYY与输入XXX的关系（可以想象成是某种表达式）。<br>演绎： 从一般规律推导出具体案例的结果，机器学习中的“预测”亦是如此。基于训练得到的YYY与XXX之间的关系，如出现新的输入XXX，计算出输出YYY。通常情况下，如果通过模型计算的输出和真实场景的输出一致，则说明模型是有效的。</p><h1 id="预测问题"><a href="#预测问题" class="headerlink" title="预测问题"></a>预测问题</h1><p>对于预测问题，可以根据预测输出的类型是连续的实数值，还是离散的标签，区分为回归任务和分类任务。因为房价是一个连续值，所以房价预测显然是一个回归任务。下面我们尝试用最简单的线性回归模型解决这个问题，并用神经网络来实现这个模型。</p><h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><p><img src="https://gitee.com/wenkex/blogimage/raw/master/img/%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B5%E6%AD%A5-2022-3-1813:21:11.png"></p><p>模型结构三要素<br>（模型假设、评价函数和优化算法）</p><h1 id="paddleHub工具"><a href="#paddleHub工具" class="headerlink" title="paddleHub工具"></a>paddleHub工具</h1><p>端到端的预训练模型管理与迁移学习工具<br>模型一键下载、管理、预测,十行代码完成迁移学习,一键自动超参搜索,一键模型服务化部署</p><p>精选效果优秀的算法，提供了百亿级大数据训练的预训练模型，方便用户不用花费大量精力从头开始训练<br>一个模型。</p><p>#安装 -i指定镜像源<br>pip install paddlehub -i <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>#更新<br>pip install –upgrade paddlehub -i <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><h1 id="自然语言处理-NLP"><a href="#自然语言处理-NLP" class="headerlink" title="自然语言处理(NLP)"></a>自然语言处理(NLP)</h1><h2 id="NLP-的4个典型应用"><a href="#NLP-的4个典型应用" class="headerlink" title="NLP 的4个典型应用"></a>NLP 的4个典型应用</h2><p>情感分析</p><p>聊天机器人</p><p>语音识别</p><p>机器翻译</p><h2 id="paddlenlp"><a href="#paddlenlp" class="headerlink" title="paddlenlp"></a>paddlenlp</h2><p>安装<br>pip install –upgrade paddlenlp<br><a href="https://aistudio.baidu.com/aistudio/projectdetail/3696243?channelType=0&amp;channel=0">https://aistudio.baidu.com/aistudio/projectdetail/3696243?channelType=0&amp;channel=0</a></p><h3 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h3><p>分词作为许多NLP任务的第一道工序,Taskflow提供了多种中文分词模式供大家选择</p><h4 id="文档级输入"><a href="#文档级输入" class="headerlink" title="文档级输入"></a>文档级输入</h4><p>支持超长文本输入，无需担心『文本截断』问题</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次调用会有模型下载的额外时间开销</span></span><br><span class="line">seg = Taskflow(<span class="string">"word_segmentation"</span>)</span><br><span class="line"></span><br><span class="line">doc = <span class="string">"苏锦一直记得那个午后，明晃晃的光线穿过教室的窗玻璃洒到自己脸上，有种特别暖和的感觉。那阳光仿佛是能够钻进人的"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1. 输入长度："</span>, <span class="built_in">len</span>(doc))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"2. 分词结果："</span>, seg(doc))</span><br></pre></td></tr></tbody></table></figure><h4 id="快速模式分词"><a href="#快速模式分词" class="headerlink" title="快速模式分词"></a>快速模式分词</h4><p>示例如何通过快速模式分词对数据集进行词频统计、构建词表</p><h4 id="精确模式分词"><a href="#精确模式分词" class="headerlink" title="精确模式分词"></a>精确模式分词</h4><h4 id="用户词典"><a href="#用户词典" class="headerlink" title="用户词典"></a>用户词典</h4><p>快速配置用户词典来对分词结果进行干预</p><h3 id="词性标注，，依存句法分析"><a href="#词性标注，，依存句法分析" class="headerlink" title="词性标注，，依存句法分析"></a>词性标注，，依存句法分析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于百度词法分析工具LAC，训练语料包含近2200万句子，覆盖多种场景</span></span><br><span class="line"><span class="comment"># 词性标注</span></span><br><span class="line">tag = Taskflow(<span class="string">"pos_tagging"</span>)</span><br><span class="line"><span class="built_in">print</span>(tag(<span class="string">"第十四届全运会在西安举办"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h3><p>基于百度解语的精确模式：最全中文实体标签的命名实体识别工具</p><h4 id="精确模式"><a href="#精确模式" class="headerlink" title="精确模式"></a>精确模式</h4><p>基于百度解语的精确模式：最全中文实体标签的命名实体识别工具，不仅适用于通用领域，也适用于生物医疗、教育等垂类领域。包含66种词性及专名类别标签（同类产品的标签数是15个左右）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">ner = Taskflow(<span class="string">"ner"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ner([<span class="string">"李伟拿出具有科学性、可操作性的《陕西省高校管理体制改革实施方案》"</span>, <span class="string">"诺戴商务咨询（上海）有限公司于2016年08月22日成立"</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="快速模式"><a href="#快速模式" class="headerlink" title="快速模式"></a>快速模式</h4><p>基于百度词法分析工具LAC，训练语料包含近2200万句子，覆盖多种场景</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">ner_fast = Taskflow(<span class="string">"ner"</span>, mode=<span class="string">"fast"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ner_fast(<span class="string">"三亚是一个美丽的城市"</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="依存句法分析"><a href="#依存句法分析" class="headerlink" title="依存句法分析"></a>依存句法分析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用BiLSTM作为编码器，速度最快</span></span><br><span class="line">ddp = Taskflow(<span class="string">"dependency_parsing"</span>)</span><br><span class="line"><span class="built_in">print</span>(ddp(<span class="string">"2月8日谷爱凌夺得北京冬奥会第三金"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 编码器部分将BiLSTM替换为ERNIE，模型准确率更高！</span></span><br><span class="line"><span class="comment"># ddp = Taskflow("dependency_parsing", model="ddparser-ernie-1.0")</span></span><br><span class="line"><span class="comment"># print(ddp("2月8日谷爱凌夺得北京冬奥会第三金"))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出概率值和词性标签</span></span><br><span class="line">ddp = Taskflow(<span class="string">"dependency_parsing"</span>, prob=<span class="literal">True</span>, use_pos=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ddp(<span class="string">"2月8日谷爱凌夺得北京冬奥会第三金"</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="定制化训练"><a href="#定制化训练" class="headerlink" title="定制化训练"></a>定制化训练</h3><p>利用自己的数据训练/微调模型，通过Taskflow一键装载并使用</p><h4 id="数据准备和训练"><a href="#数据准备和训练" class="headerlink" title="数据准备和训练"></a>数据准备和训练</h4><p><a href="https://github.com/PaddlePaddle/PaddleNLP/tree/develop/examples/sentiment_analysis/skep">参考PaddleNLP SKEP情感分析训练示例</a>完成数据准备和模型训练。</p><h4 id="使用定制化模型"><a href="#使用定制化模型" class="headerlink" title="使用定制化模型"></a>使用定制化模型</h4><p>通过task_path指定自定义模型路径一键加载即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">my_senta = Taskflow(<span class="string">"sentiment_analysis"</span>, model=<span class="string">"skep_ernie_1.0_large_ch"</span>, task_path=<span class="string">"/home/aistudio/custom_model"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_senta(<span class="string">"不错的酒店,服务还可以,下次还会入住的~"</span>))</span><br></pre></td></tr></tbody></table></figure><h1 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>人工神经网络包括多个神经网络层，如：卷积层、全连接层、LSTM等，每一层又包括很多神经元，超过三层的非线性神经网络都可以被称为深度神经网络。通俗的讲，深度学习的模型可以视为是输入到输出的映射函数，如图像到高级语义（美女）的映射，足够深的神经网络理论上可以拟合任何复杂的函数。因此神经网络非常适合学习样本数据的内在规律和表示层次，对文字、图像和语音任务有很好的适用性。这几个领域的任务是人工智能的基础模块，因此深度学习被称为实现人工智能的基础也就不足为奇了。</p><p>神经元： 神经网络中每个节点称为神经元，由两部分组成：<br>  加权和：将所有输入加权求和。<br>  非线性变换（激活函数）：加权和的结果经过一个非线性函数变换，让神经元计算具备非线性的能力。</p><p>多层连接： 大量这样的节点按照不同的层次排布，形成多层的结构连接起来，即称为神经网络。</p><p>前向计算： 从输入计算输出的过程，顺序从网络前至后。</p><p>计算图： 以图形化的方式展现神经网络的计算逻辑又称为计算图，也可以将神经网络的计算图以公式的方式表达：<br>Y=f3(f2(f1(w1⋅x1+w2⋅x2+w3⋅x3+b)+…)…)…)<br>​神经网络并没有那么神秘，它的本质是一个含有很多参数的“大公式”</p><h2 id="构建神经网络-深度学习模型的基本步骤"><a href="#构建神经网络-深度学习模型的基本步骤" class="headerlink" title="构建神经网络/深度学习模型的基本步骤"></a>构建神经网络/深度学习模型的基本步骤</h2><h3 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h3><p>数据导入、</p><p>数据形状变换、</p><p>数据集划分、</p><p>数据归一化处理</p><p>封装load data函数</p><h4 id="图像和文本数据处理"><a href="#图像和文本数据处理" class="headerlink" title="图像和文本数据处理"></a>图像和文本数据处理</h4><h3 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h3><p>（模型要素1）网络结构设计，相当于模型假设空间，即模型能够表达的关系集合。</p><h3 id="训练配置"><a href="#训练配置" class="headerlink" title="训练配置"></a>训练配置</h3><p>模型要素2）设定模型采用的寻解方法，即优化器，并指定计算资源。<br>PS：神经网络学习的目的是寻找合适的参数，使得损失函数的值尽可能小。解决这个问题的过程为称为最优化。解决这个问题使用的算法叫做优化器。接触到的优化器有：随机梯度下降法（Stachastic gradient desent 简称 SGD）和AdaGrad </p><p>AdaGard主要是为了解决 SGD 遇到鞍点或者极小值点后学习变慢的问题。我们知道超参数学习率是一个很重要的参数，不同的参数对学习结果的影响很大，如果设置的值较小，会导致学习花费较多的时间，学习率大了就会导致学习发散而不能正常的进行。所以我们可以考虑避免人为的介入，根据需要让程序自己动态地设置学习率。例如对于遇到鞍点的情况，参数变化很小，基本不会改变，那么这个方法就会设置一个较大的学习率，跨过鞍点。</p><h3 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h3><p>模型要素3）循环调用训练过程，每轮都包括前向计算、损失函数（优化目标）和后向传播三个步骤。</p><p>PS：前向计算是指把输入数据传入模型，然后得到输出；后向传播是指根据前向计算得到的输出通过梯度下降，从后向前优化网络中的参数。（因为梯度下降就是从后向前计算）</p><h3 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h3><p>将训练好的模型保存，模型预测是调用。</p><h1 id="数据集"><a href="#数据集" class="headerlink" title="数据集"></a>数据集</h1><h2 id="coco数据集"><a href="#coco数据集" class="headerlink" title="coco数据集"></a>coco数据集</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><p>train2017、test2017、val2017文件夹中保存的是用于训练、测试、验证的图片，<br>annotations文件夹保存的是这些图片对应的标注信息，分别存在instance_test2017、instance_test2017、instance_val2017三个json文件中。</p><h2 id="VOC数据集"><a href="#VOC数据集" class="headerlink" title="VOC数据集"></a>VOC数据集</h2><h3 id="目录结构-1"><a href="#目录结构-1" class="headerlink" title="目录结构"></a>目录结构</h3><p>Annotations/  #存放xml文件，与JPEGImages中的图片一一对应，解释图片的内容等等<br>JPEGImages/<br>labels.txt<br>train_list.txt<br>test_list.txt<br>val_list.txt</p><h2 id="paddleX划分数据集"><a href="#paddleX划分数据集" class="headerlink" title="paddleX划分数据集"></a>paddleX划分数据集</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#使用paddleX快速划分数据集</span></span><br><span class="line">!pip install <span class="string">"paddlex&lt;=2.0.0"</span> -i https://mirror.baidu.com/pypi/simple</span><br><span class="line"></span><br><span class="line">!paddlex --split_dataset --<span class="built_in">format</span> VOC --dataset_dir roadsign --val_value <span class="number">0.1</span> --test_value <span class="number">0.1</span></span><br><span class="line"><span class="comment">#--format VOC  VOC格式的数据集</span></span><br><span class="line"><span class="comment">#按照8：1：1的比例划分为训练集，验证集(--val_value)和测试集(--test_value)</span></span><br></pre></td></tr></tbody></table></figure><h1 id="PaddlePaddle"><a href="#PaddlePaddle" class="headerlink" title="PaddlePaddle"></a>PaddlePaddle</h1><p><a href="https://www.paddlepaddle.org.cn/">安装</a></p><p>运行PaddlePaddle需要COCO-API，安装方式如下：</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install pycocotools   <span class="comment"># linux安装pycocotools</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 若Cython未安装，请安装Cython</span></span><br><span class="line">pip install Cython</span><br><span class="line"><span class="comment">#windows用户安装COCO-API方式：</span></span><br><span class="line"><span class="comment"># 由于原版cocoapi不支持windows，采用第三方实现版本，该版本仅支持Python3</span></span><br><span class="line">pip install git+https://github.com/philferriere/cocoapi.git<span class="comment">#subdirectory=PythonAPI</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>PaddleClas和PaddleDetection分别是PaddlePaddle的两个开源项目，关注不同的技术领域。</p><h1 id="PaddleClas"><a href="#PaddleClas" class="headerlink" title="PaddleClas"></a>PaddleClas</h1><p>以图像识别和图像分类为主，同时关注基础的骨干网络模型；PaddleClas对小样本区分、识别目标不固定等疑难问题效果更好，整体精度上限更高；</p><h1 id="目标检测"><a href="#目标检测" class="headerlink" title="目标检测"></a>目标检测</h1><h2 id="PaddleX2-1"><a href="#PaddleX2-1" class="headerlink" title="PaddleX2.1"></a>PaddleX2.1</h2><h2 id="PaddleDetection套件"><a href="#PaddleDetection套件" class="headerlink" title="PaddleDetection套件"></a>PaddleDetection套件</h2><p><a href="https://github.com/PaddlePaddle/PaddleDetection">paddledetection的github主页</a><br><a href="https://paddledetection.readthedocs.io/">PaddleDetection套件文档</a></p><p>以检测技术为主，同时关注关键点、跟踪等方向。PaddleDetection在超轻量模型上更有优势，在移动端设备上速度更快。<br><a href="https://blog.smslit.cn/2021/04/15/paddle-detection-train-log/">https://blog.smslit.cn/2021/04/15/paddle-detection-train-log/</a></p><h3 id="选择模型"><a href="#选择模型" class="headerlink" title="选择模型"></a>选择模型</h3><p>模型丰富: 包含目标检测、实例分割、人脸检测、关键点检测、多目标跟踪等250+个预训练模型</p><p>支持现有的RCNN、SSD、YOLO等系列模型，快速的完成不同模型的训练体验，就是需要依靠配置文件的切换。configs文件夹中都是模型文件，模型文件内可选择骨架网络</p><h3 id="安装PaddleDetection"><a href="#安装PaddleDetection" class="headerlink" title="安装PaddleDetection"></a>安装PaddleDetection</h3><p>在安装PaddleDetection之前要先安装依赖项PaddlePaddle</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#安装PaddleDetection</span></span><br><span class="line">!git clone https://gitee.com/PaddlePaddle/PaddleDetection.git</span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line">%cd PaddleDetection</span><br><span class="line">!pip install -r requirements.txt</span><br><span class="line">!python setup.py install</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试是否安装成功</span></span><br><span class="line">!python ppdet/modeling/tests/test_architectures.py</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h3><p>基于标注好的图片生成数据集<br>常用的目标检测数据集有两种格式，分别是VOC和COCO。</p><p>如果使用<strong>COCO格式</strong>，建议使用PaddleDetection中的x2coco将标注好的文件转为COCO格式的数据集。转换代码如下：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python tools/x2coco.py \</span><br><span class="line">                --dataset_type labelme \</span><br><span class="line">                --json_input_dir ./labelme_annos/ \</span><br><span class="line">                --image_input_dir ./labelme_imgs/ \</span><br><span class="line">                --output_dir ./cocome/ \</span><br><span class="line">                --train_proportion 0.8 \</span><br><span class="line">                --val_proportion 0.2 \</span><br><span class="line">                --test_proportion 0.0</span><br></pre></td></tr></tbody></table></figure><p>如果使用<strong>VOC格式</strong>的数据集，可以使用labelme自带的labelme2voc.py完成，需要先创建labels.txt文件,labels.txt文件的前两行分别为__ignore__和_background_，其余行为类别名称。转换代码如下：</p><p><code>./labelme2voc.py data_annotated data_dataset_voc --labels labels.txt</code></p><h3 id="修改参数配置"><a href="#修改参数配置" class="headerlink" title="修改参数配置"></a>修改参数配置</h3><p>COCO数据集：<br>  dataset:<br>     !COCODataSet<br>     image_dir: val2017 # 图像数据基于数据集根目录的相对路径<br>     anno_path: annotations/instances_val2017.json  # 标注文件基于数据集根目录的相对路径<br>     dataset_dir: dataset/coco  # 数据集根目录<br>     with_background: true  # 背景是否作为一类标签，默认为true。</p><p>选择模型并修改配置文件,<br>属于小物体检测范畴，我们选择Faster-Rcnn系列模型。然后基于configs/faster_rcnn_r50_fpn_1x.yml文件进行修改</p><h3 id="开始训练"><a href="#开始训练" class="headerlink" title="开始训练"></a>开始训练</h3><p>若是训练过程当中自动下载数据集，那确定是你的yml路径配置错了，写绝对路径。<br>使用PaddleDetection时的配置信息是采用yml文件描述的，这里使用的是yolov3_darknet53_270e_voc.yml文件.</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 设置PYTHONPATH路径</span></span><br><span class="line">export PYTHONPATH=$PYTHONPATH:.</span><br><span class="line"><span class="comment"># GPU训练 支持单卡，多卡训练，通过CUDA_VISIBLE_DEVICES指定卡号</span></span><br><span class="line">export CUDA_VISIBLE_DEVICES=<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span></span><br><span class="line">python tools/train.py -c configs/faster_rcnn_r50_1x.yml --<span class="built_in">eval</span> -o use_gpu=true --use_vdl=<span class="literal">True</span> --vdl_log_dir=./vdl_dir/scalar</span><br></pre></td></tr></tbody></table></figure><p>可选参数列表可以通过–help查看<br><a href="https://paddledetection.readthedocs.io/tutorials/GETTING_STARTED_cn.html#id2">https://paddledetection.readthedocs.io/tutorials/GETTING_STARTED_cn.html#id2</a><br>  -c        指定配置文件<br>  -o        设置配置文件里的参数内容    None    使用-o配置相较于-c选择的配置文件具有更高的优先级。例如：-o use_gpu=False max_iter=10000<br>  -r/–resume_checkpoint    train    从某一检查点恢复训练<br>  –eval  是否边训练边测试    False<br>  –output_eval        编辑评测保存json路径    当前路径    –output_eval ./json_result<br>  –fp16        是否使用混合精度训练模式    False    需使用GPU训练<br>  –loss_scale    设置混合精度训练模式中损失值的缩放比例<br>  –use_vdl    是否使用VisualDL记录数据，进而在VisualDL面板中显示<br>  –vdl_log_dir        指定 VisualDL 记录数据的存储路径 </p><p>-r 模型暂存路径/接着训练的轮数（接着第几轮训练）<br>-r ./output/faster_rcnn_r50_vd_fpn_ssld_2x_coco/5</p><p>预训练模型的参数确实有助于提高训练的准确率<br><strong>加载预训练模型</strong><br>-o pretrain_weights=output/faster_rcnn_r50_1x/model_final \</p><p><strong>加载部分预训练模型</strong><br>-o pretrain_weights=output/faster_rcnn_r50_1x/model_final <br>                        finetune_exclude_pretrained_params=[‘cls_score’,’bbox_pred’]</p><p><strong>训练信息</strong><br>loss_bbox :衡量预测边界框与真实对象的“紧密程度”的损失(通常是回归损失，L1，smoothL1 等)。<br>loss_cls :衡量每个预测边界框分类正确性的损失:每个框可能包含一个对象类，或一个“背景”。这种损失通常称为交叉熵损失。</p><p>FasterRCNN<br>FasterRCNN的训练日志除了通用统计信息外，还包括loss_cls、loss_bbox、loss_rpn_cls和loss_rpn_bbox，这些字段的含义如下:</p><p>字段    含义<br>loss_cls    RCNN子网络中分类损失函数值<br>loss_bbox    RCNN子网络中检测框回归损失函数值<br>loss_rpn_cls    RPN子网络中分类损失函数值<br>loss_rpn_bbox    RPN子网络中检测框回归损失函数值<br>loss    所有子网络损失函数值之和</p><h3 id="评估"><a href="#评估" class="headerlink" title="评估"></a>评估</h3><p>评估配置</p><h3 id="预测图像"><a href="#预测图像" class="headerlink" title="预测图像"></a>预测图像</h3><p>使用预训练模型预测图像</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!python tools/infer.py -c ../configs/yolov3_darknet53_270e_voc.yml \</span><br><span class="line">                    --infer_img=/home/aistudio/fortest.jpg \</span><br><span class="line">                    --output_dir=/home/aistudio/infer_output/ \</span><br><span class="line">                    --draw_threshold=<span class="number">0.1</span> \</span><br><span class="line">                    -o weights=output/yolov3_darknet53_270e_voc/model_final \</span><br><span class="line">                    --use_vdl=Ture</span><br></pre></td></tr></tbody></table></figure><h1 id="Notebook中"><a href="#Notebook中" class="headerlink" title="Notebook中"></a>Notebook中</h1><h2 id="Notebook中使用Shell命令"><a href="#Notebook中使用Shell命令" class="headerlink" title="Notebook中使用Shell命令"></a>Notebook中使用Shell命令</h2><p>!ls /home/aistudio/data/</p><h2 id="Magic命令"><a href="#Magic命令" class="headerlink" title="Magic命令"></a>Magic命令</h2><p>Magic命令是Notebook的高级用法了. 可以运行一些特殊的指令. Magic 命令的前面带有一个或两个百分号（% 或 %%），分别代表行 Magic 命令和单元格 Magic 命令。行 Magic 命令仅应用于编写 Magic 命令时所在的行，而单元格 Magic 命令应用于整个单元格。</p><p>#显示全部可用的Magic命令<br>%lsmagic<br>1</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django学习</title>
      <link href="/2022/030664874.html"/>
      <url>/2022/030664874.html</url>
      
        <content type="html"><![CDATA[<p>Python 加 Django 是快速开发、设计、部署网站的最佳组合。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>pip install django -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>在想要创建的文件夹中，进入终端<br>执行命令创建项目<code>'django-admin startproject 项目名称 </code></p><h1 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h1><p>manage.py  项目的管理，启动项目，创建app,数据管理<br>urls.py  url和函数的对应关系<br>asgi.py 和wsgi.py  接受网络请求</p><h1 id="创建一个app"><a href="#创建一个app" class="headerlink" title="创建一个app"></a>创建一个app</h1><p>python manage.py startapp 名称 </p><h1 id="Uvicorn-运行-django"><a href="#Uvicorn-运行-django" class="headerlink" title="Uvicorn 运行 django"></a>Uvicorn 运行 django</h1><p>django 内置的开发服务器在修改代码后的热重载非常缓慢，我发现 uvicorn 的重载速度要快得多，所以新项目第一件事，就是使用在开发环境下使用 uvicorn 运行 django。</p><p>首先当然要安装 uvicorn。<br><code>pip install uvicorn</code></p><p>Uvicorn 安装好后，可以在命令行使用 uvicorn 命令来运行 django。但是，每次输命令启动 django 会非常麻烦！最好的做法是创建一个脚本，启动 django 只需要执行脚本就可以了。</p><p>在 项目根目录 创建一个 run_uvicorn.py 的脚本（脚本名可以自己随便取），代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"mysite.settings"</span>)</span><br><span class="line">    uvicorn.run(</span><br><span class="line">        <span class="string">"mysite.asgi:application"</span>,</span><br><span class="line">        host=<span class="string">"0.0.0.0"</span>,</span><br><span class="line">        port=<span class="number">8000</span>,</span><br><span class="line">        log_level=<span class="string">"debug"</span>,</span><br><span class="line">        reload=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行脚本后，应用已在 8000 端口启动，现在访问 localhost:8000，可以看到熟悉的 django 项目初始页面。</p><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>views.py  写函数</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux</title>
      <link href="/2022/022615691.html"/>
      <url>/2022/022615691.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用linux的好处"><a href="#使用linux的好处" class="headerlink" title="使用linux的好处"></a>使用linux的好处</h2><p><a href="https://mp.weixin.qq.com/s/MP6gWfkyKaBLNCpEOHhk_g">使用linux的好处</a><br>在 linux 下，apt install 或者 yum install 之类的命令，就能搞定整个软件安装。</p><p>Linux 不需要选择软件是放 c 盘还是 d 盘，已经定义好了哪些文件该放在哪些地方，<br>不需要杀毒软件，不需要清理垃圾，不需要释放内存，不需要激活系统，它是开源免费的，不需要磁盘优化，没有烦人的弹窗，没有强制更新。</p><h2 id="目录理解"><a href="#目录理解" class="headerlink" title="目录理解"></a>目录理解</h2><h3 id="根目录（-）"><a href="#根目录（-）" class="headerlink" title="根目录（/）"></a>根目录（/）</h3><p>/bin/ 存放系统命令，普通用户和 root 都可以执行。放在 /bin 下的命令在单用户模式下也可以执行<br>/boot/ 系统启动目录，保存与系统启动相关的文件，如内核文件和启动引导程序（grub）文件等<br>/dev/ 设备文件保存位置<br>/etc/ 配置文件保存位置。系统内所有采用默认安装方式（rpm 安装）的服务配置文件全部保存在此目录中，如用户信息、服务的启动脚本、常用服务的配置文件等<br>/home/ 普通用户的主目录（也称为家目录）。在创建用户时，每个用户要有一个默认登录和保存自己数据的位置，就是用户的主目录，所有普通用户的主目录是在 /home/ 下建立一个和用户名相同的目录。如用户 liming 的主目录就是 /home/liming<br>/lib/ 系统调用的函数库保存位置<br>/media/ 挂载目录。系统建议用来挂载媒体设备，如软盘和光盘<br>/mnt/ 挂载目录。早期 Linux 中只有这一个挂载目录，并没有细分。系统建议这个目录用来挂载额外的设备，如 U 盘、移动硬盘和其他操作系统的分区<br>/misc/ 挂载目录。系统建议用来挂载 NFS 服务的共享目录。虽然系统准备了三个默认挂载目录 /media/、/mnt/、/misc/，但是到底在哪个目录中挂载什么设备可以由管理员自己决定。例如，笔者在接触 Linux 的时候，默认挂载目录只有 /mnt/，所以养成了在 /mnt/ 下建立不同目录挂载不同设备的习惯，如 /mnt/cdrom/ 挂载光盘、/mnt/usb/ 挂载 U 盘，都是可以的</p><p>/opt/ 第三方安装的软件保存位置。这个目录是放置和安装其他软件的位置，手工安装的源码包软件都可以安装到这个目录中。不过笔者还是习惯把软件放到 /usr/local/ 目录中，也就是说，/usr/local/ 目录也可以用来安装软件</p><p>/root/ root 的主目录。普通用户主目录在 /home/ 下，root 主目录直接在“/”下<br>/sbin/ 保存与系统环境设置相关的命令，只有 root 可以使用这些命令进行系统环境设置，但也有些命令可以允许普通用户查看<br>/srv/ 服务数据目录。一些系统服务启动之后，可以在这个目录中保存所需要的数据<br>/tmp/ 临时目录。系统存放临时文件的目录，在该目录下，所有用户都可以访问和写入。建议此目录中不能保存重要数据，最好每次开机都把该目录清空</p><h3 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h3><p>存放所有用户文件的根目录，是用户主目录的基点</p><p>比如用户user的主目录就是/home/user，可以用~user表示</p><h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h3><p>usr（注意不是 user），全称为 Unix Software Resource，此目录用于存储系统软件资源。FHS 建议所有开发者，应把软件产品的数据合理的放置在 /usr 目录下的各子目录中，而不是为他们的产品创建单独的目录。</p><p>Linux 系统中，所有系统默认的软件都存储在 /usr 目录下，/usr 目录类似 Windows 系统中 C:\Windows\ + C:\Program files\ 两个目录的综合体。</p><p>FHS 建议，/usr 目录应具备表 3 所示的子目录。</p><p>/usr/bin/ 存放系统命令，普通用户和超级用户都可以执行。这些命令和系统启动无关，在单用户模式下不能执行<br>/usr/sbin/  存放根文件系统不必要的系统管理命令，如多数服务程序，只有 root 可以使用。<br>/usr/lib/ 应用程序调用的函数库保存位置<br>/usr/XllR6/ 图形界面系统保存位置<br>/usr/local/ 手工安装的软件保存位置。我们一般建议源码包软件安装在这个位置<br>/usr/share/ 应用程序的资源文件保存位置，如帮助文档、说明文档和字体目录<br>/usr/src/ 源码包保存位置。我们手工下载的源码包和内核源码包都可以保存到这里。不过笔者更习惯把手工下载的源码包保存到 /usr/local/src/ 目录中，把内核源码保存到 /usr/src/linux/ 目录中<br>/usr/include C/C++ 等编程语言头文件的放置目录</p><h3 id="var-目录"><a href="#var-目录" class="headerlink" title="/var 目录"></a>/var 目录</h3><p>/var 目录用于存储动态数据，例如缓存、日志文件、软件运行过程中产生的文件等。通常，此目录下建议包含如表 4 所示的这些子目录。</p><p>/var/lib/ 程序运行中需要调用或改变的数据保存位置。如 MySQL 的数据库保存在 /var/lib/mysql/ 目录中<br>/var/log/ 登陆文件放置的目录，其中所包含比较重要的文件如 /var/log/messages, /var/log/wtmp 等。<br>/var/run/ 一些服务和程序运行后，它们的 PID（进程 ID）保存位置<br>/var/spool/ 里面主要都是一些临时存放，随时会被用户所调用的数据，例如 /var/spool/mail/ 存放新收到的邮件，/var/spool/cron/ 存放系统定时任务。<br>/var/www/ RPM 包安装的 Apache 的网页主目录<br>/var/nis和/var/yp NIS 服务机制所使用的目录，nis 主要记录所有网络中每一个 client 的连接信息；yp 是 linux 的 nis 服务的日志文件存放的目录<br>/var/tmp 一些应用程序在安装或执行时，需要在重启后使用的某些文件，此目录能将该类文件暂时存放起来，完成后再行删除</p><h2 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h2><p>常见的 Shell 有 sh、bash、csh、tcsh、ash 等。<br>!/bin/bash是指此脚本使用/bin/bash来解释执行。<br>脚本文件后缀是.sh<br><a href="https://mp.weixin.qq.com/s/A_K9Uikkq6OHHthj1EIbVQ">100个shell脚本</a></p><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><p><strong>man 帮助</strong><br>man 是 manual 的缩写</p><p>• # man ls</p><p><strong>help 帮助</strong><br>shell（命令解释器）⾃带的命令称为内部命令，其他的是外部命令<br>• 内部命令使⽤ help 帮助<br>• # help cd<br>• 外部命令使⽤help帮助<br>• # ls –help<br><strong>info 帮助</strong></p><p>info 帮助⽐ help 更详细，作为 help 的补充<br>• # info ls</p><h2 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h2><h3 id="⽂件查看"><a href="#⽂件查看" class="headerlink" title="⽂件查看"></a>⽂件查看</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pwd #显示当前的⽬录名称</span><br><span class="line"></span><br><span class="line">ls  #查看当前⽬录下的⽂件</span><br><span class="line">    #参数：</span><br><span class="line">        #-l ⻓格式显示⽂件</span><br><span class="line">        #-a 显示隐藏⽂件</span><br><span class="line">        #-r 逆序显示</span><br><span class="line">        #-t 按照时间顺序显示</span><br><span class="line">        #-R 递归显示</span><br><span class="line"></span><br><span class="line">cd #更改当前的操作⽬录</span><br><span class="line"></span><br><span class="line">cat #⽂本内容显示到终端</span><br><span class="line">head #查看⽂件开头</span><br><span class="line">tail #查看⽂件结尾</span><br><span class="line"></span><br><span class="line">wc #统计⽂件内容信息</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">首先对于当前文件夹进行 ls 列表操作</span></span><br><span class="line">ls -l .</span><br><span class="line"><span class="meta">#</span><span class="bash">然后把ls的结果，输出到 oeasy.txt 中</span></span><br><span class="line">ls -l . &gt; oeasy.txt</span><br><span class="line"><span class="meta">#</span><span class="bash">使用cat查看 oeasy.txt 的内容</span> </span><br><span class="line">cat oeasy.txt</span><br></pre></td></tr></tbody></table></figure><h3 id="⽬录⽂件的创建与删除"><a href="#⽬录⽂件的创建与删除" class="headerlink" title="⽬录⽂件的创建与删除"></a>⽬录⽂件的创建与删除</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir #建⽴⽬录</span><br><span class="line">-p 递归创建空目录</span><br><span class="line">mkdir -p /arts/app  </span><br><span class="line"></span><br><span class="line">rmdir #删除空⽬录</span><br><span class="line">rm -r #删除⾮空⽬录</span><br></pre></td></tr></tbody></table></figure><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常⽤通配符</span><br><span class="line">• * 匹配任何字符串</span><br><span class="line">• ？ 匹配1个字符串</span><br><span class="line">• [xyz] 匹配xyz任意⼀个字符</span><br><span class="line">• [a-z] 匹配⼀个范围</span><br><span class="line">• [!xyz] 或 [^xyz]</span><br></pre></td></tr></tbody></table></figure><h3 id="⽂件操作"><a href="#⽂件操作" class="headerlink" title="⽂件操作"></a>⽂件操作</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名  #创建文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp  #复制⽂件和⽬录</span><br><span class="line">    #常⽤参数</span><br><span class="line">        #-r 复制⽬录</span><br><span class="line">        #-p 保留⽤户、权限、时间等⽂件属性</span><br><span class="line">        #-a 等同于 -dpR</span><br><span class="line"></span><br><span class="line">mv [选项] 源⽂件 ⽬标⽂件/⽬录   #移动或重命名文件(要带上目录)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rm [选项]   #删除⽂件</span><br><span class="line">            #常⽤参数</span><br><span class="line">            #-r 删除⽬录（包括⽬录下的所有⽂件）</span><br><span class="line">            #-f 删除⽂件不进⾏提示</span><br></pre></td></tr></tbody></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux删除文件夹命令</span></span><br><span class="line"></span><br><span class="line">rm -rf /var/log/httpd/access</span><br><span class="line">将会删除/var/log/httpd/access目录以及其下所有文件、文件夹</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux删除文件命令</span></span><br><span class="line"></span><br><span class="line">rm -f /var/log/httpd/access.log</span><br><span class="line">将会强制删除/var/log/httpd/access.log这个文件</span><br></pre></td></tr></tbody></table></figure><h3 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h3><p>gzip是用来压缩和解压.gz文件的命令。<br>gzip命令只能压缩单个文件，而不能把一个文件夹压缩成一个文件（与打包命令的区别）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">会将文件压缩为文件 test.txt.gz，原来的文件则没有了</span></span><br><span class="line">gzip /home/aistudio/work/test.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压文件,原来的文件则没有了</span></span><br><span class="line">gzip -d /home/aistudio/test.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-r或--recursive：递归压缩指定文件夹下的文件（该文件夹下的所有文件被压缩成单独的.gz文件）；</span><br><span class="line">-v或--verbose：显示指令执行过程。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>用来打包或者解包 后缀名为.tar</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">    -c或--create：建立新的备份文件；</span><br><span class="line">    -x或--extract或--get：从备份文件中还原文件 (解包)；</span><br><span class="line">    -v：显示指令执行过程；</span><br><span class="line">    -f或--file：指定备份文件；</span><br><span class="line">    -C：指定目的目录；</span><br><span class="line">    -z：通过gzip指令处理备份文件；</span><br><span class="line">    -j：通过bzip2指令处理备份文件。</span><br></pre></td></tr></tbody></table></figure><h3 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h3><p>zip命令和unzip命令用在在Linux上处理.zip的压缩文件。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">常用参数</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">zip:</span></span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-m：不保留原文件；</span><br><span class="line">-r：递归处理。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">unzip:</span></span><br><span class="line">    -v：显示指令执行过程；</span><br><span class="line">    -d：解压到指定目录。</span><br></pre></td></tr></tbody></table></figure><h2 id="nano文本编辑器"><a href="#nano文本编辑器" class="headerlink" title="nano文本编辑器"></a>nano文本编辑器</h2><p>nano是一个字符终端的文本编辑器，有点像DOS下的editor程序。它比vi/vim要简单得多，比较适合Linux初学者使用。某些Linux发行版的默认编辑器就是nano。</p><p><a href="https://blog.csdn.net/a4132447/article/details/95531532">https://blog.csdn.net/a4132447/article/details/95531532</a></p><h2 id="vim编辑器使用"><a href="#vim编辑器使用" class="headerlink" title="vim编辑器使用"></a>vim编辑器使用</h2><p>基本上 vi/vim 共分为三种模式，分别是命令模式（Command mode），输入模式（Insert mode）和底线命令模式（Last line mode）。</p><h3 id="正常模式"><a href="#正常模式" class="headerlink" title="正常模式"></a>正常模式</h3><p>vim 默认的模式 是 Normal mode(正常模式)<br>这个时候你会发现按 回车、空格 等按键，都是没有用的</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">esc或者 ctrl+c  从其他模式回到正常模式，尽量选择 ctrl+c 因为可以让双手保持正位，左手小指 ctrl + 右手食指 c</span><br><span class="line">正常模式下，u是撤销操作   .是重复上一次操作    ctrl+r可撤销撤销操作</span><br><span class="line">x 删除当前光标所在处的字符。</span><br><span class="line"></span><br><span class="line">v V ctrl+v 进⼊可视化模式</span><br><span class="line">： 切换到底线命令模式，以在最底一行输入命令。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">移动光标: j下 k上 h左 l右 </span><br><span class="line">w下一个单词 b上一个单词 e</span><br><span class="line">移动光标: j下 k上 h左 l右</span><br><span class="line">在方向前面加上数字3b、5e ， 4h、10l</span><br><span class="line"></span><br><span class="line">^:作用是移动到行首; $作用是移动到本行行尾</span><br><span class="line">行内查找：fo  直接跳到了到了右边邻近的的 o 字符</span><br><span class="line"></span><br><span class="line">g g 对应 首行  </span><br><span class="line">G 对应 尾行 然后按o</span><br><span class="line">2G 跳到第2行  或者:2</span><br><span class="line"></span><br><span class="line">g g = G 从首行到尾行自动缩进</span><br></pre></td></tr></tbody></table></figure><h3 id="插入模式（Insert-mode）"><a href="#插入模式（Insert-mode）" class="headerlink" title="插入模式（Insert mode）"></a>插入模式（Insert mode）</h3><p>只有在插入模式下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><p>在正常模式进入插入模式</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">i 前插</span><br><span class="line">I 最前插</span><br><span class="line">o 在当前行 下面 插入一个空行,然后切换到插入模式</span><br><span class="line">O在当前行 上面 插入一个空行,然后切换到插入模式</span><br><span class="line">i(insert) 是 在光标前插   I 是在当前行最前面插入</span><br><span class="line">a(append) 是 在光标后插   A 是在当前行最后插入</span><br></pre></td></tr></tbody></table></figure><p>字符按键以及Shift组合，输入字符<br>ENTER，回车键，换行<br>BACK SPACE，退格键，删除光标前一个字符<br>DEL，删除键，删除光标后一个字符<br>方向键，在文本中移动光标<br>HOME/END，移动光标到行首/行尾<br>Page Up/Page Down，上/下翻页<br>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线<br>ESC，退出输入模式，切换到命令模式<br>ctrl + o进入插入普通模式   ：让你执行一次 普通模式 的命令，继续进行插入<br>w 可以移动到下一个单词的开头,b 来到前一个单词的词头</p><h3 id="底行命令模式"><a href="#底行命令模式" class="headerlink" title="底行命令模式"></a>底行命令模式</h3><p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。</p><p>在命令行模式下，按冒号「:」键，进入底行模式</p><p>:w filename 文件以filename为文件名保存</p><p>:wq 文件存盘并退出vim</p><p>:q 文件不存盘并退出vim</p><p>:q! 文件不存盘强制退出vim<br>:! 执⾏ Shell 命令<br>:s 替换<br>:/ 查找<br>:set 设置命令<br>:%d 清空所有内容<br>:saveas 文件名  另存为<br>:h[elp] 命令       (查找命令帮助)[]的内容可以省略<br>:f[ile]或者ctrl+g   查看当前文件信息</p><p>把光标移动到链接上<br>ctrl+] 就可以跳入链接<br>ctrl+o 可以跳出链接，回到原位置 older position</p><h3 id="可视模式"><a href="#可视模式" class="headerlink" title="可视模式"></a>可视模式</h3><p>从正常模式到可视模式，分成三种</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">v 字符可视</span><br><span class="line">V 行·可视</span><br><span class="line">ctrl+ v 块·可视</span><br></pre></td></tr></tbody></table></figure><p>ctrl+v<br>上上次了解到块可视模式 -ctrl+v<br>左下角– 可视 块 –<br>然后配合motion<br>o切换首尾<br>这个块可以有四个顶点<br>O横向切换<br>可以在选区内进行编辑和替换<br>可以直接d、c、y<br>或者D、C、Y<br>也可以直接编辑<br>:’&lt;,’&gt;d<br>:’&lt;,’&gt;s/shiyanlou/oeasy/g 范围内批量替换<br>可以在块·可视化模式下替换<br>:’&lt;,’&gt;s/%Vg/graphic/g<br>‘&lt;,’&gt;表示范围<br>s表示substitute<br>%V表示在块内</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>命令行模式下 ？</p><p>:s 命令来替换字符串<br>    :s/gald/glad/<br>    :s/java/Linux/g</p><p>:X  设置密码</p><h3 id="Vi编辑文件无法保存退出的解决方法"><a href="#Vi编辑文件无法保存退出的解决方法" class="headerlink" title="Vi编辑文件无法保存退出的解决方法"></a>Vi编辑文件无法保存退出的解决方法</h3><p>解决方法：<br>第一种：：w!!直接保存并退出 或者 ：wq!!<br>第二种：强制退出后，用sudo vi +文件重新编辑，此时便是以root权限进行修改文件，可以正常保存并退出<br>第三：用此命令进行:w !sudo tee %进行保存退出</p><h2 id="软件包管理器"><a href="#软件包管理器" class="headerlink" title="软件包管理器"></a>软件包管理器</h2><p>软件包管理器是⽅便软件安装、卸载，解决软件依赖关系的重要⼯具</p><p>linux系统基本上分两大类：</p><ol><li><p>RedHat系列：Redhat、Centos、Fedora等<br>使⽤ yum 包管理器，软件安装包格式为 rpm，安装rpm包的命令是 “rpm -参数”<br>包管理工具 yum<br>支持tar包</p></li><li><p>Debian系列：Debian、Ubuntu等<br>使⽤ apt 包管理器，软件安装包格式为 deb，安装deb包的命令是 “dpkg -参数”<br>包管理工具 apt-get<br>支持tar包</p></li></ol><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。<br>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. 列出所有可更新的软件清单命令：yum check-update</span><br><span class="line"></span><br><span class="line">2. 更新所有软件命令：yum update</span><br><span class="line"></span><br><span class="line">3. 仅安装指定的软件命令：yum install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">4. 仅更新指定的软件命令：yum update &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">5. 列出所有可安裝的软件清单命令：yum list</span><br><span class="line"></span><br><span class="line">6. 删除软件包命令：yum remove &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">7. 查找软件包命令：yum search &lt;keyword&gt;</span><br><span class="line"></span><br><span class="line">8. 清除缓存命令:</span><br><span class="line"></span><br><span class="line">yum clean packages: 清除缓存目录下的软件包</span><br><span class="line">yum clean headers: 清除缓存目录下的 headers</span><br><span class="line">yum clean oldheaders: 清除缓存目录下旧的 headers</span><br><span class="line">yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的 headers</span><br></pre></td></tr></tbody></table></figure><h4 id="配置yum仓库"><a href="#配置yum仓库" class="headerlink" title="配置yum仓库"></a>配置yum仓库</h4><p>yum就是一个硕大的软件仓库，里面保存了几乎所有的常用工具，只需要为系统提供软件包名称即可。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先切换到yum源中的配置目录</span></span><br><span class="line">cd /etc/yum.repos.d/ </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="设置yum源为阿里云镜像源"><a href="#设置yum源为阿里云镜像源" class="headerlink" title="设置yum源为阿里云镜像源"></a>设置yum源为阿里云镜像源</h4><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ping mirrors.aliyun.com  # 验证网络是否可以连接阿里云镜像</span><br><span class="line"><span class="meta">#</span><span class="bash">查看yum源信息</span></span><br><span class="line">yum repolist</span><br></pre></td></tr></tbody></table></figure><h4 id="yum无法使用"><a href="#yum无法使用" class="headerlink" title="yum无法使用"></a>yum无法使用</h4><p>yum服务使用的默认python版本是python2<br>更换yum源</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/yum  #先看下/usr/bin/yum文件内容</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统默认安装的yum</span></span><br><span class="line">rpm -qa|grep yum</span><br><span class="line"></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p><a href="https://www.cnblogs.com/confessionlouis/p/9763512.html">https://www.cnblogs.com/confessionlouis/p/9763512.html</a></p><p>wget是Linux中的一个下载文件的工具，后来被移植到包括Windows在内的各个平台上。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="meta">#</span><span class="bash">查看帮助手册</span></span><br><span class="line">wget --help</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><p>apt是一个命令行实用程序，用于在Ubuntu、Debian和相关Linux发行版上安装、更新、删除和管理deb软件包。<br>sudo apt update  #更新apt源</p><p>sudo apt install 软件名</p><h4 id="更改镜像源"><a href="#更改镜像源" class="headerlink" title="更改镜像源"></a>更改镜像源</h4><p>通过修改   /etc/apt/sources.list 文件内容来修改 apt 源<br>vim /etc/apt/sources.list</p><p>将  <a href="http://archive.ubuntu.com/">http://archive.ubuntu.com/</a>  部分更换为获取到的国内镜像源地址</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>sudo apt-get update  #更新镜像</p><h3 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h3><p><a href="https://blog.csdn.net/m0_57053326/article/details/122363510">https://blog.csdn.net/m0_57053326/article/details/122363510</a></p><p>rpm -ivh  xxxx.rpm</p><p>选项与参数：<br>-i：install 安装<br>-v：查看更详细的安装信息<br>-h：显示安装进度<br>-e：erase 卸载清除安装包</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 卸载</span><br><span class="line">rpm -e zsh</span><br></pre></td></tr></tbody></table></figure><h2 id="用户与权限管理"><a href="#用户与权限管理" class="headerlink" title="用户与权限管理"></a>用户与权限管理</h2><p>多⽤户操作系统的⽬的是隔离<br>• ⽤户权限隔离<br>• 系统资源隔离<br>• root ⽤户与普通⽤户的区别</p><h3 id="用户和用户组的关系"><a href="#用户和用户组的关系" class="headerlink" title="用户和用户组的关系"></a>用户和用户组的关系</h3><p>Linux系统以组Grou方式管理用户，用户和组的关系是多对多</p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="查询用户"><a href="#查询用户" class="headerlink" title="查询用户"></a>查询用户</h4><p>1.查询当前系统上已登录用户的相关信息<br>who [参数]    #w命令也行<br>参数：<br>    -a 打印全面信息<br>    -b 打印系统最近引导时间<br>    -H 带有列名打印信息<br>    -u 打印已登录用户列表</p><p>2.查询到所有用户的登录信息<br>lastlog [参数]    #last,<br>参数：<br>    -b 显示指定天数前的登录信息<br>    -t 显示指定天数以来的登录信息<br>    -u 显示指定用户的最后一次的登录信息</p><h4 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h4><p><code>useradd 参数 用户名</code><br>参数说明：<br>  -c comment 指定一段注释性描述。<br>  -d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。 /home/用户名<br>  -g 指定用户所属的用户组。<br>  -G 指定用户所属的附加组。<br>  -s  指定用户登录的shell解释器<br>  -u 指定用户UID，如果同时有-o选项，则可以重复使用其他用户的标识号。</p><h4 id="修改用户属性"><a href="#修改用户属性" class="headerlink" title="修改用户属性"></a>修改用户属性</h4><p>usermod [参数] &lt;用户名&gt;<br>参数：<br>    -u 修改用户UID<br>    -c 修改用户的说明/备注<br>    -g 修改用户的所属用户组<br>    -G 修改用户的附加组<br>    -L 锁定用户密码<br>    -U 解锁用户密码<br>    -s 修改用户的登录shell</p><h4 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h4><p>userdel [参数] [用户名]   #在删除之前确定用户没有登录。<br>参数：<br>    -f 强制删除用户账号<br>    -r 同时删除用户的家目录</p><h4 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h4><p> passwd [参数] [用户名]<br>参数：<br>    -d 删除密码<br>    -S 查询用户密码的状态<br>    -l 锁定用户密码<br>    -u 解锁用户密码</p><h4 id="⽤户切换"><a href="#⽤户切换" class="headerlink" title="⽤户切换"></a>⽤户切换</h4><p>su [用户名]<br>参数：<br>    -c 仅执行一次命令，不切换用户身份</p><h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p><a href="https://blog.csdn.net/weixin_43575908/article/details/111990981">https://blog.csdn.net/weixin_43575908/article/details/111990981</a></p><h3 id="⽤户配置⽂件"><a href="#⽤户配置⽂件" class="headerlink" title="⽤户配置⽂件"></a>⽤户配置⽂件</h3><p>• /etc/passwd ⽤户配置⽂件<br>• /etc/shadow ⽤户密码相关配置⽂件<br>• /etc/group ⽤户组配置⽂件</p><p>-rw-r-xr– 1 userame groupname mtime filename<br>    • rw- ⽂件属主的权限<br>    • r-x ⽂件属组的权限<br>    • r– 其他⽤户的权限</p><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><p><strong>⽂件权限的表示⽅法</strong><br>    • r = 4  ：读<br>    • w = 2 ：写<br>    • x(execute)= 1 :执行</p><p><strong>文件调用权限</strong>分为三级 : 文件所有者/属主（Owner）、用户组/属组（Group）、其它用户（Other Users）。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录下所有文件权限</span></span><br><span class="line">ls -l      #简写 ll </span><br><span class="line"></span><br><span class="line">ll |grep 文件名  #查看指定文件权限</span><br></pre></td></tr></tbody></table></figure><h3 id="修改权限命令"><a href="#修改权限命令" class="headerlink" title="修改权限命令"></a>修改权限命令</h3><p>要通过su进入到root权限中</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">chmod abc filename #修改⽂件、⽬录权限</span><br><span class="line"></span><br><span class="line">chown #更改属主、属组</span><br></pre></td></tr></tbody></table></figure><p>指令中的a、b、c分别表示一个数字，其中a对应文件所有者权限，b对应文件所有者所在组权限，c对应其他身份权限。<br>    • r = 4  ：读<br>    • w = 2 ：写<br>    • x(execute)= 1 :执行</p><p>chmod 777 xxxx，<br>第1个7表示文件对于文件所有者来说可读可写可执行；<br>第2个7表示文件对于文件所有者所在组来说可读可写可执行；<br>第3个7表示文件对于其他身份的用户来说可读可写可执行。</p><h2 id="Linux开机自动启动软件-可执行程序"><a href="#Linux开机自动启动软件-可执行程序" class="headerlink" title="Linux开机自动启动软件/可执行程序"></a>Linux开机自动启动软件/可执行程序</h2><h3 id="首先关注几个脚本"><a href="#首先关注几个脚本" class="headerlink" title="首先关注几个脚本"></a>首先关注几个脚本</h3><p>/etc/rc.d/rc.local：该脚本在系统启动时被执行一次；<br>/etc/profile:该脚本在所有用户登陆时会被执行一次；<br>~/.bashrc:该脚本在用户登陆时被执行一次，与/etc/profile不同的是，bashrc文件每个用户拥有独立的一个。</p><p>若设置开机启动，应该修改：/etc/rc.d/rc.local文件。</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><h3 id="Linux读取环境变量"><a href="#Linux读取环境变量" class="headerlink" title="Linux读取环境变量"></a>Linux读取环境变量</h3><p>export命令显示当前系统定义的所有环境变量<br>echo $PATH命令输出当前的PATH环境变量 的值</p><h3 id="Linux加载环境变量的顺序如下"><a href="#Linux加载环境变量的顺序如下" class="headerlink" title="Linux加载环境变量的顺序如下"></a>Linux加载环境变量的顺序如下</h3><p>/etc/environment<br>/etc/profile<br>/etc/bash.bashrc<br>/etc/profile.d/test.sh<br>~/.profile<br>~/.bashrc</p><h3 id="vim-etc-profile"><a href="#vim-etc-profile" class="headerlink" title="vim /etc/profile"></a>vim /etc/profile</h3><p>如果你的计算机仅仅作为开发使用时推存使用这种方法，因为所有用户的shell都有权使用这个环境变量，可能会给系统带来安全性问题。这里是针对所有的用户的，所有的shell</p><p>该方法修改系统配置，需要管理员权限或者对该文件的写入权限，和vim /etc/bashrc类似：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果/etc/profile文件不可编辑，需要修改为可编辑</span></span><br><span class="line">chmod -v u+w /etc/profile</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最后一行加上</span></span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br><span class="line">注意事项：</span><br><span class="line"></span><br><span class="line">生效时间：新开终端生效，或者手动source /etc/profile生效</span><br><span class="line">生效期限：永久有效</span><br><span class="line">生效范围：对所有用户有效</span><br></pre></td></tr></tbody></table></figure><h3 id="vim-bashrc"><a href="#vim-bashrc" class="headerlink" title="vim ~/.bashrc"></a>vim ~/.bashrc</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最后一行加上</span></span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br></pre></td></tr></tbody></table></figure><p>注意事项：<br>    生效时间：使用相同的用户打开新的终端时生效，或者手动source ~/.bashrc生效<br>    生效期限：永久有效<br>    生效范围：仅对当前用户有效<br>    如果有后续的环境变量加载文件覆盖了PATH定义，则可能不生效</p><p>修改bashrc文件，这种方法更为安全，它可以把使用这些环境变量的权限控制到用户级别，这里是针对某一特定的用户，如果你需要给某个用户权限使用这些环境变量，你只需要修改其个人用户主目录下的 .bashrc文件就可以了。</p><h3 id="export-PATH"><a href="#export-PATH" class="headerlink" title="export PATH"></a>export PATH</h3><p>使用export命令直接修改PATH的值，配置MySQL进入环境变量的方法:</p><p>export PATH=/home/uusama/mysql/bin:$PATH</p><p>注意事项：</p><p>生效时间：立即生效<br>生效期限：当前终端有效，窗口关闭后无效<br>生效范围：仅对当前用户有效<br>配置的环境变量 中不要忘了加上原来的配置，即$PATH部分，避免覆盖原来配置</p><h3 id="vim-bash-profile"><a href="#vim-bash-profile" class="headerlink" title="vim ~/.bash_profile"></a>vim ~/.bash_profile</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bash_profile</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在最后一行加上</span></span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br></pre></td></tr></tbody></table></figure><p>注意事项：</p><p>生效时间：使用相同的用户打开新的终端时生效，或者手动source <del>/.bash_profile生效<br>生效期限：永久有效<br>生效范围：仅对当前用户有效<br>如果没有</del>/.bash_profile文件，则可以编辑~/.profile文件或者新建一个</p><h3 id="vim-etc-bashrc"><a href="#vim-etc-bashrc" class="headerlink" title="vim /etc/bashrc"></a>vim /etc/bashrc</h3><p>该方法是修改系统配置，需要管理员权限（如root）或者对该文件的写入权限：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 如果/etc/bashrc文件不可编辑，需要修改为可编辑</span><br><span class="line">chmod -v u+w /etc/bashrc</span><br><span class="line"></span><br><span class="line">vim /etc/bashrc</span><br><span class="line"></span><br><span class="line"># 在最后一行加上</span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br></pre></td></tr></tbody></table></figure><p>注意事项：</p><p>生效时间：新开终端生效，或者手动source /etc/bashrc生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p><h3 id="vim-etc-environment"><a href="#vim-etc-environment" class="headerlink" title="vim /etc/environment"></a>vim /etc/environment</h3><p>该方法是修改系统环境配置文件，需要管理员权限或者对该文件的写入权限：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 如果/etc/bashrc文件不可编辑，需要修改为可编辑</span><br><span class="line"></span><br><span class="line">chmod -v u+w /etc/environment</span><br><span class="line"></span><br><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"># 在最后一行加上</span><br><span class="line">export PATH=$PATH:/home/uusama/mysql/bin</span><br></pre></td></tr></tbody></table></figure><p>注意事项：</p><p>生效时间：新开终端生效，或者手动source /etc/environment生效<br>生效期限：永久有效<br>生效范围：对所有用户有效</p><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="增加连接问候"><a href="#增加连接问候" class="headerlink" title="增加连接问候"></a>增加连接问候</h3><p>motd是message of the day的缩写，意思是“当天的提示信息”，通常在用户成功登录到Linux后出现，该信息可以从/etc/motd文本文件中找到。<br>提示：/etc/motd文件有时不一定是个常规文本文件，也可能是一个软链接到某个特定的文件，如/var/run/motd。<br>一般来说，这个文件是一个静态文本文件，只在某个Linux发行版本完成安装或升级后才会更新。<br>提示：UNIX/Linux系统管理员也通常会把一些重要的信息写到这个文件里面，以方便其他人或自己下次成功登录时需要注意什么和做什么，非常方便。<br>通常一个标准的motd信息有以下内容：<br>1.欢迎信息，一般包括Linux发行版本名称，内核版本、操作系统位数<br>2.操作系统当前信息，如操作系统负载，进程数量，文件系统使用情况，当前用户登录数，内存（含swap）使用情况，IP地址<br>3.文档和帮助信息<br>4.可更新的软件包和可升级的安全补丁</p><p>vi /etc/motd</p><p>增加内容</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">\\ \\ \\ \\ \\ \\ \\ \\ || || || || || || // // // // // // // //</span><br><span class="line">\\ \\ \\ \\ \\ \\ \\        _ooOoo_          // // // // // // //</span><br><span class="line">\\ \\ \\ \\ \\ \\          o8888888o            // // // // // //</span><br><span class="line">\\ \\ \\ \\ \\             88" . "88               // // // // //</span><br><span class="line">\\ \\ \\ \\                (| -_- |)                  // // // //</span><br><span class="line">\\ \\ \\                   O\  =  /O                     // // //</span><br><span class="line">\\ \\                   ____/`---'\____                     // //</span><br><span class="line">\\                    .'  \\|     |//  `.                      //</span><br><span class="line">==                   /  \\|||  :  |||//  \                     ==</span><br><span class="line">==                  /  _||||| -:- |||||-  \                    ==</span><br><span class="line">==                  |   | \\\  -  /// |   |                    ==</span><br><span class="line">==                  | \_|  ''\---/''  |   |                    ==</span><br><span class="line">==                  \  .-\__  `-`  ___/-. /                    ==</span><br><span class="line">==                ___`. .'  /--.--\  `. . ___                  ==</span><br><span class="line">==              ."" '&lt;  `.___\_&lt;|&gt;_/___.'  &gt;'"".               ==</span><br><span class="line">==            | | :  `- \`.;`\ _ /`;.`/ - ` : | |              \\</span><br><span class="line">//            \  \ `-.   \_ __\ /__ _/   .-` /  /              \\</span><br><span class="line">//      ========`-.____`-.___\_____/___.-`____.-'========      \\</span><br><span class="line">//                           `=---='                           \\</span><br><span class="line">// //   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^  \\ \\</span><br><span class="line">// // //      六祖保佑      永无BUG      永不修改        \\ \\ \\</span><br><span class="line">// // // // // // || || || || || || || || || || \\ \\ \\ \\ \\ \\</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * _ooOoo_</span><br><span class="line"> * o8888888o</span><br><span class="line"> * 88" . "88</span><br><span class="line"> * (| -_- |)</span><br><span class="line"> *  O\ = /O</span><br><span class="line"> * ___/`---'\____</span><br><span class="line"> * .   ' \\| |// `.</span><br><span class="line"> * / \\||| : |||// \</span><br><span class="line"> * / _||||| -:- |||||- \</span><br><span class="line"> * | | \\\ - /// | |</span><br><span class="line"> * | \_| ''\---/'' | |</span><br><span class="line"> * \ .-\__ `-` ___/-. /</span><br><span class="line"> * ___`. .' /--.--\ `. . __</span><br><span class="line"> * ."" '&lt; `.___\_&lt;|&gt;_/___.' &gt;'"".</span><br><span class="line"> * | | : `- \`.;`\ _ /`;.`/ - ` : | |</span><br><span class="line"> * \ \ `-. \_ __\ /__ _/ .-` / /</span><br><span class="line"> * ======`-.____`-.___\_____/___.-`____.-'======</span><br><span class="line"> * `=---='</span><br><span class="line"> *          .............................................</span><br><span class="line"> *           佛曰：bug泛滥，我已瘫痪！</span><br><span class="line"> */</span><br></pre></td></tr></tbody></table></figure><h2 id="端口问题"><a href="#端口问题" class="headerlink" title="端口问题"></a>端口问题</h2><p>netstat -nultp（此处不用加端口号） #查看当前所有已经使用的端口情况</p><p>lsof -i:端口   #查看端口</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构与算法</title>
      <link href="/2022/02191106.html"/>
      <url>/2022/02191106.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-逻辑结构"><a href="#1-逻辑结构" class="headerlink" title="1. 逻辑结构"></a>1. 逻辑结构</h1><p>是指数据对象中数据元素之间的相互关系</p><p>集合结构、线性结构、树形结构、图形结构等（宏观）</p><h1 id="2-物理结构-存储结构"><a href="#2-物理结构-存储结构" class="headerlink" title="2. 物理结构(存储结构)"></a>2. 物理结构(存储结构)</h1><h1 id="3-顺序存储结构"><a href="#3-顺序存储结构" class="headerlink" title="3. 顺序存储结构"></a>3. 顺序存储结构</h1><h2 id="3-1-整数"><a href="#3-1-整数" class="headerlink" title="3.1. 整数"></a>3.1. 整数</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int n=1831;</span><br><span class="line">System.out.println("个位 "+ (n % 10));</span><br><span class="line">System.out.println("十位 "+ (n % 100)/10);</span><br><span class="line">System.out.println("百位 "+ (n % 1000)/100);</span><br><span class="line">System.out.println("千位 "+ (n /1000));</span><br></pre></td></tr></tbody></table></figure><h2 id="3-2-字符串"><a href="#3-2-字符串" class="headerlink" title="3.2. 字符串"></a>3.2. 字符串</h2><h3 id="3-2-1-344-反转字符串"><a href="#3-2-1-344-反转字符串" class="headerlink" title="3.2.1. 344.反转字符串"></a>3.2.1. 344.反转字符串</h3><p><a href="https://leetcode.cn/problems/reverse-string/">力扣题目链接</a></p><p>编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组 char[] 的形式给出。</p><p>不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。</p><p>你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。</p><p>示例 1：<br>输入：[“h”,”e”,”l”,”l”,”o”]<br>输出：[“o”,”l”,”l”,”e”,”h”]</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reverseString</span><span class="params">(<span class="keyword">char</span>[] s)</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> left =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=s.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left&lt;=right){</span><br><span class="line">            <span class="keyword">char</span> tmp=s[left];</span><br><span class="line">            s[left]=s[right];</span><br><span class="line">            s[right]=tmp;</span><br><span class="line">            left++;</span><br><span class="line">            right--;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-2-242-有效的字母异位词"><a href="#3-2-2-242-有效的字母异位词" class="headerlink" title="3.2.2. 242.有效的字母异位词"></a>3.2.2. 242.有效的字母异位词</h3><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p>示例 1: 输入: s = “anagram”, t = “nagaram” 输出: true</p><p>示例 2: 输入: s = “rat”, t = “car” 输出: false</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>{</span><br><span class="line">        <span class="comment">// 定义一个数组record用来上记录字符串s里字符出现的次数</span></span><br><span class="line">        <span class="comment">//int数组动态初始化后，每个元素为0</span></span><br><span class="line">        <span class="keyword">int</span>[] record = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="comment">//因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) {</span><br><span class="line">            <span class="comment">//求出一个相对数值</span></span><br><span class="line">            record[s.charAt(i) - <span class="string">'a'</span>]++;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) {</span><br><span class="line">            record[t.charAt(i) - <span class="string">'a'</span>]--;</span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> count: record) {</span><br><span class="line">            <span class="keyword">if</span> (count != <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-3-数组"><a href="#3-3-数组" class="headerlink" title="3.3. 数组"></a>3.3. 数组</h2><p>它是与数据元素的索引配对的数据元素的顺序排列。</p><p>数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。</p><p>数组是一种通用的数据结构，能用来实现栈、队列等很多数据结构。</p><p>数组适合查找操作</p><p>数组支持随机访问，根据下标随机访问的时间复杂度为 O(1)</p><h3 id="3-3-1-数组的优缺点"><a href="#3-3-1-数组的优缺点" class="headerlink" title="3.3.1. 数组的优缺点"></a>3.3.1. 数组的优缺点</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组作为数据存储结构有一定的缺陷。</span><br><span class="line">在无序数组中，搜索性能差，在有序数组中，插入效率又很低，而且这两种数组的删除效率都很低，并且数组在创建后，其大小是固定了，设置的过大会造成内存的浪费，过小又不能满足数据量的存储。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">连续的内存空间和相同类型的数据。</span><br><span class="line">正是因为这两个限制，它才有了一个堪称“杀手锏”的特性：“随机访问”。但有利就有弊，这两个限制也让数组的很多操作变得非常低效，比如要想在数组中删除、插入一个数据，为了保证连续性，就需要做大量的数据搬移工作。</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-2-数组低效插入"><a href="#3-3-2-数组低效插入" class="headerlink" title="3.3.2. .数组低效插入"></a>3.3.2. .数组低效插入</h3><ul><li><p>假设数组的长度为 n，现在，如果我们需要将一个数据插入到数组中的第 k 个位置。为了把第 k 个位置腾出来，给新来的数据，我们需要将第 k～n 这部分的元素都顺序地往后挪一位。</p></li><li><p>如果在数组的末尾插入元素，那就不需要移动数据了，这时的时间复杂度为 O(1)。但如果在数组的开头插入元素，那所有的数据都需要依次往后移动一位，所以最坏时间复杂度是 O(n)。因为我们在每个位置插入元素的概率是一样的，所以平均情况时间复杂度为 (1+2+…n)/n=O(n)。</p></li><li><p>如果数组中的数据是有序的，我们在某个位置插入一个新的元素时，就必须按照刚才的方法搬移+k+之后的数据。但是，如果数组中存储的数据并没有任何规律，数组只是被当作一个存储数据的集合。在这种情况下，如果要将某个数组插入到第 k 个位置，为了避免大规模的数据搬移，我们还有一个简单的办法就是，直接将第 k 位的数据搬移到数组元素的最后，把新的元素直接放入第 k 个位置。</p></li></ul><p>为了更好地理解，我们举一个例子。假设数组 a[10]中存储了如下 5 个元素：a，b，c，d，e。<br>我们现在需要将元素 x 插入到第 3 个位置。我们只需要将 c 放入到 a[5]，将 a[2]赋值为 x 即可。最后，数组中的元素如下： a，b，x，d，e，c。</p><h3 id="3-3-3-数组低效删除"><a href="#3-3-3-数组低效删除" class="headerlink" title="3.3.3. 数组低效删除"></a>3.3.3. 数组低效删除</h3><ul><li>跟插入数据类似，如果我们要删除第k个位置的数据，为了内存的连续性，也需要搬移数据，不然中间就会出现空洞，内存就不连续了。</li><li>和插入类似，如果删除数组末尾的数据，则最好情况时间复杂度为 O(1)；如果删除开头的数据，则最坏情况时间复杂度为 O(n)；平均情况时间复杂度也为 O(n)。</li><li>实际上，在某些特殊场景下，我们并不一定非得追求数组中数据的连续性。如果我们将多次删除操作集中在一起执行，删除的效率是不是会提高很多呢？<br>我们继续来看例子。数组 a[10]中存储了 8 个元素：a，b，c，d，e，f，g，h。现在，我们要依次删除 a，b，c 三个元素。</li><li>为了避免 d，e，f，g，h+这几个数据会被搬移三次，我们可以先记录下已经删除的数据。每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除。当数组没有更多空间存储数据时，我们再触发执行一次真正的删除操作，这样就大大减少了删除操作导致的数据搬移。</li><li>如果你了解 JVM，你会发现，这不就是JVM标记清除垃圾回收算法的核心思想吗？没错，数据结构和算法的魅力就在于此，很多时候我们并不是要去死记硬背某个数据结构或者算法，而是要学习它背后的思想和处理技巧，这些东西才是最有价值的。如果你细心留意，不管是在软件开发还是架构设计中，总能找到某些算法和数据结构的影子。</li></ul><h3 id="3-3-4-容器和数组"><a href="#3-3-4-容器和数组" class="headerlink" title="3.3.4. 容器和数组"></a>3.3.4. 容器和数组</h3><p>针对数组类型，很多语言都提供了容器类，比如 Java 中的 ArrayList、C++ 中的 vector。在项目开发中，什么时候适合用数组，什么时候适合用容器呢？</p><p>这里我拿 Java 语言来举例。如果你是 Java 工程师，几乎天天都在用 ArrayList，对它应该非常熟悉。那它与数组相比，到底有哪些优势呢？<br>个人觉得，ArrayList 最大的优势就是可以将很多数组操作的细节封装起来。比如前面提到的数组插入、删除数据时需要搬移其他数据等。另外，它还有一个优势，就是支持动态扩容。</p><p>数组本身在定义的时候需要预先指定大小，因为需要分配连续的内存空间。如果我们申请了大小为 10 的数组，当第 11 个数据需要存储到数组中时，我们就需要重新分配一块更大的空间，将原来的数据复制过去，然后再将新的数据插入。<br>如果使用 ArrayList，我们就完全不需要关心底层的扩容逻辑，ArrayList 已经帮我们实现好了。每次存储空间不够的时候，它都会将空间自动扩容为 1.5+倍大小。<br>不过，这里需要注意一点，因为扩容操作涉及内存申请和数据搬移，是比较耗时的。所以，如果事先能确定需要存储的数据大小，最好在创建 ArrayList 的时候事先指定数据大小。+比如我们要从数据库中取出 10000 条数据放入 ArrayList。</p><p>作为高级语言编程者，是不是数组就无用武之地了呢？当然不是，有些时候，用数组会更合适些，我总结了几点自己的经验。<br>1.Java+ArrayList 无法存储基本类型，比如 int、long，需要封装为 Integer、Long 类，而 Autoboxing、Unboxing 则有一定的性能消耗，所以如果特别关注性能，或者希望使用基本类型，就可以选用数组。<br>2.如果数据大小事先已知，并且对数据的操作非常简单，用不到 ArrayList 提供的大部分方法，也可以直接使用数组。<br>3.还有一个是我个人的喜好，当要表示多维数组时，用数组往往会更加直观。比如 Object[][] array；而用容器的话则需要这样定义：ArrayList+array。<br>对于业务开发，直接使用容器就足够了，省时省力。毕竟损耗一丢丢性能，完全不会影响到系统整体的性能。但如果你是做一些非常底层的开发，比如开发网络框架，性能的优化需要做到极致，这个时候数组就会优于容器，成为首选。</p><h3 id="3-3-9-二维数组"><a href="#3-3-9-二维数组" class="headerlink" title="3.3.9. 二维数组"></a>3.3.9. 二维数组</h3><p>剑指 Offer 04. 二维数组中的查找<br>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个高效的函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">findNumberIn2DArray</span><span class="params">(<span class="keyword">int</span>[][] matrix, <span class="keyword">int</span> target)</span> </span>{</span><br><span class="line">          <span class="comment">// 输入条件判断  </span></span><br><span class="line">        <span class="keyword">if</span> (matrix == <span class="keyword">null</span> || matrix.length &lt; <span class="number">1</span> || matrix[<span class="number">0</span>].length &lt; <span class="number">1</span>) {  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">        }  </span><br><span class="line">        <span class="keyword">int</span> rows = matrix.length; <span class="comment">// 数组的行数</span></span><br><span class="line">        <span class="keyword">int</span> cols = matrix[<span class="number">0</span>].length; <span class="comment">// 数组行的列数</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> row = <span class="number">0</span>; <span class="comment">// 起始开始的行号</span></span><br><span class="line">        <span class="keyword">int</span> col = cols - <span class="number">1</span>; <span class="comment">// 起始开始的列号</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (row &gt;= <span class="number">0</span> &amp;&amp; row &lt; rows &amp;&amp; col &gt;= <span class="number">0</span> &amp;&amp; col &lt; cols) {</span><br><span class="line">            <span class="keyword">if</span>(matrix[row][col]==target){</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(matrix[row][col]&gt;target){</span><br><span class="line">                <span class="comment">//大于目标值说明，目标值在左边，列号减一</span></span><br><span class="line">                col--;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="comment">//小于目标值说明，目标值在下边，行号加一</span></span><br><span class="line">                row++;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">        }<span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">    </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-4-栈"><a href="#3-4-栈" class="headerlink" title="3.4. 栈"></a>3.4. 栈</h2><p>栈：LIFO（后进先出），自己实现一个栈，要求这个栈具有入栈push()、pop()（返回栈顶元素并出栈）、peek() （返回栈顶元素不出栈）、isEmpty()这些基本的方法。<br>栈是一种比较简单的数据结构，常用一句话描述其特性，后进先出。栈本身是一个线性表，但是在这个表中只有一个口子允许数据的进出。这种模式可以参考腔肠动物…即进食和排泄都用一个口…</p><p>栈的常用操作包括入栈push和出栈pop，对应于数据的压入和压出。还有访问栈顶数据、判断栈是否为空和判断栈的大小等。由于栈后进先出的特性，常可以作为数据操作的临时容器，对数据的顺序进行调控，与其它数据结构相结合可获得许多灵活的处理。</p><h2 id="3-5-队列"><a href="#3-5-队列" class="headerlink" title="3.5. 队列"></a>3.5. 队列</h2><p>队列是栈的兄弟结构，与栈的后进先出相对应，队列是一种先进先出的数据结构。顾名思义，队列的数据存储是如同排队一般，先存入的数据先被压出。常与栈一同配合，可发挥最大的实力。</p><h1 id="4-链式存储结构"><a href="#4-链式存储结构" class="headerlink" title="4. 链式存储结构"></a>4. 链式存储结构</h1><p>把数据元素存放在任意的存储单元中，这组存储单元可以是连续的，也可以是不连续的。此时数据元素之间并不能反映元素间的逻辑关系，因此在链式存储结构中引入一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置</p><p><a href="https://www.yiibai.com/python/py_data_structure/python_data_structure_introduction.html">Python数据结构</a></p><h2 id="4-1-链表"><a href="#4-1-链表" class="headerlink" title="4.1. 链表"></a>4.1. 链表</h2><p>链表适合插入、删除，时间复杂度O(1)<br>链表: 每个数据元素都包含一个指向另一个元素的链接及其中的数据</p><p>链表相较于数组，除了数据域，还增加了指针域用于构建链式的存储数据。链表中每一个节点都包含此节点的数据和指向下一节点地址的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。</p><p>这表现在对节点进行增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点。不过事物皆有两极，指针带来高自由度的同时，自然会牺牲数据查找的效率和多余空间的使用。</p><p>一般常见的是有头有尾的单链表，对指针域进行反向链接，还可以形成双向链表或者循环链表。</p><p>链表和数组对比<br>链表和数组在实际的使用过程中需要根据自身的优劣势进行选择。链表和数组的异同点也是面试中高频的考察点之一。这里对单链表和数组的区别进行了对比和总结。</p><h3 id="4-1-1-单链表"><a href="#4-1-1-单链表" class="headerlink" title="4.1.1. 单链表"></a>4.1.1. 单链表</h3><p>链表是一种通过指针串联在一起的线性结构，每一个节点由两部分组成，一个是数据域一个是指针域（存放指向下一个节点的指针），</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个单链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> val;</span><br><span class="line">    <span class="keyword">public</span> ListNode next;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">()</span> </span>{</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> val, ListNode next)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建结点(注意要创建尾节点)</span></span><br><span class="line">ListNode l4 = <span class="keyword">new</span> ListNode(<span class="number">3</span>, <span class="keyword">null</span>);</span><br><span class="line">ListNode l3 = <span class="keyword">new</span> ListNode(<span class="number">4</span>, l4);</span><br><span class="line">ListNode l2 = <span class="keyword">new</span> ListNode(<span class="number">5</span>, l3);</span><br><span class="line">ListNode l1 = <span class="keyword">new</span> ListNode(<span class="number">5</span>, l2);</span><br></pre></td></tr></tbody></table></figure><p>==结点==：链表通过指针将一组零散的内存块串联在一起。其中，我们把内存块称为链表的“结点”。为了将所有的结点串起来，每个链表的结点除了存储数据之外，还需要记录链上的下一个结点的地址。</p><ul><li>头结点:用来记录链表的基地址。有了它，我们就可以遍历得到整条链表。</li><li>尾结点特殊的地方是：指针不是指向下一个结点，而是指向一个空地址 NULL，表示这是链表上最后一个结点。tail = null;</li><li>结点值:node.val</li></ul><p>==指针==： C 语言，Java、Python中叫“引用”，它们都是存储所指对象的内存地址。<br><code>p-&gt;next=q  //p 结点中的 next 指针存储了 q 结点的内存地址。</code></p><ul><li>后继指针:记录下个结点地址的指针叫作后继指针 node.next</li></ul><h4 id="4-1-1-1-单链表插入和删除数据"><a href="#4-1-1-1-单链表插入和删除数据" class="headerlink" title="4.1.1.1. 单链表插入和删除数据"></a>4.1.1.1. 单链表插入和删除数据</h4><p>在进行数组的插入、删除操作时，为了保持内存数据的连续性，需要做大量的数据搬移，所以时间复杂度是 O(n)。而在链表中插入或者删除一个数据，我们并不需要为了保持内存的连续性而搬移结点，因为链表的存储空间本身就不是连续的。所以，在链表中插入和删除一个数据是非常快速的。</p><p>针对链表的插入和删除操作，我们只需要考虑相邻结点的指针改变，所以对应的时间复杂度是 O(1)。</p><p>结点p后面插入一个新的结点</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_node-&gt;next = p-&gt;next;</span><br><span class="line">p-&gt;next = new_node;</span><br></pre></td></tr></tbody></table></figure><p>向一个空链表中插入第一个结点,，对于单链表的插入操作，第一个结点和其他结点的插入逻辑是不一样的</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(head==null){</span><br><span class="line">    head=new_node;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>单链表结点删除操作。如果要删除结点 p 的后继结点，<code>p-&gt;next=p-&gt;next-&gt;next</code></p><p>删除链表中的最后一个结点</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (head-&gt;next == null) {</span><br><span class="line">   head = null;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="求链表长度"><a href="#求链表长度" class="headerlink" title="求链表长度"></a>求链表长度</h4><p>没有直接获取链表长度的方法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个int值 length ，用来记录遍历的次数，最后返回它。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span> </span>{</span><br><span class="line">ListNode indexNode = head;</span><br><span class="line"><span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(indexNode != <span class="keyword">null</span>) {</span><br><span class="line">length++;</span><br><span class="line">indexNode = indexNode.getNext();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> length;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="4-1-1-2-带头链表"><a href="#4-1-1-2-带头链表" class="headerlink" title="4.1.1.2. 带头链表"></a>4.1.1.2. 带头链表</h4><p>针对链表的插入、删除操作，需要对插入第一个结点和删除最后一个结点的情况进行特殊处理。这样代码实现起来就会很繁琐，不简洁，而且也容易因为考虑不全而出错。如何来解决这个问题呢？<br>还记得如何表示一个空链表吗？head=null 表示链表中没有结点了。其中 head 表示头结点指针，指向链表中的第一个结点。</p><p>如果我们引入哨兵结点，在任何时候，不管链表是不是空，head 指针都会一直指向这个哨兵结点。我们也把这种有哨兵结点的链表叫带头链表。相反，没有哨兵结点的链表就叫作不带头链表。<br>画了一个带头链表，你可以发现，哨兵结点是不存储数据的。因为哨兵结点一直存在，所以插入第一个结点和插入其他结点，删除最后一个结点和删除其他结点，都可以统一为相同的代码实现逻辑了。实际上，这种利用哨兵简化编程难度的技巧，在很多代码实现中都有用到，比如插入排序、归并排序、动态规划等</p><h4 id="4-1-1-3-链表随机访问"><a href="#4-1-1-3-链表随机访问" class="headerlink" title="4.1.1.3. 链表随机访问"></a>4.1.1.3. 链表随机访问</h4><p>有利就有弊。链表要想随机访问第k个元素，就没有数组那么高效了。因为链表中的数据并非连续存储的，所以无法像数组那样，根据首地址和下标，通过寻址公式就能直接计算出对应的内存地址，而是需要根据指针一个结点一个结点地依次遍历，直到找到相应的结点。<br>你可以把链表想象成一个队伍，队伍中的每个人都只知道自己后面的人是谁，所以当我们希望知道排在第 k 位的人是谁的时候，我们就需要从第一个人开始，一个一个地往下数。所以，链表随机访问的性能没有数组好，需要 O(n) 的时间复杂度。</p><h3 id="4-1-2-循环链表"><a href="#4-1-2-循环链表" class="headerlink" title="4.1.2. 循环链表"></a>4.1.2. 循环链表</h3><p>循环链表是一种特殊的单链表。实际上，循环链表也很简单。它跟单链表唯一的区别就在尾结点。我们知道，单链表的尾结点指针指向空地址，表示这就是最后的结点了。而循环链表的尾结点指针是指向链表的头结点。从我画的循环链表图中，你应该可以看出来，它像一个环一样首尾相连，所以叫作“循环”链表。</p><p>和单链表相比，循环链表的优点是从链尾到链头比较方便。当要处理的数据具有环型结构特点时，就特别适合采用循环链表。比如著名的约瑟夫问题。尽管用单链表也可以实现，但是用循环链表实现的话，代码就会简洁很多。</p><h3 id="4-1-3-双链表"><a href="#4-1-3-双链表" class="headerlink" title="4.1.3. 双链表"></a>4.1.3. 双链表</h3><p>单链表和循环链表是不是都不难？接下来我们再来看一个稍微复杂的，在实际的软件开发中，也更加常用的链表结构：双向链表。<br>单向链表只有一个方向，结点只有一个后继指针 next 指向后面的结点。而双向链表，顾名思义，它支持两个方向，每个结点不止有一个后继指针 next 指向后面的结点，还有一个前驱指针 prev 指向前面的结点。</p><p>双向链表需要额外的两个空间来存储后继结点和前驱结点的地址。所以，如果存储同样多的数据，双向链表要比单链表占用更多的内存空间。虽然两个指针比较浪费存储空间，但可以支持双向遍历，这样也带来了双向链表操作的灵活性。那相比单链表，双向链表适合解决哪种问题呢？</p><p>从结构上来看，双向链表可以支持O(1)时间复杂度的情况下找到前驱结点，正是这样的特点，也使双向链表在某些情况下的插入、删除等操作都要比单链表简单、高效。</p><h3 id="4-1-4-链表VS数组性能"><a href="#4-1-4-链表VS数组性能" class="headerlink" title="4.1.4. 链表VS数组性能"></a>4.1.4. 链表VS数组性能</h3><p>数组和链表是两种截然不同的内存组织方式。正是因为内存存储的区别，它们插入、删除、随机访问操作的时间复杂度正好相反。<br>不过，数组和链表的对比，并不能局限于时间复杂度。而且，在实际的软件开发中，不能仅仅利用复杂度分析就决定使用哪个数据结构来存储数据。<br>数组简单易用，在实现上使用的是连续的内存空间，可以借助 CPU 的缓存机制，预读数组中的数据，所以访问效率更高。而链表在内存中并不是连续存储，所以对 CPU 缓存不友好，没办法有效预读。<br>数组的缺点是大小固定，一经声明就要占用整块连续内存空间。如果声明的数组过大，系统可能没有足够的连续内存空间分配给它，导致“内存不足（out of memory）”。如果声明的数组过小，则可能出现不够用的情况。这时只能再申请一个更大的内存空间，把原数组拷贝进去，非常费时。链表本身没有大小的限制，天然地支持动态扩容，我觉得这也是它与数组最大的区别。<br>你可能会说，我们 Java 中的ArrayList容器，也可以支持动态扩容啊？我们上一节课讲过，当我们往支持动态扩容的数组中插入一个数据时，如果数组中没有空闲空间了，就会申请一个更大的空间，将数据拷贝过去，而数据拷贝的操作是非常耗时的。<br>我举一个稍微极端的例子。如果我们用 ArrayList 存储了了 1GB 大小的数据，这个时候已经没有空闲空间了，当我们再插入数据的时候，ArrayList 会申请一个 1.5GB 大小的存储空间，并且把原来那 1GB 的数据拷贝到新申请的空间上。听起来是不是就很耗时？<br>除此之外，如果你的代码对内存的使用非常苛刻，那数组就更适合你。因为链表中的每个结点都需要消耗额外的存储空间去存储一份指向下一个结点的指针，所以内存消耗会翻倍。而且，对链表进行频繁的插入、删除操作，还会导致频繁的内存申请和释放，容易造成内存碎片，如果是 Java 语言，就有可能会导致频繁的 GC（Garbage Collection，垃圾回收）。<br>所以，在我们实际的开发中，针对不同类型的项目，要根据具体情况，权衡究竟是选择数组还是链表。</p><h3 id="4-1-5-链表实现缓存"><a href="#4-1-5-链表实现缓存" class="headerlink" title="4.1.5. 链表实现缓存"></a>4.1.5. 链表实现缓存</h3><p>现在回过头来看下开篇留给你的思考题。如何基于链表实现+LRU+缓存淘汰算法？+我的思路是这样的：我们维护一个有序单链表，越靠近链表尾部的结点是越早之前访问的。当有一个新的数据被访问时，我们从链表头开始顺序遍历链表。<br>1.如果此数据之前已经被缓存在链表中了，我们遍历得到这个数据对应的结点，并将其从原来的位置删除，然后再插入到链表的头部。<br>2.如果此数据没有在缓存链表中，又可以分为两种情况：<br>如果此时缓存未满，则将此结点直接插入到链表的头部；<br>如果此时缓存已满，则链表尾结点删除，将新的数据结点插入链表的头部。+这样我们就用链表实现了一个+LRU+缓存，是不是很简单？<br>现在我们来看下 m 缓存访问的时间复杂度是多少。因为不管缓存有没有满，我们都需要遍历一遍链表，所以这种基于链表的实现思路，缓存访问的时间复杂度为 O(n)。<br>实际上，我们可以继续优化这个实现思路，比如引入散列表（Hash table）来记录每个数据的位置，将缓存访问的时间复杂度降到 O(1)。因为要涉及我们还没有讲到的数据结构，所以这个优化方案，我现在就不详细说了，等讲到散列表的时候，我会再拿出来讲。</p><h2 id="4-2-哈希表"><a href="#4-2-哈希表" class="headerlink" title="4.2. 哈希表"></a>4.2. 哈希表</h2><p>哈希表是根据关键码的值而直接进行访问的数据结构。<br>其实数组就是一张哈希表。哈希表中关键码就是数组的索引下标，然后通过下标直接访问数组中的元素</p><p>一般哈希表都是用来快速判断一个元素是否出现集合里。</p><h3 id="4-2-1-数组其实就是一个简单哈希表"><a href="#4-2-1-数组其实就是一个简单哈希表" class="headerlink" title="4.2.1. 数组其实就是一个简单哈希表"></a>4.2.1. 数组其实就是一个简单哈希表</h3><p>数组其实就是一个简单哈希表，而且这道题目中字符串只有小写字符，那么就可以定义一个数组，来记录字符串s里字符出现的次数。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个整型数组</span></span><br><span class="line"><span class="comment">// 大小为26,整型数组的动态初始化，每个元素都为0</span></span><br><span class="line"><span class="comment">// 因为字符a到字符z的ASCII也是26个连续的数值。</span></span><br><span class="line"><span class="keyword">int</span>[] record = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br></pre></td></tr></tbody></table></figure><p>因为字符a到字符z的ASCII是26个连续的数值，所以字符a映射为下标0，相应的字符z映射为下标25。<br>再遍历 字符串s的时候，只需要将 s[i] - ‘a’ 所在的元素做+1 操作即可，并不需要记住字符a的ASCII，只要求出一个相对数值就可以了。 这样就将字符串s中字符出现的次数，统计出来了。</p><h1 id="5-非线性数据结构"><a href="#5-非线性数据结构" class="headerlink" title="5. 非线性数据结构"></a>5. 非线性数据结构</h1><p>这些数据结构中没有数据元素的顺序链接。任何一对或一组数据元素都可以相互关联，并且可以在没有严格顺序的情况下进行访问。</p><p>二叉树:它是一个数据结构，每个数据元素可以连接到最多两个其他数据元素，并以一个根节点开始。<br>堆: 这是树形数据结构的特殊情况，其中父节点中的数据严格大于/等于子节点或严格小于其子节点。<br>哈希表: 它是一个数据结构，它由使用散列函数相互关联的数组构成。它使用键而不是数据元素的索引来检索值。<br>图: 它是顶点和节点的排列，其中一些节点通过链接彼此连接。</p><h2 id="5-1-树"><a href="#5-1-树" class="headerlink" title="5.1. 树"></a>5.1. 树</h2><p>树作为一种树状的数据结构，其数据节点之间的关系也如大树一样，将有限个节点根据不同层次关系进行排列，从而形成数据与数据之间的父子关系。常见的数的表示形式更接近“倒挂的树”，因为它将根朝上，叶朝下。</p><p>树的数据存储在结点中，每个结点有零个或者多个子结点。没有父结点的结点在最顶端，成为根节点；没有非根结点有且只有一个父节点；每个非根节点又可以分为多个不相交的子树。</p><p>这意味着树是具备层次关系的，父子关系清晰，家庭血缘关系明朗；这也是树与图之间最主要的区别。</p><p>图片</p><p>别看树好像很高级，其实可看作是链表的高配版。树的实现就是对链表的指针域进行了扩充，增加了多个地址指向子结点。同时将“链表”竖起来，从而凸显了结点之间的层次关系，更便于分析和理解。</p><p>树可以衍生出许多的结构，若将指针域设置为双指针，那么即可形成最常见的二叉树，即每个结点最多有两个子树的树结构。二叉树根据结点的排列和数量还可进一度划分为完全二叉树、满二叉树、平衡二叉树、红黑树等。</p><p>图片</p><p>完全二叉树：除了最后一层结点，其它层的结点数都达到了最大值；同时最后一层的结点都是按照从左到右依次排布。</p><p>满二叉树：除了最后一层，其它层的结点都有两个子结点。</p><p>平衡二叉树<br>平衡二叉树又被称为AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>二叉排序树：是一棵空树，或者：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；它的左、右子树也分别为二叉排序树。</p><p>树的高度：结点层次的最大值</p><p>平衡因子：左子树高度 - 右子树高度</p><p>二叉排序树意味着二叉树中的数据是排好序的，顺序为左结点&lt;根节点&lt;右结点，这表明二叉排序树的中序遍历结果是有序的。（还不懂二叉树四种遍历方式[前序遍历、中序遍历、后序遍历、层序遍历]的同学赶紧补习！）</p><p>图片</p><p>平衡二叉树的产生是为了解决二叉排序树在插入时发生线性排列的现象。由于二叉排序树本身为有序，当插入一个有序程度十分高的序列时，生成的二叉排序树会持续在某个方向的字数上插入数据，导致最终的二叉排序树会退化为链表，从而使得二叉树的查询和插入效率恶化。</p><p>图片</p><p>平衡二叉树的出现能够解决上述问题，但是在构造平衡二叉树时，却需要采用不同的调整方式，使得二叉树在插入数据后保持平衡。主要的四种调整方式有LL（左旋）、RR（右旋）、LR（先左旋再右旋）、RL（先右旋再左旋）。这里先给大家介绍下简单的单旋转操作，左旋和右旋。LR和RL本质上只是LL和RR的组合。</p><p>在插入一个结点后应该沿搜索路径将路径上的结点平衡因子进行修改，当平衡因子大于1时，就需要进行平衡化处理。从发生不平衡的结点起，沿刚才回溯的路径取直接下两层的结点，如果这三个结点在一条直线上，则采用单旋转进行平衡化，如果这三个结点位于一条折线上，则采用双旋转进行平衡化。</p><p>左旋：S为当前需要左旋的结点，E为当前结点的父节点。</p><p>图片</p><p>左旋的操作可以用一句话简单表示：将当前结点S的左孩子旋转为当前结点父结点E的右孩子，同时将父结点E旋转为当前结点S的左孩子。可用动画表示：</p><p>图片</p><p>右旋：S为当前需要左旋的结点，E为当前结点的父节点。右单旋是左单旋的镜像旋转。</p><p>图片</p><p>左旋的操作同样可以用一句话简单表示：将当前结点S的左孩子E的右孩子旋转为当前结点S的左孩子，同时将当前结点S旋转为左孩子E的右孩子。可用动画表示：</p><p>图片</p><p>红黑树<br>平衡二叉树（AVL）为了追求高度平衡，需要通过平衡处理使得左右子树的高度差必须小于等于1。高度平衡带来的好处是能够提供更高的搜索效率，其最坏的查找时间复杂度都是O(logN)。但是由于需要维持这份高度平衡，所付出的代价就是当对树种结点进行插入和删除时，需要经过多次旋转实现复衡。这导致AVL的插入和删除效率并不高。</p><p>为了解决这样的问题，能不能找一种结构能够兼顾搜索和插入删除的效率呢？这时候红黑树便申请出战了。</p><p>红黑树具有五个特性：</p><p>每个结点要么是红的要么是黑的。<br>根结点是黑的。<br>每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。<br>如果一个结点是红的，那么它的两个儿子都是黑的。<br>对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。<br>图片红黑树通过将结点进行红黑着色，使得原本高度平衡的树结构被稍微打乱，平衡程度降低。红黑树不追求完全平衡，只要求达到部分平衡。这是一种折中的方案，大大提高了结点删除和插入的效率。C++中的STL就常用到红黑树作为底层的数据结构。</p><p>红黑树VS平衡二叉树<br>图片</p><p>除了上面所提及的树结构，还有许多广泛应用在数据库、磁盘存储等场景下的树结构。比如B树、B+树等。这里就先不介绍了诶，下次在讲述相关存储原理的时候将会着重介绍。（其实是因为懒）</p><p> 7  堆<br>了解完二叉树，再来理解堆就不是什么难事了。堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。</p><p>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1，2n+2，因此可以直接用数组来表示一个堆。</p><p>不仅如此，堆还有一个性质：堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</p><p>图片</p><p>堆常用来实现优先队列，在面试中经常考的问题都是与排序有关，比如堆排序、topK问题等。由于堆的根节点是序列中最大或者最小值，因而可以在建堆以及重建堆的过程中，筛选出数据序列中的极值，从而达到排序或者挑选topK值的目的。</p><p> 8  散列表<br>散列表也叫哈希表，是一种通过键值对直接访问数据的机构。在初中，我们就学过一种能够将一个x值通过一个函数获得对应的一个y值的操作，叫做映射。散列表的实现原理正是映射的原理，通过设定的一个关键字和一个映射函数，就可以直接获得访问数据的地址，实现O(1)的数据访问效率。在映射的过程中，事先设定的函数就是一个映射表，也可以称作散列函数或者哈希函数。</p><p>图片</p><p>散列表的实现最关键的就是散列函数的定义和选择。一般常用的有以下几种散列函数：</p><p>直接寻址法：取关键字或关键字的某个线性函数值为散列地址。</p><p>数字分析法：通过对数据的分析，发现数据中冲突较少的部分，并构造散列地址。例如同学们的学号，通常同一届学生的学号，其中前面的部分差别不太大，所以用后面的部分来构造散列地址。</p><p>平方取中法：当无法确定关键字里哪几位的分布相对比较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为散列地址。这是因为：计算平方之后的中间几位和关键字中的每一位都相关，所以不同的关键字会以较高的概率产生不同的散列地址。</p><p>取随机数法：使用一个随机函数，取关键字的随机值作为散列地址，这种方式通常用于关键字长度不同的场合。</p><p>除留取余法：取关键字被某个不大于散列表的表长 n 的数 m 除后所得的余数 p 为散列地址。这种方式也可以在用过其他方法后再使用。该函数对 m 的选择很重要，一般取素数或者直接用 n。</p><p>确定好散列函数之后，通过某个key值的确会得到一个唯一的value地址。但是却会出现一些特殊情况。即通过不同的key值可能会访问到同一个地址，这个现象称之为冲突。</p><p>冲突在发生之后，当在对不同的key值进行操作时会使得造成相同地址的数据发生覆盖或者丢失，是非常危险的。所以在设计散列表往往还需要采用冲突解决的办法。</p><p>常用的冲突处理方式有很多，常用的包括以下几种：</p><p>开放地址法（也叫开放寻址法）：实际上就是当需要存储值时，对Key哈希之后，发现这个地址已经有值了，这时该怎么办？不能放在这个地址，不然之前的映射会被覆盖。这时对计算出来的地址进行一个探测再哈希，比如往后移动一个地址，如果没人占用，就用这个地址。如果超过最大长度，则可以对总长度取余。这里移动的地址是产生冲突时的增列序量。</p><p>再哈希法：在产生冲突之后，使用关键字的其他部分继续计算地址，如果还是有冲突，则继续使用其他部分再计算地址。这种方式的缺点是时间增加了。</p><p>链地址法：链地址法其实就是对Key通过哈希之后落在同一个地址上的值，做一个链表。其实在很多高级语言的实现当中，也是使用这种方式处理冲突的。</p><p>公共溢出区：这种方式是建立一个公共溢出区，当地址存在冲突时，把新的地址放在公共溢出区里。</p><p>目前比较常用的冲突解决方法是链地址法，一般可以通过数组和链表的结合达到冲突数据缓存的目的。</p><p>图片</p><p>左侧数组的每个成员包括一个指针，指向一个链表的头。每发生一个冲突的数据，就将该数据作为链表的节点链接到链表尾部。这样一来，就可以保证冲突的数据能够区分并顺利访问。<br>考虑到链表过长造成的问题，还可以使用红黑树替换链表进行冲突数据的处理操作，来提高散列表的查询稳定性。</p><p> 9  图<br>图相较于上文的几个结构可能接触的不多，但是在实际的应用场景中却经常出现。比方说交通中的线路图，常见的思维导图都可以看作是图的具体表现形式。</p><p>图结构一般包括顶点和边，顶点通常用圆圈来表示，边就是这些圆圈之间的连线。边还可以根据顶点之间的关系设置不同的权重，默认权重相同皆为1。此外根据边的方向性，还可将图分为有向图和无向图。</p><p>图片</p><p>图结构用抽象的图线来表示十分简单，顶点和边之间的关系非常清晰明了。但是在具体的代码实现中，为了将各个顶点和边的关系存储下来，却不是一件易事。</p><p>邻接矩阵<br>目前常用的图存储方式为邻接矩阵，通过所有顶点的二维矩阵来存储两个顶点之间是否相连，或者存储两顶点间的边权重。</p><p>图片</p><p>无向图的邻接矩阵是一个对称矩阵，是因为边不具有方向性，若能从此顶点能够到达彼顶点，那么彼顶点自然也能够达到此顶点。此外，由于顶点本身与本身相连没有意义，所以在邻接矩阵中对角线上皆为0。</p><p>图片</p><p>有向图由于边具有方向性，因此彼此顶点之间并不能相互达到，所以其邻接矩阵的对称性不再。<br>用邻接矩阵可以直接从二维关系中获得任意两个顶点的关系，可直接判断是否相连。但是在对矩阵进行存储时，却需要完整的一个二维数组。若图中顶点数过多，会导致二维数组的大小剧增，从而占用大量的内存空间。</p><p>而根据实际情况可以分析得，图中的顶点并不是任意两个顶点间都会相连，不是都需要对其边上权重进行存储。那么存储的邻接矩阵实际上会存在大量的0。虽然可以通过稀疏表示等方式对稀疏性高的矩阵进行关键信息的存储，但是却增加了图存储的复杂性。</p><p>因此，为了解决上述问题，一种可以只存储相连顶点关系的邻接表应运而生。</p><p>邻接表<br>在邻接表中，图的每一个顶点都是一个链表的头节点，其后连接着该顶点能够直接达到的相邻顶点。相较于无向图，有向图的情况更为复杂，因此这里采用有向图进行实例分析。</p><p>图片在邻接表中，每一个顶点都对应着一条链表，链表中存储的是顶点能够达到的相邻顶点。存储的顺序可以按照顶点的编号顺序进行。比如上图中对于顶点B来说，其通过有向边可以到达顶点A和顶点E，那么其对应的邻接表中的顺序即B-&gt;A-&gt;E，其它顶点亦如此。</p><p>通过邻接表可以获得从某个顶点出发能够到达的顶点，从而省去了对不相连顶点的存储空间。然而，这还不够。对于有向图而言，图中有效信息除了从顶点“指出去”的信息，还包括从别的顶点“指进来”的信息。这里的“指出去”和“指进来”可以用出度和入度来表示。</p><p>入度：有向图的某个顶点作为终点的次数和。</p><p>出度：有向图的某个顶点作为起点的次数和。</p><p>由此看出，在对有向图进行表示时，邻接表只能求出图的出度，而无法求出入度。这个问题很好解决，那就是增加一个表用来存储能够到达某个顶点的相邻顶点。这个表称作逆邻接表。</p><p>逆邻接表<br>逆邻接表与邻接表结构类似，只不过图的顶点链接着能够到达该顶点的相邻顶点。也就是说，邻接表时顺着图中的箭头寻找相邻顶点，而逆邻接表时逆着图中的箭头寻找相邻顶点。</p><p>图片</p><p>邻接表和逆邻接表的共同使用下，就能够把一个完整的有向图结构进行表示。可以发现，邻接表和逆邻接表实际上有一部分数据时重合的，因此可以将两个表合二为一，从而得到了所谓的十字链表。</p><p>十字链表<br>十字链表似乎很简单，只需要通过相同的顶点分别链向以该顶点为终点和起点的相邻顶点即可。</p><p>图片</p><p>但这并不是最优的表示方式。虽然这样的方式共用了中间的顶点存储空间，但是邻接表和逆邻接表的链表节点中重复出现的顶点并没有得到重复利用，反而是进行了再次存储。因此，上图的表示方式还可以进行进一步优化。</p><p>十字链表优化后，可通过扩展的顶点结构和边结构来进行正逆邻接表的存储：（下面的弧头可看作是边的箭头那端，弧尾可看作是边的圆点那端）</p><p>data：用于存储该顶点中的数据；</p><p>firstin指针：用于连接以当前顶点为弧头的其他顶点构成的链表，即从别的顶点指进来的顶点；</p><p>firstout指针：用于连接以当前顶点为弧尾的其他顶点构成的链表，即从该顶点指出去的顶点；</p><p>边结构通过存储两个顶点来确定一条边，同时通过分别代表这两个顶点的指针来与相邻顶点进行链接：</p><p>tailvex：用于存储作为弧尾的顶点的编号；</p><p>headvex：用于存储作为弧头的顶点的编号；</p><p>headlink 指针：用于链接下一个存储作为弧头的顶点的节点；</p><p>taillink 指针：用于链接下一个存储作为弧尾的顶点的节点；</p><p>图片</p><p>以上图为例子，对于顶点A而言，其作为起点能够到达顶点E。因此在邻接表中顶点A要通过边AE（即边04）指向顶点E，顶点A的firstout指针需要指向边04的tailvex。同时，从B出发能够到达A，所以在逆邻接表中顶点A要通过边AB（即边10）指向B，顶点A的firstin指针需要指向边10的弧头，即headlink指针。依次类推。</p><p>十字链表采用了一种看起来比较繁乱的方式对边的方向性进行了表示，能够在尽可能降低存储空间的情况下增加指针保留顶点之间的方向性。具体的操作可能一时间不好弄懂，建议多看几次上图，弄清指针指向的意义，明白正向和逆向邻接表的表示。</p><p> 10  总结<br>数据结构博大精深，没有高等数学的讳莫如深，也没有量子力学的玄乎其神，但是其在计算机科学的各个领域都具有强大的力量。本文试图采用图解的方式对九种数据结构进行理论上的介绍，但是其实这都是不够的。</p><p>即便是简单的数组、栈、队列等结构，在实际使用以及底层实现上都会有许多优化设计以及使用技巧，这意味着还需要真正把它们灵活的用起来，才能够算是真正意义上的熟悉和精通。但是本文可以作为常见数据结构的一个总结，当你对某些结构有些淡忘的时候，不妨重新回来看看。</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构与算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>window使用</title>
      <link href="/2022/012246677.html"/>
      <url>/2022/012246677.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-window包管理器"><a href="#1-window包管理器" class="headerlink" title="1. window包管理器"></a>1. window包管理器</h1><p>都不好用</p><h2 id="1-1-winget"><a href="#1-1-winget" class="headerlink" title="1.1. winget"></a>1.1. winget</h2><h2 id="1-2-Chocolatey"><a href="#1-2-Chocolatey" class="headerlink" title="1.2. Chocolatey"></a>1.2. Chocolatey</h2><p><a href="https://docs.chocolatey.org/en-us/">官方文档</a></p><h3 id="1-2-1-安装"><a href="#1-2-1-安装" class="headerlink" title="1.2.1. 安装"></a>1.2.1. 安装</h3><p>用管理员的身份去运行cmd</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 官网命令</span></span><br><span class="line">Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>变量名：ChocolateyInstall<br>原来 C:\ProgramData\chocolatey<br>修改 D:\ruanjian\chocolatey</p><p>环境变量<br>原来  C:\ProgramData\chocolatey\bin<br>修改%ChocolateyInstall\bin</p><p>目前还是不能更改choco下载位置</p><h3 id="1-2-2-使用"><a href="#1-2-2-使用" class="headerlink" title="1.2.2. 使用"></a>1.2.2. 使用</h3><p>–install-directory =”D:\ruanjian”</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">choco search &lt;keyword&gt;    搜索软件</span><br><span class="line">choco list &lt;keyword&gt;  跟 search 命令功能类似</span><br><span class="line">choco install &lt;package1 package2 package3...&gt;  安装软件</span><br><span class="line">choco install &lt;package&gt;  -version *** 安装指定版本</span><br><span class="line">choco  uninstall name 卸载软件</span><br><span class="line">choco version &lt;package&gt;  查看安装包的版本情况</span><br><span class="line">choco  upgrade &lt;package&gt;   更新某个软件 </span><br><span class="line">choco list -localonly        查看一下所有安装在本地的包的列表</span><br><span class="line">choco list -lo       功能同上</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装ChocolateyGUI图形化的界面</span></span><br><span class="line">choco install chocolateygui #安装之后输入 chocolateygui 打开图形界面安装你想安装的软件即可</span><br><span class="line">choco upgrade chocolatey</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choco -h                       # 查看帮助</span><br><span class="line">choco &lt;command&gt; -h             #查看相应命令的帮助</span><br><span class="line">choco install &lt;package name&gt;   #安装软件包</span><br><span class="line">choco search &lt;keyword&gt;         #搜索软件包，会列出跟关键字相关的所有软件包</span><br><span class="line">choco upgrade &lt;package name&gt;   #升级软件包</span><br><span class="line">choco uninstall &lt;package name&gt; #卸载软件包</span><br><span class="line">choco list --local-only        #查看本地安装的软件包</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">choco list -l &gt; D://chocolatey.txt  #软件列表备份</span><br></pre></td></tr></tbody></table></figure><h2 id="1-3-Scoop"><a href="#1-3-Scoop" class="headerlink" title="1.3. Scoop"></a>1.3. Scoop</h2><p>强大的 Windows 包管理工具 Scoop<br>Scoop 可以帮你一行命令安装 git 工具、java 环境、chrome 浏览器、vscode 等等，统一目录管理，而且自动配置环境变量，卸载也只需要一行命令<br>设置安装路径（可选）。默认 Scoop 是安装在 C 盘的，以及通过 Scoop 安装的软件也是在 C 盘的。如果你的 C 盘空间不够或想安装到其他盘，可以执行以下操作。<br>Scoop 默认安装位置C:\User\Your Username\scoop，如果想要更改安装位置，比如D:\Scoop，可以在安装之前，先运行：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 设置 scoop 安装路径为 D:\scoop</span></span><br><span class="line"><span class="meta">$</span><span class="bash">env:SCOOP=<span class="string">'D:\scoop'</span>[Environment]::setEnvironmentVariable(<span class="string">'SCOOP'</span>,<span class="variable">$env</span>:SCOOP,<span class="string">'User'</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>安装 Scoop</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将执行权限改为本地无需签名</span><br><span class="line">Set-ExecutionPolicy RemoteSigned -scope CurrentUser</span><br><span class="line"># 下载并执行脚本</span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br></pre></td></tr></tbody></table></figure><p>scoop export &gt; scoop.txt  #导出软件列表</p><h1 id="2-输入法"><a href="#2-输入法" class="headerlink" title="2. 输入法"></a>2. 输入法</h1><h2 id="2-1-不认识的汉字怎么打"><a href="#2-1-不认识的汉字怎么打" class="headerlink" title="2.1. 不认识的汉字怎么打"></a>2.1. 不认识的汉字怎么打</h2><p>u+汉字各部分的拼音</p><h1 id="3-扩展屏幕"><a href="#3-扩展屏幕" class="headerlink" title="3. 扩展屏幕"></a>3. 扩展屏幕</h1><p>如何在笔记本盖上盖子时，扩展显示屏也能显示。<br>在设置中搜索打开控制面板，然后找到电源选项打开，找到选择关闭笔记本计算机盖的功能</p><h1 id="4-文件无法删除"><a href="#4-文件无法删除" class="headerlink" title="4. 文件无法删除"></a>4. 文件无法删除</h1><p>解决Windows10中“其中文件夹或文件已在另一程序中打开”引起的文件删不掉问题</p><h2 id="4-1-打开任务管理器"><a href="#4-1-打开任务管理器" class="headerlink" title="4.1. 打开任务管理器"></a>4.1. 打开任务管理器</h2><h2 id="4-2-打开资源监视器"><a href="#4-2-打开资源监视器" class="headerlink" title="4.2. 打开资源监视器"></a>4.2. 打开资源监视器</h2><p>1.切换任务管理器到“性能”选项页，点击最下方的“打开资源监视器”字。<br><img src="https://gitee.com/wenkex/blogimage/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220104192240.png"><br>2.搜索与该文件关联的程序并关闭</p><p>以删除word文件“文件123.docx”为例：删除桌面上“文件123.docx”文件，显示该文件已被其他程序打开，暂时无法删除。</p><p>此时在资源监视器搜索句柄处填上文件123，即可搜索与这个文件相关联的应用程序句柄。<br><img src="https://gitee.com/wenkex/blogimage/raw/master/v2-48385ce4a09d453981e9b06b1202065d_r.jpg"><br>点击与文件123相关联的句柄，然后点击鼠标右键，选择结束进程<br>此时会弹出结束进程确认对话框。<br>点击“结束进程”关闭与“文件123.docx”关联的进程。</p><p>怎样关闭Win10安装软件、改变设置时的弹窗？<br>打开更改用户账户设置  </p><p>Windows系统hosts文件路径为：C:\Windows\System32\drivers\etc</p><p>Win10电脑设置定时关机命令：<br>Win +r  输入：shutdown -s -t 3600            一小时后关机</p><p>Win10进入开机自启文件夹<br>Win+r进入运行，输入shell:startup</p><h1 id="5-快捷键汇总"><a href="#5-快捷键汇总" class="headerlink" title="5. 快捷键汇总"></a>5. 快捷键汇总</h1><p>win+上下箭头键：【最大化】【还原】【最小化】当前窗口</p><p>win+左右箭头键：将窗口靠左、靠右。如果有两个窗口则并列</p><p>按住ctrl 可多选文件</p><p>Win+Shift+S 截图、</p><p>Win+g  截图录屏</p><p>在英文输入状态下，按住shift输入字母可以大写</p><p>按住alt双击文件   快速打开属性</p><p>Ctrl+shift+Esc 一键打开任务管理器</p><p>Ctrl +shift+n 快速新建文件夹</p><p>按住ctrl拖动文件 就是复制</p><p>Alt+F4键：关闭当前窗口，如果没有活动窗口就带开【关闭计算机】对话框</p><p>win+A键：快速打开【系统通知和控制中心】</p><p>Win+E键：快速打开【资源管理器】</p><p>win+G键：快速打开【Xbox工具】，这个工具非常实用，包含了截图、录屏等功能</p><p>win+I键：快速打开【计算机设置】</p><p>win+K键：快速打开【无线连接】</p><p>win+L键：快速【锁定屏幕】，如果你要暂时离开电脑，这个快捷键一定要知道</p><p>win+P键：快速打开【投影】，如果你要连接第二块屏幕或投影，这是最快捷的方法</p><p>win+Q键或者win+S键：快速打开【搜索】</p><p>win+R键：快速打开【运行】</p><p>win+T键：在【任务栏程序】中进行切换</p><p>win+V键：快速打开【剪贴板】</p><p>win+W键：快速打开【全屏截图】</p><p>win+X键：打开【系统快捷菜单】，这个菜单继承了巨大部分的系统功能。</p><p>win+数字键：打开【任务栏】上相应顺序的应用程序</p><p>win+加号：启动【放大镜】，加号放大，减号缩小</p><p>win+Tab键：打开【任务视图】，还可以按时间线查看近期任务</p><p>Alt+Tab键：在打开的程序间进行切换，这是笔者最常用的快捷键</p><h2 id="5-1-网页"><a href="#5-1-网页" class="headerlink" title="5.1. 网页"></a>5.1. 网页</h2><p>ctrl + w      关闭一个网页<br>Ctrl + Tab    切换网页<br>Ctrl+h 打开历史记录</p><h1 id="6-远程"><a href="#6-远程" class="headerlink" title="6. 远程"></a>6. 远程</h1><h2 id="6-1-微软自带的远程连接"><a href="#6-1-微软自带的远程连接" class="headerlink" title="6.1. 微软自带的远程连接"></a>6.1. 微软自带的远程连接</h2><p>联想小新pro16<br>win10专业版<br>两台设备都连着校园网，测试时，控制端不能连着电脑的热点。<br>控制端要下载：RDclient<br>成功后，你就可以不用带上你的电脑去机房上课了，直接在机房控制你的电脑，体验感翻倍</p><h3 id="6-1-1-注意"><a href="#6-1-1-注意" class="headerlink" title="6.1.1. 注意"></a>6.1.1. 注意</h3><p>1.window要用微软账号登录<br>2.用户名是自己设置的，可以是中文，打开密码中的更新安全问题选项也可以看到<br>3. 密码是你的账户密码，不是PIN码哦<br>4. 显示屏关闭后，微软远程就连接不上的原因</p><ul><li>联想小新pro16可能是因为开了智能感知功能的原因，因此显示屏关闭或者盖上屏幕，控制端就无法连接上电脑</li></ul><h3 id="6-1-2-快捷键"><a href="#6-1-2-快捷键" class="headerlink" title="6.1.2. 快捷键"></a>6.1.2. 快捷键</h3><p>打开远程桌面，win+r 输入mstsc<br>查询ip地址：win+r进入cmd,输入ipconfig</p><h2 id="6-2-ToDesk"><a href="#6-2-ToDesk" class="headerlink" title="6.2. ToDesk"></a>6.2. ToDesk</h2><p>ToDesk目前还是免费的且支持三台设备，而且界面简洁大气。</p><h2 id="6-3-向日葵"><a href="#6-3-向日葵" class="headerlink" title="6.3. 向日葵"></a>6.3. 向日葵</h2><p>特点<br>1.控制端和被控制端使用同一账号即可<br>2.可以实时查看远程主机摄像头周围的情况<br>3.方便快捷的让远程文件或本地文件互相传输和同步，安全稳定。<br>4.无需内网穿透即可实现外网连接。<br>需求<br>①是在需要被控的电脑上安装被控端;<br>②在手机上安装向日葵主控端<br>③注册一个向日葵账号。在两端同时登录就可以远程控制了。</p><h1 id="7-终端"><a href="#7-终端" class="headerlink" title="7. 终端"></a>7. 终端</h1><p>直接把文件拖到终端即可自动生成路径</p><h2 id="7-1-Windows-Terminal"><a href="#7-1-Windows-Terminal" class="headerlink" title="7.1. Windows Terminal"></a>7.1. Windows Terminal</h2><p>是管理各种命令行的工具，它把目前 Windows 上的 PowerShell、CMD 以及 Windows Linux 子系统（WSL）三大环境实现了统一。</p><h3 id="7-1-1-安装"><a href="#7-1-1-安装" class="headerlink" title="7.1.1. 安装"></a>7.1.1. 安装</h3><p>打开系统自带的 Microsoft Store，搜索 Windows Terminal 直接安装就可以了。</p><h2 id="7-2-PowerShell"><a href="#7-2-PowerShell" class="headerlink" title="7.2. PowerShell"></a>7.2. PowerShell</h2><p>是命令行程序，真正执行指令的程序，</p><h3 id="7-2-1-在-Windows-上安装-PowerShell"><a href="#7-2-1-在-Windows-上安装-PowerShell" class="headerlink" title="7.2.1. 在 Windows 上安装 PowerShell"></a>7.2.1. 在 Windows 上安装 PowerShell</h3><p><a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.1">https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.1</a></p><h3 id="7-2-2-安装-oh-my-posh-和-posh-git"><a href="#7-2-2-安装-oh-my-posh-和-posh-git" class="headerlink" title="7.2.2. 安装 oh-my-posh 和 posh-git"></a>7.2.2. 安装 oh-my-posh 和 posh-git</h3><p>oh-my-posh 是 PowerShell 主题管理工具<br>posh-git 可以实现类似 oh-my-zsh 一样的 Git 命令增强工具（命令别名和显示分支信息等）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git</span><br><span class="line">Install-Module oh-my-posh</span><br></pre></td></tr></tbody></table></figure><h3 id="7-2-3-配置-PowerShell"><a href="#7-2-3-配置-PowerShell" class="headerlink" title="7.2.3. 配置 PowerShell"></a>7.2.3. 配置 PowerShell</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这是开启默认配置的</span><br><span class="line">Set-Prompt</span><br><span class="line"># 设置主题，Agnoster 是主题名</span><br><span class="line">Set-Theme Agnoster</span><br></pre></td></tr></tbody></table></figure><h2 id="7-3-git-bash"><a href="#7-3-git-bash" class="headerlink" title="7.3. git bash"></a>7.3. git bash</h2><p>是Windows下的命令行工具。有git分布式版本控制工具，也主要用于git。</p><p>1 在windows下使用linux命令操作</p><p>2 登陆远程linux服务器&nbsp;ssh</p><h3 id="7-3-1-在window-terminal中添加git-bash"><a href="#7-3-1-在window-terminal中添加git-bash" class="headerlink" title="7.3.1. 在window terminal中添加git bash"></a>7.3.1. 在window terminal中添加git bash</h3><p><a href="https://www.cnblogs.com/cong-wang/p/15026535.html">https://www.cnblogs.com/cong-wang/p/15026535.html</a><br>打开设置文件settings.json，在profiles的list中添加一项：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"guid"</span> : <span class="string">"{5D1F95DF-36E8-56AD-C203-EA75CE06422C}"</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"Git Bash"</span>,</span><br><span class="line">  <span class="attr">"commandline"</span> : <span class="string">"D:\\ruanjian\\Git\\bin\\bash.exe --login -i"</span>,</span><br><span class="line">  <span class="attr">"icon"</span> : <span class="string">"D:\\ruanjian\\Git\\git-bash.png"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>guid：唯一标识本命令行配置，可以使用在线guid工具随机生成一个和list中其他配置不一样的guid即可<br>name：本命令行配置的名字，会显示在菜单中<br>commandline：表示怎么启动一个命令行，这里填的是”E:\Git\bin\bash.exe –login -i”，需要找到你的Git的安装目录，将E:\Git\bin\bash.exe替换成你自己的路径<br>icon：显示在菜单中的图标</p><h1 id="8-沙盒"><a href="#8-沙盒" class="headerlink" title="8. 沙盒"></a>8. 沙盒</h1><p>控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能</p><p>打开沙盒（在开始菜单中）,直接将要运行的程序，不确定安全性的程序复制粘贴进去就行,关机就清空数据了</p><h1 id="9-Window进入开机自启文件夹"><a href="#9-Window进入开机自启文件夹" class="headerlink" title="9. Window进入开机自启文件夹"></a>9. Window进入开机自启文件夹</h1><p>Win+r进入运行，输入shell:startup</p><h1 id="10-联想小新pro16出现问题记录"><a href="#10-联想小新pro16出现问题记录" class="headerlink" title="10. 联想小新pro16出现问题记录"></a>10. 联想小新pro16出现问题记录</h1><p>1.蓝牙问题<br>在开启wifi热点时，再连接蓝牙耳机，声音会断断续续；<br>解决：设置wifi热点为5G频道即可</p><p>2.wifi 问题<br>电脑连接wifi时开的热点，手机已经连上；当你的电脑切换到以太网连接时，wifi热点不可用<br>解决方法，关掉热点，重新开，电脑将识别到以太网，切换到以太网共享网络</p><h1 id="11-环境变量"><a href="#11-环境变量" class="headerlink" title="11. 环境变量"></a>11. 环境变量</h1><p>高级系统设置-环境变量</p><h2 id="11-1-cmd中"><a href="#11-1-cmd中" class="headerlink" title="11.1. cmd中"></a>11.1. cmd中</h2><p>一般设置在系统变量的PATH<br>在cmd中，一般先在当前路径下寻找文件，然后再在PATH中设置的目录中寻找</p><h2 id="11-2-在运行窗口直接进入"><a href="#11-2-在运行窗口直接进入" class="headerlink" title="11.2. 在运行窗口直接进入"></a>11.2. 在运行窗口直接进入</h2><ul><li><p>变量名可以是英文，也可以是中文，但是推荐使用便于记忆的英文字母或者拼音。</p></li><li><p>变量值分为两大类，一是目录，二是具体的文件。<br>利用cmd直接进入程序，</p></li></ul><p>接下来在win+r运行窗口输入【％相应设置的变量名％】即可快速打开刚刚设置好的目录或者是文件。</p><h1 id="适用于Android-的Windows子系统"><a href="#适用于Android-的Windows子系统" class="headerlink" title="适用于Android 的Windows子系统"></a>适用于Android 的Windows子系统</h1><p>设置-时间与地区-更改为美国<br>微软应用商店- Amazon Appstore<br>下载]<a href="https://github.com/alesimula/wsa_pacman/releases">WSA PacMan</a><br>开始菜单搜索适用于Android 的Windows子系统设置-开发人员-打开开发人员模式</p><p>这样就可以双击安装apk文件了</p><h2 id="修改存储位置"><a href="#修改存储位置" class="headerlink" title="修改存储位置"></a>修改存储位置</h2><p>设置-系统-存储-高级存储设置-保存新内容的地方-新的应用保存到<br>设置-应用-应用功能-适用于Android 的Windows子系统-移动位置</p><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="rainmeter桌面美化"><a href="#rainmeter桌面美化" class="headerlink" title="rainmeter桌面美化"></a>rainmeter桌面美化</h2><p>Rainmeter原本是一个系统状态监视软件，由于其强大的可定制性及拓展性，诸多使用者在原来的基础上开发了成百上千的插件程序和皮肤样式，使得现在的Rainmeter几乎成为一款完美的系统美化工具。受到众多美化爱好者的青睐。Rainmeter的皮肤大都走抽象、简洁的设计路线，非常适合作为一款桌面美化软件。现在它的功能已经得到了极大的扩展，rss feeder、邮件监视器等常用功能都能够实现，而低资源占用和简易的设计方式为它赢得了大批用户。</p><p><a href="https://www.rainmeter.net/">rainmeter官网</a></p><p>主题下载<br><a href="https://zhutix.com/tag/rainmeter">https://zhutix.com/tag/rainmeter</a></p><p><a href="https://www.deviantart.com/">https://www.deviantart.com</a> (需404工具)</p><p><a href="https://bbs.rainmeter.cn/">https://bbs.rainmeter.cn</a></p><p><a href="http://rainmeterhub.com/">http://rainmeterhub.com</a></p><p><a href="https://tieba.baidu.com/f">https://tieba.baidu.com/f</a>?</p><p>主题文件<br>C:\Users\wenke\Documents\Rainmeter\Skins\</p><p>卸载皮肤：删除主题文件</p><h1 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h1><h2 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h2><p><a href="https://blog.csdn.net/u014470361/article/details/87209079">https://blog.csdn.net/u014470361/article/details/87209079</a></p><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">::这是行注释</span><br><span class="line"></span><br><span class="line"><span class="keyword">goto</span> xx</span><br><span class="line">这是块注释，xx是你自己命名的函数名</span><br><span class="line">:xx</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight bat"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">::使用的是：UTF-<span class="number">8</span>编码</span><br><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"></span><br><span class="line">::打开C盘</span><br><span class="line">explorer c: </span><br><span class="line">::按下任意键后继续执行</span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> window </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python自动化办公库</title>
      <link href="/2022/012151162.html"/>
      <url>/2022/012151162.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/WYni01nzv2lbG4VK59U0nA">原文</a></p><h1 id="微信自动化库"><a href="#微信自动化库" class="headerlink" title="微信自动化库"></a>微信自动化库</h1><p>wxpy 库<br>官网：<br><a href="https://wxpy.readthedocs.io/zh/latest/">https://wxpy.readthedocs.io/zh/latest/</a></p><p>特点：微信机器人/可能是最优雅的微信个人号API，wxpy 在 itchat 的基础上，通过大量接口优化提升了模块的易用性，并进行丰富的功能扩展。<br>Excel自动化库</p><p>//  1.xlwings 库<br>官网：<br><a href="https://www.xlwings.org/">https://www.xlwings.org/</a></p><p>特点：xlwings 是开源且免费的，预装了 Anaconda 和 WinPython，可在 Windows 和 macOS 上运行。通过 Python 脚本或 Jupyter notebook 自动化 Excel，通过宏从 Excel 调用 Python，并编写用户定义的函数（UDF 仅适用于 Windows）</p><p>//  2.openpyxl 库<br>官网：<br><a href="https://openpyxl.readthedocs.io/">https://openpyxl.readthedocs.io</a></p><p>特点：openpyxl 是一个用于读取 / 编写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的 Python 库。它是由于缺乏从 Python 中读取 / 编写 Office Open XML 格式的现有库而诞生的。</p><p>//  3.xlrd 库<br>官网：<br><a href="https://pypi.python.org/pypi/xlrd">https://pypi.python.org/pypi/xlrd</a></p><p>特点：在 python 中，xlrd 库是一个很常用的读取 excel 文件的库，其对 excel 文件的读取可以实现比较精细的控制。</p><p>//  4.xlwt 库<br>官网：<br><a href="https://pypi.org/project/xlwt/">https://pypi.org/project/xlwt/</a></p><p>特点：类比于 xlrd 的 reader，那么 xlwt 就相对于 writer，而且很纯正的一点就是它只能对 Excel 进行写操作。xlwt 和 xlrd 不光名字像，连很多函数和操作格式也是完全相同。</p><p>//  5.xlutils 库<br>官网：<br><a href="https://pypi.org/project/xlutils/">https://pypi.org/project/xlutils/</a></p><p>特点：xlutils（excel utilities）是一个提供了许多操作修改 excel 文件方法的库。xlutils 库也仅仅是通过复制一个副本进行操作后保存一个新文件，xlutils 库就像是 xlrd 库和 xlwt 库之间的一座桥梁，因此，xlutils 库是依赖于 xlrd 和 xlwt 两个库的。</p><p>//  6.xlsxwriter 库<br>官网：<br><a href="https://xlsxwriter.readthedocs.io/">https://xlsxwriter.readthedocs.io/</a></p><p>特点：xlsxwriter 是用于创建 Excel XLSX 文件的 Python 模块，可用于将文本、数字、公式和超链接写入 Excel2007 + XLSX 文件中的多个工作表。它支持格式化等功能。可以说除了 Excel 本身，就属这个功能最齐全了。</p><p>//  7.pandas 库<br>官网：<br><a href="https://www.pypandas.cn/docs/">https://www.pypandas.cn/docs/</a></p><p>特点：pandas 是基于 NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。</p><p>//  8.Marmir 库<br>官网：<br><a href="https://github.com/brianray/mm">https://github.com/brianray/mm</a></p><p>特点：Marmir 采用 Python 数据结构并将其转换为电子表格。它是类固醇上的 xlwt 和 google 电子表格。目标是使用最少的配置轻松生成多种类型的有用表文件。</p><p>Python</p><p>Word自动化库</p><p>//  9.python-docx 库<br>官网：<br><a href="https://python-docx.readthedocs.io/en/latest/">https://python-docx.readthedocs.io/en/latest/</a></p><p>特点：python-docx 是一个用于创建和更新 Microsoft Word (.docx) 文件的 Python 库。快速开始、处理文档、处理文本、使用截面、使用页眉和页脚、API基础理、解样式、使用样式理解图片和其他形状。只对 windows 平台有效。</p><p>//  10.textract 库<br>官网：<br><a href="https://gitee.com/mirrors/textract">https://gitee.com/mirrors/textract</a></p><p>特点：它同时兼顾 “doc” 和 “docx”，但安装过程需要一些依赖。你可以批量的用 python 生成 word 文件，推荐使用 docx，不需要会太多。</p><p>Python</p><p>PPT自动化库</p><p>//  11.python-pptx 库<br>官网：<br><a href="https://python-pptx.readthedocs.io/">https://python-pptx.readthedocs.io</a></p><p>特点：python-pptx 是一个用于创建和更新 PowerPoint (.pptx) 文件的 Python 库。典型用途是从数据库内容生成自定义 PowerPoint 演示文稿，可通过单击 Web 应用程序中的链接下载。</p><p>Python</p><p>ODF自动化库</p><p>//  12.Relatorio 库<br>官网：<br><a href="https://pypi.org/project/relatorio/">https://pypi.org/project/relatorio/</a></p><p>特点：Relatorio 是一个模板库，它提供了一种轻松输出多种文件（odt、ods、png、svg 等）的方法。通过为它们创建插件可以轻松添加对更多文件类型的支持。Relatorio 还提供了一个报告存储库，允许您将 python 对象和报告链接在一起，按 mimetype/name/python 对象查找报告。ODF：开放文档格式（外文名：OpenDocument Format，外语简称：ODF）是一种规范，基于 XML（标准通用标记语言的子集）的文件格式，因应试算表、图表、演示稿和文字处理文件等电子文件而设置。</p><p>Python</p><p>PDF自动化库</p><p>//  13.PyPDF2 库<br>官网：<br><a href="https://github.com/mstamy2/PyPDF2">https://github.com/mstamy2/PyPDF2</a></p><p>特点：PyPDF2 是一个纯 Python PDF 库，能够拆分、合并、裁剪和转换 PDF 文件的页面。它还可以向 PDF 文件添加自定义数据、查看选项和密码。它可以从 PDF 中检索文本和元数据，也可以将整个文件合并在一起。</p><p>//  14.ReportLab 库<br>官网：<br><a href="https://www.reportlab.com/opensource/">https://www.reportlab.com/opensource/</a></p><p>特点：ReportLab 是久经考验、超强大的开源引擎，用于创建复杂的、数据驱动的 PDF 文档和自定义矢量图形。它是免费的、开源的，并且是用 Python 编写的。</p><p>//  15.PDFminer 库<br>官网：<br><a href="https://github.com/euske/pdfminer">https://github.com/euske/pdfminer</a></p><p>特点：PDFMiner 是一款用于 PDF 文档的文本提取工具。</p><p>Python</p><p>邮件自动化库</p><p>//  16.Django Celery SES 库<br>官网：<br><a href="https://github.com/StreetVoice/django-celery-ses">https://github.com/StreetVoice/django-celery-ses</a></p><p>特点：这个包提供了一个 EmailBackend 来利用 django-celery 发送电子邮件。您可以将 EmailBackend 插入您的项目中，而无需对代码进行任何修改。</p><p>//  17.Envelopes 库<br>官网：<br><a href="http://tomekwojcik.github.io/envelopes/">http://tomekwojcik.github.io/envelopes/</a></p><p>特点：Envelopes 是 Python 的电子邮件和 smtplib 模块的包装器。它旨在使在 Python 中处理外发电子邮件变得简单而有趣。</p><p>//  18.Flanker 库<br>官网：<br><a href="https://github.com/mailgun/flanker">https://github.com/mailgun/flanker</a></p><p>特点：由 mailgun 开源的 Flanker - email address and MIME parsing for Python 是一个解析高效、容错率不错的 python 第三方扩展库。python 3 也可以正常使用，该库包含了邮件地址解析和邮件 mime 格式解析。</p><p>//  19.imbox 库<br>官网：<br><a href="https://github.com/martinrusev/imbox">https://github.com/martinrusev/imbox</a></p><p>特点：用于读取 IMAP 邮箱并将电子邮件内容转换为机器可读数据的 Python 库</p><p>//  20.inbox.py 库<br>官网：<br><a href="https://github.com/billzhong/inbox.py">https://github.com/billzhong/inbox.py</a></p><p>特点：这是您见过的最简单的 SMTP 服务器。它是异步的。一个实例每秒应该处理一千多封电子邮件。</p><p>//  21.sync-engine 库<br>官网：<br><a href="https://github.com/nylas/sync-engine">https://github.com/nylas/sync-engine</a></p><p>特点：Nylas 同步引擎在强大的电子邮件同步平台之上提供了一个 RESTful API，可以轻松地在电子邮件之上构建应用程序。</p><p>//  22.Lamson 库<br>官网：<br><a href="https://github.com/zedshaw/lamson">https://github.com/zedshaw/lamson</a></p><p>特点：Lamson 是一个纯 Python SMTP 服务器，旨在以现代 Web 框架（如 Django）的风格创建强大而复杂的邮件应用程序。</p><p>//  23.Marrow Mailer 库<br>官网：<br><a href="https://github.com/marrow/mailer">https://github.com/marrow/mailer</a></p><p>特点：Marrow Mailer 是一个 Python 库，可以轻松地从您的应用程序发送电子邮件。通过使用 Marrow Mailer，您可以：轻松构建纯文本和 HTML 电子邮件；提高电子邮件传递的可测试性；使用不同的邮件投递管理策略；例如立即，延迟，甚至多服务器等。</p><p>//  24.Modoboa 库<br>官网：<br><a href="https://github.com/modoboa/modoboa">https://github.com/modoboa/modoboa</a></p><p>特点：Modoboa 是一个邮件托管和管理平台，包括一个现代和简化的 Web 用户界面。它提供了有用的组件，例如管理面板或网络邮件。</p><p>//  25.smtplib 库<br>官网：<br><a href="https://docs.python.org/zh-cn/3/library/smtplib.html">https://docs.python.org/zh-cn/3/library/smtplib.html</a></p><p>特点：smtplib 模块是 python 中 smtp (简单邮件传输协议) 的客户端实现。我们可以使用 smtplib 模块，轻松的发送电子邮件。</p><p>Python</p><p>文件处理自动化库</p><p>//  27.os 库<br>官网：<br><a href="https://docs.python.org/zh-cn/3/library/os.html?highlight=os#module-os">https://docs.python.org/zh-cn/3/library/os.html?highlight=os#module-os</a></p><p>特点：本模块提供了一种使用与操作系统相关的功能的便捷式途径。如果你只是想读写一个文件，请参阅 open()，如果你想操作文件路径，请参阅 os.path 模块，如果你想读取通过命令行给出的所有文件中的所有行，请参阅 fileinput 模块。为了创建临时文件和目录，请参阅 tempfile 模块，对于高级文件和目录处理，请参阅 shutil 模块。</p><p>Python</p><p>综合功能自动化库</p><p>//  28.win32com 库<br>官网：<br><a href="https://pypi.org/project/pywin32/">https://pypi.org/project/pywin32/</a></p><p>特点：win32com 模块主要为 Python 提供调用 windows 底层组件对 word 、Excel、PPT 等进行操作的功能，只能在 Windows 环境下使用，并且需要安装 office 相关软件才行（WPS 也行）。</p><p>//  29.unoconv 库<br>官网：<br><a href="https://github.com/unoconv/unoconv">https://github.com/unoconv/unoconv</a></p><p>特点：是一个命令行工具，可以将 LibreOffice 可以导入的任何文档格式转换为 LibreOffice 可以导出的任何文档格式。它利用 LibreOffice 的 UNO 绑定进行文档的非交互式转换，也支持 OpenOffice。</p><p>//  30.Tablib 库<br>官网：<br><a href="https://www.osgeo.cn/tablib/">https://www.osgeo.cn/tablib/</a></p><p>特点：Python tablib 模块是第三方模块，主要作用是将数据导出为各种不同的格式，包括 excel，json，html，yaml，csv，tsv 等格式，怎么样，有点心动了吧，当然这个模块使用起来也是超级简单的。</p><p>//  31.SnowNLP 库<br>官网：<br><a href="https://github.com/isnowfy/snownlp">https://github.com/isnowfy/snownlp</a></p><p>特点：SnowNLP 是一个 python 写的类库，可以方便的处理中文文本内容，是受到了 TextBlob 的启发而写的，由于现在大部分的自然语言处理库基本都是针对英文的，于是写了一个方便处理中文的类库，并且和 TextBlob 不同的是，这里没有用 NLTK，所有的算法都是自己实现的，并且自带了一些训练好的字典。注意本程序都是处理的 unicode 编码，所以使用时请自行 decode 成 unicode。</p><p>//  32.TextBlob 库<br>官网：<br><a href="https://textblob.readthedocs.io/">https://textblob.readthedocs.io</a></p><p>特点：TextBlob 是一个用于处理文本数据的 Python（2 和 3）库。它提供了一个简单的 API，用于深入研究常见的自然语言处理 (NLP) 任务，例如词性标注、名词短语提取、情感分析、分类、翻译等。</p><p>//  33.TextGrocery 库<br>官网：<br><a href="https://textgrocery.readthedocs.io/">https://textgrocery.readthedocs.io</a></p><p>特点：TextGrocery 是一个基于 LibLinear 和结巴分词的短文本分类工具，特点是高效易用，同时支持中文和英文语料。</p><p>//  34.NumPy 库<br>官网：<br><a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></p><p>特点：NumPy 是 Python 中科学计算的基础包。它是一个 Python 库，提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各种 API，有包括数学、逻辑、形状操作、排序、选择、输入输出、离散傅立叶变换、基本线性代数，基本统计运算和随机模拟等等。</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法</title>
      <link href="/2022/010947193.html"/>
      <url>/2022/010947193.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="1-markdown常用语法"><a href="#1-markdown常用语法" class="headerlink" title="1. markdown常用语法"></a>1. markdown常用语法</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1. 概述"></a>1.1. 概述</h2><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</p><p>Markdown 是 HTML 的一种简写，在显示时会『解压缩』成 HTML。理论上你可以在 Markdown 里直接插入合法的 HTML 块，他们会成为最终的 HTML 的一部分，做到 Markdown 本身做不到的事。<br>Markdown 的格式可以由 CSS 描述</p><h2 id="1-2-参考文章"><a href="#1-2-参考文章" class="headerlink" title="1.2. 参考文章"></a>1.2. 参考文章</h2><p><a href="https://www.imooc.com/wiki/markdownlesson/markdownoverview.html">慕课教程</a></p><p><a href="https://markdown.com.cn/basic-syntax/">官方文档</a></p><h2 id="1-3-生成目录"><a href="#1-3-生成目录" class="headerlink" title="1.3. 生成目录"></a>1.3. 生成目录</h2><h3 id="1-3-1-自动生成"><a href="#1-3-1-自动生成" class="headerlink" title="1.3.1. 自动生成"></a>1.3.1. 自动生成</h3><p>在 Markdown 中，自动生成目录非常简单，只需要在恰当的位置添加<code>[TOC]</code>符号，凡是以 # 定义的标题都会被编排到目录中。</p><h3 id="1-3-2-手动书写目录"><a href="#1-3-2-手动书写目录" class="headerlink" title="1.3.2. 手动书写目录"></a>1.3.2. 手动书写目录</h3><p>我们也难免有自定义目录的需求，如只显示一二级大标题等。</p><p>手动添加目录的方法就是将「列表」和「页内超链接」相结合。</p><figure class="highlight md"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="bullet">-</span> [<span class="string">一级标题</span>](<span class="link">#一级标题</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 1-1</span>](<span class="link">#二级标题 1-1</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 1-2</span>](<span class="link">#二级标题 1-2</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">二级标题</span>](<span class="link">#二级标题</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 2-1</span>](<span class="link">#二级标题 2-1</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 2-2</span>](<span class="link">#二级标题 2-2</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">一级标题</span>](<span class="link">#一级标题</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 1-1</span>](<span class="link">#二级标题 1-1</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 1-2</span>](<span class="link">#二级标题 1-2</span>)</span><br><span class="line"><span class="bullet">-</span> [<span class="string">二级标题</span>](<span class="link">#二级标题</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 2-1</span>](<span class="link">#二级标题 2-1</span>)</span><br><span class="line"><span class="bullet">  -</span> [<span class="string">标题 2-2</span>](<span class="link">#二级标题 2-2</span>)</span><br><span class="line"></span><br><span class="line"><span class="section"># 一级标题</span></span><br><span class="line">一些内容……</span><br><span class="line"><span class="section">## 二级标题 1-1</span></span><br><span class="line">一些内容……</span><br><span class="line"><span class="section">## 二级标题 1-2</span></span><br><span class="line">一些内容……</span><br><span class="line"><span class="section"># 二级标题</span></span><br><span class="line">一些内容……</span><br><span class="line"><span class="section">## 二级标题 2-1</span></span><br><span class="line">一些内容……</span><br><span class="line"><span class="section">## 二级标题 2-2</span></span><br><span class="line">一些内容……</span><br></pre></td></tr></tbody></table></figure><h2 id="1-4-描点跳转"><a href="#1-4-描点跳转" class="headerlink" title="1.4. 描点跳转"></a>1.4. 描点跳转</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">html标签实现</span><br><span class="line"></span><br><span class="line">定义一个锚(id)： <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"jump"</span>&gt;</span>跳转到的地方<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">使用markdown语法：[点击跳转](#jump)</span><br></pre></td></tr></tbody></table></figure><h2 id="1-5-标题语法"><a href="#1-5-标题语法" class="headerlink" title="1.5. 标题语法"></a>1.5. 标题语法</h2><p>要创建标题，请在单词或短语前面添加# 。#的数量代表了标题的级别<br>用一个空格在#和标题之间进行分隔。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题一般作为整篇文章的标题</span><br><span class="line"></span><br><span class="line">## 二级标题一般作为文章主要部分的大标题。</span><br><span class="line"></span><br><span class="line">### 三级标题是对二级标题所描述内容的细分。</span><br><span class="line"></span><br><span class="line">#### 四级标题是对三级标题所描述内容的细分。</span><br></pre></td></tr></tbody></table></figure><p>对于标题的使用，建议遵循如下原则：</p><ul><li><p>标题层层递进，不要跨层。举例来说，一级标题下面只能使用二级标题，不要直接出现三级或者四级标题。</p></li><li><p>不要出现同级标题只有一个的情况。例如，如果二级标题下面只有一个三级标题，那就要考虑重新组织文档，从而把三级标题去掉。</p></li><li><p>谨慎使用四级标题。在组织文章内容时，尽量避免层级过深，简单的层级关系有助于提高文章的可读性。如果三级标题下面有并列的内容，优先考虑用项目列表的形式实现。</p></li></ul><h2 id="1-6-强调语法"><a href="#1-6-强调语法" class="headerlink" title="1.6. 强调语法"></a>1.6. 强调语法</h2><p>粗体（Bold）加斜体（Italic）</p><p>要加粗文本，请在单词或短语的前后各添加三个星号（asterisks）</p><h2 id="1-7-高亮"><a href="#1-7-高亮" class="headerlink" title="1.7. 高亮"></a>1.7. 高亮</h2><p><code>==文字高亮==</code><br>==文字高亮==</p><h2 id="1-8-删除线"><a href="#1-8-删除线" class="headerlink" title="1.8. 删除线"></a>1.8. 删除线</h2><p>删除线就是给文本加上删除线，在文本两端使用两个波浪线~</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~文本~~</span><br></pre></td></tr></tbody></table></figure><p><del>文本</del></p><h2 id="1-9-引用语法"><a href="#1-9-引用语法" class="headerlink" title="1.9. 引用语法"></a>1.9. 引用语法</h2><p>要创建块引用，请在段落前添加一个&gt;符号。</p><h2 id="1-10-列表语法"><a href="#1-10-列表语法" class="headerlink" title="1.10. 列表语法"></a>1.10. 列表语法</h2><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p><h2 id="1-11-围栏代码块"><a href="#1-11-围栏代码块" class="headerlink" title="1.11. 围栏代码块"></a>1.11. 围栏代码块</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在代码块之前和之后的行上使用三个反引号或三个波浪号（~~~）。</span><br><span class="line"></span><br><span class="line">在反引号后面加上语言的名字就可以享受到对应语言的语法高亮。</span><br><span class="line"></span><br><span class="line">用反引号括起来，反引号是英文输入下，tab的上一个键</span><br></pre></td></tr></tbody></table></figure><h2 id="1-12-分隔线"><a href="#1-12-分隔线" class="headerlink" title="1.12. 分隔线"></a>1.12. 分隔线</h2><p>在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。为了兼容性，请在分隔线的前后均添加空白行</p><h2 id="1-13-链接语法"><a href="#1-13-链接语法" class="headerlink" title="1.13. 链接语法"></a>1.13. 链接语法</h2><p>超链接Markdown语法代码：[超链接显示名](超链接地址 “超链接title”)<br>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><h2 id="1-14-转义字符语法"><a href="#1-14-转义字符语法" class="headerlink" title="1.14. 转义字符语法"></a>1.14. 转义字符语法</h2><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><h2 id="1-15-图片语法"><a href="#1-15-图片语法" class="headerlink" title="1.15. 图片语法"></a>1.15. 图片语法</h2><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">ddfdfd</span>](<span class="link">图片链接 "图片title"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="1-16-表格"><a href="#1-16-表格" class="headerlink" title="1.16. 表格"></a>1.16. 表格</h2><p><a href="https://tableconvert.com/zh-CN/">Markdown表格工具</a><br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><h3 id="1-16-1-hexo文章"><a href="#1-16-1-hexo文章" class="headerlink" title="1.16.1. hexo文章"></a>1.16.1. hexo文章</h3><p>表格要与正文空两行才可以渲染</p><h3 id="1-16-2-表格的对齐方式"><a href="#1-16-2-表格的对齐方式" class="headerlink" title="1.16.2. 表格的对齐方式"></a>1.16.2. 表格的对齐方式</h3><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure><h2 id="1-17-任务列表"><a href="#1-17-任务列表" class="headerlink" title="1.17. 任务列表"></a>1.17. 任务列表</h2><p>任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。</p><ul><li><input checked="" disabled="" type="checkbox"> Write the press release</li><li><input disabled="" type="checkbox"> Update the website</li><li><input disabled="" type="checkbox"> Contact the media</li></ul><h2 id="1-18-Emoji-表情"><a href="#1-18-Emoji-表情" class="headerlink" title="1.18. Emoji 表情"></a>1.18. Emoji 表情</h2><p>复制使用<br><a href="https://emojipedia.org/">https://emojipedia.org/</a></p><p><a href="https://gist.github.com/rxaviers/7360908">https://gist.github.com/rxaviers/7360908</a></p><h2 id="1-19-数学公式"><a href="#1-19-数学公式" class="headerlink" title="1.19. 数学公式"></a>1.19. 数学公式</h2><h3 id="1-19-1-基础"><a href="#1-19-1-基础" class="headerlink" title="1.19.1. 基础"></a>1.19.1. 基础</h3><h4 id="1-19-1-1-公式标记"><a href="#1-19-1-1-公式标记" class="headerlink" title="1.19.1.1. 公式标记"></a>1.19.1.1. 公式标记</h4><p>在Markdown中，有两种输入公式的方法：<br>一是行内公式（inline），用一对美元符号$包裹。<br>  这是一个行内公式E=mc2，写法是：<code>$E=mc^2$</code>。</p><p>二是整行公式（displayed），用一对紧挨的两个美元符号$$包裹。</p><p>这是一个整行公式：<br>$$<br>\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}<br>$$</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\sum_{i=0}^n i^2 = \frac{(n^2+n)(2n+1)}{6}</span><br><span class="line">$$</span><br></pre></td></tr></tbody></table></figure><h4 id="1-19-1-2-上标与下标"><a href="#1-19-1-2-上标与下标" class="headerlink" title="1.19.1.2. 上标与下标"></a>1.19.1.2. 上标与下标</h4><p>上标和下标分别使用^和_来表示。例如$x_i^2$，$\log_2 x$</p><p>默认情况下，上下标符号仅仅对下一个组起作用。一个组即单个字符或者使用{}包裹起来的内容。也就是说，如果使用10^10会得到10101010，而10^{10}才是10101010。同时，大括号还能消除二义性，如x^5^6会显示错误，必须使用大括号来界定^的结合性，如{x^5}^6：x56x56或者x^{5^6}：x56x56。注意区分x_i^2：x2ixi2和x_{i_2}：xi2xi2。</p><p>另外，如果要在左右两边都有上下标，可以用\sideset来表示，如\sideset{^1_2}{^3_4}\bigotimes：12⨂34⨂21⨂43。</p><h4 id="1-19-1-3-括号"><a href="#1-19-1-3-括号" class="headerlink" title="1.19.1.3. 括号"></a>1.19.1.3. 括号</h4><ul><li><p>小括号与方括号：使用原始的()和[]即可。不过原始括号并不会随着公式大小缩放。可以使用$\left( … \right)$来自适应的调整括号。</p></li><li><p>大括号：由于大括号{}被用来分组，因此需要使用${$和$}$表示大括号，也可以使用$\lbrace$和$\rbrace$来表示。</p></li><li><p>尖括号：使用$\langle$和$\rangle$分别表示左尖括号和右尖括号。</p></li><li><p>上取整：使用$\lceil$和$\rceil$表示。</p></li><li><p>下取整：使用$\lfloor$和$\rfloor$表示。</p></li></ul><h2 id="1-20-mermaid图表工具"><a href="#1-20-mermaid图表工具" class="headerlink" title="1.20. mermaid图表工具"></a>1.20. mermaid图表工具</h2><p>mermaid是一款支持在Markdown文档中使用的图表工具，可以用来画时序图，类图，流程图等。在Markdown中使用十分方便，常用的Markdown编辑工具Typora和博客网站CSDN都支持mermaid。mermaid是基于javascript实现的，将Markdown文档中的元素渲染成HTML元素。</p><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3><p><a href="https://lightzhan.xyz/index.php/2020/04/06/markdown-mermaid-tutorial/">https://lightzhan.xyz/index.php/2020/04/06/markdown-mermaid-tutorial/</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></tbody></table></figure><p>graph表示流程图，而第二个TD表示图的方向</p><ul><li>TB：自顶向下</li><li>BT：自底向上</li><li>RL：从右到左</li><li>LR：从左到右</li><li>TD：和TB一样</li></ul><h1 id="2-md编辑器"><a href="#2-md编辑器" class="headerlink" title="2. md编辑器"></a>2. md编辑器</h1><h2 id="2-1-vscode搭建markdown环境"><a href="#2-1-vscode搭建markdown环境" class="headerlink" title="2.1. vscode搭建markdown环境"></a>2.1. vscode搭建markdown环境</h2><h3 id="2-1-1-Markdown-All-in-One"><a href="#2-1-1-Markdown-All-in-One" class="headerlink" title="2.1.1. Markdown All in One"></a>2.1.1. Markdown All in One</h3><p>如名称所述，这是个大一统型的扩展，集成了撰写 Markdown 时所需要的大部分功能，是 Markdown 类插件中下载榜榜首。可认为是 VSCode 中的 Markdown 必备扩展。其功能涵盖：</p><p>生成并更新目录<br>生成,更新序号</p><p>自动格式化表格<br>LaTeX 数学公式支持</p><h3 id="2-1-2-Markdown-Preview-Mermaid-Support"><a href="#2-1-2-Markdown-Preview-Mermaid-Support" class="headerlink" title="2.1.2. Markdown Preview Mermaid Support"></a>2.1.2. Markdown Preview Mermaid Support</h3><p>很多时候，写文档难免需要绘制一些用于说明的插图，如流程图、甘特图等，这个时候，若另开一个应用画图，再导入文档，则略显繁琐。前文提到的 MPE 扩展支持的 mermaid.js 可轻松解决这一难题。简单说，mermaid.js 就是一个 Markdown 的绘图工具包<br>Markdown Preview Mermaid Support 支持 mermaid 预览。</p><h3 id="2-1-3-markdownlint-插件"><a href="#2-1-3-markdownlint-插件" class="headerlink" title="2.1.3. markdownlint 插件"></a>2.1.3. markdownlint 插件</h3><p>这是个功能强大的 Markdown 语法检查器，可以帮助你书写出规范的文档，同时避免书写错误导致文档无法渲染</p><p>具体规则请参考：官方文档 markdownlint/Rules.md</p><p>我们可以启用或禁用每条规则。有些规则还允许我们对其进行配置。</p><p>一般的规则都对应有一个别名（Aliases），我们也可以通过别名的方式来配置对应的某条 规则。</p><p>另外也可以参考<a href="https://www.jianshu.com/p/51523a1c6fe1">markdownlint 规则详细介绍及自定义参数设置</a></p><h3 id="2-1-4-MdTableEditor"><a href="#2-1-4-MdTableEditor" class="headerlink" title="2.1.4. MdTableEditor"></a>2.1.4. MdTableEditor</h3><p>表格扩展<br><a href="https://blog.csdn.net/weixin_33854644/article/details/89121318">https://blog.csdn.net/weixin_33854644/article/details/89121318</a></p><h3 id="2-1-5-文档绘图"><a href="#2-1-5-文档绘图" class="headerlink" title="2.1.5. 文档绘图"></a>2.1.5. 文档绘图</h3><p>虽然有 mermaid，但有时候我们总会需要绘制一些复杂的图形。这时，可以使用 VSCode 商店里大名鼎鼎的 Draw.io 的内嵌扩展，安装完毕后三连：➡️ 新建 .drawio 文件 ➡️ 傻瓜绘图 ➡️ 导出为需要的格式。</p><h2 id="2-2-doocs-md"><a href="#2-2-doocs-md" class="headerlink" title="2.2. doocs-md"></a>2.2. doocs-md</h2><p>微信Markdown编辑器</p><p>这个项目名doocs-md，在编写时，Markdown 文档自动即时渲染为微信图文，让你不再为微信文章排版而发愁！<br>项目地址：<a href="https://github.com/doocs/md">https://github.com/doocs/md</a></p><p>在线体验地址：</p><p>• Gitee Pages：<a href="https://doocs.gitee.io/md">https://doocs.gitee.io/md</a></p><p>• GitHub Pages：<a href="https://doocs.github.io/md">https://doocs.github.io/md</a></p><h3 id="2-2-1-使用-Docker-搭建"><a href="#2-2-1-使用-Docker-搭建" class="headerlink" title="2.2.1. 使用 Docker 搭建"></a>2.2.1. 使用 Docker 搭建</h3><p><code>docker run -d -p 8080:80 doocs/md:latest</code><br>容器运行起来之后，打开浏览器，访问 <a href="http://localhost:8080/">http://localhost:8080</a> 即可。</p><h2 id="2-3-WeChat-Format"><a href="#2-3-WeChat-Format" class="headerlink" title="2.3. WeChat Format"></a>2.3. WeChat Format</h2><p>微信公众号排版编辑器，转换 Markdown 到微信特制的 HTML<br>网站：<a href="https://lab.lyric.im/wxformat/">https://lab.lyric.im/wxformat/</a><br>项目：<a href="https://github.com/lyricat/wechat-format">https://github.com/lyricat/wechat-format</a></p><h2 id="2-4-Typora-付费"><a href="#2-4-Typora-付费" class="headerlink" title="2.4. Typora[付费]"></a>2.4. Typora[付费]</h2><p>一款轻便简洁的Markdown编辑器，支持即时渲染技术<br>网站：<a href="https://typoraio.cn/">https://typoraio.cn/</a><br>学习版：<a href="https://wwc.lanzoul.com/i7bBz09yhk8j">https://wwc.lanzoul.com/i7bBz09yhk8j</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDE配置及使用</title>
      <link href="/2022/01093653.html"/>
      <url>/2022/01093653.html</url>
      
        <content type="html"><![CDATA[<h1 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h1><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><h3 id="保存后格式化"><a href="#保存后格式化" class="headerlink" title="保存后格式化"></a>保存后格式化</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    vscode保存后的动作</span></span><br><span class="line">    <span class="string">"editor.codeActionsOnSave"</span>: {</span><br><span class="line">        <span class="comment">// 保存后自动格式化js,css代码，需要安装插件(ESLint,StyleLint)</span></span><br><span class="line">        <span class="attr">"source.fixAll.eslint"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"source.fixAll.stylelint"</span>: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    },</span><br></pre></td></tr></tbody></table></figure><h3 id="括号对标识"><a href="#括号对标识" class="headerlink" title="括号对标识"></a>括号对标识</h3><p>Editor › Bracket Pair Colorization: Enabled<br>控制是否已启用括号对着色。使用 Workbench: Color Customizations 替代括号高亮颜色。</p><p>括号标识线：设置中搜索bracket，Editor › Guides: Highlight Active Bracket Pair</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="多行编辑"><a href="#多行编辑" class="headerlink" title="多行编辑"></a>多行编辑</h3><p>按住鼠标中键/alt+shift：多光标选中多行<br>alt+左键选择多个编辑位点</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>F1 或 Ctrl+Shift+P（俗称万能键）  ：打开命令面板</p><p>ctrl+y 取消撤销</p><p>1.查看函数或者类的定义<br>Ctrl+鼠标左键点击函数名或者类名即可跳转到定义处，在函数名或者类名上按F12也可以实现同样功能</p><p>重命名变量：f2</p><p>单行注释&nbsp; Ctrl +/<br>块注释:Alt + Shift + A</p><h3 id="编辑器与窗口管理"><a href="#编辑器与窗口管理" class="headerlink" title="编辑器与窗口管理"></a>编辑器与窗口管理</h3><p>新建文件:   Ctrl+N</p><p>文件之间切换:   Ctrl+Tab</p><p>打开一个新的VS Code编辑器:    Ctrl+Shift+N</p><p>关闭当前窗口:   Ctrl+W</p><p>关闭当前的VS Code编辑器:   Ctrl+Shift+W</p><p>切出一个新的编辑器窗口(分屏–最多3个):   Ctrl+\</p><p>切换左中右3个编辑器窗口的快捷键:   Ctrl+1  Ctrl+2  Ctrl+3</p><h3 id="格式调整"><a href="#格式调整" class="headerlink" title="格式调整"></a>格式调整</h3><p>代码行向左或向右缩进:   Ctrl+[ 、 Ctrl+] </p><p>复制或剪切当前行/当前选中内容:   Ctrl+C 、 Ctrl+V</p><p>代码格式化:   Shift+Alt+F</p><p>向上或向下移动一行:   Alt+Up 或 Alt+Down</p><p>向上或向下复制一行:   Shift+Alt+上键 或 Shift+Alt+下键</p><p>在当前行下方插入一行:   Ctrl+Enter</p><p>在当前行上方插入一行:   Ctrl+Shift+Enter</p><h3 id="光标相关"><a href="#光标相关" class="headerlink" title="光标相关"></a>光标相关</h3><p>移动到行首:   Home<br>移动到行尾:   End</p><p>移动到文件结尾:   Ctrl+End</p><p>移动到文件开头:   Ctrl+Home</p><p>移动到定义处:   F12</p><p>查看定义处缩略图(只看一眼而不跳转过去):    Alt+F12</p><p>选择从光标到行尾的内容:   Shift+End</p><p>选择从光标到行首的内容： Shift+Home</p><p>删除光标右侧的所有内容(当前行):   Ctrl+Delete</p><p>扩展/缩小选取范围： Shift+Alt+Right 和 Shift+Alt+Left</p><p>多行编辑(列编辑):   Alt+Shift+鼠标左键 或 Ctrl+Alt+Down/Up</p><p>同时选中所有匹配编辑(与当前行或选定内容匹配):   Ctrl+Shift+L</p><p>下一个匹配的也被选中:   Ctrl+D</p><p>回退上一个光标操作:   Ctrl+U</p><p>撤销上一步操作: Ctrl+Z</p><p>手动保存:   Ctrl+S</p><h3 id="重构代码"><a href="#重构代码" class="headerlink" title="重构代码"></a>重构代码</h3><p>找到所有的引用:   Shift+F12</p><p>重命名变量:   Ctrl+F2</p><h3 id="查找替换"><a href="#查找替换" class="headerlink" title="查找替换"></a>查找替换</h3><p>查找:   Ctrl+F</p><p>查找替换:   Ctrl+H</p><h3 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h3><p>全屏显示(再次按则恢复):   F11</p><p>放大或缩小(以编辑器左上角为基准):   Ctrl +/-</p><p>侧边栏显示或隐藏： Ctrl+B</p><p>显示资源管理器(光标切到侧边栏中才有效):   Ctrl+Shift+E</p><p>显示搜索(光标切到侧边栏中才有效):   Ctrl+Shift+F</p><p>显示源代码管理(光标切到侧边栏中才有效):    Ctrl+Shift+G+G</p><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><ul><li><p>美化文件图标：Material Icon Theme：</p></li><li><p>实时预览图片：Image Preview </p></li><li><p>项目管理：Project Manager<br>用来快速打开项目</p></li><li><p>路径补充：Path Intellisense ,模块导入, 智能提示</p></li><li><p>绘图工具：vscode-drawio</p></li><li><p>展示数据结构形成过程：debug-visualizer</p></li><li><p>database-client<br>支持MySQL/MariaDB, PostgreSQL, SQLite, Redis, ClickHouse, 达梦以及ElasticSearch的管理, 且可以作为一个SSH客户端, 最大程度地提高你的生产力!</p></li><li><p>CodeTour 允许我们为代码添加备注，并且将这些备注串联起来，动态地展示我们的思路以及代码逻辑。</p></li><li><p>管理.ignore files文件：AnGitIgnored</p></li><li><p>Luna Paint — Image Editor：一个内置在 VS Code 中的图像编辑器，支持 png，jpg，webp，bmp 和 ico 格式。</p></li><li><p>缩进带颜色：Indent-Rainbow</p></li><li><p>可视化模块依赖关系：Dependency Cruiser Extension</p></li><li><p>删除空行：Remove empty lines</p></li><li><p>AI辅助-单元测试:Ponicode</p></li><li><p>koroFileHeader：用于生成文件头部注释和函数注释<br>  ctrl+shift+t：函数注释</p></li></ul><h3 id="Code-runner"><a href="#Code-runner" class="headerlink" title="Code-runner"></a>Code-runner</h3><p>在设置中搜索Code-runner: File Directory As Cwd<br>这个选项的作用是将我们运行的py文件所在目录设置为当前工作目录</p><h3 id="change-case"><a href="#change-case" class="headerlink" title="change-case"></a>change-case</h3><p>ctrl + shift + p 调出命令面板:搜索change-case snack</p><p>更改当前选择的单词的格式, 比如<br>  大小写,<br>  js的驼峰camel,<br>  python的蛇形snake,<br>  css的串式kebab,<br>  java的匈牙利HN</p><p><strong>文件头部注释快捷键</strong><br>记录文件信息/文件的传参/出参，设置个性签名、留下QQ、微信联系方式、输入空行等等<br>支持用户高度自定义注释选项, 适配各种需求的注释形式。<br>保存文件的时候，自动更新最后的编辑时间和编辑人<br>    window：ctrl+win+i,<br>    mac：ctrl+cmd+i,<br>    linux: ctrl+meta+i,<br>    Ubuntu: ctrl+super+i</p><p><strong>函数注释注释快捷键</strong><br>更多关于函数参数自动请查阅配置-函数注释自动提取函数的参数文档<br>将光标放在函数行或者将光标放在函数上方的空白行。<br>自动解析函数参数，生成函数参数注释。<br>快捷键：<br>    window：ctrl+win+t,<br>    mac：ctrl+cmd+t,<br>    linux: ctrl+meta+t,<br>    Ubuntu: ctrl+super+t</p><p>快捷键不生效<br>在vscode界面输入 ctrl+shift+p ， 搜索找到键盘快捷方式,再搜索 cursortip （函数注释快捷键）</p><h3 id="background"><a href="#background" class="headerlink" title="background"></a>background</h3><p>加入设置的setting.json</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    <span class="string">"background.enabled"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"background.useDefault"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"background.customImages"</span>: [</span><br><span class="line">    <span class="string">"file:///E:/wenke_source/my picture/壁纸.jpg"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"background.style"</span>: {</span><br><span class="line">    <span class="attr">"content"</span>: <span class="string">"''"</span>,</span><br><span class="line">    <span class="attr">"pointer-events"</span>: <span class="string">"none"</span>,</span><br><span class="line">    <span class="attr">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">    <span class="attr">"top"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"right"</span>: <span class="string">"0"</span>,</span><br><span class="line">    <span class="attr">"background-size"</span>: <span class="string">"cover"</span>,</span><br><span class="line">    <span class="attr">"opacity"</span>: <span class="number">0.1</span>,</span><br><span class="line">    <span class="attr">"z-index"</span>: <span class="string">"99999"</span>,</span><br><span class="line">    <span class="attr">"width"</span>: <span class="string">"100%"</span>,</span><br><span class="line">    <span class="attr">"height"</span>: <span class="string">"100%"</span>,</span><br><span class="line">    <span class="attr">"background-repeat"</span>: <span class="string">"no-repeat"</span>,</span><br><span class="line">},</span><br><span class="line"><span class="string">"bracketPairColorizer.depreciation-notice"</span>: <span class="literal">false</span></span><br></pre></td></tr></tbody></table></figure><ul><li>同步配置。<br>Settings Sync</li></ul><p>1.用Github账户登录<br>2.创建一个新的GIST或选择存在的GIST<br>3.上传配置<br>按下 Shift + Alt + U<br>4.下载配置<br>按下 Shift + Alt + D</p><h2 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h2><h3 id="用户代码片段-snippets-语法"><a href="#用户代码片段-snippets-语法" class="headerlink" title="用户代码片段  snippets 语法"></a>用户代码片段  snippets 语法</h3><p><a href="https://mp.weixin.qq.com/s/abJg5w1XtWxo42qIfweIFg">原文</a></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"alpha"</span>: {</span><br><span class="line">        <span class="attr">"prefix"</span>: [<span class="string">"a"</span>, <span class="string">"z"</span>],</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">            <span class="string">"abcdefghijklmnopqrstuvwxyz"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"description"</span>: <span class="string">"字母"</span>,</span><br><span class="line">        <span class="attr">"scope"</span>: <span class="string">"javascript"</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>prefix 是触发的前缀，可以指定多个<br>body 是插入到编辑器中的内容，支持很多语法<br>description 是描述<br>scope 是生效的语言，不指定的话就是所有语言都生效</p><h4 id="vscode代码片段生成器"><a href="#vscode代码片段生成器" class="headerlink" title="vscode代码片段生成器"></a>vscode代码片段生成器</h4><p>utools插件</p><h2 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h2><h3 id="运行python代码"><a href="#运行python代码" class="headerlink" title="运行python代码"></a>运行python代码</h3><p>在终端中运行python代码:在VSCode终端显示运行结果，它会默认显示当前环境和被执行文件的路径</p><p>在python终端中运行选定内容：在python交互窗口执行文件，执行的过程中我们可以通过输入框进行输入交互。它类似Jupyter, 每次运行都是独立的单元格，方便观察结果</p><h3 id="python代码输出中文乱码"><a href="#python代码输出中文乱码" class="headerlink" title="python代码输出中文乱码"></a>python代码输出中文乱码</h3><p>在”文件”－“首选项”－”用户设置”中搜索code-runner.executorMap选项，提示需要在setting.json中修改<br>“code-runner.executorMap”: {<br>“python”: “set PYTHONIOENCODING=utf8 &amp;&amp; python -u”<br>}</p><h3 id="设置-1"><a href="#设置-1" class="headerlink" title="设置"></a>设置</h3><p>关闭 vscode 的自动导入包功能，经常导错<br>设置搜索Python › Analysis: Auto Import Completions，并关闭</p><h3 id="用户代码片段"><a href="#用户代码片段" class="headerlink" title="用户代码片段"></a>用户代码片段</h3><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">    <span class="attr">"python"</span>:{</span><br><span class="line">        <span class="attr">"prefix"</span>: <span class="string">"!py"</span>,</span><br><span class="line">        <span class="attr">"body"</span>: [</span><br><span class="line">        <span class="string">"#!/usr/bin/env python3.8.8"</span>,</span><br><span class="line">        <span class="string">"# -*- encoding: utf-8 -*-"</span>,</span><br><span class="line">        <span class="string">"'''"</span>,</span><br><span class="line">        <span class="string">"@File    :   $TM_FILENAME"</span>,</span><br><span class="line">        <span class="string">"@Time    :   $CURRENT_YEAR/$CURRENT_MONTH/$CURRENT_DATE $CURRENT_HOUR:$CURRENT_MINUTE:$CURRENT_SECOND"</span>,</span><br><span class="line">        <span class="string">"@Author  :   wenke "</span>,</span><br><span class="line">        <span class="string">"@Version :   1.0"</span>,</span><br><span class="line">        <span class="string">"@Contact :   1184664659@qq.com"</span>,</span><br><span class="line"><span class="string">"@WebSite :   https://wenkexia.github.io"</span>,</span><br><span class="line">        <span class="string">"@Desc    :   None"</span>,</span><br><span class="line">        <span class="string">"'''"</span>,</span><br><span class="line">    </span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"if __name__ == '__main__':"</span>,</span><br><span class="line">    </span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"$0"</span></span><br><span class="line">    ],</span><br><span class="line">    }   </span><br><span class="line">}</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><h3 id="python插件"><a href="#python插件" class="headerlink" title="python插件"></a>python插件</h3><p>AI Doc write:ai帮你写注释<br>只要选中函数代码，然后按一个快捷键就会自动生成该方法的注释，可用来生成函数文档，</p><p>Sourcegraph<br>你可以直接从 VS Code IDE 免费搜索数百万个开源存储库。从有用的代码示例中学习，搜索最佳实践，并从开源宇宙中数百万个存储库中重用代码。</p><p>Krinql<br>如果你看不懂代码，可以让 Krinql 来回答，或者让它编写文档字符串：</p><h1 id="JetBrains系列"><a href="#JetBrains系列" class="headerlink" title="JetBrains系列"></a>JetBrains系列</h1><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p><a href="https://cdn.modb.pro/db/428707">https://cdn.modb.pro/db/428707</a></p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>安装目录下的bin目录，可以看到一个idea.properties文件，核心配置文件<br>参数：<br>    1.idea.config.path<br>    这个目录是我们在File\settings标签下做的一些配置，例如CodeStyle、KeyMaps等。</p><pre><code>2.idea.system.path这个目录下的配置很关键，主要存放的是一些缓存。编译工具、本地历史、工作空间配置等都在这里。3.idea.plugins.path这里放的是我们安装的一些插件，如果你需要增加插件，除了在IDEA的操作界面添加，把插件移动到这个目录然后重启也可以安装成功，这就是离线安装。4.idea.log.path这个目录保存了IDEA产生的log。如果你觉得占用空间过大，也可以删掉部分过期的log。</code></pre><h2 id="jetbrains系列产品激活"><a href="#jetbrains系列产品激活" class="headerlink" title="jetbrains系列产品激活"></a>jetbrains系列产品激活</h2><p>使用服务器激活方式，不过不稳定</p><h1 id="pycharm"><a href="#pycharm" class="headerlink" title="pycharm"></a>pycharm</h1><h2 id="备份配置"><a href="#备份配置" class="headerlink" title="备份配置"></a>备份配置</h2><p>配置信息导出到文件：点击file，选择export settings<br>配置文件的导入：点击file，选择import settings</p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>临时文件是一种临时性文件，借助这种文件，不必创建任何项目文件，即可在编辑器中进行实验和原型设计。<br>要创建临时文件，请按 Ctrl+Alt+Shift+Insert ，然后选择要使用的语言。</p><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + alt + L  ：一键格式化代码<br>ctrl +shift +f :全局查找<br>ctrl +shift +f ：全局替换<br>shift +f10:运行<br>shift + Enter :换行<br>CTRL + SHIFT + F10    运行当前编辑区的程序文件    </p><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><p>在当前文件中搜索代码段：在 Mac 系统中使用 Cmd+F 键，在 Windows 或 Linux 系统中使用 Ctrl+F 键。</p><p>在整个项目中搜索代码段：在 Mac 系统中使用 Cmd+Shift+F 键，在 Windows 或 Linux 系统中使用 Ctrl+Shift+F 键。</p><p>搜索类：在 Mac 系统中使用 Cmd+O 键，在 Windows 或 Linux 系统中使用 Ctrl+N 键。</p><p>搜索文件：在 Mac 系统中使用 Cmd+Shift+O 键，在 Windows 或 Linux 系统中使用 Ctrl+Shift+N 键。</p><p>如果你不知道要搜索的是文件、类还是代码段，则搜索全部：按两次 Shift 键。</p><h3 id="快速导航"><a href="#快速导航" class="headerlink" title="快速导航"></a>快速导航</h3><p>导航可使用以下快捷键：</p><p>前往变量的声明：在 Mac 系统中使用 Cmd 键，在 Windows 或 Linux 系统中使用 Ctrl 键，然后单击变量。</p><p>寻找类、方法或文件的用法：使用 Alt+F7 键。</p><p>查看近期更改：使用 Shift+Alt+C 键，或者在主菜单中点击 View → Recent Changes。</p><p>查看近期文件：在 Mac 系统中使用 Cmd+E 键，在 Windows 或 Linux 系统中使用 Ctrl+E 键，或者在主菜单中点击 View → Recent Files。</p><p>多次跳转后在导航历史中前进和后退：在 Mac 系统中使用 Cmd+[ / Cmd+] 键，在 Windows 或 Linux 系统中使用 Ctrl+Alt+Left / Ctrl+Alt+Right 键。</p><h2 id="Intelligent-Coding-Assistance"><a href="#Intelligent-Coding-Assistance" class="headerlink" title="Intelligent Coding Assistance"></a>Intelligent Coding Assistance</h2><p>PyCharm 提供 Intelligent Coding Assistance 功能，可以执行代码补全、代码检查、错误高亮显示和快速修复建议。比如键入 main 并点击 tab 键，PyCharm 会自动补全整个 main 从句。</p><h2 id="文件头注释"><a href="#文件头注释" class="headerlink" title="文件头注释"></a>文件头注释</h2><p>PyCharm”→“File”→“Settings”→“Editor”→“File and Code Templates</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">@author: ${USER}</span></span><br><span class="line"><span class="string">@software: ${PRODUCT_NAME}</span></span><br><span class="line"><span class="string">@file: ${NAME}.py</span></span><br><span class="line"><span class="string">@time: ${DATE} ${TIME}</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="docstring方法注释"><a href="#docstring方法注释" class="headerlink" title="docstring方法注释"></a>docstring方法注释</h2><p><a href="https://blog.csdn.net/dkjkls/article/details/88933950">https://blog.csdn.net/dkjkls/article/details/88933950</a></p><p>File -&gt; Settings -&gt; Tools -&gt; Python Integrated Tools -&gt; Docstrings -&gt; Docstring format<br>设置包括五种风格：Plain、Epytext、reStructuredText、Numpy、Google。</p><p>使用方式为，在方法名下方输入三个双（单）引号，回车，自动生成。</p><h2 id="debug"><a href="#debug" class="headerlink" title="debug"></a>debug</h2><p>断点即程序运行到这一行时会自动停止，你可以探索断点处之后的代码有什么错误。</p><p>注意 Debugger 标签右侧有一个 Console 标签。Console 标签和 Debugger 标签相互独立。你可以在 Console 中与程序进行交互，在 Debugger 中执行 debug 动作。</p><p>点击 F8 执行当前代码行，并执行到下一行代码</p><h2 id="进行代码测试"><a href="#进行代码测试" class="headerlink" title="进行代码测试"></a>进行代码测试</h2><p>不经单元测试的应用都不可靠。PyCharm 可以帮助你快速舒适地写单元测试并运行。默认情况下，unittest 被用作测试运行器，而 PyCharm 还支持其他测试框架，如 pytest、nose、doctest、tox 和 trial。例如，你可以按照以下步骤为项目选择 pytest 测试运行器：</p><p>打开 Settings/Preferences → Tools → Python Integrated Tools 设置对话框。<br>在默认测试运行器字段中选择 pytest。<br>点击 OK 保存该设置。</p><h2 id="使用版本控制"><a href="#使用版本控制" class="headerlink" title="使用版本控制"></a>使用版本控制</h2><p>在 Windows 或 Linux 系统中使用 Alt+` 键进入vcs操作</p><h2 id="插件推荐-1"><a href="#插件推荐-1" class="headerlink" title="插件推荐"></a>插件推荐</h2><p><strong>Key Promoter X</strong><br>它就相当于一个快捷键管理大师，它时刻地在：</p><p>教导你，当下你的这个操作，应该使用哪个快捷操作来提高效率？</p><p>提醒你，当下你的这个操作，还没有设置快捷键，赶紧设置一个？</p><p><strong>Regex Tester</strong><br>可以测试正则表达式。<br>安装完成后，无需重启 PyCharm ，点击  PyCharm  界面左下方的小矩形按钮，就能找到 Regex Tester 选项。<br>匹配到的字符串背景会被高亮。右上方还有一些选项如大小写敏感，多行模式等，可根据需要进行选择。Regex Tester 还提供了Split，Replace功能等。</p><h2 id="插件下载位置更改-改完后各种错"><a href="#插件下载位置更改-改完后各种错" class="headerlink" title="插件下载位置更改(改完后各种错)"></a>插件下载位置更改(改完后各种错)</h2><p>原来的配置和下载的插件:C:\Users\wenke\AppData\Roaming\PyCharm2022.1</p><p>找到如下图所示关系配置项。修改为自己设定的文件位置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idea.config.path=D:/data/pycharm/config</span><br><span class="line">idea.system.path=D:/data/pycharm/system</span><br><span class="line">idea.plugins.path=D:/data/pycharm/plugins   #插件原来保存在config</span><br><span class="line">idea.log.path=D:/data/pycharm/log</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="idea"><a href="#idea" class="headerlink" title="idea"></a>idea</h1><h2 id="设置-2"><a href="#设置-2" class="headerlink" title="设置"></a>设置</h2><p>设置-&gt;编辑器-&gt;常规-&gt;自动导入   (开启自动导包，删包)</p><h2 id="更改用户保存目录"><a href="#更改用户保存目录" class="headerlink" title="更改用户保存目录"></a>更改用户保存目录</h2><p>原来的配置和下载的插件，可以将原来C盘（C:\Users\xxx.IntelliJIdea）对应的文件<br>或者在C:\Users\wenke\AppData\Roaming\JetBrains\PyCharm2022.1</p><p>在你的IDEA安装目录下的bin目录，可以看到一个idea.properties文件，这个文件是IDEA的核心配置文件<br>找到如下图所示关系配置项。修改为自己设定的文件位置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">idea.config.path=D:/data/IDEA/config</span><br><span class="line">idea.system.path=D:/data/IDEA/system</span><br><span class="line">idea.plugins.path=D:/data/IDEA/plugins   </span><br><span class="line">idea.log.path=D:/data/IDEA/log</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>maven<br>用户设置文件：C:\Users\wenke.m2\settings.xml<br>本地仓库：C:\Users\wenke.m2\repository</p><p>我设置成<br>用户设置文件：D:\data\IDEA.IntelliJIdea.m2\settings.xml<br>本地仓库：D:\data\IDEA.IntelliJIdea.m2\repository</p><h2 id="快捷键-1"><a href="#快捷键-1" class="headerlink" title="快捷键"></a>快捷键</h2><p>ctrl + d 快速复制这行到下一行</p><p>alt + insert ：自动生成get,set方法</p><p>注释<br>行注释Ctrl+/、<br>块注释Ctrl+Shift+/<br>文档注释  /**+enter</p><h3 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h3><p>按住ctrl选中多个文件，右击选比较文件或者ctrl+d</p><h2 id="自动生成"><a href="#自动生成" class="headerlink" title="自动生成"></a>自动生成</h2><p>psvm:main()方法</p><p>“内容”.sout :输出语句</p><p>fori:for循环语句</p><p>flag.whil + 回车：while语句</p><p>flag.if + 回车 ：if语句</p><p>new 类名.var + 回车 ：自动生成对象</p><h2 id="推荐插件"><a href="#推荐插件" class="headerlink" title="推荐插件"></a>推荐插件</h2><p>Alibaba Java Coding Guidelines（阿里巴巴Java开发规范）</p><p>Key Promoter X（IDEA快捷键提示）</p><p>Save Actions（当程序员将代码保存后，插件会自动进行格式化）</p><p>Codota AI Autocomplete（代码自动提示和推荐）</p><p>Auto filling Java call arguments（自动填充调用方法参数）<br>在调用函数时，通过alt+enter键，触发联想功能，选择”auto fill call parameters”自动填充调用的函数的形参名。</p><p>GenerateAllSetter（自动生成调用对象的set方法）</p><p>Maven Helper（Maven依赖分析工具）<br>该插件可以查看maven的依赖树，分析版本冲突，并提供maven常用命令模板。</p><p>File Expander<br>它能在Idea里直接打开Jar包，并且反编译代码查看。甚至于能打开tar.gz，zip等压缩格式。</p><p>GitToolBox<br>他能在项目上提示你还有多少文件没提交，远程还有多少文件没更新下来。还能在每一行代码上提示上次提交的时间。查版本提交问题的时候尤其方便。</p><p>Easy javadoc      注释快捷键ctrl +\</p><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><h3 id="自定义代码模板"><a href="#自定义代码模板" class="headerlink" title="自定义代码模板"></a>自定义代码模板</h3><p>第一个是代码模板快捷输入语句，第二个是说明，第三个就是我们自己定义的代码模板，$END$是回车后光标自动跳转的地方。</p><h3 id="自动生成类注释"><a href="#自动生成类注释" class="headerlink" title="自动生成类注释"></a>自动生成类注释</h3><p>1.按照顺序打开File–&gt;settings–&gt;Editor–&gt;File and Code Templates–&gt;Includes-&gt;File Header<br>2.输入类注释模板</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> ${NAME}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> ${USER}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> ${DATE} ${TIME}</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> ${TODO}</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></tbody></table></figure><h3 id="自动生成方法注释"><a href="#自动生成方法注释" class="headerlink" title="自动生成方法注释"></a>自动生成方法注释</h3><p><a href="https://zhuanlan.zhihu.com/p/386392249">https://zhuanlan.zhihu.com/p/386392249</a><br>1.按照顺序打开File–&gt;Settings–&gt;Editor–&gt;Live Templates<br>2.点击右边的”+“号,选择Template Group,创建自己的组名<br>3.选择自己的组名，点击”+”号，选择Live Template<br>4.填写Abbreviation(你设定的关键字)，Description(对模板的描述，会在调用时提示;)<br>5.点击 Define(模板作用的位置) 选择java</p><p>6.Template text(要显示的完整代码;)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: $USER$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span>: $date$-$time$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@update</span>_at $date$ $time$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@params</span>: $params$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>: $return$</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 描述</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>7.编辑模板变量,然后将每一行最后的“Skip if defined”勾选。</p><h2 id="Debug调试功能"><a href="#Debug调试功能" class="headerlink" title="Debug调试功能"></a>Debug调试功能</h2><p>打断点<br>步过：：一步一步执行</p><p>步入进去方法里面<br>强制步入：进入源码中<br>步出：跳出方法</p><h1 id="DataGrip"><a href="#DataGrip" class="headerlink" title="DataGrip"></a>DataGrip</h1><p>删除一整行：Ctrl + Y</p><p>代码格式化相关：<br>大小写转化： Ctrl + Shift + U<br>代码格式化： Ctrl + Alt + L</p><p>刷新表：Ctrl + F5</p><p>调整表中的列宽：Ctrl + Shift + 左/右箭头</p><p>调整显示窗口的高度：Ctrl + Shift + 上/下箭头</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDE,编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础</title>
      <link href="/2022/010834543.html"/>
      <url>/2022/010834543.html</url>
      
        <content type="html"><![CDATA[<h1 id="配置python开发环境"><a href="#配置python开发环境" class="headerlink" title="配置python开发环境"></a>配置python开发环境</h1><h2 id="Linux下配置python"><a href="#Linux下配置python" class="headerlink" title="Linux下配置python"></a>Linux下配置python</h2><h3 id="linux安装anconda"><a href="#linux安装anconda" class="headerlink" title="linux安装anconda"></a>linux安装anconda</h3><p>Anaconda 是一个用于python/R科学计算和机器学习的开源工具(也称为Python的一种发行版)，支持 Linux, macOS, Windows, 包含了conda等众多工具包及其依赖项，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题</p><p>直接使用linux命令行下载</p><h4 id="安装anaconda"><a href="#安装anaconda" class="headerlink" title="安装anaconda"></a>安装anaconda</h4><p>#首先安装wget<br>sudo apt-get install wget  # Ubuntu<br>sudo yum install wget  # CentOS</p><p>#然后使用wget从清华源上下载Anaconda3-2021.05-Linux-x86_64.sh<br>wget <a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh">https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-2021.05-Linux-x86_64.sh</a></p><p>#安装Anaconda：<br>sh Anaconda3-2021.05-Linux-x86_64.sh<br>#查看许可时可输入q来退出</p><h4 id="将conda加入环境变量"><a href="#将conda加入环境变量" class="headerlink" title="将conda加入环境变量"></a>将conda加入环境变量</h4><p>加入环境变量是为了让系统能识别conda命令</p><p>#1.在终端中打开~/.bashrc：<br>vim ~/.bashrc</p><p>#2.在<del>/.bashrc中将conda添加为环境变量：<br>#先按i进入编辑模式在第一行输入：<br>export PATH=”</del>/anaconda3/bin:$PATH”<br>#若安装时自定义了安装位置，则将~/anaconda3/bin改为自定义的安装目录下的bin文件夹</p><p>3.修改完成后，先按esc键退出编辑模式，再输入:wq!并回车，以保存退出</p><p>4.验证是否能识别conda命令：</p><p>在终端中输入<code>source ~/.bash_profile</code>以更新环境变量<br>再在终端输入<code>conda info --envs</code>，若能显示当前有base环境，则conda已加入环境变量</p><h2 id="Windows下安装Anaconda"><a href="#Windows下安装Anaconda" class="headerlink" title="Windows下安装Anaconda"></a>Windows下安装Anaconda</h2><p>下载：<a href="https://docs.anaconda.com/anaconda/install/windows/">https://docs.anaconda.com/anaconda/install/windows/</a></p><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">E:\anaconda</span><br><span class="line">E:\anaconda\Scripts</span><br><span class="line">E:\anaconda\Library\bin</span><br></pre></td></tr></tbody></table></figure><p>浏览器驱动放在D:\ruanjian\anaconda\Scripts</p><h1 id="管理虚拟环境"><a href="#管理虚拟环境" class="headerlink" title="管理虚拟环境"></a>管理虚拟环境</h1><h2 id="virtualenvwrapper管理python虚拟环境"><a href="#virtualenvwrapper管理python虚拟环境" class="headerlink" title="virtualenvwrapper管理python虚拟环境"></a>virtualenvwrapper管理python虚拟环境</h2><h3 id="window下安装并配置virtualenvwrapper"><a href="#window下安装并配置virtualenvwrapper" class="headerlink" title="window下安装并配置virtualenvwrapper"></a>window下安装并配置virtualenvwrapper</h3><p>由于 virtualenvwrapper 是 virtualenv 的一组扩展，所以如果要使用 virtualenvwrapper，就必须先安装 virtualenv。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenv</span><br><span class="line">pip install virtualenvwrapper-win</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>默认创建的虚拟环境位于C:\Users\username\envs,可以通过环境变量 WORKON_HOME 来定制。</p><p>通过计算机–&gt;属性–&gt;高级系统设置–&gt;环境变量–&gt;在系统变量中新建“变量名”：WORKON_HOME,变量值：“你自定义的路径”。</p><h3 id="Linux下安装并配置"><a href="#Linux下安装并配置" class="headerlink" title="Linux下安装并配置"></a>Linux下安装并配置</h3><p>#在root用户下安装</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install virtualenvwrapper   # 安装</span><br><span class="line">which virtualenvwrapper.sh    #定位virtualenvwrapper.sh脚本的安装位置</span><br><span class="line"></span><br><span class="line">vi ~/.bashrc  #在~/.bashrc 文件新增如下配置</span><br><span class="line"></span><br><span class="line"># virtualenv-wrapper path</span><br><span class="line"># 指定虚拟环境目录</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line"># 指定virtualenv的路径</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv</span><br><span class="line">source /usr/local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#重新加载环境变量</span><br><span class="line">source ~/.bashrc</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在普通用户下安装</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pip install virtualenvwrapper   # 安装</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">which virtualenvwrapper.sh    #定位virtualenvwrapper.sh脚本的安装位置</span><br><span class="line"><span class="meta">#</span><span class="bash">/home/lighthouse/.<span class="built_in">local</span>/bin/virtualenvwrapper.sh(/home/lighthouse/相当于~ 或者<span class="variable">$HOME</span>)</span></span><br></pre></td></tr></tbody></table></figure><p>创建虚拟环境的存放地址和设置环境变量</p><p>sudo vi <del>/.bashrc<br>在</del>/.bashrc 文件新增配置</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># virtualenv-wrapper path</span><br><span class="line"># 指定虚拟环境目录</span><br><span class="line">export WORKON_HOME=$HOME/.virtualenvs</span><br><span class="line"># 指定virtualenv的路径</span><br><span class="line">export VIRTUALENVWRAPPER_VIRTUALENV=$HOME/.local/bin/virtualenv</span><br><span class="line">source $HOME/.local/bin/virtualenvwrapper.sh</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>#重新加载环境变量<br>source ~/.bashrc</p><h3 id="通用命令"><a href="#通用命令" class="headerlink" title="通用命令"></a>通用命令</h3><p>直接在命令行使用更好</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出所有的虚拟环境，两种方法</span></span><br><span class="line">workon</span><br><span class="line">lsvirtualenv   #同时列出虚拟环境路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">创建虚拟环境</span></span><br><span class="line">mkvirtualenv 虚拟环境名称   </span><br><span class="line">mkvirtualenv --python=D:\Python\python.exe test4        #指定python版本</span><br><span class="line"></span><br><span class="line">workon 虚拟环境名称 # 进入虚拟环境,进入后使用pip将安装在虚拟环境下</span><br><span class="line"></span><br><span class="line">deactivate  # 退出虚拟环境</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在虚拟环境内直接切换到其他环境</span></span><br><span class="line">workon my_env02</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rmvirtualenv my_env01   # 删除虚拟环境</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出帮助文档</span></span><br><span class="line"> virtualenvwrapper</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝虚拟环境</span></span><br><span class="line">cpvirtualenv ENVNAME [TARGETENVNAME]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在所有的虚拟环境上执行命令</span></span><br><span class="line">allvirtualenv pip install -U pip</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除当前环境的所有第三方包</span></span><br><span class="line">wipeenv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到当前虚拟环境的目录</span></span><br><span class="line"> cdsitepackages</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入到当前虚拟环境的site-packages目录</span></span><br><span class="line"> cdvirtualenv</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示 site-packages 目录中的内容</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> lssitepackages</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="conda管理python虚拟环境"><a href="#conda管理python虚拟环境" class="headerlink" title="conda管理python虚拟环境"></a>conda管理python虚拟环境</h2><p>conda 创建虚拟环境有个好处，它可以换python版本。如果你使用的virtualenv，它虽然也可以创建虚拟环境，但python版本无法换</p><p>下载anaconda安装的python直接可以使用conda工具</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 列出系统存在虚拟环境：</span></span><br><span class="line">conda env list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建虚拟环境</span></span><br><span class="line">conda create -n xxx python=3.9</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换虚拟环境</span></span><br><span class="line"></span><br><span class="line">activate xxx       #on windows</span><br><span class="line">source activate xxx     #on linux</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">conda 版本查看</span></span><br><span class="line">conda --version</span><br><span class="line"></span><br><span class="line">conda update conda  #更新conda：</span><br><span class="line">conda update python #更新python版本需要进入指定指定的虚拟环境：</span><br><span class="line">conda upgrade --all  #更新第三方所有包：</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">退出虚拟环境</span></span><br><span class="line">deactivate      #on windows</span><br><span class="line">source deactivate   #on linux</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除虚拟环境</span></span><br><span class="line">conda remove --name xxx --all</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看当前环境下已安装的包</span></span><br><span class="line">conda list</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看某个指定环境的已安装包</span></span><br><span class="line">conda list -n xxx</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查找package信息</span></span><br><span class="line">conda search numpy</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装package</span></span><br><span class="line">conda install -n xxx numpy</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果不用-n指定环境名称，则被安装在当前激活环境</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 也可以通过-c指定通过某个channel安装</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新package</span></span><br><span class="line">conda update -n xxx numpy</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除package</span></span><br><span class="line">conda remove -n xxx numpy</span><br></pre></td></tr></tbody></table></figure><h3 id="添加清华源"><a href="#添加清华源" class="headerlink" title="添加清华源"></a>添加清华源</h3><figure class="highlight cmd"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/ </span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls yes</span><br></pre></td></tr></tbody></table></figure><p>说明</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看当前channel</span></span><br><span class="line">conda config --show</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除channel：</span></span><br><span class="line">conda config –remove channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">增加channel：</span></span><br><span class="line">conda config ‐‐add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br></pre></td></tr></tbody></table></figure><h2 id="venv"><a href="#venv" class="headerlink" title="venv"></a>venv</h2><p>自 3.6 版本之后，成为官方推荐的多环境管理工具。也就是说，你不需要安装任何第三方库就可以实现多环境管理了</p><p>优缺点分析：<br>1、venv是python3自带的，不需要额外安装库就能运行。<br>2、只能在3.3版本以后，2.x用不了<br>3、venv过于简单，没有额外的api。只能创建个虚拟环境，不能指定系统不存在的python环境版本，不能查看环境列表。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python3 -m venv D:\ruanjian\python   #使用venv创建虚拟隔离环境：</span><br><span class="line"></span><br><span class="line">cd /data/myproj source ./bin/activate   #激活虚拟环境:</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">退出虚拟环境：</span></span><br><span class="line">(myproj) [root@ops-130 myproj] deactivate</span><br></pre></td></tr></tbody></table></figure><h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p>单行注释 # 一般放在代码右边<br>多行注释 使用三个连续的单引号’’’或者三个连续的双引号”””注释多行内容，多行注释通常用来为 Python 文件、模块、类或者函数等添加版权或者功能描述信息。</p><h2 id="快速生成注释"><a href="#快速生成注释" class="headerlink" title="快速生成注释"></a>快速生成注释</h2><p>vscode插件python docstring generator<br><strong>功能</strong><br>快速生成文档字符串 (docstring) 片段。<br>可供选择的多种文档字符串格式。<br>通过pep484类型提示、默认值和变量名称自动推断参数类型。<br>支持普通参数、关键字参数、装饰器、错误和参数类型的识别。<br><strong>用法</strong><br>光标必须位于函数定义正下方的行上，才能生成完全自动填充的文档字符串。共有如下的三种调用方式：</p><p>先输入三个双引号（”””）然后回车<br>也可以直接使用快捷键Ctrl+Shift+2调用（修改快捷键：Keyboard Shortcuts -&gt; generateDocstring）<br>或者右键菜单选项卡：Generate Docstring</p><h1 id="Jupyter-Notebook使用"><a href="#Jupyter-Notebook使用" class="headerlink" title="Jupyter Notebook使用"></a>Jupyter Notebook使用</h1><p>Anaconda已经自动为你安装了Jupter Notebook及其他工具</p><p>Jupyter Notebook是以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示的程序。如在编程过程中需要编写说明文档，可在同一个页面中直接,编写支持Markdown语法。</p><p>Jupyter Notebook中所有交互计算、编写说明文档、数学公式、图片以及其他富媒体形式的输入和输出，都是以文档的形式体现的。这些文档是保存为后缀名为.ipynb的JSON格式文件，不仅便于版本控制，也方便与他人共享。此外，文档还可以导出为：HTML、LaTeX、PDF等格式。</p><p>以富媒体格式展示计算结果。富媒体格式包括：HTML，LaTeX，PNG，SVG等。</p><p>支持使用LaTeX编写数学性说明。</p><h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>编辑模式下按esc键进入命令模式。<br>命令模式下，单元格边框为灰色，且左侧边框线为蓝色粗线条。</p><p>ctrl+回车    运行当前cell</p><p>dd          删除当前cell</p><p>y          切换cell类型为Code</p><p>m         切换cell类型为Markdown</p><p>b       下方插入cell</p><h2 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h2><p>命令模式下按enter或return键进入编辑模式。<br>编辑模式下，单元格边框和左侧边框线均为绿色。</p><h2 id="魔法命令"><a href="#魔法命令" class="headerlink" title="魔法命令"></a>魔法命令</h2><p>加个‘！’就可以执行shell命令，可以直接在单元格内执行”!pwd”, “!ls” 等Linux里面的命令呢，<br>但是windows环境中，要把”!”改成魔法命令“%”即可执行</p><p>单元格内执行shell命令还有一个高频操作就是安装需要的第三方库<br><code>!pip install you-package==version</code></p><p>%who会输出当前notebook中已经存在的变量</p><p>%whos除了输出变量外，变量的类型以及当前值也会显示</p><h2 id="一个单元格多输出"><a href="#一个单元格多输出" class="headerlink" title="一个单元格多输出"></a>一个单元格多输出</h2><p>例如我们使用pandas读取一个文件生成dataframe后，想了解这个df的size, columns, 前5行等信息，正常情况下df.head, df.shape, df.info等内容要分成三个单元格来完成。但其实有更好的方法，可以让一个单元格内输出多个内容。具体方法是「增加一个单元格」执行下面两行代码即可：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from IPython.core.interactiveshell import InteractiveShell InteractiveShell.ast_node_interactivity = "all"</span><br></pre></td></tr></tbody></table></figure><h2 id="Mito插件"><a href="#Mito插件" class="headerlink" title="Mito插件"></a>Mito插件</h2><p><a href="https://docs.trymito.io/">官方文档</a><br>Mito是Jupyter notebook的一个插件，作用是编辑电子表格，并在编辑表格（带格式转换功能）时，可以生成相对应的Python代码。</p><h1 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.%做占位符</span></span><br><span class="line">name = <span class="string">"wenke"</span></span><br><span class="line">age =<span class="number">21</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是%s,年龄是%d"</span>%(name,age))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.{}做占位符</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(<span class="string">"我的名字是{0},年龄是{1}"</span>.<span class="built_in">format</span>(name,age))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.f-string</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'我的名字是<span class="subst">{name}</span>,年龄是<span class="subst">{age }</span>'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="pprint"><a href="#pprint" class="headerlink" title="pprint"></a>pprint</h2><p>当打印的字符（character）小于 80 时，pprint () 基本上等同于内置函数 print ()，当字符超出时，它会作美化，进行格式化输出：<br>from pprint import pprint</p><h1 id="路径相关"><a href="#路径相关" class="headerlink" title="路径相关"></a>路径相关</h1><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># path = 'E:\\新建文件夹' </span></span><br><span class="line"><span class="comment"># path = 'E:/新建文件夹' </span></span><br><span class="line">path = <span class="string">r'E:\新建文件夹'</span> </span><br></pre></td></tr></tbody></table></figure><p>文件命名规则如下：</p><p>1、 允许文件或者文件夹名称不得超过255个字符。<br>2、 文件名除了开头之外任何地方都可以使用空格。<br>3、 文件名中不能有下列符号：“？”、“、”、“╲”、“*”、““”、“”“、“&lt;”、“&gt;”、“|”。<br>4、 文件名不区分大小写，但在显示时可以保留大小写格式。<br>5、 文件名中可以包含多个间隔符，如“我的文件.我的图片.001”。</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>为多个变量赋值<br>例如：<code>a = b = c = 1</code><br>为多个对象指定多个变量。<br>例如：<code>a, b, c = 1, 2, "runoob"</code></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">3</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a = {}, b = {}"</span>.<span class="built_in">format</span>(a,b) )</span><br><span class="line"><span class="comment"># 在Python中,交换变量的值，我们无需定义临时变量来操作</span></span><br><span class="line">a,b= b,a</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a = {}, b = {}"</span>.<span class="built_in">format</span>(a,b) )</span><br></pre></td></tr></tbody></table></figure><h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><p><strong>硬性规则：</strong><br>变量名由字母（广义的Unicode字符，不包括特殊字符）、数字和下划线构成，数字不能开头。<br>大小写敏感（大写的a和小写的A是两个不同的变量）。<br>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。<br>错误命名： my-score<br><strong>PEP 8要求：</strong><br>用小写字母拼写，多个单词用下划线连接。<br>受保护的实例属性用单个下划线开头（后面会讲到）。<br>私有的实例属性用两个下划线开头（后面会讲到）。</p><h2 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h2><h3 id="局部变量和全局变量"><a href="#局部变量和全局变量" class="headerlink" title="局部变量和全局变量"></a>局部变量和全局变量</h3><p>局部变量：在一个函数中定义的变量就是局部变量（包括形参），其作用域是从定义局部变量的位置至函数结束的位置。<br>全局变量：在所有函数外定义的变量就是全局变量，其在所有的函数中都能使用。</p><h3 id="global关键字"><a href="#global关键字" class="headerlink" title="global关键字"></a>global关键字</h3><p>如果我们想要在一个函数中对全局变量进行修改，怎么办呢？这个时候就可以使用 global 关键字了。在函数体内定义，并且使用global关键字修饰后，该变量也就变为全局变量。在函数体外也可以访问到该变量，并且在函数体内还可以对其进行修改。</p><p>tip: 尽管Python允许全局变量和局部变量重名，但是在实际开发时，不建议这么做，因为这样容易让代码混乱，很难分清哪些是全局变量，哪些是局部变量。</p><h3 id="nonlocal-关键字"><a href="#nonlocal-关键字" class="headerlink" title="nonlocal 关键字"></a>nonlocal 关键字</h3><p>在 Python 中，函数的定义可以嵌套，即在一个函数中包含另一个函数的定义。通过 nonlocal 关键字，可以使内层的函数直接使用外层函数中定义的变量。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outer</span>():</span></span><br><span class="line">    x = <span class="number">10</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span>():</span></span><br><span class="line">        <span class="keyword">nonlocal</span> x</span><br><span class="line">        x = <span class="number">20</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'inner 函数中 x 的值为'</span>, x)<span class="comment">#20</span></span><br><span class="line">    inner()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'outer 函数中 x 的值为'</span>, x)   <span class="comment">#20</span></span><br><span class="line">outer()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包的定义：如果在一个内部函数里，对在外部函数内（但不是在全局作用域）的变量进行引用，那么内部函数就被认为是闭包(closure)</p><p>函数嵌套/闭包中的作用域：</p><h2 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h2><p>在Python中可以使用type函数对变量的类型进行检查。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span></span><br><span class="line">b = <span class="number">12.345</span></span><br><span class="line">c = <span class="number">1</span> + <span class="number">5j</span></span><br><span class="line">d = <span class="string">'hello, world'</span></span><br><span class="line">e = <span class="literal">True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(a))    <span class="comment"># &lt;class 'int'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(b))    <span class="comment"># &lt;class 'float'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(c))    <span class="comment"># &lt;class 'complex'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(d))    <span class="comment"># &lt;class 'str'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(e))    <span class="comment"># &lt;class 'bool'&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>可以使用Python中内置的函数对变量类型进行转换。</p><p>int()：将一个数值或字符串转换成整数，可以指定进制。<br>float()：将一个字符串转换成浮点数。<br>str()：将指定的对象转换成字符串形式，可以指定编码。<br>chr()：将整数转换成该编码对应的字符串（一个字符）。<br>ord()：将字符串（一个字符）转换成对应的编码（整数）。</p><h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>Python支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p><h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p>()优先级最高</p><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td><code>[]</code> ,<code>[:]</code></td><td>下标，切片</td></tr><tr><td><code>**</code></td><td>指数运算符(幂运算)</td></tr><tr><td><code>~</code> <code>+</code> <code>-</code></td><td>按位取反, 正负号</td></tr><tr><td><code>*</code> <code>/</code> <code>%</code> <code>//</code></td><td>乘，除，模，整除</td></tr><tr><td><code>+</code> <code>-</code></td><td>加，减</td></tr><tr><td><code>&gt;&gt;</code> <code>&lt;&lt;</code></td><td>右移，左移</td></tr><tr><td><code>&amp;</code></td><td>按位与</td></tr><tr><td><code>^</code> <code>|</code></td><td>按位异或，按位或   (按照二进制进行逻辑运算  )</td></tr><tr><td><code>&lt;=</code> <code>&lt;</code> <code>&gt;</code> <code>&gt;=</code></td><td>小于等于，小于，大于，大于等于</td></tr><tr><td><code>==</code> <code>!=</code></td><td>等于，不等于</td></tr><tr><td><code>is</code>  , <code>is not</code></td><td>身份运算符</td></tr><tr><td><code>in</code>, <code>not in</code></td><td>成员运算符</td></tr><tr><td><code>not</code>, <code>or</code> ,<code>and</code></td><td>逻辑运算符</td></tr><tr><td><code>=</code> <code>+=</code> <code>-=</code> <code>*=</code> <code>/=</code> <code>%=</code> <code>//=</code> <code>**=</code> <code>&amp;=</code> `</td><td>=<code> </code>^=<code> </code>&gt;&gt;=<code> </code>&lt;&lt;=`</td></tr></tbody></table><h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> // <span class="number">4</span> = <span class="number">1</span>  <span class="comment">#整除</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> / <span class="number">4</span> =<span class="number">1.5</span></span><br><span class="line"><span class="number">28</span> % <span class="number">45</span> = <span class="number">28</span>    <span class="comment">#求余</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p></blockquote><h2 id="比较运算符-关系运算符"><a href="#比较运算符-关系运算符" class="headerlink" title="比较运算符(关系运算符)"></a>比较运算符(关系运算符)</h2><p>包括<code>==</code>、<code>!=</code>、<code>&lt;</code>、<code>&gt;</code>、<code>&lt;=</code>、<code>&gt;=</code>，比较运算符会产生布尔值，要么是<code>True</code>要么是<code>False</code>。</p><p>比较两个值是否相等用的是<code>==</code>，请注意这个地方是两个等号，因为<code>=</code>是赋值运算符，<code>==</code>才是比较相等的比较运算符。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一行中的多个比较</span></span><br><span class="line"><span class="number">0</span>&lt;n&lt;<span class="number">100</span></span><br><span class="line"><span class="comment"># 代替</span></span><br><span class="line">(n&gt;<span class="number">0</span>)<span class="keyword">and</span> (n&lt;<span class="number">100</span>) </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>逻辑运算符有三个，分别是<code>and</code>、<code>or</code>和<code>not</code>。</p><p><code>and</code>字面意思是“而且”，所以<code>and</code>运算符会连接两个布尔值，如果两个布尔值都是<code>True</code>，那么运算的结果就是<code>True</code>；<br>如果<code>and</code>左边的布尔值是<code>False</code>，不管右边的布尔值是什么，最终的结果都是<code>False</code>，所以在做运算的时候右边的值会被跳过（短路处理）即右边的表达式根本不会执行。</p><p><code>or</code>字面意思是“或者”，如果两个布尔值有任意一个是<code>True</code>，那么最终的结果就是<code>True</code>。当然，<code>or</code>运算符也是有短路功能的，在它左边的布尔值为<code>True</code>的情况下，右边的表达式根本不会执行。</p><p><code>not</code>运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，</p><p>逻辑运算符<br>|运算    |表达式    |结果|<br>|——|——-|—–|<br>|或运算    |x or y    |两个变量只要有一个为True则为True。|<br>|与运算    |x and y|    两个变量都为True时结果才为True。|<br>|非运算    |not x|    not的优先级比非布尔运算符低，not a == b解释为not (a == b)|</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">比较运算符和逻辑运算符的使用</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">flag0 = <span class="number">1</span> == <span class="number">1</span>     <span class="comment">#True</span></span><br><span class="line">flag1 = <span class="number">3</span> &gt; <span class="number">2</span>       <span class="comment"># flag1 = True</span></span><br><span class="line">flag2 = <span class="number">2</span> &lt; <span class="number">1</span>        <span class="comment"># flag2 = False</span></span><br><span class="line">flag3 = flag1 <span class="keyword">and</span> flag2      <span class="comment"># flag3 = False</span></span><br><span class="line">flag4 = flag1 <span class="keyword">or</span> flag2       <span class="comment"># flag4 = True</span></span><br><span class="line">flag5 = <span class="keyword">not</span> (<span class="number">1</span> != <span class="number">2</span>)        <span class="comment"># flag5 = False</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以<code>flag0 = 1 == 1</code>先做<code>1 == 1</code>产生布尔值<code>True</code>，再将这个值赋值给变量<code>flag0</code>。</p></blockquote><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有多个 and 条件时使用 all()</span></span><br><span class="line">conditions = [</span><br><span class="line">    size == <span class="string">"lg"</span>,</span><br><span class="line">    color == <span class="string">"blue"</span>,</span><br><span class="line">    price &lt; <span class="number">100</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">all</span>(conditions):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes, I want to but the product."</span>)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有多个 or 条件时使用 any()</span></span><br><span class="line">conditions = [</span><br><span class="line">    size == <span class="string">"lg"</span>,</span><br><span class="line">    color == <span class="string">"blue"</span>,</span><br><span class="line">    price &lt; <span class="number">100</span>,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(conditions):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"Yes, I want to but the product."</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>赋值运算符优先级最低，它的作用是将右边的值赋给左边的变量</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">赋值运算符和复合赋值运算符</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">a += b        <span class="comment"># 相当于：a = a + b</span></span><br><span class="line">a *= a + <span class="number">2</span>    <span class="comment"># 相当于：a = a * (a + 2)</span></span><br><span class="line"><span class="built_in">print</span>(a)      <span class="comment"># 算一下这里会输出什么</span></span><br></pre></td></tr></tbody></table></figure><h2 id="三目运算符（三元表达式）"><a href="#三目运算符（三元表达式）" class="headerlink" title="三目运算符（三元表达式）"></a>三目运算符（三元表达式）</h2><p>为真时的结果 if 判断条件 else 为假时的结果（注意，没有冒号）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">max</span> = a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实现一个基础版本（递归版本）的斐波那契数列：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h1><h2 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h2><p>map(func, seq1[, seq2,…])    将func作用于seq中的每一个元素，返回一个Iterator(迭代器)需要用list()函数获得所有结果并返回list。<br>    func参数接受一个函数名<br>    seq参数接受一个或多个可迭代的序列，返回的是一个集合。 </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">reversed</span>() 将一个序列翻转, 返回翻转序列的迭代器</span><br><span class="line"><span class="built_in">slice</span>() 列表的切片</span><br><span class="line"></span><br><span class="line">random.choice()     <span class="comment">#可以从序列中获取一个随机元素；</span></span><br></pre></td></tr></tbody></table></figure><h2 id="filter-过滤序列"><a href="#filter-过滤序列" class="headerlink" title="filter()过滤序列"></a>filter()过滤序列</h2><p>filter()把传入的函数依次作用于每个元素，然后根据返回值是True还是False决定保留还是丢弃该元素。返回一个Iterator(迭代器)需要用list()函数获得所有结果并返回list。<br>关键在于正确实现一个“筛选”函数。<br><strong>把一个序列的空字符串删掉</strong></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把一个序列的空字符串删掉</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">not_empty</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">return</span> s.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">L2 = <span class="built_in">filter</span>(not_empty, [<span class="string">'A'</span>, <span class="string">''</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'  '</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L2))</span><br></pre></td></tr></tbody></table></figure><p><strong>删掉偶数，只保留奇数</strong></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在一个list中，删掉偶数，只保留奇数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_odd</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n%<span class="number">2</span>==<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">L1=<span class="built_in">filter</span>(is_odd,[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">15</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(L1))</span><br></pre></td></tr></tbody></table></figure><h2 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h2><p>reduce(function, iterable[, initializer])<br>参数<br>    function – 函数，有两个参数<br>    iterable – 可迭代对象<br>    initializer – 可选，初始参数<br>用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>list() 将一个可迭代对象转换成列表<br>tuple() 将一个可迭代对象转换成元组<br>str() 将数据转化成字符串<br>bytes() 把字符串转化成bytes类型</p><h2 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h2><h2 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h2><h2 id="sorted-排序"><a href="#sorted-排序" class="headerlink" title="sorted()排序"></a>sorted()排序</h2><p>sorted(iterable, cmp=None, key=None, reverse=False) 函数对所有可迭代的对象进行排序操作。返回一个列表</p><p>参数：<br>    iterable – 可迭代对象。<br>    cmp – 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。<br>    key – 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。<br>    reverse – 排序规则，reverse = True 降序 ， reverse = False 升序（默认）。</p><h2 id="计数"><a href="#计数" class="headerlink" title="计数"></a>计数</h2><p>可迭代对象.count(‘’)    #返回元素在列表中出现的次数。</p><h2 id="拼接"><a href="#拼接" class="headerlink" title="拼接"></a>拼接</h2><p>序列支持+和*操作，不修改原有序列，构建一个新的序列</p><h2 id="生成器表达式"><a href="#生成器表达式" class="headerlink" title="生成器表达式"></a>生成器表达式</h2><p>列表生成式是一种漂亮优雅的东西，然而它有一个致命的缺点：它一次性把所有元素加载到内存中，当列表过长的时候，便会占据过多的内存资源，而且，我们通常仅需要使用少数的元素，这样未使用的元素所占据的绝大部分的内存，就成了不必要的支出。</p><p>生成器是一种更高级更优雅的东西，它使用“懒加载”的原理，并不生成完整的列表，而是迭代地、即时地、按需地生成元素，这样不仅能极大地节省内存空间，而且，在理论上，它可以生成一个无穷大的列表！</p><p>大多数生成器是以函数来实现的，然而，它并不返回（return）一个值，而是生成（yield）一个值，并挂起程序。然后，通过next()方法生成并马上返回一个元素，或者通过for循环，逐一生成和返回全部元素。</p><p>next()效率太低，且调用次数越界时会抛出StopIteration的异常，而for循环会自动捕捉这个异常，并停止调用，所以使用更佳。</p><p>生成器表达式与列表生成式极其形似，只是把[]改成了()，但背后的原理大不相同。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">l = [x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)]  <span class="comment"># 列表生成式，4以内整数的2倍数</span></span><br><span class="line">g = (x*<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>))  <span class="comment"># 生成器表达式</span></span><br><span class="line"><span class="built_in">type</span>(l)   <span class="comment"># 结果：&lt;type 'list'&gt;</span></span><br><span class="line"><span class="built_in">type</span>(g)   <span class="comment"># 结果：&lt;type 'generator'&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(l)  <span class="comment"># 结果：[0,2,4,6,8]</span></span><br><span class="line"><span class="built_in">print</span>(g)  <span class="comment"># 结果：&lt;generator object at 0x000002173F0EBC50&gt;</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 0</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 2</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 4</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 6</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># 8</span></span><br><span class="line"><span class="built_in">next</span>(g)   <span class="comment"># Traceback (most recent call last): ....StopIteration</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> g:</span><br><span class="line"><span class="built_in">print</span>(x, end=<span class="string">' '</span>)  <span class="comment"># 结果：0 2 4 6 8</span></span><br></pre></td></tr></tbody></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><p>迭代器是一个可以记住遍历的位置的对象。</p><p>迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><p>迭代器有两个基本的方法：iter() 和 next()。</p><h1 id="数据类型（8种）"><a href="#数据类型（8种）" class="headerlink" title="数据类型（8种）"></a>数据类型（8种）</h1><h2 id="字符串string-不可变"><a href="#字符串string-不可变" class="headerlink" title="字符串string(不可变)"></a>字符串string(不可变)</h2><ul><li><p>Python 中单引号 ‘ 和双引号 “ 使用完全相同。</p></li><li><p>转义符 ,反斜杠可以用来转义，使用 r 可以让反斜杠不发生转义。 如 r”this is a line with \n” 则 \n<br>会显示，并不是换行。</p></li><li><p>Python 不支持单字符类型，一个字符就是长度为 1 的字符串。</p></li><li></li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#替换某个字符</span></span><br><span class="line">a=a.replace(<span class="string">'-'</span>,<span class="string">''</span>)     <span class="comment">#用空字符串代替-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#转义字符 \</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"The \t is a tab"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'I\'m going to the movies'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Python三引号</span></span><br><span class="line"><span class="comment">#保证字符串的格式是所见即所得</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'''I'm going to \nthe movies'''</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"He-ll-o "</span></span><br><span class="line">b = <span class="string">"World "</span></span><br><span class="line"><span class="built_in">print</span>(a + b)   <span class="comment">#字符串连接：+</span></span><br><span class="line"><span class="built_in">print</span>(a * <span class="number">3</span>)    <span class="comment">#重复输出字符串：*</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#成员运算符判断字符串中是否包含给定的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'e'</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'e'</span> <span class="keyword">not</span> <span class="keyword">in</span> a)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="索引与截取"><a href="#索引与截取" class="headerlink" title="索引与截取"></a>索引与截取</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#通过索引获取字符串中字符</span></span><br><span class="line">a[<span class="number">0</span>]   <span class="comment">#从前面索引</span></span><br><span class="line">a[-<span class="number">1</span>] <span class="comment">#从后面索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#变量[头下标:尾下标:步长]</span></span><br><span class="line"><span class="comment">#字符串截取[:] 牢记：左闭右开</span></span><br><span class="line"><span class="built_in">str</span>=<span class="string">"hello"</span></span><br><span class="line"><span class="built_in">str</span>[<span class="number">1</span>:<span class="number">4</span>]=<span class="string">"ell"</span></span><br><span class="line"><span class="built_in">str</span>[:]=<span class="built_in">str</span>[<span class="number">0</span>:]</span><br></pre></td></tr></tbody></table></figure><h3 id="字符串驻留机制"><a href="#字符串驻留机制" class="headerlink" title="字符串驻留机制"></a>字符串驻留机制</h3><p>对相同字符串，只保留一份拷贝，后续创建相同字符串时，不会开辟新空间，而是把该字符串的地址赋给新创建的相同字符串对应的变量</p><h4 id="驻留机制的几种情况："><a href="#驻留机制的几种情况：" class="headerlink" title="驻留机制的几种情况："></a>驻留机制的几种情况：</h4><p>字符串长度为0或1时<br>符合标识符的字符串<br>字符串只在编译时进行驻留，而非运行时<br>[-5,256]之间的整数</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p>当需要值相同的字符串时，可以直接从字符池里拿来用，避免频繁的创建和销毁，提升效率和节约内存</p><h3 id="去除指定字符"><a href="#去除指定字符" class="headerlink" title="去除指定字符"></a>去除指定字符</h3><p>s.strip(rm)        删除s字符串中头尾指定字符<br>s.lstrip(rm)       删除s字符串中开头处<br>s.rstrip(rm)      删除s字符串中结尾处</p><p>replace()去除中间字符<code>print(str.replace('\n', ''))</code></p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">line.strip().split(<span class="string">','</span>)      <span class="comment">#链式函数写法，strip()，就是去掉改行头尾空格和换行符。然后对strip()的结果进行split(',')，对结果以逗号的进行切分形成一个数组。</span></span><br></pre></td></tr></tbody></table></figure><h3 id="分隔字符串存为列表"><a href="#分隔字符串存为列表" class="headerlink" title="分隔字符串存为列表"></a>分隔字符串存为列表</h3><p>str.split(str=””, num=string.count<br>指定字符串中某个字符作为分隔符对字符串进行分隔，存为列表。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> =  <span class="string">"he-el"</span></span><br><span class="line"><span class="built_in">str</span>.split(<span class="string">"-"</span>)  <span class="comment">#['he', 'el']</span></span><br></pre></td></tr></tbody></table></figure><h3 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 以指定字符作为拼接符，将字符串中所有的元素合并为一个新的字符串</span></span><br><span class="line">new_str = <span class="string">'-'</span>.join(<span class="string">'Hello'</span>)</span><br><span class="line">H-e-l-l-o</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组转字符串</span></span><br><span class="line">turple=(<span class="string">'he'</span>, <span class="string">'olle'</span>)</span><br><span class="line">new_str = <span class="string">''</span>.join(turple)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表转字符串</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">''</span>.join([<span class="string">'he'</span>, <span class="string">'el'</span>]))</span><br></pre></td></tr></tbody></table></figure><p>字符串拼接时建议使用str类型的join方法，而非+，<br>因为join()是先计算出所有字符中的长度，然后再拷贝，只new一次对象，效率更高</p><h3 id="字符串解码"><a href="#字符串解码" class="headerlink" title="字符串解码"></a>字符串解码</h3><p>str.decode(encoding=’UTF-8’,errors=’strict’)  该方法返回解码后的字符串。</p><pre><code>encoding -- 要使用的编码，如"UTF-8"。errors -- 设置不同错误的处理方案。默认为 'strict',意为编码错误引起一个UnicodeError。 其他可能得值有 'ignore', 'replace', 'xmlcharrefreplace', 'backslashreplace' 以及通过 codecs.register_error() 注册的任何值。</code></pre><h2 id="list（列表）"><a href="#list（列表）" class="headerlink" title="list（列表）"></a>list（列表）</h2><p>List（列表）类似于栈</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>特点<br>1.查找和插入的时间随着元素的增加而增加；<br>2.占用空间小，浪费内存很少。<br>有序可重复集合，有序指按照元素的添加顺序来储存</p><h3 id="创建列表"><a href="#创建列表" class="headerlink" title="创建列表"></a>创建列表</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list_b = <span class="built_in">list</span>(<span class="string">"abc"</span>) <span class="comment">#  ['a', 'b', 'c']  字符串转列表</span></span><br><span class="line">list_c = <span class="built_in">list</span>((<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)) <span class="comment">#  [4, 5, 6]  元组转列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结合range()函数，range(start, stop[, step])</span></span><br><span class="line">list_k = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">3</span>,<span class="number">100</span>,<span class="number">3</span>)) <span class="comment"># list_k == [3, 6, 9, ..., 96, 99]  # 找出100以内的能够被3整除的正整数</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="列表生成式"><a href="#列表生成式" class="headerlink" title="列表生成式"></a>列表生成式</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lst = [[<span class="number">0</span>]*<span class="number">10</span> <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(k)] <span class="comment">#输出一个k行10列的矩阵</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">l=[<span class="string">'H'</span>,<span class="string">'Q'</span>]</span><br><span class="line"><span class="comment"># 将一个列表中所有字符串变小写</span></span><br><span class="line">a = [s.lower() <span class="keyword">for</span> s <span class="keyword">in</span> l]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成扑克所有组合</span></span><br><span class="line">a =[<span class="string">'黑桃'</span>,<span class="string">'草花'</span>,<span class="string">'红桃'</span>,<span class="string">'方块'</span>]</span><br><span class="line">b=[<span class="string">'A'</span>,<span class="string">'1'</span>,<span class="string">'2'</span>,<span class="string">'3'</span>,<span class="string">'4'</span>,<span class="string">'5'</span>,<span class="string">'6'</span>,<span class="string">'7'</span>,<span class="string">'8'</span>,<span class="string">'9'</span>,<span class="string">'10'</span>,<span class="string">'J'</span>,<span class="string">'K'</span>,<span class="string">'Q'</span>]</span><br><span class="line"><span class="built_in">print</span>([m+n <span class="keyword">for</span> m <span class="keyword">in</span> a <span class="keyword">for</span> n <span class="keyword">in</span> b ])</span><br><span class="line"></span><br><span class="line">list_d = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_a]  <span class="comment"># list_d == [1, 2, 3]</span></span><br><span class="line">list_e = [i*j <span class="keyword">for</span> i <span class="keyword">in</span> list_a <span class="keyword">for</span> j <span class="keyword">in</span> list_c] <span class="comment"># list_e == [4,5,6,10,12,12,15,18]</span></span><br><span class="line">list_f = [i*j <span class="keyword">for</span> i,j <span class="keyword">in</span> <span class="built_in">zip</span>(list_a,list_c)] <span class="comment"># list_f == [4, 10, 18]</span></span><br><span class="line">list_g = [i <span class="keyword">for</span> i <span class="keyword">in</span> list_a <span class="keyword">if</span> i%<span class="number">2</span> == <span class="number">0</span>] <span class="comment"># list_g == [2]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列表的索引和截取"><a href="#列表的索引和截取" class="headerlink" title="列表的索引和截取"></a>列表的索引和截取</h3><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。<br>列表截取的语法格式如下：<br>变量[头下标:尾下标]</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获得列表中元素和下标</span></span><br><span class="line">lst = [<span class="string">"blue"</span>, <span class="string">"lightblue"</span>, <span class="string">"pink"</span>, <span class="string">"orange"</span>, <span class="string">"red"</span>]</span><br><span class="line"><span class="keyword">for</span> idx, item <span class="keyword">in</span> <span class="built_in">enumerate</span>(lst):</span><br><span class="line">     <span class="built_in">print</span>(idx, item)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="扩充列表"><a href="#扩充列表" class="headerlink" title="扩充列表"></a>扩充列表</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1.append()函数无返回值，但是会修改原本的列表。在列表尾部添加单个新元素。</span></span><br><span class="line">lst = [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]</span><br><span class="line">lis.append(<span class="string">'4'</span>) <span class="comment"># 在末尾添加元素</span></span><br><span class="line">lst.append(lst)  <span class="comment">#[3, 2, 1, […]]，其中“…”表示无穷递归</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2.insert()方法，在列表中指定位置添加元素。如果指定的下标不存在，就在末尾添加</span></span><br><span class="line">list1.insert(<span class="number">2</span>, <span class="string">'o'</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.用 “+” 运算符，将两个列表拼接出一个新列表。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4.用extend()方法，在一个列表后面拼接进另一个列表。</span></span><br><span class="line">list1.extend(list2) <span class="comment">#将list2合并到list1，list2不变</span></span><br></pre></td></tr></tbody></table></figure><h3 id="删减列表"><a href="#删减列表" class="headerlink" title="删减列表"></a>删减列表</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">list_1 = list_2 = list_3 = list_4 = [<span class="string">'I'</span>, <span class="string">'am'</span>, <span class="string">'very'</span>, <span class="string">'happy'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list_1[<span class="number">0</span>]  <span class="comment"># 1.删除指定索引m处的元素。</span></span><br><span class="line"></span><br><span class="line">list_2.remove(<span class="string">'I'</span>) <span class="comment"># 2.删除指定值的元素（第一个匹配项）。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_3.pop() <span class="comment"># 3.取出并删除列表末尾的单个元素。</span></span><br><span class="line"></span><br><span class="line">list_4.pop(<span class="number">0</span>)  <span class="comment"># 4.取出并删除索引值为m的元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清空与销毁</span></span><br><span class="line">list_a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">list_b = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment"># 5.用clear()方法，清空列表的元素。</span></span><br><span class="line">list_b.clear()   <span class="comment"># list_b == []</span></span><br><span class="line"><span class="comment"># 6.用del list 语句，销毁整个列表。</span></span><br><span class="line"><span class="keyword">del</span> list_a   <span class="comment"># 没有list_a了，再使用则会报错</span></span><br></pre></td></tr></tbody></table></figure><h3 id="列表切片："><a href="#列表切片：" class="headerlink" title="列表切片："></a>列表切片：</h3><p>基本格式：[i : i+n : m] ；从第i位索引起，向右取到后n位元素为止，按m间隔过滤<br>i 是切片的起始索引值，为列表首位时可省略；<br>i+n 是切片的结束位置，为列表末位时可省略；<br>m 可以不提供，默认值是1，不允许为0，当m为负数时，列表翻转。注意：这些值都可以大于列表长度，不会报越界。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">li = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">11</span>, <span class="number">14</span>, <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以下写法都可以表示整个列表，其中 X &gt;= len(li)</span></span><br><span class="line">li[<span class="number">0</span>:X] == li[<span class="number">0</span>:] == li[:X] == li[:] == li[::] == li[-X:X] == li[-X:]</span><br><span class="line"></span><br><span class="line">li[<span class="number">1</span>:<span class="number">5</span>] == [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>] <span class="comment"># 从1起，取5-1位元素</span></span><br><span class="line">li[<span class="number">1</span>:<span class="number">5</span>:<span class="number">2</span>] == [<span class="number">4</span>,<span class="number">6</span>] <span class="comment"># 从1起，取5-1位元素，按2间隔过滤</span></span><br><span class="line">li[-<span class="number">1</span>:] == [<span class="number">16</span>] <span class="comment"># 取倒数第一个元素</span></span><br><span class="line">li[-<span class="number">4</span>:-<span class="number">2</span>] == [<span class="number">9</span>, <span class="number">11</span>] <span class="comment"># 从倒数第四起，取-2-(-4)=2位元素</span></span><br><span class="line">li[:-<span class="number">2</span>] == li[-<span class="built_in">len</span>(li):-<span class="number">2</span>] == [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">9</span>,<span class="number">11</span>] <span class="comment"># 从头开始，取-2-(-len(li))=7位元素</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意列表先翻转，再截取</span></span><br><span class="line">li[::-<span class="number">1</span>] == [<span class="number">16</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">9</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">1</span>] <span class="comment"># 翻转整个列表</span></span><br><span class="line">li[::-<span class="number">2</span>] == [<span class="number">16</span>,<span class="number">11</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">1</span>] <span class="comment"># 翻转整个列表，再按2间隔过滤</span></span><br><span class="line">li[:-<span class="number">5</span>:-<span class="number">1</span>] == [<span class="number">16</span>,<span class="number">14</span>,<span class="number">11</span>,<span class="number">9</span>] <span class="comment"># 翻转整个列表，取-5-(-len(li))=4位元素</span></span><br><span class="line">li[:-<span class="number">5</span>:-<span class="number">3</span>] == [<span class="number">16</span>,<span class="number">9</span>] <span class="comment"># 翻转整个列表，取-5-(-len(li))=4位元素，再按3间隔过滤</span></span><br><span class="line"></span><br><span class="line">li[::<span class="number">0</span>]  <span class="comment"># 报错（ValueError: slice step cannot be zero）</span></span><br></pre></td></tr></tbody></table></figure><h3 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>.index() <span class="comment">#查找指定值的元素的索引位置（第一个匹配项）。</span></span><br></pre></td></tr></tbody></table></figure><p>用len()方法，统计全部元素的个数。</p><p>列表对象.count(‘’)方法，返回元素在列表中出现的次数。</p><p>用max()方法，统计元素中的最大值（要求元素类型相同；数字类型直接比较，其它类型比较id）</p><p>用min()方法，统计元素中的最小值（要求元素类型相同；数字类型直接比较，其它类型比较id）</p><p>用reverse()方法，翻转列表中的元素。</p><p>用copy()方法，浅拷贝并生成新的列表。</p><p>用deepcopy()方法，深拷贝并生成新的列表。</p><p>用sort()方法，在原列表基础上进行排序。</p><p>用sorted()方法，将新列表基础上对原列表的元素进行排序。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">56</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">b = <span class="built_in">set</span>(a)   <span class="comment">#列表去重(删除list中的重复元素)</span></span><br><span class="line">c = a[::-<span class="number">1</span>]  <span class="comment">#反转列表</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_1 = [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line"><span class="built_in">len</span>(list_1) == <span class="number">5</span></span><br><span class="line">list_1.count(<span class="number">10</span>) == <span class="number">1</span> <span class="comment"># 元素10的数量为1</span></span><br><span class="line">list_1.index(<span class="number">10</span>) == <span class="number">1</span> <span class="comment"># 元素10的索引为1</span></span><br><span class="line">list_1.reverse() <span class="comment"># list_1 == [(33, 44), ['hi', 1, 2], '2018-10-1', 10, 2018]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较浅拷贝与深拷贝</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">list_a = [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line">list_b = [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line">list_c = list_a.copy() <span class="comment"># list_c == [2018, 10, '2018-10-1', ['hi', 1, 2], (33, 44)]</span></span><br><span class="line">list_d = copy.deepcopy(list_a) <span class="comment"># list_d == [2018, 10, '2018-10-1', ['hi', 1, 2], (33, 44)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 改变原列表中的可变对象元素</span></span><br><span class="line">list_a[<span class="number">3</span>].append(<span class="string">'new'</span>) <span class="comment"># list_a == [2018, 10, '2018-10-1', ['hi', 1, 2, 'new'], (33, 44)]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 浅拷贝中的可变对象会随原列表变化而变化</span></span><br><span class="line">list_c == [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="string">'new'</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 深拷贝中的可变对象不会随原列表变化而变化</span></span><br><span class="line">list_d == [<span class="number">2018</span>, <span class="number">10</span>, <span class="string">'2018-10-1'</span>, [<span class="string">'hi'</span>, <span class="number">1</span>, <span class="number">2</span>], (<span class="number">33</span>, <span class="number">44</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较sort() 与 sorted()</span></span><br><span class="line">list_1 = list_2 = [<span class="number">2</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">3</span>]</span><br><span class="line">list_1.sort() <span class="comment"># 原列表变化：list_1 == [1,2,3,4,5,6]</span></span><br><span class="line">list_3 = <span class="built_in">sorted</span>(list_2) <span class="comment"># 原列表不变：list_2 == [2,1,4,6,5,3]; list_3 == [1,2,3,4,5,6]</span></span><br></pre></td></tr></tbody></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>list.sort(cmp=None, key=None, reverse=False)</p><pre><code>[cmp]   -- 可选参数, 如果指定了该参数会使用该参数的方法进行排序。[key]   排序规则(排序函数), 在sorted内部会将可迭代对象中的每一个元素传递给这个函数的参数. 根据函数运算的结果进行排序。[reverse] -- 排序规则，默认升序，True为降序</code></pre><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">li = [[<span class="number">1</span>, <span class="number">7</span>], [<span class="number">1</span>, <span class="number">5</span>], [<span class="number">2</span>, <span class="number">4</span>], [<span class="number">1</span>, <span class="number">1</span>]]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span>(<span class="params">li</span>):</span></span><br><span class="line"><span class="keyword">return</span> li[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入了key参数的sort()函数对li中的每个子元素[1,7],[1,5],[2,4],[1,1]都执行了fun()函数，返回它们的第1个数</span></span><br><span class="line"><span class="comment"># 分别为7,5,4,1。然后再排序得到1,4,5,7。使的出的结果对本来的li进行排序最后就得到了[[1,1],[2,4],[1,5],[1,7]]。</span></span><br><span class="line"><span class="comment"># 指定第二个元素排序</span></span><br><span class="line">li.sort(key=fun)</span><br><span class="line"><span class="built_in">print</span>(li)</span><br></pre></td></tr></tbody></table></figure><h2 id="tuple（元组）"><a href="#tuple（元组）" class="headerlink" title="tuple（元组）"></a>tuple（元组）</h2><p>与列表类似，但是元组中的内容不可修改</p><p>元组比列表更节省内存。</p><p>在时间效率方面，元组再次比列表有一点优势，尤其是在考虑查找值时。</p><p>如果有最初不打算更改的数据，则应选择元组数据类型而不是列表。但是，如果知道数据会在应用程序运行时增长和缩小，则需要使用列表数据类型。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#元组中只有一个元素时，需要在后面加逗号！</span></span><br><span class="line">tup = (<span class="string">'hello'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment">#将列表转换成元组</span></span><br><span class="line"><span class="built_in">list</span> = [<span class="number">14</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">15</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">12</span>, <span class="number">5</span>, <span class="number">15</span>, <span class="number">8</span>]</span><br><span class="line">t = <span class="built_in">tuple</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#tuple转换为list：</span></span><br><span class="line"><span class="built_in">list</span>(tupl)     <span class="comment">#接受一个元组并返回一个列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#元组的修改：</span></span><br><span class="line">t1 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)+(<span class="number">4</span>,<span class="number">5</span>)   <span class="comment">#(1, 2, 3, 4, 5)</span></span><br><span class="line">t2 = (<span class="number">1</span>,<span class="number">2</span>) * <span class="number">2</span>      <span class="comment">#(1, 2, 1, 2)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#统计元组中4的个数</span></span><br><span class="line"><span class="built_in">print</span>(t1.count(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#元组中4所对应的下标，如果不存在，则会报错</span></span><br><span class="line"><span class="built_in">print</span>(t.index(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">#判断元组中是否存在1这个元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span> <span class="keyword">in</span> t)</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回元组中4所对应的下标,不会报错</span></span><br><span class="line"><span class="keyword">if</span>(<span class="number">4</span> <span class="keyword">in</span> t):</span><br><span class="line">    <span class="built_in">print</span>(t.index(<span class="number">4</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="元组的拆包与装包"><a href="#元组的拆包与装包" class="headerlink" title="元组的拆包与装包"></a>元组的拆包与装包</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#定义一个元组</span></span><br><span class="line">t3 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="comment">#将元组赋值给变量a,b,c</span></span><br><span class="line">a,b,c = t3</span><br><span class="line"><span class="comment">#打印a,b,c</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当元组中元素个数与变量个数不一致时</span></span><br><span class="line"><span class="comment">#定义一个元组，包含5个元素</span></span><br><span class="line">t4 = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line"><span class="comment">#将t4[0],t4[1]分别赋值给a,b;其余的元素装包后赋值给c</span></span><br><span class="line">a,b,*c = t4</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(*c)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="字典-dict"><a href="#字典-dict" class="headerlink" title="字典(dict)"></a>字典(dict)</h2><p>使用键-值（key-value）存储</p><p>1.查找和插入的速度极快，不会随着key的增加而变慢；<br>2.需要占用大量的内存，内存浪费多。<br>但键必须是不可变的，如字符串，数字或元组。</p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加键值对</span></span><br><span class="line">dic={}</span><br><span class="line">dic[<span class="string">'name'</span>]=<span class="string">'zhangsan'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">'key'</span>]  <span class="comment">#删除某个键值</span></span><br><span class="line"><span class="keyword">del</span> dit          <span class="comment">#删除整个字典</span></span><br><span class="line">dit.clear()     <span class="comment">#将字典置空</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dit.get(key,default)    <span class="comment">#返回一个值，若没有返回default</span></span><br><span class="line">dit[key]=<span class="string">''</span>     <span class="comment">#修改字典的值</span></span><br><span class="line">dit[key]=value      <span class="comment">#添加值</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dit[key]        <span class="comment"># 由键访问字典的值</span></span><br><span class="line">dit.keys()   <span class="comment">#返回所有键的列表</span></span><br><span class="line">dit.values()    <span class="comment">#返回所有 valuel的列表</span></span><br><span class="line">dit.items()     <span class="comment">#返回所有键值对的列表</span></span><br><span class="line"><span class="comment">#同时迭代key和value</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> dit.items():</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = {<span class="string">'a'</span>:<span class="number">1</span>,<span class="string">'b'</span>:<span class="number">2</span>}</span><br><span class="line">b = {<span class="string">'c'</span>:<span class="number">3</span>}</span><br><span class="line">c = {**a,**b}   <span class="comment">#合并两个字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="将列表转换为字典"><a href="#将列表转换为字典" class="headerlink" title="将列表转换为字典"></a>将列表转换为字典</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 使用两个list生成一个字典</span></span><br><span class="line">keys = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">vals = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">dic = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys, vals))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#list可以转成字典，但前提是列表中元素都要成对出现</span></span><br><span class="line">lis=[(<span class="string">'name'</span>,<span class="string">'杨超越'</span>),(<span class="string">'weight'</span>,<span class="number">45</span>)]</span><br><span class="line">dic = <span class="built_in">dict</span>(lis)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="按value排序"><a href="#按value排序" class="headerlink" title="按value排序"></a>按value排序</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">d = {</span><br><span class="line">    <span class="string">"v1"</span>: <span class="number">80</span>,</span><br><span class="line">    <span class="string">"v2"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">"v3"</span>: <span class="number">40</span>,</span><br><span class="line">    <span class="string">"v4"</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="string">"v5"</span>: <span class="number">10</span>,</span><br><span class="line">}</span><br><span class="line">sorted_d = <span class="built_in">dict</span>(<span class="built_in">sorted</span>(d.items(), key=<span class="keyword">lambda</span> item: item[<span class="number">1</span>]))</span><br><span class="line"><span class="built_in">print</span>(sorted_d)</span><br></pre></td></tr></tbody></table></figure><h3 id="字典推导"><a href="#字典推导" class="headerlink" title="字典推导"></a>字典推导</h3><h2 id="number（数字）"><a href="#number（数字）" class="headerlink" title="number（数字）"></a>number（数字）</h2><p>Number 数据类型用于存储数值，包括整数、浮点型、复数</p><p>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。<br>float (浮点数), 如 1.23、3E-2<br>complex (复数), 如 1 + 2j、 1.1 + 2.2j</p><p>2 / 4  # 除法，得到一个浮点数0.5<br>2 // 4 # 除法，得到一个整数0<br>17 % 3 # 取余      2<br>2 ** 5 # 乘方        32</p><h3 id="math-模块"><a href="#math-模块" class="headerlink" title="math 模块"></a>math 模块</h3><p>Python 中数学运算常用的函数基本都在 math 模块 </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">4.1</span>))   <span class="comment">#返回数字的上入整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">4.9</span>))  <span class="comment">#返回数字的下舍整数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.fabs(-<span class="number">10</span>))   <span class="comment">#返回数字的绝对值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.sqrt(<span class="number">9</span>))     <span class="comment">#返回数字的平方根</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(math.exp(<span class="number">1</span>))      <span class="comment">#返回e的x次幂</span></span><br></pre></td></tr></tbody></table></figure><h3 id="Python随机数"><a href="#Python随机数" class="headerlink" title="Python随机数"></a>Python随机数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment">#随机生成[0,1)的实数</span></span><br><span class="line">ran1 = random.random()</span><br><span class="line"></span><br><span class="line"><span class="comment">#从指定范围内，按指定基数递增的集合中 获取一个随机数</span></span><br><span class="line">random.randrange ([start], stop, step])</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="set（集合）"><a href="#set（集合）" class="headerlink" title="set（集合）"></a>set（集合）</h2><p>是一个无序不重复的序列,无序即每添加一个元素，都会按照内部算法将元素添加到合适位置<br>用于成员关系测试，删除重复元素<br>a=set (‘abcd’)   #与a={‘a’,’b’,’c’,’d’}等价</p><p>创建空集合只能使用<code>set()</code>，因为<code>{}</code>用来创建空字典。</p><h2 id="Boolean（布尔值）"><a href="#Boolean（布尔值）" class="headerlink" title="Boolean（布尔值）"></a>Boolean（布尔值）</h2><p>总结一下为假的情况有：</p><p>None, False<br>数值中的0, 0.0, 0j(虚数), Decimal(0), Fraction(0, 1)<br>空字符串(‘’)、空元组(())、空列表([])<br>空字典({})、空集合(set())<br>对象默认为True，除非它有bool()方法且返回False或len()方法且返回0.</p><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>(位置参数、默认参数、可变参数、关键字参数、命名关键字参数、参数组合）</p><h3 id="实参和形参"><a href="#实参和形参" class="headerlink" title="实参和形参"></a>实参和形参</h3><p>实参与形参存储在各自的内存空间中，是两个不相关的独立变量<br>在参数内部改变形参的值，实参的值一般是不会改变的。</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>(*参数与**参数)是Python参数中的重点知识，他们都被称为可变参数（任意参数）</p><p>可变参数，必须定义在普通参数（也称位置参数、必选参数、选中参数等名称）以及默认值参数的后面，这是因为可变参数会收集所有【未匹配】的参数，如果将可变参数定义在前面，那么普通参数与默认值参数就无法匹配到传入的参数，因为全都收集到可变参数中了</p><p>可变参数出现在函数的不同的位置上时，具备不同的功能<br><strong>在函数定义时：</strong><br>表示可变参数<br>函数定义时，二者同时存在，一定需要将<em>args放在**kwargs之前<br>1、</em>参数收集所有未匹配的位置参数组成一个tuple对象，局部变量args指向此tuple对象<br>2、*<em>参数收集所有未匹配的关键字参数组成一个dict对象，局部变量kwargs指向此dict对象<br>1、</em>args表示可接受任意个（包含0个）位置参数，当函数调用时，所有未使用（未匹配）的位置参数会在函数内自动组装进一个tuple对象中，此tuple对象会赋值给局部变量args</p><p>2、**kwargs表示可接受任意个（包含0个）关键字参数，当函数调用时，所有未使用（未匹配）的关键字参数会在函数内组装进一个dict对象中，此dict对象会赋值给局部变量kwargs</p><p><strong>在函数调用时：</strong><br>表示解包功能</p><p>1、*args表示解包元组对象中的每个元素作为位置参数传入到被调用函数中<br>2、**kwargs表示解包字典对象中的每个元素作为关键字参数传入到被调用函数中</p><p>函数调用时传入的参数，会按照从左到右的顺序依次在函数中使用，最左侧的参数先由位置参数first使用（匹配），剩下的所有未匹配的参数会被自动收集到1个新的tuple对象中，而局部变量second会指向这个新的tuple对象</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, *second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"></span><br><span class="line">print_str(<span class="string">"hello"</span>,<span class="string">"美女"</span>,<span class="string">"小猫"</span>,<span class="string">"青蛙"</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="解包"><a href="#解包" class="headerlink" title="解包"></a>解包</h3><p><em>numbers_strings出现在函数调用时，称为解包（一个“</em>”字符后面紧挨着1个tuple对象），numbers_strings自身是一个tuple对象，所以也称为元组的解包，tuple中的元素解包成一个一个的位置参数传入到函数中，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_str</span>(<span class="params">first, *second</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(first)</span><br><span class="line">    <span class="built_in">print</span>(second)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">numbers_strings = (<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>,<span class="string">"5"</span>)</span><br><span class="line">print_str(*numbers_strings) <span class="comment">#注意这里的*numbers_strings</span></span><br></pre></td></tr></tbody></table></figure><p>解包功能不只是tuple、还有list、str、range</p><h2 id="return返回值"><a href="#return返回值" class="headerlink" title="return返回值"></a>return返回值</h2><p>函数使用return返回值，也可以使用lambda表达式作为函数的返回值</p><p>一个函数只有一个返回值，但是可以通过返回列表或元组的方式将返回的多个值保存到序列中，从而间接达到返回多个值的目的。默认以元组返回</p><p>return语句只能出现在函数体内，执行到return这一步时，会退出函数，即使是在一个循环体内，程序也不会再执行</p><p>print仅仅是打印在控制台，<br>return则是将return后面的部分作为返回值：作为函数的输出，可以用变量接走，继续使用该返回值做其它事。</p><p>如果一个函数没有reutrn语句，其实它有一个隐含的return语句，返回值是None，类型也是’NoneType’。</p><h3 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h3><h4 id="zip"><a href="#zip" class="headerlink" title="zip()"></a>zip()</h4><p>zip() 函数是 Python 内置函数之一，它可以将多个序列（列表、元组、字典、集合、字符串以及 range() 区间构成的列表）“压缩”成一个 zip 对象。所谓“压缩”，其实就是将这些序列中对应位置的元素，生成一个个新的元组。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">zip</span>({<span class="number">31</span>:<span class="number">2</span>,<span class="number">32</span>:<span class="number">4</span>,<span class="number">33</span>:<span class="number">5</span>})])  <span class="comment">#[(31,), (32,), (33,)]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>([x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">zip</span>(<span class="string">"python"</span>,<span class="string">"shell"</span>)])  <span class="comment">#[('p', 's'), ('y', 'h'), ('t', 'e'), ('h', 'l'), ('o', 'l')]</span></span><br></pre></td></tr></tbody></table></figure><h4 id="range"><a href="#range" class="headerlink" title="range"></a>range</h4><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">range</span>(<span class="number">5</span>)    <span class="comment">#0-4</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>)     <span class="comment">#产生1到100范围的整数，相当于前面是闭区间后面是开区间。</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">1</span>, <span class="number">101</span>, <span class="number">2</span>)  <span class="comment">#产生1到100的奇数，其中2是步长，即每次数值递增的值。</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">100</span>, <span class="number">0</span>, -<span class="number">2</span>) <span class="comment">#产生100到1的偶数，其中-2是步长，即每次数字递减的值。</span></span><br></pre></td></tr></tbody></table></figure><h4 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h4><p>bin() 将给的参数转换成二进制<br>otc() 将给的参数转换成八进制<br>hex() 将给的参数转换成十六进制</p><h4 id="数学运算"><a href="#数学运算" class="headerlink" title="数学运算"></a>数学运算</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">abs</span>() 返回绝对值</span><br><span class="line"><span class="built_in">round</span>() 四舍五入</span><br><span class="line"><span class="built_in">pow</span>(a, b) 求a的b次幂, 如果有三个参数. 则求完次幂后对第三个数取余</span><br><span class="line"><span class="built_in">sum</span>() 求和</span><br><span class="line"><span class="built_in">min</span>() 求最小值</span><br><span class="line"><span class="built_in">max</span>() 求最大值</span><br><span class="line"><span class="built_in">divmod</span>(<span class="number">20</span>,<span class="number">3</span>) <span class="comment"># 求商和余数:(6,2)</span></span><br></pre></td></tr></tbody></table></figure><h4 id="set"><a href="#set" class="headerlink" title="set"></a>set</h4><p>set() 函数创建一个无序不重复元素集合，可进行关系测试，删除重复数据，还可以计算交集、差集、并集等<br>set([iterable])<br>参数：<br>    iterable – 可迭代对象对象；<br>返回值：<br>    返回新的集合对象。</p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>匿名函数lambda：是指一类无需定义函数名的函数，可以接收任意多个参数 (包括可选参数) 并且返回单个表达式的值。<br>lambda 参数 : 表达式</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> x:x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个x，在冒号前，表示判断等效于 if x : ,后面则为返回x ,也可以对x进行操作</span></span><br><span class="line"><span class="keyword">if</span>  x ：</span><br><span class="line">    <span class="keyword">return</span> x </span><br></pre></td></tr></tbody></table></figure><h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title="高阶函数"></a>高阶函数</h3><p>接受函数为参数，或者把函数作为结果返回值的函数</p><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器函数的参数是一个函数，返回值也是一个函数。</p><h3 id="特殊方法-双下方法"><a href="#特殊方法-双下方法" class="headerlink" title="特殊方法(双下方法)"></a>特殊方法(双下方法)</h3><h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><h2 id="模块（module）"><a href="#模块（module）" class="headerlink" title="模块（module）"></a>模块（module）</h2><p>Python 模块(Module)，是一个 Python 文件，以 .py 结尾，文件名就是模块名。包含了 Python 对象定义和Python语句。</p><p>使用python模块大大提高了代码的可维护性和代码复用性,避免了函数名与变量名冲突。</p><p>if <strong>name</strong> == ‘<strong>main</strong>‘的意思是：当.py文件被直接运行时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块将被运行；</p><p>当.py文件以模块形式被导入时，if <strong>name</strong> == ‘<strong>main</strong>‘之下的代码块不被运行。</p><h2 id="包-package"><a href="#包-package" class="headerlink" title="包( package)"></a>包( package)</h2><p>在比較大型的项目中常常需要编写、用到大量的模块，此时我们可以使用包( Package)来管理这些模块。</p><p>包是一个分层次的文件目录结构，简单来说，包就是文件夹，但该文件夹下必须存在 <strong>init</strong>.py 文件, 该文件的内容可以为空。<strong>init</strong>.py 用于标识当前文件夹是一个包。</p><p>我们在导入包的时候，实际上是导入了它的 <strong>init</strong>.py文件文件。</p><h2 id="库"><a href="#库" class="headerlink" title="库"></a>库</h2><p>对于库的定义，和包（Package）有点类似。一般能定义成库的，基本上都是完成了特定功能的实现，并得到使用者的肯定，但库的本质是“包”/“模块”。</p><p>例如django库，对于使用的人来说，他是一个库；但是对于该库作者来说，django就是他写的一个包。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> somemodule <span class="comment">#导入整个模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> *    <span class="comment">#导入库中的所有类、函数、变量等信息,调用相关函数或变量时，就不需要加somemodule前缀</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> somefunction    <span class="comment">#从某个模块中导入某个函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> firstfunc, secondfunc, thirdfunc     <span class="comment">#从某个模块中导入多个函数 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> 包名[.模块名[<span class="keyword">as</span>别名]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 包名 <span class="keyword">import</span> 模块名[<span class="keyword">as</span>别名]</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> 包名.模块名 <span class="keyword">import</span>成员名[<span class="keyword">as</span>别名]</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pip 安装第三方库速度太慢,可设置 pip 从国内的镜像源下载安装</span><br><span class="line"></span><br><span class="line">阿里云 http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">豆瓣 http://pypi.douban.com/simple/</span><br><span class="line">清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学 http://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 临时使用</span></span><br><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple xxxxxxx</span><br><span class="line"></span><br><span class="line"><span class="comment"># 永久设置</span></span><br><span class="line">pip config <span class="built_in">set</span> <span class="keyword">global</span>.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></tbody></table></figure><h2 id="依赖包导入导出"><a href="#依赖包导入导出" class="headerlink" title="依赖包导入导出"></a>依赖包导入导出</h2><p>在terminal中输入：</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">pip freeze &gt; requirements.txt  #1.将依赖包导出至requirements文件</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">pip install -r requirements.txt #2.从requirements文件中导入依赖包</span><br></pre></td></tr></tbody></table></figure><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h2><p>在Python中可以使用class关键字定义类</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="comment"># 通过这个方法我们可以为学生对象绑定name和age两个属性</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self, course_name</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s正在学习%s.'</span> % (self.name, course_name))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># PEP 8要求标识符的名字用全小写多个单词用下划线连接</span></span><br><span class="line">    <span class="comment"># 但是部分程序员和公司更倾向于使用驼峰命名法(驼峰标识)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_movie</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.age &lt; <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s只能观看《熊出没》.'</span> % self.name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在观看岛国爱情大电影.'</span> % self.name)</span><br></pre></td></tr></tbody></table></figure><p>写在类中的函数，我们通常称之为（对象的）方法，这些方法就是对象可以接收的消息。</p><h2 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h2><p>属性(成员变量)有两种：实例属性和类属性</p><p>实例属性是在构造函数__init__中定义，定义时以self作为前缀，实例属性属于各个实例所有，互不干扰；</p><p>类属性：直接在类中定义属性，绑定在类本身。类属性属于类所有，所有实例共享一个属性</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    name = <span class="string">'Student'</span>  <span class="comment">#类属性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,age</span>):</span></span><br><span class="line">        self.age=age   <span class="comment"># 实例属性</span></span><br><span class="line"></span><br><span class="line">s = Student() <span class="comment"># 创建类的实例对象s</span></span><br><span class="line">s.age   <span class="comment">#只能这样访问实例属性</span></span><br><span class="line"><span class="built_in">print</span>(s.name) <span class="comment"># 打印name属性，因为实例并没有name属性，所以会继续查找类的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'类的name属性:<span class="subst">{Student.name}</span>'</span>) </span><br><span class="line"></span><br><span class="line">s.name = <span class="string">'Michael'</span> <span class="comment"># 给实例绑定name属性</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f'实例属性:<span class="subst">{s.name}</span>'</span>) <span class="comment"># 由于实例属性优先级比类属性高，因此，它会屏蔽掉类的name属性</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(Student.name) <span class="comment"># 但是类属性并未消失，用Student.name仍然可以访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> s.name <span class="comment"># 如果删除实例的name属性</span></span><br><span class="line"><span class="built_in">print</span>(s.name) <span class="comment"># 再次调用s.name，由于实例的name属性没有找到，类的name属性就显示出来了</span></span><br></pre></td></tr></tbody></table></figure><p>在编写程序的时候，千万不要对实例属性和类属性使用相同的名字，因为相同名称的实例属性将屏蔽掉类属性，但是当你删除实例属性后，再使用相同的名称，访问到的将是类属性。</p><h3 id="类的私有属性"><a href="#类的私有属性" class="headerlink" title="类的私有属性"></a>类的私有属性</h3><p>__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。</p><h2 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h2><p>在类的内部，使用 def 关键字来定义一个方法，与一般函数定义不同，类方法必须包含参数 self，且为第一个参数，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cylinder</span>:</span></span><br><span class="line">    num=<span class="number">3.14</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,a,b</span>):</span></span><br><span class="line">        self.r=a</span><br><span class="line">        self.h=b</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">volume</span>(<span class="params">self</span>):</span> </span><br><span class="line">        self.v=r*r*h*Cylinder.num    <span class="comment">#在类方法中调用实例属性和类属性</span></span><br></pre></td></tr></tbody></table></figure><h3 id="self参数"><a href="#self参数" class="headerlink" title="self参数"></a>self参数</h3><p>self 表示当前类自身，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。可以使用它来引用类中的成员变量和成员函数。</p><p>类实例化后，self即代表着实例（对象）本身。Python的类不能直接使用，只有通过创建实例（对象）才能发挥它的功能，每个实例（对象）都是独一无二的，它可以调用类的方法、属性。</p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><p>__init__方法是一种特殊的方法，被称为类的初始化方法，当创建这个类的对象实例时调用该方法进行初始化操作</p><p>__init__方法的第一个参数永远是self，表示创建的实例本身，有了__init__方法，在创建实例的时候，就不能传入空的参数了，必须传入与__init__方法匹配的参数，但self不需要传，</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">    self.name = name</span><br><span class="line">    self.age = </span><br></pre></td></tr></tbody></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>@staticmethod 静态方法只是名义上归属类管理，但是不能使用类变量和实例变量，是类的工具包<br>放在函数前（该函数不传入self或者cls），所以不能访问类属性和实例属性</p><h3 id="类的私有方法"><a href="#类的私有方法" class="headerlink" title="类的私有方法"></a>类的私有方法</h3><p>__private_method：两个下划线开头，声明该方法为私有方法，只能在类的内部调用 ，不能在类的外部调用。self.__private_methods。</p><h3 id="类的专有方法："><a href="#类的专有方法：" class="headerlink" title="类的专有方法："></a>类的专有方法：</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">__init__ : 构造函数，在生成对象时调用</span><br><span class="line">__del__ : 析构函数，释放对象时使用</span><br><span class="line">__repr__ : 打印，转换</span><br><span class="line">__setitem__ : 按照索引赋值</span><br><span class="line">__getitem__: 按照索引获取值</span><br><span class="line">__len__: 获得长度</span><br><span class="line">__cmp__: 比较运算</span><br><span class="line">__call__: 函数调用</span><br><span class="line">__add__: 加运算</span><br><span class="line">__sub__: 减运算</span><br><span class="line">__mul__: 乘运算</span><br><span class="line">__truediv__: 除运算</span><br><span class="line">__mod__: 求余运算</span><br><span class="line">__pow__: </span><br></pre></td></tr></tbody></table></figure><h2 id="访问可见性"><a href="#访问可见性" class="headerlink" title="访问可见性"></a>访问可见性</h2><p>在Python中，属性和方法的访问权限只有两种，也就是公开的和私有的，如果希望属性是私有的，在给属性命名时可以用两个下划线作为开头</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, foo</span>):</span></span><br><span class="line">        self.__foo = foo</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__bar</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.__foo)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'__bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    test = Test(<span class="string">'hello'</span>)</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__bar'</span></span><br><span class="line">    test.__bar()</span><br><span class="line">    <span class="comment"># AttributeError: 'Test' object has no attribute '__foo'</span></span><br><span class="line">    <span class="built_in">print</span>(test.__foo)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>但是，Python并没有从语法上严格保证私有属性或方法的私密性，它只是给私有的属性和方法换了一个名字来妨碍对它们的访问，事实上如果你知道更换名字的规则仍然可以访问到它们，下面的代码就可以验证这一点。之所以这样设定，可以用这样一句名言加以解释，就是”We are all consenting adults here”。因为绝大多数程序员都认为开放比封闭要好，而且程序员要自己为自己的行为负责。</p><p>在实际开发中，我们并不建议将属性设置为私有的，因为这会导致子类无法访问（后面会讲到）。所以大多数Python程序员会遵循一种命名惯例就是让属性名以单下划线开头来表示属性是受保护的，本类之外的代码在访问这样的属性时应该要保持慎重。这种做法并不是语法上的规则，单下划线开头的属性和方法外界仍然是可以访问的，所以更多的时候它是一种暗示或隐喻</p><h2 id="创建和使用对象实例"><a href="#创建和使用对象实例" class="headerlink" title="创建和使用对象实例"></a>创建和使用对象实例</h2><p>实例是根据类创建出来的一个个具体的“对象”，每个对象都拥有相同的方法，但各自的数据可能不同。</p><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个实例</span></span><br><span class="line">stu1 = Student(<span class="string">'骆昊'</span>, <span class="number">38</span>)</span><br><span class="line"></span><br><span class="line">stu1.study(<span class="string">'Python程序设计'</span>)</span><br><span class="line"><span class="comment"># 给对象发watch_av消息</span></span><br><span class="line">stu1.watch_movie()</span><br></pre></td></tr></tbody></table></figure><h2 id="property装饰器"><a href="#property装饰器" class="headerlink" title="@property装饰器"></a>@property装饰器</h2><p>之前我们讨论过Python中属性和方法访问权限的问题，虽然我们不建议将属性设置为私有的，但是如果直接将属性暴露给外界也是有问题的，比如我们没有办法检查赋给属性的值是否有效。</p><p>我们之前的建议是将属性命名以单下划线开头，通过这种方式来暗示属性是受保护的，不建议外界直接访问，如果想访问属性可以通过属性的getter（访问器）和setter（修改器）方法进行对应的操作。如果要做到这点，就可以考虑使用@property包装器来包装getter和setter方法，使得对属性的访问既安全又方便，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="comment"># __slots__魔法限定Person对象只能绑定_name, _age和_gender属性</span></span><br><span class="line">    __slots__ = (<span class="string">'_name'</span>, <span class="string">'_age'</span>, <span class="string">'_gender'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 访问器 - getter方法</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 修改器 - setter方法</span></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._age &lt;= <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在玩飞行棋.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在玩斗地主.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    person = Person(<span class="string">'王大锤'</span>, <span class="number">12</span>)</span><br><span class="line">    person.play()</span><br><span class="line">    person.age = <span class="number">22</span></span><br><span class="line">    person.play()</span><br><span class="line">    <span class="comment"># person.name = '白元芳'  # AttributeError: can't set attribute</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>__slots__魔法:Python是一门动态语言。通常，动态语言允许我们在程序运行时给对象绑定新的属性或方法，当然也可以对已经绑定的属性和方法进行解绑定。但是如果我们需要限定自定义类型的对象只能绑定某些属性，可以通过在类中定义__slots__变量来进行限定。需要注意的是__slots__的限定只对当前类的对象生效，对子类并不起任何作用。</p><h2 id="继承-重写与多态"><a href="#继承-重写与多态" class="headerlink" title="继承,重写与多态"></a>继承,重写与多态</h2><p>我们可以在已有类的基础上创建新类，这其中的一种做法就是让一个类从另一个类那里将属性和方法直接继承下来，从而减少重复代码的编写。提供继承信息的我们称之为父类，也叫超类或基类；得到继承信息的我们称之为子类，也叫派生类或衍生类。子类除了继承父类提供的属性和方法，还可以定义自己特有的属性和方法，所以子类比父类拥有的更多的能力，在实际开发中，我们经常会用子类对象去替换掉一个父类对象，</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="string">"""人"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age</span>):</span></span><br><span class="line">        self._name = name</span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._name</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._age</span><br><span class="line"></span><br><span class="line"><span class="meta">    @age.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">age</span>(<span class="params">self, age</span>):</span></span><br><span class="line">        self._age = age</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s正在愉快的玩耍.'</span> % self._name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">watch_av</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self._age &gt;= <span class="number">18</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s正在观看爱情动作片.'</span> % self._name)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">'%s只能观看《熊出没》.'</span> % self._name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">"""学生"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, grade</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._grade</span><br><span class="line"></span><br><span class="line"><span class="meta">    @grade.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">grade</span>(<span class="params">self, grade</span>):</span></span><br><span class="line">        self._grade = grade</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">study</span>(<span class="params">self, course</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s的%s正在学习%s.'</span> % (self._grade, self._name, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>(<span class="params">Person</span>):</span></span><br><span class="line">    <span class="string">"""老师"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, name, age, title</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__(name, age)</span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._title</span><br><span class="line"></span><br><span class="line"><span class="meta">    @title.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">title</span>(<span class="params">self, title</span>):</span></span><br><span class="line">        self._title = title</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">teach</span>(<span class="params">self, course</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s%s正在讲%s.'</span> % (self._name, self._title, course))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    stu = Student(<span class="string">'王大锤'</span>, <span class="number">15</span>, <span class="string">'初三'</span>)</span><br><span class="line">    stu.study(<span class="string">'数学'</span>)</span><br><span class="line">    stu.watch_av()</span><br><span class="line">    t = Teacher(<span class="string">'骆昊'</span>, <span class="number">38</span>, <span class="string">'砖家'</span>)</span><br><span class="line">    t.teach(<span class="string">'Python程序设计'</span>)</span><br><span class="line">    t.watch_av()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>子类在继承了父类的方法后，可以对父类已有的方法给出新的实现版本，这个动作称之为方法重写（override）。通过方法重写我们可以让父类的同一个行为在子类中拥有不同的实现版本，当我们调用这个经过子类重写的方法时，不同的子类对象会表现出不同的行为，这个就是多态（poly-morphism）。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span>(<span class="params"><span class="built_in">object</span>, metaclass=ABCMeta</span>):</span></span><br><span class="line">    <span class="string">"""宠物"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nickname</span>):</span></span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""发出声音"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Pet</span>):</span></span><br><span class="line">    <span class="string">"""狗"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s: 汪汪汪...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">Pet</span>):</span></span><br><span class="line">    <span class="string">"""猫"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s: 喵...喵...'</span> % self._nickname)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    pets = [Dog(<span class="string">'旺财'</span>), Cat(<span class="string">'凯蒂'</span>), Dog(<span class="string">'大黄'</span>)]</span><br><span class="line">    <span class="keyword">for</span> pet <span class="keyword">in</span> pets:</span><br><span class="line">        pet.make_voice()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们将Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和Cat两个子类分别对Pet类中的make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> ABCMeta, abstractmethod</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pet</span>(<span class="params"><span class="built_in">object</span>, metaclass=ABCMeta</span>):</span></span><br><span class="line">    <span class="string">"""宠物"""</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, nickname</span>):</span></span><br><span class="line">        self._nickname = nickname</span><br><span class="line"></span><br><span class="line"><span class="meta">    @abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_voice</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">"""发出声音"""</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们将Pet类处理成了一个抽象类，所谓抽象类就是不能够创建对象的类，这种类的存在就是专门为了让其他类去继承它。Python从语法层面并没有像Java或C#那样提供对抽象类的支持，但是我们可以通过abc模块的ABCMeta元类和abstractmethod包装器来达到抽象类的效果，如果一个类中存在抽象方法那么这个类就不能够实例化（创建对象）。上面的代码中，Dog和Cat两个子类分别对Pet类中的make_voice抽象方法进行了重写并给出了不同的实现版本，当我们在main函数中调用该方法时，这个方法就表现出了多态行为（同样的方法做了不同的事情）。</p><h1 id="五大基本语句"><a href="#五大基本语句" class="headerlink" title="五大基本语句"></a>五大基本语句</h1><h2 id="赋值语句"><a href="#赋值语句" class="headerlink" title="赋值语句"></a>赋值语句</h2><p>赋值语句的作用:将变量绑定到对象</p><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p>第一个字符必须是字母表中字母或下划线 _ 。<br>标识符的其他的部分由字母、数字和下划线组成。<br>标识符对大小写敏感。<br>在 Python 3 中，可以用中文作为变量名，非 ASCII 标识符也是允许的了。</p><h2 id="输入输出语句（print-input函数）"><a href="#输入输出语句（print-input函数）" class="headerlink" title="输入输出语句（print, input函数）"></a>输入输出语句（print, input函数）</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><figure class="highlight py"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#  处理用户的多个输入</span></span><br><span class="line">n1, n2, n3 = <span class="built_in">input</span>(<span class="string">"输入三个数，以空格分隔 "</span>).split()</span><br><span class="line"><span class="built_in">input</span>()得到的都是<span class="built_in">str</span>类型</span><br></pre></td></tr></tbody></table></figure><h3 id="格式化输出-1"><a href="#格式化输出-1" class="headerlink" title="格式化输出"></a>格式化输出</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"{} {}"</span>.<span class="built_in">format</span>(<span class="string">"hello"</span>, <span class="string">"world"</span>) )   <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"{1} {0} {1}"</span>.<span class="built_in">format</span>(<span class="string">"hello"</span>, <span class="string">"world"</span>))  <span class="comment"># 设置指定位置</span></span><br></pre></td></tr></tbody></table></figure><h2 id="条件判断语句"><a href="#条件判断语句" class="headerlink" title="条件判断语句"></a>条件判断语句</h2><p>pyhton 只有if-else语句没有switch<br>if-elif-else语句 </p><h3 id="三目运算符（三元表达式）-1"><a href="#三目运算符（三元表达式）-1" class="headerlink" title="三目运算符（三元表达式）"></a>三目运算符（三元表达式）</h3><p>为真时的结果 if 判断条件 else 为假时的结果（注意，没有冒号）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实现一个基础版本（递归版本）的斐波那契数列：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fn</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> n <span class="keyword">if</span> n &lt; <span class="number">2</span> <span class="keyword">else</span> fn(n-<span class="number">1</span>)+fn(n-<span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for-else循环"><a href="#for-else循环" class="headerlink" title="for/else循环"></a>for/else循环</h3><p>for…else 语句块可以被理解为当循环条件不满足时，我们来处理我们需要做的事，伪代码逻辑如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> condition:</span><br><span class="line">        you_find_your_stuff()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    you_did_not_find_your_stuff()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>else字句运行有两种情况<br>    1.使用 break 跳出循环<br>    2.循环自然结束</p><h3 id="条件循环while-else"><a href="#条件循环while-else" class="headerlink" title="条件循环while-else"></a>条件循环while-else</h3><p>如果要构造不知道具体循环次数的循环结构，我们推荐使用<code>while</code>循环。<code>while</code>循环通过一个能够产生或转换出<code>bool</code>值的表达式来控制循环，表达式的值为<code>True</code>则继续循环；表达式的值为<code>False</code>则结束循环。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#无限循环</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"></span><br><span class="line"><span class="comment">#while 循环使用 else 语句</span></span><br><span class="line"><span class="keyword">while</span> ():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">else</span>；</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="else子句"><a href="#else子句" class="headerlink" title="else子句"></a>else子句</h3><p>else：在循环中可以使用else语句，else语句在for遍历结束或者while语句为Flase时候执行，循环被break终止时不执行</p><h3 id="break-continue"><a href="#break-continue" class="headerlink" title="break/continue"></a>break/continue</h3><p>break 语句    在语句块执行过程中终止循环，并且跳出整个循环<br>continue 语句    在语句块执行过程中终止当前循环，跳出该次循环，执行下一次循环。</p><h2 id="异常处理语句-try-except-else-finally"><a href="#异常处理语句-try-except-else-finally" class="headerlink" title="异常处理语句(try-except-else-finally)"></a>异常处理语句(try-except-else-finally)</h2><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><ul><li>断点调试其实就是在程序自动运行的过程中，你在代码某一处打上了断点，当程序跑到你设置的断点位置处，则会中断下来，此时你可以看到之前运行过的所有程序变量。</li></ul><p>step over（F8快捷键）：在单步执行时，在函数内遇到子函数时不会进入子函数内单步执行，而是将子函数整个执行完再停止，也就是把子函数整个作为一步。在不存在子函数的情况下是和step into效果一样的。简单的说就是，程序代码越过子函数，但子函数会执行，且不进入。</p><p>step into（F7快捷键）：在单步执行时，遇到子函数就进入并且继续单步执行，有的会跳到源代码里面去执行。</p><p>step into my code（Alt+Shift+F7快捷键）：在单步执行时，遇到子函数就进入并且继续单步执行，不会进入到源码中。</p><p>step out（Shift+F8快捷键）：假如进入了一个函数体中，你看了两行代码，不想看了，跳出当前函数体内，返回到调用此函数的地方，即使用此功能即可。</p><p>Resume program(F9快捷键)：继续恢复程序，直接运行到下一断点处。</p><p>一般操作步骤就是，设置好断点，debug运行，然后 F8 单步调试，遇到想进入的函数 F7 进去，想出来在 shift + F8，跳过不想看的地方，直接设置下一个断点，然后 F9 过去。</p><h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><h2 id="使用辅助函数简化复杂表达式"><a href="#使用辅助函数简化复杂表达式" class="headerlink" title="使用辅助函数简化复杂表达式"></a>使用辅助函数简化复杂表达式</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">the_max</span>(<span class="params">x, y</span>):</span></span><br><span class="line"><span class="keyword">return</span> x <span class="keyword">if</span> x &gt; y <span class="keyword">else</span> y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'a = '</span>))</span><br><span class="line">b = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'b = '</span>))</span><br><span class="line">c = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">'c = '</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The max is:'</span>, the_max(the_max(a, b), c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 复杂</span></span><br><span class="line">the_max = a &gt; b <span class="keyword">and</span> a <span class="keyword">or</span> b</span><br><span class="line">the_max = c &gt; the_max <span class="keyword">and</span> c <span class="keyword">or</span> the_max</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'The max is:'</span>, the_max)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p> <a href="https://pythontutor.com/">可视化代码执行</a></p><h1 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h1><h2 id="PEP标准"><a href="#PEP标准" class="headerlink" title="PEP标准"></a>PEP标准</h2><p>PEP（Python增强提案：Python Enhancement Proposals）<br><a href="https://www.python.org/dev/peps/pep-0008/">PEP-8</a></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Autojs-Rhino引擎</title>
      <link href="/2022/010827358.html"/>
      <url>/2022/010827358.html</url>
      
        <content type="html"><![CDATA[<h1 id="Rhino引擎"><a href="#Rhino引擎" class="headerlink" title="Rhino引擎"></a>Rhino引擎</h1><p><a href="https://pro.autojs.org/docs/#/zh-cn/?id=%e7%bb%bc%e8%bf%b0">官方文档</a></p><p><a href="https://www.yuque.com/yashujs/bfug6u/ogik4f">史上最全的autojs代码仓库</a></p><p><a href="https://github.com/kangour/autojs_sdk">autojs代码：</a><br><a href="https://www.yuque.com/yashujs/bfug6u">牙叔教程</a><br><a href="https://www.yuque.com/yashujs/bfug6u/un3rk3#mVgln">autojs非常见函数</a><br><a href="https://www.yuque.com/yashujs/bfug6u/ittz45">autojs-修改java代码-为我所用</a><br>Appium 和 Airtest 编写的自动化脚本都依赖于 PC 端运行，没有办法直接运行在移动端；无障碍服务需要单独创建一个 Android 项目，没有完整的使用文档，使用起来有一定的门槛</p><p>AutoJS 它通过编写 JavaScript 脚本，结合系统的「 无障碍服务 」对 App 进行自动化操作<br>脚本文件体积小，可以打包成 APK 直接安装<br>拥有丰富的 UI 组件用于构建 GUI 界面<br>非 Root 设备也能完成自动化操作，可以摆脱 PC 直接运行<br>提供多种元素定位方式，可以适配各种机型<br>官方文档非常详细，学习成本低</p><p>Auto.JS作为一款基于JavaScript语言的一款脚本，基本语法和结构可通过学习JavaScript来了解。要知道，安卓的app界面就是由一堆控件组成的，这些父子控件相互嵌套，组成了我们熟悉的app界面，因此，你要执行自动化操作，那么最常用的就是先精确的找到这个控件(唯一性)，再来说下一步对其进行操作，而我个人认为Auto.JS之所以方便好用，最大的一点就是查找你想要操作的控件(包括但不限于点击、设置文本等)时特别方便明了，一眼就能看懂并能迅速定位。因为Auto.JS是基于JavaScript的语言，因此基本的语法结构、很多两者通用的函数等都是可以在JavaScript里面找到，如常见的“.replace()”“.indexof()”“.test()”等这些都在JavaScript网站上有相关的用法说明</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="vscode插件"><a href="#vscode插件" class="headerlink" title="vscode插件"></a>vscode插件</h3><p>Auto.js-VSCodeExt</p><p>Auto.js-VSCodeExt-Fixed<br>对插件 Auto.js-VSCodeExt 进行了部分优化</p><p>Autojs Clipboard<br>同步手机剪贴板到电脑剪贴板</p><p>然后，使用 VS Code 快捷键「 Ctrl/Command + Shift + P 」，选择「 Auto.js:Start Server 」开启 AutoJS 服务</p><p>在同一wifi下无法连接，手机开热点给电脑，即可连接</p><h3 id="Auto-js-Pro-Ext-1-4"><a href="#Auto-js-Pro-Ext-1-4" class="headerlink" title="Auto.js-Pro-Ext 1.4"></a>Auto.js-Pro-Ext 1.4</h3><p>开启代码提示</p><p>进入以下文件夹：C:\Users\用户名.vscode\extensions\hyb1996.auto-js-pro-ext-1.3.2\assets\project-templates\v8-default<br>拷贝这两个文件到你的项目目录：node_modules,tsconfig.json</p><h3 id="scrcpy投屏"><a href="#scrcpy投屏" class="headerlink" title="scrcpy投屏"></a>scrcpy投屏</h3><p><a href="https://github.com/Genymobile/scrcpy">Github地址</a></p><p>手机数据线连接电脑后，开启usb调试，自动连接</p><p>鼠标右键是返回</p><p>要想卸载scrcpy,先在目录下进入cmd,输入adb kill-server,再删除整个scrcpy文件即可</p><p>adb功能异常，重启adb<br>（1）把adb服务杀死：adb kill-server<br>（2）重启adb服务：adb reconnect</p><h3 id="结合webditor"><a href="#结合webditor" class="headerlink" title="结合webditor"></a>结合webditor</h3><p>autojs本身就有布局分析，但不一定所有手机都能用，使用weditor进行布局分析</p><p><a href="https://github.com/openatx/weditor">weditor 地址</a></p><p>先把weditor安装好并运行起来。然后：</p><p>.设备通过USB线连接电脑。<br>在cmd命令行中输入adb tcpip 5555<br>拔掉数据线<br>在cmd命令行中输入adb connect 192.168.1.5(设备在局域网中的ip)<br>在weditor 网页中输入手机的ip并且点击Connect连接</p><p>连接成功后，点击“Dump Hierarchy” 获取最新的界面。这里以微信为例，然后我们会看到布局分析，点击我们需要操作的控件，可以获取到resourceId、className、text等信息，然后我们运用autojs进行操作。</p><h2 id="输出信息"><a href="#输出信息" class="headerlink" title="输出信息"></a>输出信息</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">log()</span><br><span class="line">toast()</span><br><span class="line">toastLog()</span><br><span class="line">alert()</span><br></pre></td></tr></tbody></table></figure><h2 id="控制台-Console"><a href="#控制台-Console" class="headerlink" title="控制台 - Console"></a>控制台 - Console</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 新线程中启动控制台</span></span><br><span class="line">threads.start(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (isShowConsole) {</span><br><span class="line">        <span class="built_in">console</span>.show();</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示控制台</span></span><br><span class="line"><span class="built_in">console</span>.show();</span><br><span class="line"><span class="built_in">console</span>.verbose(<span class="string">"这是灰色"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"这是黑色"</span>);</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">"这是红色"</span>);</span><br><span class="line"><span class="built_in">console</span>.warn(<span class="string">"这是蓝色"</span>);</span><br><span class="line"><span class="built_in">console</span>.error(<span class="string">"这是绿色=_="</span>);</span><br><span class="line"><span class="built_in">console</span>.trace(<span class="string">"打印日志行数"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.setSize(<span class="number">1000</span>, <span class="number">1000</span>);<span class="comment">//调整大小</span></span><br><span class="line"><span class="built_in">console</span>.setPosition(<span class="number">0</span>, <span class="number">500</span>); <span class="comment">//调整位置</span></span><br><span class="line"><span class="built_in">console</span>.hide();   <span class="comment">//隐藏</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 保存日志</span></span><br><span class="line"><span class="built_in">console</span>.setGlobalLogConfig({</span><br><span class="line">    <span class="attr">file</span>: <span class="string">"/sdcard/脚本/log.txt"</span></span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">"保存截图的时间"</span>);</span><br><span class="line">images.save(img, <span class="string">"/sdcard/3.png"</span>);</span><br><span class="line"><span class="built_in">console</span>.timeEnd(<span class="string">"保存截图的时间"</span>);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="基于控件"><a href="#基于控件" class="headerlink" title="基于控件"></a>基于控件</h2><h3 id="控件属性"><a href="#控件属性" class="headerlink" title="控件属性"></a>控件属性</h3><p>className 类名。类名表示一个控件的类型<br>packageName 包名。包名表示控件所在的应用包名<br>bounds 控件在屏幕上的范围。<br>drawingOrder 控件在父控件的绘制顺序。<br>indexInParent 控件在父控件的位置。<br>clickable 控件是否可点击。<br>longClickable 控件是否可长按。<br>checkable 控件是否可勾选。<br>checked 控件是否可已勾选。<br>scrollable 控件是否可滑动。<br>selected 控件是否已选择。<br>editable 控件是否可编辑。<br>visibleToUser 控件是否可见。<br>enabled 控件是否已启用。<br>depth 控件的布局深度。<br>fullId: app包名:id/对应的id名称  ，内容一样要写在id里，例如id(“fullld的内容”)</p><h3 id="UiSelector控件选择器"><a href="#UiSelector控件选择器" class="headerlink" title="UiSelector控件选择器"></a>UiSelector控件选择器</h3><p>我们使用UiSelector选择器筛选出所需要的控件，筛选的依据就是通过控件的各种属性选取屏幕上的控件<br>通常用一个唯一的属性来定位一个控件<br>depth-desc-id-classname等控件的常规的唯一属性<br>findone.parent().child(xx)等控件的父子依存顺序关系</p><h4 id="findOne-timeout"><a href="#findOne-timeout" class="headerlink" title=".findOne(timeout)"></a>.findOne(timeout)</h4><p>根据当前的选择器所确定的筛选条件，对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件；如果在timeout毫秒的时间内没有找到符合条件的控件，则终止搜索并返回null。</p><h4 id="find"><a href="#find" class="headerlink" title=".find()"></a>.find()</h4><p>找到所有满足条件的控件集合并返回。这个搜索只进行一次，并不保证一定会找到，因而会出现返回的控件集合为空的情况</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以通过empty()函数判断找到的是否为空。例如：</span></span><br><span class="line"><span class="keyword">var</span> c = className(<span class="string">"AbsListView"</span>).find();</span><br><span class="line"><span class="keyword">if</span>(!c.empty()){</span><br><span class="line">    toast(<span class="string">"找到啦"</span>);</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    toast(<span class="string">"没找到╭(╯^╰)╮"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="findOnce-i"><a href="#findOnce-i" class="headerlink" title=".findOnce(i)"></a>.findOnce(i)</h4><p>.untilFind()<br> .exists()<br>.waitFor()<br>.filter(f)<br>algorithm(algorithm)  指定选择器的搜索算法。 广度优先在控件所在层次较低时，或者布局的层次不多时，通常能更快找到控件<br>UiSelector.untilFind()<br>UiSelector.exists()<br>UiSelector.waitFor()</p><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><p>(text,desc,id,className,packageName)都可以像下面一样创建选择器</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">textContains(str)    <span class="comment">//"text需要包含字符串str"的筛选条件。</span></span><br><span class="line">textStartsWith(prefix)   <span class="comment">//前缀得是</span></span><br><span class="line">textEndsWith(suffix)     <span class="comment">//后缀得是</span></span><br><span class="line">textMatches(reg)       <span class="comment">//正则匹配</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">textMatches(<span class="regexp">/(允许|立即开始|统一)/</span>).findOne(<span class="number">10</span> * <span class="number">1000</span>);</span><br><span class="line">textMatches(<span class="regexp">/.*搜一下.*|.*去逛.*/</span>).find()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="UiSelector-filter-f"><a href="#UiSelector-filter-f" class="headerlink" title="UiSelector.filter(f)"></a>UiSelector.filter(f)</h4><p>f {Function} 过滤函数，参数为UiObject，返回值为boolean<br>为当前选择器附加自定义的过滤条件。</p><h3 id="UiObject控件对象"><a href="#UiObject控件对象" class="headerlink" title="UiObject控件对象"></a>UiObject控件对象</h3><p>UiObject表示一个控件，可以通过这个对象获取到控件的属性，也可以对控件进行点击、长按等操作。</p><p>获取一个UiObject通常通过选择器的findOne(), findOnce()等函数，也可以通过UiCollection来获取，或者通过UiObject.child(), UiObject.parent()等函数来获取一个控件的子控件或父控件。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text("微信").findOne()  //返回一个控件对象，想要操作这个控件，其属性必须为true</span><br></pre></td></tr></tbody></table></figure><p>click(text[, i])<br>text {string} 要点击的文本<br>i {number} 如果相同的文本在屏幕中出现多次，则i表示要点击第几个文本, i从0开始计算</p><p>click() 点击。点击一个控件，前提是这个控件的clickable属性为true<br>longClick() 长按。长按一个控件，前提是这个控件的longClickable属性为true<br>setText() 设置文本，用于编辑框控件设置文本。<br>scrollForward();<br>scrollBackward() 滑动。滑动一个控件(列表等), 前提是这个控件的scrollable属性为true<br>exits() 判断控件是否存在<br>waitFor() 等待控件出现</p><h4 id="bounds-坐标"><a href="#bounds-坐标" class="headerlink" title="bounds()坐标"></a>bounds()坐标</h4><p>返回控件在屏幕上的范围，其值是一个Rect对象。</p><p>如果一个控件本身无法通过click()点击，那么我们可以利用bounds()函数获取其坐标，再利用坐标点击。总体来说，基于坐标来确定要操作的控件比较简单，核心是确定要操作的控件的坐标即可。Auto.JS里可以直接获取控件的坐标，每一个控件包含其“.bounds()”属性，bounds()其实表示的是一个范围矩阵。此处还是以右下角的“+”号按钮为例，查看控件属性信息，包含“.bounds()”属性如下图：</p><p>bounds()属性是四个坐标值，其分别为(left, top, right, buttom)<br>    left：控件左边缘与屏幕左边的距离<br>    top：控件上边缘与屏幕上边的距离<br>    right：控件右边缘与屏幕左边的距离<br>    buttom ： 控件下边缘与屏幕上边的距离</p><p>因此，在获得控件的坐标bounds()属性后，就可以对控件执行基于坐标的操作，常见的操作有：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bounds().left：长方形左边界的x坐标</span><br><span class="line">bounds().right：长方形右边界的x坐标</span><br><span class="line">bounds().top：长方形上边界的y坐标</span><br><span class="line">bounds().bottom：长方形下边界的y坐标</span><br><span class="line">bounds().centerX()：长方形中点x坐标</span><br><span class="line">bounds().centerY()：长方形中点y坐标</span><br><span class="line">bounds().width()：长方形宽度也就是控件宽度</span><br><span class="line">bounds().height()：长方形高度也就是控件高度</span><br><span class="line">click(x,y)：坐标(x,y)处执行点击操作  <span class="comment">//注意:安卓7以下点击需要root权限且函数为Tap(x,y)</span></span><br><span class="line">bounds(left, right, top, bottom).clickable().click()：点击该长方形区域</span><br></pre></td></tr></tbody></table></figure><h3 id="基于控件属性确定控件"><a href="#基于控件属性确定控件" class="headerlink" title="基于控件属性确定控件"></a>基于控件属性确定控件</h3><p>通过查看这些属性，我们不难发现有其中一项属性desc(“更多选项”)，很可能是不和其他控件相同的，也就是此控件属性具有唯一性，能唯一的确定此控件，这个属性就是我们要找的。因此，我们想要对其进行操作只需要：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(desc(<span class="string">"更多选项"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">    desc(<span class="string">"更多选项"</span>).findonce().click();    </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述代码执行后，在该界面时，desc(“更多选项”)首先会被查找(findonce)，查找后执行点击(click)，从而【⋮】按钮也就被点击了。总结下无非就是我们找到了此按钮的唯一控件属性desc(“更多选项”)从而再对其操作，仅此而已。</p><p>另外，加上“.exist()”是为了增加程序鲁棒性，万一控件不存在或者没找到，则程序不会执行，否则对不存在(或没找到)的控件操作会抛出异常。基于此，往往要判定控件存在与否后再进行操作，而“.exist()”返回的是一个布尔值，方便后续进行判断和操作。另外一个常用的操作就是加上“while(!)”死循环等待控件出现，如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当"更多选项"不存在等价于此按钮还没出现</span></span><br><span class="line"><span class="keyword">while</span>(!desc(<span class="string">"更多选项"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//继续循环等待，直到按钮出现</span></span><br><span class="line">    sleep(<span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行到这里说明"更多选项"存在了，对该按钮执行点击操作</span></span><br><span class="line">desc(<span class="string">"更多选项"</span>).findonce().click();</span><br><span class="line"><span class="keyword">return</span>;</span><br></pre></td></tr></tbody></table></figure><p>当分析了很多控件后不难发现，控件的文本信息往往是以desc或text属性来呈现的，比如一个该按钮名为”更多选项”，其控件的desc属性或text属性就是其按钮名字，确定其名字也就确定了此控件，针对此按钮具体来说，就是其desc属性是”更多选项”。（此处要说的意思就是要具体问题具体分析，文本信息不是desc就是text，如果是desc属性就操作desc，是text属性就操作text）但是，往往就有时候我们只知道包含的部分desc或text，这时候可用这四个函数来确定：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//descContains即desc包含部分信息即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(descContains(<span class="string">"选项"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//descStartsWith即desc以此信息开头即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(descStartsWith(<span class="string">"更多"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>同理，text也有对应的两个函数,比如一个按钮text属性为(“我的学习积分”)/</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//textContains即text包含部分信息即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(textContains(<span class="string">"学习积分"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="comment">//textStartsWith即text以此信息开头即可匹配</span></span><br><span class="line"><span class="keyword">if</span>(textStartsWith(<span class="string">"我的"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    <span class="comment">//需要执行的操作</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然，更多情况是desc和text属性并不能唯一确定要操作的控件，我们往往用其他属性(常用的有className、id、depth等)一起叠加使用来尽可能的使之唯一，比如：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//往往是诸多控件属性一起才可唯一确定待操作的控件</span></span><br><span class="line"><span class="keyword">var</span> myObject = className(“XXX”).depth(xx).id(“XXX”).text(“XXX”).findone();</span><br><span class="line">myObject.click();</span><br></pre></td></tr></tbody></table></figure><p> 需要注意的是：在不同的Android系统上，同一版本的app的控件属性可能会变化。同样，app版本更新后，控件属性、布局也可能发生变化，所以，若要对不同版本不同系统具有兼容性，应尽可能选择不变化的控件属性。</p><h3 id="基于控件父子关系确定控件"><a href="#基于控件父子关系确定控件" class="headerlink" title="基于控件父子关系确定控件"></a>基于控件父子关系确定控件</h3><p>有时候，控件属性是变化的、随机的，这时候我们便不能通过控件的本身固有属性如id，className，depth等来唯一的确定出需要的控件，这时候我们可以通过控件之间的上下级关系(也叫父子关系)来确定出需要操作的控件。</p><p>首先需要了解的是控件间的依存关系，还是以之前的app界面为例，我们这次来分析右下角的的“+”号按钮，和之前一样利用Auto.JS分析控件布局，我们点击右下角的“+”号按钮，点击[在布局层次中查看]，便可以查看当前控件在整个布局层次中的上下级关系(父子关系)，如图1.6所示，不难发现，从上到下，左侧五颜六色的竖棍丨就代表着其层级关系，竖棍丨越多也就越处于底层，该“+”号按钮控件名为“ImageButton”，对应着拥有8根竖棍丨，所以其是在第八级。</p><p>另外，和“ImageButton”平级的控件是图1.6所示的8.2—“ImageView”控件，“ImageButton”的父控件也就是它的上级控件是图1.6所示的7.3—“android.view.View”控件，所以我们可以建立以下关系：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">8.1</span>中“ImageButton”的parent() = <span class="number">7.3</span>中“android.view.View”</span><br><span class="line"></span><br><span class="line"><span class="number">7.3</span>中“android.view.View”的child(<span class="number">0</span>) = <span class="number">8.1</span>中“ImageButton”</span><br><span class="line"></span><br><span class="line"><span class="number">7.3</span>中“android.view.View”的child(<span class="number">1</span>) = <span class="number">8.2</span>中“ImageView”</span><br><span class="line"></span><br><span class="line"><span class="number">7.3</span>中“android.view.View”的parent() = <span class="number">6</span>中“android.view.View”</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>中“android.view.View”的child(<span class="number">0</span>)  = <span class="number">7.1</span>中“LinearLayout”</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>中“android.view.View”的child(<span class="number">1</span>)  = <span class="number">7.2</span>中“android.view.View”</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>中“android.view.View”的child(<span class="number">2</span>)  = <span class="number">7.3</span>中“android.view.View”</span><br></pre></td></tr></tbody></table></figure><p> 建立了以上隶属关系，我们就可以通过唯一确定任意其中一个不变的固定控件，便可通过控件间的隶属关系来确定我们想要的控件，从而规避了我们要找的控件属性动态变化这一情况。</p><p> <img src="https://gitee.com/xi_fan/img/raw/master/image-20211112113703418.png" alt="图1.5 点击[在布局层次中查看]"></p><p><img src="https://gitee.com/xi_fan/img/raw/master/image-20211112113725776.png" alt="图1.6 控件的布局层次分析1"></p><p> 在这里，我们假定以之前右上角的【⋮】按钮为固定控件(因为”更多选项”这几个字基本不会变化)，通过【⋮】按钮来和控件间的父子关系来确定出右下角的“+”号按钮。</p><p>首先分析右上角的【⋮】按钮的层级关系，如图1.7所示，【⋮】按钮位于第10级，它的父级parent是图1.7所示的9.3—“android.support.v7.widget.LinearLayoutCompat”，9.3的父级是8—“android.view.View”,以此类推，发现我们想要操作的控件也就是“ImageButton”控件(8.1)和右上角的【⋮】按钮即“ImageView”控件(10)关系是：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">“ImageView”控件(<span class="number">10</span>)是从<span class="number">7.1</span>—“LinearLayout”继承下来的；</span><br><span class="line"></span><br><span class="line">“ImageButton”控件(<span class="number">8.1</span>)是从<span class="number">7.3</span>—“android.view.View”继承下来的；</span><br><span class="line"></span><br><span class="line">   而<span class="number">7.1</span>和<span class="number">7.3</span>是平级关系，拥有共同的父级<span class="number">6</span>—“android.view.View”</span><br></pre></td></tr></tbody></table></figure><p>图1.7 控件的布局层次分析2</p><p>明白了这一点，我们便可通过【⋮】按钮(10)来确定右下角的“+”号按钮(8.1)，如下所示：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先，通过desc属性确定出【⋮】按钮(图1.7所示的10)</span></span><br><span class="line"><span class="comment">//属性.findone()首先找到一个控件，再在此基础上加.parent等</span></span><br><span class="line"><span class="keyword">var</span> moreButton = desc(<span class="string">"更多选项"</span>).findone();   </span><br><span class="line"></span><br><span class="line"><span class="comment">//其次，找到【⋮】按钮和右下角“+”号按钮共同的父级parent</span></span><br><span class="line"><span class="comment">//在这里是一层层往上找是为了方便理解，实际操作可一步到位</span></span><br><span class="line"><span class="keyword">var</span> 9_3Supportv7 = moreButton.parent();                             <span class="comment">//找到图1.7所示的9.3控件</span></span><br><span class="line"><span class="keyword">var</span> 8viewView = moreButton.parent().parent();                       <span class="comment">//找到图1.7所示的8控件</span></span><br><span class="line"><span class="keyword">var</span> 7_1LinearLayout = moreButton.parent().parent().parent();        <span class="comment">//找到图1.7所示的7.1控件</span></span><br><span class="line"><span class="keyword">var</span> 6viewView = moreButton.parent().parent().parent().parent();     <span class="comment">//找到图1.7所示的6控件</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//最后，通过共同的父级parent找到右下角“+”号按钮</span></span><br><span class="line"><span class="comment">//在这里是一层层往下找是为了方便理解，实际操作可一步到位</span></span><br><span class="line"><span class="keyword">var</span> 7_3viewView = 6viewView.child(<span class="number">2</span>);                               <span class="comment">//找到图1.7所示的7.3控件</span></span><br><span class="line"><span class="keyword">var</span> plusButton = 6viewView.child(<span class="number">2</span>).child(<span class="number">0</span>);                       <span class="comment">//找到图1.7所示的8.1控件（也就是+号按钮）</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//所以，如果一步到位，总结如下：</span></span><br><span class="line"><span class="keyword">var</span> plusButton = moreButton.parent().parent().parent().parent().child(<span class="number">2</span>).child(<span class="number">0</span>);</span><br><span class="line"><span class="comment">//再对+号按钮进行点击</span></span><br><span class="line">plusButton.click();</span><br></pre></td></tr></tbody></table></figure><p> 此处例子里的的两个控件【⋮】按钮(10)和右下角的“+”号按钮(8.1)之间相差了很多层，因此显着有些复杂，在实际情况中，我们往往不需要跨越这么多的层级来确定控件，一般情况下不会那么复杂。实际上，父子关系嵌套两三层往往即可确定出另一控件。最后，在这里需要注意的是，确定控件时要加上“.findone()”，此方法调用后会返回所有符合条件的控件集合。因此，首先要找到一个不容易变化的或容易找的控件“.findone()”后再在此基础上进行“.parent()”“.child(index)”操作找到另一控件。</p><h2 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h2><p>当然，基于坐标的操作不仅有click()操作，常用的还有swipe()滑动操作，gesture()手势滑动操作等，具体可查看官方文档，在这里仅对swipe()，gesture()这两个函数进行介绍。</p><p>swipe(x1,y1,x2,y2,time)：(x1,y1)代表起始点坐标，(x2,y2)代表终点坐标，time代表滑动所需要的时间</p><p>//注意：安卓7以下的滑动需要root权限，且函数名变为Swipe(x1,y1,x2,y2,time)</p><p>gesture(time,[x1,y1],[x2,y2],[x3,y3]…)：time同，(x1,y1)是起始点坐标，(x2,y2)是途径点坐标，最后一个坐标是终点</p><p>下面以一个某APP注册时的滑动验证为例(为防止被人恶意利用，在此打上码。再次声明，此处做仅举例用，所有代码仅供学习交流！)，如图2.0所示，当我们输入手机号点击注册时，此时需要将滑块拖动到指定位置处才可以发送验证码从而进行下一步的注册。在这里，我们将想要拖动的滑块称为控件①，想要拖到的目标处称为控件②。那么，如果想要实现一个自动化拖动首先就要确定的是控件①和控件②的坐标，又因为其坐标每次都是随机的，所以只需要根据两个控件的特有属性唯一确定出控件①和控件②，再每次获取其坐标即可。</p><p>通过对两个控件的属性分析，如图2.1所示，我们不难发现，控件①和控件②的indexInParent()不同，因此可通过此分别唯一的定位出两个控件，确定控件后，我们再调用swipe()或gesture()函数来执行滑动，从而实现自动滑动的操作。</p><p>具体实现代码如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先判断是否进入了"滑动验证"界面</span></span><br><span class="line"><span class="keyword">if</span>(text(<span class="string">"滑动验证"</span>).exists())</span><br><span class="line">{</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//判断控件1是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">1</span>).exists())</span><br><span class="line">    {   </span><br><span class="line">        <span class="comment">//控件1存在，获取其坐标bounds()属性</span></span><br><span class="line">        <span class="keyword">var</span> Button1 = className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">1</span>).findOne().bounds();</span><br><span class="line">        sleep(<span class="number">500</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Button1的坐标为:"</span>+ Button1);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//判断控件2是否存在</span></span><br><span class="line">    <span class="keyword">if</span>(className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">3</span>).exists())</span><br><span class="line">    {</span><br><span class="line"> <span class="keyword">var</span> Button2 = className(<span class="string">"android.widget.Button"</span>).depth(<span class="number">8</span>).indexInParent(<span class="number">3</span>).findOne().bounds();</span><br><span class="line"> sleep(<span class="number">500</span>);</span><br><span class="line"> <span class="built_in">console</span>.log(<span class="string">"Button2的坐标为:"</span>+ Button2);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//两个控件的坐标都获取到后，执行swipe或gesture操作</span></span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//swipe(x1,y1,x2,y2,[time])</span></span><br><span class="line">    swipe(Button1.left, Button1.top, Button2.left, Button2.top, [random(<span class="number">500</span>,<span class="number">1200</span>)]);</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">    <span class="comment">//gesture(time,[x1,y1],[x2,y2])</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Swipe完成！"</span>);</span><br><span class="line">    gesture(random(<span class="number">500</span>,<span class="number">1200</span>), [Button1.left, Button1.top], [Button2.left, Button2.top]);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"gesture完成！"</span>);</span><br><span class="line">    <span class="comment">//结束</span></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>find()函数会找出所有满足条件的控件并返回一个控件集合,之后可以对控件集合进行操作</li></ul><p>var findAssemble = textContains(“2020-07-15”).find();     //找到所有包含”2020-07-15”的控件集合findAssemble</p><ul><li>findone()函数会对屏幕上的控件进行搜索，直到屏幕上出现满足条件的一个控件为止，并返回该控件</li></ul><p>如果找不到控件，当屏幕内容发生变化时会重新寻找，直至找到<br>注意：如果findone不加限制时间且屏幕上一直没有出现所描述的控件，则该函数会阻塞，直到找到为止</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findoneAssem1 = textContains(<span class="string">"2020-07-15"</span>).findone();     <span class="comment">//找到一个包含"2020-07-15"的控件findoneAssem1</span></span><br><span class="line"><span class="keyword">var</span> findoneAssem2 = textContains(<span class="string">"2020-07-15"</span>).findone(<span class="number">500</span>); <span class="comment">//在500毫秒内找到一个包含"2020-07-15"的控件findoneAssem，若找不到，终止搜索返回null</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>findonce(i)函数会根据当前所确定的筛选条件，对屏幕上的控件进行搜索，并返回第 i + 1 个符合条件的控件</p><p>  如果没有找到符合条件的控件，或者符合条件的控件个数 &lt; i, 则返回null</p></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> findonce1 = textContains(<span class="string">"2020-07-15"</span>).findonce(<span class="number">0</span>);     <span class="comment">//搜索第一个包含"2020-07-15"的控件findonce1</span></span><br><span class="line"><span class="keyword">var</span> findonce2 = textContains(<span class="string">"2020-07-15"</span>).findonce(<span class="number">1</span>);     <span class="comment">//搜索第二个包含"2020-07-15"的控件findonce2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="控件滑动"><a href="#控件滑动" class="headerlink" title="控件滑动"></a>控件滑动</h2><p>在很多时候，我们经常会见到className名为“.ListView”的控件，实际上其往往是充当装在很多list的集合，以此控件为例，我们可以实现对此控件的上下滑动，</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scrollForward()函数会对控件执行向前滑动的操作，并返回是否操作成功</span></span><br><span class="line"><span class="comment">//scrollBackward()函数会对控件执行向后滑动的操作，并返回是否操作成功</span></span><br><span class="line"><span class="keyword">var</span> listView = ClassName(“ListView”).id(XXX).findone();</span><br><span class="line">ListView.scrollForward();         <span class="comment">//向前滑动</span></span><br><span class="line">ListView.scrollBackward();        <span class="comment">//向后滑动</span></span><br></pre></td></tr></tbody></table></figure><p> 在此只是以“.ListView”的控件进行举例，实际使用过程中，只要控件是可上下滑动的，都可以调用函数“scrollForward()”和“scrollBackward()”来实现对控件的滑动操作。</p><h2 id="基于坐标"><a href="#基于坐标" class="headerlink" title="基于坐标"></a>基于坐标</h2><h3 id="前置"><a href="#前置" class="headerlink" title="前置"></a>前置</h3><p>屏幕坐标系，屏幕左上角为原点（0，0），向右为x轴正向，向下为y轴正向,单位为px</p><h3 id="gestures"><a href="#gestures" class="headerlink" title="gestures"></a>gestures</h3><p>gestures([delay1, duration1, [x1, y1], [x2, y2], …], [delay2, duration2, [x3, y3], [x4, y4], …], …)</p><p>同时模拟多个手势。每个手势的参数为[delay, duration, 坐标], delay为延迟多久(毫秒)才执行该手势；duration为手势执行时长；坐标为手势经过的点的坐标。</p><p>其中delay参数可以省略，默认为0。</p><p>例如手指捏合：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 三指下滑截屏</span></span><br><span class="line">gestures(</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">230</span>, <span class="number">452</span>], [<span class="number">230</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">500</span>, <span class="number">452</span>], [<span class="number">500</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">755</span>, <span class="number">452</span>], [<span class="number">755</span>, <span class="number">1000</span>]]</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h3 id="屏幕缩放"><a href="#屏幕缩放" class="headerlink" title="屏幕缩放"></a>屏幕缩放</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// serScreenMetrics(width,height) //aj自带屏幕缩放函数</span></span><br><span class="line"><span class="comment">// var h = device.height 获取屏幕高度px</span></span><br><span class="line"><span class="comment">// var w = device.width 获取屏幕宽度px</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//屏幕缩放函数 适配多机型</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clicks</span>(<span class="params">x,y</span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line"><span class="comment">//注意,测试机型为1080*2340,你可以根据自己的机型修改</span></span><br><span class="line">x1=device.width/<span class="number">1080</span>   <span class="comment">//屏幕宽度，单位像素</span></span><br><span class="line">y1=device.height/<span class="number">2340</span>   <span class="comment">//屏幕高度，单位像素</span></span><br><span class="line"></span><br><span class="line">click(x*x1,y*y1)</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="点击的方法"><a href="#点击的方法" class="headerlink" title="点击的方法"></a>点击的方法</h2><h3 id="控件点击"><a href="#控件点击" class="headerlink" title="控件点击"></a>控件点击</h3><p>首先推荐的必然是控件点击，它的逻辑是只要能被侦测，就能被点击，无论它是躲在某个悬浮窗后面，还是躲在看不见的下滑栏的底部,即使是app在弹广告，依然可以无视掉。前提是找到控件的特殊属性</p><p>寻找控件建议不要用findOne()、waitFor()、exists()等一些会阻塞的方法，不然稍微出现一点其他事件就会阻塞，导致脚本莫名其妙的卡死，使用findOne(timeout)、findonce()时可以加个判断在不为null的时候再点击或其他操作，因为没找到返回null，直接click就会报错，脚本停止运行，要是是找的父或者子控件也写到判断里</p><p>bounds(813,883,1039,993).findOne().click();</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 包括控件点击和坐标点击</span></span><br><span class="line"><span class="comment"> * clickControl(element)</span></span><br><span class="line"><span class="comment"> * 参数填属性</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">a=className(<span class="string">"android.widget.TextView"</span>).text(<span class="string">"芭芭农场"</span>);</span><br><span class="line"></span><br><span class="line">clickControl(a)</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">clickControl</span>(<span class="params">element,timeOut</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (!timeOut) { timeOut = <span class="number">1000</span> }</span><br><span class="line">    <span class="keyword">let</span> clickResult = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (element == <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">if</span> (element.exists()) {</span><br><span class="line">            toastLog(<span class="string">"准备click："</span> + element);</span><br><span class="line">            <span class="keyword">let</span> clickable = element.clickable();<span class="comment">//是否可以点击</span></span><br><span class="line">            <span class="keyword">if</span> (clickable) {</span><br><span class="line">                toastLog(<span class="string">"该控件可点击，尝试直接点击"</span>)</span><br><span class="line">                <span class="comment">// element.findOnce(timeOut).click();</span></span><br><span class="line">                clickResult = element.findOnce(timeOut).click();</span><br><span class="line">                sleep(random(<span class="number">500</span>, <span class="number">1000</span>));</span><br><span class="line">            } <span class="keyword">else</span>  {</span><br><span class="line">                toastLog(<span class="string">"尝试坐标点击"</span>)</span><br><span class="line">                <span class="keyword">let</span> b = element.findOnce(timeOut).bounds();</span><br><span class="line">                click(b.centerX(), b.centerY());</span><br><span class="line">                clickResult =click(b.centerX(), b.centerY());</span><br><span class="line">                sleep(random(<span class="number">500</span>, <span class="number">1000</span>));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> clickResult;</span><br><span class="line">    } <span class="keyword">catch</span> (error) {</span><br><span class="line">        toast(<span class="string">"clickControl方法出现错误："</span> + error)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="层级结构"><a href="#层级结构" class="headerlink" title="层级结构"></a>层级结构</h3><p>其次仍然是控件点击的延申，层级点击，分为两种点击，通常用于app内的网页展示，表现可以具体参照jd，它的结构极其杂乱</p><p>写10多个child，找到它的那个拥有独一无二参数的上家，此时需要pc端控件查看，才能理清思路<br>另外一种 就是使用indexInParent().depth()去查找，如果怕重复，就可以换为find()，然后再一个个检查 下面是一个我在饿了么里面用到的一段代码：<br>sleep(3000); depth(‘15’).indexInParent(‘3’).waitFor(); log(‘页面加载完成\n等待5s’); sleep(5000);</p><p>let exb = depth(‘16’).indexInParent(‘0’).find(); for(i = 0; i &lt; exb.length; i++){ if(exb[i].bounds().centerX() &gt; dev_width/2) continue; if(exb[i].bounds().centerY() &gt; dev_hight/2) break; } exb[i].click();sleep(2000);</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.不断查找某控件父元素，并点击(解决模拟器和手机不查找元素不一致问题)</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">up_click</span>(<span class="params">x</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (x &amp;&amp; x.clickable()) <span class="keyword">return</span> x.click();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> ii = <span class="number">0</span>; ii &lt; <span class="number">6</span>; ii++) {</span><br><span class="line">      <span class="keyword">if</span> (!x) <span class="keyword">break</span></span><br><span class="line">      x = x.parent();</span><br><span class="line">      <span class="keyword">if</span> (x &amp;&amp; x.clickable()) <span class="keyword">return</span> x.click();</span><br><span class="line">      <span class="keyword">let</span> list_x = x.children();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list_x.length; i++) </span><br><span class="line">      {<span class="keyword">if</span> (list_x[i] &amp;&amp; list_x[i].clickable()) <span class="keyword">return</span> list_x[i].click()};}</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="识图点击"><a href="#识图点击" class="headerlink" title="识图点击"></a>识图点击</h3><p>即便层级结构复杂，我也是不推荐识图点击，有个例外，就是1对1定制，只在有限的几个设备上用，那识图确实是个省力的活，<br>但是如果面向很多用户，并不推荐， 理由1 不同人的手机屏幕分辨率和尺寸不同，结果就是ppi不同，缩放不同，识图基本上是像素点对比的，所谓的容错也只是颜色的范围，这种问题同样出现在Windows中的pywinauto上 理由2 除了ppi不同导致图案大小不同，还会导致颜色色彩不同，是的，色彩，rgb值不一样。 修正方案：hamibot作者给的建议，只截取屏幕的一长条区域，进行颜色判定。</p><p>③找图找色特别消耗内存，所以在能用控件就用控件，找图找色在找到后要用recycle()来对创建的图像对象回收，提高脚本稳定，让脚本能持续运行更长时间，截图也需要一定的时间</p><p>④如果脚本有悬浮窗，使用找图要注意不要将要找的图遮挡<br>不要在循环里面读图，还有就是不要频繁操作大字符串<br>image对象创建后尽量在不使用时进行回收，同时避免循环创建大量图片。因为图片是一种占用内存比较大的资源</p><h4 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h4><p>images.matchTemplate(img, template, options)</p><p>作用：[v4.1.0新增]在大图片中搜索小图片，并返回搜索结果MatchingResult。该函数可以用于找图时找出多个位置，可以通过max参数控制最大的结果数量。也可以对匹配结果进行排序、求最值等操作。返回 {MatchingResult}</p><p>参数：<br>    img {Image} 大图片<br>    template {Image} 小图片（模板）<br>    options {Object} 找图选项：<br>        1.threshold {number} 图片相似度。取值范围为0~1的浮点数。默认值为0.9。<br>        2.region {Array} 找图区域。参见findColor函数关于region的说明。<br>        3.max {number} 找图结果最大数量，默认为5<br>        4.transparentMask {boolean} 是否使用透明模板找图。此选项开启后，传入的template参数可以是一个透明背景的图片对象用于匹配。此选项为 [Pro 8.0新增] 。<br>        5.level {number} 一般而言不必修改此参数。不加此参数时该参数会根据图片大小自动调整。找图算法是采用图像金字塔进行的, level参数表示金字塔的层次, level越大可能带来越高的找图效率，但也可能造成找图失败（图片因过度缩小而无法分辨）或返回错误位置。因此，除非您清楚该参数的意义并需要进行性能调优，否则不需要用到该参数。</p><h4 id="返回的MatchingResult对象"><a href="#返回的MatchingResult对象" class="headerlink" title="返回的MatchingResult对象"></a>返回的MatchingResult对象</h4><p>matches<br>    数组的元素是一个Match对象：<br>        point {Point} 匹配位置<br>        similarity {number} 相似度<br>points<br>first()<br>last()<br>leftmost()<br>topmost()<br>rightmost()<br>bottommost()<br>best()<br>worst()<br>sortBy(cmp)</p><h4 id="base64编码转换"><a href="#base64编码转换" class="headerlink" title="base64编码转换"></a>base64编码转换</h4><p>图片可以转为 base64 编码 直接写在脚本中 当做变量使用。。加快图片传输速度</p><p><a href="https://tool.chinaz.com/tools/imgtobase">base64图片转换工具</a></p><h6 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h6><p>1.images.fromBase64(图片的Base64数据)<br>解码Base64数据并返回解码后的图片Image对象。如果base64无法解码则返回null。</p><p>2.images.toBase64(Image对象[, 图片格式, 图片质量])<br>返回 {string},把图片编码为base64数据并返回。</p><h6 id="bytes"><a href="#bytes" class="headerlink" title="bytes"></a>bytes</h6><p>images.fromBytes(bytes)<br>bytes {byte[]} 字节数组<br>解码字节数组bytes并返回解码后的图片Image对象。如果bytes无法解码则返回null。</p><p>images.toBytes(Image对象[, 图片格式, 图片质量])</p><p>返回 {byte[]}<br>把图片编码为字节数组并返回。</p><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 循环找图：区域0.0.1080.760搜索到第一次小图位置在50.300，点击后，然后在从100.300.1080.760开始第二次搜索到位置在55.600，点击后，然后在从105.600.1080.760开始下一个搜索。每个搜索点击后判断一下当前Y位置是否到了图标出现的最大位置，超出就退出循环找图(就是全屏找，找到第一个就从第一个位置加点距离开始找第二个。)</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多张图判断</span></span><br><span class="line"><span class="keyword">var</span> findImgPoint = findImage(personHomeCapture, goldcoinTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0.9</span></span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, goldballTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion</span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, yellowgirlTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion,</span><br><span class="line">        <span class="attr">threshold</span>: <span class="number">0.9</span></span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, chivesTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion</span><br><span class="line">    }) ||</span><br><span class="line">    findImage(personHomeCapture, pillowTempl, {</span><br><span class="line">        <span class="attr">region</span>: findImgRegion</span><br><span class="line">    });</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//找图点击 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">png_click</span>(<span class="params">num, pngbase64</span>)</span>{</span><br><span class="line">  <span class="keyword">while</span>(num--){</span><br><span class="line">      <span class="keyword">let</span> img = captureScreen();</span><br><span class="line">      <span class="keyword">let</span> temp1 = images.fromBase64(pngbase64);</span><br><span class="line">      <span class="keyword">let</span> pos = findImage(img, temp1);</span><br><span class="line">      <span class="keyword">if</span>(pos){<span class="keyword">return</span> click(pos.x, pos.y);} <span class="keyword">else</span> sleep(<span class="number">1000</span>);}</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">              </span><br><span class="line"><span class="built_in">require</span> (<span class="string">"./权限/获取截图权限"</span>)</span><br><span class="line"><span class="built_in">console</span>.show ()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">find_img_click</span>(<span class="params">imgpath, regions,thresholds </span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> img1 = images.read( imgpath );</span><br><span class="line">    <span class="keyword">let</span> 缩放x = device.width / <span class="number">1080</span></span><br><span class="line">    <span class="keyword">let</span> 缩放y = device.height / <span class="number">2400</span></span><br><span class="line">    <span class="comment">//缩放后的图</span></span><br><span class="line">    <span class="keyword">let</span> img2 = images.scale(img1, 缩放x, 缩放y)</span><br><span class="line">    <span class="comment">// captureScreen()函数截全屏</span></span><br><span class="line">    <span class="keyword">let</span> result = images.matchTemplate( captureScreen(), img2, {</span><br><span class="line">        <span class="attr">max</span>: <span class="number">5</span>,</span><br><span class="line">        <span class="attr">region</span>: regions, <span class="comment">//区域</span></span><br><span class="line">        <span class="attr">threshold</span>: thresholds,</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">let</span> img_w = img2.getWidth()</span><br><span class="line">    <span class="keyword">let</span> img_h = img2.getHeight()</span><br><span class="line">    <span class="comment">//回收图片</span></span><br><span class="line">    img2.recycle();</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="literal">null</span>) {</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; result.matches.length; i++) {</span><br><span class="line">            <span class="keyword">let</span> pp = result.matches[i].point</span><br><span class="line">            log(<span class="string">'所找图坐标是：'</span>+pp)</span><br><span class="line">            log(<span class="string">'所找图宽高为'</span>+img_w,img_h)</span><br><span class="line">            <span class="built_in">console</span>.warn(<span class="string">"找到"</span> + imgpath, pp.x, pp.y)</span><br><span class="line"></span><br><span class="line">            <span class="comment">//随机点击坐标</span></span><br><span class="line">            <span class="comment">// let a = pp.x+Math.floor(Math.random()*5)</span></span><br><span class="line">            <span class="comment">// let b = pp.y+Math.floor(Math.random()*5)</span></span><br><span class="line">            <span class="keyword">let</span> a = random(pp.x,pp.x+img_w)</span><br><span class="line">            <span class="keyword">let</span> b = random(pp.y,pp.y+img_h)</span><br><span class="line">            click( a,  b)</span><br><span class="line">            log(<span class="string">'随机点击范围内的坐标是:'</span>+ a+<span class="string">','</span>+ b)</span><br><span class="line">            <span class="built_in">console</span>.error(<span class="string">"点击--"</span> + imgpath)</span><br><span class="line">            sleep(<span class="number">200</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"===未找到"</span> + imgpath)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用识图函数</span></span><br><span class="line">imgpath=<span class="string">'/sdcard/脚本/2.jpg'</span>   <span class="comment">//图片路径</span></span><br><span class="line">regions=[<span class="number">0</span>, <span class="number">0</span>, device.width, device.height]   <span class="comment">//识图范围</span></span><br><span class="line">thresholds=<span class="number">0.4</span>      <span class="comment">// 识别率要低一点</span></span><br><span class="line"></span><br><span class="line">find_img_click(imgpath,regions, <span class="number">0.75</span>)  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="区域找色点击"><a href="#区域找色点击" class="headerlink" title="区域找色点击"></a>区域找色点击</h3><p>images.findColor(image, color, options) 在图片中寻找颜色color。找到时返回找到的点Point，找不到时返回null。<br>    image {Image} 图片</p><pre><code>color {number | string} 要寻找的颜色的RGB值。如果是一个整数，则以0xRRGGBB的形式代表RGB值（A通道会被忽略）；如果是字符串，则以"#RRGGBB"代表其RGB值。options {Object} 选项选项包括：region {Array} 找色区域。是一个两个或四个元素的数组。(region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。{如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。}{如果不指定region选项，则找色区域为整张图片。}threshold {number} 找色时颜色相似度的临界值，范围为0 ~ 255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.该函数也可以作为全局函数使用。</code></pre><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cs_click</span>(<span class="params">rgb, xr, yr, wr, hr</span>) </span>{</span><br><span class="line">  <span class="keyword">let</span> img = captureScreen()</span><br><span class="line">  <span class="keyword">let</span> point = findColor(img, rgb, {</span><br><span class="line">       <span class="attr">region</span>: [img.getWidth() * xr, img.getHeight() * yr, img.getWidth() * wr, img.getHeight() * hr], <span class="attr">threshold</span>: <span class="number">8</span> })</span><br><span class="line">      <span class="keyword">if</span> (point) {</span><br><span class="line">          point.x = img.getWidth() - point.x; point.y = img.getHeight() - point.y       </span><br><span class="line">          <span class="keyword">return</span> click(point.x, point.y);</span><br><span class="line">      }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置好友数，避免特殊情况一直循环</span></span><br><span class="line">friend_num=<span class="number">6</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;friend_num;i++){</span><br><span class="line">    <span class="keyword">let</span> point = findColor(img, <span class="string">'#1fa071'</span>, {</span><br><span class="line">        <span class="attr">region</span>: [<span class="number">960</span>,<span class="number">400</span>,screen_width-<span class="number">960</span>,<span class="number">1450</span>], <span class="attr">threshold</span>: <span class="number">20</span> })</span><br><span class="line">       <span class="keyword">if</span> (point) {</span><br><span class="line">               </span><br><span class="line">        <span class="comment">//    click(point.x, point.y);</span></span><br><span class="line">           log(<span class="string">'进入好友'</span>+point.x, point.y)</span><br><span class="line">           CollectEnergy();</span><br><span class="line">           back()</span><br><span class="line">           sleep(<span class="number">500</span>)</span><br><span class="line">       }<span class="keyword">else</span>{</span><br><span class="line">           log(<span class="string">'好友能量收集完毕'</span>);</span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="多点找色点击"><a href="#多点找色点击" class="headerlink" title="多点找色点击"></a>多点找色点击</h3><p>images.findMultiColors(img, firstColor, colors[, options])<br>    img:要找色的图片<br>    firstColor {number | string} 第一个点的颜色<br>    colors {Array} 表示剩下的点相对于第一个点的位置和颜色的数组，数组的每个元素为[x, y, color]<br>    options {Object} 选项，包括：<br>        region {Array} 找色区域。是一个两个或四个元素的数组。<br>        (region[0], region[1])表示找色区域的左上角；region[2]*region[3]表示找色区域的宽高。如果只有region只有两个元素，则找色区域为(region[0], region[1])到图片右下角。如果不指定region选项，则找色区域为整张图片。<br>        threshold {number} 找色时颜色相似度的临界值，范围为0 -255（越小越相似，0为颜色相等，255为任何颜色都能匹配）。默认为4。threshold和浮点数相似度(0.0~1.0)的换算为 similarity = (255 - threshold) / 255.</p><p>多点找色,其过程如下：<br>在图片img中找到颜色firstColor的位置(x0, y0)<br>对于数组colors的每个元素[x, y, color]，检查图片img在位置(x + x0, y + y0)上的像素是否是颜色color，是的话返回(x0, y0)，否则继续寻找firstColor的位置，重新执行第1步<br>整张图片都找不到时返回null</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = images.findMultiColors(img, <span class="string">"#123456"</span>, [[<span class="number">10</span>, <span class="number">20</span>, <span class="string">"#ffffff"</span>], [<span class="number">30</span>, <span class="number">40</span>, <span class="string">"#000000"</span>]], </span><br><span class="line">{<span class="attr">region</span>: [<span class="number">0</span>, <span class="number">960</span>, device.width, device.height ]});</span><br><span class="line"></span><br><span class="line">toastLog(<span class="string">"x = "</span> + point.x + <span class="string">", y = "</span> + point.y);</span><br><span class="line">click (point.x, point.y)</span><br></pre></td></tr></tbody></table></figure><h3 id="ocr点击"><a href="#ocr点击" class="headerlink" title="ocr点击"></a>ocr点击</h3><p><a href="https://www.yuque.com/yashujs/bfug6u/zxvf79">牙叔识别数字ocr</a><br><a href="https://blog.csdn.net/YY007H/article/details/124540297">基于PaddleOCR开发Auto.js Pro文字识别插件</a></p><h4 id="百度ocr"><a href="#百度ocr" class="headerlink" title="百度ocr"></a>百度ocr</h4><p>借用外部的ocr识别，拿到字的坐标<br><a href="https://console.bce.baidu.com/ai/?fromai=1#/ai/ocr/app/list">百度ocr</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百度OCR 三连发</span></span><br><span class="line"><span class="comment">//ocr1 返回识图结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Baidu_ocr</span>(<span class="params">imgFile</span>)</span>{</span><br><span class="line">  log(<span class="string">"识图..."</span>);</span><br><span class="line">  <span class="keyword">var</span> imag64 = images.toBase64(imgFile, <span class="string">"png"</span>, <span class="number">100</span>);</span><br><span class="line">  <span class="keyword">var</span> API_Key=<span class="string">"自己的AK"</span>;</span><br><span class="line">  <span class="keyword">var</span> Secret_Key=<span class="string">"自己的SK"</span>;</span><br><span class="line">  <span class="keyword">var</span> getTokenUrl=<span class="string">"https://aip.baidubce.com/oauth/2.0/token"</span>;<span class="comment">//选择网络图片识别</span></span><br><span class="line">  <span class="keyword">var</span> token_Res = http.post(getTokenUrl, {</span><br><span class="line">      <span class="attr">grant_type</span>: <span class="string">"client_credentials"</span>,</span><br><span class="line">      <span class="attr">client_id</span>: API_Key,</span><br><span class="line">      <span class="attr">client_secret</span>: Secret_Key,</span><br><span class="line">  });</span><br><span class="line">  <span class="keyword">var</span> access_token=token_Res.body.json().access_token;</span><br><span class="line">  <span class="keyword">var</span> ocrUrl = <span class="string">"https://aip.baidubce.com/rest/2.0/ocr/v1/webimage_loc"</span>;</span><br><span class="line">  <span class="keyword">var</span> ocr_Res = http.post(ocrUrl, {</span><br><span class="line">      <span class="attr">headers</span>: {</span><br><span class="line">          <span class="string">"Content - Type"</span>: <span class="string">"application/x-www-form-urlencoded"</span></span><br><span class="line">      },</span><br><span class="line">      <span class="attr">access_token</span>: access_token,</span><br><span class="line">      <span class="attr">image</span>: imag64,</span><br><span class="line">      <span class="attr">language_type</span>:<span class="string">"CHN_ENG"</span><span class="comment">//可添加额外参数</span></span><br><span class="line">  });</span><br><span class="line">  sleep(<span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">var</span> json = ocr_Res.body.json();</span><br><span class="line">  <span class="keyword">return</span> json.words_result;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//OCR2 处理返回结果 并点击</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ocr_click</span>(<span class="params">target_words</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> imgScreen = captureScreen();</span><br><span class="line">  <span class="keyword">var</span> logOcr= Baidu_ocr(imgScreen);</span><br><span class="line">  <span class="keyword">var</span> target_nums = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; logOcr.length; i++){</span><br><span class="line">      <span class="keyword">if</span>(target_words == logOcr[i].words) {<span class="built_in">console</span>.log(<span class="string">'找到：'</span>+target_words);target_nums = i;<span class="keyword">break</span>;}</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span>(!target_nums) {log(<span class="string">'未找到指定文字'</span>);<span class="keyword">return</span> <span class="literal">false</span>;}</span><br><span class="line">  <span class="keyword">let</span> postion = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line">  postion[<span class="number">1</span>] = logOcr[target_nums].location.top;</span><br><span class="line">  postion[<span class="number">0</span>] = logOcr[target_nums].location.left;</span><br><span class="line">  sleep(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">  click(postion[<span class="number">0</span>], postion[<span class="number">1</span>]);</span><br><span class="line">  <span class="keyword">return</span> postion;</span><br><span class="line">}</span><br><span class="line"><span class="comment">//ocr3.记录所有相同字的位置，目的是为了尽可能的少发送截图请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">list_ocr</span>(<span class="params">target_words</span>) </span>{</span><br><span class="line">  sleep(<span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">let</span> img = captureScreen();</span><br><span class="line">  <span class="keyword">let</span> imgScreen = images.clip(img, <span class="number">0</span>, dev_hight/<span class="number">2</span>, dev_width, dev_hight/<span class="number">2</span>);</span><br><span class="line">  <span class="keyword">var</span> logOcr= Baidu_ocr(imgScreen);</span><br><span class="line">  <span class="keyword">let</span> nums_list = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">let</span> times = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; logOcr.length; i++){</span><br><span class="line">      <span class="keyword">if</span>(target_words == logOcr[i].words) nums_list[times++] = i;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span>(!times) {log(<span class="string">'未找到指定文字'</span>);<span class="keyword">return</span> <span class="literal">false</span>;}</span><br><span class="line">    <span class="keyword">else</span> log(<span class="string">'找到'</span>+times+<span class="string">'个'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> postion = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  <span class="keyword">for</span>(k = <span class="number">0</span>; k &lt; times; k++){</span><br><span class="line">    postion[k]=<span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; times; i++){</span><br><span class="line">    postion[i][<span class="number">0</span>] = logOcr[nums_list[i]].location.left;</span><br><span class="line">    postion[i][<span class="number">1</span>] = logOcr[nums_list[i]].location.top;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> postion; </span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="浩然ocr"><a href="#浩然ocr" class="headerlink" title="浩然ocr"></a>浩然ocr</h4><p>ocrResult.frame<br>{List} 识别结果的位置<br>识别结果为一个任意四边形，返回的是长度为8的整形列表。 分别为四个顶点的横纵坐标，即[x1,y1,x2,y2,x3,y3,x4,y4]。<br>[左上，右上，右下，左下]</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">HaoranOcrClick(<span class="string">'订阅号'</span>)</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HaoranOcrClick</span>(<span class="params">target</span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> ocr = $plugins.load(<span class="string">"com.hraps.ocr"</span>);</span><br><span class="line">    GetScreenCapture()</span><br><span class="line">    sleep(<span class="number">500</span>)</span><br><span class="line">    <span class="comment">//识别图片</span></span><br><span class="line">    results = ocr.detect(captureScreen().getBitmap(), <span class="number">1</span>)     <span class="comment">//缩放比率</span></span><br><span class="line">    <span class="built_in">console</span>.show()</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">"过滤前结果数："</span> + results.size())</span><br><span class="line">    <span class="comment">//识别结果过滤</span></span><br><span class="line">    results = ocr.filterScore(results, <span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">    <span class="comment">//输出最终结果</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; results.size(); i++) {</span><br><span class="line">        <span class="keyword">var</span> re = results.get(i)</span><br><span class="line">        <span class="keyword">let</span> t = re.text   <span class="comment">//识别出的文字</span></span><br><span class="line">        <span class="keyword">let</span> p = re.frame  <span class="comment">//位置</span></span><br><span class="line">        <span class="keyword">for</span> (j=<span class="number">0</span> ;j&lt;target.length;j++){    </span><br><span class="line">            <span class="comment">//判断每个字符都在识别结果内   </span></span><br><span class="line">            <span class="keyword">var</span> pan = re.text .includes(target[j])</span><br><span class="line">            <span class="keyword">if</span>(!pan){</span><br><span class="line">                log(<span class="string">'目标字符不在识别结果内'</span>);           </span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }<span class="keyword">else</span>{</span><br><span class="line">                <span class="keyword">var</span> a=j+<span class="number">1</span></span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            }  </span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span>(a==target.length){</span><br><span class="line">            <span class="keyword">let</span> x = p[<span class="number">0</span>] + (p[<span class="number">2</span>] - p[<span class="number">0</span>]) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">let</span> y = p[<span class="number">1</span>] + (p[<span class="number">5</span>] - p[<span class="number">1</span>]) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'全部找到文字准备点击：'</span> + t + <span class="string">"\n其中心坐标是"</span> + x, y);</span><br><span class="line">            click(x, y);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        }</span><br><span class="line">    }      </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="坐标点击"><a href="#坐标点击" class="headerlink" title="坐标点击"></a>坐标点击</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 纯粹设置坐标点击</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{*}</span> <span class="variable">x</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">{*}</span> <span class="variable">y</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{*}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CoordClick</span>(<span class="params">x,y</span>)</span>{</span><br><span class="line">    click(x+random(-<span class="number">20</span>,<span class="number">20</span>),y+random(-<span class="number">20</span>,<span class="number">20</span>))</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功点击'</span>+x,y )</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="轮廓识别"><a href="#轮廓识别" class="headerlink" title="轮廓识别"></a>轮廓识别</h3><p>图色的高级版</p><h3 id="直接点击字符"><a href="#直接点击字符" class="headerlink" title="直接点击字符"></a>直接点击字符</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 直接点击字符</span></span><br><span class="line">click(<span class="string">"str"</span>,index);                   <span class="comment">//点击第index个字符"str"(因为有时str会出现多次，另外注意下标从0开始)</span></span><br></pre></td></tr></tbody></table></figure><h2 id="shell命令"><a href="#shell命令" class="headerlink" title="shell命令"></a>shell命令</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">点击 input tap X Y</span><br><span class="line">长按250ms input swipe X1 Y1 X1 Y1 250</span><br><span class="line">划屏250ms input swipe X1 Y1 X2 Y2 250</span><br><span class="line">输入文本 input text 文本</span><br><span class="line"></span><br><span class="line">②</span><br><span class="line">安装apk pm install &lt;apk位置&gt;</span><br><span class="line">卸载apk pm uninstall &lt;包名&gt;</span><br><span class="line">隐藏应用pm hide &lt;包名&gt;</span><br><span class="line">显示应用pm unhide &lt;包名&gt;</span><br><span class="line">停止应用 am force-stop 包名</span><br><span class="line"></span><br><span class="line">③</span><br><span class="line">am start -n 包名/包名＋类名（-n 类名,-a action,-d date,-m MIME-TYPE,-c category,-e 扩展数据,等）</span><br><span class="line">(这个是可玩性最强的，可以设置在打开应用时运行该命令来达到跳广告，其他还有很多，我也正在研究中)</span><br><span class="line">跳广告例子：打开优酷时触发(当然也可以用活动触发，但是得找到这个活动)</span><br><span class="line">am start -n com.youku.phone/com.youku.phone.com.youku.HomePageEntry</span><br><span class="line">就可以跳广告</span><br><span class="line">注：应用包名可以用 【酷安】 的应用管理找或者用其他的都可以</span><br><span class="line">活动名称可以用 【开发者助手】 来找</span><br><span class="line"></span><br><span class="line">④</span><br><span class="line">打开网址(默认浏览器) am start -a android.intent.action.VIEW -d 网址</span><br><span class="line">微信打开网址</span><br><span class="line">am start -n com.tencent.mm/com.tencent.mm.plugin.webview.ui.tools.WebViewUI -d 网址</span><br><span class="line"></span><br><span class="line">⑤</span><br><span class="line">打开桌面图标(比如桌面的快捷方式、小程序等)</span><br><span class="line">am start "intent:@" (@是/data/data/com.miui.home/databases/launcher5x6.db里的图标对应的intent值</span><br><span class="line"></span><br><span class="line">⑥</span><br><span class="line">关机 shutdown</span><br><span class="line">重启 reboot</span><br></pre></td></tr></tbody></table></figure><h2 id="opencv-autojs常用命令"><a href="#opencv-autojs常用命令" class="headerlink" title="opencv-autojs常用命令"></a>opencv-autojs常用命令</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/yur8h8">https://www.yuque.com/yashujs/bfug6u/yur8h8</a></p><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="autojs提取软件自带例子"><a href="#autojs提取软件自带例子" class="headerlink" title="autojs提取软件自带例子"></a>autojs提取软件自带例子</h3><p>通过mt管理器点击autojspro的安装包，然后点击查看，依次打开assets/sample/中文，这就是例子文件。<br>然后长按文件夹解压到任意目录</p><p>如果没有mt管理器，可以直接将autojspro.apk的后缀改成.zip,当成压缩包来提取文件。</p><p>快捷打开无障碍，长按两个音量键三秒</p><p>如何打开控制台<br>依次点击 帮助—–切换开发者工具——console</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>查找控件存不存在使用exists ()。一般情况下Autojs生成的代码是：if (text(“刷视频赚”).exists()) {}，不建议这样写，有很多时候找不到或者是有多个文字一样的内容故：let earnVideo= className(“android.widget.TextView”).text(“刷视频赚”).findOnce();这样写准确率更高。</p><p>为什么有时候launchApp(‘应用名’);会失效<br>第一,这是因为你手机存在同名软件.找不到你想要的app，要使用launch(‘应用包名’)。第二,是因为你没有给软件(后台弹出界面)权限</p><p>如果有界面，那么监听通知需要放在线程里。<br>webview 注入js的js文件需要改后缀，如果还是js,会被加密导致无法使用<br>webview 内页面引用静态文件可以使用相对路径<br>如果多次调用 even.on，event.emit 会触发多次。可以用 even.removeAllListeners进行清除。<br>console.show 调用时范围只是当前线程。<br>不要在UI线程内死循环，要重新开启一个线程，不然会卡死<br>无障碍服务权限申请可以使用auto,直接跳转到设置页。<br>通知使用服务第一次调用后会提示一次之后，如果没有给予权限。大概率不再弹窗，并且不会报错。如果一直没有给权限，而且无法弹窗需要引导用户手动开启，并重启脚本。</p><h3 id="支付宝-微信-其他软件"><a href="#支付宝-微信-其他软件" class="headerlink" title="支付宝/微信/其他软件"></a>支付宝/微信/其他软件</h3><p>在使用autojs时，遇到支付宝和微信以及一些安全意识较强的平台，很难获取到其页面的控件，无论你是使用autojs自带的控件分析<br>或是Android studio的uiautomatorviewer.bat来分析它们的页面控件，都会分析到。但是你在获取的时侯就会发现根本获取不到，</p><p>原因<br>支付宝和微信都把它们的控件藏起来了，可能是封装成某个类型，那个类型的输出就是空行。</p><p>我的方法是获取其控件后在其末尾加了个string，使得整个内容强转成string。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> meId2 = id(<span class="string">"XXX"</span>).find()+<span class="string">""</span>;<span class="comment">//找到id为XXX的控件，然后加上空字符串</span></span><br><span class="line"><span class="comment">//整个类型现在变成string，现在就可以用字符串截取的方式来获取控件的信息了。</span></span><br></pre></td></tr></tbody></table></figure><p>//pro9基本无法使用，低版本可以<br>while(!click(“智慧广工商”));</p><p>click(“智慧广工商”)</p><h2 id="http-put"><a href="#http-put" class="headerlink" title="http put"></a>http put</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http</span><br><span class="line">  .request(url, {</span><br><span class="line">    <span class="attr">method</span>: <span class="string">"PUT"</span>,</span><br><span class="line">    <span class="attr">body</span>: <span class="built_in">JSON</span>.stringify({</span><br><span class="line">      <span class="attr">access_token</span>: access_token,</span><br><span class="line">      <span class="attr">content</span>: android.util.Base64.encodeToString(files.readBytes(path), <span class="number">2</span>),</span><br><span class="line">      <span class="attr">sha</span>: fileinfo.sha,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">"更新文件"</span>,</span><br><span class="line">    }),</span><br><span class="line">    <span class="attr">headers</span>: {</span><br><span class="line">      <span class="string">"Content-Type"</span>: <span class="string">"application/json;charset=UTF-8"</span>,</span><br><span class="line">    },</span><br><span class="line">  })</span><br><span class="line">  .body.json();</span><br></pre></td></tr></tbody></table></figure><h2 id="本地储存-Storages"><a href="#本地储存-Storages" class="headerlink" title="本地储存 - Storages"></a>本地储存 - Storages</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存数组和对象</span></span><br><span class="line"><span class="keyword">var</span> storage = storages.create(<span class="string">"Auto.js例子:复杂数据"</span>);</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> obj = {</span><br><span class="line">    <span class="attr">name</span>: <span class="string">"Auto.js"</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">"www.autojs.org"</span></span><br><span class="line">};</span><br><span class="line"><span class="comment">//保存</span></span><br><span class="line">storage.put(<span class="string">"arr"</span>, arr);</span><br><span class="line">storage.put(<span class="string">"obj"</span>, obj);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.show();</span><br><span class="line"><span class="comment">//取出</span></span><br><span class="line">log(<span class="string">"arr = "</span>, storage.get(<span class="string">"arr"</span>));</span><br><span class="line">log(<span class="string">"obj = "</span>, storage.get(<span class="string">"obj"</span>));</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="图片与颜色"><a href="#图片与颜色" class="headerlink" title="图片与颜色"></a>图片与颜色</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/gws4dp">autojs之内存泄露</a><br><a href="https://gitee.com/yiszza/ScriptGraphicHelper#https://gitee.com/yiszza/ScriptGraphicHelper/releases">图色助手下载</a><br><a href="https://www.sioe.cn/yingyong/yanse-rgb-16/">RGB颜色值与十六进制颜色码转换工具</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 彩图转灰度图</span></span><br><span class="line">images.cvtColor(img, <span class="string">"RGBA2GRAY"</span>);</span><br></pre></td></tr></tbody></table></figure><p><strong>2. 及时回收图片</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">events.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (bigImg &amp;&amp; !bigImg.isRecycled()) {</span><br><span class="line">    bigImg.recycle();</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (smallImg &amp;&amp; !smallImg.isRecycled()) {</span><br><span class="line">    smallImg.recycle();</span><br><span class="line">  }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="dex"><a href="#dex" class="headerlink" title="dex"></a>dex</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载目标dex文件，加载成功后将可以使用该dex文件的类。</span></span><br><span class="line">runtime.loadDex(filePath);</span><br><span class="line"></span><br><span class="line"><span class="comment">// package com.keke;      </span></span><br><span class="line"><span class="comment">// public class YaShu {}</span></span><br><span class="line">importClass(com.keke.YaShu);  <span class="comment">//导入类</span></span><br></pre></td></tr></tbody></table></figure><h2 id="多线程-Threads"><a href="#多线程-Threads" class="headerlink" title="多线程 - Threads"></a>多线程 - Threads</h2><p>threads.start(action)<br>    启动一个新线程并执行action。返回 {Thread}<br>    action {Function} 要在新线程执行的函数</p><h2 id="悬浮窗-Floaty"><a href="#悬浮窗-Floaty" class="headerlink" title="悬浮窗-Floaty"></a>悬浮窗-Floaty</h2><h3 id="FloatyWindow对象"><a href="#FloatyWindow对象" class="headerlink" title="FloatyWindow对象"></a>FloatyWindow对象</h3><p><strong>floaty.window(layout)</strong><br>    layout {xml} | {View} 悬浮窗界面的XML或者View<br>    指定悬浮窗的布局，创建并显示一个悬浮窗，返回一个FloatyWindow对象。</p><p><strong>方法</strong><br>    window.setAdjustEnabled(enabled)  是否启用悬浮窗调整(大小、位置)<br>    window.setPosition(x, y)   设置悬浮窗位置。<br>    window.getX()   返回悬浮窗位置的X坐标。<br>    window.getY()<br>    window.setSize(width, height)   设置悬浮窗宽高。<br>    window.getWidth()    返回悬浮窗宽度。<br>    window.getHeight()<br>    window.close()    关闭悬浮窗。如果悬浮窗已经是关闭状态，则此函数将不执行任何操作。被关闭后的悬浮窗不能再显示。<br>    window.exitOnClose()   使悬浮窗被关闭时自动结束脚本运行。</p><h3 id="FloatyRawWindow对象"><a href="#FloatyRawWindow对象" class="headerlink" title="FloatyRawWindow对象"></a>FloatyRawWindow对象</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> width = device.width</span><br><span class="line"><span class="keyword">var</span> height = device.height</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">window</span> = floaty.rawWindow(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span> = <span class="string">"board"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">h</span> = <span class="string">"{{device.height}}"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    <span class="attr">w</span> = <span class="string">"{{device.width}}"</span></span></span></span><br><span class="line"><span class="tag"><span class="xml">    /&gt;</span></span></span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p><strong>floaty.rawWindow(layout)</strong><br>参数：<br>    layout {xml} | {View} 悬浮窗界面的XML或者View<br>    指定悬浮窗的布局，创建并显示一个原始悬浮窗，返回一个FloatyRawWindow对象。</p><pre><code>与floaty.window()函数不同的是，该悬浮窗不会增加任何额外设施（例如调整大小、位置按钮），您可以根据自己需要编写任何布局。</code></pre><p><strong>方法</strong><br>    window.setTouchable(touchable)<br>    window.setPosition(x, y)<br>    window.getX()<br>    window.getY()<br>    window.setSize(width, height)<br>    window.getWidth()<br>    window.getHeight()<br>    window.close()<br>    window.exitOnClose()</p><h2 id="对话框-Dialogs"><a href="#对话框-Dialogs" class="headerlink" title="对话框 - Dialogs"></a>对话框 - Dialogs</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dialogs.alert(title[, content, callback])</span><br><span class="line"></span><br><span class="line">dialogs.confirm(title[, content, callback])</span><br><span class="line">dialogs.rawInput(title[, prefill, callback])</span><br><span class="line">dialogs.input(title[, prefill, callback])</span><br><span class="line">dialogs.prompt(title[, prefill, callback])</span><br><span class="line"></span><br><span class="line">dialogs.select(title, items, callback)</span><br><span class="line">    显示一个带有选项列表的对话框</span><br><span class="line">    title {string} 对话框的标题。</span><br><span class="line">    items {<span class="built_in">Array</span>} 对话框的选项列表，是一个字符串数组。</span><br><span class="line">    callback {<span class="built_in">Function</span>} 回调函数，可选。当用户点击确定时被调用,一般用于ui模式。</span><br><span class="line"></span><br><span class="line">dialogs.singleChoice(title, items[, index, callback])</span><br><span class="line">dialogs.multiChoice(title, items[, indices, callback])</span><br><span class="line">dialog.setDefaultDialogType(type)</span><br><span class="line">dialogs.build(properties)</span><br></pre></td></tr></tbody></table></figure><h2 id="用户界面-UI"><a href="#用户界面-UI" class="headerlink" title="用户界面: UI"></a>用户界面: UI</h2><p>ui模块提供了编写用户界面的支持。</p><p>给Android开发者或者高阶用户的提醒，Auto.js的UI系统来自于Android，所有属性和方法都能在Android源码中找到。如果某些代码或属性没有出现在Auto.js的文档中，可以参考Android的文档。<br>View: <a href="https://developer.android.google.cn/reference/android/view/View?hl=cn">https://developer.android.google.cn/reference/android/view/View?hl=cn</a><br>Widget: <a href="https://developer.android.google.cn/reference/android/widget/package-summary?hl=cn">https://developer.android.google.cn/reference/android/widget/package-summary?hl=cn</a></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"ui";</span><br><span class="line">$ui.layout(</span><br><span class="line">    &lt;vertical&gt;</span><br><span class="line">        &lt;button text="第一个按钮"/&gt;</span><br><span class="line">        &lt;button text="第二个按钮"/&gt;</span><br><span class="line">    &lt;/vertical&gt;</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><p>一个界面便由一些布局和控件组成。</p><h3 id="视图-View"><a href="#视图-View" class="headerlink" title="视图: View"></a>视图: View</h3><h3 id="视图属性"><a href="#视图属性" class="headerlink" title="视图属性"></a>视图属性</h3><p>w  View的宽度，是属性width的缩写形式。可以设置的值为*, auto和具体数值。<br>h  View的高度，是属性height的缩写形式。可以设置的值为*, auto和具体数值。<br>id   在代码中可以通过一个View的id来获取到这个View，并对他进行操作(设置点击动作、设置属性、获取属性等)<br>gravity  View的”重力”。用于决定View的内容相对于View的位置，可以设置的值为:<br>    left 靠左<br>    right 靠右<br>    top 靠顶部<br>    bottom 靠底部<br>    center 居中<br>    center_vertical 垂直居中<br>    center_horizontal 水平居中<br>layout_gravity  View在布局中的”重力”，用于决定View本身在他的父布局的位置，可以设置的值和gravity属性相同。</p><p>bg  View的背景。其值可以是一个链接或路径指向的图片，或者RGB格式的颜色，或者其他背景。<br>alpha  View的透明度，其值是一个0~1之间的小数，0表示完全透明，1表示完全不透明。<br>foreground  View的前景。前景即在一个View的内容上显示的内容，可能会覆盖掉View本身的内容。其值和属性bg的值类似。<br>minHeight  View的最小高度。<br>minWidth<br>visibility  View的可见性，<br><strong>style</strong>  设置View的样式。<br>rotation  View的旋转角度。通过该属性可以让这个View顺时针旋转一定的角度。<br>transformPivotX<br>transformPivotY<br>margin<br>marginLeft<br>marginRight<br>marginTop<br>marginBottom<br>padding<br>paddingLeft<br>paddingRight<br>paddingTop<br>paddingBottom</p><h3 id="对视图的操作"><a href="#对视图的操作" class="headerlink" title="对视图的操作"></a>对视图的操作</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取视图对象，通过视图view的id</span></span><br><span class="line">ui.[id]</span><br><span class="line">ui.findView(<span class="string">'id'</span>)</span><br><span class="line">$ui.findView(<span class="string">'id'</span>)</span><br></pre></td></tr></tbody></table></figure><p>ui.[id].getText()     //获取到这个按钮控件的文本内容<br>.setText()<br>.setDataSource(数组)    //获取数组元素</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对控件设置监听</span></span><br><span class="line">ui.fab.setOnClickListener(</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">view</span>)</span>{</span><br><span class="line">    toastLog(<span class="string">'你点击了fab'</span>)</span><br><span class="line">  }</span><br><span class="line">)</span><br></pre></td></tr></tbody></table></figure><h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><p>文本控件: text<br>    text<br>    textColor<br>    textSize<br>    textStyle<br>    lines<br>    maxLines<br>    typeface<br>    ellipsize<br>    ems<br>    autoLink<br>按钮控件: button<br>输入框控件: input<br>    hint<br>    textColorHint<br>    textSizeHint<br>    inputType<br>    password<br>    numeric<br>    phoneNumber<br>    digit<br>    singleLine<br>图片控件: img<br>    src<br>    tint<br>    scaleType<br>    radius<br>    radiusTopLeft<br>    radiusTopRight<br>    radiusBottomLeft<br>    radiusBottomRight<br>    borderWidth<br>    borderColor<br>    circle<br>垂直布局: vertical<br>layout_weight<br>水平布局: horizontal<br>layout_weight<br>线性布局: linear<br>帧布局: frame<br>相对布局: relative<br>勾选框控件: checkbox<br>选择框控件: radio<br>选择框布局: radiogroup<br>开关控件: Switch<br>checked<br>text<br>进度条控件: progressbar<br>拖动条控件: seekbar<br>下来菜单控件: spinner<br>时间选择控件: timepicker<br>日期选择控件: datepicker<br>浮动按钮控件: fab<br>标题栏控件: toolbar<br>卡片: card</p><h3 id="在ui使用webview"><a href="#在ui使用webview" class="headerlink" title="在ui使用webview"></a>在ui使用webview</h3><p>一个ui界面再调用另一个ui，把另一个ui封装成函数再调用，不需要另开一个线程</p><p>在ui使用webview</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>点击打开网页<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">webview</span> <span class="attr">id</span>=<span class="string">"web"</span>&gt;</span><span class="tag">&lt;/<span class="name">webview</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line">ui.btn.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">  ui.web.loadUrl(<span class="string">"https://www.baidu.com"</span>);</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><a href="https://www.yuque.com/yashujs/bfug6u/mv8e02">https://www.yuque.com/yashujs/bfug6u/mv8e02</a></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">// 字段映射</span></span><br><span class="line">      <span class="keyword">let</span> fieldMapping = {</span><br><span class="line">          <span class="string">"id"</span>: <span class="string">"int"</span>,</span><br><span class="line">          <span class="string">"desc"</span>: <span class="string">"String"</span>,</span><br><span class="line">      }</span><br><span class="line">      <span class="comment">// 表名</span></span><br><span class="line">      <span class="keyword">let</span> table = <span class="string">"record"</span>;</span><br><span class="line">      <span class="comment">// 建表</span></span><br><span class="line">      <span class="keyword">let</span> SQL = <span class="string">"CREATE TABLE IF NOT EXISTS "</span> + table+<span class="string">" ("</span></span><br><span class="line">          + <span class="string">"id INTEGER PRIMARY KEY AUTOINCREMENT,"</span></span><br><span class="line">          + <span class="string">"desc VARCHAR(255)"</span></span><br><span class="line">          + <span class="string">")"</span>;</span><br><span class="line">      <span class="comment">// 数据库名</span></span><br><span class="line">      <span class="keyword">let</span> db = <span class="string">"xianyu"</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">let</span> dbUtils = <span class="keyword">new</span> DbUtils(db, SQL, fieldMapping);</span><br><span class="line">      <span class="comment">// 创建数据库和表</span></span><br><span class="line">      dbUtils.updateDatabase();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清表</span></span><br><span class="line">dbUtils.deleteRows(table, <span class="literal">null</span>, <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据查询</span></span><br><span class="line">      <span class="keyword">let</span> existStatus = dbUtils.isExistRow(<span class="string">"SELECT * FROM  "</span> + table + <span class="string">"  WHERE desc = ?"</span>, [text]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 增加数据</span></span><br><span class="line">dbUtils.addRow(table, { <span class="attr">desc</span>: text });</span><br></pre></td></tr></tbody></table></figure><h1 id="Autojs-本地验证（一机一码）"><a href="#Autojs-本地验证（一机一码）" class="headerlink" title="Autojs 本地验证（一机一码）"></a>Autojs 本地验证（一机一码）</h1><h2 id="1、一机一码的实现原理"><a href="#1、一机一码的实现原理" class="headerlink" title="1、一机一码的实现原理"></a>1、一机一码的实现原理</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">机器码：设备的唯一标识</span><br><span class="line"></span><br><span class="line">注册机：用于激活设备，生成激活码。</span><br><span class="line"></span><br><span class="line">激活码：用于激活设备</span><br></pre></td></tr></tbody></table></figure><h2 id="2、一机一码UI界面的开发"><a href="#2、一机一码UI界面的开发" class="headerlink" title="2、一机一码UI界面的开发"></a>2、一机一码UI界面的开发</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"activationCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"激活"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    alert(<span class="string">'激活成功！'</span>);</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="3、注册机UI界面的开发"><a href="#3、注册机UI界面的开发" class="headerlink" title="3、注册机UI界面的开发"></a>3、注册机UI界面的开发</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"生成激活码"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span> <span class="attr">textColor</span>=<span class="string">"red"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">'activationCode'</span> <span class="attr">text</span>=<span class="string">'未生成'</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    ui.activationCode.setText(<span class="string">'123456'</span>)</span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure><h2 id="4、获取手机唯一标识"><a href="#4、获取手机唯一标识" class="headerlink" title="4、获取手机唯一标识"></a>4、获取手机唯一标识</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var uuid = device.fingerprint;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> imei = device.getIMEI()</span><br><span class="line"></span><br><span class="line">toast(imei)</span><br></pre></td></tr></tbody></table></figure><h2 id="5、完成第一个脚本注册机验证"><a href="#5、完成第一个脚本注册机验证" class="headerlink" title="5、完成第一个脚本注册机验证"></a>5、完成第一个脚本注册机验证</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">脚本端</span><br><span class="line"></span><br><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span> <span class="attr">text</span>=<span class="string">''</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"activationCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"激活"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> uuid = device.fingerprint;</span><br><span class="line"></span><br><span class="line">ui.machineCode.setText(uuid)</span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//取算法得到的值</span></span><br><span class="line">    <span class="keyword">var</span> res = ui.machineCode.text() +<span class="string">"aaa"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// log(typeof(ui.activationCode.text()))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// log(typeof(res.toString()))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(ui.activationCode.text() === res.toString()){</span><br><span class="line">        alert(<span class="string">'激活成功！'</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        alert(<span class="string">'激活失败！'</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alert('激活成功！');</span></span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">注册机端</span><br><span class="line"></span><br><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">'10'</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"机器码："</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"machineCode"</span> <span class="attr">w</span>=<span class="string">'*'</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">'activation'</span> <span class="attr">text</span>=<span class="string">"生成激活码"</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"激活码："</span> <span class="attr">textColor</span>=<span class="string">"red"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">'activationCode'</span> <span class="attr">text</span>=<span class="string">'未生成'</span>/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//算法是  uuid+"aaa" </span></span><br><span class="line"></span><br><span class="line">ui.activation.on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> machineCode = ui.machineCode.text();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> activationCode = machineCode + <span class="string">'aaa'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// toast(activationCode)</span></span><br><span class="line"></span><br><span class="line">    ui.activationCode.setText(activationCode.toString())</span><br><span class="line"></span><br><span class="line">    setClip(activationCode.toString())</span><br><span class="line"></span><br><span class="line">    toast(<span class="string">'激活码已复制'</span>)</span><br><span class="line">})</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="6、对手机唯一标识符进行加密"><a href="#6、对手机唯一标识符进行加密" class="headerlink" title="6、对手机唯一标识符进行加密"></a>6、对手机唯一标识符进行加密</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">string</span>)</span>{</span><br><span class="line"> <span class="keyword">var</span> res=java.math.BigInteger(<span class="number">1</span>,java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>).digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"> <span class="keyword">while</span>(res.length&lt;<span class="number">32</span>)res=<span class="string">"0"</span>+res;</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="7、增加时间验证"><a href="#7、增加时间验证" class="headerlink" title="7、增加时间验证"></a>7、增加时间验证</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//格式化时间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">dateFormat</span>(<span class="params">thisDate, fmt</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> o = {</span><br><span class="line">        <span class="string">"M+"</span>: thisDate.getMonth() + <span class="number">1</span>,</span><br><span class="line">        <span class="string">"d+"</span>: thisDate.getDate(),</span><br><span class="line">        <span class="string">"h+"</span>: thisDate.getHours(),</span><br><span class="line">        <span class="string">"m+"</span>: thisDate.getMinutes(),</span><br><span class="line">        <span class="string">"s+"</span>: thisDate.getSeconds(),</span><br><span class="line">        <span class="string">"q+"</span>: <span class="built_in">Math</span>.floor((thisDate.getMonth() + <span class="number">3</span>) / <span class="number">3</span>),</span><br><span class="line">        <span class="string">"S"</span>: thisDate.getMilliseconds()</span><br><span class="line">    };</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.test(fmt))</span><br><span class="line">        fmt = fmt.replace(<span class="built_in">RegExp</span>.$1, (thisDate.getFullYear() + <span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$1.length));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o)</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span> + k + <span class="string">")"</span>).test(fmt))</span><br><span class="line">            fmt = fmt.replace(<span class="built_in">RegExp</span>.$1, (<span class="built_in">RegExp</span>.$1.length == <span class="number">1</span>) ? (o[k]) : ((<span class="string">"00"</span> + o[k]).substr((<span class="string">""</span> + o[k]).length)));</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="8、增加时间验证（二）"><a href="#8、增加时间验证（二）" class="headerlink" title="8、增加时间验证（二）"></a>8、增加时间验证（二）</h2><h2 id="9、开发日卡、月卡、年卡功能"><a href="#9、开发日卡、月卡、年卡功能" class="headerlink" title="9、开发日卡、月卡、年卡功能"></a>9、开发日卡、月卡、年卡功能</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;horizontal&gt;</span><br><span class="line">    &lt;text textSize="16sp"&gt;充值类型&lt;/text&gt;</span><br><span class="line">    &lt;spinner id="sp1" entries="月卡|年卡" textColor="red"/&gt;</span><br><span class="line">&lt;/horizontal&gt;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ui.sp1.getSelectedItemPosition();</span><br></pre></td></tr></tbody></table></figure><h2 id="10、激活码限制脚本运行"><a href="#10、激活码限制脚本运行" class="headerlink" title="10、激活码限制脚本运行"></a>10、激活码限制脚本运行</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validTime</span>(<span class="params">ntime</span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (toTime() &lt; ntime || IntTime() &lt; ntime) {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> java.text.SimpleDateFormat(<span class="string">"yyyyMMddHHmmss"</span>).format(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IntTime</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="keyword">var</span> recode_suning = http.get(<span class="string">"http://quan.suning.com/getSysTime.do"</span>);</span><br><span class="line">        <span class="keyword">var</span> suningTime = recode_suning.body.json();</span><br><span class="line">        <span class="keyword">return</span> suningTime.sysTime1;</span><br><span class="line">    } <span class="keyword">catch</span> (e) {}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="11、保存激活状态到本地"><a href="#11、保存激活状态到本地" class="headerlink" title="11、保存激活状态到本地"></a>11、保存激活状态到本地</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var storage = storages.create('activation');</span><br></pre></td></tr></tbody></table></figure><h2 id="12、解决时间验证bug方法"><a href="#12、解决时间验证bug方法" class="headerlink" title="12、解决时间验证bug方法"></a>12、解决时间验证bug方法</h2><h2 id="13、完善激活码交互逻辑"><a href="#13、完善激活码交互逻辑" class="headerlink" title="13、完善激活码交互逻辑"></a>13、完善激活码交互逻辑</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dialogs.build({</span><br><span class="line">        <span class="attr">title</span>: <span class="string">"机器码："</span>,</span><br><span class="line">        <span class="attr">content</span>: uuid,</span><br><span class="line">        <span class="attr">negative</span>: <span class="string">"输入激活码"</span>,</span><br><span class="line">        <span class="attr">positive</span>: <span class="string">"复制机器码"</span></span><br><span class="line">    }).on(<span class="string">"positive"</span>, <span class="function">()=&gt;</span>{</span><br><span class="line">      setClip(uuid);</span><br><span class="line">      toast(<span class="string">"机器码已复制"</span>);</span><br><span class="line">    }).on(<span class="string">"negative"</span>, <span class="function">()=&gt;</span>{</span><br><span class="line">        rawInput(<span class="string">"请输入激活码"</span>, <span class="string">""</span>, 激活码 =&gt; {</span><br><span class="line">            </span><br><span class="line">       });</span><br><span class="line">    }).show();</span><br></pre></td></tr></tbody></table></figure><h2 id="14、封装验证激活码函数-一"><a href="#14、封装验证激活码函数-一" class="headerlink" title="14、封装验证激活码函数(一)"></a>14、封装验证激活码函数(一)</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//验证激活码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params">uuid,activation</span>)</span>{</span><br><span class="line">    <span class="comment">//取算法得到的值</span></span><br><span class="line">    <span class="keyword">var</span> res = uuid +<span class="string">"aaa"</span>;</span><br><span class="line">    <span class="comment">//解密激活码</span></span><br><span class="line">    <span class="keyword">var</span> res2 = activation.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> activationCode = res2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> timestamp = res2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取未来的格式化时间</span></span><br><span class="line">    <span class="keyword">var</span> timestamp2 = dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">"yyyyMMddhhmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(activationCode === res.toString() &amp;&amp; validTime(timestamp2)){</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="15、封装验证激活码函数-二"><a href="#15、封装验证激活码函数-二" class="headerlink" title="15、封装验证激活码函数(二)"></a>15、封装验证激活码函数(二)</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证激活码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params">uuid,activation</span>)</span>{</span><br><span class="line">    <span class="comment">//取算法得到的值</span></span><br><span class="line">    <span class="keyword">var</span> res = uuid +<span class="string">"aaa"</span>;</span><br><span class="line">    <span class="comment">//解密激活码</span></span><br><span class="line">    <span class="keyword">var</span> res2 = activation.split(<span class="string">'&amp;'</span>);</span><br><span class="line">    <span class="keyword">var</span> activationCode = res2[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> timestamp = res2[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取未来的格式化时间</span></span><br><span class="line">    <span class="keyword">var</span> timestamp2 = dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">"yyyyMMddhhmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(activationCode === res.toString()){</span><br><span class="line">        <span class="keyword">if</span>(validTime(timestamp2)){</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="16、封装注册机加密函数"><a href="#16、封装注册机加密函数" class="headerlink" title="16、封装注册机加密函数"></a>16、封装注册机加密函数</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//算法函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">machineCode,timestamp</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> activationCode = machineCode + <span class="string">'aaa&amp;'</span>+timestamp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> activationCode;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="17、升级加密复杂度（一）"><a href="#17、升级加密复杂度（一）" class="headerlink" title="17、升级加密复杂度（一）"></a>17、升级加密复杂度（一）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 加密字符串<span class="number">1</span> = md5(uuid+timestamp);</span><br><span class="line"><span class="keyword">var</span> 加密时间 = ((timestamp-<span class="number">0</span>+<span class="number">10000</span>)*<span class="number">903</span>)/<span class="number">100000</span>;</span><br><span class="line"><span class="keyword">var</span> 加密字符串<span class="number">2</span> = md5((md5(<span class="string">"litikj"</span> +加密字符串<span class="number">1</span> +<span class="string">"litikj"</span>)+<span class="string">"litikj"</span>) +加密时间 +md5(uuid)+<span class="string">"112233"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 激活码 = 加密字符串<span class="number">1</span>+<span class="string">"&amp;"</span>+加密时间+<span class="string">"&amp;"</span>+加密字符串<span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h2 id="18、升级加密复杂度（二）"><a href="#18、升级加密复杂度（二）" class="headerlink" title="18、升级加密复杂度（二）"></a>18、升级加密复杂度（二）</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//验证激活码</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateCode</span>(<span class="params">uuid,activation</span>)</span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> codeArr = activation.split(<span class="string">"&amp;"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str1 = codeArr[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> encryptTime = codeArr[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> str2 = codeArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> timestamp = (<span class="built_in">Number</span>(encryptTime) * <span class="number">100000</span>) / <span class="number">903</span> -<span class="number">10000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//格式化时间</span></span><br><span class="line">    <span class="keyword">var</span> timestamp2 = dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">"yyyyMMddhhmmss"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断激活码是否有效</span></span><br><span class="line">    <span class="keyword">if</span>(str1 === md5(uuid+timestamp) &amp;&amp; str2 === md5((md5(<span class="string">"litikj"</span> +md5(uuid+timestamp) +<span class="string">"litikj"</span>)+<span class="string">"litikj"</span>) +encryptTime +md5(uuid)+<span class="string">"112233"</span>)){</span><br><span class="line">        <span class="comment">//算法一样</span></span><br><span class="line">        <span class="keyword">if</span>(validTime(timestamp2)){</span><br><span class="line">            <span class="comment">//时间正常</span></span><br><span class="line">            ui.end.setText(<span class="string">'到期时间:'</span>);</span><br><span class="line">            ui.time.setText(dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">'yyyy年MM月dd日 hh:mm:ss'</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="comment">//时间过期</span></span><br><span class="line">            ui.end.setText(<span class="string">'时间过期:'</span>);</span><br><span class="line">            ui.time.setText(dateFormat(<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">parseInt</span>(timestamp)), <span class="string">'yyyy年MM月dd日 hh:mm:ss'</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="comment">//算法不一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="19、增加运行脚本时的验证方法"><a href="#19、增加运行脚本时的验证方法" class="headerlink" title="19、增加运行脚本时的验证方法"></a>19、增加运行脚本时的验证方法</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(storage.get(<span class="string">'activation'</span>)){</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">var</span> res = validateCode(uuid,storage.get(<span class="string">'activation'</span>))</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">switch</span>(res){</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    scriptStatus = <span class="literal">false</span>; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    scriptStatus = <span class="literal">true</span>; </span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    scriptStatus = <span class="literal">false</span>;    </span><br><span class="line">                    <span class="keyword">break</span>;         </span><br><span class="line">        }</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="20、给脚本添加一机一码功能（一）"><a href="#20、给脚本添加一机一码功能（一）" class="headerlink" title="20、给脚本添加一机一码功能（一）"></a>20、给脚本添加一机一码功能（一）</h2><h2 id="21、给脚本添加一机一码功能（二）"><a href="#21、给脚本添加一机一码功能（二）" class="headerlink" title="21、给脚本添加一机一码功能（二）"></a>21、给脚本添加一机一码功能（二）</h2><h1 id="如何写游戏脚本"><a href="#如何写游戏脚本" class="headerlink" title="如何写游戏脚本"></a>如何写游戏脚本</h1><h2 id="触摸模拟"><a href="#触摸模拟" class="headerlink" title="触摸模拟"></a>触摸模拟</h2><ul><li><p><code>sleep(n)</code>：暂停运行n毫秒，游戏脚本中最常出现的一个命令；有一些操作必须给它一定的缓冲时间才能正确运行完成。</p></li><li><p>随机数： <code>random(min,max)</code>指定区间、<code>random()</code>范围是[0,1)；点击坐标时常设置一个随机偏移，防止被检测到（每次都点同一个点还是太明显了）</p></li><li><p>分辨率适配问题，<code>setScreenMetrics(1080, 1920);</code>、表示脚本适合的屏幕宽高为1080x1920（编脚本时基于的设备），如果在别的分辨率手机上运行则会自动放缩光标。听上去很好的一个功能，一般游戏脚本必加这一行，但具体效果如何我没有测试过。</p></li><li><p><code>click(x,y)</code>：点击坐标（无需root权限），返回是否成功，点击过程大约150ms，可能被其他事件中断。更长时间的点击如<code>longClick(x,y)</code>、持续600ms。</p></li><li><p><code>press(x,y,duartion)</code>：按住坐标，一般超过500ms才被系统认为是长按。</p></li><li><p><code>swipe(x1,y1,x2,y2,duration)</code>： 从(x1,y1)滑动到(x2,y2)，持续duration。</p></li><li><p><code>RootAutomator</code><br>  上面的几个触摸操作都是免root的，而基于RootAutomator对象的触摸需要root权限，优点是执行没有延迟，明显比click要快。</p></li></ul><figure class="highlight sh"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var ra=new RootAutomator(); //初始化一个对象</span><br><span class="line">ra.tap(x,y,id); //id代表不同“手指”，用于多点触摸，不需要时可省略该参数</span><br><span class="line">ra.swipe(x1,y1,x2,y2,duration,id)</span><br><span class="line">ra.press(x,y,duration,id)</span><br><span class="line">// 这些命令组合在一起就能完成复杂的操作了~</span><br><span class="line">ra.touchDown(x,y,id)</span><br><span class="line">ra.touchMove(x,y,id)</span><br><span class="line">ra.touchUp(id)</span><br></pre></td></tr></tbody></table></figure><ul><li>模拟按键；（返回bool值）</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(back()){};    <span class="comment">//按下返回键</span></span><br><span class="line">home()  <span class="comment">//返回桌面</span></span><br><span class="line">还有一些需要root权限的，开头字母大写:</span><br><span class="line"><span class="comment">//Home()、Back()、Power()、Menu()、OK()、KeyCode()...</span></span><br></pre></td></tr></tbody></table></figure><h2 id="colors"><a href="#colors" class="headerlink" title="colors"></a>colors</h2><p>颜色常用十六进制值或RGB值来表示，如蓝色可表示为<code>#0000FF</code>或<code>(0,0,255)</code>，一般都是<code>#</code>后面带6位十六进制数，分别表示R、G、B，但Autojs是8位，前面多了一个<code>A(Alpha)</code>、表示透明度，即ARGB。</p><ul><li>Autojs通过一个16进制整数或一个字符串表示一个颜色，两者可以互相转换</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myBlue=colors.toString(color.BLUE); <span class="comment">//返回#ff0000ff,colors.BLUE代表蓝色，后面必须大写。</span></span><br><span class="line"><span class="keyword">var</span> numBlue=colors.parseColor(<span class="string">"#ff0000ff"</span>); <span class="comment">//返回-16776961,至于为什么是这个数我也不清楚，平时还是用字符串表示比较好。</span></span><br></pre></td></tr></tbody></table></figure><ul><li>colors对象里还有一些判断两个颜色的相似度、返回A、R、G、B通道值的函数，平时也基本上用不上；颜色的用途主要体现在后面的多点找色上。</li></ul><h2 id="images"><a href="#images" class="headerlink" title="images"></a>images</h2><p>游戏脚本的灵魂所在，images主要有图片处理、找图、找色几个部分；想让脚本识别游戏的某个区域、如果该区域的位置是固定的，通过构造多点比色比较快，而如果位置不固定则常用找图的方式，虽然占用资源比较多但准确性有保障。</p><ul><li>images对象使用完后必须回收，防止内存泄漏。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> img=images.read(<span class="string">"./name.png"</span>);  <span class="comment">//读取图片，错误时返回null</span></span><br><span class="line"><span class="comment">//var img=images.load(url); //从网址获取图片</span></span><br><span class="line"><span class="comment">//...图片操作后回收</span></span><br><span class="line">img.recycle();</span><br><span class="line"><span class="comment">// 例外：captureScreen()返回的图片无需回收</span></span><br></pre></td></tr></tbody></table></figure><ul><li>mages对象能对图像进行复制、保存、Base64编码解码、剪切、调整大小、放缩、旋转、拼接、灰度化、阈值化、颜色控件转换、二值化、模糊与平滑处理、滤波…（强是很强大，就是基本上用不上）</li><li>获取截图权限：在找图找色之前往往要先获取当前屏幕的截图，这个截图一般是临时的、不会保存到文件（也可以设置保存）。 截图之前要向系统<strong>申请一次</strong>截图权限：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!requestScreenCapture()){    <span class="comment">//可指定参数true（横屏截图） 或者 false（竖屏截图）</span></span><br><span class="line">    toast(<span class="string">"请求截图失败"</span>);</span><br><span class="line">    exit();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>请求截图: <code>captureScreen</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在此之前记住要请求一次截图权限</span></span><br><span class="line"><span class="keyword">var</span> img=captureScreen();    <span class="comment">//可以指定保存路径path</span></span><br></pre></td></tr></tbody></table></figure><ul><li>颜色获取，很重要的一个函数，后面多点找色时可以先用它获取参数值。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取某点的ARGB颜色值</span></span><br><span class="line"><span class="keyword">var</span> color=images.pixel(img,<span class="number">100</span>,<span class="number">200</span>);    <span class="comment">//img是之前创建的images对象</span></span><br></pre></td></tr></tbody></table></figure><ul><li>区域找色（一种颜色）；<code>findColor</code>、<code>findColorInRegion</code>、<code>findColorEquals</code></li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//首先说下region和threshold这两个参数，后面的找色函数options里都要用到：</span></span><br><span class="line"><span class="comment">//region、找色区域，默认全图、指定[x,y]代表左上角点，从(x,y)到右下角；指定[x,y,width,height]则代表从(x,y)到(x+width,y+height)。</span></span><br><span class="line"><span class="comment">//threshold、相似度临界值，0~255，默认为4；similarity=1-threshold/255，可以算出默认相似度达到了0.98，觉得太严了可以适当增大threshold</span></span><br><span class="line"><span class="keyword">var</span> point = images.findColor(img, <span class="string">"#ff0000"</span>, { <span class="attr">region</span>: [<span class="number">100</span>, <span class="number">200</span>], <span class="attr">threshold</span>: <span class="number">10</span> });</span><br><span class="line"><span class="comment">//如果找到则返回一个点，如：{463.0, 1242.0}；找不到返回null。</span></span><br><span class="line"><span class="comment">//这里颜色值是6位，8位也行不过会忽略A通道（透明度）。</span></span><br><span class="line"><span class="comment">// findColorInRegion，功能和findColor一样，只是优化了下参数表示。</span></span><br><span class="line"><span class="keyword">var</span> point=images.findColorInRegion(img,<span class="string">"#ff0000"</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">1080</span>,<span class="number">1920</span>,<span class="number">10</span>);</span><br><span class="line"><span class="comment">// findColorEquals，要求颜色完全相等，相当于findColor的threshold参数设为0</span></span><br><span class="line"><span class="keyword">var</span> point=images.findColorEquals(img,<span class="string">"#ff0000"</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">1080</span>,<span class="number">1920</span>);</span><br></pre></td></tr></tbody></table></figure><ul><li>多点找色：<code>findMultiColors</code>，先定位第一个点的颜色、根据(x,y)偏移获取并对比第二个点的颜色…以此类推，命令很麻烦，通常需要写一个函数来构造颜色列。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> point = images.findMultiColors(img, <span class="string">"#ff949fc7"</span>,    <span class="comment">//第一个点</span></span><br><span class="line">    [[<span class="number">60</span>, <span class="number">60</span>, <span class="string">"#ffe6efe6"</span>], <span class="comment">//颜色Array，</span></span><br><span class="line">    [<span class="number">60</span>, -<span class="number">60</span>, <span class="string">"#ffeef3e6"</span>],</span><br><span class="line">    [-<span class="number">60</span>, <span class="number">60</span>, <span class="string">"#ffe6efe6"</span>],</span><br><span class="line">    [-<span class="number">60</span>, -<span class="number">60</span>, <span class="string">"#ffeef3e6"</span>]],</span><br><span class="line">    { <span class="attr">region</span>: [<span class="number">1548</span>, <span class="number">803</span>, <span class="number">140</span>, <span class="number">140</span>] })  <span class="comment">//指定区域</span></span><br></pre></td></tr></tbody></table></figure><ul><li>检测某坐标颜色：前几个命令都是根据颜色找坐标，这个是给坐标、比较颜色</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(images.detectsColor(img,<span class="string">"#fed9a8"</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">16</span>,<span class="string">"diff"</span>)){}</span><br><span class="line"><span class="comment">//最后两个参数可省略，代表threshold和匹配算法；x=100,y=200</span></span><br></pre></td></tr></tbody></table></figure><ul><li>找图：有时候找颜色会匹配到一些奇怪的地方去，还得用找图来实现，有<code>images.findImage</code>、<code>images.findImageInRegion</code>、<code>images.matchTemplate</code>。</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> temp1=images.read(pathToImage);</span><br><span class="line"><span class="keyword">var</span> point=images.findImage(img,temp1,{ <span class="attr">region</span>: [<span class="number">100</span>, <span class="number">200</span>], <span class="attr">threshold</span>: <span class="number">10</span> });</span><br><span class="line"><span class="comment">//同样findImageInRegion只是优化了下参数排列</span></span><br><span class="line"><span class="comment">//matchTemplate可以同时返回找到的多个位置，通过max控制最大的结果数量</span></span><br><span class="line"><span class="keyword">var</span> result=images.matchTemplate(img,temp1,{ <span class="attr">region</span>: [<span class="number">100</span>, <span class="number">200</span>], <span class="attr">threshold</span>: <span class="number">10</span> ,<span class="attr">max</span>:<span class="number">5</span>});</span><br><span class="line"><span class="comment">//返回类型是一个MatchingResult对象，有point和similarity这两个数据成员。</span></span><br></pre></td></tr></tbody></table></figure><h2 id="脚本结构管理"><a href="#脚本结构管理" class="headerlink" title="脚本结构管理"></a>脚本结构管理</h2><h3 id="Module"><a href="#Module" class="headerlink" title="Module"></a>Module</h3><p>在一个文件里通过<code>module.exports =...;</code>把某个对象导出，从而可以在另一个文件通过<code>var name=require('file.js');</code>导入；相当于把整个文件当做一个函数，把exports的东西当做返回值。感觉用起来也不太方便，我选择不用这个功能。</p><h3 id="Threads"><a href="#Threads" class="headerlink" title="Threads"></a>Threads</h3><ul><li>启动一个子线程，<code>threads.start</code>：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//启动一个无限循环的线程</span></span><br><span class="line"><span class="keyword">var</span> thread = threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{  <span class="comment">//用thread对象可以控制线程运行状态，如果不需要操作可以改为：</span></span><br><span class="line"><span class="comment">//threads.start(function(){</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">        log(<span class="string">"子线程运行中..."</span>);</span><br><span class="line">        sleep(<span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">});</span><br><span class="line">sleep(<span class="number">5000</span>);</span><br><span class="line">thread.interrupt();</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>threads.shutDownAll()</code>： 停止所有通过<code>threads.start()</code>启动的子线程</p></li><li><p>等待线程开始执行（一般start后需要一段时间）：<code>thread.waitFor();</code>（这里thread是前面创建的thread变量）</p></li><li><p>等待线程执行完成：<code>thread.join();</code>，参数可以指定一个等待时间</p></li><li><p>中断线程运行：<code>thread.interrupt();</code></p></li><li><p>注意多线程中的变量问题，涉及到<strong>线程安全</strong>，文档里说的很详细</p></li><li><p>线程间的通信与传递变量，通过<code>var connect = threads.disposable();</code>实现；发送结果：<code>connect.setAndNotify(s);</code>，接收结果：<code>connect.blockedGet(s);</code></p></li></ul><h2 id="交互界面"><a href="#交互界面" class="headerlink" title="交互界面"></a>交互界面</h2><h3 id="Events、Dialogs、Console"><a href="#Events、Dialogs、Console" class="headerlink" title="Events、Dialogs、Console"></a>Events、Dialogs、Console</h3><ul><li>Events模块主要用来监听按键、触摸、通知等，但放在单线程里可能会因为程序其他部分而无法及时执行，造成非预期的结果，常常和多线程<code>Threads</code>模块一起使用，如音量键关闭脚本的例子：</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">auto();</span><br><span class="line">threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{ <span class="comment">//在子线程中调用observeKey()从而使按键事件处理在子线程执行</span></span><br><span class="line">    events.observeKey();    <span class="comment">//启用按键监听</span></span><br><span class="line">    events.on(<span class="string">"key_down"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">keyCode, events</span>)</span>{</span><br><span class="line">    <span class="comment">//常用事件有key、key_down、key_up、exit、toast、notification、touch(触摸某点)</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == keys.volume_up){  <span class="comment">//音量上键关闭脚本</span></span><br><span class="line">            exit();</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line">events.on(<span class="string">"exit"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{   <span class="comment">//脚本停止运行时会触发exit事件</span></span><br><span class="line">    toast(<span class="string">"脚本已结束"</span>);</span><br><span class="line">});</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>){</span><br><span class="line">    log(<span class="string">"脚本运行中..."</span>);</span><br><span class="line">    sleep(<span class="number">2000</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Dialogs</li></ul><p>这部分提供对话框支持，但由于是弹出一个全屏的消息提示框，实际体验是并不太能用上；如果脚本和用户的交互性比较强的话可以考虑一下。</p><ul><li>Console</li></ul><p>控制台的作用更像是用于调试，但一般Windows下用VSCode写脚本也不需要在控制台上显示吧，所以这部分给人的感觉也是很鸡肋…不过<code>console</code>的UI是固定的，也可以悬浮、最小化；有时不想设计UI的时候可以偷懒直接拿<code>console</code>过来凑合用用。</p><h3 id="Floaty、UI"><a href="#Floaty、UI" class="headerlink" title="Floaty、UI"></a>Floaty、UI</h3><p>界面设计这部分内容相当多，而且官方文档也有很多写得很简略（甚至一笔带过），要想真正从零开始设计出一个实用好看的UI出来还是有难度的；我是建议去网上多找几个模板文件运行运行，在别人的基础上修改起来就快多了，看不懂的地方再去翻翻文档解决。一般UI设计好后再和程序一对接（通过UI各组件的id），就可以打包做成apk了~</p><h1 id="写一个注册机"><a href="#写一个注册机" class="headerlink" title="写一个注册机"></a>写一个注册机</h1><p>实战加密解密</p><p>我们再测试下解密 看能不能解开</p><p>唯一 = device.getIMEI()</p><p>我们来回忆一下：</p><p>加密1 加密2——-固定加密</p><p>加密3 ————随机加密</p><p>解密2  解密3——解密使用</p><p>开始加密，可以用 加密2 加密3，随便用，都可以</p><p>但是你需要记住 加密的次数和加密顺序</p><p>——-3次——-加密2——–加密2——–加密3</p><p>看结果</p><p>?wv1%yv%4rv%0v%S0v%7vJ%5v%8Sw%3w%Uxw%9vW%vv%55v%yy%7j5</p><p>我们在我们自己的脚本中，开始写解密，相反的顺序</p><p>———-解密3———解密2——–解密2——3次—-</p><p>得到</p><p>358811051254785</p><p>我们测试下 运行 这个函数</p><p>358811051254785</p><p>完美了，继续</p><p>运行到这里了 我们可以得到  一个   “加密结果3”</p><p>需要让对方把这个值 发给我们 这样操作</p><p>setClip(加密结果3);</p><p>toast (“已经复制到右键了，请发给我”);</p><p>演示一下，运行一下，他发给我们的是这个</p><p>?wvl%yv%4gv%0v%p0v%7vr%5v%8Hw%3w%dxw%9vk%vv%5hv%yy%7j5</p><p>说明，我们的方法是对的。继续</p><p>对方发给我们之后 我们运行解密 结果也出来了。</p><p>还是这个数字。358811051254785。那当然还是它了。</p><p>那么，我们就这样，什么也不干就发给他吗？？？<br>不，，，，，，，，稍微有点常识的看一眼都知道，这可能就是手机的某个参数。</p><p>这时候，有小白就会问了，这不是没有意义吗？！错。大错特错。<br>你看看对方发给我们的是什么，每次都不一样，他也迷糊，是吧。<br>。。。。。。我们可以把提示代码抹去，虽然他每次都复制了，但是对方不知道呀，嘿嘿。你只需要第一次告诉对方，复制右键发给我们。嘿嘿。</p><p>为了彻底迷惑对方，我们再继续对“唯一”进行多次混合加密。这里必须用固定加密。。嘿嘿。</p><p>我们在我们自己的脚本中，也复制一模一样的，运行，</p><p>得到 “加密结果10”—-这个就是我们要发给对方的验证码了</p><p>最后，我们把代码完善下，能删除的log都删了</p><p>ok了</p><p>需要特别说明的 就是 你发给对方的脚本中 只能有加密函数<br>别傻了胡痴地 把解密函数 也给对方发过去。嘿嘿。</p><p>这个只是在脚本上加密解密。还有网络加密解密。如果，有感兴趣的，以后可以出一个教程。非常简单的。因为网站都已经给我们现成的auto.js封装好的啊。只需要随便改一点点东西，就可以使用了。</p><p>代码发到下面了</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(auto.service==<span class="literal">null</span>){auto.waitFor();};</span><br><span class="line">sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">唯一 = device.getIMEI()</span><br><span class="line"></span><br><span class="line">加密结果<span class="number">1</span> = 加密<span class="number">2</span>(唯一)</span><br><span class="line">加密结果<span class="number">2</span> = 加密<span class="number">2</span>(加密结果<span class="number">1</span>)</span><br><span class="line">加密结果<span class="number">3</span> = 加密<span class="number">3</span>(加密结果<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">setClip(加密结果<span class="number">3</span>);</span><br><span class="line"><span class="comment">//toast ("已经复制到右键了，请发给我");</span></span><br><span class="line"></span><br><span class="line">sleep(<span class="number">90000</span>)</span><br><span class="line"></span><br><span class="line">加密结果<span class="number">4</span> = 加密<span class="number">2</span>(唯一)</span><br><span class="line">加密结果<span class="number">5</span> = 加密<span class="number">2</span>(加密结果<span class="number">4</span>)</span><br><span class="line">加密结果<span class="number">6</span> = 加密<span class="number">1</span>(加密结果<span class="number">5</span>)</span><br><span class="line">加密结果<span class="number">7</span> = 加密<span class="number">1</span>(加密结果<span class="number">6</span>)</span><br><span class="line">加密结果<span class="number">8</span> = 加密<span class="number">2</span>(加密结果<span class="number">7</span>)</span><br><span class="line">加密结果<span class="number">9</span> = 加密<span class="number">1</span>(加密结果<span class="number">8</span>)</span><br><span class="line">加密结果<span class="number">10</span> = 加密<span class="number">2</span>(加密结果<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> 对方输入框里的 = rawInput(<span class="string">"请输入验证码"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (对方输入框里的 == 加密结果<span class="number">10</span>) {</span><br><span class="line">    log(<span class="string">"验证码正确"</span>)</span><br><span class="line">    <span class="comment">//开始干活喽</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">    log(<span class="string">"验证码错误"</span>);</span><br><span class="line">    exit();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密1(<span class="params">string</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> java.math.BigInteger(<span class="number">1</span>, java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>)</span><br><span class="line">        .digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 固定加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密2(<span class="params">code</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">String</span>.fromCharCode(code.charCodeAt(<span class="number">0</span>) + code.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; code.length; i++) {</span><br><span class="line">        c += <span class="built_in">String</span>.fromCharCode(code.charCodeAt(i) + code.charCodeAt(i - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">escape</span>(c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 随机加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密3(<span class="params">stringW</span>) </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str = stringW + <span class="string">"?"</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ranWs = random(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) {</span><br><span class="line">        str1 = str1 + str[i];</span><br><span class="line">        <span class="keyword">if</span> (i % ranWs == <span class="number">0</span>) {</span><br><span class="line">            str1 = str1 + ranLetter();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    log(str1)</span><br><span class="line">    str1 = ranWs + str1;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    str1 = str1.split(<span class="string">""</span>).reverse();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; str1.length; x++) {</span><br><span class="line">        str1[x] = charDh(str1[x]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str1.join(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ranLetter</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>];</span><br><span class="line">    <span class="keyword">var</span> ran = random(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ran == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> random(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (ran == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)].toUpperCase();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">charDh</span>(<span class="params">cha</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>, <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> jw = <span class="number">0</span>; jw &lt; arr.length; jw++) {</span><br><span class="line">        <span class="keyword">if</span> (cha == arr[jw]) {</span><br><span class="line">            <span class="keyword">return</span> arr[arr.length - <span class="number">1</span> - jw];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cha;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//解密</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">解密结果<span class="number">3</span> = 解密<span class="number">3</span>(b)</span><br><span class="line"></span><br><span class="line">解密结果<span class="number">2</span> = 解密<span class="number">2</span>(解密结果<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">解密结果<span class="number">1</span> = 解密<span class="number">2</span>(解密结果<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//log(解密结果1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解密结果1  就是对方手机的IMEI 也就是“唯一”</span></span><br><span class="line"></span><br><span class="line">加密结果<span class="number">4</span> = 加密<span class="number">2</span>(解密结果<span class="number">1</span>)</span><br><span class="line">加密结果<span class="number">5</span> = 加密<span class="number">2</span>(加密结果<span class="number">4</span>)</span><br><span class="line">加密结果<span class="number">6</span> = 加密<span class="number">1</span>(加密结果<span class="number">5</span>)</span><br><span class="line">加密结果<span class="number">7</span> = 加密<span class="number">1</span>(加密结果<span class="number">6</span>)</span><br><span class="line">加密结果<span class="number">8</span> = 加密<span class="number">2</span>(加密结果<span class="number">7</span>)</span><br><span class="line">加密结果<span class="number">9</span> = 加密<span class="number">1</span>(加密结果<span class="number">8</span>)</span><br><span class="line">加密结果<span class="number">10</span> = 加密<span class="number">2</span>(加密结果<span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">log(加密结果<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 解密2(<span class="params">code</span>) </span>{</span><br><span class="line">    code = <span class="built_in">unescape</span>(code);</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">String</span>.fromCharCode(code.charCodeAt(<span class="number">0</span>) - code.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; code.length; i++) {</span><br><span class="line">        c += <span class="built_in">String</span>.fromCharCode(code.charCodeAt(i) - c.charCodeAt(i - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 解密3(<span class="params">stringJ</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> str2 = stringJ.split(<span class="string">""</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; str2.length; x++) {</span><br><span class="line">        str2[x] = charDh(str2[x]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    str2 = str2.reverse().join(<span class="string">""</span>);</span><br><span class="line">    log(str2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> tt = <span class="built_in">parseInt</span>(str2[<span class="number">0</span>]);</span><br><span class="line">    str2 = str2.substring(<span class="number">1</span>, str2.length - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> y = <span class="number">0</span>; y &lt; str2.length; y++) {</span><br><span class="line">        <span class="keyword">if</span> ((y - <span class="number">1</span>) % (tt + <span class="number">1</span>) != <span class="number">0</span>) {</span><br><span class="line">            str3 = str3 + str2[y];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (str3[str3.length - <span class="number">1</span>] == <span class="string">"?"</span>) {</span><br><span class="line">        str3 = str3.substring(<span class="number">0</span>, str3.length - <span class="number">1</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str3;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">charDh</span>(<span class="params">cha</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>, <span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>, <span class="string">"D"</span>, <span class="string">"E"</span>, <span class="string">"F"</span>, <span class="string">"G"</span>, <span class="string">"H"</span>, <span class="string">"J"</span>, <span class="string">"K"</span>, <span class="string">"L"</span>, <span class="string">"M"</span>, <span class="string">"N"</span>, <span class="string">"O"</span>, <span class="string">"P"</span>, <span class="string">"Q"</span>, <span class="string">"R"</span>, <span class="string">"S"</span>, <span class="string">"T"</span>, <span class="string">"U"</span>, <span class="string">"V"</span>, <span class="string">"W"</span>, <span class="string">"X"</span>, <span class="string">"Y"</span>, <span class="string">"Z"</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> jw = <span class="number">0</span>; jw &lt; arr.length; jw++) {</span><br><span class="line">        <span class="keyword">if</span> (cha == arr[jw]) {</span><br><span class="line">            <span class="keyword">return</span> arr[arr.length - <span class="number">1</span> - jw];</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> cha;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密1(<span class="params">string</span>) </span>{</span><br><span class="line">    <span class="keyword">return</span> java.math.BigInteger(<span class="number">1</span>, java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>)</span><br><span class="line">        .digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密2(<span class="params">code</span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> c = <span class="built_in">String</span>.fromCharCode(code.charCodeAt(<span class="number">0</span>) + code.length);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; code.length; i++) {</span><br><span class="line">        c += <span class="built_in">String</span>.fromCharCode(code.charCodeAt(i) + code.charCodeAt(i - <span class="number">1</span>));</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">escape</span>(c);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> 加密3(<span class="params">stringW</span>) </span>{</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> str = stringW + <span class="string">"?"</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> ranWs = random(<span class="number">1</span>, <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) {</span><br><span class="line">        str1 = str1 + str[i];</span><br><span class="line">        <span class="keyword">if</span> (i % ranWs == <span class="number">0</span>) {</span><br><span class="line">            str1 = str1 + ranLetter();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    log(str1)</span><br><span class="line">    str1 = ranWs + str1;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    str1 = str1.split(<span class="string">""</span>).reverse();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; str1.length; x++) {</span><br><span class="line">        str1[x] = charDh(str1[x]);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str1.join(<span class="string">""</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ranLetter</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> arr = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span>, <span class="string">"g"</span>, <span class="string">"h"</span>, <span class="string">"i"</span>, <span class="string">"j"</span>, <span class="string">"k"</span>, <span class="string">"l"</span>, <span class="string">"m"</span>, <span class="string">"n"</span>, <span class="string">"o"</span>, <span class="string">"p"</span>, <span class="string">"q"</span>, <span class="string">"r"</span>, <span class="string">"s"</span>, <span class="string">"t"</span>, <span class="string">"u"</span>, <span class="string">"v"</span>, <span class="string">"w"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>, <span class="string">"z"</span>];</span><br><span class="line">    <span class="keyword">var</span> ran = random(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (ran == <span class="number">0</span>) {</span><br><span class="line">        <span class="keyword">return</span> random(<span class="number">0</span>, <span class="number">9</span>);</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (ran == <span class="number">1</span>) {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)];</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> arr[random(<span class="number">0</span>, arr.length - <span class="number">1</span>)].toUpperCase();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="常用功能封装"><a href="#常用功能封装" class="headerlink" title="常用功能封装"></a>常用功能封装</h1><h2 id="调用云文件"><a href="#调用云文件" class="headerlink" title="调用云文件"></a>调用云文件</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> 导入常用函数模块(<span class="params"></span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> url =</span><br><span class="line">    <span class="string">"https://raw.githubusercontent.com/snailuncle/autojsCommonFunctions/master/autojsCommonFunctions.js"</span>;</span><br><span class="line">  <span class="keyword">var</span> r = http.get(url);</span><br><span class="line">  log(<span class="string">"code = "</span> + r.statusCode);</span><br><span class="line">  <span class="keyword">var</span> html = r.body.bytes();</span><br><span class="line">  files.writeBytes(<span class="string">"./autojsCommonFunctions.js"</span>, html);</span><br><span class="line">  <span class="keyword">var</span> common = <span class="built_in">require</span>(<span class="string">"./autojsCommonFunctions.js"</span>);</span><br><span class="line">  <span class="keyword">return</span> common;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> common = 导入常用函数模块();</span><br><span class="line">log(common);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">33</span>; i++) {</span><br><span class="line">  common.闪光弹(<span class="string">"fire in the hole"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="读取json"><a href="#读取json" class="headerlink" title="读取json"></a>读取json</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> files === <span class="string">'undefined'</span>) {</span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">    <span class="keyword">var</span> files = {</span><br><span class="line">        <span class="attr">read</span>: <span class="function"><span class="keyword">function</span>(<span class="params">path</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> fs.readFileSync(path,{<span class="attr">encoding</span>:<span class="string">"utf-8"</span>}).toString();</span><br><span class="line">        },</span><br><span class="line">        <span class="attr">write</span>: <span class="function"><span class="keyword">function</span>(<span class="params">path,text</span>)</span>{</span><br><span class="line">            <span class="keyword">return</span> fs.writeFile(path,text,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{</span><br><span class="line">                <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readJSON</span>(<span class="params">fileName</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fileName==<span class="string">"string"</span>){</span><br><span class="line">        <span class="keyword">var</span> strList = fileName.split(<span class="string">"."</span>);</span><br><span class="line">        <span class="keyword">if</span>(strList[strList.length-<span class="number">1</span>].toLowerCase()==<span class="string">"json"</span>){</span><br><span class="line">            <span class="keyword">var</span> data = files.read(fileName);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">JSON</span>.parse(data);</span><br><span class="line">        }<span class="keyword">else</span>{</span><br><span class="line">            <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"not JSON File"</span>)</span><br><span class="line">        }</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">throw</span> <span class="built_in">Error</span>(<span class="string">"not file name"</span>)</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">writeJSON</span>(<span class="params">fileName,data</span>)</span>{</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> fileName == <span class="string">"string"</span>){</span><br><span class="line">        <span class="keyword">try</span>{</span><br><span class="line">            files.write(fileName,<span class="built_in">JSON</span>.stringify(data));</span><br><span class="line">        }<span class="keyword">catch</span>(e){</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"Hava Error!!"</span>)</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="built_in">console</span>.log(readJSON(<span class="string">"project.json"</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="获取设备唯一标识"><a href="#获取设备唯一标识" class="headerlink" title="获取设备唯一标识"></a>获取设备唯一标识</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用device.getAndroidId()代替device.getIMEI().这是因为安卓10以上限制了获取imei码</span></span><br><span class="line"><span class="keyword">var</span> imei = device.getAndroidId()</span><br><span class="line">toast(imei)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// md5加密函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">md5</span>(<span class="params">string</span>)</span>{</span><br><span class="line"> <span class="keyword">var</span> res=java.math.BigInteger(<span class="number">1</span>,java.security.MessageDigest.getInstance(<span class="string">"MD5"</span>).digest(java.lang.String(string).getBytes())).toString(<span class="number">16</span>);</span><br><span class="line"> <span class="keyword">while</span>(res.length&lt;<span class="number">32</span>)res=<span class="string">"0"</span>+res;</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="提取文本中的数字的正则表达式"><a href="#提取文本中的数字的正则表达式" class="headerlink" title="提取文本中的数字的正则表达式"></a>提取文本中的数字的正则表达式</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//代码举例：</span></span><br><span class="line">timesText = id(<span class="string">"tv_remain_times"</span>).findOne().text();</span><br><span class="line">times = timesText.replace(<span class="regexp">/[^0-9]/ig</span>, <span class="string">""</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="无障碍快捷"><a href="#无障碍快捷" class="headerlink" title="无障碍快捷"></a>无障碍快捷</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">auto.service.performGlobalAction(<span class="number">9</span>);</span><br><span class="line"><span class="comment">//1 返回</span></span><br><span class="line"><span class="comment">//3 切换任务</span></span><br><span class="line"><span class="comment">//4 下拉通知栏</span></span><br><span class="line"><span class="comment">//5 展开通知栏</span></span><br><span class="line"><span class="comment">//6 长按电源键</span></span><br><span class="line"><span class="comment">//7 分屏模式</span></span><br><span class="line"><span class="comment">//8 锁屏</span></span><br><span class="line"><span class="comment">//9 截图</span></span><br></pre></td></tr></tbody></table></figure><h2 id="连续按两次返回键退出"><a href="#连续按两次返回键退出" class="headerlink" title="连续按两次返回键退出"></a>连续按两次返回键退出</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line">ui.layout(</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> isCanFinish = <span class="literal">false</span>;</span><br><span class="line">ui.emitter.on(<span class="string">"back_pressed"</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> {</span><br><span class="line">  <span class="keyword">if</span> (!isCanFinish) {</span><br><span class="line">    toastLog(<span class="string">"连续按两次返回键退出"</span>);</span><br><span class="line">    isCanFinish = <span class="literal">true</span>;</span><br><span class="line">    isCanFinishTimeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> {</span><br><span class="line">      isCanFinish = <span class="literal">false</span>;</span><br><span class="line">    }, <span class="number">700</span>);</span><br><span class="line">    e.consumed = <span class="literal">true</span>;</span><br><span class="line">  } <span class="keyword">else</span> {</span><br><span class="line">    <span class="built_in">clearTimeout</span>(isCanFinishTimeout);</span><br><span class="line">    e.consumed = <span class="literal">false</span>;</span><br><span class="line">  }</span><br><span class="line">});</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="截图相关"><a href="#截图相关" class="headerlink" title="截图相关"></a>截图相关</h2><p><strong>用adb授予投影媒体权限</strong><br>● 重启后权限依然有效<br>● 授予这个权限以后 requestCaptureScreen就不会弹窗询问了<br><code>adb shell appops set org.autojs.autojspro PROJECT_MEDIA allow</code></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于安卓无障碍截图保存</span></span><br><span class="line">auto.service.performGlobalAction(<span class="number">9</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三指下滑截屏保存</span></span><br><span class="line">gestures(</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">230</span>, <span class="number">452</span>], [<span class="number">230</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">500</span>, <span class="number">452</span>], [<span class="number">500</span>, <span class="number">1000</span>]],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">500</span>, [<span class="number">755</span>, <span class="number">452</span>], [<span class="number">755</span>, <span class="number">1000</span>]]</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自动获取截图权限</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetScreenCapture</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="comment">// 开启一个线程</span></span><br><span class="line">    <span class="keyword">let</span> Thread = threads.start(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">        <span class="keyword">if</span>(auto.service != <span class="literal">null</span>){  <span class="comment">//如果已经获得无障碍权限</span></span><br><span class="line">                <span class="comment">//由于系统间同意授权的文本不同，采用正则表达式</span></span><br><span class="line">                <span class="keyword">let</span> Allow = textMatches(<span class="regexp">/(允许|立即开始|统一)/</span>).findOne(<span class="number">10</span>*<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">if</span>(Allow){</span><br><span class="line">                    Allow.click();</span><br><span class="line">                }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">if</span>(!requestScreenCapture()){</span><br><span class="line">        log(<span class="string">"请求截图权限失败"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">        Thread.interrupt()</span><br><span class="line">        log(<span class="string">"已获得截图权限"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><strong>安卓高版本用无障碍截图</strong></p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> img = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (device.sdkInt &gt;= <span class="number">30</span>) {</span><br><span class="line">  </span><br><span class="line">  img = $automator.takeScreenshot();   <span class="comment">// 安卓11以上无障碍截图,需要回收</span></span><br><span class="line">} <span class="keyword">else</span> {</span><br><span class="line">  threads.start(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> r = text(<span class="string">"立即开始"</span>).findOne(<span class="number">3000</span>);</span><br><span class="line">    r &amp;&amp; r.click();</span><br><span class="line">  });</span><br><span class="line">  images.requestScreenCapture();</span><br><span class="line">  img = images.captureScreen();</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="上下滑动翻页"><a href="#上下滑动翻页" class="headerlink" title="上下滑动翻页"></a>上下滑动翻页</h2><p><strong>swipe()函数滑动在autojs4.1与pro不一致</strong><br>swipe(x1, y1, x2, y2, duration)</p><p>duration {number} 滑动时长，单位毫秒<br>模拟从坐标(x1, y1)滑动到坐标(x2, y2)，并返回是否成功。只有滑动操作执行完成时脚本才会继续执行。<br>Auto.JS上下滑动可以是对整个屏幕的滑动或对某特定控件的滑动，对整个屏幕滑动</p><p>swipe(device.width / 2, device.height - 100, device.width / 2, 200, 5);<br>swipe(device.width/2, device.height/2, device.width/2, device.height/6, 10)  //划到底部</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line">Slide(<span class="string">"up"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Slide</span>(<span class="params">upordown</span>)</span>{</span><br><span class="line">    <span class="keyword">var</span> h=device.height;               <span class="comment">//屏幕高</span></span><br><span class="line">    <span class="keyword">var</span> w=device.width;                <span class="comment">//屏幕宽</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> x=device.width/<span class="number">2</span>;                     <span class="comment">//横坐标2分之1处</span></span><br><span class="line">    <span class="keyword">var</span> h1=(device.height/<span class="number">6</span>)*<span class="number">3.5</span>;             <span class="comment">//纵坐标6分之3.5处，</span></span><br><span class="line">    <span class="keyword">var</span> h2=(h/<span class="number">6</span>);                      <span class="comment">//纵坐标6分之1处</span></span><br><span class="line">    <span class="keyword">if</span>(upordown==<span class="string">"up"</span>){</span><br><span class="line">        swipe(x, h1, x, h2, <span class="number">400</span>);          <span class="comment">//完美上滑向下翻页(从纵坐标6分之5处拖到纵坐标6分之1处)</span></span><br><span class="line">    }<span class="keyword">else</span>{ </span><br><span class="line">        swipe(x, h2, x, h1, <span class="number">400</span>);          <span class="comment">//完美下滑向上翻页(从纵坐标6分之1处拖到纵坐标6分之5处)</span></span><br><span class="line">    }</span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="重复执行几次"><a href="#重复执行几次" class="headerlink" title="重复执行几次"></a>重复执行几次</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!descEndsWith(<span class="string">"扫一扫"</span>).exists() &amp;&amp; i&lt;=<span class="number">5</span>){</span><br><span class="line">    i++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(i&gt;=<span class="number">5</span>){}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(n!=<span class="number">0</span>){</span><br><span class="line">    <span class="keyword">if</span>(){</span><br><span class="line"> </span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    n--;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="黑屏跑脚本-省电"><a href="#黑屏跑脚本-省电" class="headerlink" title="黑屏跑脚本(省电)"></a>黑屏跑脚本(省电)</h2><p>原理很简单,就是去创建一个黑色的悬浮窗,在oled屏幕上,就不会发光,降低功<br>耗.兼容任何脚本</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 息屏(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">var</span> h = confirm(<span class="string">"是否要进入息屏挂机模式吗？可按下音量上键停止辅助。并不能锁定屏幕！！！通知栏会正常显示（oled屏可用)"</span>);</span><br><span class="line">    <span class="keyword">if</span>(h){</span><br><span class="line">    <span class="keyword">var</span> w = floaty.rawWindow(</span><br><span class="line">        <span class="xml"><span class="tag">&lt;<span class="name">frame</span> <span class="attr">gravity</span>=<span class="string">"center"</span> <span class="attr">bg</span>=<span class="string">"#000000"</span>/&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">    </span><br><span class="line">    w.setSize(-<span class="number">1</span>, -<span class="number">1</span>);</span><br><span class="line">    w.setTouchable(<span class="literal">true</span>);</span><br><span class="line">    <span class="comment">//保持脚本运行</span></span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">()=&gt;</span>{}, <span class="number">1000</span>);</span><br><span class="line">    }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">息屏()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h1><p><a href="https://www.cr173.com/soft/824332.html">Activity管理器下载地址</a></p><h2 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h2><p>Android中的Scheme是一种页面跳转协议，和网站通过URL的形式访问一样，APP同样可以通过这种方式进行跳转<br>scheme地址，可以直接打开app的某个页面</p><h2 id="intent跳转"><a href="#intent跳转" class="headerlink" title="intent跳转"></a>intent跳转</h2><p><a href="https://www.helloworld.net/p/1797278347">Autojs的intent使用</a><br>intent拦截者 simpleHook 两个软件抓意图<br><a href="http://www.feiyunjs.com/1440.html">安卓APP通用的intent跳转协议，scheme地址寻找方法与auto.js调用</a><br>intent跳转只需要找到相关的参数，就可以直接打开指定的页面。<br><strong>前提</strong><br>如果APP里的页面，是不能分享的，那么基本可以认为这个页面是没有scheme地址的。</p><h2 id="使用intent打开新浪微博的用户任务中心scheme"><a href="#使用intent打开新浪微博的用户任务中心scheme" class="headerlink" title="使用intent打开新浪微博的用户任务中心scheme"></a>使用intent打开新浪微博的用户任务中心scheme</h2><p>首先在手机上手动进入新浪微博的任务中心。点击页面右上角的“…”，弹出分享卡片。点击“复制链接”。在电脑的浏览器里，打开这个链接.点击“我要领取”，进入新的页面。</p><p>查看页面的html代码，页面的body有这样一段：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://c.weibo.cn?scheme=sinaweibo%3A%2F%2Fbrowser%3Furl%3Dhttps%253A%252F%252Fm.weibo.cn%252Fc%252Fcheckin%253Ffeaturecode%253Dfrom_sharingpage_to_mtask%2526luicode%253D20000061%2526lfid%253D180%26featurecode%3Dfrom_sharingpage_to_mtask%26luicode%3D20000061%26lfid%3D180&amp;directdownload=0"</span> <span class="attr">class</span>=<span class="string">"m-btn m-btn-block m-btn-orange download-btn-r"</span> <span class="attr">ontouchstart</span>=<span class="string">""</span>&gt;</span>去下载微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个url里，存在scheme这个关键字。我们把scheme后面的地址提取出来。<br><code>sinaweibo%3A%2F%2Fbrowser%3Furl%3Dhttps%253A%252F%252Fm.weibo.cn%252Fc%252Fcheckin%253Ffeaturecode%253Dfrom_sharingpage_to_mtask%2526luicode%253D20000061%2526lfid%253D180%26featurecode%3Dfrom_sharingpage_to_mtask%26luicode%3D20000061%26lfid%3D180&amp;directdownload=0</code><br>[]URL编码/解码工具(<a href="https://tool.chinaz.com/tools/urlencode.aspx">https://tool.chinaz.com/tools/urlencode.aspx</a>)</p><p>选择“URL编码/解码”，将scheme地址，进行一次“UrlDecode解码”。可以看到开头部分的“%3A%2F%2F”已经被转换成了“://”</p><p>接下来使用auto.js的Intent（意图），来测试这个scheme地址。<br>auto.js提供了构建Intent的函数app.intent(), 启动Activity的函数app.startActivity(), 发送广播的函数app.sendBroadcast()。使用这些方法可以用来方便的调用其他应用。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.startActivity({</span><br><span class="line">    <span class="attr">data</span>:<span class="string">"sinaweibo://browser?url=https%3A%2F%2Fm.weibo.cn%2Fc%2Fcheckin%3Ffeaturecode%3Dfrom_sharingpage_to_mtask%26luicode%3D20000061%26lfid%3D180&amp;featurecode=from_sharingpage_to_mtask&amp;luicode=20000061&amp;lfid=180&amp;directdownload=0"</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h2 id="app-intent"><a href="#app-intent" class="headerlink" title="app.intent()"></a>app.intent()</h2><p>构建Intent的函数</p><h2 id="启动服务-Service"><a href="#启动服务-Service" class="headerlink" title="启动服务(Service)"></a>启动服务(Service)</h2><p>Service 是一个不使用用户界面而在后台执行操作的组件。通过将 Intent 传递给 startService()，您可以启动服务执行一次性操作（例如，下载文件）。Intent 描述了要启动的服务，并携带了任何必要的数据。</p><h2 id="传递广播"><a href="#传递广播" class="headerlink" title="传递广播"></a>传递广播</h2><p>app.sendBroadcast()<br>广播是任何应用均可接收的消息。系统将针对系统事件（例如：系统启动或设备开始充电时）传递各种广播。通过将 Intent 传递给 sendBroadcast()、sendOrderedBroadcast() 或 sendStickyBroadcast()，您可以将广播传递给其他应用。</p><h2 id="直达应用内的某个页面——启动Activity"><a href="#直达应用内的某个页面——启动Activity" class="headerlink" title="直达应用内的某个页面——启动Activity"></a>直达应用内的某个页面——启动Activity</h2><p>Activity (应用程序活动)分割了应用中不同的界面和功能（例如微信的主界面、朋友圈、聊天窗口都是不同的Activity），通过Activity可以直接进入应用的特定界面，而不仅仅是启动应用</p><p>在Auto.js中，启动Activity有两种方法：</p><h3 id="用app-startActivity"><a href="#用app-startActivity" class="headerlink" title="用app.startActivity"></a>用app.startActivity</h3><p>app.startActivity()<br>启动活动(Activity)：<br> Activity 表示应用中的一个”屏幕”。</p><p>例如应用主入口都是一个Activity，应用的功能通常也以Activity的形式独立，例如微信的主界面、朋友圈、聊天窗口都是不同的Activity。通过将 Intent 传递给 startActivity()，您可以启动新的 Activity 实例。Intent 描述了要启动的 Activity，并携带了任何必要的数据。</p><p>但无论用哪种方法，启动Activity都离不开Intent这个工具</p><blockquote><p>Intent(意图)，Intent是一个消息传递对象，Android中提供了Intent来协助应用间的交互与通讯。</p></blockquote><p>其用途一般有三种：</p><ul><li>启动活动(Activity)：通过活动可以直达应用内的某个页面</li><li>通过startActivity(Intent)，可以隐式启动新的 Activity 实例，其中Intent 描述了要启动的 Activity</li><li>启动服务(Service)：不使用用户界面，而在后台执行操作的组件</li><li>通过 startService(Intent)可以启动Service，其中Intent 描述了要启动的服务Service</li><li>传递广播(Broadcast)： 广播是任何应用均可接收的消息，通过 sendBroadcast(Intent )可以将广播传递给其他应用</li></ul><blockquote><p>app.startActivity(options) 启动Activity</p></blockquote><p>在Auto.js中，提供了与Intent(意图) 相关的进阶函数startActivity和sendBroadcast，它们可完成app模块没有内置的应用交互功能</p><p>app.startActivity(options)根据options选项构造一个Intent对象，并启动相应的Activity</p><p>其中，options选项有：</p><ul><li>action {string} 要完成的动作，如”android.intent.action.SEND”</li><li>ps. 当action以”android.intent.action”开头时，可以省略前缀，直接用”SEND”</li><li>category {Array} 意图的类别，比较少用</li><li>packageName {string} 目标包名</li><li>className {string} 目标Activity或Service等组件的名称</li><li>type {string} 表示和该意图直接相关的数据的类型，如”text/plain”为纯文本类型</li><li>data {string}如要打开一个文件, action为”android.intent.action.VIEW”, data为”file:///sdcard/1.txt”。</li><li>extras {Object} 额外信息,如发送邮件时的邮件标题、邮件正文</li><li>flags {Array} intent的标识，字符串数组，例如[“activity_new_task”, “grant_read_uri_permission”]</li><li>root {Boolean} 是否以root权限启动、发送该intent</li></ul><blockquote><p>options(即intent的参数)如何获取？</p></blockquote><p>className（即Activity）、packageName通过Auto.js自带的布局分析获取<br>category、action等可以通过例如”intent记录”，”隐式启动”等应用拦截内部intent或者查询暴露的intent。<br>下载<br><a href="https://www.coolapk.com/apk/xyz.hanks.launchactivity">https://www.coolapk.com/apk/xyz.hanks.launchactivity</a><br>其中拦截内部intent需要XPosed框架，或者可以通过反编译等手段获取参数。总之，没有简单直接的方法。<br>举个例子：</p><p>例如，在某界面用Auto.js查询到应用包名com.netease.buff，当前活动</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">com.netease.buff.userCenter.pushSetting.PushSettingsActivity</span><br><span class="line">又使用“隐式启动”应用查询到Intent为</span><br><span class="line">Intent {</span><br><span class="line">act=android.intent.action.MAIN</span><br><span class="line">cat=[android.intent.category.NOTIFICATION_PREFERENCES]</span><br><span class="line">flg=<span class="number">0x14000040</span></span><br><span class="line">cmp=com.netease.buff/.userCenter.pushSetting.PushSettingsActivity</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gotoOptions</span>(<span class="params"></span>) </span>{<span class="comment">//打开设置页面</span></span><br><span class="line">    app.startActivity({</span><br><span class="line">        <span class="attr">action</span>: <span class="string">"android.intent.action.MAIN"</span>,</span><br><span class="line">        <span class="attr">packageName</span>: <span class="string">"com.netease.buff"</span>,</span><br><span class="line">        <span class="attr">className</span>: <span class="string">"com.netease.buff.userCenter.pushSetting.PushSettingsActivity"</span>,</span><br><span class="line">        <span class="attr">category</span>: [android.intent.category.NOTIFICATION_PREFERENCES]</span><br><span class="line">    });</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">}</span><br><span class="line">gotoOptions();</span><br></pre></td></tr></tbody></table></figure><p>注意，此方法有一个限制和缺点，使用此方法，填入的action必须满足android.intent.action.XXX 的格式</p><p>例如有时，在“隐式启动”应用中，得到的intent信息如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent {</span><br><span class="line">act=DELIVERY</span><br><span class="line">flg=<span class="number">0x14000040</span></span><br><span class="line">cmp=com.netease.buff/.entry.SplashActivity</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>若继续将这里的DELIVERY 填入action，则会出错（因为上面介绍过，如果写action: “DELIVERY”，将会被startActivity自动补全为action: “android.intent.action.DELIVERY”，然而很明显没有这个action）</p><h3 id="用Shell命令（似乎后一种更简洁方便）"><a href="#用Shell命令（似乎后一种更简洁方便）" class="headerlink" title="用Shell命令（似乎后一种更简洁方便）"></a>用Shell命令（似乎后一种更简洁方便）</h3><p>我们另寻出路：因为给出了cmp（即component）参数，可尝试用用Shell命令启动Activity<br>打开应用或Activity的另一种方法是：通过AndroidStudio的Shell命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell('am start -p com.tencent.mm');</span><br></pre></td></tr></tbody></table></figure><p>启动微信，这里使用了Shell命令中的am命令，shell即Unix Shell，是在类Unix系统提供的一系列命令。<br>在Auto.js大致等同于用adb执行命令”adb shell”，有两种执行shell命令的方式：</p><ul><li>shell函数：一次性执行单条命令。<br>  一般格式shell(cmd[, root])，[root]{Boolean} 表示是否以root权限运行，默认为false</li><li>Shell对象：一般用于需要执行多条命令的情况，这时Shell对象效率更高。（因为每次运行shell函数都会打开一个单独的shell进程，而Shell对象自始至终使用同一个shell进程）<br>  一般格式new Shell(root)、Shell.exec(cmd)、Shell.exit()等，详见官方文档</li><li>Shell之am命令：Activity Manager<br>  am命令即Activity Manager命令，用于管理应用程序活动、服务等。<br>  以下命令均以”am “开头，例如shell(‘am start -p com.tencent.mm’);</li><li>start [options] intent：启动 intent 指定的 Activity<br>  option常用参数（可以不填）：参见官方文档；<br>  intent常用参数：<ul><li>a action</li><li>n component，指定组件名称，如“com.example.app/.ExampleActivity”，注意，这里的component参数是上面的startActivity所没有的，这个参数的获取来自于“隐式启动”应用中”cmp”的值</li><li>c category</li><li>f flags</li><li>t Mime_type<pre><code>d data_uri</code></pre></li></ul></li></ul><p>举个例子：</p><p>在“隐式启动”应用中，得到的intent信息如下：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Intent {</span><br><span class="line">act=DELIVERY</span><br><span class="line">flg=<span class="number">0x14000040</span></span><br><span class="line">cmp=com.netease.buff/.entry.SplashActivity</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>故对应的Shell命令如下</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell(<span class="string">'am start -a DELIVERY -f 0x14000040 -n com.netease.buff/.entry.SplashActivity'</span>);</span><br></pre></td></tr></tbody></table></figure><p>法一转换为法二<br>另外，可以用法一中的option来构造一个Intent，并转换为对应的shell的intent命令的参数——app.intentToShell(options)，示例</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">shell("am start " + app.intentToShell({</span><br><span class="line">packageName: “org.autojs.autojs”,</span><br><span class="line">className: “org.autojs.autojs.ui.settings.SettingsActivity_”</span><br><span class="line">}), true);</span><br></pre></td></tr></tbody></table></figure><h2 id="意图使用"><a href="#意图使用" class="headerlink" title="意图使用"></a>意图使用</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var intent = new Intent();</span></span><br><span class="line"><span class="comment">// intent.setAction("android.settings.ACCESSIBILITY_SETTINGS"); //打开无障碍设置界面</span></span><br><span class="line"><span class="comment">// app.startActivity(intent);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// action="android.settings.ACCESSIBILITY_SETTINGS"  //打开无障碍设置界面</span></span><br><span class="line"><span class="comment">// Intent(action)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="variable">undefined</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">{*}</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Intent</span>(<span class="params">action</span>)</span>{</span><br><span class="line">    app.startActivity({</span><br><span class="line">        <span class="comment">// packageName: "org.autojs.autojs",</span></span><br><span class="line">        <span class="comment">// className: "org.autojs.autojs.ui.settings.SettingsActivity_",</span></span><br><span class="line">        <span class="attr">action</span>: action,</span><br><span class="line">    });</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打开热点和网络共享</span></span><br><span class="line">app.startActivity({</span><br><span class="line">    <span class="attr">packageName</span>: <span class="string">"com.android.settings"</span>,</span><br><span class="line">    <span class="attr">className</span>: <span class="string">"com.android.settings.Settings$TetherSettingsActivity"</span></span><br><span class="line">  });</span><br><span class="line">waitForActivity(<span class="string">"com.android.settings.Settings$TetherSettingsActivity"</span>) <span class="comment">//等待意图打开</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="微信意图"><a href="#微信意图" class="headerlink" title="微信意图"></a>微信意图</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转扫一扫</span></span><br><span class="line">context.startActivity(app.intent({</span><br><span class="line">    <span class="attr">action</span>: <span class="string">"VIEW"</span>,</span><br><span class="line">    <span class="attr">className</span>:<span class="string">"com.tencent.mm.ui.LauncherUI"</span>,</span><br><span class="line">    <span class="attr">packageName</span>:<span class="string">"com.tencent.mm"</span>,</span><br><span class="line">    <span class="attr">extras</span>: {</span><br><span class="line">        <span class="string">"LauncherUI.From.Scaner.Shortcut"</span>: <span class="literal">true</span></span><br><span class="line">    }</span><br><span class="line">}).setFlags(<span class="number">335544320</span>));</span><br></pre></td></tr></tbody></table></figure><h2 id="支付宝意图"><a href="#支付宝意图" class="headerlink" title="支付宝意图"></a>支付宝意图</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳转支付宝页面</span></span><br><span class="line">app.startActivity({</span><br><span class="line">    <span class="attr">packageName</span>: <span class="string">'com.eg.android.AlipayGphone'</span>,</span><br><span class="line">    <span class="attr">action</span>: <span class="string">"VIEW"</span>,</span><br><span class="line">    <span class="attr">data</span>:<span class="string">"alipays://platformapi/startapp?saId=20000167"</span>,</span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 小程序</span></span><br><span class="line"><span class="comment"> * 修改上面的saId即可</span></span><br><span class="line"><span class="comment"> * 60000002 蚂蚁森林</span></span><br><span class="line"><span class="comment"> * 20000008 跳转支付宝登录界面</span></span><br><span class="line"><span class="comment"> * 20000141 跳转修改名字</span></span><br><span class="line"><span class="comment"> * 20000031 跳转修改头像</span></span><br><span class="line"><span class="comment"> * 20000116 跳转支付宝付款</span></span><br><span class="line"><span class="comment"> * 60000006 附近优惠</span></span><br><span class="line"><span class="comment"> * 60000012 中小学</span></span><br><span class="line"><span class="comment"> * 60000023 蚂蚁保险</span></span><br><span class="line"><span class="comment"> * 60000024 彩票游戏,不对所有用户开放</span></span><br><span class="line"><span class="comment"> * 60000029 口碑排行榜</span></span><br><span class="line"><span class="comment"> * 60000032 添加第一张证件 各类证件齐管理</span></span><br><span class="line"><span class="comment"> * 60000033 in贴纸商城</span></span><br><span class="line"><span class="comment"> * 60000039 超值抢购</span></span><br><span class="line"><span class="comment"> * 60000040 未来酒店</span></span><br><span class="line"><span class="comment"> * 60000044 权益区 无法加载</span></span><br><span class="line"><span class="comment"> * 60000047 校园头条 无法加载,可能缺少参数</span></span><br><span class="line"><span class="comment"> * 60000052 手机通讯录备份 未对所有用户开放</span></span><br><span class="line"><span class="comment"> * 60000057 阿里宝卡</span></span><br><span class="line"><span class="comment"> * 60000071 天天有料</span></span><br><span class="line"><span class="comment"> * 60000076 VIP预约服务 无法加载,可能我不是VIP的原因</span></span><br><span class="line"><span class="comment"> * 60000077 优酷会员首页</span></span><br><span class="line"><span class="comment"> * 60000081 商家服务</span></span><br><span class="line"><span class="comment"> * 60000091 花呗</span></span><br><span class="line"><span class="comment"> * 60000103 支付周奖励金列表页</span></span><br><span class="line"><span class="comment"> * 60000105 我的银行卡 管理页</span></span><br><span class="line"><span class="comment"> * 60000120 福员外 不知道干嘛的</span></span><br><span class="line"><span class="comment"> * 60000125 租房</span></span><br><span class="line"><span class="comment"> * 60000126 余额宝</span></span><br><span class="line"><span class="comment"> * 60000130 淘票票</span></span><br><span class="line"><span class="comment"> * 60000134 外币兑换 服务正在升级</span></span><br><span class="line"><span class="comment"> * 60000135 飞猪汽车票</span></span><br><span class="line"><span class="comment"> * 60000145 阿里巴巴认证中心</span></span><br><span class="line"><span class="comment"> * 60000146 寄快递</span></span><br><span class="line"><span class="comment"> * 60000148 财富号</span></span><br><span class="line"><span class="comment"> * 60000150 我的口碑</span></span><br><span class="line"><span class="comment"> * 60000153 注销账号 注销支付宝账号用的</span></span><br><span class="line"><span class="comment"> * 60000154 AA收款</span></span><br><span class="line"><span class="comment"> * 60000155 共享单车</span></span><br><span class="line"><span class="comment"> * 60000156 支付宝红包~这个应该也是缺少参数</span></span><br><span class="line"><span class="comment"> * 60000160 稳健收益  应该是理财类的东西 </span></span><br><span class="line"><span class="comment"> * 60000161 蚂蚁会员周周乐</span></span><br><span class="line"><span class="comment"> * 60000162 彩虹星愿 应该是教育孩子的</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="用MCV框架实现界面切换"><a href="#用MCV框架实现界面切换" class="headerlink" title="用MCV框架实现界面切换"></a>用MCV框架实现界面切换</h1><p>● M即model模型是指模型表示业务规则<br>● V即View视图是指用户看到并与之交互的界面<br>● C即controller控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求</p><h2 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h2><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"ui"</span>;</span><br><span class="line"><span class="built_in">require</span>(<span class="string">"./controller"</span>).init();</span><br></pre></td></tr></tbody></table></figure><h2 id="model-js"><a href="#model-js" class="headerlink" title="model.js"></a>model.js</h2><p>数据模型和业务逻辑;</p><p>验证登录</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> UserModel = <span class="function"><span class="keyword">function</span> (<span class="params">username, password</span>) </span>{</span><br><span class="line">  <span class="built_in">this</span>.username = username;</span><br><span class="line">  <span class="built_in">this</span>.password = password;</span><br><span class="line">  <span class="built_in">this</span>.vip = <span class="literal">false</span>;</span><br><span class="line">  <span class="built_in">this</span>.login = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.username === <span class="string">"admin"</span> &amp;&amp; <span class="built_in">this</span>.password === <span class="string">"123"</span>) {</span><br><span class="line">      <span class="built_in">this</span>.vip = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.username === <span class="string">"user"</span> &amp;&amp; <span class="built_in">this</span>.password === <span class="string">"123"</span>) {</span><br><span class="line">      <span class="built_in">this</span>.vip = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line">  };</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">UserModel</span>: UserModel,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h2 id="controller-js"><a href="#controller-js" class="headerlink" title="controller.js"></a>controller.js</h2><p>用来调度View层和Model层, 用来将不同的View和不同的Model组织在一起，顺便替双方传递消息;</p><p>把登录的数据交给model处理, 显示对应的界面</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> view = <span class="built_in">require</span>(<span class="string">"./view"</span>);</span><br><span class="line"><span class="keyword">let</span> model = <span class="built_in">require</span>(<span class="string">"./model"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  init,</span><br><span class="line">};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>{</span><br><span class="line">  loadLoginPage();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadLoginPage</span>(<span class="params"></span>) </span>{</span><br><span class="line">  ui.layout(view.LoginPage);</span><br><span class="line">  loginPageAction();</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadHomePage</span>(<span class="params">user</span>) </span>{</span><br><span class="line">  ui.layout(view.HomePage);</span><br><span class="line">  user.vip &amp;&amp; ui.vipComponentParent.addView(ui.inflate(view.VipComponent));</span><br><span class="line">  homePageAction(user);</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loginPageAction</span>(<span class="params"></span>) </span>{</span><br><span class="line">  ui.login.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="keyword">let</span> username = ui.username.text();</span><br><span class="line">    <span class="keyword">let</span> password = ui.password.text();</span><br><span class="line">    <span class="keyword">if</span> (!username) {</span><br><span class="line">      toastLog(<span class="string">"username is empty"</span>);</span><br><span class="line">      ui.username.setError(<span class="string">"username is empty"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!password) {</span><br><span class="line">      toastLog(<span class="string">"password is empty"</span>);</span><br><span class="line">      ui.password.setError(<span class="string">"password is empty"</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">let</span> user = <span class="keyword">new</span> model.UserModel(username, password);</span><br><span class="line">    <span class="keyword">let</span> loginResult = user.login();</span><br><span class="line">    <span class="keyword">if</span> (loginResult) {</span><br><span class="line">      loadHomePage(user);</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">      toastLog(<span class="string">"login failed"</span>);</span><br><span class="line">    }</span><br><span class="line">  });</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">homePageAction</span>(<span class="params">user</span>) </span>{</span><br><span class="line">  ui.username.text(user.username);</span><br><span class="line">  ui.logout.click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    loadLoginPage();</span><br><span class="line">  });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="view-js"><a href="#view-js" class="headerlink" title="view.js"></a>view.js</h2><p>未登录页面和登录页面的xml文件</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> LoginPage = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">"30"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"username"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">w</span>=<span class="string">"*"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"password"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">w</span>=<span class="string">"*"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"login"</span>&gt;</span>login<span class="tag">&lt;/<span class="name">button</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> HomePage = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span> <span class="attr">padding</span>=<span class="string">"30"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"homepage"</span> <span class="attr">w</span>=<span class="string">"*"</span> <span class="attr">gravity</span>=<span class="string">"center"</span> <span class="attr">textStyle</span>=<span class="string">"bold"</span> <span class="attr">textSize</span>=<span class="string">"40sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">"username: "</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">linear</span> <span class="attr">id</span>=<span class="string">"vipComponentParent"</span>&gt;</span><span class="tag">&lt;/<span class="name">linear</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">horizontal</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"logout"</span>&gt;</span>logout<span class="tag">&lt;/<span class="name">button</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">let</span> VipComponent = (</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="name">vertical</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">text</span>=<span class="string">" vip"</span> <span class="attr">textColor</span>=<span class="string">"#ff5722"</span> <span class="attr">w</span>=<span class="string">"*"</span> <span class="attr">textStyle</span>=<span class="string">"bold"</span> <span class="attr">textSize</span>=<span class="string">"30sp"</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">vertical</span>&gt;</span></span></span><br><span class="line">);</span><br><span class="line"><span class="built_in">module</span>.exports = {</span><br><span class="line">  <span class="attr">LoginPage</span>: LoginPage,</span><br><span class="line">  <span class="attr">HomePage</span>: HomePage,</span><br><span class="line">  <span class="attr">VipComponent</span>: VipComponent,</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure><h1 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h1><p>多线程属于同一个进程，同一个进程，申请一次截图权限就可以<br>脚本引擎 - Engines模块，启动的脚本属于不同的进程</p><p>2个线程找图做任务，captureScreen 截图给不同的变量，为啥会有一个提示图片被回收？<br>给变量了，只是内存地址被引用。可以用clone方法处理</p><h1 id="画布"><a href="#画布" class="headerlink" title="画布"></a>画布</h1><h2 id="1-Paint画笔介绍"><a href="#1-Paint画笔介绍" class="headerlink" title="1.Paint画笔介绍"></a>1.Paint画笔介绍</h2><p>Paint即画笔，在绘图过程中起到了极其重要的作用，画笔主要保存了颜色， 样式等绘制信息，指定了如何绘制文本和图形，画笔对象有很多设置方法，大体上可以分为两类，一类与图形绘制相关，一类与文本绘制相关。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取一个画笔对象</span></span><br><span class="line"><span class="keyword">var</span> paint = <span class="keyword">new</span> android.graphics.Paint;</span><br><span class="line"></span><br><span class="line">paint.setStrokeWidth(<span class="number">1</span>)</span><br><span class="line">paint.setStyle(Paint.Style.STROKE);</span><br><span class="line"></span><br><span class="line">paint.setColor(colors.RED);</span><br></pre></td></tr></tbody></table></figure><h3 id="1-1-图形绘制"><a href="#1-1-图形绘制" class="headerlink" title="1.1 图形绘制"></a>1.1 图形绘制</h3><p>常用的方法有这些</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">- setARGB(int a,int r,int g,int b);   <span class="comment">//设置绘制的颜色，a代表透明度，r，g，b代表颜色值。</span></span><br><span class="line">- setAlpha(int a);   <span class="comment">//设置绘制图形的透明度。</span></span><br><span class="line">- setColor(int color);<span class="comment">//设置绘制的颜色，使用颜色值来表示，该颜色值包括透明度和RGB颜色。</span></span><br><span class="line">- setAntiAlias(boolean aa);<span class="comment">//设置是否使用抗锯齿功能，会消耗较大资源，绘制图形速度会变慢。</span></span><br><span class="line">- setDither(boolean dither);<span class="comment">//设定是否使用图像抖动处理，会使绘制出来的图片颜色更加平滑和饱满，图像更加清晰</span></span><br><span class="line">- setFilterBitmap(boolean filter);<span class="comment">//如果该项设置为true，则图像在动画进行中会滤掉对Bitmap图像的优化操作，加快显示速度，本设置项依赖于dither和xfermode的设置</span></span><br><span class="line">- setMaskFilter(MaskFilter maskfilter);<span class="comment">//设置MaskFilter，可以用不同的MaskFilter实现滤镜的效果，如滤化，立体等</span></span><br><span class="line">- setColorFilter(ColorFilter colorfilter);<span class="comment">//设置颜色过滤器，可以在绘制颜色时实现不用颜色的变换效果</span></span><br><span class="line">- setPathEffect(PathEffect effect);<span class="comment">//设置绘制路径的效果，如点画线等</span></span><br><span class="line">- setShader(Shader shader);<span class="comment">//设置图像效果，使用Shader可以绘制出各种渐变效果</span></span><br><span class="line">- setShadowLayer(float radius ,float dx,float dy,int color);<span class="comment">//在图形下面设置阴影层，产生阴影效果，radius为阴影的角度，dx和dy为阴影在x轴和y轴上的距离，color为阴影的颜色</span></span><br><span class="line">- setStyle(Paint.Style style);<span class="comment">//设置画笔的样式，为FILL，FILL_AND_STROKE，或STROKE</span></span><br><span class="line">- setStrokeCap(Paint.Cap cap);<span class="comment">//当画笔样式为STROKE或FILL_AND_STROKE时，设置笔刷的图形样式，如圆形样式  Cap.ROUND,或方形样式Cap.SQUARE</span></span><br><span class="line">- setSrokeJoin(Paint.Join join);<span class="comment">//设置绘制时各图形的结合方式，如平滑效果等</span></span><br><span class="line">- setStrokeWidth(float width);    <span class="comment">//当画笔样式为STROKE或FILL_AND_STROKE时，设置笔刷的粗细度</span></span><br><span class="line">- setXfermode(Xfermode xfermode);<span class="comment">//设置图形重叠时的处理方式，如合并，取交集或并集，经常用来制作橡皮的擦除效果</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-文本绘制"><a href="#1-2-文本绘制" class="headerlink" title="1.2 文本绘制"></a>1.2 文本绘制</h3><p>常用的方法有这些</p><ul><li>setFakeBoldText(boolean fakeBoldText);<br>模拟实现粗体文字，设置在小字体上效果会非常差</li><li>setSubpixelText(boolean subpixelText);<br>设置该项为true，将有助于文本在LCD屏幕上的显示效果</li><li>setTextAlign(Paint.Align align);<br>设置绘制文字的对齐方向</li><li>setTextScaleX(float scaleX);<br>设置绘制文字x轴的缩放比例，可以实现文字的拉伸的效果</li><li>setTextSize(float textSize);<br>设置绘制文字的字号大小</li><li>setTextSkewX(float skewX);<br>设置斜体文字，skewX为倾斜弧度</li><li>setTypeface(Typeface typeface);<br>设置Typeface对象，即字体风格，包括粗体，斜体以及衬线体，非衬线体等</li><li>setUnderlineText(boolean underlineText);<br>设置带有下划线的文字效果</li><li>setStrikeThruText(boolean strikeThruText);<br>设置带有删除线的效果</li></ul><h2 id="2-Canvas画布介绍"><a href="#2-Canvas画布介绍" class="headerlink" title="2.Canvas画布介绍"></a>2.Canvas画布介绍</h2><p>当我们调整好画笔之后，现在需要绘制到画布上，这就得用Canvas类了。在android中既然把Canvas当做画布，那么就可以在画布上绘制我们想要的任何东西。除了在画布上绘制之外，还需要设置一些关于画布的属性，比如，画布的颜色、尺寸等。</p><h3 id="2-1-设置属性"><a href="#2-1-设置属性" class="headerlink" title="2.1 设置属性"></a>2.1 设置属性</h3><p>一般属性有：</p><ul><li>Canvas(Bitmap bitmap): 以bitmap对象创建一个画布，则将内容都绘制在bitmap上，因此bitmap不得为null。</li><li>Canvas(GL gl): 在绘制3D效果时使用，与OpenGL相关。</li><li>isOpaque(boolean isOpaque)：检测是否支持透明。</li><li>setViewport(int left, int top, int right, int bottom, int clipflag):  设置画布中显示窗口。</li><li>drawColor(int color): 设置Canvas的背景颜色。</li><li>setBitmap(Bitmap mBitmap):  设置具体画布，画的内容，保存为一个Bitmap。</li><li>clipRect(float left, float top, float right, float bottom): 设置显示区域，即设置裁剪区。</li><li>translate(float x, float  y): 平移画布。</li><li>rotate(float degree, float px, float py):  旋转画布 。</li><li>skew(float sx, float sy):  设置偏移量。</li><li>save(): 将Canvas当前状态保存在堆栈，save之后可以调用Canvas的平移、旋转、错切、剪裁等操作。</li><li>restore(): 恢复为之前堆栈保存的Canvas状态，防止save后对Canvas执行的操作对后续的绘制有影响。restore和save要配对使用，restore可以比save少，但不能比save多，否则会引发error。save和restore之间，往往夹杂的是对Canvas的特殊操作。</li><li>save(int num)：将Canvas当前状态保存在堆栈，并予以编号int</li><li>restoreToCount(int num)：恢复为之前堆栈保存的编号为int的Canvas状态</li><li>concat(Matrix matrix)：画布关联矩阵，画出来的内容按矩阵改变，而不是画布改变。</li><li>Drawable.draw(Canvas canvas)：将Drawable画到Canvas中<br>注：这种方式画Drawable怎么设置透明度呢？((BitmapDrawable)Drawable).getPaint().setAlpha(mBgAlpha);</li></ul><h3 id="2-2-画图【重点】"><a href="#2-2-画图【重点】" class="headerlink" title="2.2 画图【重点】"></a>2.2 画图【重点】</h3><p>画图部分</p><ul><li>canvas.drawPaint(Paint paint)<br>将画笔设置的颜色和透明度铺满画布</li><li>drawRect(RectF rect, Paint paint)<br>绘制矩形，参数一为RectF一个区域</li><li>drawRect(float left, float top, float right, float bottom, Paint paint)<br>绘制矩形，left:矩形left的x坐标，top:矩形top的y坐标，right:矩形right的x坐标，bottom:矩形bottom的y坐标</li><li>drawRoundRect(RectF rect, float rx, float ry, Paint paint)<br>绘制圆角矩形， rx:x方向的圆角半径，ry:y方向的圆角半径</li><li>drawRoundRect(float left, float top, float right, float bottom, float rx, float ry, Paint paint)</li><li>drawPath(Path path, Paint paint)<br>绘制一个路径，参数一为Path路径对象</li><li>drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint)<br>贴图，参数一就是我们常规的Bitmap对象，参数二是源区域(这里是bitmap)，参数三是目标区域(应该在canvas的位置和大小)，参数四是Paint画刷对象，因为用到了缩放和拉伸的可能，当原始Rect不等于目标Rect时性能将会有大幅损失。</li><li>drawBitmap (Bitmap bitmap, float left, float top, Paint paint)</li><li>drawLine(float startX, float startY, float stopX, float stopY, Paintpaint)<br>画线，参数一起始点的x轴位置，参数二起始点的y轴位置，参数三终点的x轴水平位置，参数四y轴垂直位置，最后一个参数为Paint 画刷对象。</li><li>drawPoint(float x, float y, Paint paint)<br>画点，参数一水平x轴，参数二垂直y轴，第三个参数为Paint对象。</li><li>drawText(String text, float x, floaty, Paint paint)<br>渲染文本，Canvas类除了上面的还可以描绘文字，参数一是String类型的文本，参数二文字左侧到x轴距离，参数三文字BaseLine到y轴距离，参数四是Paint对象。</li><li>drawOval(RectF oval, Paint paint)<br>绘制椭圆，参数一是扫描区域，参数二为paint对象</li><li>drawOval(float left, float top, float right, float bottom, Paint paint）</li><li>drawCircle(float cx, float cy, float radius,Paint paint)<br>绘制圆，参数一是中心点的x轴，参数二是中心点的y轴，参数三是半径，参数四是paint对象；</li><li>drawArc(RectF oval, float startAngle, float sweepAngle, boolean useCenter, Paint paint)<br>画弧，参数一是RectF对象，指定圆弧的外轮廓矩形区域，参数二是起始角(度)在电弧的开始，参数三扫描角(度)开始顺时针测量的，参数四是如果这是真的话,包括椭圆中心的电弧,并关闭它,如果它是假这将是一个弧线,参数五是Paint对象；</li></ul><h3 id="2-3-Canvas对象的获取方式"><a href="#2-3-Canvas对象的获取方式" class="headerlink" title="2.3 Canvas对象的获取方式"></a>2.3 Canvas对象的获取方式</h3><p>2.3.1 Canvas对象的获取方式有两种：<br>第一种通过重写View.onDraw方法，View中的Canvas对象会被当做参数传递过来，操作这个Canvas，效果会直接反应在View中。<br>第二种通过new创建一个Canvas对象<br>代码如下所示<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>}</p><p>Canvas canvas = new Canvas();</p><h3 id="2-4-Canvas的作用"><a href="#2-4-Canvas的作用" class="headerlink" title="2.4 Canvas的作用"></a>2.4 Canvas的作用</h3><p>Canvas可以绘制的对象有：弧线(arcs)、填充颜色(argb和color)、Bitmap、圆(circle和oval)、点(point)、线(line)、矩形(Rect)、图片(Picture)、圆角矩形(RoundRect)、文本(text)、顶点(Vertices)、路径(path)。</p><h3 id="2-5-Canvas绘制圆和椭圆"><a href="#2-5-Canvas绘制圆和椭圆" class="headerlink" title="2.5 Canvas绘制圆和椭圆"></a>2.5 Canvas绘制圆和椭圆</h3><p>绘制圆<br>private Paint paint = new Paint();</p><p>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.BLUE);<br>    paint.setStyle(Paint.Style.FILL);<br>    canvas.drawCircle(200,200,100 , paint);<br>}</p><h3 id="2-6-Canvas绘制矩形、圆角矩形"><a href="#2-6-Canvas绘制矩形、圆角矩形" class="headerlink" title="2.6 Canvas绘制矩形、圆角矩形"></a>2.6 Canvas绘制矩形、圆角矩形</h3><p>如下所示<br>image<br>private Paint paint = new Paint();</p><p>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.RED);<br>    paint.setStyle(Paint.Style.FILL);<br>    canvas.drawRect(100, 100, 200, 200, paint);<br>    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) {<br>        canvas.drawRoundRect(400, 100, 600, 300, 30, 30, paint);<br>    }<br>    paint.setStyle(Paint.Style.STROKE);<br>    paint.setStrokeWidth(20);<br>    canvas.drawRect(100, 400, 300, 600, paint);<br>}</p><h3 id="2-7-Canvas绘制文字"><a href="#2-7-Canvas绘制文字" class="headerlink" title="2.7 Canvas绘制文字"></a>2.7 Canvas绘制文字</h3><p>Canvas绘制文字<br>image<br>private Paint paint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.RED);<br>    paint.setTextSize(100);<br>    canvas.drawText(“潇湘剑雨”, 100, 100, paint);<br>}</p><h3 id="2-8-Canvas绘制弧形、封闭弧形"><a href="#2-8-Canvas绘制弧形、封闭弧形" class="headerlink" title="2.8 Canvas绘制弧形、封闭弧形"></a>2.8 Canvas绘制弧形、封闭弧形</h3><p>绘制弧形、封闭弧形<br>image<br>private Paint paint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    paint.setAntiAlias(true);<br>    paint.setColor(Color.RED);<br>    RectF rel = new RectF(50, 50, 150, 150);<br>    //实心圆弧<br>    canvas.drawArc(rel, 0, 135, false, paint);<br>    //实心圆弧 将圆心包含在内<br>    RectF rel2 = new RectF(50, 200, 150, 300);<br>    canvas.drawArc(rel2, 0, 135, true, paint);<br>    //设置空心Style<br>    paint.setStyle(Paint.Style.STROKE);<br>    paint.setStrokeWidth(20);<br>    RectF rel3 = new RectF(50, 350, 150, 450);<br>    canvas.drawArc(rel3, 0, 270, false, paint);<br>    RectF rel4 = new RectF(50, 250, 150, 600);<br>    canvas.drawArc(rel4, 0, 270, true, paint);<br>}</p><h3 id="2-9-Canvas绘制Path路径"><a href="#2-9-Canvas绘制Path路径" class="headerlink" title="2.9 Canvas绘制Path路径"></a>2.9 Canvas绘制Path路径</h3><p>Canvas绘制Path路径<br>image<br>private Paint paint = new Paint();<br>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    Path angle = new Path();<br>    angle.moveTo(250, 0);<br>    angle.lineTo(0, 500);<br>    angle.lineTo(100, 300);<br>    angle.lineTo(200, 350);<br>    angle.lineTo(500, 500);<br>    angle.close();<br>    canvas.drawPath(angle, paint);<br>}</p><h2 id="3-Matrix变换矩阵介绍【Canvas位置转换】"><a href="#3-Matrix变换矩阵介绍【Canvas位置转换】" class="headerlink" title="3.Matrix变换矩阵介绍【Canvas位置转换】"></a>3.Matrix变换矩阵介绍【Canvas位置转换】</h2><p>思考：如果要画一个仪表盘(数字围绕显示在一个圆圈中)，或者类似钟表指针样的控件，如何实现？<br>Android还提供了一些对Canvas位置转换的方法：rorate、scale、translate、skew(扭曲)等，而且它允许你通过获得它的转换矩阵对象(getMatrix方法)直接操作它。这些操作就像是虽然你的笔还是原来的地方画，但是画纸旋转或者移动了，所以你画的东西的方位就产生变化。为了方便一些转换操作，Canvas还提供了保存和回滚属性的方法(save和restore)，比如你可以先保存目前画纸的位置(save)，然后旋转90度，向下移动100像素后画一些图形，画完后调用restore方法返回到刚才保存的位置。<br>3.1 translate平移</p><p>3.2 rorate旋转</p><p>rorate旋转<br>image<br>private Paint mPaint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    canvas.drawColor(Color.BLUE);<br>    mPaint.setColor(Color.RED);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    canvas.save();<br>    mPaint.setColor(Color.GREEN);<br>    canvas.rotate(45,400,400);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    canvas.restore();<br>}<br>源代码有两个可以使用的方法：<br>/**  </p><ul><li>Preconcat the current matrix with the specified rotation.  </li><li>@param degrees The amount to rotate, in degrees  </li></ul><p> <em>/<br>public native void rotate(float degrees);<br>/</em>*  </p><ul><li>Preconcat the current matrix with the specified rotation.</li><li>@param degrees The amount to rotate, in degrees  </li><li>@param px The x-coord for the pivot point (unchanged by the rotation)  </li><li>@param py The y-coord for the pivot point (unchanged by the rotation)  </li></ul><p> */<br>public final void rotate(float degrees, float px, float py) {<br>    translate(px, py);<br>    rotate(degrees);<br>    translate(-px, -py);<br>}<br>3.3 scale缩放</p><p>scale缩放<br>image<br>private Paint mPaint = new Paint();</p><p>@SuppressLint(“DrawAllocation”)<br>@Override<br>protected void onDraw(Canvas canvas) {<br>    super.onDraw(canvas);<br>    canvas.drawColor(Color.YELLOW);<br>    mPaint.setColor(Color.RED);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    // 保存画布状态<br>    canvas.save();<br>    canvas.scale(0.5f, 0.5f);<br>    mPaint.setColor(Color.GREEN);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>    // 画布状态回滚<br>    canvas.restore();<br>    canvas.scale(0.5f, 0.5f, 400, 400);<br>    mPaint.setColor(Color.BLUE);<br>    canvas.drawRect(new Rect(0, 0, 800, 800), mPaint);<br>}<br>源码如下所示<br>/**  </p><ul><li>Preconcat the current matrix with the specified scale.</li><li>@param sx The amount to scale in X  </li><li>@param sy The amount to scale in Y  </li></ul><p> */<br>public native void scale(float sx, float sy);  </p><p>/**  </p><ul><li>Preconcat the current matrix with the specified scale.  </li><li>@param sx The amount to scale in X  </li><li>@param sy The amount to scale in Y  </li><li>@param px The x-coord for the pivot point (unchanged by the scale)  </li><li>@param py The y-coord for the pivot point (unchanged by the scale)  </li></ul><p> */<br>public final void scale(float sx, float sy, float px, float py) {<br>    translate(px, py);<br>    scale(sx, sy);<br>    translate(-px, -py);<br>}<br>3.4 skew扭曲</p><p>4.RectF介绍</p><p>4.1 Rect简单属性</p><p>这是一个我们常用的一个“绘画相关的工具类”，常用语描述长方形/正方形，他只有4个属性<br>public int left;<br>public int top;<br>public int right;<br>public int bottom;<br>其中常用的构造方法如下所示<br>public Rect(int left, int top, int right, int bottom) {<br>    this.left = left;<br>    this.top = top;<br>    this.right = right;<br>    this.bottom = bottom;<br>}</p><p>public Rect(Rect r) {<br>    if (r == null) {<br>        left = top = right = bottom = 0;<br>    } else {<br>        left = r.left;<br>        top = r.top;<br>        right = r.right;<br>        bottom = r.bottom;<br>    }<br>}<br>这4个属性描述着这一个“方块”，但是这有一个知识点需要理清楚，先看这张图<br>image<br>4.2 Rect父类的实现</p><p>实现了Parcelable 所以需要实现一堆Object的方法，诸如equals，toString等等，来简单看一看<br>对于equals方法，首先先对传来的对象进行判空，类型判断，再强转成Rect对象，最后还是一个个去比对那4个属性。<br>@Override<br>public boolean equals(Object o) {<br>    if (this == o) return true;<br>    if (o == null || getClass() != o.getClass()) return false;</p><pre><code>Rect r = (Rect) o;return left == r.left &amp;&amp; top == r.top &amp;&amp; right == r.right &amp;&amp; bottom == r.bottom;</code></pre><p>}</p><p>@Override<br>public int hashCode() {<br>    int result = left;<br>    result = 31 <em>result + top;<br>result = 31</em> result + right;<br>    result = 31 * result + bottom;<br>    return result;<br>}</p><p>@Override<br>public String toString() {<br>    StringBuilder sb = new StringBuilder(32);<br>    sb.append(“Rect(“); sb.append(left); sb.append(“, “);<br>    sb.append(top); sb.append(“ - “); sb.append(right);<br>    sb.append(“, “); sb.append(bottom); sb.append(“)”);<br>    return sb.toString();<br>}<br>4.3 Rect常用的一些方法</p><p>获取“宽”<br>//文章开头说的公式在这里得到了应验<br>public final int width() {<br>    return right - left;<br>}<br>获取“高”<br>public final int height() {<br>    return bottom - top;<br>}<br>有效性的判断<br>//因为left是最左侧，right比left还小不就不成形了么？宽高同是如此<br>public final boolean isEmpty() {<br>    return left &gt;= right || top &gt;= bottom;<br>}<br>全部置0操作<br>public void setEmpty() {<br>    left = right = top = bottom = 0;<br>}<br>设置参数方法，和构造函数的区别仅在于不会创建新对象<br>public void set(int left, int top, int right, int bottom) {<br>    this.left = left;<br>    this.top = top;<br>    this.right = right;<br>    this.bottom = bottom;<br>}<br>5.关于使用到这几个属性的自定义View</p><p>上面比较详细介绍了Canvas，Paint，Matrix，RectF等等的属性，作用，常用方法，接下来就需要结合具体业务需求练手写一下小案例自定义控件呢<br>5.1 自定义轮播图圆点</p><p>5.1.1 需求介绍<br>绘制圆环，一个实心中心圆，还有一个外圆环<br>此控件可以设置宽度和高度，可以设置颜色<br>5.1.2 思路介绍<br>3.2.1 既然是绘制圆形，可以写一个继承View的自定义view<br>3.2.2 重写onDraw方法，获取控件宽高，然后比较宽高值，取小值的一半作为圆的半径<br>3.2.3 然后分别绘制选中状态和未选中状态的圆<br>3.2.4 创建画笔Paint，并且设置相关属性，比如画笔颜色，类型等<br>3.2.5 利用canvas绘制圆，然后再又用相同方法绘制外边缘<br>3.2.6 自定义一个是否选中状态的方法，传入布尔值是否选中，然后调用view中invalidate方法<br>5.1.3 代码介绍<br>具体代码如下所示：<br>/**</p><ul><li><pre></pre></li><li>@author yangchong</li><li>blog  : <a href="https://github.com/yangchong211">https://github.com/yangchong211</a></li><li>time  : 2016/5/18</li><li>desc  : 红点自定义控件</li><li>revise: 建议设置红点宽高一样，否则是椭圆</li><li></li></ul><p> */<br>public class DotView extends View {</p><pre><code>private boolean isInit = false;private boolean isSelected = false;private float mViewHeight;private float mViewWidth;private float mRadius;private Paint mPaintBg = new Paint();private int mBgUnselectedColor = Color.parseColor("#1A000000");private int mBgSelectedColor = Color.parseColor("#FDE26E");private static final float mArcWidth = 2.0f;public DotView(Context context) {    super(context);}public DotView(Context context, AttributeSet attrs) {    super(context, attrs);}public DotView(Context context, AttributeSet attrs, int defStyleAttr) {    super(context, attrs, defStyleAttr);}@Overrideprotected void onDraw(Canvas canvas) {    super.onDraw(canvas);    if (!isInit) {        isInit = true;        mViewHeight = getHeight();        mViewWidth = getWidth();        if (mViewHeight &gt;= mViewWidth) {            mRadius = mViewWidth / 2.f;        } else {            mRadius = mViewHeight / 2.f;        }    }    //是否选中    if (isSelected){        drawSelectedDot(canvas);    } else{        drawUnSelectedDot(canvas);    }}/** * 绘制选中指示器红点 * @param canvas                    canvas */private void drawSelectedDot(Canvas canvas) {    //设置paint相关属性    mPaintBg.setAntiAlias(true);    mPaintBg.setColor(mBgSelectedColor);    mPaintBg.setStyle(Style.FILL);    //绘制圆    canvas.drawCircle(mViewWidth / 2.f, mViewHeight / 2.f, mRadius - 8.f, mPaintBg);    mPaintBg.setStyle(Style.STROKE);    float offset = 1.f + mArcWidth;    RectF oval = new RectF(mViewWidth / 2.f - mRadius + offset, mViewHeight / 2.f - mRadius + offset,            mViewWidth / 2.f + mRadius - offset, mViewHeight / 2.f + mRadius - offset);    //绘制指定的弧线，该弧线将被缩放以适应指定的椭圆形。    canvas.drawArc(oval, 0.f, 360.f, false, mPaintBg);}/** * 绘制未选中指示器红点 * @param canvas                    canvas */private void drawUnSelectedDot(Canvas canvas) {    mPaintBg.setAntiAlias(true);    mPaintBg.setColor(mBgUnselectedColor);    mPaintBg.setStyle(Style.FILL);    canvas.drawCircle(mViewWidth / 2.f, mViewHeight / 2.f, mRadius - 8.f, mPaintBg);}/** * 设置是否选中 * @param isSelected                isSelected */public void setIsSelected(boolean isSelected) {    this.isSelected = isSelected;    //使整个视图无效。如果视图是可见的，则{@link#onDraw(android.Graphics.Canvas)}将在将来的某个时候被调用。    //调用该方法，会进行重新绘制，也就是调用onDraw方法    this.invalidate();}</code></pre><p>}<br>5.2 自定义圆环百分比进度条</p><p>5.2.1 需求分析<br>1.业务需求：可以设置圆角，可以设置圆形，如果是圆角则必须设置半径，默认圆角半径为10dp<br>2.如果设置了圆形，则即使设置圆角也无效；如果设置非圆形，则圆角生效，同时需要判断圆角半径是否大于控件宽高，处理边界逻辑<br>3.当设置圆形的时候，即使设置宽高不一样，那么取宽高中的最小值的一半为圆形半径<br>5.2.2 代码介绍<br>代码如下所示<br>public class ARoundImageView extends AppCompatImageView {</p><pre><code>/* *   Paint：画笔 *   Canvas：画布 *   Matrix：变换矩阵 * *   业务需求：可以设置圆角，可以设置圆形，如果是圆角则必须设置半径，默认圆角半径为10dp *//** * 圆形模式 */private static final int MODE_CIRCLE = 1;/** * 普通模式 */private static final int MODE_NONE = 0;/** * 圆角模式 */private static final int MODE_ROUND = 2;/** * 圆角半径 */private int currRound = dp2px(10);/** * 画笔 */private Paint mPaint;/** * 默认是普通模式 */private int currMode = 0;public ARoundImageView(Context context) {    this(context,null);}public ARoundImageView(Context context, AttributeSet attrs) {    this(context, attrs, 0);}public ARoundImageView(Context context, AttributeSet attrs, int defStyleAttr) {    super(context, attrs, defStyleAttr);    obtainStyledAttrs(context, attrs, defStyleAttr);    initViews();}private void obtainStyledAttrs(Context context, AttributeSet attrs, int defStyleAttr) {    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.ARoundImageView, defStyleAttr, 0);    currMode = a.hasValue(R.styleable.ARoundImageView_type) ? a.getInt(R.styleable.ARoundImageView_type, MODE_NONE) : MODE_NONE;    currRound = a.hasValue(R.styleable.ARoundImageView_radius) ? a.getDimensionPixelSize(R.styleable.ARoundImageView_radius, currRound) : currRound;    a.recycle();}private void initViews() {    //ANTI_ALIAS_FLAG 用于绘制时抗锯齿    mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);}/** * 当模式为圆形模式的时候，我们强制让宽高一致 */@Overrideprotected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {    if (currMode == MODE_CIRCLE) {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);        int result = Math.min(getMeasuredHeight(), getMeasuredWidth());        // 此方法必须由{@link#onMeasure(int，int)}调用，以存储已测量的宽度和测量的高度。        // 如果不这样做，将在测量时触发异常。        setMeasuredDimension(result, result);    } else {        super.onMeasure(widthMeasureSpec, heightMeasureSpec);    }}@SuppressLint("DrawAllocation")@Overrideprotected void onDraw(Canvas canvas) {    //获取ImageView图片资源    Drawable mDrawable = getDrawable();    //获取Matrix对象    Matrix mDrawMatrix = getImageMatrix();    if (mDrawable == null) {        return;    }    if (mDrawable.getIntrinsicWidth() == 0 || mDrawable.getIntrinsicHeight() == 0) {        return;    }    if (mDrawMatrix == null &amp;&amp; getPaddingTop() == 0 &amp;&amp; getPaddingLeft() == 0) {        mDrawable.draw(canvas);    } else {        final int saveCount = canvas.getSaveCount();        canvas.save();        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) {            if (getCropToPadding()) {                final int scrollX = getScrollX();                final int scrollY = getScrollY();                canvas.clipRect(scrollX + getPaddingLeft(), scrollY + getPaddingTop(),                        scrollX + getRight() - getLeft() - getPaddingRight(),                        scrollY + getBottom() - getTop() - getPaddingBottom());            }        }        canvas.translate(getPaddingLeft(), getPaddingTop());        switch (currMode){            case MODE_CIRCLE:                Bitmap bitmap1 = drawable2Bitmap(mDrawable);                mPaint.setShader(new BitmapShader(bitmap1, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));                canvas.drawCircle(getWidth() / 2, getHeight() / 2, getWidth() / 2, mPaint);                break;            case MODE_ROUND:                Bitmap bitmap2 = drawable2Bitmap(mDrawable);                mPaint.setShader(new BitmapShader(bitmap2, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));                canvas.drawRoundRect(new RectF(getPaddingLeft(), getPaddingTop(),                                getWidth() - getPaddingRight(), getHeight() - getPaddingBottom()),                        currRound, currRound, mPaint);                break;            case MODE_NONE:            default:                if (mDrawMatrix != null) {                    canvas.concat(mDrawMatrix);                }                mDrawable.draw(canvas);                break;        }        canvas.restoreToCount(saveCount);    }}/** * drawable转换成bitmap */private Bitmap drawable2Bitmap(Drawable drawable) {    if (drawable == null) {        return null;    }    Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);    Canvas canvas = new Canvas(bitmap);    //根据传递的scaleType获取matrix对象，设置给bitmap    Matrix matrix = getImageMatrix();    if (matrix != null) {        canvas.concat(matrix);    }    drawable.draw(canvas);    return bitmap;}private int dp2px(float value) {    return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,            value, getResources().getDisplayMetrics());}</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> Autojs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Rhino引擎 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker学习</title>
      <link href="/2022/010511205.html"/>
      <url>/2022/010511205.html</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><p>Docker 是一个开源的应用容器引擎，基于 GO 语言开发，开发者可以打包应用及依赖包到一个可移植的容器中，然后发布到任何操作系统的机器上，也可以实现虚拟化。</p><p>简单理解:<br>Docker就是一个虚拟机，可以让你在一个虚拟的，类似于沙盒的环境下进行环境搭建、软件安装、软件使用、程序编码等操作，并且这个环境是Linux系统。<br>实际上：<br>是在Linux系统下的一种容器，容器技术把一个系统需要的资源划分给一个独立的组(Linux系统下每个组的权限不同，互不干扰)，可以将此看作是一个新的Linux系统，因为它包含了Linux系统所需要的环境。与虚拟机不同的是，虚拟机下的系统是有虚拟硬件的，而Docker内的系统实际上是一个环境。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="window下安装"><a href="#window下安装" class="headerlink" title="window下安装"></a>window下安装</h3><p>Docker 并非是一个通用的容器工具，它依赖于已存在并运行的 Linux 内核环境。</p><p>Docker 实质上是在已经运行的 Linux 下制造了一个隔离的文件环境，因此它执行的效率几乎等同于所部署的 Linux 主机。</p><p>Docker 必须部署在 Linux 内核的系统上。如果其他系统想部署 Docker 就必须安装一个虚拟 Linux 环境。并在安装 Linux 系统的的虚拟机中运行Docker。<br><a href="https://www.docker.com/products/docker-desktop/">安装</a><br>想要使用Docker-desktop首先安装WSL2内核</p><h4 id="通过wsl命令将这两个子系统进行迁移"><a href="#通过wsl命令将这两个子系统进行迁移" class="headerlink" title="通过wsl命令将这两个子系统进行迁移"></a>通过wsl命令将这两个子系统进行迁移</h4><p>docker-desktop：保存的是程序<br>docker-desktop-data: 保存的镜像<br><code>wsl --help</code>:查看wsl命令提醒</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1.查看所有WSL。</span></span><br><span class="line">wsl <span class="literal">-l</span> -<span class="literal">-all</span>  <span class="literal">-v</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2、导出WSL。</span></span><br><span class="line">wsl -<span class="literal">-export</span> docker<span class="literal">-desktop</span> D:\data\WSL2\docker<span class="literal">-desktop</span>.tar</span><br><span class="line">wsl -<span class="literal">-export</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> D:\data\WSL2\docker<span class="literal">-desktop</span><span class="literal">-data</span>.tar</span><br><span class="line"></span><br><span class="line"><span class="comment">#3、注销待迁移WSL。</span></span><br><span class="line">wsl -<span class="literal">-unregister</span> docker<span class="literal">-desktop</span></span><br><span class="line">wsl -<span class="literal">-unregister</span> docker<span class="literal">-desktop</span><span class="literal">-data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4、在新位置导入WSL。</span></span><br><span class="line"></span><br><span class="line">wsl -<span class="literal">-import</span> docker<span class="literal">-desktop</span> D:\data\WSL2\docker<span class="literal">-desktop</span> D:\data\WSL2\docker<span class="literal">-desktop</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br><span class="line">wsl -<span class="literal">-import</span> docker<span class="literal">-desktop</span><span class="literal">-data</span> D:\data\WSL2\docker<span class="literal">-desktop</span><span class="literal">-data</span> D:\data\WSL2\docker<span class="literal">-desktop</span><span class="literal">-data</span>.tar -<span class="literal">-version</span> <span class="number">2</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="配置国内源"><a href="#配置国内源" class="headerlink" title="配置国内源"></a>配置国内源</h4><p>设置-&gt;Docker Engine</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"registry-mirrors": [</span><br><span class="line">  "https://docker.mirrors.ustc.edu.cn/",</span><br><span class="line">  "https://hub-mirror.c.163.com/"</span><br><span class="line">]</span><br></pre></td></tr></tbody></table></figure><h3 id="centos下安装"><a href="#centos下安装" class="headerlink" title="centos下安装"></a>centos下安装</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 卸载可能存在的旧版本</span></span><br><span class="line">yum remove docker \ docker-client \ docker-client-latest \ docker-common \ docker-latest \ docker-latest-logrotate \ docker-logrotate \ docker-selinux \ docker-engine-selinux \ docker-engine</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装必要的系统工具</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置阿里云Docker Yum源</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ​ 更新yum缓存</span></span><br><span class="line">yum makecache fast</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装docker-CE(docker社区版)</span></span><br><span class="line">yum -y install docker-ce</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动docker</span></span><br><span class="line">systemctl start docker </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看dockers状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置docker开机自启</span></span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></tbody></table></figure><h2 id="Docker-Client：客户端，命令行"><a href="#Docker-Client：客户端，命令行" class="headerlink" title="Docker Client：客户端，命令行"></a>Docker Client：客户端，命令行</h2><h2 id="Docker-Daemon：服务端守护进程，接受并处理来自客户端的消息"><a href="#Docker-Daemon：服务端守护进程，接受并处理来自客户端的消息" class="headerlink" title="Docker Daemon：服务端守护进程，接受并处理来自客户端的消息"></a>Docker Daemon：服务端守护进程，接受并处理来自客户端的消息</h2><h2 id="2-docker容器数据管理"><a href="#2-docker容器数据管理" class="headerlink" title="2 docker容器数据管理"></a>2 docker容器数据管理</h2><h3 id="2-1-docker容器的数据卷"><a href="#2-1-docker容器的数据卷" class="headerlink" title="2.1 docker容器的数据卷"></a>2.1 docker容器的数据卷</h3><p>数据卷特点：</p><p>数据卷在容器启动时初始化，如果容器使用的镜像在挂载点包含了数据，这些数据会被拷贝到初始化的数据卷中。</p><p>数据卷可以在容器之间共享和重用。</p><p>可以对数据卷里的内容直接进行修改。</p><p>数据卷的变化不会影响镜像的更新。</p><p>数据卷会一直存在，即使挂载数据卷的容器已经被删除。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数据卷使用，为容器添加数据卷.-v 宿主机目录:容器内目录</span></span><br><span class="line">docker run -v /app/data:/data -it centos /bin/bash</span><br></pre></td></tr></tbody></table></figure><h3 id="2-2-docker的数据卷容器"><a href="#2-2-docker的数据卷容器" class="headerlink" title="2.2 docker的数据卷容器"></a>2.2 docker的数据卷容器</h3><p>一个容器挂载了数据卷，其他容器通过挂载这个容器实现数据共享，挂载数据卷的容器叫做数据卷容器。</p><p><code>docker run --volumes-from [container name]</code></p><h3 id="2-3-数据卷备份和还原"><a href="#2-3-数据卷备份和还原" class="headerlink" title="2.3 数据卷备份和还原"></a>2.3 数据卷备份和还原</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数据备份</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v ：指定保存数据的路径</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> tar cvf ：是容器运行时执行的命令，执行的是一个压缩文件tar 命令，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将要备份容器中的目录压缩到指定的目录下。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个容器的名字叫做datavolume，挂载在data-volume2 上，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 宿主机目录是/root/backup，容器中的目录是/backup，运行centos系统，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 压缩之后的路径是/backup/data-volume2.tar.gz，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> container data volume 是需要压缩备份的目录</span></span><br><span class="line">docker run --volumes-from [container name] -v /app/backup:/backup centos tar czvf /backup/backup.tar.gz [container data volume]</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 数据还原</span></span><br><span class="line">docker run --volumes-from [container name] -v /app/backup:/backup centos tar xzvf /backup/backup.tar.gz [container data volume]</span><br></pre></td></tr></tbody></table></figure><h2 id="镜像与容器的关系"><a href="#镜像与容器的关系" class="headerlink" title="镜像与容器的关系"></a>镜像与容器的关系</h2><p>镜像是一个linux虚拟机，容器是启动虚拟机，每次启动的时候，是一个副本，是先把镜像复制一份后直接启动，启动不干扰镜像，一个镜像可以启动无数个容器。</p><p>镜像：可以理解为没有运行的程序及其运行所依赖的操作系统文件和依赖库。而容器可以理解为运行中的镜像。其实一个就是程序，一个就是进程。相比普通的程序，多了运行所支持的操作系统文件和依赖库，所以镜像可以随便部署都能以一样状态运行。</p><h2 id="镜像-Image"><a href="#镜像-Image" class="headerlink" title="镜像(Image)"></a>镜像(Image)</h2><p>相当于面向对象编程 类 的概念</p><p>一个只读层被称为镜像，一个镜像是永久不会变的。因为 Docker 使用统一文件系统，Docker 进程认为整个文件系统是以读写方式挂载的，由于所有的变更都发生在顶层的可写层，所以下层的原始的只读镜像文件并未发生变化。</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查找镜像</span></span><br><span class="line">docker search mysql</span><br><span class="line"></span><br><span class="line"><span class="comment">#查看已有镜像</span></span><br><span class="line">docker images</span><br></pre></td></tr></tbody></table></figure><h3 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 官方镜像</span></span><br><span class="line"></span><br><span class="line">docker pull 镜像名称</span><br><span class="line"></span><br><span class="line"><span class="comment"># 个人镜像</span></span><br><span class="line">docker pull 仓库名称/镜像名称</span><br><span class="line">docker pull xunmi/django</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三方仓库拉取</span></span><br><span class="line">docker pull 第三方仓库地址/仓库名称/镜像名称</span><br><span class="line">docker pull hub.c.<span class="number">163</span>.com/library/mysql:latest</span><br><span class="line">(默认仓库名为library,所有从官方获取镜像相当于`sudo docker image pull library/镜像名称`)</span><br></pre></td></tr></tbody></table></figure><h3 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 要删除镜像，要先删除其下的容器</span></span><br><span class="line">docker image <span class="built_in">rm</span> 镜像名或镜像ID 或 docker rmi 镜像名或镜像ID</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h3><p>通常在镜像仓库下载images 镜像无法满足当前业务软件运行要求，需要安装一些软件包并重新生成images镜像后进行大批量部署。使用docker commit和docker build 2种方式构建镜像。</p><h4 id="commit构建镜像"><a href="#commit构建镜像" class="headerlink" title="commit构建镜像"></a>commit构建镜像</h4><p>（1）运行容器</p><p><code>docker run -d -it --name webserver -p 8080:80 nginx</code><br>（2）修改容器 （容器内修改）<br><code>echo "hello" &gt; /usr/share/nginx/html/hello.html</code><br>（3）构建新镜像</p><p><code>docker commit webserver nginx-202206</code></p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#命令格式</span><br><span class="line">docker commit -a="作者" -m="说明"  -p 容器id/容器名称 镜像新名称:镜像版本</span><br><span class="line"># 参数说明</span><br><span class="line">    -a :提交的镜像作者；</span><br><span class="line">    -c :使用Dockerfile指令来创建镜像；</span><br><span class="line">    -m :提交时的说明文字；</span><br><span class="line">    -p :在commit时，将容器暂停。</span><br></pre></td></tr></tbody></table></figure><p>（4）查看镜像</p><p><code>docker images nginx-202206</code><br>（5）docker run运行</p><p><code>docker run -d -it --name nginx02 -p 8091:80 nginx-202206</code><br>（6）访问测试</p><p><code>[root@localhost /]# curl  192.168.100.95:8091/hello.html</code><br>hello<br>（7）文件挂载<br><code>docker run -d --name nginx01 -p 8090:80 -v /nginx/public:/usr/share/nginx/html -v /nginx/config:/etc/nginx/conf.d nginx-202206</code></p><h4 id="dockerFile构建镜像"><a href="#dockerFile构建镜像" class="headerlink" title="dockerFile构建镜像"></a>dockerFile构建镜像</h4><p>(1)创建 dockerFile_nginx文件</p><p><code>vim dockerFile_nginx</code></p><p>FROM  nginx-202206<br>COPY ./hello.html /usr/share/nginx/html<br>(2)docker  build 构建镜像</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker  build  -f dockerfile_nginx -t webnginx:v1.1 .</span><br><span class="line"><span class="meta">#</span><span class="bash"> 参数说明</span></span><br><span class="line"></span><br><span class="line">-f 需要构建的脚本文件</span><br><span class="line"></span><br><span class="line">-t tag的缩写，构建后的镜像名称:版本号</span><br></pre></td></tr></tbody></table></figure><p>(3)查看镜像</p><p>[root@localhost mnt]# docker images<br>REPOSITORY     TAG       IMAGE ID       CREATED             SIZE<br>webnginx       v1.1      11917097ffd6   5 minutes ago       141MB<br>nginx-202206   latest    756b1c638161   About an hour ago   141MB<br>nginx          latest    605c77e624dd   5 months ago        141MB<br>(4)运行镜像</p><p>docker run -d -it –name nginxA -p 8095:80 webnginx:v1.1<br>(5)测试</p><p>[root@localhost mnt]# curl  192.168.100.95:8095/hello.html<br>dockerFile</p><h3 id="镜像保存、加载"><a href="#镜像保存、加载" class="headerlink" title="镜像保存、加载"></a>镜像保存、加载</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">（1）镜像保存</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">命令格式</span></span><br><span class="line">docker save 镜像id/镜像名称 -o /本地目录/文件名称</span><br><span class="line">docker save webnginx:v1.1 -o /opt/webnginx.tar</span><br><span class="line">（2）load加载镜像</span><br><span class="line"></span><br><span class="line">docker load -i /opt/webnginx.tar</span><br></pre></td></tr></tbody></table></figure><h2 id="容器-Container"><a href="#容器-Container" class="headerlink" title="容器(Container)"></a>容器(Container)</h2><p>相当于面向对象编程 对象 的概念</p><p>镜像运行后的进程。因为 Docker 的容器实在太轻量级了，很多时候用户都是随用随建，用完即删。<br>启动一个容器首先要拉取一个镜像<br><a href="https://mp.weixin.qq.com/s/3fuKKjLmsRRvJPUI88JNBw">参考</a></p><h3 id="容器状态-STATUS"><a href="#容器状态-STATUS" class="headerlink" title="容器状态(STATUS)"></a>容器状态(STATUS)</h3><p>exited:此时使用start命令可以将容器b1从die状态重新启动为running状态，并进行交互</p><h3 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h3><p>查看容器主要会用到ps命令<code>docker ps 参数</code><br>参数<br>  -s 显示容器大小<br>  -a 查看当前所有的容器</p><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">ps</span>   <span class="comment"># 查看正在运行的容器</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">ps</span> <span class="literal">-a</span>  <span class="comment"># 查看当前所有的容器</span></span><br><span class="line"></span><br><span class="line">docker inspect  id  <span class="comment">#查看容器的信息</span></span><br><span class="line"></span><br><span class="line">docker stats <span class="comment">#查看容器占用内存</span></span><br></pre></td></tr></tbody></table></figure><h3 id="启动和关闭容器"><a href="#启动和关闭容器" class="headerlink" title="启动和关闭容器"></a>启动和关闭容器</h3><p>docker run<br>加载镜像即启动容器,如果还没有这个镜像就会自动下载</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">参数：</span><br><span class="line">  -i 表示以交互模式运行容器</span><br><span class="line">  -t 表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。</span><br><span class="line">  -it： 开启输入功能并连接伪终端</span><br><span class="line">  -d 会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)，想要进入容器需要使用指令 docker exec</span><br><span class="line">  -v表示目录映射关系，即宿主机目录:容器中目录。(最好做目录映射，在宿主机上做修改，然后共享到容器上)。形式为：-v 宿主机路径:/root/.halo，后者不能修改。</span><br><span class="line">  --name为创建的容器命名。(默认会随机给名字,不支持中文字符!!!)</span><br><span class="line">  -p表示端口映射，即宿主机端口:容器中端口。 比如:-p 8080:80 就是将容器中的80端口,映射到主机中的8080端口</span><br><span class="line">  --net=host表示将主机的网络环境映射到容器中，使容器的网络与主机相同。每个 Docker 容器都有自己的网络连接空间连接到虚拟 LAN。使用此命令则会让容器和主机共享一个网络空间。</span><br><span class="line"></span><br><span class="line">  -p： 端口映射，格式为 主机(宿主)端口:容器端口 ，可在 application.yaml 配置。</span><br><span class="line">  --restart： 建议设置为 unless-stopped，在 Docker 启动的时候自动启动容器。</span><br><span class="line">      Docker容器的重启策略如下：</span><br><span class="line">      no，默认策略，在容器退出时不重启容器</span><br><span class="line">      on-failure，在容器非正常退出时（退出状态非0），才会重启容器</span><br><span class="line">      on-failure:3，在容器非正常退出时重启容器，最多重启3次</span><br><span class="line">      always，在容器退出时总是重启容器</span><br><span class="line">      unless-stopped，在容器退出时总是重启容器，但是不考虑在Docker守护进程启动时就已经停止了的容器</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">docker run <span class="literal">-d</span> -<span class="literal">-restart</span>=always <span class="literal">-v</span> D:\data\docker\alist:/opt/alist/<span class="keyword">data</span> <span class="literal">-p</span> <span class="number">5244</span>:<span class="number">5244</span> -<span class="literal">-name</span>=<span class="string">"alist01"</span> xhofe/alist:latest</span><br><span class="line"></span><br><span class="line">docker run <span class="literal">-it</span>                          镜像名 <span class="comment">#启动一个容器</span></span><br><span class="line">docker <span class="built_in">rm</span> 容器名或容器id  <span class="comment">#删除容器</span></span><br><span class="line">docker rename 容器原来名  要改为的名字  <span class="comment"># 更改容器名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新启动已存在的容器</span></span><br><span class="line">docker <span class="built_in">start</span> 容器名或容器id</span><br><span class="line"></span><br><span class="line">docker stop 容器名或容器id  <span class="comment"># 停止容器</span></span><br><span class="line">docker restart &lt;容器 ID&gt;   <span class="comment">#停止的容器可以通过 docker restart 重启</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制关闭容器</span></span><br><span class="line">docker <span class="built_in">kill</span> 容器名或容器id</span><br><span class="line"></span><br><span class="line">docker exec <span class="literal">-it</span> name /bin/bash   <span class="comment">#进入一个容器</span></span><br></pre></td></tr></tbody></table></figure><h3 id="操作后台容器"><a href="#操作后台容器" class="headerlink" title="操作后台容器"></a>操作后台容器</h3><p><code>docker exec 参数 容器名或容器id </code><br>参数：<br>  -d    会创建一个守护式容器在后台运行(这样创建容器后不会自动登录容器)。<br>  -e    设置环境变量<br>  -i    表示以《交互模式》运行容器。<br>  -t    表示容器启动后会进入其命令行。加入这两个参数后，容器创建就能登录进去。即分配一个伪终端。<br>  -u    设置用户名和UID。<br>  -w    设置容器内的工作目录。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入后台容器</span></span><br><span class="line">docker exec -it 容器ID bash</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="容器数据管理"><a href="#容器数据管理" class="headerlink" title="容器数据管理"></a>容器数据管理</h3><p>数据卷特点：</p><p>数据卷在容器启动时初始化，如果容器使用的镜像在挂载点包含了数据，这些数据会被拷贝到初始化的数据卷中。</p><p>数据卷可以在容器之间共享和重用。</p><p>可以对数据卷里的内容直接进行修改。</p><p>数据卷的变化不会影响镜像的更新。</p><p>数据卷会一直存在，即使挂载数据卷的容器已经被删除。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 数据卷使用，为容器添加数据卷.-v 宿主机目录:容器内目录</span></span><br><span class="line">docker run -v /app/data:/data -it centos /bin/bash</span><br></pre></td></tr></tbody></table></figure><h3 id="导出和导入容器"><a href="#导出和导入容器" class="headerlink" title="导出和导入容器"></a>导出和导入容器</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker export 1e560fca3906 &gt; ubuntu.tar    # 导出容器</span><br><span class="line"></span><br><span class="line">docker /ubuntu.tar | docker import - test/ubuntu:v1   #导入容器，再将容器导入到一个镜像中</span><br><span class="line">docker import http://example.com/exampleimage.tgz example/imagerepo  #通过指定 URL 或者某个目录来导入</span><br></pre></td></tr></tbody></table></figure><h3 id="容器制作成镜像"><a href="#容器制作成镜像" class="headerlink" title="容器制作成镜像"></a>容器制作成镜像</h3><figure class="highlight powershell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将容器制作成镜像</span></span><br><span class="line">docker commit 容器名 镜像名</span><br><span class="line"><span class="comment"># 镜像打包备份(打包备份的文件会自动存放在当前命令行的路径下,如果想让保存的文件可以打开,可以加.tar后缀)</span></span><br><span class="line">docker save <span class="literal">-o</span> 保存的文件名 镜像名</span><br><span class="line"><span class="comment"># 镜像解压</span></span><br><span class="line">docker load <span class="literal">-i</span> 文件路径/备份文件</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="容器更新"><a href="#容器更新" class="headerlink" title="容器更新"></a>容器更新</h3><p><a href="https://blog.laoda.de/archives/docker-issues#3.-docker%E9%A1%B9%E7%9B%AE%E6%9B%B4%E6%96%B0">https://blog.laoda.de/archives/docker-issues#3.-docker%E9%A1%B9%E7%9B%AE%E6%9B%B4%E6%96%B0</a><br>Docker容器如何更新？如何迁移应用？如何卸载？</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">docker stop halo   # 先停止容器</span><br><span class="line"></span><br><span class="line">docker rm -f halo  # 删除容器</span><br><span class="line"></span><br><span class="line">cp -r ~/.halo ~/.halo.archive   #备份数据（非常非常非常重要）这一步所有都一样，注意你挂载出来的路径地址</span><br><span class="line"></span><br><span class="line">rm -rf ~/.halo/.leveldb    # 这一步是halo特有的</span><br><span class="line"></span><br><span class="line">docker pull halohub/halo:1.5.3   # 拉取最新的镜像</span><br><span class="line"></span><br><span class="line">docker run -it -d --name halo -p 8090:8090 -v ~/.halo:/root/.halo --restart=unless-stopped halohub/halo:1.5.3    # 重新运行容器 注意和搭建时候唯一不同的就是最后面的版本号不同，如果你是latest 那就把1.5.3改成latest</span><br><span class="line"></span><br><span class="line">docker image prune # 删除掉旧的镜像（可选）</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="window的Docker-Desktop使用"><a href="#window的Docker-Desktop使用" class="headerlink" title="window的Docker Desktop使用"></a>window的Docker Desktop使用</h1><p><a href="https://blog.csdn.net/qq_39611230/article/details/108641842">https://blog.csdn.net/qq_39611230/article/details/108641842</a></p><h1 id="vscode使用docker"><a href="#vscode使用docker" class="headerlink" title="vscode使用docker"></a>vscode使用docker</h1><p><a href="https://docs.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial">https://docs.microsoft.com/zh-cn/visualstudio/docker/tutorials/docker-tutorial</a><br>VS Code 提供可让你使用本地 Docker 桌面服务的扩展。 可以创建容器化应用，将应用部署到容器，并调试容器上运行的应用。</p><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>下载安装<a href="https://docs.docker.com/desktop/">Docker Desktop</a></p><p>安装 VS Code Remote-WSL 扩展：使你能够在 VS Code 中打开在 WSL 上运行的 Linux 项目（无需担心路径问题、二进制兼容性或其他跨 OS 的难题）。</p><p>安装 VS code Remote-Containers 扩展：使你能够打开容器内的项目文件夹或存储库，并利用 Visual Studio Code 的完整功能集在容器中执行开发工作。</p><p>安装 <a href="https://code.visualstudio.com/docs/containers/overview">VS Code Docker 扩展</a>。 添加了从 VS Code 内生成、管理和部署容器化应用程序的功能。 （需要 Remote-Container 扩展才能实际使用容器作为开发环境。）</p><h2 id="更换国内镜像源"><a href="#更换国内镜像源" class="headerlink" title="更换国内镜像源"></a>更换国内镜像源</h2><p>Docker中国区官方               “<a href="https://registry.docker-cn.com&quot;/">https://registry.docker-cn.com"</a><br>网易                          “<a href="http://hub-mirror.c.163.com&quot;/">http://hub-mirror.c.163.com"</a>  （这个还挺快的）<br>ustc                          “<a href="https://docker.mirrors.ustc.edu.cn&quot;/">https://docker.mirrors.ustc.edu.cn"</a><br>阿里云                        “<a href="https://kfwkfulq.mirror.aliyuncs.com&quot;/">https://kfwkfulq.mirror.aliyuncs.com"</a></p><h3 id="linux下"><a href="#linux下" class="headerlink" title="linux下"></a>linux下</h3><p>修改 /etc/docker/daemon.json 文件，执行命令：<br><code>vi /etc/docker/daemon.json </code></p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">{</span><br><span class="line"> <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>,</span><br><span class="line"></span><br><span class="line">                  <span class="string">"http://hub-mirror.c.163.com"</span> ,</span><br><span class="line"></span><br><span class="line">                  <span class="string">"https://kfwkfulq.mirror.aliyuncs.com"</span></span><br><span class="line"></span><br><span class="line">                           ]</span><br><span class="line">} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker restart    #重启Docker</span><br></pre></td></tr></tbody></table></figure><h2 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h2><p>1.在 VS Code 中，选择 终端 &gt; 新终端。</p><p>2.在终端窗口或 Bash 窗口中运行以下命令。<br><code>docker run -dp 80:80 docker/getting-started</code><br>参数<br>  -d 在后台以分离模式运行容器。<br>  -p 80:80 将主机的端口80映射到容器中的端口80。<br>  docker/getting-started 指定要使用的映像。</p><p>3.在 VS Code 中，选择左侧的 docker 图标以查看 docker 扩展。</p><h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><p>制作docker镜像（image），最主要的是编写Dockerfile文件(一种基于文本的说明脚本)</p><p>需要在项目根目录创建Dockerfile文件</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> golang:alpine  </span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> mkdir /files</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> firstDockerImage.go /files</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /files</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o /files/firstImage firstDockerImage.go</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/files/firstImage"</span>]</span></span><br></pre></td></tr></tbody></table></figure><p>第1行：FROM 说明将要使用的基础镜像来自：golang:alpine （go语言alpine标签的镜像，alpine是阿尔卑斯，一种Linux系统，非常小）</p><p>第3行：在Docker镜像中创建一个新目录.【run 开始的命令是在镜像中操作】</p><p>第4行：将当前用户目录中的文件 firstDockerImage.go复制到镜像中的 /files目录下</p><p>【COPY是从用户复制到镜像】</p><p>第5行：修改Docker镜像的当前目录</p><p>第6行：run命令，依然是在镜像中执行go build命令，生成firstImage可执行程序。</p><p>第7行：指定运行镜像时，将要执行的【镜像中】程序的路径。</p><p>在文件资源管理器的 VS Code 中，右键单击 Dockerfile ，然后选择 “生成映像”。</p><h2 id="上传到仓库"><a href="#上传到仓库" class="headerlink" title="上传到仓库"></a>上传到仓库</h2><p>1、使用docker login命令登录docker hub账户</p><p>输入自己的用户名和密码。</p><p>2、使用docker tag命令给镜像打标签</p><p>docker tag image:tag “user/repo:tag”</p><p>3、使用docker push命令上传镜像到docker hub</p><p>docker push “user/repo:tag”</p><h1 id="docker安装实例"><a href="#docker安装实例" class="headerlink" title="docker安装实例"></a>docker安装实例</h1><h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:latest  #拉取 MySQL官方的最新版本的镜像 </span><br><span class="line"></span><br><span class="line">docker images #查看本地镜像</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">启动容器</span></span><br><span class="line">docker run  --name mysql01 -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456  -d mysql:latest\</span><br><span class="line">  --restart=unless-stopped\</span><br><span class="line">  --character-set-server=utf8mb4 \</span><br><span class="line">  --collation-server=utf8mb4_unicode_ci </span><br><span class="line"><span class="meta">#</span><span class="bash">–-name mysql 容器名</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-p 3306:3306 ：映射容器服务的 3306 端口到宿主机的 3306 端口，外部主机可以直接通过 宿主机ip:3306 访问到 MySQL 的服务。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">MYSQL_ROOT_PASSWORD=123456：设置 MySQL 服务 root 用户的密码。</span></span><br><span class="line"><span class="meta">#</span><span class="bash">-d 后台运行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">--restart=unless-stopped： docker启动的时候随之启动</span></span><br><span class="line"></span><br><span class="line">docker ps -a #查看是否启动成功</span><br></pre></td></tr></tbody></table></figure><h3 id="进入mysql容器内部"><a href="#进入mysql容器内部" class="headerlink" title="进入mysql容器内部"></a>进入mysql容器内部</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">进入mysql容器内部</span></span><br><span class="line">docker exec -it mysql01 bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p  #登录mysql</span><br><span class="line">ALTER USER 'root'@'localhost' IDENTIFIED BY '123456';</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">添加远程登录用户</span></span><br><span class="line">CREATE USER 'liaozesong'@'%' IDENTIFIED WITH mysql_native_password BY '123456';</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO 'liaozesong'@'%';</span><br><span class="line"></span><br><span class="line">exit  #退出mysql</span><br></pre></td></tr></tbody></table></figure><h1 id="docker-compose"><a href="#docker-compose" class="headerlink" title="docker-compose"></a>docker-compose</h1><p><a href="https://blog.csdn.net/pushiqiang/article/details/78682323">https://blog.csdn.net/pushiqiang/article/details/78682323</a></p><p>Docker Compose是一个用来定义和运行复杂应用的Docker工具。一个使用Docker容器的应用，通常由多个容器组成。使用Docker Compose不再需要使用shell脚本来启动容器。<br>Compose 通过一个配置文件来管理多个Docker容器，在配置文件中，所有的容器通过services来定义，然后使用docker-compose脚本来启动，停止和重启应用，和应用中的服务以及所有依赖服务的容器，非常适合组合使用多个容器进行开发的场景。</p><p>更新</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"> #</span><span class="bash"> 进入docker-compose所在的文件夹</span></span><br><span class="line"></span><br><span class="line">docker-compose pull    # 拉取最新的镜像</span><br><span class="line"></span><br><span class="line">docker-compose up -d   # 重新更新当前镜像</span><br></pre></td></tr></tbody></table></figure><p>卸载</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd /root/data/docker_data/dashy  # 进入docker-compose所在的文件夹</span><br><span class="line"></span><br><span class="line">docker-compose down    # 停止容器，此时不会删除映射到本地的数据</span><br><span class="line"></span><br><span class="line">rm -rf /root/data/docker_data/dashy  # 完全删除映射到本地的数据</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker容器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库-mysql</title>
      <link href="/2022/010151482.html"/>
      <url>/2022/010151482.html</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>数据模型的分类：层次模型、网状模型和关系模型</p><h2 id="为什么使用数据库"><a href="#为什么使用数据库" class="headerlink" title="为什么使用数据库"></a>为什么使用数据库</h2><p>持久化：将内存中的数据存储在硬盘上固化，一般是存储在关系型数据库中，或者也可以存储在磁盘文件，XML数据文件中</p><h2 id="数据库与数据库管理系统"><a href="#数据库与数据库管理系统" class="headerlink" title="数据库与数据库管理系统"></a>数据库与数据库管理系统</h2><ul><li><p>数据库（DATA BASE）:即存储数据的仓库，其本质是一个文件系统，它保存了一系列有组织的数据</p></li><li><p>数据库管理系统（DataBase Management System，DBMS）：指一种操作和管理数据库的大型软件，用于建立、使用和维护数据库，对数据库进行统一管理和控制。用户通过数据库管理系统访问数据库中的数据。例如MySQL数据库管理系统</p></li><li><p>SQL:(结构化查询语言)Structure Query Language：专门用来与数据库通信的语言</p></li><li><p>关系：数据库管理系统可以管理多个数据库，开发人员一般针对一个应用创建一个数据库，</p></li></ul><h2 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><ul><li>关系型数据库：将复杂的数据结构归结为简单的二元关系即二维表格。建立在关系模型的基础上</li><li>关系型数据库以行(row)和列(column)的形式存储数据，这一系列的行和列被称为表(table),一组表组成了一个库(database)</li><li>SQL就是关系型数据库的查询语言</li></ul><p> oracle   DB2    SQLServer    Mysql   SQLite</p><pre><code>- 优点：1.复杂查询：可使用SQL语句方便的在一个或多个表间进行非常复杂的数据查询。2.事务支持：可以实现安全性能很高的数据访问要求</code></pre><ul><li><p>缺点：<br>  *每次操作都要进行sql语句的解析，消耗较大</p><p>  *不能很好的满足并发需求，特别是海量数据爆发，关系型数据库读写能力会显得不足</p><p>  *关系型数据库往往每一步都要进行加锁的操作，也造成了数据库的负担</p><p>  *数据一致性高，有时也会使数据的存储不灵活</p></li></ul><h3 id="非关系型数据库（NoSql）"><a href="#非关系型数据库（NoSql）" class="headerlink" title="非关系型数据库（NoSql）"></a>非关系型数据库（NoSql）</h3><p>非关系型数据库：可看成关系型数据库的阉割版本，基于键值对存储数据，减少不常用的功能，性能非常高。NoSQL泛指非关系型数据库。大部分非关系型数据库是免费的。</p><pre><code>优点：*高并发，读写能力强    *弱化数据结构一致性，使用更加灵活    *有良好的可扩展性缺点：*通用性差，没有sql语句那样通用的语句    *操作灵活导致容易出错和混乱    *没有外键关联等复杂的操作</code></pre><p>   Nosql的使用情况：</p><pre><code>   1、对数据存储灵活性要求高，一致性要求低   2、数据处理海量并发，要求瞬间效率速度比较高   3、数据比较容易建立Nosql模型   4、网站灵活时缓冲存储，爬虫应用</code></pre><p>Nosql 的分类：</p><p>1、键值型数据库   Redis</p><p>2、文档型数据库   MongoDB</p><p>3、列存储数据库    HBase</p><p>4、图形数据库</p><h1 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h1><ul><li><a href="#sql-%E8%AF%AD%E6%B3%95">SQL 语法</a><ul><li><a href="#%E5%9F%BA%E7%A1%80">一、基础</a></li><li><a href="#%E4%BA%8C%E5%88%9B%E5%BB%BA%E8%A1%A8">二、创建表</a></li><li><a href="#%E4%B8%89%E4%BF%AE%E6%94%B9%E8%A1%A8">三、修改表</a></li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="docker下安装-Mysql"><a href="#docker下安装-Mysql" class="headerlink" title="docker下安装 Mysql"></a>docker下安装 Mysql</h3><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">创建容器并后台启动</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name         后面是这个镜像的名称</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 3306:3306   表示在这个容器中使用(第二个)端口映射到本机的端口号(第一个)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d             表示使用守护进程运行，即服务挂在后台</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v 表示挂载数据卷，格式是-v localPath:containerPath 本地目录:容器目录</span></span><br><span class="line">docker run -d mysql:latest -p 3306:3310 --name mysqlll -e MYSQL_ROOT_PASSWORD=1234</span><br><span class="line">docker run --name mysqll -p 3306:3310 -e MYSQL_ROOT_PASSWORD=Lzslov123! -d mysql:latest</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器</span></span><br><span class="line">docker ps -a</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器</span></span><br><span class="line">docker exec -it ID bash</span><br></pre></td></tr></tbody></table></figure><h3 id="window下安装"><a href="#window下安装" class="headerlink" title="window下安装"></a>window下安装</h3><p>下载<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在D:\ruanjian\mysql-8.0.28-winx64</p><h4 id="配置MySQL-的配置文件"><a href="#配置MySQL-的配置文件" class="headerlink" title="配置MySQL 的配置文件"></a>配置MySQL 的配置文件</h4><p>在安装目录下创建 my.ini 配置文件，编辑 my.ini 配置以下基本信息：</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=C:\\web\\mysql-8.0.11</span><br><span class="line"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class="line"># datadir=C:\\web\\sqldata</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=20</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></tbody></table></figure><h4 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h4><p>新建系统变量MYSQL_HOME，变量值为你的安装目录D:\ruanjian\mysql-8.0.28-winx64<br>在系统变量里，找到Path变量，点击“编辑”按钮，我们将;%MYSQL_HOME%\bin添加到path变量（一般放在最后面）</p><h3 id="Ubuntu下安装"><a href="#Ubuntu下安装" class="headerlink" title="Ubuntu下安装"></a>Ubuntu下安装</h3><p>1.安装mysql命令 ：$ sudo apt-get install -y mysql-server<br>2.查看mysql的版本命令（注意-V是大写，不然会出现如下错误）：$ mysql -V<br>3.启动mysql命令(关闭，重启等只需将start换成stop,restart等即可)：$sudo service mysql start<br>4.登录mysql命令为：$ mysql -u用户名 -p密码<br>5.连接远程数据库：$ mysql -h <host> -P <port> -u<username> -p<password></password></username></port></host></p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p>进入MySQL控制台<br>select version();</p><h3 id="启动MySQL数据库"><a href="#启动MySQL数据库" class="headerlink" title="启动MySQL数据库"></a>启动MySQL数据库</h3><p>1.初始化数据库：<br><code>mysqld --initialize --console</code></p><p>执行完成后，会输出 root 用户的初始默认密码</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: qwsctyr(2+Da</span><br></pre></td></tr></tbody></table></figure><p>qwsctyr(2+Da 就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。<br>2.安装<br>mysqld install<br>3.启动<br>net start mysql</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>MySQL命令终止符为分号 ; 在命令行行中，每个命令末尾都要带上；</p><p>在大多数系统中，SQL 语句都是不区分大小写的，但是出于严谨，而且便于区分保留字（保留字(reserved word)：指在高级语言中已经定义过的字，使用者不能再将这些字作为变量名或过程名使用。和变量名，我们把保留字大写，把变量和数据小写。</p><p><code>source xxx.sql ; #命令行执行sql文件</code></p><p>模式定义了数据如何存储、存储什么样的数据以及数据如何分解等信息，数据库和表都有模式。</p><p>主键的值不允许修改，也不允许复用（不能将已经删除的主键值赋给新数据行的主键）。</p><p>SQL（Structured Query Language)，标准 SQL 由 ANSI 标准委员会管理，从而称为 ANSI SQL。各个 DBMS 都有自己的实现，如 PL/SQL、Transact-SQL 等。</p><p>SQL 语句不区分大小写，但是数据库表名、列名和值是否区分依赖于具体的 DBMS 以及配置。</p><p>SQL 支持以下三种注释：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 注释</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable; <span class="comment">-- 注释</span></span><br><span class="line"><span class="comment">/* 注释1</span></span><br><span class="line"><span class="comment">   注释2 */</span></span><br></pre></td></tr></tbody></table></figure><p>mysql语句的四大组成成分（DDL、DML、DQL、DCL)  </p><h2 id="DML语言-Data-Manipulation-Language-数据操作语言"><a href="#DML语言-Data-Manipulation-Language-数据操作语言" class="headerlink" title="DML语言(Data Manipulation Language):数据操作语言"></a>DML语言(Data Manipulation Language):数据操作语言</h2><p>用于操作数据库对象中所包含的数据：<br> 关键字有：insert（插入），update（更改），delete（删除）</p><h2 id="DQL（Data-Query-Language）数据查询语言"><a href="#DQL（Data-Query-Language）数据查询语言" class="headerlink" title="DQL（Data Query Language）数据查询语言"></a>DQL（Data Query Language）数据查询语言</h2><p>关键字SELECT语句<br>1.基础查询<br>2.条件查询<br>3模查词(LIKE)<br>4.字段控制查询( DISTINCT)<br>5.排序( DRDER BY)<br>6.分组查词</p><h2 id="DDL-Data-Definition-Language-数据定义语言"><a href="#DDL-Data-Definition-Language-数据定义语言" class="headerlink" title="DDL(Data Definition Language):数据定义语言"></a>DDL(Data Definition Language):数据定义语言</h2><p> 关键字有：create(创建)，drop（删除） ，truncate（删除表结构，再创一张表），alter（修改）</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动 MySQL 服务</span></span><br><span class="line">sudo service mysql start</span><br><span class="line"></span><br><span class="line">mysql -uroot -p'密码'  #登录并进入mysql控制台,用quit命令退出控制台或者Ctrl+D</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 加载sql脚本文件</span></span><br><span class="line">source <span class="operator">/</span>home<span class="operator">/</span>shiyanlou<span class="operator">/</span>Desktop<span class="operator">/</span>MySQL<span class="number">-04</span><span class="number">-01.</span><span class="keyword">sql</span></span><br></pre></td></tr></tbody></table></figure><h2 id="数据库及表的操作"><a href="#数据库及表的操作" class="headerlink" title="数据库及表的操作"></a>数据库及表的操作</h2><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE xxx; <span class="comment">-- 创建数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SHOW</span> DATABASES; <span class="comment">-- 查看所有数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> DATABASE xxx; <span class="comment">-- 删除指定数据库</span></span><br><span class="line"></span><br><span class="line">USE xxx; <span class="comment">-- 使用数据库</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数据表基本操作"><a href="#数据表基本操作" class="headerlink" title="数据表基本操作"></a>数据表基本操作</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名；</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> tables;  <span class="comment">--查看当前库所有表  </span></span><br><span class="line"><span class="keyword">show</span> 表名   <span class="comment">--查看表信息  </span></span><br><span class="line"><span class="keyword">desc</span> 表名;  <span class="comment">--查看表结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> 表名字;   <span class="comment">--删除一张表</span></span><br><span class="line"><span class="comment">-- 以下都可以重命名表</span></span><br><span class="line">RENAME <span class="keyword">TABLE</span> 原名 <span class="keyword">TO</span> 新名字;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 原名 RENAME 新名;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 原名 RENAME <span class="keyword">TO</span> 新名;</span><br></pre></td></tr></tbody></table></figure><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名 (</span><br><span class="line">    表字段名：定义每个表字段</span><br><span class="line">    # <span class="type">int</span> 类型，不为空，自增</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    # <span class="type">int</span> 类型，不可为空，默认值为 <span class="number">1</span>，不为空</span><br><span class="line">    col1 <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="number">1</span>,</span><br><span class="line">    # 变长字符串类型，最长为 <span class="number">45</span> 个字符，可以为空</span><br><span class="line">    col2 <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    # 日期类型，可为空</span><br><span class="line">    col3 <span class="type">DATE</span> <span class="keyword">NULL</span>,</span><br><span class="line">    # 设置主键为 id</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (`id`));</span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 SET `修改字段`='' WHERE 条件   #改表记录 </span><br><span class="line"></span><br><span class="line">复制表</span><br><span class="line">-修改字段的数据类型  alter table &lt;表名&gt; modify &lt;字段名&gt; &lt;新数据类型&gt;</span><br><span class="line">添加字段 alter table &lt;表名&gt; add&lt;字段名&gt; &lt;新数据类型&gt;</span><br><span class="line">[约束条件]  [first|after 已存在字段名];</span><br><span class="line">删除字段 alter table &lt;表名&gt; drop&lt;字段名&gt;;</span><br></pre></td></tr></tbody></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th>数据类型</th><th>大小(字节)</th><th>用途</th><th>格式</th></tr></thead><tbody><tr><td>INT</td><td>4</td><td>整数</td><td></td></tr><tr><td>FLOAT</td><td>4</td><td>单精度浮点数</td><td></td></tr><tr><td>DOUBLE</td><td>8</td><td>双精度浮点数</td><td></td></tr><tr><td>ENUM</td><td>–</td><td>单选,比如性别</td><td>ENUM(‘a’,’b’,’c’)</td></tr><tr><td>SET</td><td>–</td><td>多选</td><td>SET(‘1’,’2’,’3’)</td></tr><tr><td>DATE</td><td>3</td><td>日期</td><td>YYYY-MM-DD</td></tr><tr><td>TIME</td><td>3</td><td>时间点或持续时间</td><td>HH:MM:SS</td></tr><tr><td>YEAR</td><td>1</td><td>年份值</td><td>YYYY</td></tr><tr><td>CHAR</td><td>0~255</td><td>定长字符串</td><td></td></tr><tr><td>VARCHAR</td><td>0~255</td><td>变长字符串</td><td></td></tr><tr><td>TEXT</td><td>0~65535</td><td>长文本数据</td><td></td></tr></tbody></table><p>整数除了 INT 外，还有 TINYINT、SMALLINT、MEDIUMINT、BIGINT。</p><p>CHAR 和 VARCHAR 的区别: CHAR 的长度是固定的，而 VARCHAR 的长度是可以变化的，比如，存储字符串 “abc”，对于 CHAR(10)，表示存储的字符将占 10 个字节(包括 7 个空字符)，而同样的 VARCHAR(12) 则只占用 4 个字节的长度，增加一个额外字节来存储字符串本身的长度，12 只是最大值，当你存储的字符小于 12 时，按实际长度存储。</p><p>ENUM 和 SET 的区别: ENUM 类型的数据的值，必须是定义时枚举的值的其中之一，即单选，而 SET 类型的值则可以多选。</p><p>CHAR,VARCHAR,TEXT,DATE,TIME,ENUM 等类型的数据也需要单引号修饰，而 INT,FLOAT,DOUBLE 等则不需要。</p><h3 id="SQL-的约束"><a href="#SQL-的约束" class="headerlink" title="SQL 的约束"></a>SQL 的约束</h3><p>约束是一种限制，它通过对表的行或列的数据做出限制，来确保表的数据的完整性、唯一性。</p><p>比如，规定一个用户的用户名不能为空值且没有重复的记录，这就是一种约束规则。<br>| 约束类型： | 主键        | 默认值   | 唯一   | 外键        | 非空       |<br>|——-    |————-|———|——–|————-|———-|<br>| 关键字：  | PRIMARY KEY | DEFAULT | UNIQUE | FOREIGN KEY | NOT NULL |</p><h4 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h4><p>假如我们要存储一个学生的信息，信息包含姓名，身高，性别，年龄。</p><p>不幸的是有两个女孩都叫小梦，且她们的身高和年龄相同，数据库将无法区分这两个实体，这时就需要用到主键了。</p><p>主键（PRIMARY KEY）作为数据表中一行数据的唯一标识符，在一张表中通过主键就能准确定位到某一行数据，因此主键十分重要，它不能有重复记录且不能为空。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">PRIMARY</span>,</span><br><span class="line">     <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">10</span>) ,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> 主键名(自定义) <span class="keyword">PRIMARY</span> KEY(id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 复合主键,主键不仅可以是表中的一列，也可以由表中的两列或多列来共同标识</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</span><br><span class="line">    id <span class="type">INT</span>(<span class="number">10</span>) ,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">45</span>) <span class="keyword">NULL</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> 主键名(自定义) <span class="keyword">PRIMARY</span> KEY(id,name)</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="默认值约束"><a href="#默认值约束" class="headerlink" title="默认值约束"></a>默认值约束</h4><p>默认值约束 (DEFAULT) 规定，当有 DEFAULT 约束的列，插入数据为空时，将使用默认值。</p><p>默认值常用于一些可有可无的字段，比如用户的个性签名，如果用户没有设置，系统给他应该设定一个默认的文本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> t(</span><br><span class="line">people_num <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line">);</span><br></pre></td></tr></tbody></table></figure><h4 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h4><p>唯一约束 (UNIQUE) 比较简单，它规定一张表中指定的一列的值必须不能有重复值，即这一列每个值都是唯一的。</p><h4 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h4><p>外键 (FOREIGN KEY) 既能确保数据完整性，也能表现表之间的关系。</p><p>比如，现在有用户表和文章表，给文章表中添加一个指向用户 id 的外键，表示这篇文章所属的用户 id，外键将确保这个外键指向的记录是存在的，如果你尝试删除一个用户，而这个用户还有文章存在于数据库中，那么操作将无法完成并报错。因为你删除了该用户过后，他发布的文章都没有所属用户了，而这样的情况是不被允许的。同理，你在创建一篇文章的时候也不能为它指定一个不存在的用户 id。</p><p>一个表可以有多个外键，每个外键必须 REFERENCES (参考) 另一个表的主键，被外键约束的列，取值必须在它参考的列中有对应值。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">age <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="number">10</span>,</span><br><span class="line"><span class="keyword">CONSTRAINT</span> 外键名(自定义) <span class="keyword">FOREIGN</span> KEY (age) <span class="keyword">REFERENCES</span> department(name)</span><br><span class="line"><span class="comment">-- age字段为外键，参考列为department表的name列</span></span><br></pre></td></tr></tbody></table></figure><h4 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h4><p>非空约束 (NOT NULL),听名字就能理解，被非空约束的列，在插入值时必须非</p><h3 id="表结构修改"><a href="#表结构修改" class="headerlink" title="表结构修改"></a>表结构修改</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 添加列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> 列名字 数据类型 约束;</span><br><span class="line">或：</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 <span class="keyword">ADD</span> 列名字 数据类型 约束;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> mytable <span class="keyword">ADD</span> col <span class="type">CHAR</span>(<span class="number">20</span>);</span><br><span class="line"><span class="comment">-- 新增加的列，被默认放置表的最右边。如果想插入在指定位置，则在语句的最后使用 AFTER 关键词(“AFTER 列 1” 表示新增的列被放置在 “列 1” 的后面)。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">--修改一列，修改数据类型可能会导致数据丢失</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 CHANGE 原列名 新列名 数据类型 约束;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除一列</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> 列名字;</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 <span class="keyword">DROP</span> 列名字;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> mytable;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> stu,student;  <span class="comment">--删除数据表 </span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="表内容修改"><a href="#表内容修改" class="headerlink" title="表内容修改"></a>表内容修改</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--  修改表中某个值</span></span><br><span class="line">UPDATE 表名字 <span class="keyword">SET</span> 列<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>,列<span class="number">2</span><span class="operator">=</span>值<span class="number">2</span> <span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除一行记录</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名字 <span class="keyword">WHERE</span> 条件;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> mytable; <span class="comment">--可以清空表，也就是删除所有行。</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="插入表内容"><a href="#插入表内容" class="headerlink" title="插入表内容"></a>插入表内容</h3><p>普通插入</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee <span class="keyword">VALUES</span>(<span class="number">02</span>,<span class="string">'Jack'</span>,<span class="number">119119119</span>);  #按字段顺序插入</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee(id,name,phone) <span class="keyword">VALUES</span>(<span class="number">01</span>,<span class="string">'Tom'</span>,<span class="number">110110110</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee(id,name) <span class="keyword">VALUES</span>(<span class="number">03</span>,<span class="string">'Rose'</span>);</span><br></pre></td></tr></tbody></table></figure><p>插入检索出来的数据</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable1(col1, col2)</span><br><span class="line"><span class="keyword">SELECT</span> col1, col2</span><br><span class="line"><span class="keyword">FROM</span> mytable2;</span><br></pre></td></tr></tbody></table></figure><p>将一个表的内容插入到一个新表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> newtable <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure><h2 id="select查询"><a href="#select查询" class="headerlink" title="select查询"></a>select查询</h2><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名字 ;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> 要查询的列名 <span class="keyword">FROM</span> 表名字 <span class="keyword">WHERE</span> 限制条件;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="WHERE-限制条件"><a href="#WHERE-限制条件" class="headerlink" title="WHERE 限制条件"></a>WHERE 限制条件</h3><p>WHERE 限制条件，用于达到更加精确的查询。WHERE 限制条件可以有数学符号 (=,&lt;,&gt;,&gt;=,&lt;=)</p><p>WHERE 后面可以有不止一条限制，而根据条件之间的逻辑关系，可以用 [条件一 OR 条件二] 和 [条件一 AND 条件二] 连接</p><p>关键词 IN 和 NOT IN 的作用和它们的名字一样明显，用于筛选“在”或“不在”某个范围内的结果</p><p>AS 关键词可以给值重命名</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,age <span class="keyword">AS</span> new_age <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> age<span class="operator">&lt;</span><span class="number">25</span> <span class="keyword">OR</span> age<span class="operator">&gt;</span><span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> name,age,phone,in_dpt <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> in_dpt <span class="keyword">IN</span> (<span class="string">'dpt3'</span>,<span class="string">'dpt4'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="DISTINCT"><a href="#DISTINCT" class="headerlink" title="DISTINCT"></a>DISTINCT</h3><p>相同值只会出现一次。它作用于所有列，也就是说所有列的值都相同才算相同。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> col1, col2 <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure><h3 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h3><p>限制返回的行数。可以有两个参数，第一个参数为起始行，从 0 开始；第二个参数为返回的总行数。</p><p>返回前 5 行：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable LIMIT <span class="number">0</span>, <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><p>关键字 LIKE 可用于实现模糊查询，常见于搜索功能中。</p><p>和 LIKE 联用的通常还有通配符，代表未知字符。SQL 中的通配符是 <em>和 % 。其中</em> 代表一个未指定字符，% 代表不定个未指定字符</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 比如只记名字的首字母，又不知道名字长度，则用 % 通配符代替不定个字符：</span></span><br><span class="line"><span class="keyword">SELECT</span> name,age,phone <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> name <span class="keyword">LIKE</span> <span class="string">'J%'</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>为了使查询结果看起来更顺眼，我们可能需要对结果按某一列来排序，这就要用到 ORDER BY 排序关键词。默认情况下，ORDER BY 的结果是升序排列，而使用关键词 ASC 和 DESC 可指定升序或降序排序。 比如，我们按 salary 降序排列，SQL 语句为：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name,age,salary,phone <span class="keyword">FROM</span> employee <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>ASC</strong>  ：升序（默认）</li><li><strong>DESC</strong>  ：降序</li></ul><p>可以按多个列进行排序，并且为每个列指定不同的排序方式：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col1 <span class="keyword">DESC</span>, col2 <span class="keyword">ASC</span>;</span><br></pre></td></tr></tbody></table></figure><h3 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h3><p>不进行过滤的数据非常大，导致通过网络传输了多余的数据，从而浪费了网络带宽。因此尽量使用 SQL 语句来过滤不必要的数据，而不是传输所有的数据到客户端中然后由客户端进行过滤。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">IS</span> <span class="keyword">NULL</span>;</span><br></pre></td></tr></tbody></table></figure><p>下表显示了 WHERE 子句可用的操作符</p><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">=</td><td align="center">等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&lt;&gt; !=</td><td align="center">不等于</td></tr><tr><td align="center">&lt;= !&gt;</td><td align="center">小于等于</td></tr><tr><td align="center">&gt;= !&lt;</td><td align="center">大于等于</td></tr><tr><td align="center">BETWEEN</td><td align="center">在两个值之间</td></tr><tr><td align="center">IS NULL</td><td align="center">为 NULL 值</td></tr></tbody></table><p>应该注意到，NULL 与 0、空字符串都不同。</p><p><strong>AND 和 OR</strong>   用于连接多个过滤条件。优先处理 AND，当一个过滤表达式涉及到多个 AND 和 OR 时，可以使用 () 来决定优先级，使得优先级关系更清晰。</p><p><strong>IN</strong>   操作符用于匹配一组值，其后也可以接一个 SELECT 子句，从而匹配子查询得到的一组值。</p><p><strong>NOT</strong>   操作符用于否定一个条件。</p><h3 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h3><p>通配符也是用在过滤语句中，但它只能用于文本字段。</p><ul><li><p><strong>%</strong>   匹配 &gt;=0 个任意字符；</p></li><li><p><strong>_</strong>   匹配 ==1 个任意字符；</p></li><li><p><strong>[ ]</strong>   可以匹配集合内的字符，例如 [ab] 将匹配字符 a 或者 b。用脱字符 ^ 可以对其进行否定，也就是不匹配集合内的字符。</p></li></ul><p>使用 Like 来进行通配符匹配。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="keyword">LIKE</span> <span class="string">'[^AB]%'</span>; <span class="comment">-- 不以 A 和 B 开头的任意文本</span></span><br></pre></td></tr></tbody></table></figure><p>不要滥用通配符，通配符位于开头处匹配会非常慢。</p><h3 id="计算字段"><a href="#计算字段" class="headerlink" title="计算字段"></a>计算字段</h3><p>在数据库服务器上完成数据的转换和格式化的工作往往比客户端上快得多，并且转换和格式化后的数据量更少的话可以减少网络通信量。</p><p>计算字段通常需要使用   <strong>AS</strong>   来取别名，否则输出的时候字段名为计算表达式。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col1 <span class="operator">*</span> col2 <span class="keyword">AS</span> alias</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure><p><strong>CONCAT()</strong>   用于连接两个字段。许多数据库会使用空格把一个值填充为列宽，因此连接的结果会出现一些不必要的空格，使用 <strong>TRIM()</strong> 可以去除首尾空格。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> CONCAT(<span class="built_in">TRIM</span>(col1), <span class="string">'('</span>, <span class="built_in">TRIM</span>(col2), <span class="string">')'</span>) <span class="keyword">AS</span> concat_col <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>各个 DBMS 的函数都是不相同的，因此不可移植，以下主要是 MySQL 的函数。</p><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><table><thead><tr><th>函数名：</th><th>COUNT</th><th>SUM</th><th>AVG</th><th>MAX</th><th>MIN</th></tr></thead><tbody><tr><td>作用：</td><td>计数</td><td>求和</td><td>求平均值</td><td>最大值</td><td>最小值</td></tr></tbody></table><p>其中 COUNT 函数可用于任何数据类型(因为它只是计数)，而 SUM 、AVG 函数都只能对数字类数据类型做计算，MAX 和 MIN 可用于数值、字符串或是日期时间数据类型。</p><p><code>SELECT MAX(salary) AS max_salary,MIN(salary) FROM employee;</code></p><p>AVG() 会忽略 NULL 行。</p><p>使用 DISTINCT 可以汇总不同的值。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">AVG</span>(<span class="keyword">DISTINCT</span> col1) <span class="keyword">AS</span> avg_col</span><br><span class="line"><span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></tbody></table></figure><h4 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h4><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">LEFT()</td><td align="center">左边的字符</td></tr><tr><td align="center">RIGHT()</td><td align="center">右边的字符</td></tr><tr><td align="center">LOWER()</td><td align="center">转换为小写字符</td></tr><tr><td align="center">UPPER()</td><td align="center">转换为大写字符</td></tr><tr><td align="center">LTRIM()</td><td align="center">去除左边的空格</td></tr><tr><td align="center">RTRIM()</td><td align="center">去除右边的空格</td></tr><tr><td align="center">LENGTH()</td><td align="center">长度</td></tr><tr><td align="center">SOUNDEX()</td><td align="center">转换为语音值</td></tr></tbody></table><p>其中，  <strong>SOUNDEX()</strong>   可以将一个字符串转换为描述其语音表示的字母数字模式。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> SOUNDEX(col1) <span class="operator">=</span> SOUNDEX(<span class="string">'apple'</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="日期和时间处理"><a href="#日期和时间处理" class="headerlink" title="日期和时间处理"></a>日期和时间处理</h4><ul><li>日期格式：YYYY-MM-DD</li><li>时间格式：HH:&lt;zero-width space&gt;MM:SS</li></ul><table><thead><tr><th align="center">函 数</th><th align="center">说 明</th></tr></thead><tbody><tr><td align="center">ADDDATE()</td><td align="center">增加一个日期（天、周等）</td></tr><tr><td align="center">ADDTIME()</td><td align="center">增加一个时间（时、分等）</td></tr><tr><td align="center">CURDATE()</td><td align="center">返回当前日期</td></tr><tr><td align="center">CURTIME()</td><td align="center">返回当前时间</td></tr><tr><td align="center">DATE()</td><td align="center">返回日期时间的日期部分</td></tr><tr><td align="center">DATEDIFF()</td><td align="center">计算两个日期之差</td></tr><tr><td align="center">DATE_ADD()</td><td align="center">高度灵活的日期运算函数</td></tr><tr><td align="center">DATE_FORMAT()</td><td align="center">返回一个格式化的日期或时间串</td></tr><tr><td align="center">DAY()</td><td align="center">返回一个日期的天数部分</td></tr><tr><td align="center">DAYOFWEEK()</td><td align="center">对于一个日期，返回对应的星期几</td></tr><tr><td align="center">HOUR()</td><td align="center">返回一个时间的小时部分</td></tr><tr><td align="center">MINUTE()</td><td align="center">返回一个时间的分钟部分</td></tr><tr><td align="center">MONTH()</td><td align="center">返回一个日期的月份部分</td></tr><tr><td align="center">NOW()</td><td align="center">返回当前日期和时间</td></tr><tr><td align="center">SECOND()</td><td align="center">返回一个时间的秒部分</td></tr><tr><td align="center">TIME()</td><td align="center">返回一个日期时间的时间部分</td></tr><tr><td align="center">YEAR()</td><td align="center">返回一个日期的年份部分</td></tr></tbody></table><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">SELECT</span> NOW();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-4-14 20:25:11</span><br></pre></td></tr></tbody></table></figure><h4 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h4><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">SIN()</td><td align="center">正弦</td></tr><tr><td align="center">COS()</td><td align="center">余弦</td></tr><tr><td align="center">TAN()</td><td align="center">正切</td></tr><tr><td align="center">ABS()</td><td align="center">绝对值</td></tr><tr><td align="center">SQRT()</td><td align="center">平方根</td></tr><tr><td align="center">MOD()</td><td align="center">余数</td></tr><tr><td align="center">EXP()</td><td align="center">指数</td></tr><tr><td align="center">PI()</td><td align="center">圆周率</td></tr><tr><td align="center">RAND()</td><td align="center">随机数</td></tr></tbody></table><h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>子查询就是嵌套查询，一个select语句中包含另一个完整的select语句。<br>子查询中只能返回一个字段的数据。</p><p>可以将子查询的结果作为 WHRER 语句的过滤条件：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mytable1</span><br><span class="line"><span class="keyword">WHERE</span> col1 <span class="keyword">IN</span> (<span class="keyword">SELECT</span> col2 <span class="keyword">FROM</span> mytable2);</span><br></pre></td></tr></tbody></table></figure><p>下面的语句可以检索出客户的订单数量，子查询语句会对第一个查询检索出的每个客户执行一次：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> cust_name, (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line"><span class="keyword">FROM</span> Orders</span><br><span class="line"><span class="keyword">WHERE</span> Orders.cust_id <span class="operator">=</span> Customers.cust_id)</span><br><span class="line"><span class="keyword">AS</span> orders_num</span><br><span class="line"><span class="keyword">FROM</span> Customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> cust_name;</span><br></pre></td></tr></tbody></table></figure><p>有时必须处理多个表才能获得所需的信息。例如：想要知道名为 “Tom” 的员工所在部门做了几个工程。员工信息储存在 employee 表中，但工程信息储存在 project 表中。</p><p>对于这样的情况，我们可以用子查询：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> of_dpt,<span class="built_in">COUNT</span>(proj_name) <span class="keyword">AS</span> count_project <span class="keyword">FROM</span> project <span class="keyword">GROUP</span> <span class="keyword">BY</span> of_dpt</span><br><span class="line"><span class="keyword">HAVING</span> of_dpt <span class="keyword">IN</span></span><br><span class="line">(<span class="keyword">SELECT</span> in_dpt <span class="keyword">FROM</span> employee <span class="keyword">WHERE</span> name<span class="operator">=</span><span class="string">'Tom'</span>);</span><br></pre></td></tr></tbody></table></figure><p>HAVING 关键字可以的作用和 WHERE 是一样的，都是说明接下来要进行条件筛选操作。区别在于 HAVING 用于对分组后的数据进行筛选</p><p>1.子查询出现的位置：</p><p>where后，作为条为被查询的一条件的一部分；<br>from后，作表；<br>2.当子查询出现在where后作为条件时，还可以使用如下关键字：</p><p>any<br>all<br>3.子查询结果集的形式：</p><p>单行单列（用于条件）<br>单行多列（用于条件）<br>多行单列（用于条件）<br>多行多列（用于表）</p><p>1.带比较运算符的子查询<br>2.带 EXISTS关键字的子查询<br>3.带ANY关键字的子查询<br>4.带AL关键字的子查询</p><h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>在处理多个表时，子查询只有在结果来自一个表时才有用。但如果需要显示两个表或多个表中的数据，这时就必须使用连接 (join) 操作。 连接的基本思想是把两个或多个表当作一个新的表来操作，如下：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用join</span></span><br><span class="line"><span class="keyword">SELECT</span> id,name,people_num</span><br><span class="line"><span class="keyword">FROM</span> employee,department</span><br><span class="line"><span class="keyword">WHERE</span> employee.in_dpt <span class="operator">=</span> department.dpt_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者使用 JOIN ON 语法</span></span><br><span class="line"><span class="keyword">SELECT</span> id,name,people_num</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">JOIN</span> department</span><br><span class="line"><span class="keyword">ON</span> employee.in_dpt <span class="operator">=</span> department.dpt_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> id;</span><br></pre></td></tr></tbody></table></figure><p>连接用于连接多个表，使用 JOIN 关键字，并且条件语句使用 ON 而不是 WHERE。</p><p>连接可以替换子查询，并且比子查询的效率一般会更快。</p><p>可以用 AS 给列名、计算字段和表名取别名，给表名取别名是为了简化 SQL 语句以及连接相同表。</p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>内连接又称等值连接，使用 INNER JOIN 关键字。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">INNER</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">ON</span> A.key <span class="operator">=</span> B.key;</span><br></pre></td></tr></tbody></table></figure><p>可以不明确使用 INNER JOIN，而使用普通查询并在 WHERE 中将两个表中要连接的列用等值方法连接起来。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A, tableb <span class="keyword">AS</span> B</span><br><span class="line"><span class="keyword">WHERE</span> A.key <span class="operator">=</span> B.key;</span><br></pre></td></tr></tbody></table></figure><h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>自连接可以看成内连接的一种，只是连接的表是自身而已。</p><p>一张员工表，包含员工姓名和员工所属部门，要找出与 Jim 处在同一部门的所有员工姓名。</p><p>子查询版本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> name</span><br><span class="line"><span class="keyword">FROM</span> employee</span><br><span class="line"><span class="keyword">WHERE</span> department <span class="operator">=</span> (</span><br><span class="line">      <span class="keyword">SELECT</span> department</span><br><span class="line">      <span class="keyword">FROM</span> employee</span><br><span class="line">      <span class="keyword">WHERE</span> name <span class="operator">=</span> "Jim");</span><br></pre></td></tr></tbody></table></figure><p>自连接版本</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e1.name</span><br><span class="line"><span class="keyword">FROM</span> employee <span class="keyword">AS</span> e1 <span class="keyword">INNER</span> <span class="keyword">JOIN</span> employee <span class="keyword">AS</span> e2</span><br><span class="line"><span class="keyword">ON</span> e1.department <span class="operator">=</span> e2.department</span><br><span class="line">      <span class="keyword">AND</span> e2.name <span class="operator">=</span> "Jim";</span><br></pre></td></tr></tbody></table></figure><h4 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h4><p>自然连接是把同名列通过等值测试连接起来的，同名列可以有多个。</p><p>内连接和自然连接的区别：内连接提供连接的列，而自然连接自动连接所有同名列。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> A.value, B.value</span><br><span class="line"><span class="keyword">FROM</span> tablea <span class="keyword">AS</span> A <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> tableb <span class="keyword">AS</span> B;</span><br></pre></td></tr></tbody></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>外连接保留了没有关联的那些行。分为左外连接，右外连接以及全外连接，左外连接就是保留左表没有关联的行。</p><p>检索所有顾客的订单信息，包括还没有订单信息的顾客。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Customers.cust_id, Customer.cust_name, Orders.order_id</span><br><span class="line"><span class="keyword">FROM</span> Customers <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> Orders</span><br><span class="line"><span class="keyword">ON</span> Customers.cust_id <span class="operator">=</span> Orders.cust_id;</span><br></pre></td></tr></tbody></table></figure><p>customers 表：</p><table><thead><tr><th align="center">cust_id</th><th align="center">cust_name</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td></tr><tr><td align="center">2</td><td align="center">b</td></tr><tr><td align="center">3</td><td align="center">c</td></tr></tbody></table><p>orders 表：</p><table><thead><tr><th align="center">order_id</th><th align="center">cust_id</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">1</td></tr><tr><td align="center">2</td><td align="center">1</td></tr><tr><td align="center">3</td><td align="center">3</td></tr><tr><td align="center">4</td><td align="center">3</td></tr></tbody></table><p>结果：</p><table><thead><tr><th align="center">cust_id</th><th align="center">cust_name</th><th align="center">order_id</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">a</td><td align="center">1</td></tr><tr><td align="center">1</td><td align="center">a</td><td align="center">2</td></tr><tr><td align="center">3</td><td align="center">c</td><td align="center">3</td></tr><tr><td align="center">3</td><td align="center">c</td><td align="center">4</td></tr><tr><td align="center">2</td><td align="center">b</td><td align="center">Null</td></tr></tbody></table><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>把具有相同的数据值的行放在同一组中。</p><p>可以对同一分组数据使用汇总函数进行处理，例如求分组数据的平均值等。</p><p>指定的分组字段除了能按该字段进行分组，也会自动按该字段进行排序。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col;</span><br></pre></td></tr></tbody></table></figure><p>GROUP BY 自动按分组字段进行排序，ORDER BY 也可以按汇总字段来进行排序。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> num;</span><br></pre></td></tr></tbody></table></figure><p>WHERE 过滤行，HAVING 过滤分组，行过滤应当先于分组过滤。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col, <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> num</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">&gt;</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> col</span><br><span class="line"><span class="keyword">HAVING</span> num <span class="operator">&gt;=</span> <span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><p>分组规定：</p><ul><li>GROUP BY 子句出现在 WHERE 子句之后，ORDER BY 子句之前；</li><li>除了汇总字段外，SELECT 语句中的每一字段都必须在 GROUP BY 子句中给出；</li><li>NULL 的行会单独分为一组；</li><li>大多数 SQL 实现不支持 GROUP BY 列具有可变长度的数据类型。</li></ul><h2 id="多表连接查询"><a href="#多表连接查询" class="headerlink" title="多表连接查询"></a>多表连接查询</h2><p> 内连接查询<br>  select 表1查询的字段，表2查询的字段 from 表1 inner join 表2 on 两表都有的字段；<br> 3外连接查询(只适用于两表)<br>  左（外）连接查询<br>   select 表1查询的字段，表2查询的字段 from 表1 left join 表2 on 条件；<br>   左表的记录将会全部表示出来，而右表只会显示符合搜索条件的记录<br>  右（外）连接查询</p><p>22.SQL语句的执行顺序。（PPT数据查询第79页）</p><h2 id="组合查询"><a href="#组合查询" class="headerlink" title="组合查询"></a>组合查询</h2><p>使用   <strong>UNION</strong>   来组合两个查询，如果第一个查询返回 M 行，第二个查询返回 N 行，那么组合查询的结果一般为 M+N 行。</p><p>每个查询必须包含相同的列、表达式和聚集函数。</p><p>默认会去除相同行，如果需要保留相同行，使用 UNION ALL。</p><p>只能包含一个 ORDER BY 子句，并且必须位于语句的最后。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col <span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h2><p>视图是从一个或多个表中导出来的表，是一种虚拟存在的表。它就像一个窗口，通过这个窗口可以看到系统专门提供的数据，这样，用户可以不用看到整个数据库中的数据，而只关心对自己有用的数据。</p><p>MySQL 视图（View）是由数据库中的一个表或多个表导出的虚拟表，同真实表一样，视图也由列和行构成，但视图并不实际存在于数据库中。行和列的数据来自于定义视图的查询中所使用的表，并且还是在使用视图时动态生成的。</p><p>数据库中只存放了视图的定义，并没有存放视图中的数据，这些数据都存放在定义视图查询所引用的真实表中。使用视图查询数据时，数据库会从真实表中取出对应的数据。因此，视图中的数据是依赖于真实表中的数据的。一旦真实表中的数据发生改变，显示在视图中的数据也会发生改变。</p><p>视图可以从原有的表上选取对用户有用的信息，那些对用户没用，或者用户没有权限了解的信息，都可以直接屏蔽掉，作用类似于筛选。这样做既使应用简单化，也保证了系统的安全。</p><p>也就不能对其进行索引操作。</p><p>对视图的操作和对普通表的操作一样。</p><p>视图具有如下好处：</p><ul><li>简化复杂的 SQL 操作，比如复杂的连接；</li><li>只使用实际表的一部分数据；</li><li>通过只给用户访问视图的权限，保证数据的安全性；</li><li>更改数据格式和表示。</li></ul><p>注意理解视图是虚拟的表：</p><ul><li>数据库中只存放了视图的定义，而没有存放视图中的数据，这些数据存放在原来的表中；</li><li>使用视图查询数据时，数据库系统会从原来的表中取出对应的数据；</li><li>视图中的数据依赖于原来表中的数据，一旦表中数据发生改变，显示在视图中的数据也会发生改变；</li><li>在使用视图的时候，可以把它当作一张表。</li></ul><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图格式</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名(列a,列b,列c) <span class="keyword">AS</span> <span class="keyword">SELECT</span> 列<span class="number">1</span>,列<span class="number">2</span>,列<span class="number">3</span> <span class="keyword">FROM</span> 表名字;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> 视图名 <span class="keyword">as</span> <span class="keyword">select</span> [查询语句]</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myview <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Concat(col1, col2) <span class="keyword">AS</span> concat_col, col3<span class="operator">*</span>col4 <span class="keyword">AS</span> compute_col</span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">WHERE</span> col5 <span class="operator">=</span> val;</span><br></pre></td></tr></tbody></table></figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><p>索引并非越多越好<br>避免对经常更新的表建立过多的索引<br>数据量小的表最好不要使用索引<br>在不同值少的列上不要建立索引<br>为经常需要排序、分组和联接操作的字段建立索引</p><p>索引是一种与表有关的结构，它的作用相当于书的目录，可以根据目录中的页码快速找到所需的内容。</p><p>当表中有大量记录时，若要对表进行查询，没有索引的情况是全表搜索：将所有记录一一取出，和查询条件进行对比，然后返回满足条件的记录。这样做会执行大量磁盘 I/O 操作，并花费大量数据库系统时间。</p><p>而如果在表中已建立索引，在索引中找到符合查询条件的索引值，通过索引值就可以快速找到表中的数据，可以大大加快查询速度。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立索引</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名字 <span class="keyword">ADD</span> INDEX 索引名 (列名);</span><br><span class="line"><span class="keyword">CREATE</span> INDEX 索引名 <span class="keyword">ON</span> 表名字 (列名);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">SHOW</span> INDEX <span class="keyword">FROM</span> 表名字; <span class="comment">--查看刚才新建的索引：</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>在使用 SELECT 语句查询的时候，语句中 WHERE 里面的条件，会自动判断有没有可用的索引。</p><p>比如有一个用户表，它拥有用户名(username)和个人签名(note)两个字段。其中用户名具有唯一性，并且格式具有较强的限制，我们给用户名加上一个唯一索引；个性签名格式多变，而且允许不同用户使用重复的签名，不加任何索引。</p><p>这时候，如果你要查找某一用户，使用语句 select <em>from user where username=? 和 select</em> from user where note=? 性能是有很大差距的，对建立了索引的用户名进行条件查询会比没有索引的个性签名条件查询快几倍，在数据量大的时候，这个差距只会更大。</p><p>一些字段不适合创建索引，比如性别，这个字段存在大量的重复记录无法享受索引带来的速度加成，甚至会拖累数据库，导致数据冗余和额外的 CPU 开销。</p><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程可以看成是对一系列 SQL 操作的批处理。</p><p>使用存储过程的好处：</p><ul><li>代码封装，保证了一定的安全性；</li><li>代码复用；</li><li>由于是预先编译，因此具有很高的性能。</li></ul><p>命令行中创建存储过程需要自定义分隔符，因为命令行是以 ; 为结束符，而存储过程中也包含了分号，因此会错误把这部分分号当成是结束符，造成语法错误。</p><p>包含 in、out 和 inout 三种参数。</p><p>给变量赋值都需要用 select into 语句。</p><p>每次只能给一个变量赋值，不支持集合的操作。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure( <span class="keyword">out</span> ret <span class="type">int</span> )</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> y <span class="type">int</span>;</span><br><span class="line">        <span class="keyword">select</span> <span class="built_in">sum</span>(col1)</span><br><span class="line">        <span class="keyword">from</span> mytable</span><br><span class="line">        <span class="keyword">into</span> y;</span><br><span class="line">        <span class="keyword">select</span> y<span class="operator">*</span>y <span class="keyword">into</span> ret;</span><br><span class="line">    <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"></span><br><span class="line">delimiter ;</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> myprocedure(<span class="variable">@ret</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="variable">@ret</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h2><p>在存储过程中使用游标可以对一个结果集进行移动遍历。</p><p>游标主要用于交互式应用，其中用户需要对数据集中的任意行进行浏览和修改。</p><p>使用游标的四个步骤：</p><ol><li>声明游标，这个过程没有实际检索出数据；</li><li>打开游标；</li><li>取出数据；</li><li>关闭游标；</li></ol><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">delimiter <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> myprocedure(<span class="keyword">out</span> ret <span class="type">int</span>)</span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">declare</span> done <span class="type">boolean</span> <span class="keyword">default</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">declare</span> mycursor <span class="keyword">cursor</span> <span class="keyword">for</span></span><br><span class="line">        <span class="keyword">select</span> col1 <span class="keyword">from</span> mytable;</span><br><span class="line">        # 定义了一个 continue handler，当 <span class="keyword">sqlstate</span> <span class="string">'02000'</span> 这个条件出现时，会执行 <span class="keyword">set</span> done <span class="operator">=</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">declare</span> continue handler <span class="keyword">for</span> <span class="keyword">sqlstate</span> <span class="string">'02000'</span> <span class="keyword">set</span> done <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">open</span> mycursor;</span><br><span class="line"></span><br><span class="line">        repeat</span><br><span class="line">            <span class="keyword">fetch</span> mycursor <span class="keyword">into</span> ret;</span><br><span class="line">            <span class="keyword">select</span> ret;</span><br><span class="line">        until done <span class="keyword">end</span> repeat;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">close</span> mycursor;</span><br><span class="line">    <span class="keyword">end</span> <span class="operator">/</span><span class="operator">/</span></span><br><span class="line"> delimiter ;</span><br></pre></td></tr></tbody></table></figure><h2 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h2><p>触发器会在某个表执行以下语句时而自动执行：DELETE、INSERT、UPDATE。</p><p>触发器必须指定在语句执行之前还是之后自动执行，之前执行使用 BEFORE 关键字，之后执行使用 AFTER 关键字。BEFORE 用于数据验证和净化，AFTER 用于审计跟踪，将修改记录到另外一张表中。</p><p>INSERT 触发器包含一个名为 NEW 的虚拟表。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TRIGGER</span> mytrigger AFTER <span class="keyword">INSERT</span> <span class="keyword">ON</span> mytable</span><br><span class="line"><span class="keyword">FOR</span> <span class="keyword">EACH</span> <span class="type">ROW</span> <span class="keyword">SELECT</span> NEW.col <span class="keyword">into</span> <span class="variable">@result</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@result</span>; <span class="comment">-- 获取结果</span></span><br></pre></td></tr></tbody></table></figure><p>DELETE 触发器包含一个名为 OLD 的虚拟表，并且是只读的。</p><p>UPDATE 触发器包含一个名为 NEW 和一个名为 OLD 的虚拟表，其中 NEW 是可以被修改的，而 OLD 是只读的。</p><p>MySQL 不允许在触发器中使用 CALL 语句，也就是不能调用存储过程。</p><h2 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h2><p>基本术语：</p><ul><li>事务（transaction）指一组 SQL 语句；</li><li>回退（rollback）指撤销指定 SQL 语句的过程；</li><li>提交（commit）指将未存储的 SQL 语句结果写入数据库表；</li><li>保留点（savepoint）指事务处理中设置的临时占位符（placeholder），你可以对它发布回退（与回退整个事务处理不同）。</li></ul><p>不能回退 SELECT 语句，回退 SELECT 语句也没意义；也不能回退 CREATE 和 DROP 语句。</p><p>MySQL 的事务提交默认是隐式提交，每执行一条语句就把这条语句当成一个事务然后进行提交。当出现 START TRANSACTION 语句时，会关闭隐式提交；当 COMMIT 或 ROLLBACK 语句执行后，事务会自动关闭，重新恢复隐式提交。</p><p>设置 autocommit 为 0 可以取消自动提交；autocommit 标记是针对每个连接而不是针对服务器的。</p><p>如果没有设置保留点，ROLLBACK 会回退到 START TRANSACTION 语句处；如果设置了保留点，并且在 ROLLBACK 中指定该保留点，则会回退到该保留点。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">START</span> TRANSACTION</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ...</span><br><span class="line"><span class="keyword">SAVEPOINT</span> delete1</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ...</span><br><span class="line"><span class="keyword">ROLLBACK</span> <span class="keyword">TO</span> delete1</span><br><span class="line"><span class="operator">/</span><span class="operator">/</span> ...</span><br><span class="line"><span class="keyword">COMMIT</span></span><br></pre></td></tr></tbody></table></figure><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>基本术语：</p><ul><li>字符集为字母和符号的集合；</li><li>编码为某个字符集成员的内部表示；</li><li>校对字符指定如何比较，主要用于排序和分组。</li></ul><p>除了给表指定字符集和校对外，也可以给列指定：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable</span><br><span class="line">(col <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="type">CHARACTER</span> <span class="keyword">SET</span> latin <span class="keyword">COLLATE</span> latin1_general_ci )</span><br><span class="line"><span class="keyword">DEFAULT</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> hebrew <span class="keyword">COLLATE</span> hebrew_general_ci;</span><br></pre></td></tr></tbody></table></figure><p>可以在排序、分组时指定校对：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> mytable</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> col <span class="keyword">COLLATE</span> latin1_general_ci;</span><br></pre></td></tr></tbody></table></figure><h2 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">以下命令均需先以root身份登录mysql：</span></span><br><span class="line">mysql -uroot -p'密码'</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">USE mysql;  #MySQL 的账户信息保存在 mysql 这个数据库中。</span><br><span class="line">#查看MySql当前所有的用户：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">user</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>,host <span class="keyword">from</span> mysql.user;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建账户,新创建的账户没有任何权限。</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> 用户名 identified <span class="keyword">by</span> <span class="string">'密码'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- **修改账户名**  </span></span><br><span class="line">RENAME <span class="keyword">USER</span> myuser <span class="keyword">TO</span> newuser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- **删除账户**  </span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">USER</span> myuser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- **查看权限**  </span></span><br><span class="line"><span class="keyword">SHOW</span> GRANTS <span class="keyword">FOR</span> myuser;</span><br><span class="line"><span class="keyword">show</span> grants;   #查看当前用户权限</span><br><span class="line"></span><br><span class="line"><span class="comment">-- **授予权限**  </span></span><br><span class="line">账户用 username<span class="variable">@host</span> 的形式定义，username@<span class="operator">%</span> 使用的是默认主机名。</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.<span class="operator">*</span> <span class="keyword">TO</span> myuser;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- **删除权限**  </span></span><br><span class="line"><span class="keyword">GRANT</span> 和 <span class="keyword">REVOKE</span> 可在几个层次上控制访问权限：</span><br><span class="line"></span><br><span class="line"><span class="operator">-</span> 整个服务器，使用 <span class="keyword">GRANT</span> <span class="keyword">ALL</span> 和 <span class="keyword">REVOKE</span> <span class="keyword">ALL</span>；</span><br><span class="line"><span class="operator">-</span> 整个数据库，使用 <span class="keyword">ON</span> database.\<span class="operator">*</span>；</span><br><span class="line"><span class="operator">-</span> 特定的表，使用 <span class="keyword">ON</span> database.table；</span><br><span class="line"><span class="operator">-</span> 特定的列；</span><br><span class="line"><span class="operator">-</span> 特定的存储过程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">REVOKE</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span> <span class="keyword">ON</span> mydatabase.<span class="operator">*</span> <span class="keyword">FROM</span> myuser;</span><br><span class="line">#给用户分配权限</span><br><span class="line"><span class="keyword">grant</span> 权限 <span class="keyword">on</span> 数据库.数据表 <span class="keyword">to</span> <span class="string">'用户'</span> @ <span class="string">'主机名'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#刷新权限，使权限生效，</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- **更改密码**  必须使用 Password() 函数进行加密。</span></span><br><span class="line"><span class="keyword">SET</span> PASSWROD <span class="keyword">FOR</span> myuser <span class="operator">=</span> Password(<span class="string">'new_password'</span>);</span><br></pre></td></tr></tbody></table></figure><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="vscode链接MySQL"><a href="#vscode链接MySQL" class="headerlink" title="vscode链接MySQL"></a>vscode链接MySQL</h3><p>安装插件MySQL ，MySQL syntax<br>配置MySQL插件，点击+号，输入密码即可</p><h3 id="sql语句快速生成器"><a href="#sql语句快速生成器" class="headerlink" title="sql语句快速生成器"></a>sql语句快速生成器</h3><p>utools插件</p><p>可以将excel或word表格中的内容快速生成sql的插入语句或更新语句</p><h2 id="存储过程-1"><a href="#存储过程-1" class="headerlink" title="存储过程"></a>存储过程</h2><p>基本格式及使用，怎么调用存储过程 (PPT存储过程与事务第17页）<br>定义 ：  存储过程（Stored Procedure）是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，经过第一次编译后调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。<br>存储过程的特点<br>    1、能完成较复杂的判断和运算<br>    2、可编程行强，灵活<br>    3、SQL编程的代码可重复使用<br>    4、执行的速度相对快一些<br>    5、减少网络之间的数据传输，节省开销<br>创建存储过程的简单语法</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create procedure 名称()</span><br><span class="line">begin</span><br><span class="line">.........</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>调用存储过程    call 名称();<br>存储函数里的变量</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create procedure test2()</span><br><span class="line">begin</span><br><span class="line">  -- 使用 declare语句声明一个变量</span><br><span class="line">  declare username varchar(32) default '';</span><br><span class="line">  -- 使用set语句给变量赋值</span><br><span class="line">  set username='xiaoxiao';</span><br><span class="line">  -- 将users表中id=1的名称赋值给username</span><br><span class="line">  select name into username from users where id=1;</span><br><span class="line">  -- 返回变量</span><br><span class="line">  select username;</span><br><span class="line">end;</span><br></pre></td></tr></tbody></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>mysql事务处理的四种基本特性（原子性、一致性、隔离性、持久性）（书本P102页）</p><p>4.事务的基本语法，比如开启事务（start transcation、begin) ,提交事务commit，回滚 rollback（书本P103页）</p><p>5.mysql设置了事务的4种隔离级别（读未提交、读提交、可重复读、可串行化）（书本没有）</p><h2 id="触发器-1"><a href="#触发器-1" class="headerlink" title="触发器"></a>触发器</h2><p> 触发器与函数、存储过程一样，触发器是一种对象，它能根据对表的操作时间，触发一些动作，这些动作可以是insert,update,delete等修改操作。</p> <figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create trigger tr_users_insert after insert on users</span><br><span class="line">   for each row </span><br><span class="line">   begin </span><br><span class="line">       insert into oplog(userid,username,action,optime)</span><br><span class="line">       values(NEW.id,NEW.name,'insert',now());</span><br><span class="line">   end;</span><br></pre></td></tr></tbody></table></figure><p>，三个激活触发器的操作（插入insert、修改update和删除delete）（书本没有）（PPT 索引视图触发器第43页）</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>导出与导入是相反的过程，是把数据库某个表中的数据保存到一个文件之中。导出语句基本格式为：<br><code>SELECT 列1，列2 INTO OUTFILE '文件路径和文件名' FROM 表名字;</code>注意：语句中 “文件路径” 之下不能已经有同名文件。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>此处讲解的是导入一个纯数据文件，该文件中将包含与数据表字段相对应的多条数据，这样可以快速导入大量数据，</p><p>除此之外，还有用 SQL 语句的导入方式，语法为：source *.sql 这是实验中经常用到的。<br>两者之间的不同是：数据文件导入方式只包含数据，导入规则由数据库系统完成；SQL 文件导入相当于执行该文件中包含的 SQL 语句，可以实现多种操作，包括删除，更新，新增，甚至对数据库的重建。</p><p>数据文件导入，可以把一个文件里的数据保存进一张表。导入语句格式为：<br><code>LOAD DATA INFILE '文件路径和文件名' INTO TABLE 表名字;</code></p><p>由于导入导出大量数据都属于敏感操作，根据 mysql 的安全策略，导入导出的文件都必须在指定的路径下进行，在 mysql 终端中查看路径变量：<br><code>show variables like '%secure%';</code><br>注意到 secure_file_priv 变量指定安全路径为 /var/lib/mysql-files/ ，要导入数据文件，需要将该文件移动到安全路径下。</p><h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><p>数据库中的数据十分重要，出于安全性考虑，在数据库的使用中，应该注意使用备份功能。</p><p>备份与导出的区别：导出的文件只是保存数据库中的数据；而备份，则是把数据库的结构，包括数据、约束、索引、视图等全部另存为一个文件。</p><p>mysqldump 是 MySQL 用于备份数据库的实用程序。它主要产生一个 SQL 脚本文件，其中包含从头重新创建数据库所必需的命令 CREATE TABLE INSERT 等。</p><p>使用 mysqldump 备份的语句：<br>mysqldump 是一个备份工具，因此该命令是在终端中执行的，而不是在 mysql 交互环境下</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root 数据库名&gt;备份文件名;   #备份整个数据库</span><br><span class="line"></span><br><span class="line">mysqldump -u root 数据库名 表名字&gt;备份文件名;  #备份整个表</span><br></pre></td></tr></tbody></table></figure><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>注意不要使用引号，不要使用中文路径</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 进入MySQL控制台</span></span><br><span class="line">use 数据库名；</span><br><span class="line">source <span class="operator">/</span>home<span class="operator">/</span>shiyanlou<span class="operator">/</span>Desktop<span class="operator">/</span>MySQL<span class="number">-06.</span><span class="keyword">sql</span></span><br><span class="line"></span><br><span class="line">source E:\Code\java\db_reggie.sql</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">第二种：新建一个空的数据库 test， Ctrl+D 退出 MySQL</span><br><span class="line">mysql  -h localhost  -uroot -proot reggie &lt; E:/Code/java/db_reggie.sql</span><br></pre></td></tr></tbody></table></figure><p>以idea打开MySQL脚本，右键运行，配置数据源，即可导入</p><h2 id="数据库规范化设计"><a href="#数据库规范化设计" class="headerlink" title="数据库规范化设计"></a>数据库规范化设计</h2><p>1.实体之间的映射关系：一对一1:1 、一对多1:n、多对一n:1 、多对多m:n</p><p>2.E-R图的绘制</p><p>3.E-R图转换成关系模型</p><p>4.数据库模型图的概念</p><h2 id="命令速查"><a href="#命令速查" class="headerlink" title="命令速查"></a>命令速查</h2><p><a href="https://blog.csdn.net/horses/article/details/104849500">https://blog.csdn.net/horses/article/details/104849500</a></p><h1 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h1><h2 id="1、数据库索引"><a href="#1、数据库索引" class="headerlink" title="1、数据库索引"></a>1、数据库索引</h2><p>索引是对数据库表中一列或多列的值进行排序的一种结构，使用索引可快速访问数据库表中的特定信息。如果想按特定职员的姓来查找他或她，则与在表中搜索所有的行相比，索引有助于更快地获取信息。</p><p>索引的一个主要目的就是加快检索表中数据的方法，亦即能协助信息搜索者尽快的找到符合限制条件的记录ID的辅助数据结构。</p><p>优点：<br>通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。<br>可以大大加快数据的检索速度，这也是创建索引的最主要的原因。<br>可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。<br>在使用分组和排序子句进行数据检索时，同样可以显著减少查询中分组和排序的时间。<br>通过使用索引，可以在查询的过程中，使用优化隐藏器，提高系统的性能。<br>缺点：<br>创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。<br>索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。<br>当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。<br>添加索引原则<br>在查询中很少使用或者参考的列不应该创建索引。这是因为，既然这些列很少使用到，因此有索引或者无索引，并不能提高查询速度。相反，由于增加了索引，反而降低了系统的维护速度和增大了空间需求。<br>只有很少数据值的列也不应该增加索引。这是因为，由于这些列的取值很少，例如人事表的性别列，在查询的结果中，结果集的数据行占了表中数据行的很大比例，即需要在表中搜索的数据行的比例很大。增加索引，并不能明显加快检索速度。<br>定义为text、image和bit数据类型的列不应该增加索引。这是因为，这些列的数据量要么相当大，要么取值很少。<br>当修改性能远远大于检索性能时，不应该创建索引。这是因为，修改性能和检索性能是互相矛盾的。当增加索引时，会提高检索性能，但是会降低修改性能。当减少索引时，会提高修改性能，降低检索性能。因此，当修改性能远远大于检索性能时，不应该创建索引。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络学习</title>
      <link href="/2021/122451189.html"/>
      <url>/2021/122451189.html</url>
      
        <content type="html"><![CDATA[<h1 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h1><p><strong>OSI模型</strong><br>物理层，数据链路层，网络层，传输层，会话层，表示层，应用层<br><strong>TCP/IP模型</strong>包含网络接口层(数字信号与模拟信号相互转换)，网洛层(ip协议)，传输层(tcp和udp协议)，应用层(http协议)</p><ul><li>综合OSI和TCP/IP的优点采用五层协议的体系结构阐述计算机网络的原理</li></ul><h1 id="TCP-IP"><a href="#TCP-IP" class="headerlink" title="TCP/IP"></a>TCP/IP</h1><p>TCP/IP（Transmission Control Protocol/Internet Protocol）是传输控制协议和网络协议的简称，它定义了电子设备如何连入因特网，以及数据如何在它们之间传输的标准。</p><p>TCP/IP 不是一个协议，而是一个协议族的统称，里面包括了 IP 协议、ICMP 协议、TCP 协议、以及 http、ftp、pop3 协议等。网络中的计算机都采用这套协议族进行互联。</p><p>TCP/IP 协议栈传输层有两个重要协议——UDP 和 TCP，不同的应用进程在传输层使用 TCP 或 UDP 之一。</p><h2 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h2><p>通常被翻译为网际协议，它服务于网络层，主要实现了寻址和路由的功能。<br>接入网络的每一台主机都需要有自己的IP地址，IP地址就是主机在计算机网络上的身份标识。</p><p>当然由于IPv4地址的匮乏，我们平常在家里、办公室以及其他可以接入网络的公共区域上网时获得的IP地址并不是全球唯一的IP地址，而是一个<a href="https://zh.wikipedia.org/zh-hans/%E5%B1%80%E5%9F%9F%E7%BD%91">局域网（LAN）</a>中的内部IP地址，通过<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%9C%B0%E5%9D%80%E8%BD%AC%E6%8D%A2">网络地址转换（NAT）服务</a>我们也可以实现对网络的访问。计算机网络上有大量的被我们称为“<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1%E5%99%A8">路由器</a>”的网络中继设备，它们会存储转发我们发送到网络上的数据分组，让从源头发出的数据最终能够找到传送到目的地通路，这项功能就是所谓的路由。</p><h3 id="IP数据报"><a href="#IP数据报" class="headerlink" title="IP数据报"></a>IP数据报</h3><p>IP数据报：IP 协议位于网络层，它是 TCP/IP 协议族中最为核心的协议，所有的 TCP、UDP、ICMP 及 IGMP 数据都以 IP 数据报格式传输。IP 协议提供的是不可靠、无连接的数据报传送服务。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>不可靠（unreliable）：IP 协议不能保证数据报能成功地到达目的地，它仅提供传输服务。当发生某种错误时，IP 协议会丢弃该数据报。传输的可靠性全由上层协议来提供。</li><li>无连接（connectionless）：IP 协议对每个数据报的处理是相互独立的。这也说明，IP 数据报可以不按发送顺序接收。如果发送方向接收方发送了两个连续的数据报（先是 A，然后是 B），每个数据报可以选择不同的路线，因此 B 可能在 A 到达之前先到达。</li></ul><h4 id="IP数据报格式"><a href="#IP数据报格式" class="headerlink" title="IP数据报格式"></a>IP数据报格式</h4><p><img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/85c05fb1-5546-4c50-9221-21f231cdc8c5.jpg" alt="IP数据报格式"></p><ul><li><p><strong>版本</strong>   : 有 4（IPv4）和 6（IPv6）两个值；</p></li><li><p><strong>首部长度</strong>   : 占 4 位，因此最大值为 15。值为 1 表示的是 1 个 32 位字的长度，也就是 4 字节。因为固定部分长度为 20 字节，因此该值最小为 5。如果可选字段的长度不是 4 字节的整数倍，就用尾部的填充部分来填充。</p></li><li><p><strong>区分服务</strong>   : 用来获得更好的服务，一般情况下不使用。</p></li><li><p><strong>总长度</strong>   : 包括首部长度和数据部分长度。</p></li><li><p><strong>生存时间</strong>   ：TTL，它的存在是为了防止无法交付的数据报在互联网中不断兜圈子。以路由器跳数为单位，当 TTL 为 0 时就丢弃数据报。</p></li><li><p><strong>协议</strong>  ：指出携带的数据应该上交给哪个协议进行处理，例如 ICMP、TCP、UDP 等。</p></li><li><p><strong>首部检验和</strong>  ：因为数据报每经过一个路由器，都要重新计算检验和，因此检验和不包含数据部分可以减少计算的工作量。</p></li><li><p><strong>标识</strong>   : 在数据报长度过长从而发生分片的情况下，相同数据报的不同分片具有相同的标识符。</p></li><li><p><strong>片偏移</strong>   : 和标识符一起，用于发生分片的情况。片偏移的单位为 8 字节。</p></li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/23ba890e-e11c-45e2-a20c-64d217f83430.png" width="700"> </div><br><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title="IP地址分类"></a>IP地址分类</h3><p>IP 地址被分为 A、B、C、D、E 五类：</p><ul><li>A 类给大型网络或政府机构等；</li><li>B 类分配给中型网络、跨国企业等；</li><li>C 类分配给小型网络；</li><li>D 类用于多播；</li><li>E 类用于实验。</li></ul><p>IP地址由四段组成，每个字段是一个字节，8位，最大值是255，</p><p>IP地址由两部分组成，即网络地址和主机地址。网络地址表示其属于互联网的哪一个网络，主机地址表示其属于该网络中的哪一台主机。二者是主从关系。</p><p>IP地址的四大类型标识的是网络中的某台主机。IPv4的地址长度为32位，共4个字节，但实际中我们用点分十进制记法。</p><div align="center"> <img src="https://images2018.cnblogs.com/blog/1440532/201809/1440532-20180912093201807-306001370.png" width="800"> </div><br><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A 类地址：</span><br><span class="line"></span><br><span class="line">A 类地址网络号范围：1.0.0.0---127.0.0.0；</span><br><span class="line">A 类 IP 地址范围：1.0.0.0---127.255.255.255；</span><br><span class="line">A 类 IP 的私有地址范围：10.0.0.0---10.255.255.255 （所谓的私有地址就是在互联网上不使用，而被用在局域网络中的地址）；</span><br><span class="line">127.X.X.X 是保留地址，用做循环测试用的；</span><br><span class="line">因为主机号有 24 位，所以一个 A 类网络号可以容纳 224-2=16777214 个主机号。</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">B 类地址：</span><br><span class="line"></span><br><span class="line">B 类地址网络号范围：128.0.0.0---191.255.0.0；</span><br><span class="line">B 类 IP 地址范围：128.0.0.0---191.255.255.255；</span><br><span class="line">B 类 IP 的私有地址范围：172.16.0.0---172.31.255.255；</span><br><span class="line">169.254.X.X 是保留地址；191.255.255.255 是广播地址；</span><br><span class="line">因为主机号有 16 位，所以一个 B 类网络号可以容纳 216-2=65534 个主机号。</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">C 类地址：</span><br><span class="line"></span><br><span class="line">C 类地址网络号范围：192.0.0.0---223.255.255.0；</span><br><span class="line">C 类 IP 地址范围：192.0.0.0---223.255.255.255；</span><br><span class="line">C 类 IP 的私有地址范围：192.168.0.0---192.168.255.255；</span><br><span class="line">因为主机号有 8 位，所以一个 C 类网络号可以容纳 28-2=254 个主机号。</span><br></pre></td></tr></tbody></table></figure><p>IP地址根据网络号和主机号来分，分为A、B、C三类及特殊地址D、E。    全0和全1的都保留不用。</p><p>D类：是多播地址。该类IP地址的最前面为“1110”，所以地址的网络号取值于224~239之间。一般用于多路广播用户[1]  。</p><p>E类：是保留地址。该类IP地址的最前面为“1111”，所以地址的网络号取值于240~255之间。</p><p>在IP地址3种主要类型里，各保留了3个区域作为私有地址，其地址范围如下：<br>A类地址：10.0.0.0～10.255.255.255<br>B类地址：172.16.0.0～172.31.255.255<br>C类地址：192.168.0.0～192.168.255.255</p><p>回送地址：127.0.0.1。 也是本机地址，等效于localhost或本机IP。一般用于测试使用。例如：ping 127.0.0.1来测试本机TCP/IP是否正常。</p><h3 id="IP-地址编址方式"><a href="#IP-地址编址方式" class="headerlink" title="IP 地址编址方式"></a>IP 地址编址方式</h3><p>IP 地址的编址方式经历了三个历史阶段：</p><ul><li>分类</li><li>子网划分</li><li>无分类</li></ul><p><strong>1. 分类</strong></p><p>由两部分组成，网络号和主机号，其中不同分类具有不同的网络号长度，并且是固定的。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 主机号 &gt;}</p><p><strong>2. 子网划分</strong></p><p>通过在主机号字段中拿一部分作为子网号，把两级 IP 地址划分为三级 IP 地址。</p><p>IP 地址 ::= {&lt; 网络号 &gt;, &lt; 子网号 &gt;, &lt; 主机号 &gt;}</p><p>要使用子网，必须配置子网掩码。一个 B 类地址的默认子网掩码为 255.255.0.0，如果 B 类地址的子网占两个比特，那么子网掩码为 11111111 11111111 11000000 00000000，也就是 255.255.192.0。</p><p>注意，外部网络看不到子网的存在。</p><p><strong>3. 无分类</strong></p><p>无分类编址 CIDR 消除了传统 A 类、B 类和 C 类地址以及划分子网的概念，使用网络前缀和主机号来对 IP 地址进行编码，网络前缀的长度可以根据需要变化。</p><p>IP 地址 ::= {&lt; 网络前缀号 &gt;, &lt; 主机号 &gt;}</p><p>CIDR 的记法上采用在 IP 地址后面加上网络前缀长度的方法，例如 128.14.35.7/20 表示前 20 位为网络前缀。</p><p>CIDR 的地址掩码可以继续称为子网掩码，子网掩码首 1 长度为网络前缀的长度。</p><p>一个 CIDR 地址块中有很多地址，一个 CIDR 表示的网络就可以表示原来的很多个网络，并且在路由表中只需要一个路由就可以代替原来的多个路由，减少了路由表项的数量。把这种通过使用网络前缀来减少路由表项的方式称为路由聚合，也称为   <strong>构成超网</strong>  。</p><p>在路由表中的项目由“网络前缀”和“下一跳地址”组成，在查找时可能会得到不止一个匹配结果，应当采用最长前缀匹配来确定应该匹配哪一个。</p><p>ip目前已经不采用分类表示法，所以大家重点关注CIDR表示法（无分类编址）。<br>例  128.14.35.7/20 = 10000000  00001110  0010|0011  00000111</p><p>即前20位是网络前缀，后12位是主机号，那么我们通过令主机号分别为全0和全1就可以得到一个CIDR地址块的最小地址和最大地址，即</p><pre><code>最小地址是：128.14.32.0      = 10000000  00001110  0010|0000  00000000最大地址是：128.14.47.255  = 10000000  00001110  0010|1111 11111111     子网掩码是：255.255.240.0  = 11111111  11111111  1111|0000  00000000</code></pre><p>因此就可以看出来，这个CIDR地址块可以指派(47-32+1)*256=4096个地址，这里没有把全0和全1除外。</p><h3 id="NAT-技术"><a href="#NAT-技术" class="headerlink" title="NAT 技术"></a>NAT 技术</h3><p>当你用 ifconfig 查看 IP 地址时，有时你会发现自己的 IP 地址是这样的———192.168.X.X 或 172.16.X.X。这是 C 类网和 B 类网的私有地址，就是俗称的内网 IP。这是因为你的路由器采用了 NAT 技术。</p><p>NAT（Network Address Translation，网络地址转换）是 1994 年提出的。当在专用网内部的一些主机本来已经分配到了内网 IP 地址，但现在又想和因特网上的主机通信时，NAT 技术将其内网 IP 地址转换成全球 IP 地址，然后与因特网连接，也就是说，内网的数台主机使用了同一个全球 IP 地址在上网。</p><p>NAT 技术实现了宽带共享，而且有助于缓解 IP 地址空间枯竭的问题。</p><h3 id="VPN虚拟专用网"><a href="#VPN虚拟专用网" class="headerlink" title="VPN虚拟专用网"></a>VPN虚拟专用网</h3><p>由于 IP 地址的紧缺，一个机构能申请到的 IP 地址数往往远小于本机构所拥有的主机数。并且一个机构并不需要把所有的主机接入到外部的互联网中，机构内的计算机可以使用仅在本机构有效的 IP 地址（专用地址）。</p><p>有三个专用地址块：</p><ul><li>10.0.0.0 ~ 10.255.255.255</li><li>172.16.0.0 ~ 172.31.255.255</li><li>192.168.0.0 ~ 192.168.255.255</li></ul><p>VPN 使用公用的互联网作为本机构各专用网之间的通信载体。专用指机构内的主机只与本机构内的其它主机通信；虚拟指好像是，而实际上并不是，它有经过公用的互联网。</p><p>下图中，场所 A 和 B 的通信经过互联网，如果场所 A 的主机 X 要和另一个场所 B 的主机 Y 通信，IP 数据报的源地址是 10.1.0.1，目的地址是 10.2.0.3。数据报先发送到与互联网相连的路由器 R1，R1 对内部数据进行加密，然后重新加上数据报的首部，源地址是路由器 R1 的全球地址 125.1.2.3，目的地址是路由器 R2 的全球地址 194.4.5.6。路由器 R2 收到数据报后将数据部分进行解密，恢复原来的数据报，此时目的地址为 10.2.0.3，就交付给 Y。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1556770b-8c01-4681-af10-46f1df69202c.jpg" width="800"> </div><br><h2 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP/IP模型"></a>TCP/IP模型</h2><p>实现网络通信的基础是网络通信协议，所谓“协议”就是通信计算机双方必须共同遵从的一组约定，例如怎样建立连接、怎样互相识别等，</p><p>网络协议的三要素是：语法、语义和时序。</p><p>构成我们今天使用的Internet的基础的是TCP/IP协议族，所谓协议族就是一系列的协议及其构成的通信模型，我们通常也把这套东西称为TCP/IP模型。<br>与国际标准化组织发布的OSI/RM这个七层模型不同，TCP/IP是一个四层模型，也就是说，该模型将我们使用的网络从逻辑上分解为四个层次，自底向上依次是：网络接口层、网络层、传输层和应用层，</p><p><strong>TCP</strong>全称传输控制协议，它是基于IP提供的寻址和路由服务而建立起来的负责实现端到端可靠传输的协议，之所以将TCP称为可靠的传输协议是因为TCP向调用者承诺了三件事情：</p><ol><li>数据不传丢不传错（利用握手、校验和重传机制可以实现）。</li><li>流量控制（通过滑动窗口匹配数据发送者和接收者之间的传输速度）。</li><li>拥塞控制（通过RTT时间以及对滑动窗口的控制缓解网络拥堵）。</li></ol><h2 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h2><p>IP 地址是用来发现和查找网络中的地址，但是不同程序如何互相通信呢？这就需要端口号来识别了。如果把 IP 地址比作一间房子，端口就是出入这间房子的门。真正的房子只有几个门，但是端口采用 16 比特的端口号标识，一个 IP 地址的端口可以有 65536（即：216）个之多！</p><p>服务器的默认程序一般都是通过人们所熟知的端口号来识别的。例如，对于每个 TCP/IP 实现来说，SMTP（简单邮件传输协议）服务器的 TCP 端口号都是 25，FTP（文件传输协议）服务器的 TCP 端口号都是 21，TFTP（简单文件传输协议）服务器的 UDP 端口号都是 69。任何 TCP/IP 实现所提供的服务都用众所周知的 1－1023 之间的端口号。这些人们所熟知的端口号由 Internet 端口号分配机构（Internet Assigned Numbers Authority，IANA）来管理。</p><p>端口号有 0 ～ 65535 的编号，其中：</p><ul><li><p>编号 0 ～ 1023 为 系统端口号 ，这些端口号可以在网址 <a href="http://www.iana.org/">www.iana.org</a> 查询到，它们被指派给了 TCP/IP 最重要的一些应用程序，以下是一些常见的系统端口号：</p><table><thead><tr><th>应用层协议：</th><th>FTP</th><th>TELNET</th><th>SMTP</th><th>DNS</th><th>TFTP</th><th>HTTP</th><th>SNMP</th></tr></thead><tbody><tr><td>系统端口号：</td><td>21</td><td>23</td><td>25</td><td>53</td><td>69</td><td>80</td><td>161</td></tr></tbody></table></li><li><p>编号 1024 ～ 49151 为登记端口号，为没有系统端口号的应用程序使用，使用这类端口号必须在 IANA 按规定手续登记，以防止重复。</p></li><li><p>编号 49152 ～ 65535 为短暂端口号，是留给客户进程选择暂时使用的，使用结束后，这类端口号会被放开以供其它程序使用。</p></li></ul><p>使用 netstat -a命令列出了监听中的端口：</p><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><p>用 12 位数字组成的 IP 地址很难记忆，在实际应用时，用户一般不需要记住 IP 地址，互联网给每个 IP 地址起了一个别名，习惯上称作域名。</p><p>域名与计算机的 IP 地址相对应，并把这种对应关系存储在域名服务系统 DNS(Domain Name System) 中，这样用户只需记住域名就可以与指定的计算机进行通信了。</p><p>常见的域名包括 com、net 和 org 三种顶级域名后缀，除此之外每个国家还有自己国家专属的域名后缀（比如我国的域名后缀为 cn）。</p><h2 id="MAC-地址"><a href="#MAC-地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h2><p>MAC（Media Access Control）地址，或称为物理地址、硬件地址，用来定义互联网中设备的位置。</p><p>在 TCP/IP 层次模型中，网络层管理 IP 地址，链路层则负责 MAC 地址。因此每个网络位置会有一个专属于它的 IP 地址，而每个主机会有一个专属于它 MAC 地址</p><h2 id="封装和分用"><a href="#封装和分用" class="headerlink" title="封装和分用"></a>封装和分用</h2><p>封装：当应用程序发送数据的时候，数据在协议层次当中自顶向下通过每一层，每一层都会对数据增加一些首部或尾部信息，这样的信息称之为协议数据单元（Protocol Data Unit，缩写为 PDU），在分层协议系统里，在指定的协议层上传送的数据单元，包含了该层的协议控制信息和用户信息。如下图所示：</p><p>物理层（一层）PDU 指数据位（Bit）<br>数据链路层（二层）PDU 指数据帧（Frame）<br>网络层（三层）PDU 指数据包（Packet）<br>传输层（四层）PDU 指数据段（Segment）<br>第五层以上为数据（data）</p><p>分用：当主机收到一个数据帧时，数据就从协议层底向上升，通过每一层时，检查并去掉对应层次的报文首部或尾部，与封装过程正好相反。</p><h1 id="一-物理层"><a href="#一-物理层" class="headerlink" title="一. 物理层"></a>一. 物理层</h1><p>集线器，中继器</p><h2 id="相关协议"><a href="#相关协议" class="headerlink" title="相关协议"></a>相关协议</h2><h2 id="数据通信的基本知识"><a href="#数据通信的基本知识" class="headerlink" title="数据通信的基本知识"></a>数据通信的基本知识</h2><ul><li>编码<br>把数据转换成数字信号（01）<br> 不归零制，<br> 归零制（正脉冲代表1，负脉冲代表0），<br> 曼彻斯特编码（位周期中心的向上跳变代表0，向下代表1，反之亦可）<br> 差分曼彻斯特编码（每一位的中心处始终有跳变。位开始边界有跳变为0，位开始边界无跳变为1）。<ul><li>调制方法<br>转换为模拟信号<br>调幅：对基带信号的波幅进行调整，例如将上图的1信号波幅进行改变，在接收方读取时有载波输出为1<br>调相：对基带信号相位进行调制，例如将0信号的初相位调整为0度，1信号的初相位调整为180度。<br>调频：对基带信号频率进行调整，例如将0信号调制为频率f1，1信号调制为频率f2。</li></ul></li></ul><p> 2.数据交换方式<br>  ①分组交换<br>  ②电路交换<br> 信道复用技术<br>  ①频分复用FDM<br>  是有N路信号要在一个信道中传送。可以使用调制的方法，把各路信号分别搬迁到适当的频率位置，使彼此不产生干扰。各路信号在同样的时间占用不同的带宽资源。<br>  ②时分复用TDM<br>  是将时间划分为一段段等长的帧，每一路信号在每一个帧中占用固定信号的时隙。<br>  ③波分复用<br>  ④码分复用CDM<br> 数字传输系统<br> 宽带接入技术<br> 重要内容<br> 使用点对点信道的数据链路层<br> 封装成帧<br> 透明传输<br> 差错检测</p><p> 字节填充</p><p> 使用广播通信的数据链路层</p><h1 id="二-数据链路层"><a href="#二-数据链路层" class="headerlink" title="二. 数据链路层"></a>二. 数据链路层</h1><p>交换机，网桥</p><p>网络层协议的数据单元是 IP 数据报，而数据链路层的工作就是把网络层交下来的 IP 数据报 封装为帧（frame）发送到链路上，以及把接收到的帧中的数据取出并上交给网络层。 为达到这一目的，数据链路必须具备一系列相应的功能，主要有：</p><p>将数据封装为帧（frame），帧是数据链路层的传送单位；<br>控制帧的传输，包括处理传输差错，调节发送速率与接收方相匹配；<br>在两个网络实体之间提供数据链路通路的建立、维持和释放的管理。</p><p>IP 数据报-&gt;数据帧(帧首部+帧的数据部分+帧尾部)</p><h2 id="控制帧的传输"><a href="#控制帧的传输" class="headerlink" title="控制帧的传输"></a>控制帧的传输</h2><ul><li><p>差错控制<br>通信系统必须具备发现差错的能力，并采取措施纠正之，使差错控制在所能允许的尽可能小的范围内，这就是差错控制过程，也是数据链路层的主要功能之一。</p></li><li><p>反馈重发<br>接收方通过对差错编码(奇偶校验码或 CRC 码)的检查，可以判定一帧在传输过程中是否发生了差错。一旦发现差错，一般可以采用反馈重发的方法来纠正。这就要求接受方收完一帧后，向发送方反馈一个接收是否正确的信息，使发送方据此做出是否需要重新发送的决定。发送方仅当收到接收方已正确接收的反馈信号后才能认为该帧已经正确发送完毕，否则需要重发直至正确为止。</p></li><li><p>计时器<br>如果某一帧发送出现问题，一直不能发送成功，为了避免传输过程停滞不前，通常引入计时器（Timer）来限定接收方发回反馈消息的时间间隔。当发送方发送一帧的同时也启动计时器，若在限定时间间隔内未能收到接收方的反馈信息，即计时器超时（Timeout），则可认为传出的帧已出错或丢失，就要重新发送。</p></li><li><p>序号<br>由于同一帧数据可能被重复发送多次，就可能引起接收方多次收到同一帧并将其递交给网络层的情况。为了防止这种情况，可以采用对发送的帧编号的方法，即赋予每帧一个序号，从而使接收方能从该序号来区分是新发送来的帧还是重发的帧，以此来确定要不要将接收到的帧递交给网络层。</p></li><li><p>流量控制<br>由于收发双方各自使用的设备工作速率和缓冲存储空间的差异，可能出现发送方的发送能力大于接收方接收能力的现象，此时若不对发送方的发送速率做适当的限制，前面来不及接收的帧将被后面不断发送来的帧“淹没”，从而造成帧的丢失而出错。</p></li></ul><p>由此可见，流量控制实际上是对发送方数据流量的控制，使其发送速率不超过接收方的速率。所以需要一些规则使得发送方知道在什么情况下可以接着发送下一帧，而在什么情况下必须暂停发送，以等待收到某种反馈信息后再继续发送。这就是流量控制。</p><h2 id="SLIP-协议"><a href="#SLIP-协议" class="headerlink" title="SLIP 协议"></a>SLIP 协议</h2><p>SLIP 的全称为 Serial Line IP（串行线路 IP）。它是一种对 IP 数据报进行封装的简单形式。</p><p>SLIP 协议规定的帧格式规则：</p><p>IP 数据报以一个称作 END（0xc0）的特殊字符结束。同时为了防止数据报传输之前的线路噪音被误认为是数据报内容，在数据报开始处添加一个 END 字符；<br>如果 IP 数据报中含有 END 字符，就连续传输 0xdb 和 0xdc 来取代它。0xdb 是 SLIP 的 ESC 字符，但它的值与 ASCⅡ 码中的 ESC（0x1b）不同；<br>如果 IP 数据报中含有 ESC 字符，就连续传输 0xdb 和 0xdd 来取代它。<br>图片描述</p><p>SLIP 的缺陷：</p><p>每一端必须知道对端的 IP 地址，没有办法把本端 IP 地址传递给对端；<br>数据帧中无类型字段，当一条串行线路使用 SLIP 时则不能使用其它协议；<br>SLIP 数据帧中无 checksum，只能依靠上层协议来发现和纠正错误。<br>（参考SLIP 串行线路 IP）</p><h2 id="点对点协议PPP"><a href="#点对点协议PPP" class="headerlink" title="点对点协议PPP"></a>点对点协议PPP</h2><p>PPP（点到点协议）是为在同等单元之间传输数据设计的链路层协议。这种链路提供全双工操作，并按照顺序传递数据。设计目的主要是用来通过拨号或专线方式建立点对点连接发送数据，使其成为各种主机、网桥和路由器之间简单连接的一种共通的解决方案。</p><p>点对点协议（PPP）为在点对点连接上传输多协议数据包提供了一个标准方法。PPP 最初设计是为两个对等节点之间的 IP 流量传输提供一种封装协议。在 TCP/IP 协议集中它是一种用来同步调制连接的数据链路层协议。</p><p>PPP 协议修改了 SLIP 协议中的缺陷，包括以下三个部分：</p><p>PPP 封装 IP 数据报既支持数据为 8 位和无奇偶校验的异步模式，又支持面向比特的同步链接；<br>通过 LCP（链路控制协议）允许双方进行协商；<br>通过 NCP（网络控制协议）允许双方在网络层上进行协商。 PPP 协议的字符规则与 SLIP 有所不同：<br>PPP 帧以标志字符 0x7e 开始和结束，紧接着是一个值为 0xff 的地址字节，然后是一个值为 0x03 的控制字节；<br>由于标志字符是 0x7e，当它出现在信息字段中时，需要连续传送 0x7d 和 0x5e 来替代它；<br>当在信息字段中遇到 0x7d 时，需要连续传送 0x7d 和 0x5d 来替代它。<br>默认情况下，如果字符的值小于 0x20，需要连续传送 0x7d 和 0x21 来替代它。 PPP 与 SLIP 相比具有下列优点：<br>PPP 支持在单根串行线路上运行多种网络层协议；<br>每一帧都有 CRC 校验；<br>通信双方可以用 NCP 进行 IP 地址的动态协商；<br>可以类似于 CSLIP 对 TCP 和 IP 首部进行压缩；<br>LCP 可以对多个数据链路选项进行设置。</p><h2 id="链路层服务"><a href="#链路层服务" class="headerlink" title="链路层服务"></a>链路层服务</h2><p> 组帧：封装高层数据报构成数据帧，加首部和尾部<br>  控制字符SOH放在一帧的最前面，表示帧的首部开始<br>   控制字符EOT放在一帧的最后，表示帧的结束<br> 流量控制：协调相邻的发送结点，接收<br> 差错检测：信号衰减和噪音会引起差错，接收端检测到差错，通知发送端重传或直接丢弃帧<br> 差错纠正：接收端直接纠正比特差错<br> 全双工和半双工通信控制<br> 全双工：同时双向传输。半双工：交替双向传输<br>  数据链路层协议的代表包括：PPP、帧中继等<br>适配器的作用<br>CSMA/CD协议<br>使用集线器的星形拓扑结构<br>MAC层的硬件地址<br>MAC帧的格式<br>以太网的扩展</p><h1 id="三-网络层"><a href="#三-网络层" class="headerlink" title="三. 网络层"></a>三. 网络层</h1><p><strong>网络通信</strong>让不同的电脑上的软件能够进行数据传递，即进程间的通信</p><p>提供主机间的逻辑通信机制，在邻接节点间进行数据包可靠传输<br> 负责对子网间的数据包进行路由选择，为分组交换网上的不同主机提供通信服务。<br> 网络层协议的代表包括：IP、ICMP、IGMP等。<br>网络层提供的两种服务</p><p>因为网络层是整个互联网的核心，因此应当让网络层尽可能简单。网络层向上只提供简单灵活的、无连接的、尽最大努力交互的数据报服务。</p><p>使用 IP 协议，可以把异构的物理网络连接起来，使得在网络层看起来好像是一个统一的网络。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8d779ab7-ffcc-47c6-90ec-ede8260b2368.png" width="800"> </div><br><p>与 IP 协议配套使用的还有三个协议：</p><ul><li>地址解析协议 ARP（Address Resolution Protocol）</li><li>网际控制报文协议 ICMP（Internet Control Message Protocol）</li><li>网际组管理协议 IGMP（Internet Group Management Protocol）</li></ul><h2 id="网络地址转换-NAT"><a href="#网络地址转换-NAT" class="headerlink" title="网络地址转换 NAT"></a>网络地址转换 NAT</h2><p>专用网内部的主机使用本地 IP 地址又想和互联网上的主机通信时，可以使用 NAT 来将本地 IP 转换为全球 IP。</p><p>在以前，NAT 将本地 IP 和全球 IP 一一对应，这种方式下拥有 n 个全球 IP 地址的专用网内最多只可以同时有 n 台主机接入互联网。为了更有效地利用全球 IP 地址，现在常用的 NAT 转换表把传输层的端口号也用上了，使得多个专用网内部的主机共用一个全球 IP 地址。使用端口号的 NAT 也叫做网络地址与端口转换 NAPT。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2719067e-b299-4639-9065-bed6729dbf0b.png" width=""> </div><br><h2 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h2><h3 id="路由器的结构"><a href="#路由器的结构" class="headerlink" title="路由器的结构"></a>路由器的结构</h3><p>路由器从功能上可以划分为：路由选择和分组转发。</p><p>分组转发结构由三个部分组成：交换结构、一组输入端口和一组输出端口。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/c3369072-c740-43b0-b276-202bd1d3960d.jpg" width="600"> </div><br><h3 id="路由器分组转发流程"><a href="#路由器分组转发流程" class="headerlink" title="路由器分组转发流程"></a>路由器分组转发流程</h3><ul><li>从数据报的首部提取目的主机的 IP 地址 D，得到目的网络地址 N。</li><li>若 N 就是与此路由器直接相连的某个网络地址，则进行直接交付；</li><li>若路由表中有目的地址为 D 的特定主机路由，则把数据报传送给表中所指明的下一跳路由器；</li><li>若路由表中有到达网络 N 的路由，则把数据报传送给路由表中所指明的下一跳路由器；</li><li>若路由表中有一个默认路由，则把数据报传送给路由表中所指明的默认路由器；</li><li>报告转发分组出错。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/1ab49e39-012b-4383-8284-26570987e3c4.jpg" width="800"> </div><br><h3 id="路由选择协议"><a href="#路由选择协议" class="headerlink" title="路由选择协议"></a>路由选择协议</h3><p>路由选择协议都是自适应的，能随着网络通信量和拓扑结构的变化而自适应地进行调整。</p><p>互联网可以划分为许多较小的自治系统 AS，一个 AS 可以使用一种和别的 AS 不同的路由选择协议。</p><p>可以把路由选择协议划分为两大类：</p><ul><li>自治系统内部的路由选择：RIP 和 OSPF</li><li>自治系统间的路由选择：BGP</li></ul><h4 id="1-内部网关协议-RIP"><a href="#1-内部网关协议-RIP" class="headerlink" title="1. 内部网关协议 RIP"></a>1. 内部网关协议 RIP</h4><p>RIP 是一种基于距离向量的路由选择协议。距离是指跳数，直接相连的路由器跳数为 1。跳数最多为 15，超过 15 表示不可达。</p><p>RIP 按固定的时间间隔仅和相邻路由器交换自己的路由表，经过若干次交换之后，所有路由器最终会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器地址。</p><p>距离向量算法：</p><ul><li>对地址为 X 的相邻路由器发来的 RIP 报文，先修改报文中的所有项目，把下一跳字段中的地址改为 X，并把所有的距离字段加 1；</li><li>对修改后的 RIP 报文中的每一个项目，进行以下步骤：</li><li>若原来的路由表中没有目的网络 N，则把该项目添加到路由表中；</li><li>否则：若下一跳路由器地址是 X，则把收到的项目替换原来路由表中的项目；否则：若收到的项目中的距离 d 小于路由表中的距离，则进行更新（例如原始路由表项为 Net2, 5, P，新表项为 Net2, 4, X，则更新）；否则什么也不做。</li><li>若 3 分钟还没有收到相邻路由器的更新路由表，则把该相邻路由器标为不可达，即把距离置为 16。</li></ul><p>RIP 协议实现简单，开销小。但是 RIP 能使用的最大距离为 15，限制了网络的规模。并且当网络出现故障时，要经过比较长的时间才能将此消息传送到所有路由器。</p><h4 id="2-内部网关协议-OSPF"><a href="#2-内部网关协议-OSPF" class="headerlink" title="2. 内部网关协议 OSPF"></a>2. 内部网关协议 OSPF</h4><p>开放最短路径优先 OSPF，是为了克服 RIP 的缺点而开发出来的。</p><p>开放表示 OSPF 不受某一家厂商控制，而是公开发表的；最短路径优先表示使用了 Dijkstra 提出的最短路径算法 SPF。</p><p>OSPF 具有以下特点：</p><ul><li>向本自治系统中的所有路由器发送信息，这种方法是洪泛法。</li><li>发送的信息就是与相邻路由器的链路状态，链路状态包括与哪些路由器相连以及链路的度量，度量用费用、距离、时延、带宽等来表示。</li><li>只有当链路状态发生变化时，路由器才会发送信息。</li></ul><p>所有路由器都具有全网的拓扑结构图，并且是一致的。相比于 RIP，OSPF 的更新过程收敛的很快。</p><h4 id="3-外部网关协议-BGP"><a href="#3-外部网关协议-BGP" class="headerlink" title="3. 外部网关协议 BGP"></a>3. 外部网关协议 BGP</h4><p>BGP（Border Gateway Protocol，边界网关协议）</p><p>AS 之间的路由选择很困难，主要是由于：</p><ul><li>互联网规模很大；</li><li>各个 AS 内部使用不同的路由选择协议，无法准确定义路径的度量；</li><li>AS 之间的路由选择必须考虑有关的策略，比如有些 AS 不愿意让其它 AS 经过。</li></ul><p>BGP 只能寻找一条比较好的路由，而不是最佳路由。</p><p>每个 AS 都必须配置 BGP 发言人，通过在两个相邻 BGP 发言人之间建立 TCP 连接来交换路由信息。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/9cd0ae20-4fb5-4017-a000-f7d3a0eb3529.png" width="600"> </div><br><h2 id="网络应用模式"><a href="#网络应用模式" class="headerlink" title="网络应用模式"></a>网络应用模式</h2><ol><li>C/S模式和B/S模式。这里的C指的是Client（客户端），通常是一个需要安装到某个宿主操作系统上的应用程序；而B指的是Browser（浏览器），它几乎是所有图形化操作系统都默认安装了的一个应用软件；通过C或B都可以实现对S（服务器）的访问。关于二者的比较和讨论在网络上有一大堆的文章，在此我们就不再浪费笔墨了。</li><li>去中心化的网络应用模式。不管是B/S还是C/S都需要服务器的存在，服务器就是整个应用模式的中心，而去中心化的网络应用通常没有固定的服务器或者固定的客户端，所有应用的使用者既可以作为资源的提供者也可以作为资源的访问者。</li></ol><h2 id="地址解析协议ARP-Address-Resolution-Protocol"><a href="#地址解析协议ARP-Address-Resolution-Protocol" class="headerlink" title="地址解析协议ARP(Address Resolution Protocol)"></a>地址解析协议ARP(Address Resolution Protocol)</h2><p>功能<br>当主机通过数据链路发送数据的时候，IP 数据报会先被封装为一个数据帧，而MAC 地址会被添加到数据帧的报头（链路层介绍时已讲过）。</p><p>ARP 便是在这个过程中通过目标主机的 IP 地址，查询目标主机的 MAC 地址。</p><p>网络层实现主机之间的通信，而链路层实现具体每段链路之间的通信。因此在通信过程中，IP 数据报的源地址和目的地址始终不变，而 MAC 地址随着链路的改变而改变。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/66192382-558b-4b05-a35d-ac4a2b1a9811.jpg" width="700"> </div><br><p>ARP 实现由 IP 地址得到 MAC 地址。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/b9d79a5a-e7af-499b-b989-f10483e71b8b.jpg" width="500"> </div><br><p>每个主机都有一个 ARP 高速缓存，里面有本局域网上的各主机和路由器的 IP 地址到 MAC 地址的映射表。</p><p>如果主机 A 知道主机 B 的 IP 地址，但是 ARP 高速缓存中没有该 IP 地址到 MAC 地址的映射，此时主机 A 通过广播的方式发送 ARP 请求分组，主机 B 收到该请求后会发送 ARP 响应分组给主机 A 告知其 MAC 地址，随后主机 A 向其高速缓存中写入主机 B 的 IP 地址到 MAC 地址的映射。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8006a450-6c2f-498c-a928-c927f758b1d0.png" width="700"> </div><br>### 原理在你的电脑和路由器中都有一个 ARP 缓存表，其中保存的是近期(20 分钟)与自己有过通信的主机的 IP 地址与 MAC 地址的对应关系。<h3 id="RP-缓存表使用过程"><a href="#RP-缓存表使用过程" class="headerlink" title="RP 缓存表使用过程"></a>RP 缓存表使用过程</h3><ul><li>当主机要发送一个 IP 数据报的时候，会首先查询一下自己的 ARP 缓存表；</li><li>如果在 ARP 缓存表中找到对应的 MAC 地址，则将 IP 数据报封装为数据帧，把 MAC 地址放在帧首部，发送数据帧；</li><li>如果查询的 IP－MAC 值对不存在，那么主机就向网络中广播发送一个 ARP 请求数据帧，ARP 请求中包含待查询 IP 地址；</li><li>网络内所有收到 ARP 请求的主机查询自己的 IP 地址，如果发现自己符合条件，就回复一个 ARP 应答数据帧，其中包含自己的 MAC 地址；</li><li>收到 ARP 应答后，主机将其 IP - MAC 对应信息存入自己的 ARP 缓存，然后再据此封装 IP 数据报，再发送数据帧。</li></ul><h3 id="ARP-代理"><a href="#ARP-代理" class="headerlink" title="ARP 代理"></a>ARP 代理</h3><p>如果 ARP 请求是从一个网络上的主机发往另一个网络上的主机，那么连接这两个网络的路由器就可以回答该 ARP 请求，这个过程称作代理 ARP（Proxy ARP）。</p><p>当连接这两个网络的路由器收到该 ARP 请求时，它会发现自己有通向目的主机的路径，随后它会将自己（路由器）的 MAC 地址回复给源主机。源主机会认为路由器的 MAC 地址就是目的主机的 MAC 地址，而对于随后发来的数据帧，路由器会转发到它后面真实 MAC 地址的目的主机。</p><p>两个物理网络之间的路由器可以使这两个网络彼此透明化，在这种情况下，只要路由器设置成一个 ARP 代理，以响应一个网络到另一个网络主机的 ARP 请求，两个物理网络就可以使用相同的网络号。</p><h3 id="ARP-欺骗"><a href="#ARP-欺骗" class="headerlink" title="ARP 欺骗"></a>ARP 欺骗</h3><p>从 ARP 代理的原理可以看出来：IP - MAC 的对应信息很容易被伪造！黑客可以伪造 ARP 应答数据帧而欺骗 ARP 请求者，从而达到截获数据的目的。</p><h2 id="控制报文协议ICMP-Internet-Control-Message-Protocol"><a href="#控制报文协议ICMP-Internet-Control-Message-Protocol" class="headerlink" title="控制报文协议ICMP(Internet Control Message Protocol)"></a>控制报文协议ICMP(Internet Control Message Protocol)</h2><p>通信过程中发生各种问题时，ICMP 将问题反馈，通过这些信息，管理者可以对所发生的问题作出诊断，然后采取适当的措施去解决它。</p><p>ICMP 报文由 8 位错误类型、8 位条件代码和 16 位校验和组成，被封装在一个 IP 数据报中：</p><p><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548902527721.png"></p><p>报文的类型字段可以有 15 个不同的值，以便描述特定类型的 ICMP 报文，代码字段的值进一步描述不同的条件，各报文类型描述可参考 ICMP_百度百科</p><p>也有一些出现差错而不产生 ICMP 报文的情况，比如：</p><p>ICMP 差错报文；<br>目的地址是广播或多播地址；<br>作为链路层广播的数据报；<br>不是 IP 分片的第一片；<br>源地址不是单个主机的数据报（源不能为零地址、环回地址、广播多播地址）。</p><p>ICMP 是为了更有效地转发 IP 数据报和提高交付成功的机会。它封装在 IP 数据报中，但是不属于高层协议。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/e3124763-f75e-46c3-ba82-341e6c98d862.jpg" width="500"> </div><br><p>ICMP 报文分为差错报告报文和询问报文。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/aa29cc88-7256-4399-8c7f-3cf4a6489559.png" width="600"> </div><br><h3 id="1-Ping"><a href="#1-Ping" class="headerlink" title="1. Ping"></a>1. Ping</h3><p>ping 程序是对两台主机之间连通性进行测试的基本工具，它只是利用 ICMP 回显请求和回显应答报文，而不用经过传输层（TCP/UDP）。</p><p>ping 程序通过在 ICMP 报文数据中存放发送请求的时间值来计算往返时间，当应答返回时，用当前时间减去存放在 ICMP 报文中的时间值，即是往返时间。</p><p>Ping 的原理是通过向目的主机发送 ICMP Echo 请求报文，目的主机收到之后会发送 Echo 回答报文。Ping 会根据时间和成功响应的次数估算出数据包往返时间以及丢包率。</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>ping 程序使用方法为 ping IP 地址，ping 命令还可以加上参数，实现更多的功能：</p><p>-n 只输出数值；<br>-q 不显示任何传送封包的信息，只显示最后的结果；<br>-r 忽略普通的 Routing Table，直接将数据包送到远端主机上，通常是查看本机的网络接口是否有问题；<br>-R 记录路由过程；<br>-v 详细显示指令的执行过程；<br>-c 数目：在发送指定数目的包后停止；<br>-i 秒数：设定间隔几秒传送一个网络封包给一台机器，预设值是一秒送一次；<br>-t 存活数值：设置存活数值 TTL 的大小。</p><h4 id="Ping-命令判断操作系统"><a href="#Ping-命令判断操作系统" class="headerlink" title="Ping 命令判断操作系统"></a>Ping 命令判断操作系统</h4><p>ping 命令会返回一个 TTL 值，我们可以使用它来判断目标的操作系统类型。 常见操作系统缺省 TTL 值如下:</p><p>UNIX TTL: 255；<br>Linux TTL: 64；<br>WINDOWS 95/98 TTL: 32；<br>Windows NT 4.0/2000/XP/2003/7/8/10 TTL：128。</p><h3 id="Traceroute"><a href="#Traceroute" class="headerlink" title="Traceroute"></a>Traceroute</h3><p>Traceroute 是 ICMP 的另一个应用，用来跟踪一个分组从源点到终点的路径。</p><p>Traceroute 发送的 IP 数据报封装的是无法交付的 UDP 用户数据报，并由目的主机发送终点不可达差错报告报文。</p><ul><li>源主机向目的主机发送一连串的 IP 数据报。第一个数据报 P1 的生存时间 TTL 设置为 1，当 P1 到达路径上的第一个路由器 R1 时，R1 收下它并把 TTL 减 1，此时 TTL 等于 0，R1 就把 P1 丢弃，并向源主机发送一个 ICMP 时间超过差错报告报文；</li><li>源主机接着发送第二个数据报 P2，并把 TTL 设置为 2。P2 先到达 R1，R1 收下后把 TTL 减 1 再转发给 R2，R2 收下后也把 TTL 减 1，由于此时 TTL 等于 0，R2 就丢弃 P2，并向源主机发送一个 ICMP 时间超过差错报文。</li><li>不断执行这样的步骤，直到最后一个数据报刚刚到达目的主机，主机不转发数据报，也不把 TTL 值减 1。但是因为数据报封装的是无法交付的 UDP，因此目的主机要向源主机发送 ICMP 终点不可达差错报告报文。</li><li>之后源主机知道了到达目的主机所经过的路由器 IP 地址以及到达每个路由器的往返时间。</li></ul><h1 id="四-传输层（transport-layer）"><a href="#四-传输层（transport-layer）" class="headerlink" title="四. 传输层（transport layer）"></a>四. 传输层（transport layer）</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>提供应用进程间的逻辑通信机制<br>应用进程利用该服务传送应用层报文</p><ul><li>复用功能<br>多个应用层进程可同时使用下面运输层的服务</li><li>分用功能<br>运输层把收到的信息分别交付到上面应用层中的相应进程</li></ul><h2 id="运输层协议（端到端协议）"><a href="#运输层协议（端到端协议）" class="headerlink" title="运输层协议（端到端协议）"></a>运输层协议（端到端协议）</h2><p>发送方将应用递交的信息下传给网络层<br>接收方将接收的信息上交给应用层</p><h2 id="UDP用户数据报协议"><a href="#UDP用户数据报协议" class="headerlink" title="UDP用户数据报协议"></a>UDP用户数据报协议</h2><p>UDP 数据报可分为两部分：UDP 报头和数据部分。其中数据部分是应用层交付下来的数据。UDP 报头总共 8 字节，而这 8 字节又分为 4 个字段：<br><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548918088748.png"><br>源端口：2 字节，在对方需要回信时可用，不需要时可以全 0；</p><p>目的端口：2 字节，必须，也是最重要的字段；</p><p>长度：2 字节，长度值包括报头和数据部分；</p><p>校验和：2 字节，用于检验 UDP 数据报在传输过程中是否有出错，有错就丢弃。</p><h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><p>UDP 是无连接的，发送数据之前不需要建立连接(而 TCP 需要)，减少了开销和时延。<br>UDP尽最大努力交付，不保证交付可靠性。<br>UDP 是面向报文的，对于从应用层交付下来的 IP 数据报，只做很简单的封装(8 字节 UDP 报头)，首部开销小。<br>UDP 没有拥塞控制，出现网络拥塞时发送方也不会降低发送速率。这种特性对某些实时应用是很重要的，比如 IP 电话，视频会议等，它们允许拥塞时丢失一些数据，因为如果不抛弃这些数据，极可能造成时延的累积。<br>UDP 支持一对一、一对多、多对一和多对多的交互通信。<br>收到UDP报后，不需要给出确定</p><p>是不安全的，就是你去邮局寄信，信能不能到达对方手里，对方是否知道你写信了，这些都是未知的。在传输过程中数据可能会丢失，也就是丢包</p><p>从应用层到传输层，再到网络层的各层次封装：<br><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548917382675.png"></p><h2 id="TCP传输控制协议"><a href="#TCP传输控制协议" class="headerlink" title="TCP传输控制协议"></a>TCP传输控制协议</h2><p>数据传输单位是报文段  </p><p>TCP 是面向字节流的，而 TCP 传输数据的单元是 报文段 。一个 TCP 报文段可分为两部分：报头和数据部分。数据部分是上层应用交付的数据，而报头则是 TCP 功能的关键。</p><p>TCP 报文段的报头有前 20 字节的固定部分，后面 4n 字节是根据需要而添加的字段。如图则是 TCP 报文段结构：<br><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548921882697.png"></p><ul><li>源端口和目的端口:各占 2 个字节，分别写入源端口号和目的端口号。这和 UDP 报头有类似之处，因为都是传输层协议。</li><li>序号:占 4 字节序，序号范围[0，2^32-1]，序号增加到 2^32-1 后，下个序号又回到 0。TCP 是面向字节流的，通过 TCP 传送的字节流中的每个字节都按顺序编* 号，而报头中的序号字段值则指的是本报文段数据的第一个字节的序号。</li><li>确认序号:占 4 字节，期望收到对方下个报文段的第一个数据字节的序号。</li><li>数据偏移:占 4 位，指 TCP 报文段的报头长度，包括固定的 20 字节和选项字段。</li><li>保留:占 6 位，保留为今后使用，目前为 0。</li><li>控制位:共有 6 个控制位，说明本报文的性质，意义如下：<br>  URG 紧急:当 URG=1 时，它告诉系统此报文中有紧急数据，应优先传送(比如紧急关闭)，这要与紧急指针字段配合使用。<br>  ACK 确认:仅当 ACK=1 时确认号字段才有效。建立 TCP 连接后，所有报文段都必须把 ACK 字段置为 1。<br>  PSH 推送:若 TCP 连接的一端希望另一端立即响应，PSH 字段便可以“催促”对方，不再等到缓存区填满才发送。<br>  RST复位:若 TCP 连接出现严重差错，RST 置为 1，断开 TCP 连接，再重新建立连接。<br>  SYN 同步:用于建立和释放连接，稍后会详细介绍。<br>  FIN 终止:用于释放连接，当 FIN=1，表明发送方已经发送完毕，要求释放 TCP 连接。</li><li>窗口:占 2 个字节。窗口值是指发送者自己的接收窗口大小，因为接收缓存的空间有限。</li><li>检验和:2 个字节。和 UDP 报文一样，有一个检验和，用于检查报文是否在传输过程中出差错。</li><li>紧急指针:2 字节。当 URG=1 时才有效，指出本报文段紧急数据的字节数。</li><li>选项:长度可变，最长可达 40 字节。具体的选项字段，需要时再做介绍。</li></ul><h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><p>TCP 提供 可靠的 数据传输服务，TCP 是 面向连接的 。应用程序在使用 TCP 通信之前，先要建立连接，这是一个类似“打电话”的过程，通信结束后还要“挂电话”。<br>TCP 连接是 点对点 的，一条 TCP 连接只能连接两个端点。<br>TCP 提供可靠传输，无差错、不丢失、不重复、按顺序。<br>TCP 提供 全双工 通信，允许通信双方任何时候都能发送数据，因为 TCP 连接的两端都设有发送缓存和接收缓存。<br>TCP 面向 字节流 。TCP 并不知道所传输的数据的含义，仅把数据看作一连串的字节序列，它也不保证接收方收到的数据块和发送方发出的数据块具有大小对应关系。<br>有流量控制和拥塞控制</p><h3 id="建立连接"><a href="#建立连接" class="headerlink" title="建立连接"></a>建立连接</h3><p>TCP 是面向连接的，在传输 TCP 报文段之前先要创建连接，发起连接的一方被称为客户端，而响应连接请求的一方被称为服务端，而这个创建连接的过程被称为三次握手：<br><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548922782588.png"><br><strong>三次握手</strong><br>    第一次：当客户端向服务端发起连接时，会先发送一段称为SYN包的连接请求数据，请求建立连接<br>    第二次：服务端收到请求后，如果同意连接，则回复一个确认应答（ACK）和同步序列（SYN）的数据段<br>    第三次:客户端收到之后，再发送一个确认应答(ACK包)，建立连接，开始传输实际数据</p><ul><li>客户端发出请求连接报文段，其中报头控制位 SYN=1，初始序号 seq=x。客户端进入 SYN-SENT(同步已发送)状态。</li><li>服务端收到请求报文段后，向客户端发送确认报文段。确认报文段的首部中 SYN=1，ACK=1，确认号是 ack=x+1，同时为自己选择一个初始序号 seq=y。服务端进入 SYN-RCVD（同步收到）状态。</li><li>客户端收到服务端的确认报文段后，还要给服务端发送一个确认报文段。这个报文段中 ACK=1，确认号 ack=y+1，而自己的序号 seq=x+1。这个报文段已经可以携带数据，如果不携带数据则不消耗序号，则下一个报文段序号仍为 seq=x+1。</li></ul><p>至此 TCP 连接已经建立，客户端进入 ESTABLISHED（已建立连接）状态，当服务端收到确认后，也进入 ESTABLISHED 状态，它们之间便可以正式传输数据了。<br><strong>为什么要三次握手而不是两次握手？</strong><br>这是为了防止，因为已失效的请求报文，突然又传到服务器，引起错误</p><p>假设采用两次握手建立连接，客户端向服务端发送一个syn包请求建立连接，因为某些未知的原因，并没有到达服务器，在中间某个网络节点产生了滞留，为了建立连接，客户端会重发syn包，这次的数据包正常送达，服务端发送syn+ack之后就建立起了连接。</p><p>但是第一包数据阻塞的网络突然恢复，第一包syn包又送达到服务端，这时服务端会认为客户端又发起了一个新的连接，从而在两次握手之后进入等待数据状态，服务端认为是两个连接，而客户端认为是一个连接，造成了状态不一致，如果在三次握手的情况下，服务端收不到最后的ack包，自然不会认为连接建立成功。</p><p>所以三次握手本质上来说就是为了解决网络信道不可靠的问题，为了在不可靠的信道上建立起可靠的连接，经过三次握手之后，客户端和服务端都进入了数据传输状态。</p><h3 id="释放连接-四次挥手"><a href="#释放连接-四次挥手" class="headerlink" title="释放连接-四次挥手"></a>释放连接-四次挥手</h3><p>当传输数据结束后，通信双方都可以释放连接，这个释放连接过程被称为释放连接:</p><p><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548923334867.png"></p><ul><li>此时 TCP 连接两端都还处于 ESTABLISHED 状态，客户端停止发送数据，并发出一个 FIN 报文段。首部 FIN=1，序号 seq=u（u 等于客户端传输数据最后一字节的序号加 1）。客户端进入 FIN-WAIT-1（终止等待 1）状态。</li><li>服务端回复确认报文段，确认号 ack=u+1，序号 seq=v（v 等于服务端传输数据最后一字节的序号加 1），服务端进入 CLOSE-WAIT（关闭等待）状态。现在 TCP 连接处于半开半闭状态，服务端如果继续发送数据，客户端依然接收。</li><li>客户端收到确认报文，进入 FIN-WAIT-2 状态，服务端发送完数据后，发出 FIN 报文段，FIN=1，确认号 ack=u+1，然后进入 LAST-ACK(最后确认)状态。</li><li>客户端回复确认报文段，ACK=1，确认号 ack=w+1（w 为半开半闭状态时，收到的最后一个字节数据的编号） ，序号 seq=u+1，然后进入 TIME-WAIT（时间等待）状态。</li></ul><p>注意此时连接还没有释放，需要时间等待状态结束后（4 分钟）连接两端才会 CLOSED。设置时间等待是因为，有可能最后一个确认报文丢失而需要重传</p><p>处于连接状态的客户端和服务端，都可以发起关闭连接请求，此时需要四次挥手来进行连接关闭。</p><ul><li>假设客户端主动发起连接关闭请求，他给服务端发起一包FIN包，标识要关闭连接，自己进入终止等待1装填，</li><li>服务端收到FIN包，发送一包ACK包，标识自己进入了关闭等待状态，客户端进入终止等待2状态，这是第二次挥手，</li><li>服务端此时还可以发送未发送的数据，而客户端还可以接受数据，待服务端发送完数据之后，发送一包FIN包，最后进入确认状态，这是第3次挥手，</li><li>客户端收到之后恢复ACK包，进入超时等待状态，经过超时时间后关闭连接，而服务端收到ACK包后，立即关闭连接，这是第四次挥手。</li></ul><p>为什么客户端要等待超时时间？这是为了保证对方已经收到ACK包，因为假设客户端发送完最后一包ACK包后释放了连接，一旦ACK包在网络中丢失，服务端将一直停留在 最后确认状态，如果等待一段时间，这时服务端会因为没有收到ack包重发FIN包，客户端会响应 这个FIN包进行重发ack包，并刷新超时时间，这个机制跟第三次握手一样。也是为了保证在不可靠的网络链路中进行可靠的连接断开确认</p><h3 id="TCP-可靠传输的实现"><a href="#TCP-可靠传输的实现" class="headerlink" title="TCP 可靠传输的实现"></a>TCP 可靠传输的实现</h3><p>TCP 报文段的长度可变，根据收发双方的缓存状态、网络状态而调整。<br>当 TCP 收到发自 TCP 连接另一端的数据，它将发送一个确认。<br>当 TCP 发出一个报文段后，它启动一个定时器，等待目的端确认收到这个报文段，如果不能及时收到一个确认，将重发这个报文段。这就是稍后介绍的超时重传。<br>TCP 将保持它首部和数据的检验和。如果通过检验和发现报文段有差错，这个报文段将被丢弃，等待超时重传。<br>TCP 将数据按字节排序，报文段中有序号，以确保顺序的正确性。<br>TCP 还能提供流量控制。TCP 连接的每一方都有收发缓存。TCP 的接收端只允许另一端发送接收端缓冲区所能接纳的数据。这将防止较快主机致使较慢主机的缓冲区溢出。<br>可见超时重发机制是 TCP 可靠性的关键，只要没有得到确认报文段，就重新发送数据报，直到收到对方的确认为止。</p><h3 id="超时重传"><a href="#超时重传" class="headerlink" title="超时重传"></a>超时重传</h3><p>TCP 规定，接收者收到数据报文段后，需回复一个确认报文段，以告知发送者数据已经收到。而发送者如果一段时间内（超时计时器）没有收到确认报文段，便重复发送。</p><p>为了实现超时间重传，需要注意：</p><p>发送者发送一个报文段后，暂时保存该报文段的副本，为发生超时重传时使用，收到确认报文后删除该报文段。<br>确认报文段也需要序号，才能明确是发出去的哪个数据报得到了确认。<br>超时计时器比传输往返时间略长，但具体值是不确定的，根据网络情况而变</p><h3 id="连续-ARQ-协议"><a href="#连续-ARQ-协议" class="headerlink" title="连续 ARQ 协议"></a>连续 ARQ 协议</h3><p>也许你也发现了，按上面的介绍，超时重传机制很费时间，每发送一个数据报都要等待确认。</p><p>在实际应用中的确不是这样的，真实情况是，采用了流水线传输：发送方可以连续发送多个报文段(连续发送的数据长度叫做窗口)，而不必每发完一段就停下来等待确认。</p><p>实际应用中，接收方也不必对收到的每个报文都做回复，而是采用累积确认方式：接收者收到多个连续的报文段后，只回复确认最后一个报文段，表示在这之前的数据都已收到。</p><p>这样，传输效率得到了很大的提升。</p><h3 id="流量控制和拥塞控制"><a href="#流量控制和拥塞控制" class="headerlink" title="流量控制和拥塞控制"></a>流量控制和拥塞控制</h3><p>由于接收方缓存的限制，发送窗口不能大于接收方接收窗口。在报文段首部有一个字段就叫做**窗口(rwnd)**，这便是用于告诉对方自己的接收窗口，可见窗口的大小是可以变化的。</p><p>那么窗口的大小是如何变化的呢？TCP 对于拥塞的控制总结为“慢启动、加性增、乘性减”，如图所示：<br><img src="https://dn-simplecloud.shiyanlou.com/uid/8797/1548990633088.png"></p><p>慢启动 ：初始的窗口值很小，但是按指数规律渐渐增长，直到达到**慢开始门限(ssthresh)**。<br>加性增 ：窗口值达到慢开始门限后，每发送一个报文段，窗口值增加一个单位量。<br>乘性减 ：无论什么阶段，只要出现超时，则把窗口值减小一半。</p><h2 id="TCP和UDP的区别"><a href="#TCP和UDP的区别" class="headerlink" title="TCP和UDP的区别"></a>TCP和UDP的区别</h2><p>tcp和udp都是工作在传输层，用于程序之间传输数据的。数据一般包含：文件类型，视频类型，jpg图片等。</p><p>tcp是基于连接的，传输数据稳定可靠，适用于对网络通讯质量要求较高的场景，需要准确无误的传输给对方，比如，传输文件，发送邮件，浏览网页等等</p><p>udp是基于非连接的，优点是速度快，但是可能产生丢包，所以适用于对实时性要求较高但是对少量丢包并没有太大要求的场景。比如：域名查询，语音通话，视频直播等。udp还有一个非常重要的应用场景就是隧道网络，比如：VXLAN</p><h2 id="socket套接字"><a href="#socket套接字" class="headerlink" title="socket套接字"></a>socket套接字</h2><p>套接字这个词对很多不了解网络编程的人来说显得非常晦涩和陌生，其实说得通俗点，套接字就是一套用<a href="https://zh.wikipedia.org/wiki/C%E8%AF%AD%E8%A8%80">C语言</a>写成的应用程序开发库，主要用于实现进程间通信和网络编程，在网络应用开发中被广泛使用。在Python中也可以基于套接字来使用传输层提供的传输服务，并基于此开发自己的网络应用。实际开发中使用的套接字可以分为三类：流套接字（TCP套接字）、数据报套接字和原始套接字。</p><h3 id="TCP套接字"><a href="#TCP套接字" class="headerlink" title="TCP套接字"></a>TCP套接字</h3><p>所谓TCP套接字就是使用TCP协议提供的传输服务来实现网络通信的编程接口。在Python中可以通过创建socket对象并指定type属性为SOCK_STREAM来使用TCP套接字。由于一台主机可能拥有多个IP地址，而且很有可能会配置多个不同的服务，所以作为服务器端的程序，需要在创建套接字对象后将其绑定到指定的IP地址和端口上。这里的端口并不是物理设备而是对IP地址的扩展，用于区分不同的服务，例如我们通常将HTTP服务跟80端口绑定，而MySQL数据库服务默认绑定在3306端口，这样当服务器收到用户请求时就可以根据端口号来确定到底用户请求的是HTTP服务器还是数据库服务器提供的服务。端口的取值范围是0~65535，而1024以下的端口我们通常称之为“著名端口”（留给像FTP、HTTP、SMTP等“著名服务”使用的端口，有的地方也称之为“周知端口”），自定义的服务通常不使用这些端口，除非自定义的是HTTP或FTP这样的著名服务。</p><p>下面的代码实现了一个提供时间日期的服务器。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    <span class="comment"># family=AF_INET - IPv4地址</span></span><br><span class="line">    <span class="comment"># family=AF_INET6 - IPv6地址</span></span><br><span class="line">    <span class="comment"># type=SOCK_STREAM - TCP套接字</span></span><br><span class="line">    <span class="comment"># type=SOCK_DGRAM - UDP套接字</span></span><br><span class="line">    <span class="comment"># type=SOCK_RAW - 原始套接字</span></span><br><span class="line">    server = socket(family=AF_INET, <span class="built_in">type</span>=SOCK_STREAM)</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(端口用于区分不同的服务)</span></span><br><span class="line">    <span class="comment"># 同一时间在同一个端口上只能绑定一个服务否则报错</span></span><br><span class="line">    server.bind((<span class="string">'192.168.1.2'</span>, <span class="number">6789</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    <span class="comment"># 参数512可以理解为连接队列的大小</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="comment"># 4.通过循环接收客户端的连接并作出相应的处理(提供服务)</span></span><br><span class="line">        <span class="comment"># accept方法是一个阻塞方法如果没有客户端连接到服务器代码不会向下执行</span></span><br><span class="line">        <span class="comment"># accept方法返回一个元组其中的第一个元素是客户端对象</span></span><br><span class="line">        <span class="comment"># 第二个元素是连接到服务器的客户端的地址(由IP和端口两部分构成)</span></span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(addr) + <span class="string">'连接到了服务器.'</span>)</span><br><span class="line">        <span class="comment"># 5.发送数据</span></span><br><span class="line">        client.send(<span class="built_in">str</span>(datetime.now()).encode(<span class="string">'utf-8'</span>))</span><br><span class="line">        <span class="comment"># 6.断开连接</span></span><br><span class="line">        client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行服务器程序后我们可以通过Windows系统的telnet来访问该服务器，结果如下图所示。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">telnet 192.168.1.2 6789</span><br></pre></td></tr></tbody></table></figure><p><img src="./res/telnet.png"></p><p>当然我们也可以通过Python的程序来实现TCP客户端的功能，相较于实现服务器程序，实现客户端程序就简单多了，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 1.创建套接字对象默认使用IPv4和TCP协议</span></span><br><span class="line">    client = socket()</span><br><span class="line">    <span class="comment"># 2.连接到服务器(需要指定IP地址和端口)</span></span><br><span class="line">    client.connect((<span class="string">'192.168.1.2'</span>, <span class="number">6789</span>))</span><br><span class="line">    <span class="comment"># 3.从服务器接收数据</span></span><br><span class="line">    <span class="built_in">print</span>(client.recv(<span class="number">1024</span>).decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    client.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>需要注意的是，上面的服务器并没有使用多线程或者异步I/O的处理方式，这也就意味着当服务器与一个客户端处于通信状态时，其他的客户端只能排队等待。很显然，这样的服务器并不能满足我们的需求，我们需要的服务器是能够同时接纳和处理多个用户请求的。下面我们来设计一个使用多线程技术处理多个用户请求的服务器，该服务器会向连接到服务器的客户端发送一张图片。</p><p>服务器端代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket, SOCK_STREAM, AF_INET</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> dumps</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 自定义线程类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">FileTransferHandler</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, cclient</span>):</span></span><br><span class="line">            <span class="built_in">super</span>().__init__()</span><br><span class="line">            self.cclient = cclient</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">            my_dict = {}</span><br><span class="line">            my_dict[<span class="string">'filename'</span>] = <span class="string">'guido.jpg'</span></span><br><span class="line">            <span class="comment"># JSON是纯文本不能携带二进制数据</span></span><br><span class="line">            <span class="comment"># 所以图片的二进制数据要处理成base64编码</span></span><br><span class="line">            my_dict[<span class="string">'filedata'</span>] = data</span><br><span class="line">            <span class="comment"># 通过dumps函数将字典处理成JSON字符串</span></span><br><span class="line">            json_str = dumps(my_dict)</span><br><span class="line">            <span class="comment"># 发送JSON字符串</span></span><br><span class="line">            self.cclient.send(json_str.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">            self.cclient.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 1.创建套接字对象并指定使用哪种传输服务</span></span><br><span class="line">    server = socket()</span><br><span class="line">    <span class="comment"># 2.绑定IP地址和端口(区分不同的服务)</span></span><br><span class="line">    server.bind((<span class="string">'192.168.1.2'</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 3.开启监听 - 监听客户端连接到服务器</span></span><br><span class="line">    server.listen(<span class="number">512</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'服务器启动开始监听...'</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'guido.jpg'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将二进制数据处理成base64再解码成字符串</span></span><br><span class="line">        data = b64encode(f.read()).decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        client, addr = server.accept()</span><br><span class="line">        <span class="comment"># 启动一个线程来处理客户端的请求</span></span><br><span class="line">        FileTransferHandler(client).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>客户端代码：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> socket <span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    client = socket()</span><br><span class="line">    client.connect((<span class="string">'192.168.1.2'</span>, <span class="number">5566</span>))</span><br><span class="line">    <span class="comment"># 定义一个保存二进制数据的对象</span></span><br><span class="line">    in_data = <span class="built_in">bytes</span>()</span><br><span class="line">    <span class="comment"># 由于不知道服务器发送的数据有多大每次接收1024字节</span></span><br><span class="line">    data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> data:</span><br><span class="line">        <span class="comment"># 将收到的数据拼接起来</span></span><br><span class="line">        in_data += data</span><br><span class="line">        data = client.recv(<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 将收到的二进制数据解码成JSON字符串并转换成字典</span></span><br><span class="line">    <span class="comment"># loads函数的作用就是将JSON字符串转成字典对象</span></span><br><span class="line">    my_dict = loads(in_data.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    filename = my_dict[<span class="string">'filename'</span>]</span><br><span class="line">    filedata = my_dict[<span class="string">'filedata'</span>].encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/Hao/'</span> + filename, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="comment"># 将base64格式的数据解码成二进制数据并写入文件</span></span><br><span class="line">        f.write(b64decode(filedata))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'图片已保存.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在这个案例中，我们使用了JSON作为数据传输的格式（通过JSON格式对传输的数据进行了序列化和反序列化的操作），但是JSON并不能携带二进制数据，因此对图片的二进制数据进行了Base64编码的处理。Base64是一种用64个字符表示所有二进制数据的编码方式，通过将二进制数据每6位一组的方式重新组织，刚好可以使用0~9的数字、大小写字母以及“+”和“/”总共64个字符表示从<code>000000</code>到<code>111111</code>的64种状态。<a href="https://zh.wikipedia.org/wiki/Base64">维基百科</a>上有关于Base64编码的详细讲解，不熟悉Base64的读者可以自行阅读。</p><blockquote><p><strong>说明：</strong> 上面的代码主要为了讲解网络编程的相关内容因此并没有对异常状况进行处理，请读者自行添加异常处理代码来增强程序的健壮性。</p></blockquote><h3 id="UDP套接字"><a href="#UDP套接字" class="headerlink" title="UDP套接字"></a>UDP套接字</h3><p>传输层除了有可靠的传输协议TCP之外，还有一种非常轻便的传输协议叫做用户数据报协议，简称UDP。TCP和UDP都是提供端到端传输服务的协议，二者的差别就如同打电话和发短信的区别，后者不对传输的可靠性和可达性做出任何承诺从而避免了TCP中握手和重传的开销，所以在强调性能和而不是数据完整性的场景中（例如传输网络音视频数据），UDP可能是更好的选择。可能大家会注意到一个现象，就是在观看网络视频时，有时会出现卡顿，有时会出现花屏，这无非就是部分数据传丢或传错造成的。在Python中也可以使用UDP套接字来创建网络应用，对此我们不进行赘述，有兴趣的读者可以自行研究。</p><h1 id="五-应用层（application-layer）"><a href="#五-应用层（application-layer）" class="headerlink" title="五.应用层（application layer）"></a>五.应用层（application layer）</h1><p>不同类型的网络应用有不同的通信规则，因此应用层协议是多种多样的</p><p>应用程序通过这一层访问网络，常见 FTP、HTTP、DNS 和 TELNET 协议；</p><p>任务是通过应用进程间的交互来完成特定网络应用<br>进程指的是主机正在运行的程序<br>应用层交互的数据单元称为报文  </p><h2 id="应用层协议"><a href="#应用层协议" class="headerlink" title="应用层协议"></a>应用层协议</h2><p>定义的是应用进程间通信和交互的规则</p><p>IP 地址<br>域名<br>MAC 地址<br>端口号<br>封装和分用</p><h2 id="DNS-协议"><a href="#DNS-协议" class="headerlink" title="DNS 协议"></a>DNS 协议</h2><p>DNS（Domain Name Service 域名服务）协议基于 UDP，使用端口号 53。</p><p>由数字组成的 IP 地址很难记忆，所以我们上网使用网站 IP 地址的别名——域名。实际使用中，域名与 IP 地址是对应的，这种对应关系保存在DNS 服务器之中。</p><p>在浏览器中输入一个域名后，会有 DNS 服务器将域名解析为对应的 IP 地址。注意这和网络层的 ARP 协议的不同之处：DNS 提供的是域名与 IP 地址的对应关系，而 ARP 提供的是 IP 地址和 MAC 地址的对应关系。</p><p>DNS 服务器是个分层次的系统：</p><ul><li>根 DNS 服务器 ：全世界共有 13 台根域名服务器，编号 A 到 M，其中大部分位于美国。</li><li>顶级(TLD)DNS 服务器 ：负责如 com、org、edu 等顶级域名和所有国家的顶级域名（如 cn 、uk 、jp）。</li><li>权威 DNS 服务器 ：大型组织、大学、企业的域名解析服务。</li><li>本地 DNS 服务器 ：通常与我们主机最近的 DNS 服务器。</li></ul><p>而域名解析的过程，有迭代查询和递归查询两种方式：</p><h3 id="DNS-报文"><a href="#DNS-报文" class="headerlink" title="DNS 报文"></a>DNS 报文</h3><p>主机向 DNS 服务器发出的查询叫做DNS 报文，问答报文的内容，都是 IP 和域名的对应信息，问题中包含域名，类型，类信息，回答中包含指针，类型，类，TTL，长度，IP 地址信息。</p><h3 id="DNS-缓存和-hosts-文件"><a href="#DNS-缓存和-hosts-文件" class="headerlink" title="DNS 缓存和 hosts 文件"></a>DNS 缓存和 hosts 文件</h3><p>之前 DNS 解析查询过程的图中，共发出了 8 份 DNS 报文，这是非常消耗时间的，所以实际应用上使用 DNS 缓存 ：当一个 DNS 服务器接收到一个 DNS 回答后，会将其信息缓存一段时间，当再有一个对相同域名的查询时，便可直接回复。</p><p>通过 DNS 缓存，其实很多查询都只需要本地 DNS 服务器便可完成。</p><p>我们可以用 dig 命令进行域名查询：</p><h2 id="文件传输协议FTP"><a href="#文件传输协议FTP" class="headerlink" title="文件传输协议FTP"></a>文件传输协议FTP</h2><p>FTP（File Transfer Protocol 文件传输协议）基于 TCP，使用端口号 20（数据）和 21（控制）。</p><p>它的主要功能是减少或消除在不同操作系统下处理文件的不兼容性，以达到便捷高效的文件传输效果。</p><ul><li>FTP 只提供文件传输的基本服务，它采用 客户端—服务器 的方式，一个 FTP 服务器可同时为多个客户端提供服务。</li><li>在进行文件传输时，FTP 的客户端和服务器之间会建立两个 TCP 连接：21 号端口建立控制连接，20 号端口建立数据连接。</li><li>FTP 的传输有两种方式：ASCII 传输模式和二进制数据传输模式。</li></ul><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><p>HTTP (HyperText Transfer Protocol 超文本传输协议) 基于 TCP，使用端口号 80 或 8080。</p><p>每当你在浏览器里输入一个网址或点击一个链接时，浏览器就通过 HTTP 协议将网页信息从服务器提取再显示出来，这是现在使用频率最大的应用层协议。</p><p>这个原理很简单：</p><p>点击一个链接后，浏览器向服务器发起 TCP 连接；<br>连接建立后浏览器发送 HTTP 请求报文，然后服务器回复响应报文；<br>浏览器将收到的响应报文内容显示在网页上；<br>报文收发结束，关闭 TCP 连接。</p><p>HTTP 报文会被传输层封装为 TCP 报文段，然后再被 IP 层封装为 IP 数据报。</p><p><strong>基于HTTP协议的网络资源访问</strong><br>HTTP是超文本传输协议（Hyper-Text Transfer Proctol）的简称，ll<br>通过HTTP或者HTTPS（超文本传输安全协议）请求的资源由URI（统一资源标识符）来标识。<br>通过HTTP我们可以获取网络上的（基于字符的）资源，<br>开发中经常会用到的网络API（有的地方也称之为网络数据接口）就是基于HTTP来实现数据传输的。</p><h3 id="URL-统一资源定位符"><a href="#URL-统一资源定位符" class="headerlink" title="URL(统一资源定位符)"></a>URL(统一资源定位符)</h3><p>HTTP 使用 URL（Uniform Resource Locator，统一资源定位符）来定位资源，它是  URI（<strong>U</strong>niform <strong>R</strong>esource <strong>I</strong>dentifier，统一资源标识符）的子集，URL 在 URI 的基础上增加了定位能力。</p><p>URI 除了包含 URL，还包含 URN（Uniform Resource Name，统一资源名称），它只是用来定义一个资源的名称，并不具备定位该资源的能力。例如 urn:isbn:0451450523 用来定义一个书籍名称，但是却没有表示怎么找到这本书。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/8441b2c4-dca7-4d6b-8efb-f22efccaf331.png" width="500px"> </div><br><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6">wikipedia：统一资源标志符</a></li><li><a href="https://en.wikipedia.org/wiki/URL">wikipedia: URL</a></li><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.2.2">rfc2616：3.2.2 http URL</a></li><li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn">What is the difference between a URI, a URL and a URN?</a></li></ul><p> URL 主要由以下几部分组成<br><code>scheme://host:port/path?key=value</code></p><ul><li><p>scheme：代表的是访问的协议，一般为 http 或者 https。例如，<a href="https://www.baidu.com/">https://www.baidu.com</a> 的协议是 https；</p></li><li><p>host：主机的Ip地址或者域名，例如，<a href="https://www.baidu.com/">https://www.baidu.com</a> 的 host 为 <a href="http://www.baidu.com;/">www.baidu.com；</a></p></li><li><p>port：端口号，http 协议默认使用 80 端口，https 协议默认使用 443 端口。通常情况下，使用默认值，不需要显式的写明端口号，例如，<a href="https://www.baidu.com/">https://www.baidu.com</a> 的端口是 443。某些情况下，可以显式的写明端口号，例如，<a href="http://localhost:5000/">http://localhost:5000</a> 的端口号是 5000；</p></li><li><p>path：页面路径，例如：<a href="http://www.imooc.com/wiki/html5">http://www.imooc.com/wiki/html5</a> 的 path 是 wiki/html5；</p></li><li><p>key=value：查询字符串，例如：<a href="https://www.baidu.com/s?wd=python">https://www.baidu.com/s?wd=python</a>，查询字符串是 wd=python，查询字符串包括两部分：参数名和参数值，这个例子中，参数名是 wd，参数值是 python。</p></li></ul><h3 id="http请求报文"><a href="#http请求报文" class="headerlink" title="http请求报文"></a>http请求报文</h3><p>客户端发送一个请求报文给服务器，服务器根据请求报文中的信息进行处理，并将处理结果放入响应报文中返回给客户端。</p><p>请求报文结构：</p><ul><li>第一行是请求行（request line）包含了请求方法、URL、协议版本；</li><li>接下来的多行都是请求头部（headers，请求头由若干键值对构成，包含了浏览器、编码方式、首选语言、缓存策略等信息；</li><li>一个空行（blank line）用来分隔首部和内容主体 Body</li><li>最后是请求的内容主体，请求数据（request body）</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET http://www.example.com/ HTTP/1.1</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9</span><br><span class="line">Accept-Encoding: gzip, deflate</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">Host: www.example.com</span><br><span class="line">If-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">If-None-Match: "3147526947+gzip"</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Upgrade-Insecure-Requests: 1</span><br><span class="line">User-Agent: Mozilla/5.0 xxx</span><br><span class="line"></span><br><span class="line">param1=1&amp;param2=2</span><br></pre></td></tr></tbody></table></figure><h3 id="http方法"><a href="#http方法" class="headerlink" title="http方法"></a>http方法</h3><p>客户端发送的   <strong>请求报文</strong>   第一行为请求行，包含了方法字段。</p><ul><li>1.GET-</li></ul><blockquote><p>获取资源</p></blockquote><p>当前网络请求中，绝大部分使用的是 GET 方法。</p><ul><li>2.HEAD</li></ul><blockquote><p>获取报文首部</p></blockquote><p>和 GET 方法类似，但是不返回报文实体主体部分。</p><p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p><ul><li>3.POST</li></ul><blockquote><p>传输实体主体</p></blockquote><p>POST 主要用来传输数据，而 GET 主要用来获取资源。</p><p>更多 POST 与 GET 的比较请见第九章。</p><ul><li>4.PUT</li></ul><blockquote><p>上传文件</p></blockquote><p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>New File<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>5.PATCH</li></ul><blockquote><p>对资源进行部分修改</p></blockquote><p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></tbody></table></figure><ul><li>6.DELETE</li></ul><blockquote><p>删除文件</p></blockquote><p>与 PUT 功能相反，并且同样不带验证机制。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><ul><li>7.OPTIONS</li></ul><blockquote><p>查询支持的方法</p></blockquote><p>查询指定的 URL 能够支持的方法。</p><p>会返回 <code>Allow: GET, POST, HEAD, OPTIONS</code> 这样的内容。</p><ul><li>8.CONNECT</li></ul><blockquote><p>要求在与代理服务器通信时建立隧道</p></blockquote><p>使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></tbody></table></figure><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/dc00f70e-c5c8-4d20-baf1-2d70014a97e3.jpg" width=""> </div><br><ul><li>9.TRACE</li></ul><blockquote><p>追踪路径</p></blockquote><p>服务器会将通信路径返回给客户端。</p><p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p><p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪）。</p><ul><li><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">rfc2616：9 Method Definitions</a></li></ul><h3 id="http响应报文"><a href="#http响应报文" class="headerlink" title="http响应报文"></a>http响应报文</h3><p>响应报文结构：</p><ul><li>第一行是响应行包含协议版本、状态码以及描述，最常见的是 200 OK 表示请求成功了</li><li>响应头，包含了一系列服务器的信息，以及服务器对请求的响应。</li><li>一个空行分隔首部和内容主体</li><li>最后是响应体，是服务器根据客户端的请求返回给客户端的具体数据。可能是 HTML 页面，也有可能是JSON或二进制数据等</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Age: 529651</span><br><span class="line">Cache-Control: max-age=604800</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 648</span><br><span class="line">Content-Type: text/html; charset=UTF-8</span><br><span class="line">Date: Mon, 02 Nov 2020 17:53:39 GMT</span><br><span class="line">Etag: "3147526947+ident+gzip"</span><br><span class="line">Expires: Mon, 09 Nov 2020 17:53:39 GMT</span><br><span class="line">Keep-Alive: timeout=4</span><br><span class="line">Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT</span><br><span class="line">Proxy-Connection: keep-alive</span><br><span class="line">Server: ECS (sjc/16DF)</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Cache: HIT</span><br><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Example Domain&lt;/title&gt;</span><br><span class="line"> // 省略... </span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>服务器返回的   <strong>响应报文</strong>   中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p><table><thead><tr><th align="center">状态码</th><th align="center">类别</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">1XX</td><td align="center">Informational（信息性状态码）</td><td align="center">接收的请求正在处理</td></tr><tr><td align="center">2XX</td><td align="center">Success（成功状态码）</td><td align="center">请求正常处理完毕</td></tr><tr><td align="center">3XX</td><td align="center">Redirection（重定向状态码）</td><td align="center">需要进行附加操作以完成请求</td></tr><tr><td align="center">4XX</td><td align="center">Client Error（客户端错误状态码）</td><td align="center">服务器无法处理请求</td></tr><tr><td align="center">5XX</td><td align="center">Server Error（服务器错误状态码）</td><td align="center">服务器处理请求出错</td></tr></tbody></table><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">200  //请求成功</span><br><span class="line">404  //请求资源不存在，输入了错误的url</span><br></pre></td></tr></tbody></table></figure><p><strong>Session和 Cookies</strong><br>我们在浏览网站的过程中，经常会遇到需要登录的情况，而有些网页只有登录之后才可以访问，而且登录之后可以连续访问很多次网站，但是有时候过一段时间就需要重新登录。 还有一些网站，在打开浏览器时就自动登录了，而且很长时间都不会失效，这种情况又是为什么？其实这里面涉及 Session和 Cookies 的相关知识，</p><h2 id="静态网页和动态网页"><a href="#静态网页和动态网页" class="headerlink" title="静态网页和动态网页"></a>静态网页和动态网页</h2><p>在开始介绍它们之前，我们需要先了解一下静态网页和动态网页的概念。这里还是前面的示例代码，内容如下：</p><p>这是最基本的 HTML代码，我们将其保存为一个 .html文件，然后把它放在某台具有固定公网 IP 的主机上，主机上装上 Apache 或 Nginx等服务器，这样这台主机就可以作为服务器了，其他人便可以通过访问服 务器看到这个页面，这就搭建了一个最简单的网站。 这种网页的内容是 HTML代码编写的，文字、图片等内容均通过写好的 HTML代码来指定，这种页面叫作静态网页。它加载速度快，编写简单，但是存在很大的缺陷，如可维护性差，不能根据 URL灵活多变 地显示内容等。例如，我们想要给这个网页的 URL传入一个 name 参数，让其在网页中显示出来，是无法做到的。</p><p>因此，动态网页应运而生，它可以动态解析 URL中参数的变化，关联数据库并动态呈现不同的页面内容，非常灵活多变。我们现在遇到的大多数网站都是动态网站，它们不再是一个简单的 HTML，而是可能由 JSP、PHP、Python等语言编写的，其功能比静态网页强大和丰富太多了。 此外，动态网站还可以实现用户登录和注册的功能。再回到开头来看提到的问题，很多页面是需要登录之后才可以查看的。按照一般的逻辑来说，输入用户名和密码登录之后，肯定是拿到了一种类似凭证的东 西，有了它，我们才能保持登录状态，才能访问登录之后才能看到的页面。 那么，这种神秘的凭证到底是什么呢？其实它就是 Session和 Cookies 共同产生的结果，下面我们来一探究竟。</p><h2 id="无状态-HTTP"><a href="#无状态-HTTP" class="headerlink" title="无状态 HTTP"></a>无状态 HTTP</h2><p>HTTP 的无状态特点是指服务器无法判断客户端是什么状态。即服务器无法判断用户身份。</p><p>当我们向服务器发送请求后，服务器解析此请求，然后返回对应的响应，服务器负责完成这个过程，而且这个过程是完全独立的，服务器不会记录前后状态的变化，也就是缺少状态记录。 这意味着如果后续需要处理前面的信息，则必须重传，这也导致需要额外传递一些前面的重复请求，才能获取后续响应，然而这种效果显然不是我们想要的。为了保持前后状态，我们肯定不能将前面的请求全 部重传一次，这太浪费资源了，对于这种需要用户登录的页面来说，更是棘手。 这时两个用于保持 HTTP 连接状态的技术就出现了，它们分别是 Session和 Cookies。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>Session在服务端，也就是网站的服务器，用来保存用户的 Session信息；<br>Session，中文称之为会话，其本身的含义是指有始有终的一系列动作 / 消息。比如，打电话时，从拿起电话拨号到挂断电话这中间的一系列过程可以称为一个 Session。 而在 Web 中，Session对象用来存储特定用户 Session所需的属性及配置信息。这样，当用户在应用程序的 Web 页之间跳转时，存储在 Session对象中的变量将不会丢失，而是在整个用户 Session中一直存在下 去。当用户请求来自应用程序的 Web 页时，如果该用户还没有 Session，则 Web 服务器将自动创建一个 Session对象。当 Session过期或被放弃后，服务器将终止该 Session。</p><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>Cookies 在客户端，也可以理解为浏览器端，有了 Cookies，浏览器在下次访问网页时会自动附带上它发送给服务器，服务器通过识别 Cookies 并鉴定出是哪个用户，然后再判断用户是否是登录状态，进而返回对应的响应。</p><p>我们可以理解为 Cookies 里面保存了登录的凭证，有了它，只需要在下次请求携带 Cookies 发送请求而不必重新输入用户名、密码等信息重新登录了。 因此在爬虫中，有时候处理需要登录才能访问的页面时，我们一般会直接将登录成功后获取的 Cookies 放在请求头里面直接请求，而不必重新模拟登录。</p><p>Cookies 指某些网站为了辨别用户身份、进行 Session跟踪而存储在用户本地终端上的数据。</p><h3 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h3><p>Cookie实际上是一小段的文本信息（key-value格式）。客户端向服务器发起请求，如果服务器需要记录该用户状态，就使用response向客户端浏览器颁发一个Cookie。客户端浏览器会把Cookie保存起来。当浏览器再请求该网站时，浏览器把请求的网址连同该Cookie一同提交给服务器。服务器检查该Cookie，以此来辨认用户状态。</p><p>打个比方，我们去银行办理储蓄业务，第一次给你办了张银行卡，里面存放了身份证、密码、手机等个人信息。当你下次再来这个银行时，银行机器能识别你的卡，从而能够直接办理业务。</p><h3 id="会话Cookie-和持久Cookie"><a href="#会话Cookie-和持久Cookie" class="headerlink" title="会话Cookie 和持久Cookie"></a>会话Cookie 和持久Cookie</h3><p>从表面意思来说，会话 Cookie 就是把 Cookie 放在浏览器内存里，浏览器在关闭之后该 Cookie 即失效；持久 Cookie 则会保存到客户端的硬盘中，下次还可以继续使用，用于长久保持用户登录状态。 其实严格来说，没有会话 Cookie 和持久 Cookie 之 分，只是由 Cookie 的 MaxAge 或 Expires 字段决定了过期的时间。 因此，一些持久化登录的网站其实就是把 Cookie 的有效时间和 Session有效期设置得比较长，下次我们再访问页面时仍然携带之前的 Cookie，就可以直接保持登录状态。</p><h3 id="属性结构"><a href="#属性结构" class="headerlink" title="属性结构"></a>属性结构</h3><p>在浏览器开发者工具中打开 Application选项卡，然后在左侧会有一个 Storage 部分，最后一项即为 Cookies，将其点开</p><p>其中每个条目可以称为 Cookie。它有如下几个属性。<br>Name，即该 Cookie 的名称。Cookie 一旦创建，名称便不可更改。<br>Value，即该 Cookie 的值。如果值为 Unicode 字符，需要为字符编码。如果值为二进制数据，则需要使用 BASE64 编码。 MaxAge，即该 Cookie 失效的时间，单位秒，也常和 Expires 一起使用，通过它可以计算出其有效时间。MaxAge 如果为正数，则该 Cookie 在 MaxAge 秒之后失效。如果为负数，则关闭浏览器时 Cookie 即 失效，浏览器也不会以任何形式保存该 Cookie。<br>Path，即该 Cookie 的使用路径。如果设置为 /path/，则只有路径为 /path/ 的页面可以访问该 Cookie。如果设置为 /，则本域名下的所有页面都可以访问该 Cookie。<br>Domain，即可以访问该 Cookie 的域名。例如如果设置为 .zhihu.com，则所有以 zhihu.com，结尾的域名都可以访问该 Cookie。<br>Size 字段，即此 Cookie 的大小。 Http 字段，即 Cookie 的 httponly属性。若此属性为 true，则只有在 HTTP Headers 中会带有此 Cookie 的信息，而不能通过 document.cookie 来访问此 Cookie。 Secure，即该 Cookie 是否仅被使用安全协议传输。安全协议。安全协议有 HTTPS、SSL等，在网络上传输数据之前先将数据加密。默认为 false。</p><h2 id="Session维持"><a href="#Session维持" class="headerlink" title="Session维持"></a>Session维持</h2><p>那么，我们怎样利用 Cookies 保持状态呢？当客户端第一次请求服务器时，服务器会返回一个响应头中带有 Set-Cookie 字段的响应给客户端，用来标记是哪一个用户，客户端浏览器会把 Cookies 保存起来。当浏 览器下一次再请求该网站时，浏览器会把此 Cookies 放到请求头一起提交给服务器，Cookies 携带了 Session ID 信息，服务器检查该 Cookies 即可找到对应的 Session是什么，然后再判断 Session来以此来辨认用户 状态。 在成功登录某个网站时，服务器会告诉客户端设置哪些 Cookies 信息，在后续访问页面时客户端会把 Cookies 发送给服务器，服务器再找到对应的 Session加以判断。如果 Session中的某些设置登录状态的变量是 有效的，那就证明用户处于登录状态，此时返回登录之后才可以查看的网页内容，浏览器再进行解析便可以看到了。 反之，如果传给服务器的 Cookies 是无效的，或者 Session已经过期了，我们将不能继续访问页面，此时可能会收到错误的响应或者跳转到登录页面重新登录。 所以，Cookies 和 Session需要配合，一个处于客户端，一个处于服务端，二者共同协作，就实现了登录 Session控制。</p><h2 id="常见误区"><a href="#常见误区" class="headerlink" title="常见误区"></a>常见误区</h2><p>常在谈论 Session机制的时候，常常听到这样一种误解 ——“只要关闭浏览器，Session就消失了”。可以想象一下会员卡的例子，除非顾客主动对店家提出销卡，否则店家绝对不会轻易删除顾客的资料。对 Session 来说，也是一样，除非程序通知服务器删除一个 Session，否则服务器会一直保留。比如，程序一般都是在我们做注销操作时才去删除 Session。 但是当我们关闭浏览器时，浏览器不会主动在关闭之前通知服务器它将要关闭，所以服务器根本不会有机会知道浏览器已经关闭。之所以会有这种错觉，是因为大部分网站都使用会话 Cookie 来保存 Session ID 信息，而关闭浏览器后 Cookies 就消失了，再次连接服务器时，也就无法找到原来的 Session了。如果服务器设置的 Cookies 保存到硬盘上，或者使用某种手段改写浏览器发出的 HTTP 请求头，把原来的 Cookies 发送给服务器，则再次打开浏览器，仍然能够找到原来的 Session ID，依旧还是可以保持登录状态的。 而且恰恰是由于关闭浏览器不会导致 Session被删除，这就需要服务器为 Session设置一个失效时间，当距离客户端上一次使用 Session的时间超过这个失效时间时，服务器就可以认为客户端已经停止了活动，才 会把 Session删除以节省存储空间。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>HTTP 有以下安全性问题：</p><ul><li>使用明文进行通信，内容可能会被窃听；</li><li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li><li>无法证明报文的完整性，报文有可能遭篡改。</li></ul><p>HTTPS 并不是新协议，而是让 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信，也就是说 HTTPS 使用了隧道进行通信。</p><p>通过使用 SSL，HTTPS 具有了加密（防窃听）、认证（防伪装）和完整性保护（防篡改）。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/ssl-offloading.jpg" width="700"> </div><br><h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><h4 id="1-对称密钥加密"><a href="#1-对称密钥加密" class="headerlink" title="1. 对称密钥加密"></a>1. 对称密钥加密</h4><p>对称密钥加密（Symmetric-Key Encryption），加密和解密使用同一密钥。</p><ul><li>优点：运算速度快；</li><li>缺点：无法安全地将密钥传输给通信方。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/7fffa4b8-b36d-471f-ad0c-a88ee763bb76.png" width="600"> </div><br><h4 id="2-非对称密钥加密"><a href="#2-非对称密钥加密" class="headerlink" title="2.非对称密钥加密"></a>2.非对称密钥加密</h4><p>非对称密钥加密，又称公开密钥加密（Public-Key Encryption），加密和解密使用不同的密钥。</p><p>公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p><p>非对称密钥除了用来加密，还可以用来进行签名。因为私有密钥无法被其他人获取，因此通信发送方使用其私有密钥进行签名，通信接收方使用发送方的公开密钥对签名进行解密，就能判断这个签名是否正确。</p><ul><li>优点：可以更安全地将公开密钥传输给通信发送方；</li><li>缺点：运算速度慢。</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/39ccb299-ee99-4dd1-b8b4-2f9ec9495cb4.png" width="600"> </div><br><h4 id="3-HTTPS-采用的加密方式"><a href="#3-HTTPS-采用的加密方式" class="headerlink" title="3. HTTPS 采用的加密方式"></a>3. HTTPS 采用的加密方式</h4><p>上面提到对称密钥加密方式的传输效率更高，但是无法安全地将密钥 Secret Key 传输给通信方。而非对称密钥加密方式可以保证传输的安全性，因此我们可以利用非对称密钥加密方式将 Secret Key  传输给通信方。HTTPS 采用混合的加密机制，正是利用了上面提到的方案：</p><ul><li>使用非对称密钥加密方式，传输对称密钥加密方式所需要的 Secret Key，从而保证安全性;</li><li>获取到 Secret Key 后，再使用对称密钥加密方式进行通信，从而保证效率。（下图中的 Session Key 就是 Secret Key）</li></ul><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/How-HTTPS-Works.png" width="600"> </div><br>### 认证<p>通过使用   <strong>证书</strong>   来对通信方进行认证。</p><p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。</p><p>服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p><p>进行 HTTPS 通信时，服务器会把证书发送给客户端。客户端取得其中的公开密钥之后，先使用数字签名进行验证，如果验证通过，就可以开始通信了。</p><div align="center"> <img src="https://cs-notes-1256109796.cos.ap-guangzhou.myqcloud.com/2017-06-11-ca.png" width=""> </div><br><h3 id="完整性保护"><a href="#完整性保护" class="headerlink" title="完整性保护"></a>完整性保护</h3><p>SSL 提供报文摘要功能来进行完整性保护。</p><p>HTTP 也提供了 MD5 报文摘要功能，但不是安全的。例如报文内容被篡改之后，同时重新计算 MD5 的值，通信接收方是无法意识到发生了篡改。</p><p>HTTPS 的报文摘要功能之所以安全，是因为它结合了加密和认证这两个操作。试想一下，加密之后的报文，遭到篡改之后，也很难重新计算报文摘要，因为无法轻易获取明文。</p><h3 id="HTTPS-的缺点"><a href="#HTTPS-的缺点" class="headerlink" title="HTTPS 的缺点"></a>HTTPS 的缺点</h3><ul><li>因为需要进行加密解密等过程，因此速度会更慢；</li><li>需要支付证书授权的高额费用。</li></ul><h2 id="SMTP-协议和-POP3-协议"><a href="#SMTP-协议和-POP3-协议" class="headerlink" title="SMTP 协议和 POP3 协议"></a>SMTP 协议和 POP3 协议</h2><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>SMTP是建立在FTP文件传输服务上的一种邮件服务，主要用于传输系统之间的邮件信息并提供与来信有关的通知。</p><p>SMTP（Simple Mail Transfer Protocol）即简单邮件传输协议，它是一组用于由源地址到目的地址传送邮件的规则，由它来控制信件的中转方式,它使用 TCP 协议，使用端口 25。</p><p>SMTP 存在两个端：</p><ul><li>在发信人的邮件服务器上执行的客户端；</li><li>在收信人的邮件服务器上执行的服务器端。</li></ul><p>SMTP 的客户端和服务器端同时运行在每个邮件服务器上。当一个邮件服务器在向其它邮件服务器发送邮件消息时，它是作为 SMTP 客户在运行。</p><h3 id="SMTP-的连接和发送过程"><a href="#SMTP-的连接和发送过程" class="headerlink" title="SMTP 的连接和发送过程"></a>SMTP 的连接和发送过程</h3><p>建立 TCP 连接<br>客户端向服务器发送 HELO 命令以标识发件人自己的身份，然后客户端发送 MAIL 命令<br>服务器端以 OK 作为响应，表示准备接收<br>客户端发送 RCPT 命令<br>服务器端表示是否愿意为收件人接收邮件<br>协商结束，发送邮件，用命令 DATA 发送输入内容<br>结束此次发送，用 QUIT 命令退出</p><h3 id="POP3-协议"><a href="#POP3-协议" class="headerlink" title="POP3 协议"></a>POP3 协议</h3><p>POP3（Post Office Protocol Version 3 ）即邮局协议版本 3，是 TCP/IP 协议族中的一员 ，主要用于支持使用客户端远程管理在服务器上的电子邮件，使用 TCP 协议，使用端口 110 。</p><p>POP3 邮件服务器大都可以“只下载邮件，服务器端并不删除”，也就是改进的 POP3 协议。</p><p>POP3 工作过程<br>用户运行用户代理（如 Foxmail, Outlook Express）<br>用户代理（以下简称客户端）与邮件服务器（以下简称服务器端）的 110 端口建立 TCP 连接<br>客户端向服务器端发出各种命令，来请求各种服务（如查询邮箱信息，下载某封邮件等）<br>服务端解析用户的命令，做出相应动作并返回给客户端一个响应<br>上述的两个步骤交替进行，直到接收完所有邮件转到下一步，或两者的连接被意外中断而直接退出<br>用户代理解析从服务器端获得的邮件，以适当地形式（如可读）的形式呈现给用户</p><h3 id="POP3-和-SMTP-协同工作"><a href="#POP3-和-SMTP-协同工作" class="headerlink" title="POP3 和 SMTP 协同工作"></a>POP3 和 SMTP 协同工作</h3><p>一封邮件的发送过程：<br>通过 smtp 协议连接到 smtp 服务器，然后发一封邮件给 sohu 的 smtp 服务器；<br>通过 smtp 协议将邮件转投给 sina 的 smtp 服务器（邮件发送服务器）；<br>将接收到的邮件存储到 <a href="mailto:gacl@sina.com">gacl@sina.com</a> 这个邮件账号分配的存储空间中；<br>通过 POP3 协议连接到 POP3 服务器收取邮件；<br>从 <a href="mailto:gacl@sina.com">gacl@sina.com</a> 账号的存储空间当中取出邮件；<br>POP3 服务器将取出来的邮件回送给 <a href="mailto:gacl@sina.com">gacl@sina.com</a> 账户。</p><h2 id="远程终端协议TELNET"><a href="#远程终端协议TELNET" class="headerlink" title="远程终端协议TELNET"></a>远程终端协议TELNET</h2><p>Telnet 协议是 TCP/IP 协议族中的一员，是 Internet 远程登录服务的标准协议和主要方式，它基于 TCP 协议，使用端口 23。</p><p>终端使用者在本地电脑上使用 telnet 程序，用它连接到服务器，终端使用者可以在 telnet 程序中输入命令，这些命令会在服务器上运行，就像直接在服务器的控制台上输入一样。</p><h3 id="Telnet-工作过程"><a href="#Telnet-工作过程" class="headerlink" title="Telnet 工作过程"></a>Telnet 工作过程</h3><p>使用 Telnet 协议进行远程登录时必须满足以下条件:</p><ul><li><p>在本地计算机上必须装有包含 Telnet 协议的客户程序；</p></li><li><p>必须知道远程主机的 IP 地址或域名；</p></li><li><p>必须知道登录标识与口令。<br>Telnet 远程登录服务分为以下 4 个过程:</p></li><li><p>本地与远程主机建立连接。该过程实际上是建立一个 TCP 连接，用户必须知道远程主机的 IP 地址或域名；</p></li><li><p>将本地终端上输入的用户名和口令及以后输入的任何命令或字符以 NVT ( Net Virtual Terminal ) 格式传送到远程主机。该过程实际上是从本地主机向远程主机发送一个 IP 数据包；</p></li><li><p>将远程主机输出的 NVT 格式的数据转化为本地所接受的格式送回本地终端，包括输入命令回显和命令执行结果；</p></li><li><p>最后，本地终端对远程主机进行撤消连接。该过程是撤销一个 TCP 连接。</p></li></ul><h3 id="Telnet-连接远程主机"><a href="#Telnet-连接远程主机" class="headerlink" title="Telnet 连接远程主机"></a>Telnet 连接远程主机</h3><p>telnet 使用语法：telnet IP 端口（可选）。</p><h2 id="TFTP-协议"><a href="#TFTP-协议" class="headerlink" title="TFTP 协议"></a>TFTP 协议</h2><p>TFTP（ Trivial File Transfer Protocol ）是 TCP/IP 协议族中的一个用来在客户机与服务器之间进行简单文件传输的协议，提供不复杂、开销不大的文件传输服务，它基于 UDP 协议，使用端口 69 。</p><p>此协议设计的时候是进行小文件传输的，与 FTP 相比少了许多功能，它只能从文件服务器上获得或写入文件，不能列出目录，不进行认证。</p><p>TFTP 也有着它自身的优点：</p><ul><li>TFTP 可用于 UDP 环境；比如当需要将程序或者文件同时向许多机器下载时就往往需要使用到 TFTP 协议。</li><li>TFTP 代码所占的内存较小，这对于小型计算机或者某些特殊用途的设备来说是很重要的，TFTP 具有更多的灵活性，也减少了开销。</li></ul><p>TFTP 数据报文有 5 种操作码，对应了 5 种报文格式（1、2 报文格式相同）：</p><ul><li>操作码为 RRQ ：读文件请求，客户端请求读取位于服务器上的文件；</li><li>操作码为 WRQ ：写文件请求，客户端请求写入位于服务器上的文件；</li><li>操作码为 DATA ：数据包，用于传输数据文件；</li><li>操作码为 ACK ：确认包，回应确认信息；</li><li>操作码为 ERROR ：错误包，它用于服务器不能处理读请求或者写请求的情况。</li></ul><h1 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h1><h2 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h2><ol><li>物理层中指明在接口电缆的各条线上出现的电压的范围（  B ）。<br>A. 机械特性                           B. 电气特性<br>C. 功能特性                           D. 过程特性</li><li>下列属于半双工通信方式的是（  C ）。<br>A. 无线电广播                          B. 有线闭路电视<br>C. 无线对讲机                          D. 手机通话</li><li>光纤通信使用（  C ）。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</li><li>典型应用于传输速率1Gbit/s(距离100米)的绞合线类别是（  C ）。<br>A. 3类线                              B. 超5类线<br>C. 6类线                             D. 8类线</li><li>传输带宽最大的介质是（  C ）。<br>A. 双绞线                             B. 同轴电缆<br>C. 光纤                               D. 微波</li><li>（  A ）是有N路信号要在一个信道中传送。可以使用调制的方法，把各路信号分别搬迁到适当的频率位置，使彼此不产生干扰。各路信号在同样的时间占用不同的带宽资源。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</li><li>（ A  ）技术是用数字技术对现有模拟电话的用户线进行改造，使它能承载宽带数字业务。<br>A．ADSL                                 B. 光纤同轴混合网（HFC网）<br>C. 光纤接入                             D. FTTx技术</li><li>控制字符（ A  ）放在一帧的最前面，表示帧的首部开始。<br>A. SOH                                 B. EOT<br>C. ESC                                 D. MTU</li><li>局域网通常采用的网络拓扑结构不包括（  D ）。<br>A. 星形网                              B. 环形网<br>C. 总线网                              D. 三角形</li><li>10GBASE-ER采用的媒体介质是（ B  ）。<br>A. 多模光纤                            B. 单模光纤<br>C. 同轴电缆                            D. 双绞线</li><li>无分类编址CIDR地址块中网络前缀长度为/18相当于包含（ D  ）个C类网络数。<br>A. 21                                  B. 23<br>C. 80                                  D. 64</li><li>CIDR地址块206.0.64.0/18的子网掩码采用点分十进制法是记法是（ C  ）。<br>A. 255.255.255.0                     B. 255.255.240.0<br>C. 255.255.192.0                       D. 255.255.254.0</li><li>以下可分配给主机或者路由器的IP地址是（  C ）。<br>A. 131.107.255.80/28                   B. 231.211.128.0/17<br>C. 126.1.4.255/23                      D. 198.121.204.128/25</li><li>Internet的前身是美国的（  A ）。<br>A. ARPANET                             B. 信息高速公路<br>C. RFC                                 D. 分组交换网络<br>15．下列不属于ISP的是（  D ）。<br>A. 中国联通                            B. 中国电信<br>C. 德国电信                            D. 优酷<br>16．计算机通信网络的数据传送方式属于（C   ）。<br>A. 电路交换                           B. 报文交换<br>C. 分组交换                           D. 虚电路交换</li><li>广州工商学院的校园网属于（  C ）。<br>A. 广域网                            B. 城域网<br>C. 局域网                              D. 个域网</li><li>主机或路由器发送数据帧所需要的时间是（  A ）。<br>A. 发送时延                           B. 传播时延<br>C. 处理时延                            D. 排队时延</li><li>网络协议三要素中的（ A  ）表示数据与控制信息的结构或格式。<br>A. 语法                                B. 语义<br>C. 同步                                D. 协议</li><li>以下属于UDP支持的应用程序是（ C  ）。<br>A. 浏览器打开网页                    B. 收发电子邮件<br>C. 网络视频点播                      D. 远程登陆方式连接</li><li>物理层中指明接口所用接线器的形状和尺寸、引脚数目和排列、固定和锁定装置等是（  A ）。<br>A. 机械特性                           B. 电气特性<br>C. 功能特性                           D. 过程特性</li><li>下列属于全双工通信方式的是（  D ）。<br>A. 无线电广播                          B. 有线闭路电视<br>C. 无线对讲机                          D. 手机通话</li><li>3G移动通信技术使用（  D ）。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</li><li>通常双绞线的最大传输距离是（  D ）。<br>A. 10米                               B. 18米<br>C. 50米                              D. 100米</li><li>早期有线电视网使用的介质主要是（  B ）。<br>A. 双绞线                             B. 同轴电缆<br>C. 光纤                               D. 微波</li><li>（  B ）是将时间划分为一段段等长的帧，每一路信号在每一个帧中占用固定信号的时隙。<br>A. 频分复用FDM                         B. 时分复用 TDM<br>C. 波分复用WDM                         D. 码分复用 CDM</li><li>（ B  ）是目前覆盖面很广的有线电视网的基础上开发的一种居民宽带接入网，除可传达电视节目外，还能提供电话、数据和其他宽带交互型业务。<br>A．ADSL                                 B. 光纤同轴混合网（HFC网）<br>C. 光纤接入                             D. FTTx技术</li><li>控制字符（  B ）放在一帧的最后，表示帧的结束。<br>A. SOH                                 B. EOT<br>C. ESC                                 D. MTU</li><li>总线型以太网通常采用（ A  ）访问控制协议。<br>A. CSMA/CD                             B.CSMA/CA<br>C. 频分复用                            D.时分复用</li><li>（  B ）的光源要使用昂贵的半导体激光器，而不能使用较便宜的发光二极管。<br>A. 多模光纤                            B. 单模光纤<br>C. 同轴电缆                            D. 双绞线</li><li>无分类编址CIDR地址块中网络前缀长度为/16相当于包含（ A  ）个B类网络数。<br>A. 1                                   B. 2<br>C. 64                                  D. 256</li><li>CIDR地址块206.0.64.0/17的子网掩码采用点分十进制法是记法是（ B  ）。<br>A. 255.255.0.0                      B. 255.255.128.0<br>C. 255.255.192.0                       D. 255.255.254.0</li></ol><h2 id="判断题"><a href="#判断题" class="headerlink" title="判断题"></a>判断题</h2><p>（√）1.*一般的适配器都包括了数据链路层和物理层这两层的功能。<br>（√）2.封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。<br>（√）3.所有的PPP帧的长度都是整数字节。<br>（√）4.PPP协议用在SONET/SDH链路时，采用零比特填充方法来实现透明传输。<br>（√）5.最初的以太网是将许多计算机都连接到一根总线上，也称为共享以太网。<br>（√）1.*一般的适配器都包括了数据链路层和物理层这两层的功能。<br>（√ ）2.封装成帧(framing)就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。<br>（√）3.所有的 PPP 帧的长度都是整数字节。<br>（√）4.PPP 协议用在 SONET/SDH 链路时，采用零比特填充方法来实现透明传输。<br>（√）5.最初的以太网是将许多计算机都连接到一根总线上，也称为共享以太网。<br>（×）6.以太网使用面向连接的工作方式。<br>（√）7.*以太网发送的数据都使用曼彻斯特编码，其特点是可以实现时钟自同步。<br>（√）8.以太网的站点在发送帧时，如果经过2τ后还没有检测到冲突，则本次发送不会再出现冲突了。<br>（  √ ）9.速率达到或超过 100 Mb/s 的以太网称为高速以太网。<br>（  √ ）10.100BASE-T 以太网工作在全双工方式时，不使用CSMA/CD协议<br>( √ )11. CSMA/CD协议采用半双工通信。<br>( × )6. 集线器工作于数据链路层。   //工作于物理层<br>(√  )7. 以太网交换机是一种即插即用设备，其内部的地址表是通过自学习算法自动逐渐建立起来的。</p><h2 id="填空题"><a href="#填空题" class="headerlink" title="填空题"></a>填空题</h2><p>1．OSI/RM的七层协议分别是物理层、数据链路层、__<strong>网络层</strong>、运输层、会话层、表示层、应用层。<br>2．双绞线分为无屏蔽双绞线（UTP）和____屏蔽双绞线(STP)__。<br>3．为了解决透明传输问题，在发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个_____转义字符“ESC”_____。<br>4. ____物理地址_____是使用数据链路层的地址，而IP地址是网络层和以上各层使用的地址，是一种逻辑地址。<br>5. 在IP层下面每一种数据链路层协议都规定了一个数据帧中的数据字段的最大长度，这称为___最大传送单元MTU ______。<br>6. HTTPS应用程序采用熟知的端口号____TCP_____。<br>10.万维网使用____超文本标记语言HTML ______<strong>来显示各种万维网页面。<br>11．TCP/IP的四层协议包括链路层、网际层IP、运输层、</strong><strong>应用层</strong>____。<br>12．数字信号可以通过_____调制器_____转化为模拟信号。<br>13．在带宽W（Hz）的低通信道中，若不考虑噪声影响，则码元传输的最高速率是2W（码元/秒）。传输速率超过此上限，就会出现严重的码间串扰的问题，使接收端对码元的识别称为不可能，这就是著名的____奈氏准则___。<br>7.___香农公式_____表明信道的带宽或信道中的信噪比越大，信息的极限传输速率就越高。<br>8. ___封装成帧____就是在一段数据的前后分别添加首部和尾部，这样就构成了一个帧。<br>9. 计算机与外界局域网的连接是通过___网络适配器完成的_________。<br>10. 网络层提供的服务分为虚电路和____数据报______。<br>11. C类地址可容纳的主机数是____254________。<br>12. HTTP应用程序采用熟知的端口号______TCP______。<br>20.FTP的中文翻译是___文件传输协议_________。<br>13.__生存时间或者TTL ___占8位，表明数据报在网络中的寿命。<br>14. 内部网关协议IGP使用最多的是RIP和_____最短路径优先或者OSPF _______。<br>15. 外部网关协议EGP使用最多的是_____BGP的版本4或者BGP-4__。<br>16. 1．数字信号可以通过___抽样，量化，编码____转化为模拟信号。</p><h2 id="简答题"><a href="#简答题" class="headerlink" title="简答题"></a>简答题</h2><p>1．什么是DNS？什么是DHCP服务器？<br>答：域名系统DNS是互联网使用的命名系统，用来便于人们使用的机器名字转换为IP地址。<br>动态主机配置协议DHCP提供了一种机制，称为即插即用连网。这种机制允许一台计算机自动加入新的网络和获取IP地址而不用手工参与。</p><ol start="2"><li>什么是虚拟专用网络VPN？（P186）什么是网络地址转换NAT？(P188)<br>答：虚拟专用网络VPN是指这种网络是为本机构的主机用于机构内部的通信，而不是用于和网络外非本机构的主机通信。如果专用网不同网点之间的通信必须经过公用的互联网，但又有保密的要求，那么多有通过互联网传送的数据都必须加密。<br>网络地址转换NAT是指在专用网连接到互联网的路由器上安装NAT软件。装有NAT软件的路由器叫作NAT路由器，它至少一个有效的外部全球IP地址。这样，所有使用本地地址的主机在和外界通信时，都要在NAT路由器上将其本地地址转换成全球IP地址，才能和互联网连接。</li></ol><p>1.三报文握手建立TCP连接过程   P247<br>第一次握手:客户端将报文标志位SYN置为1,产生一个序号值seq=x,将该数据包发送给服务器端后客户端进入SYN_SENT状态<br>第二次握手：服务器端收到数据包后由标志位SYN=1知道客户端请求建立连接，服务器端将TCP报文标志位SYN和ACK都置为1，ack=x+1，随机产生一个序号值seq=y，并将该数据包发送给客户端以确认连接请求，服务器端进入SYN_RCVD状态。<br>第三次握手：客户端收到确认后，检查ack是否为x+1，ACK是否为1，如果正确则将标志位ACK置为1，ack=y+1，并将该数据包发送给服务器端，服务器端检查ack是否为y+1，ACK是否为1，如果正确则连接建立成功，客户端和服务器端进入ESTABLISHED状态，完成三次握手，随后客户端与服务器端之间可以开始传输数据了</p><p>2.TCP和UDP的主要区别<br>TCP提供面向连接、按序可靠的字节流服务（面向字节流）、有流量控制和拥塞控制。<br>UDP提供无连接、不可靠的数据报服务（面向报文）。<br>3.什么是VPN   P186<br>4.什么叫网络地址转换为NAT    P188</p><p>5.什么是DNS       P261<br>将域名转换为IP地址</p><p>6.什么是DHCP      P304<br>动态 主机 配置 协议<br>不需要手动的去配置ip地址以及其他的网络参数</p><p>7.什么是超文本传输协议HTTP<br>答：超文本传输协议HTTP是面向事务的应用层协议，它是万维网上能够可靠的交换文件（包括文本、声音、图像等各种多媒体文件）的重要基础。协议HTTP不仅传送完成超文本跳转所必需的信息，而且也传送任何可从互联网上得到的信息，如文本、超文本、声音和图像等。</p><p>8.顶级域名分为哪几类  p263<br>（1）国家顶级域名（2）通用顶级域名（3）基础结构域名<br>9.域名服务器有哪几类   P265<br>（1）根域名服务器<br>（2）顶级域名服务器<br>（3）权限域名服务器<br>（4）本地域名服务器</p><p>10.什么是超文本标记语言HTML P283<br>超文本标记语言HTML是一种制作万维网页面的标准语言，它消除了不同计算机之间信息交流的障碍<br>11.什么是远程终端协议TELNET   P271<br>用户通过TCP登陆远地主机，远程操控远地主机，又称终端仿真协议<br>12.什么是万维网www   P272<br>万维网是大规模的，联机式的信息储藏所，简称web<br>13什么是统一资源定位符URL   P274<br>从互联网上获取资源位置和访问这些资源的方法<br>6.什么叫做公用网和专用网？<br>公用网：公用网用来提供服务。Client通过此网络与服务器通信。<br>专用网：是某个部门为本单位的特殊工作的需要而建立的网络.这种网络不向本单位以外的人提供服务.例如,军队,铁路,电力等系统均有本系统的专用网。<br>7.时延是由那几部分组成的？发送时延与传输时延的有什么区别？P22</p><p>8.IGP和EGP这两类协议的主要区别是什么?<br>　　答：内部网关协议IGP，是在一个自治系统内部使用的路由选择协议，而这与在互联网中的其他自治系统选用什么路由选择协议无关。外部网关协议EGP，是在不同的自治系统边界传递路由信息的协议，不关心自治系统内部使用何种协议。<br>1、什么叫做“三网融合”？<br>“三网融合”又叫“三网合一”，意指电信网络、有线电视网络和计算机网络的相互渗透、互相兼容、并逐步整合成为全世界统一的信息通信网络，其中互联网是其核心部分。<br>2、什么叫做客户-服务器方式(C/S方式)？<br>客户（Client）和服务器（Server）都是指通信种所涉及的两个应用进程。客户-服务器方式所描述的是进程之间服务和被服务的关系。<br>3、 什么叫做P2P方式？<br>是指两台主机在通信时并不区分哪一个是服务请求方哪一个是服务提供方。只要两台主机都运行了对等连接软件（P2P软件），它们就可以进行平等的、对等连接通信。这时，双方都可以下载对方已经存储在硬盘中的共享文档。因此这种的方式称为P2P方式。<br>4、什么叫做电路交换？<br>是指在同一电信网用户群中任意两个或多个用户终端之间建立电路暂时连接的交换方式。暂时连接独占一条通信路径并保持到连接释放为止<br>例如，用固定电话拨打电话的数据传送方式属于（电路交换）。<br>5、什么叫做报文交换？<br>报文交换不要求在两个通信节点之间建立专用通路。节点把要发送的信息组织成一个数据包一报文，该报文中含有目标节点的地址，完整的报文在网络中一站一站地向前传送。每一个节点接收整个报文，检查目标节点地址，然后根据网络中的交通情况在适当的时候转发到下一个节点。经过多次的存储一转发，最后到达目标，因而这样的网络叫存储一转发网络。<br>6、什么叫分组交换？<br>分组交换也称为包交换，它将用户通信的数据划分成多个更小的等长数据段，在每个数据段的前面加上必要的控制信息作为数据段的首部，每个带有首部的数据段就构成了一个分组。首部指明了该分组发送的地址，当交换机收到分组之后，将根据首部中的地址信息将分组转发到目的地，这个过程就是分组交换。<br>7、什么虚电路交换？<br>所谓交换虚电路(SVC)就是两个数据终端要通信时先用呼叫程序建立电路（即虚电路），然后发送数据，通信结束后用拆线程序拆除虚电路。<br>通过蓝牙无线技术连接起来的网络属于（   ）。<br>8、什么叫做广域网？<br>广域网(Wide Area Network ,简称WAN)是一种跨地区的数据通讯网络,通常包含一个国家或地区。广域网通常由两个或多个局域网组成。<br>9、什么叫做城域网？<br>城域网(Metropolitan Area Network)是在一个城市范围内所建立的计算机通信网，简称MAN。属宽带局域网。<br>10、什么叫做局域网？<br>局域网的覆盖范围一般是方圆几千米之内，其具备的安装便捷、成本节约、扩展方便等特点使其在各类办公室内运用广泛。<br>11、什么叫做个域网？<br>个人域网（PAN），是指能在便携式消费电器与通信设备之间进行短距离通信的网络，其覆盖范围一般在10米半径以内。</p><h2 id="作图：-P45"><a href="#作图：-P45" class="headerlink" title="作图：   P45"></a>作图：   P45</h2><p>1、能根据比特流画出曼彻斯特编码、差分曼彻斯特编码、归零制和不归零制编码的图。<br>2、能根据基带信号画出最基本调制方法中的调幅和调频图。<br>调幅：对基带信号的波幅进行调整，例如将上图的1信号波幅进行改变，在接收方读取时有载波输出为1.<br>调频：对基带信号频率进行调整，例如将0信号调制为频率f1，1信号调制为频率f2。<br>调相：对基带信号相位进行调制，例如将0信号的初相位调整为0度，1信号的初相位调整为180度。</p><h2 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h2><p>CIDR地址快的使用（即路由聚合方法），如课本129页的图4-13。</p><ol><li>有如下的5个/24地址块，试进行最大可能的聚合。</li><li>156.152.0/24</li><li>156.153.0/24</li><li>156.154.0/24</li><li>156.155.0/24</li><li>156.156.0/24<br>解：这几块地址前面两个字节一样，只需比较第三个字节：</li><li>156.152.0/24 第三个字节 1001 1000</li><li>156.153.0/24第三个字节 1001 1001</li><li>156.154.0/24第三个字节 1001 1010</li><li>156.155.0/24第三个字节 1001 1011</li><li>156.156.0/24第三个字节 1001 1100<br>那么这五个地址块的共同前缀有21位：212.156. 1001 1<br>最大可能聚合地址块是：212.156.1001 1000.00000000/21=212.156.152.0/21</li></ol><p>2、 某单位分配到一个地址块136.23.12.32 /27。现在需要进一步划分为4 个一样大的子网。试问：<br>（1）每个子网的网络前缀有多长？<br>（2）每一个子网中有多少个地址？<br>（3）每一个子网的地址块是什么？<br>（4）每一个子网可分配给主机使用的最小地址和最大地址是什么？<br>答：<br>将136.23.12.32 /27转换为二进制：10001000 00010111 00001100 00100000/27<br>（1）根据题意，建立4个子网，要借2位为子网号，22=4，所以网络前缀为27+2=29位，剩下32-29=3位作主机位。 所以每个子网前缀有29位。<br>   （2）每个子网的地址中有3位留给主机用，因此共有23=8个地址。<br>   （3）（4）四 个子网的地址块以及每个子网分配给主机的最小地址和最大地址是：<br>第一个地址块136.23.12.32 /29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00100 000/29<br>最小地址：136.23.12.33（00100 001）<br>最大地址: 136.23.12.38（00100 110）<br>第二个地址块136.23.12.40/29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00101 000/29<br>最小地址：136.23.12.41（00101 001）<br>最大地址：136.23.12.46（00101 110）<br>第三个地址块136.23.12.48 /29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00110 000/29<br>最小地址：136.23.12.49（00110 001）<br>最大地址：136.23.12.54（00110 110）<br>第四个地址块：136.23.12.56/29，可分配给主机使用的<br>转为二进制 10001000 00010111 00001100 00111 000/29<br>最小地址：136.23.12.57（00111 001）<br>最大地址：136.23.12.62（00111 110）</p><p>3、 某单位分配到地址块136.230/16。该单位有2000 台机器，平均分布在 8个不同的地点。试给每一个地点分配一个地址块，并计算出每个地址块中IP地址的最小值和最大值（说明：必须有完整的解题步骤，否则不得分。）<br>答：2000/8=250，每个点平均250台电脑。如选255.255.255.0为掩码，每个子网有28-2=254&gt;250，共有子网数=28-2=254&gt;8，能满足实际需求。<br>每个地点的网络前缀和主机IP地址的最小值和最大值为：<br>地点    子网号      子网络地址             主机的最小值和值<br>1      00000001     136.230.1.0/24  :  136.230.1.1–136.230.1.254<br>2      00000002     136.230.2.0/24  :  136.230.2.1–136.230.2.254<br>3      00000003     136.230.3.0/24  :  136.230.3.1–136.230.3.254<br>………………………………..<br>7      00000007     136.230.7.0/24  :  136.230.7.1–136.230.7.254<br>8      00000001     136.230.8.0/24  :  136.230.8.1–136.230.8.254</p><p>4、某组织分配到一个地址块，其中第一个地址是14.24.74.0/24。这个组织需要划分为11个子网。具体要求是：具有64个地址的子网两个；具有32个地址的子网两个；具有16个地址的子网三个；具有4个地址的子网四个（这里的地址包括网络地址和广播地址）。试设计这些子网。分配结束后还剩下多少地址？<br>（说明：必须有完整的解题步骤，否则不得分。）<br>解答：<br>将14.24.74.0/24转换为二进制：00001110 00011000 01001010 00000000/24</p><ol><li>具有64个地址的子网2个：<br>根据要求可知，要借2位为子网号，因为每个子网为64个地址，所以主机号最少要保留6位才能满足每个子网64个地址，主机号共有8位，剩下8-2=6位可借给网络号。<br>00001110 00011000 01001010 00 000000  转为十进制：14.24.74.0/26<br>00001110 00011000 01001010 01 000000  转为十进制：14.24.74.64/26<br>2）具有32个地址的子网2个<br>因为每个子网为32个地址，所以主机号最少要保留5位才能满足每个子网32个地址，主机号共有8位，剩下8-5=3位可借给网络号。<br>00001110 00011000 01001010 100 00000  转为十进制：14.24.74.128/27<br>00001110 00011000 01001010 101 00000  转为十进制：14.24.74.160/27<br>3）具有16个地址的子网3个<br>因为每个子网为16个地址，所以主机号最少要保留4位才能满足每个子网16个地址，主机号共有8位，剩下8-4=4位可借给网络号。<br>00001110 00011000 01001010 1100 0000  转为十进制：14.24.74.192/28<br>00001110 00011000 01001010 1101 0000  转为十进制：14.24.74.208/28<br>00001110 00011000 01001010 1110 0000  转为十进制：14.24.74.224/28<br>4）具有4个地址的子网4个<br>因为每个子网为4个地址，所以主机号最少要保留2位才能满足每个子网4个地址，主机号共有8位，剩下8-2=6位可借给网络号。<br>00001110 00011000 01001010 111100 00  转为十进制：14.24.74.240/30<br>00001110 00011000 01001010 111101 00  转为十进制：14.24.74.244/30<br>00001110 00011000 01001010 111110 00  转为十进制：14.24.74.248/30<br>00001110 00011000 01001010 111111 00  转为十进制：14.24.74.252/30<br>全部256个地址已经分配完毕，没有剩下的地址。</li></ol><h1 id="网络通信"><a href="#网络通信" class="headerlink" title="网络通信"></a>网络通信</h1><p>网络中进程如何通信<br>我们要理解网络中进程如何通信，得解决两个问题：</p><ul><li><p>1、我们要如何标识一台主机，即怎样确定我们将要通信的进程是在那一台主机上运行。<br>  ａ、TCP/IP协议族已经帮我们解决了这个问题，网络层的“ip地址”可以唯一标识网络中的主机</p></li><li><p>2、我们要如何标识唯一进程，本地通过pid标识，网络中应该怎样标识？<br>解决办法：<br>　　ｂ、传输层的“协议+端口”可以唯一标识主机中的应用程序（进程），因此，我们利用三元组（ip地址，协议，端口）就可以标识网络的进程了，网络中的进程通信就可以利用这个标志与其它进程进行交互</p></li></ul><h1 id="发送电子邮件"><a href="#发送电子邮件" class="headerlink" title="发送电子邮件"></a>发送电子邮件</h1><p>在即时通信软件如此发达的今天，电子邮件仍然是互联网上使用最为广泛的应用之一，公司向应聘者发出录用通知、网站向用户发送一个激活账号的链接、银行向客户推广它们的理财产品等几乎都是通过电子邮件来完成的，而这些任务应该都是由程序自动完成的。</p><p>就像我们可以用HTTP（超文本传输协议）来访问一个网站一样，发送邮件要使用SMTP（简单邮件传输协议），SMTP也是一个建立在TCP（传输控制协议）提供的可靠数据传输服务的基础上的应用级协议，它规定了邮件的发送者如何跟发送邮件的服务器进行通信的细节，而Python中的smtplib模块将这些操作简化成了几个简单的函数。</p><p>下面的代码演示了如何在Python发送邮件。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 请自行修改下面的邮件发送者和接收者</span></span><br><span class="line">    sender = <span class="string">'abcdefg@126.com'</span></span><br><span class="line">    receivers = [<span class="string">'uvwxyz@qq.com'</span>, <span class="string">'uvwxyz@126.com'</span>]</span><br><span class="line">    message = MIMEText(<span class="string">'用Python发送邮件的示例代码.'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'From'</span>] = Header(<span class="string">'王大锤'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'To'</span>] = Header(<span class="string">'骆昊'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(<span class="string">'示例代码实验邮件'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    smtper = SMTP(<span class="string">'smtp.126.com'</span>)</span><br><span class="line">    <span class="comment"># 请自行修改下面的登录口令</span></span><br><span class="line">    smtper.login(sender, <span class="string">'secretpass'</span>)</span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'邮件发送完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>如果要发送带有附件的邮件，那么可以按照下面的方式进行操作。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> smtplib <span class="keyword">import</span> SMTP</span><br><span class="line"><span class="keyword">from</span> email.header <span class="keyword">import</span> Header</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"><span class="keyword">from</span> email.mime.image <span class="keyword">import</span> MIMEImage</span><br><span class="line"><span class="keyword">from</span> email.mime.multipart <span class="keyword">import</span> MIMEMultipart</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建一个带附件的邮件消息对象</span></span><br><span class="line">    message = MIMEMultipart()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建文本内容</span></span><br><span class="line">    text_content = MIMEText(<span class="string">'附件中有本月数据请查收'</span>, <span class="string">'plain'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    message[<span class="string">'Subject'</span>] = Header(<span class="string">'本月数据'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># 将文本内容添加到邮件消息对象中</span></span><br><span class="line">    message.attach(text_content)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/Hao/Desktop/hello.txt'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        txt = MIMEText(f.read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        txt[<span class="string">'Content-Type'</span>] = <span class="string">'text/plain'</span></span><br><span class="line">        txt[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=hello.txt'</span></span><br><span class="line">        message.attach(txt)</span><br><span class="line">    <span class="comment"># 读取文件并将文件作为附件添加到邮件消息对象中</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'/Users/Hao/Desktop/汇总数据.xlsx'</span>, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        xls = MIMEText(f.read(), <span class="string">'base64'</span>, <span class="string">'utf-8'</span>)</span><br><span class="line">        xls[<span class="string">'Content-Type'</span>] = <span class="string">'application/vnd.ms-excel'</span></span><br><span class="line">        xls[<span class="string">'Content-Disposition'</span>] = <span class="string">'attachment; filename=month-data.xlsx'</span></span><br><span class="line">        message.attach(xls)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 创建SMTP对象</span></span><br><span class="line">    smtper = SMTP(<span class="string">'smtp.126.com'</span>)</span><br><span class="line">    <span class="comment"># 开启安全连接</span></span><br><span class="line">    <span class="comment"># smtper.starttls()</span></span><br><span class="line">    sender = <span class="string">'abcdefg@126.com'</span></span><br><span class="line">    receivers = [<span class="string">'uvwxyz@qq.com'</span>]</span><br><span class="line">    <span class="comment"># 登录到SMTP服务器</span></span><br><span class="line">    <span class="comment"># 请注意此处不是使用密码而是邮件客户端授权码进行登录</span></span><br><span class="line">    <span class="comment"># 对此有疑问的读者可以联系自己使用的邮件服务器客服</span></span><br><span class="line">    smtper.login(sender, <span class="string">'secretpass'</span>)</span><br><span class="line">    <span class="comment"># 发送邮件</span></span><br><span class="line">    smtper.sendmail(sender, receivers, message.as_string())</span><br><span class="line">    <span class="comment"># 与邮件服务器断开连接</span></span><br><span class="line">    smtper.quit()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'发送完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h1 id="发送短信"><a href="#发送短信" class="headerlink" title="发送短信"></a>发送短信</h1><p>发送短信也是项目中常见的功能，网站的注册码、验证码、营销信息基本上都是通过短信来发送给用户的。在下面的代码中我们使用了<a href="http://www.ihuyi.com/">互亿无线</a>短信平台（该平台为注册用户提供了50条免费短信以及常用开发语言发送短信的demo，可以登录该网站并在用户自服务页面中对短信进行配置）提供的API接口实现了发送短信的服务，当然国内的短信平台很多，读者可以根据自己的需要进行选择（通常会考虑费用预算、短信达到率、使用的难易程度等指标），如果需要在商业项目中使用短信服务建议购买短信平台提供的套餐服务。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> http.client</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    host  = <span class="string">"106.ihuyi.com"</span></span><br><span class="line">    sms_send_uri = <span class="string">"/webservice/sms.php?method=Submit"</span></span><br><span class="line">    <span class="comment"># 下面的参数需要填入自己注册的账号和对应的密码</span></span><br><span class="line">    params = urllib.parse.urlencode({<span class="string">'account'</span>: <span class="string">'你自己的账号'</span>, <span class="string">'password'</span> : <span class="string">'你自己的密码'</span>, <span class="string">'content'</span>: <span class="string">'您的验证码是：147258。请不要把验证码泄露给其他人。'</span>, <span class="string">'mobile'</span>: <span class="string">'接收者的手机号'</span>, <span class="string">'format'</span>:<span class="string">'json'</span> })</span><br><span class="line">    <span class="built_in">print</span>(params)</span><br><span class="line">    headers = {<span class="string">'Content-type'</span>: <span class="string">'application/x-www-form-urlencoded'</span>, <span class="string">'Accept'</span>: <span class="string">'text/plain'</span>}</span><br><span class="line">    conn = http.client.HTTPConnection(host, port=<span class="number">80</span>, timeout=<span class="number">30</span>)</span><br><span class="line">    conn.request(<span class="string">'POST'</span>, sms_send_uri, params, headers)</span><br><span class="line">    response = conn.getresponse()</span><br><span class="line">    response_str = response.read()</span><br><span class="line">    jsonstr = response_str.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="built_in">print</span>(json.loads(jsonstr))</span><br><span class="line">    conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础</title>
      <link href="/2021/122465132.html"/>
      <url>/2021/122465132.html</url>
      
        <content type="html"><![CDATA[<h2 id="2-基础知识"><a href="#2-基础知识" class="headerlink" title="2. 基础知识"></a>2. 基础知识</h2><p>高级语言的编译运行方式<br>编程：写好代码<br>编译: 机器只认识0011的机器语言，将代码转化成机器认识的过程<br>运行：让机器执行编译后的指令</p><h3 id="2-1-Java的进制"><a href="#2-1-Java的进制" class="headerlink" title="2.1. Java的进制"></a>2.1. Java的进制</h3><p>二进制：以0b开头<br>十进制：默认不加前缀<br>八进制：以0开头<br>十六进制：以0x开头</p><h3 id="2-2-用记事本编写Java代码"><a href="#2-2-用记事本编写Java代码" class="headerlink" title="2.2. 用记事本编写Java代码"></a>2.2. 用记事本编写Java代码</h3><p>在cmd中调用JDK中的Javac编译.Java文件<br><code>Javac demo.Java</code>最后会生成字节码.class文件</p><p>运行编译后的文件<code>Java demo</code> 此时不需要带后缀</p><h3 id="2-3-跨平台原理"><a href="#2-3-跨平台原理" class="headerlink" title="2.3. 跨平台原理"></a>2.3. 跨平台原理</h3><p>Java的跨平台时通过虚拟机实现的，<br>它不是直接运行在操作系统中，而是运行在虚拟机中，针对不同的操作系统，安装不同的虚拟机就可以了</p><h3 id="2-4-JRE和jdk"><a href="#2-4-JRE和jdk" class="headerlink" title="2.4. JRE和jdk"></a>2.4. JRE和jdk</h3><p>JDK : Java Development ToolKit(Java开发工具包)。JDK是整个Java的核心，包括了Java运行环境jre（Java Runtime Envirnment），Java工具（Javac/Java/jdb等）和Java基础的类库</p><ul><li><p>jre:Java运行环境</p><ul><li>在JDK的安装目录下有一个jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib合起来就称为jre。</li></ul></li><li><p>bin:Java工具</p><ul><li>Javac：编译工具</li><li>Java：运行工具</li><li>jdb：调试工具</li><li>jhat:内存分析工具</li></ul></li><li><p>lib：类库</p></li><li><p>include:Java和JVM交互用的头文件</p></li></ul><h3 id="2-5-标识符"><a href="#2-5-标识符" class="headerlink" title="2.5. 标识符"></a>2.5. 标识符</h3><p>命名规则<br>可以包含数字，但不能以数字开头<br>除了下划线_,和$符之外，不能有其它特殊字符，如空格<br>区分字母大小写<br>不能使用Java关键字<br>换行符\n要加双引号<br>System.out.println(“名字”+“\n”);</p><h3 id="2-6-注释"><a href="#2-6-注释" class="headerlink" title="2.6. 注释"></a>2.6. 注释</h3><p>单行注释：//<br>多行注释：从“/<em>”开始到“</em>/”结束，<br>文档注释：从“/*<em>”开始到“</em>/”结束<br>文档注释可以用Javadoc命令提取出来，生成类似于jdk文档的网页文件，以便于他人了解一个类的功能。</p><h3 id="2-7-变量"><a href="#2-7-变量" class="headerlink" title="2.7. 变量"></a>2.7. 变量</h3><p>变量定义格式：数据类型 变量名 =值;<br>前面不可以有访问符<br>变量只能存一个值，在使用前一定要赋值<br>变量名不允许重复定义</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一条语句可以定义多个变量</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>, y = <span class="number">5</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="3-Java-修饰符"><a href="#3-Java-修饰符" class="headerlink" title="3. Java 修饰符"></a>3. Java 修饰符</h2><h3 id="3-1-访问控制修饰符"><a href="#3-1-访问控制修饰符" class="headerlink" title="3.1. 访问控制修饰符"></a>3.1. 访问控制修饰符</h3><p><span id="fawen">访问符</span><br>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</p><ul><li><p>default (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。<br>接口里的变量都隐式声明为 public static final,而接口里的方法默认情况下访问权限为 public。</p></li><li><p>private : 在同一类内可见。使用对象：变量、方法。 注意：不能修饰类和接口<br>私有访问修饰符是最严格的访问级别，所以被声明为 private 的方法、变量和构造方法只能被所属类访问，<br>声明为私有访问类型的变量只能通过类中公共的 getter 方法被外部类访问。<br>Private 访问修饰符的使用主要用来隐藏类的实现细节和保护类的数据。</p></li><li><p>public : 对所有类可见。使用对象：类、接口、变量、方法</p></li><li><p>protected : 对同一包内的类和所有子类可见。使用对象：变量、方法。 注意：不能修饰类（外部类）。</p></li></ul><h3 id="3-2-非访问修饰符"><a href="#3-2-非访问修饰符" class="headerlink" title="3.2. 非访问修饰符"></a>3.2. 非访问修饰符</h3><p>为了实现一些其他的功能，Java 也提供了许多非访问修饰符。</p><ul><li><p>final 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p></li><li><p>abstract 修饰符，用来创建抽象类和抽象方法。</p></li><li><p>synchronized 和 volatile 修饰符，主要用于线程的编程。</p></li><li><p>static 修饰符：用来修饰类方法和类变量。<br>静态变量：<br>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p></li></ul><p>静态方法：<br>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p><h2 id="4-运算符"><a href="#4-运算符" class="headerlink" title="4. 运算符"></a>4. 运算符</h2><h3 id="4-1-算术运算符"><a href="#4-1-算术运算符" class="headerlink" title="4.1. 算术运算符"></a>4.1. 算术运算符</h3><pre><code>前缀自增自减法(++a,--a): 先进行自增或者自减运算，再进行表达式运算。后缀自增自减法(a++,a--): 先进行表达式运算，再进行自增或者自减运算</code></pre><ul><li>关系运算符</li></ul><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">!= 检查如果两个操作数的值是否相等，如果值不相等则条件为真。 (A != B) 为真。</span><br><span class="line">&gt;  检查左操作数的值是否大于右操作数的值，如果是那么条件为真。 （A&gt; B）为假。</span><br><span class="line">&lt;  检查左操作数的值是否小于右操作数的值，如果是那么条件为真。（A &lt;B）为真。</span><br><span class="line">&gt;= 检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。 （A&gt; = B）为假。</span><br><span class="line">&lt;= 检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。 （A &lt;= B）为真。</span><br><span class="line">== 在基本数据类型中比较数据值，在引用数据类型中比的是地址值 </span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-位运算符"><a href="#4-2-位运算符" class="headerlink" title="4.2. 位运算符"></a>4.2. 位运算符</h3><p>位运算符是对long、int、short、byte和char这5种类型的数据进行运算的，是对二进制位上的数值进行计算,我们不能对double、float和boolean进行位运算操作</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">＆ 如果相对应位都是1，则结果为1，否则为0 （A＆B），得到12，即0000 1100</span><br><span class="line">| 如果相对应位都是 0，则结果为 0，否则为 1 （A | B）得到61，即 0011 1101</span><br><span class="line">^ 如果相对应位值相同，则结果为0，否则为1 （A ^ B）得到49，即 0011 0001</span><br><span class="line">〜 按位取反运算符翻转操作数的每一位，即0变成1，1变成0。 （〜A）得到-61，即1100 0011</span><br><span class="line">&lt;&lt;  按位左移运算符。左操作数按位左移右操作数指定的位数。 A &lt;&lt; 2得到240，即 1111 0000</span><br><span class="line">&gt;&gt;  按位右移运算符。左操作数按位右移右操作数指定的位数。 A &gt;&gt; 2得到15即 1111</span><br><span class="line">&gt;&gt;&gt;  按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。 A&gt;&gt;&gt;2得到15即0000 1111</span><br></pre></td></tr></tbody></table></figure><h3 id="4-3-逻辑运算符"><a href="#4-3-逻辑运算符" class="headerlink" title="4.3. 逻辑运算符"></a>4.3. 逻辑运算符</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&amp;&amp; 称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。 （A &amp;&amp; B）为假。</span><br><span class="line">|| 称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。 （A | | B）为真。</span><br><span class="line">！ 称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。 ！（A &amp;&amp; B）为真。</span><br></pre></td></tr></tbody></table></figure><h3 id="4-4-赋值运算符"><a href="#4-4-赋值运算符" class="headerlink" title="4.4. 赋值运算符"></a>4.4. 赋值运算符</h3><h3 id="4-5-条件运算符-三元运算符"><a href="#4-5-条件运算符-三元运算符" class="headerlink" title="4.5. 条件运算符(三元运算符)"></a>4.5. 条件运算符(三元运算符)</h3><p><code>条件判断语句 ? value if true : value if false</code></p><h3 id="4-6-其他运算符"><a href="#4-6-其他运算符" class="headerlink" title="4.6. 其他运算符"></a>4.6. 其他运算符</h3><h2 id="9-循环结构"><a href="#9-循环结构" class="headerlink" title="9. 循环结构"></a>9. 循环结构</h2><h3 id="9-1-while循环"><a href="#9-1-while循环" class="headerlink" title="9.1. while循环"></a>9.1. while循环</h3><p>如果您想要同样的操作执行多次,，就需要使用循环结构。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>( 布尔表达式 ) {</span><br><span class="line"> <span class="comment">//循环内容</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="9-2-do-while循环"><a href="#9-2-do-while循环" class="headerlink" title="9.2. do while循环"></a>9.2. do while循环</h3><p>对于while语句而言，如果不满足条件，则不能进入循环。<br>但有时候我们需要即使不满足条件，也至少执行一次。可以用到do…while循环</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> {</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">}<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></tbody></table></figure><h3 id="9-3-for循环"><a href="#9-3-for循环" class="headerlink" title="9.3. for循环"></a>9.3. for循环</h3><p>关于for循环有以下几点说明：</p><p>1.最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。<br>2.然后，检测布尔表达式的值。如果为true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。<br>3.执行一次循环后，更新循环控制变量。<br>4.再次检测布尔表达式。循环执行上面的过程。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) {</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="9-4-foreach-循环"><a href="#9-4-foreach-循环" class="headerlink" title="9.4. foreach 循环"></a>9.4. foreach 循环</h3><p>在遍历数组、集合方面使用<br>foreach 循环语句的语法格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(类型 变量名:集合) {</span><br><span class="line">    语句块;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>“类型”为集合元素的类型，“变量名”表示集合中的每一个元素，“集合”是被遍历的集合对象或数组。每执行一次循环语句，循环变量就读取集合中的一个元素，</p><h3 id="9-5-break关键字"><a href="#9-5-break关键字" class="headerlink" title="9.5. break关键字"></a>9.5. break关键字</h3><p>break主要用在循环语句或者switch语句中，用来跳出整个语句块。</p><p>break跳出最里层的循环，并且继续执行该循环下面的语句。</p><h3 id="9-6-continue关键字"><a href="#9-6-continue关键字" class="headerlink" title="9.6. continue关键字"></a>9.6. continue关键字</h3><p>continue适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p><p>在for循环中，continue语句使程序立即跳转到更新语句。提前结束本次循环，直接执行下次循环</p><p>在while或者do…while循环中，程序立即跳转到布尔表达式的判断语句。</p><h2 id="10-分支结构"><a href="#10-分支结构" class="headerlink" title="10. 分支结构"></a>10. 分支结构</h2><h3 id="10-1-if…else-if…else-语句"><a href="#10-1-if…else-if…else-语句" class="headerlink" title="10.1. if…else if…else 语句"></a>10.1. if…else if…else 语句</h3><p>if 语句后面可以跟 else if…else 语句，这种语句可以检测到多种可能的情况。</p><p>使用if，else if，else语句的时候，需要注意下面几点：</p><p>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。<br>If 语句可以有若干个 else if 语句，它们必须在 else 语句之前。<br>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(){</span><br><span class="line"></span><br><span class="line">}<span class="keyword">else</span> <span class="keyword">if</span>(){</span><br><span class="line"></span><br><span class="line">}<span class="keyword">else</span>{   <span class="comment">//可以不用else}</span></span><br></pre></td></tr></tbody></table></figure><h3 id="10-2-switch多重选择"><a href="#10-2-switch多重选择" class="headerlink" title="10.2. switch多重选择"></a>10.2. switch多重选择</h3><p>switch 语句<br>switch 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</p><p>switch 语法格式如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression){</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>switch 语句有如下规则：</p><p>switch 语句中的变量类型只能为 byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</p><p>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。<br>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。<br>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到break语句出现才会跳出 switch 语句。</p><p>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</p><p>switch 语句可以包含一个 default 分支，该分支必须是 switch 语句的最后一个分支。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</p><h2 id="11-Java方法"><a href="#11-Java方法" class="headerlink" title="11. Java方法"></a>11. Java方法</h2><p>定义格式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(参数类型 参数名){</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>修饰符：修饰符，这是可选的，告诉编译器如何调用该方法。定义了该方法的访问类型。</p></li><li><p>返回值类型 ：方法可能会返回值。returnValueType 是方法返回值的数据类型。若方法中没有returun返回值，则该方法的返回类型为void类型。</p></li><li><p>方法名：是方法的实际名称。方法名和参数表共同构成方法签名。</p></li><li><p>参数类型：参数像是一个占位符。当方法被调用时，传递值给参数。这个值被称为实参或变量。参数列表是指方法的参数类型、顺序和参数的个数。参数是可选的，方法可以不包含任何参数。</p></li><li><p>方法体：方法体包含具体的语句，定义该方法的功能。</p></li></ul><p>若方法中没有returun返回值，则该方法的返回类型为void类型</p><h2 id="12-参数"><a href="#12-参数" class="headerlink" title="12. 参数"></a>12. 参数</h2><h3 id="12-1-形参-amp-实参"><a href="#12-1-形参-amp-实参" class="headerlink" title="12.1. 形参&amp;实参"></a>12.1. 形参&amp;实参</h3><p>形参：声明方法时定义的参数，形参前必须有数据类型  格式：方法名（数据类型 形参）<br>实参：调用方法时给方法传递的实际数据，使用格式：对象名.方法名（实参）</p><h3 id="12-2-值传递-amp-引用传递"><a href="#12-2-值传递-amp-引用传递" class="headerlink" title="12.2. 值传递&amp;引用传递"></a>12.2. 值传递&amp;引用传递</h3><h3 id="12-3-Java只有值传递"><a href="#12-3-Java只有值传递" class="headerlink" title="12.3. Java只有值传递"></a>12.3. Java只有值传递</h3><p>Java 中将实参传递给方法（或函数）的方式只有 值传递 ：<br> 如果参数是基本类型的话，传递的就是基本类型的字面量值的拷贝，会创建副本。<br> 如果参数是引用类型，传递的就是实参所引用的对象在堆中地址值的拷贝，同样也会创建副本。</p><h3 id="12-4-参数传内置类型"><a href="#12-4-参数传内置类型" class="headerlink" title="12.4. 参数传内置类型"></a>12.4. 参数传内置类型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> q, <span class="keyword">int</span> w)</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> temp = q;</span><br><span class="line">    q = w;</span><br><span class="line">    w = temp;</span><br><span class="line">    <span class="keyword">return</span> q;</span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">  <span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line">    swap(a, b); <span class="comment">//交换a,b</span></span><br><span class="line">    System.out.println(a);  <span class="comment">//1</span></span><br><span class="line">    System.out.println(b); <span class="comment">//2 </span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>  我们用 内置类型作为参数，进行交换变量，但是最后编译的结果 两个变量却并未发生交换.<br>这是因为交换形参 的值, 不影响实参的 值.</p><h3 id="12-5-参数传数组类型"><a href="#12-5-参数传数组类型" class="headerlink" title="12.5. 参数传数组类型"></a>12.5. 参数传数组类型</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>{</span><br><span class="line">       <span class="keyword">int</span> temp = arr[<span class="number">0</span>];</span><br><span class="line">         arr[<span class="number">0</span>] = arr[<span class="number">1</span>];</span><br><span class="line">         arr[<span class="number">1</span>] = temp;</span><br><span class="line">         <span class="keyword">return</span> arr[<span class="number">0</span>];</span><br><span class="line"> }</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">     <span class="keyword">int</span>[] arr = {<span class="number">1</span>,<span class="number">2</span>};</span><br><span class="line">     System.out.println(<span class="string">"转换器前"</span>+Arrays.toString(arr));  <span class="comment">//转换器前[1, 2]</span></span><br><span class="line">     swap(arr);</span><br><span class="line">     System.out.println(<span class="string">"转换后"</span>+Arrays.toString(arr)); <span class="comment">//转换后[2, 1]</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>我们用 数组作为参数，进行交换变量，编译运行后，发现成功交换两个变量的值。此时数组名 arr 是一个 “引用” . 当传参的时候, 是按照引用传参.</p><p>我们可以知道，数组这个在栈中存放的变量实际存放的是 堆中数据的地址，当我们 arr 数组作为参数 传入 方法里，我们就把 堆中数据的地址 传入了进去，在方法内部，我们可以根据 这个地址 找到堆中的数据进而修改数据，从而实现了形参改变了实参的操作.</p><p>  所谓的 “引用” 本质上只是存了一个地址. Java 将数组设定成引用类型, 这样的话后续进行数组参数传参, 其实只是将数组的地址传入到函数形参中. 这样可以避免对整个数组的拷贝(数组可能比较长, 那么拷贝开销就会很大).</p><h3 id="12-6-可变参数"><a href="#12-6-可变参数" class="headerlink" title="12.6. 可变参数"></a>12.6. 可变参数</h3><p>定义格式<br>方法名（参数列表，数据类型 … 变量）<br>注意：<br>可变参数只能处于参数列表的最后<br>一个方法最多只能包含一个可变参数<br>可变参数本质是一个数组，因此在调用时，既可以传入多个参数，也可传入一个数组</p><h2 id="13-类"><a href="#13-类" class="headerlink" title="13. 类"></a>13. 类</h2><p>类可以看成是创建 Java 对象的模板。，描述一类对象的属性(状态)和方法(行为)<br>定义类的注意事项：<br>1.类名使用 UpperCamelCase风格，必须遵从驼峰形式，即每个单词首字母均大写，且public类名应与所在项目名保持一致。<br>2.一个Java文件可以定义多个class类，建议一个文件定义一个类；但只能有一个类被public修饰，而且public修饰的类必须是代码文件名，</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>{</span><br><span class="line">    成员变量</span><br><span class="line">    成员方法</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-1-类型变量"><a href="#13-1-类型变量" class="headerlink" title="13.1. 类型变量"></a>13.1. 类型变量</h3><p>一个类可以包含以下类型变量：</p><ul><li><p>1.成员变量：成员变量是定义在类中，方法体之外的变量。<br>这种变量在创建对象的时候实例化。直接把field用public暴露给外部可能会破坏封装性，所以用private，外部代码可以调用get()方法和set()方法来间接获取和修改指定的私有成员变量的值<br>成员变量可以被类中方法、构造方法和特定类的语句块访问。<br><code>修饰符 数据类型 变量名</code></p></li><li><p>2.局部变量：在方法、构造方法或者语句块中定义的变量被称为局部变量。变量声明和初始化都是在方法中，方法结束后，变量就会自动销毁。</p></li><li><p>类变量：类变量也声明在类中，方法体之外，但必须声明为 static 类型。</p></li></ul><h4 id="13-1-1-就近原则"><a href="#13-1-1-就近原则" class="headerlink" title="13.1.1. 就近原则"></a>13.1.1. 就近原则</h4><p>谁离我近，我就用谁</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Friend</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">int</span> age =<span class="number">10</span>;</span><br><span class="line">        System.out.println(age); <span class="comment">//10</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="13-1-2-this关键字"><a href="#13-1-2-this关键字" class="headerlink" title="13.1.2. this关键字"></a>13.1.2. this关键字</h4><p>this代表当前对象的内存地址，<br>在实例方法或者构造方法中，为了区分局部变量和实例变量，this不能省略<br>代表当前类将来产生的对象，即将来用该类new出来的对象，用于获取当前类的对象的引用<br>this.name = name  //this.name值成员变量</p><h4 id="13-1-3-supper关键字"><a href="#13-1-3-supper关键字" class="headerlink" title="13.1.3. supper关键字"></a>13.1.3. supper关键字</h4><p>通过super关键字来实现对父类成员的访问，用来引用当前对象的父类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"animal : eat"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"dog : eat"</span>);</span><br><span class="line">  }</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eatTest</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.eat();   <span class="comment">// this 调用自己的方法</span></span><br><span class="line">        <span class="keyword">super</span>.eat();  <span class="comment">// super 调用父类方法</span></span><br><span class="line">        System.out.println(supper.age)   </span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-2-构造方法-构造器"><a href="#13-2-构造方法-构造器" class="headerlink" title="13.2. 构造方法(构造器)"></a>13.2. 构造方法(构造器)</h3><p>作用：在创建对象时初始化成员变量</p><h4 id="13-2-1-两种构造器"><a href="#13-2-1-两种构造器" class="headerlink" title="13.2.1. 两种构造器"></a>13.2.1. 两种构造器</h4><p>无论是否使用，建议两个都写上，右键直接生成</p><ul><li>空参构造方法：可以省略，如果我们没有写任何构造方法，虚拟机会给我们加一个空参构造。初始化对象时，成员变量采用默认值</li><li>带参构造方法:初始化对象时，同时为对象赋值</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person p1 = <span class="keyword">new</span> Person(<span class="string">"Xiao Ming"</span>, <span class="number">15</span>); <span class="comment">// 调用带参数的构造方法</span></span><br><span class="line">Person p2 = <span class="keyword">new</span> Person(); <span class="comment">// 调用无参数构造方法</span></span><br></pre></td></tr></tbody></table></figure><p>特点：<br>1.构造方法的名称与类名一致。<br>2.构造方法没有返回类型（也没有void），没有返回值(不能有return)<br>3.构造方法在创建对象时由虚拟机调用，不能手动调用构造方法，每次创建对象，都会调用一次<br>调用构造方法，必须用new操作符。<br>不能被static、final、synchronized、abstract和native修饰。构造方法不能被子类继承，所以用final和abstract修饰没有意义。</p><h4 id="13-2-2-定义"><a href="#13-2-2-定义" class="headerlink" title="13.2.2. 定义"></a>13.2.2. 定义</h4><p>构造方法用于初始化一个新建的对象，所以用static修饰没有意义</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">访问修饰符 类名(参数){</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="13-2-3-子类调用"><a href="#13-2-3-子类调用" class="headerlink" title="13.2.3. 子类调用"></a>13.2.3. 子类调用</h4><p>构造器只能够被调用（隐式或显式），而不能被继承<br>如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p><p>如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span> </span>{</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  <span class="comment">//无参构造器</span></span><br><span class="line">  SuperClass(){}</span><br><span class="line">  <span class="comment">//带参构造器</span></span><br><span class="line">  SuperClass(<span class="keyword">int</span> n) {</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// SubClass2 类继承</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span> <span class="keyword">extends</span> <span class="title">SuperClass</span></span>{</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> n;</span><br><span class="line">  </span><br><span class="line">  SubClass2(){</span><br><span class="line">    <span class="keyword">super</span>(<span class="number">300</span>);  <span class="comment">// 调用父类中带有参数的构造器</span></span><br><span class="line">    System.out.println(<span class="string">"SubClass2"</span>);</span><br><span class="line">  }  </span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">SubClass2</span><span class="params">(<span class="keyword">int</span> n)</span></span>{ <span class="comment">// 自动调用父类的无参数构造器</span></span><br><span class="line">    System.out.println(<span class="string">"SubClass2(int n):"</span>+n);</span><br><span class="line">    <span class="keyword">this</span>.n = n;</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-3-set方法和get方法"><a href="#13-3-set方法和get方法" class="headerlink" title="13.3. set方法和get方法"></a>13.3. set方法和get方法</h3><p>用private修饰的成员只能在本类才能访问，</p><p>当类中有private修饰的私有变量时，其他类只能通过set和get方法间接地操作这些私有域变量</p><p>因此要对每个私有变量都要提供get(获取),set(赋值)方法，右键直接生成就好</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.返回类型必须是void </span></span><br><span class="line"><span class="comment">// 2.方法名是set+成员变量名字的首字母大写 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>{</span><br><span class="line">    <span class="keyword">this</span>.name= name</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> age</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="13-4-方法的调用"><a href="#13-4-方法的调用" class="headerlink" title="13.4. 方法的调用"></a>13.4. 方法的调用</h3><p>1.调用非静态方法<br> 对象名.方法名（）<br>2.调用静态方法<br> 类名.方法名()</p><h3 id="13-5-方法重载"><a href="#13-5-方法重载" class="headerlink" title="13.5. 方法重载"></a>13.5. 方法重载</h3><p>方法重载是指在一个类中定义多个同名的方法，但要求每个方法具有不同的参数的类型或参数的个数。<br>目的：功能类似的方法使用同一名字，更容易记住，因此，调用起来更简单。</p><h3 id="13-6-方法重写"><a href="#13-6-方法重写" class="headerlink" title="13.6. 方法重写"></a>13.6. 方法重写</h3><p>子类重写了父类的方法<br>注意：方法名相同，方法参数相同，但方法返回值不同，也是不同的方法</p><h3 id="13-7-内部类"><a href="#13-7-内部类" class="headerlink" title="13.7. 内部类"></a>13.7. 内部类</h3><p>Java允许在一个类的类体里再定义一个类，该情况下外面的类叫外部类，里面的叫内部类<br>内部类可以访问其所在内部类的所有属性</p><h4 id="13-7-1-成员内部类"><a href="#13-7-1-成员内部类" class="headerlink" title="13.7.1. 成员内部类"></a>13.7.1. 成员内部类</h4><p>在外部类的内部定义一个类</p><h4 id="13-7-2-静态内部类"><a href="#13-7-2-静态内部类" class="headerlink" title="13.7.2. 静态内部类"></a>13.7.2. 静态内部类</h4><h4 id="13-7-3-非静态内部类"><a href="#13-7-3-非静态内部类" class="headerlink" title="13.7.3. 非静态内部类"></a>13.7.3. 非静态内部类</h4><h4 id="13-7-4-局部内部类"><a href="#13-7-4-局部内部类" class="headerlink" title="13.7.4. 局部内部类"></a>13.7.4. 局部内部类</h4><h4 id="13-7-5-匿名内部类"><a href="#13-7-5-匿名内部类" class="headerlink" title="13.7.5. 匿名内部类"></a>13.7.5. 匿名内部类</h4><h3 id="13-8-抽象类"><a href="#13-8-抽象类" class="headerlink" title="13.8. 抽象类"></a>13.8. 抽象类</h3><p>抽象类是类和类之间的共同特征，将这些共同特征进一步形成抽象类，</p><p>包含一个或多个抽象方法的类就是抽象类，抽象方法即没有方法体的方法，抽象方法和抽象类都必须声明为 abstract</p><h4 id="13-8-1-抽象类的意义"><a href="#13-8-1-抽象类的意义" class="headerlink" title="13.8.1. 抽象类的意义"></a>13.8.1. 抽象类的意义</h4><p>抽取共性时，无法确定方法体，就把方法定义为抽象<br>抽象类作为子类的模版，强制子类按照格式书写，避免子类设计的随意性</p><h4 id="13-8-2-抽象类的特点"><a href="#13-8-2-抽象类的特点" class="headerlink" title="13.8.2. 抽象类的特点"></a>13.8.2. 抽象类的特点</h4><p>抽象类除了抽象方法之外，抽象类还可以包含具体数据和具体方法，这也是接口和抽象类的不同之处，接口中是不能包含具体方法的。</p><p>有抽象方法的类只能被定义为抽象类，但抽象类中可以没有抽象方法</p><p>final和abstract不能同时同时使用，这两个关键字是对立的。抽象方法不能被 final 修饰，因为抽象方法就是被子类实现的</p><p>由于类本身不存在，所以抽象类无法实例化创建对象。只可以通过抽象类派生出新的子类，再由其子类来创建对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person是抽象类</span></span><br><span class="line"><span class="comment">// 抽象类不能被实例化</span></span><br><span class="line"><span class="keyword">new</span> Person(<span class="string">"Jack"</span>); <span class="comment">// Error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以定义一个抽象类的对象变量， 但是它只能引用非抽象子类的对象。 假设 Student 类是 Person 的非抽象子类：</span></span><br><span class="line">Person p = <span class="keyword">new</span> Student(<span class="string">"Jack"</span>); <span class="comment">// Right</span></span><br></pre></td></tr></tbody></table></figure><p>语法格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类定义</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> 类名</span>{</span><br><span class="line"><span class="comment">//抽象方法，没有{}括起来的方法体</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">abstract</span> 返回值类型 方法名（参数列表）; </span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">//方法体</span></span><br><span class="line">    }   </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="13-8-3-抽象类的子类"><a href="#13-8-3-抽象类的子类" class="headerlink" title="13.8.3. 抽象类的子类"></a>13.8.3. 抽象类的子类</h4><p>抽象类的子类可以是抽象类。也可以是非抽象类</p><ul><li>抽象子类：如果不重写抽象父类的所有抽象方法，那么子类仍然是一个抽象类，编译器会强制我们为新类加上 abstract 关键字。</li><li>非抽象子类：继承抽象类，必须将抽象类中的所有抽象方法进行覆盖/重写/实现，因此不能用private修饰抽象方法</li></ul><p>写一个子类继承抽象类，重写抽象方法<br>虽然不能直接new一个抽象类，但可以先声明一个抽象类变量，再用这个变量指向其子类对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">抽象类名 a = <span class="keyword">new</span> 子类名();  <span class="comment">//抽象类变量指向子类对象</span></span><br></pre></td></tr></tbody></table></figure><h2 id="14-Object类"><a href="#14-Object类" class="headerlink" title="14. Object类"></a>14. Object类</h2><p>Object 是 Java 类库中的一个特殊类，也是所有类的父类。也就是说，Java 允许把任何类型的对象赋给 Object 类型的变量。当一个类被定义后，如果没有指定继承的父类，那么默认父类就是 Object 类</p><p>由于 Java 所有的类都是 Object 类的子类，所以任何 Java 对象都可以调用 Object 类的方法。<br>| 方法                     | 说明                                                |<br>|————————|—————————————————|<br>| Object clone()         | 创建与该对象的类相同的新对象                                    |<br>| boolean equals(Object) | 比较两对象是否相等                                         |<br>| void finalize()        | 当垃圾回收器确定不存在对该对象的更多引用时，对象垃圾回收器调用该方法                |<br>| Class getClass()       | 返回一个对象运行时的实例类                                     |<br>| int hashCode()         | 返回该对象的散列码值                                        |<br>| void notify()          | 激活等待在该对象的监视器上的一个线程                                |<br>| void notifyAll()       | 激活等待在该对象的监视器上的全部线程                                |<br>| String toString()      | 返回该对象的字符串表示                                       |<br>| void wait()            | 在其他线程调用此对象的 notify() 方法或 notifyAll() 方法前，导致当前线程等待 |</p><h3 id="14-1-toString-方法"><a href="#14-1-toString-方法" class="headerlink" title="14.1. toString() 方法"></a>14.1. toString() 方法</h3><p>toString() 方法返回该对象的字符串，当程序输出一个对象或者把某个对象和字符串进行连接运算时，系统会自动调用该对象的 toString() 方法返回该对象的字符串表示。</p><p>Object 类的 toString() 方法返回“运行时类名@十六进制哈希码”格式的字符串，但很多类都重写了 Object 类的 toString() 方法，用于返回可以表述该对象信息的字符串。<br>哈希码（hashCode），每个 Java 对象都有哈希码属性，哈希码可以用来标识对象，提高对象在集合操作中的执行效率。</p><h3 id="14-2-equals-方法"><a href="#14-2-equals-方法" class="headerlink" title="14.2. equals() 方法"></a>14.2. equals() 方法</h3><p>在前面学习字符串比较时，曾经介绍过两种比较方法，分别是==运算符和 equals() 方法，<br>==运算符是比较两个引用变量是否指向同一个实例<br>equals() 方法是比较两个对象的内容是否相等，通常字符串的比较只是关心内容是否相等。</p><h3 id="14-3-getClass-方法"><a href="#14-3-getClass-方法" class="headerlink" title="14.3. getClass() 方法"></a>14.3. getClass() 方法</h3><p>getClass() 方法返回对象所属的类，是一个 Class 对象。通过 Class 对象可以获取该类的各种信息，包括类名、父类以及它所实现接口的名字等。</p><h3 id="14-4-接收任意引用类型的对象"><a href="#14-4-接收任意引用类型的对象" class="headerlink" title="14.4. 接收任意引用类型的对象"></a>14.4. 接收任意引用类型的对象</h3><p>既然 Object 类是所有对象的父类，则所有的对象都可以向 Object 进行转换，在这其中也包含了数组和接口类型，即一切的引用数据类型都可以使用 Object 进行接收。</p><h2 id="15-接口"><a href="#15-接口" class="headerlink" title="15. 接口"></a>15. 接口</h2><p>接口规定一批类必须提供某些方法，但不提供实现方法<br>不能用final关键字修饰接口<br>当多个对象不能够抽象出共同的父类，但有共同的行为，这种情况下就需要将这种行为封装成接口。</p><h3 id="15-1-接口的意义"><a href="#15-1-接口的意义" class="headerlink" title="15.1. 接口的意义"></a>15.1. 接口的意义</h3><p>既然有了抽象类，java还要引入接口的原因：因为一个类可以实现多个接口，但是一个类只能继承一个父类。正是接口的出现打破了 Java 这种单继承的局限，为定义类的行为提供了极大的灵活性。有一条实际经验：在合理的范围内尽可能地抽象。显然，接口比抽象类还要抽象。因此，一般更倾向使用接口而不是抽象类</p><p>定义接口并非多余，接口是用来提供公用的方法，规定子类的行为的</p><p>比如有个网站， 需要保存不同客户的信息， 有些客户从 Web 网站来， 有些客户从手机客户端来， 有些客户直接从后台管理系统录入。假设不同来源的客户有不同的处理业务流程， 这个时候我们定义接口来提供一个保存客户信息的方法，然后不同的平台实现我们这个保存客户信息的接口，以后保存客户信息的话， 我们只需要知道这个接口就可以了，具体调用的方法被封装成了黑盒子，这也就是 Java 的多态的体现，接口帮助我们对这些有相同功能的方法做了统一管理。</p><h3 id="15-2-接口特性"><a href="#15-2-接口特性" class="headerlink" title="15.2. 接口特性"></a>15.2. 接口特性</h3><p>接口没有构造方法，无法实例化对象，不过可以声明一个接口变量引用接口的实现类对象<br><code>Concept x = new Implementation()    //声明Concept接口变量x引用实现类Implementation对象</code></p><p>接口中所有方法必须是抽象方法，Java8中允许接口包含默认方法和静态方法<br>接口中不能包含成员变量，除了static和final变量<br>接口不是被类继承了，而是被类实现了，一个类可以实现多个接口<br>接口支持多重继承</p><h3 id="15-3-接口成员特点"><a href="#15-3-接口成员特点" class="headerlink" title="15.3. 接口成员特点"></a>15.3. 接口成员特点</h3><p>接口是隐性抽象的，接口中的每个方法也是隐形抽象的，声明时不必使用abstract关键字</p><p>接口访问符应该是public或默认，因为接口应该要被继承的，默认是采用包权限访问控制，即在相同包内才可以访问该接口</p><ul><li>接口的成员变量被隐含地声明为public static final，只能是静态常量</li><li>接口没有构造方法</li><li>接口的成员方法被隐形指定为public absrtact<br>jdk7接口只能定义抽象方法，jdk9后接口可以定义有方法体的方法(默认，静态)和私有方法<br>默认方法，静态方法，私有方法</li></ul><h3 id="15-4-定义接口"><a href="#15-4-定义接口" class="headerlink" title="15.4. 定义接口"></a>15.4. 定义接口</h3><p>Java 使用关键字 interface 而不是 class 来创建接口。和类一样，通常我们会在关键字 interface 前加上 public 关键字，否则接口只有包访问权限，只能在接口相同的包下才能使用它。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">访问符 <span class="class"><span class="keyword">interface</span> 接口名  </span>{</span><br><span class="line"><span class="comment">//接口定义的只能是静态常量</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口定义的普通方法只能是public的抽象方法</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//接口中定义默认方法，用default修饰</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> b)</span></span>{}</span><br><span class="line"><span class="comment">//接口中定义类方法，用static修饰</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="15-5-实现接口"><a href="#15-5-实现接口" class="headerlink" title="15.5. 实现接口"></a>15.5. 实现接口</h3><p>接口不能实例化<br>接口和类是实现关系，用implements实现接口，可以单实现，也可以多实现，必须实现接口中定义的所有抽象方法，<br>语法格式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">访问符 <span class="class"><span class="keyword">class</span> 实现类名 <span class="keyword">implements</span> 接口1，接口2</span>{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[]args)</span></span>{</span><br><span class="line"><span class="comment">//先声明一个接口类型的变量，new一个该接口实现类的实例对象，并将其引用赋值给变量</span></span><br><span class="line">接口名 变量名 = <span class="keyword">new</span> 接口实现类（）;</span><br><span class="line"><span class="comment">//调用接口的默认方法，必须通过实例对象来调用</span></span><br><span class="line">变量名.默认方法（）;</span><br><span class="line"><span class="comment">//调用接口的类方法</span></span><br><span class="line">接口名.类方法（）;</span><br><span class="line"><span class="comment">//声明接口实现类的变量，并实例化该类型对象</span></span><br><span class="line">接口实现类名 变量名 = <span class="keyword">new</span> 接口实现类名（）;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="15-6-接口的继承"><a href="#15-6-接口的继承" class="headerlink" title="15.6. 接口的继承"></a>15.6. 接口的继承</h3><p>接口可以继承多个接口，不能继承类<br>使用interface可以声明一个接口：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>属性只能是常量</p><p>一个类可以实现多个interface，例如：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Person</span>, <span class="title">Hello</span> </span>{ <span class="comment">// 实现了两个interface</span></span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="15-7-Java-8-接口新特性"><a href="#15-7-Java-8-接口新特性" class="headerlink" title="15.7. Java 8 接口新特性"></a>15.7. Java 8 接口新特性</h3><p>在 Java 8 中，允许在接口中增加静态方法和默认方法。理论上讲，没有任何理由认为这是不合法的，只是这有违于将接口作为抽象规范的初衷。举个例子</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Concept</span> </span>{</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">(String name)</span></span>{</span><br><span class="line">     System.out.println(<span class="string">"hello "</span> + name);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">// 默认方法</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">idea1</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"this is idea1"</span>);</span><br><span class="line">    };</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>用 default 修饰符标记的方法就是默认方法，这样子类就不需要去实现这个方法了。</p><p>不过，引入默认方法后，就出现了一个默认方法冲突的问题。如果先在一个接口 A 中将一个方法 idea 定义为默认方法， 然后又在另一个接口 B 或者超类 C 中定义了同样的方法 idea，然后类 D 实现了这两个接口 A 和 B（或超类 C）。于是类 D 中就有了方法 idea 的两个默认实现，出现了冲突，为此，Java 制定了一套规则来解决这个二义性问题：<br>1 ) 超类优先。如果超类提供了一个具体方法，接口中的同名且有相同参数类型的默认方法会被忽略。</p><p>2 ) 接口冲突。 如果一个父类接口提供了一个默认方法，另一个父类接口也提供了一个同名而且参数类型相同的方法，子类必须覆盖这个方法来解决冲突。</p><h2 id="16-面对对象"><a href="#16-面对对象" class="headerlink" title="16. 面对对象"></a>16. 面对对象</h2><p>对象是类的一个实例，有状态和行为</p><p>对比面向过程，是两种不同的处理问题的角度，面向过程注重于每个过程的步骤及顺序</p><p>面向对象更注重于事情有哪些参与者即对象，以及各自需要做什么。</p><p>面向过程比较直接高效，而面向对象更易于复用，扩展和维护。</p><p>面向对象有三大特性：封装，继承，多态</p><h3 id="16-1-创建对象"><a href="#16-1-创建对象" class="headerlink" title="16.1. 创建对象"></a>16.1. 创建对象</h3><p>创建类的对象分为两步<br>1.定义该类的一个变量，此时在栈上会分配空间储存对象在堆中的地址（即对象的引用）<br>2.创建该对象的实际物理空间，即在堆中为该对象分配空间，并把此空间的地址（即引用）赋给对象名，此步骤通过new关键字来实例化该类的一个对象</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">类名 对象名=<span class="keyword">new</span> 类名();  <span class="comment">//创建实例对象 </span></span><br><span class="line"></span><br><span class="line">对象名.属性名;     <span class="comment">//访问对象的属性 </span></span><br><span class="line">对象名.方法名();   <span class="comment">//调用对象的方法</span></span><br></pre></td></tr></tbody></table></figure><h3 id="16-2-面向对象三大特征"><a href="#16-2-面向对象三大特征" class="headerlink" title="16.2. 面向对象三大特征"></a>16.2. 面向对象三大特征</h3><h4 id="16-2-1-封装"><a href="#16-2-1-封装" class="headerlink" title="16.2.1. 封装"></a>16.2.1. 封装</h4><p>封装：告诉我们如何正确的设计对象的属性和方法</p><p>原则：对象代表什么，就得封装对应的数据，并提供数据对应的行为。比如人画圆，就得设计一个人类和一个圆类，画圆这个方法要在圆类定义，因为要根据半径画圆</p><p>封装的好处：让编程变得简单，有什么事，找对象，调用方法即可</p><p>封装的意义：在于明确标识出与允许外部使用的所有成员变量和成员方法</p><p>实际上就是信息隐藏，将类中的成员属性和成员方法修饰为私有化，数据被保护在对象的内部，尽可能地隐藏内部的细节，只保留一些对外接口使之与外部发生联系，即get/set方法。</p><p>其他对象只能通过该对象提供的get/set方法，与这个封装的对象进行交流和交互。也就是说用户是无需知道对象内部的细节（当然也无从知道），但可以通过该对象对外提供的接口来访问该对象。</p><p><a href="#fawen">访问控制修饰符</a></p><p>如果有很多代码都使用了Dog这个类；当某一天这个类的age属性需要换成String类型，那么，外部使用它的任何地方都需要需改xxx.age=”xxx”，这将是非常繁琐的一个过程，那该怎么办呢？很简单，使用private修饰符将属性封装，开放访问接口的方法，我们只需要修改一下set方法就能完美解决。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"> Dog d1 = <span class="keyword">new</span> Dog();</span><br><span class="line"> <span class="comment">//调用时发生变化</span></span><br><span class="line"> d1.setName(<span class="string">"旺财"</span>);</span><br><span class="line"> d1.setAge(<span class="number">3</span>);</span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line"> <span class="keyword">private</span> String age;<span class="comment">//修改为String类型</span></span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="comment">//将属性私有化，提供set方法，将int类型的值转成String</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">  <span class="keyword">this</span>.age = String.valueOf(age);</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line"> }</span><br></pre></td></tr></tbody></table></figure><p>这样外部使用它的地方都不用修改，我们只用简单的修改对象内部就可以了，<br>更加方便快捷。到了这里我们应该可以看出，封装确实可以使我们容易地修改类的内部实现，而无需修改使用了该类的客户代码。</p><p>这里还可以体现出一些封装属性的优势，案例如下：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"> Dog d1 = <span class="keyword">new</span> Dog();</span><br><span class="line"> d1.setName(<span class="string">"旺财"</span>);</span><br><span class="line"> d1.setAge(<span class="number">300</span>);<span class="comment">//狗的年龄赋值很明显不合理，这里就需要在set方法中给出提示</span></span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>{</span><br><span class="line"> <span class="keyword">private</span> String age;</span><br><span class="line"> <span class="keyword">private</span> String name;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>{</span><br><span class="line">  <span class="keyword">if</span>(age&gt;<span class="number">100</span>||age&lt;<span class="number">0</span>) {</span><br><span class="line">   System.out.println(<span class="string">"你见过超过100岁的狗狗吗？"</span>);</span><br><span class="line">  }<span class="keyword">else</span>  {</span><br><span class="line">   <span class="keyword">this</span>.age = String.valueOf(age);</span><br><span class="line">  }</span><br><span class="line">  </span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>{</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line"> }</span><br><span class="line">  </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="16-2-2-继承"><a href="#16-2-2-继承" class="headerlink" title="16.2.2. 继承"></a>16.2.2. 继承</h4><p>作用：子类通过extends关键字继承父类，通过继承，子类可以使用父类中的非私有属性和非私有方法，从而提高代码的重用性，提高开发效率。</p><p>子类自动获得了父类的所有字段，严禁定义与父类重名的字段！<br>为了让子类可以访问父类的字段，把private改为protected。用protected修饰的字段可以被子类访问<br>除了父类中私有的属性和方法，子类必须全部继承。<br>3、子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。<br>4、子类可以用自己的方式实现父类的方法（即方法的重写/覆盖）。</p><p>5、构造器而言，它只能够被调用，而不能被继承，子类可以使用super()调用父类构造器。<br>6、对于继承而已，子类会默认调用父类的无参构造，但是如果父类没有无参构造，子类必须要在其构造方法中的第一行代码调用指定父类的构造器，传递对应参数。<br>7、Java 的继承是单继承，即每个子类只能拥有一个直接父类，但是该父类可以有多个子类</p><p>语法格式<br><code>访问符 修饰符 class 子类 extends 父类{  }</code></p><h4 id="16-2-3-多态"><a href="#16-2-3-多态" class="headerlink" title="16.2.3. 多态"></a>16.2.3. 多态</h4><p>多态的定义：是同一个行为具有多种表现形式或形态的能力。简单来说就是不同类型的对象（父类或子类）调用同一个方法，根据发出调用的对象不同，执行的方法也就不同。</p><p>实现多态的技术称为：动态绑定（dynamic binding），是指在执行期间判断所引用对象的实际类型，根据其实际的类型调用其相应的方法。</p><p>多态的作用：消除类型之间的耦合关系。</p><p>这里举一个简单的小例子：父类是个农民，技能是使用锄头耕地。子类继承了父类，重写了父类的锄头耕地技能，更新换代为使用拖拉机耕地。如果是父类对象调用这个技能，就是使用锄头手动耕地，如果是子类对象调用这个技能，就是使用拖拉机耕地。</p><p>Java实现多态有三个必要条件：继承、重写、父类引用指向子类对象。</p><ul><li>继承：在多态中必须存在有继承关系的子类和父类。</li><li>重写：子类对父类中某些方法进行重新定义，在调用这些方法时就会调用子类的方法。</li><li>父类引用指向子类对象（向上转型）：在多态中需要将子类的引用赋给父类对象，只有这样引用才能够调用父类的方法和子类的方法。<code>父类类型 变量名 = new 子类对象</code></li></ul><p>注意：由于父类引用指向子类对象属于向上转型，它只能访问父类中拥有的方法和属性，无法调用子类特有的方法(子类中存在而父类中不存在的方法)，比如说方法的重载，尽管方法名称相同，但是父类只能调用到子类重写的方法，调用不到重载方法。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>{<span class="comment">//人类 作为所有职业的父类</span></span><br><span class="line"> </span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line"> <span class="keyword">public</span> String name;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//父类的方法</span></span><br><span class="line">  System.out.println(<span class="string">"劳动"</span>);</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">  <span class="comment">//父类引用指向子类对象就是多态性的体现</span></span><br><span class="line">  People p1 = <span class="keyword">new</span> Doctor();<span class="comment">// p1的类型是人类类型，但是指向的实例对象是医生</span></span><br><span class="line">  p1.work();<span class="comment">//父类引用发出的调用，调用到的是医生类中重写父类的方法</span></span><br><span class="line">  People p2 = <span class="keyword">new</span> Teacher();</span><br><span class="line">  p2.work();<span class="comment">//父类引用发出的调用，调用到的是教师类中重写父类的方法</span></span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Doctor</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//医生类继承人类，重写工作方法</span></span><br><span class="line">  System.out.println(<span class="string">"救死扶伤"</span>);</span><br><span class="line"> }</span><br><span class="line"> </span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//教师类继承人类，重写工作方法</span></span><br><span class="line">  System.out.println(<span class="string">"教书育人"</span>);</span><br><span class="line"> }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> <span class="keyword">extends</span> <span class="title">People</span></span>{</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>{<span class="comment">//教师类继承人类，重写work方法</span></span><br><span class="line">  System.out.println(<span class="string">"教书育人"</span>);</span><br><span class="line"> }</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">(String name)</span> </span>{<span class="comment">//重载了work方法，但是此方法父类引用无法调用</span></span><br><span class="line">  System.out.println(<span class="string">"负责教导的课程是"</span>+name);</span><br><span class="line"> }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>多态的好处：</p><p>1.可替换性（substitutability）。多态对已存在代码具有可替换性。例如：医生、律师、程序员都是人类的子类，根据使用场景不同随时可以替换为符合的职业。<br>2.可扩充性（extensibility）。多态对代码具有可扩充性。增加新的子类不影响已存在类的多态性、继承性，以及其他特性的运行和操作。实际上新加子类更容易获得多态功能。例如，在拥有了医生、律师的继承上，还可以继续添加新的职业，比如主播，运动员等，都是添加为人类的多态性。<br>3.接口性（interface-ability）。多态是超类通过抽象方法，向子类提供了一个共同接口，由子类来完善或者覆盖它而实现的。每个子类都可以根据自身的特性去重写父类的抽象方法。<br>4.灵活性（flexibility）。它在应用中体现了灵活多样的操作，提高了使用效率。<br>5.简化性（simplicity）。多态简化对应用软件的代码编写和修改过程，尤其在处理大量对象的运算和操作时，这个特点尤为突出和重要。</p><h3 id="16-3-类之间的关系"><a href="#16-3-类之间的关系" class="headerlink" title="16.3. 类之间的关系"></a>16.3. 类之间的关系</h3><h4 id="16-3-1-继承"><a href="#16-3-1-继承" class="headerlink" title="16.3.1. 继承"></a>16.3.1. 继承</h4><h4 id="16-3-2-依赖关系"><a href="#16-3-2-依赖关系" class="headerlink" title="16.3.2. 依赖关系"></a>16.3.2. 依赖关系</h4><p>在一个类的方法中操作另一个类的对象，则称其依赖于第二个类<br>例如方法的参数时某个类的对象</p><h4 id="16-3-3-关联关系"><a href="#16-3-3-关联关系" class="headerlink" title="16.3.3. 关联关系"></a>16.3.3. 关联关系</h4><p>体现为一个类中使用另一个类的对象作为该类的成员变量</p><h4 id="16-3-4-聚合关系"><a href="#16-3-4-聚合关系" class="headerlink" title="16.3.4. 聚合关系"></a>16.3.4. 聚合关系</h4><p>聚合关系是关联关系的一种特例，体现是整体与部分的关系，<br>表现为一个类（整体）由多个其他类的对象（部分）作为该类的成员变量</p><h4 id="16-3-5-组成关系"><a href="#16-3-5-组成关系" class="headerlink" title="16.3.5. 组成关系"></a>16.3.5. 组成关系</h4><h2 id="18-Java泛型"><a href="#18-Java泛型" class="headerlink" title="18. Java泛型"></a>18. Java泛型</h2><p>Java 泛型（generics）是 JDK 5 中引入的一个新特性<br>泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。<br>泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。<br>检查并限制传入参数的类型，消除了类型的强制转换。</p><p>Java 中<strong>泛型标记符</strong>即类型形参：</p><pre><code>E - Element (在集合中使用，因为集合中存放的是元素)T - Type（Java 类）K - Key（键）V - Value（值）N - Number（数值类型）？ - 表示不确定的 Java 类型</code></pre><h3 id="18-1-泛型类"><a href="#18-1-泛型类" class="headerlink" title="18.1. 泛型类"></a>18.1. 泛型类</h3><p>泛型类的定义语法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名&lt;泛型标识，泛型标识，....&gt;</span>{</span><br><span class="line">    <span class="keyword">private</span> 泛型标识 变量名;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用语法</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名&lt;具体的数据类型&gt; 对象名 =  <span class="keyword">new</span> 类名&lt;&gt;();</span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>{}  <span class="comment">//定义一个泛型类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型类型在逻辑上可以看成多个不同的类型，但实际上都是相同类型，即Generic类</span></span><br><span class="line">Generic&lt;String&gt; generic = <span class="keyword">new</span> Generic&lt;&gt;(<span class="string">"Hello"</span>);   <span class="comment">//初始化类对象</span></span><br><span class="line">Generic&lt;Integer&gt; generic1 = <span class="keyword">new</span> Generic&lt;&gt;(<span class="number">1223</span>);   </span><br><span class="line"></span><br><span class="line">Generic&lt;<span class="keyword">int</span>&gt; generic1 = <span class="keyword">new</span> Generic&lt;&gt;(<span class="number">1223</span>);   <span class="comment">//报错，泛型的类型参数只能是类类型，不能是基本数据类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果没有指定具体的数据类型，此时泛型类的操作类型是Object</span></span><br><span class="line">Generic&lt;&gt; generic = <span class="keyword">new</span> Generic&lt;&gt;(<span class="string">"Hello"</span>); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="18-2-泛型接口"><a href="#18-2-泛型接口" class="headerlink" title="18.2. 泛型接口"></a>18.2. 泛型接口</h3><h3 id="18-3-泛型方法"><a href="#18-3-泛型方法" class="headerlink" title="18.3. 泛型方法"></a>18.3. 泛型方法</h3><p>你可以写一个泛型方法，该方法在调用时可以接收不同类型的参数。根据传递给泛型方法的参数类型，编译器适当地处理每一个方法调用。</p><p>下面是定义泛型方法的规则：</p><p>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前<br>每一个类型参数声明部分包含一个或多个类型参数，参数间用逗号隔开。一个泛型参数，也被称为一个类型变量，是用于指定一个泛型类型名称的标识符。<br>类型参数能被用来声明返回值类型，并且能作为泛型方法得到的实际参数类型的占位符。<br>泛型方法体的声明和其他方法一样。注意类型参数只能代表引用型类型，不能是原始类型（像 int、double、char 等）。</p><p>定义语法规则</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//&lt;T,E,..&gt;声明是泛型方法</span></span><br><span class="line">修饰符 &lt;T,E,..&gt; 返回值类型 方法名 (形参列表){</span><br><span class="line">    方法体；</span><br><span class="line">}</span><br><span class="line">    </span><br></pre></td></tr></tbody></table></figure><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@parmesan</span>&lt;E&gt; 泛型标识，具体类型由调用方法的时候来指定</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> {*}</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> &lt;E&gt; <span class="function">E <span class="title">getProduct</span> <span class="params">(ArrayList&lt;E&gt; list)</span></span>{</span><br><span class="line">    <span class="keyword">return</span> list.get(random.nextInt(list.size()));</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//调用泛型方法</span></span><br><span class="line">ArraryList&lt;String&gt; strList = <span class="keyword">new</span> ArraryList&lt;&gt; ();</span><br><span class="line">getProduct(strList);  <span class="comment">//传入strList集合对象</span></span><br></pre></td></tr></tbody></table></figure><h2 id="19-异常"><a href="#19-异常" class="headerlink" title="19. 异常"></a>19. 异常</h2><p> Error严重的错误<br>  OutOfMemoryError：内存耗尽<br>  NoClassDefFoundError：无法加载某个Class<br>  StackOverflowError：栈溢出<br> Exceptio是运行时的错误，它可以被捕获并处理。<br>  RuntimeException以及它的子类；<br>  非RuntimeException<br>  （包括IOException、ReflectiveOperationException等等）<br>   异常类分为两种<br>    1.错误。一般指与虚拟机相关的问题，这些错误无法恢复和捕获<br>    2.异常（Exception），因编码错误或外在因素导致的问题<br> 两种异常处理机制<br>  1.使用try    catch捕获异常<br>   存在多个catch的时候，catch的顺序非常重要：子类必须写在前面<br>  2.trrows抛出异常</p><h3 id="19-1-异常简介"><a href="#19-1-异常简介" class="headerlink" title="19.1. 异常简介"></a>19.1. 异常简介</h3><p>Java 中的异常又称为例外，是一个在程序执行期间发生的事件，它中断正在执行程序的正常指令流。为了能够及时有效地处理程序中的运行错误，必须使用异常类，这可以让程序具有极好的容错性且更加健壮。</p><p>在 Java 中一个异常的产生，主要有如下三种原因：<br>Java 内部错误发生异常，Java 虚拟机产生的异常。<br>编写的程序代码中的错误所产生的异常，例如空指针异常、数组越界异常等。<br>通过 throw 语句手动生成的异常，一般用来告知该方法的调用者一些必要信息。</p><p>Java 通过面向对象的方法来处理异常。在一个方法的运行过程中，如果发生了异常，则这个方法会产生代表该异常的一个对象，并把它交给运行时的系统，运行时系统寻找相应的代码来处理这一异常。</p><p>我们把生成异常对象，并把它提交给运行时系统的过程称为拋出（throw）异常。<br>运行时系统在方法的调用栈中查找，直到找到能够处理该类型异常的对象，这一个过程称为捕获（catch）异常。</p><h3 id="19-2-Throwable类"><a href="#19-2-Throwable类" class="headerlink" title="19.2. Throwable类"></a>19.2. Throwable类</h3><p>为了能够及时有效地处理程序中的运行错误，Java 专门引入了异常类。在 Java 中所有异常类型都是内置类 java.lang.Throwable 类的子类，即 Throwable 位于异常类层次结构的顶层。Throwable 类下有两个异常分支 Exception 和 Error</p><p>Throwable 类是所有异常和错误的超类，下面有 Error 和 Exception 两个子类分别表示错误和异常。其中异常类 Exception 又分为运行时异常和非运行时异常，这两种异常有很大的区别，也称为不检查异常（Unchecked Exception）和检查异常（Checked Exception）。<br>Exception 类用于用户程序可能出现的异常情况，它也是用来创建自定义异常类型类的类。<br>Error 定义了在通常环境下不希望被程序捕获的异常。一般指的是 JVM 错误，如堆栈溢出。</p><p>本节不讨论关于 Error 类型的异常处理，因为它们通常是灾难性的致命错误，不是程序可以控制的。接下来将讨论 Exception 类型的异常处理。</p><p>运行时异常都是 RuntimeException 类及其子类异常，如 NullPointerException、IndexOutOfBoundsException 等，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。这些异常一般由程序逻辑错误引起，程序应该从逻辑角度尽可能避免这类异常的发生。</p><p>非运行时异常是指 RuntimeException 以外的异常，类型上都属于 Exception 类及其子类。从程序语法角度讲是必须进行处理的异常，如果不处理，程序就不能编译通过。如 IOException、ClassNotFoundException 等以及用户自定义的 Exception 异常（一般情况下不自定义检查异常）。</p><h3 id="19-3-Java异常处理机制"><a href="#19-3-Java异常处理机制" class="headerlink" title="19.3. Java异常处理机制"></a>19.3. Java异常处理机制</h3><p>Java 的异常处理通过 5 个关键字来实现：try、catch、throw、throws 和 finally。try catch 语句用于捕获并处理异常，finally 语句用于在任何情况下（除特殊情况外）都必须执行的代码，throw 语句用于拋出异常，throws 语句用于声明可能会出现的异常。</p><p>本节先主要介绍异常处理的机制及基本的语句结构。</p><p>Java 的异常处理机制提供了一种结构性和控制性的方式来处理程序执行期间发生的事件。异常处理的机制如下：<br>1.在方法中用 try catch 语句捕获并处理异常，catch 语句可以有多个，用来匹配多个异常。<br>2.对于处理不了的异常或者要转型的异常，在方法的声明处通过 throws 语句拋出异常，即由上层的调用方法来处理。</p><p>以下代码是异常处理程序的基本结构：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> {</span><br><span class="line">    <span class="comment">// 可能发生异常的语句</span></span><br><span class="line">} <span class="keyword">catch</span>(ExceptionType1 e) {</span><br><span class="line">    处理代码块<span class="number">1</span></span><br><span class="line">} <span class="keyword">catch</span> (ExceptionType2 e) {</span><br><span class="line">    处理代码块<span class="number">2</span></span><br><span class="line">    <span class="keyword">throw</span>(e);    <span class="comment">// 再抛出这个"异常"</span></span><br><span class="line">} <span class="keyword">finally</span> {</span><br><span class="line">    释放资源代码块</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在以上语法中，把可能引发异常的语句封装在 try 语句块中，用以捕获可能发生的异常。catch 后的( )里放匹配的异常类，指明 catch 语句可以处理的异常类型，发生异常时产生异常类的实例化对象。</p><p>如果 try 语句块中发生异常，那么一个相应的异常对象就会被拋出，然后 catch 语句就会依据所拋出异常对象的类型进行捕获，并处理。处理之后，程序会跳过 try 语句块中剩余的语句，转到 catch 语句块后面的第一条语句开始执行。</p><p>如果 try 语句块中没有异常发生，那么 try 块正常结束，后面的 catch 语句块被跳过，程序将从 catch 语句块后的第一条语句开始执行。</p><p>注意：try…catch 与 if…else 不一样，try 后面的花括号{ }不可以省略，即使 try 块里只有一行代码，也不可省略这个花括号。与之类似的是，catch 块后的花括号{ }也不可以省略。另外，try 块里声明的变量只是代码块内的局部变量，它只在 try 块内有效，其它地方不能访问该变量。</p><p>可以使用以下 3 个方法输出相应的异常信息。<br>printStackTrace() 方法：指出异常的类型、性质、栈层次及出现在程序中的位置<br>getMessage() 方法：输出错误的性质。<br>toString() 方法：给出异常的类型与性质。</p><h2 id="20-反射机制"><a href="#20-反射机制" class="headerlink" title="20. 反射机制"></a>20. 反射机制</h2><h3 id="20-1-为什么使用反射"><a href="#20-1-为什么使用反射" class="headerlink" title="20.1. 为什么使用反射"></a>20.1. 为什么使用反射</h3><p>反射拥有以下四大功能：</p><ul><li>在运行时（动态编译）获知任意一个对象所属的类。</li><li>在运行时构造任意一个类的对象。</li><li>在运行时获知任意一个类所具有的成员变量和方法。</li><li>在运行时调用任意一个对象的方法和属性。</li></ul><p>上述这种动态获取信息、动态调用对象的方法的功能称为 Java 语言的反射机制</p><h2 id="21-JVM内存区域"><a href="#21-JVM内存区域" class="headerlink" title="21. JVM内存区域"></a>21. JVM内存区域</h2><p>栈内存：方法在执行时进栈，执行完毕后出栈<br>堆内存：new出来的对象都在这里<br>方法区：字节码文件临时存储</p><h3 id="21-1-虚拟机栈-JVM-Stack"><a href="#21-1-虚拟机栈-JVM-Stack" class="headerlink" title="21.1. 虚拟机栈(JVM Stack)"></a>21.1. 虚拟机栈(JVM Stack)</h3><p> 重点是存储局部变量表(当然也有其他信息). 我们刚才创建的 int[] arr 这样的存储地址的引用就是在这里保存.</p><h3 id="21-2-堆-Heap"><a href="#21-2-堆-Heap" class="headerlink" title="21.2. 堆(Heap)"></a>21.2. 堆(Heap)</h3><p> JVM所管理的最大内存区域. 使用 new 创建的对象都是在堆上保存 (例如前面的 new int[]{1, 2, 3} )</p><h3 id="21-3-栈与堆的区别"><a href="#21-3-栈与堆的区别" class="headerlink" title="21.3. 栈与堆的区别"></a>21.3. 栈与堆的区别</h3><p> 1.局部变量和引用保存在栈上, new 出的对象保存在堆上.</p><p> 2.堆的空间非常大, 栈的空间比较小.</p><p> 3.堆是整个 JVM 共享一个, 而栈每个线程具有一份(一个 Java 程序中可能存在多个栈).</p><h3 id="21-4-本地方法栈-Native-Method-Stack"><a href="#21-4-本地方法栈-Native-Method-Stack" class="headerlink" title="21.4. 本地方法栈(Native Method Stack)"></a>21.4. 本地方法栈(Native Method Stack)</h3><p> 本地方法栈与虚拟机栈的作用类似. 只不过保存的内容是Native方法的局部变量. 在有些版本的 JVM 实现中(例如HotSpot), 本地方法栈和虚拟机栈是一起的.</p><h3 id="21-5-串池"><a href="#21-5-串池" class="headerlink" title="21.5. 串池"></a>21.5. 串池</h3><p>程序计数器 (PC Register):</p><p> 只是一个很小的空间, 保存下一条执行的指令的地址.</p><h3 id="21-6-方法区-Method-Area"><a href="#21-6-方法区-Method-Area" class="headerlink" title="21.6. 方法区(Method Area)"></a>21.6. 方法区(Method Area)</h3><p> 用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据. 方法编译出的的字节码就是保存在这个区域.</p><h3 id="21-7-运行时常量池-Runtime-Constant-Pool"><a href="#21-7-运行时常量池-Runtime-Constant-Pool" class="headerlink" title="21.7. 运行时常量池(Runtime Constant Pool)"></a>21.7. 运行时常量池(Runtime Constant Pool)</h3><p> 是方法区的一部分, 存放字面量(字符串常量)与符号引用. (注意 从JDK1.7 开始, 运行时常量池在堆上)</p><h3 id="21-8-数组在内存中的存储"><a href="#21-8-数组在内存中的存储" class="headerlink" title="21.8. 数组在内存中的存储"></a>21.8. 数组在内存中的存储</h3><p>数组的数据则在堆上进行存放， 数组的数据在堆上都有特定的地址，<br>局部变量都在Java虚拟机栈上存放，数组的变量存放的其实是这组数据的地址，栈上的这个变量根据这个地址找到堆上的数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String[] str = {<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>};</span><br><span class="line">System.out.println(str.getClass());</span><br><span class="line"></span><br><span class="line">System.out.println(str);  <span class="comment">//输出@776ec8df</span></span><br></pre></td></tr></tbody></table></figure><p>@776ec8df就是str变量指向的数据在堆中的地址，这个地址并不是真正的地址，它是通过正式的地址 hash 得到的.但是我们可以把它当作真实的地址，因为这个地址也是唯一的. 那么真实的地址为什么要hash操作呢？这就是Java的安全性了，不会轻易暴露自己数据的地址.</p><h2 id="22-Java注解"><a href="#22-Java注解" class="headerlink" title="22. Java注解"></a>22. Java注解</h2><p>从 Java 5 版本之后可以在源代码中嵌入一些补充信息，这种补充信息称为注解（Annotation），是 Java 平台中非常重要的一部分。注解都是 @ 符号开头的<br>同 Class 和 Interface 一样，注解也属于一种类型。无论是哪一种注解，本质上都一种数据类型，是一种接口类型。<br>注解并不能改变程序的运行结果，也不会影响程序运行的性能。有些注解可以在编译时给用户提示或警告，有的注解可以在运行时读写字节码文件信息。</p><p>注解可以元数据这个词来描述，即一种描述数据的数据。所以可以说注解就是源代码的元数据</p><p>注解常见的作用有以下几种：<br>生成帮助文档。这是最常见的，也是 Java 最早提供的注解。常用的有 @see、@param 和 @return 等；<br>跟踪代码依赖性，实现替代配置文件功能。比较常见的是 Spring 2.5 开始的基于注解配置。作用就是减少配置。现在的框架基本都使用了这种配置来减少配置文件的数量；<br>在编译时进行格式检查。如把 @Override 注解放在方法前，如果这个方法并不是重写了父类方法，则编译时就能检查出。</p><p>到 Java 8 为止 Java SE 提供了 11 个内置注解。其中有 5 个是基本注解，它们来自于 java.lang 包。有 6 个是元注解，它们来自于 java.lang.annotation 包，自定义注解会用到元注解。</p><p>提示：元注解就是负责注解其他的注解。</p><p>基本注解包括：@Override、@Deprecated、@SuppressWarnings、@SafeVarargs 和 @FunctionalInterface</p><p>@Override注解:用来指定方法重写的，只能修饰方法并且只能用于方法重写，不能修饰其它的元素。它可以强制一个子类必须重写父类方法或者实现接口的方法。</p><p>@Deprecated注解:可以用来注解类、接口、成员方法和成员变量等，用于表示某个元素（类、方法等）已过时。当其他程序使用已过时的元素时，编译器将会给出警告。</p><h3 id="22-1-元注解作用及使用"><a href="#22-1-元注解作用及使用" class="headerlink" title="22.1. 元注解作用及使用"></a>22.1. 元注解作用及使用</h3><p>@Documented 是一个标记注解，没有成员变量。用 @Documented 注解修饰的注解类会被 JavaDoc 工具提取成文档。默认情况下，JavaDoc 是不包括注解的，但如果声明注解时指定了 @Documented，就会被 JavaDoc 之类的工具处理，所以注解类型信息就会被包括在生成的帮助文档中。</p><h3 id="22-2-自定义注解"><a href="#22-2-自定义注解" class="headerlink" title="22.2. 自定义注解"></a>22.2. 自定义注解</h3><h3 id="22-3-通过反射获取注解信息"><a href="#22-3-通过反射获取注解信息" class="headerlink" title="22.3. 通过反射获取注解信息"></a>22.3. 通过反射获取注解信息</h3><h2 id="23-IDEA使用"><a href="#23-IDEA使用" class="headerlink" title="23. IDEA使用"></a>23. IDEA使用</h2><h3 id="23-1-快捷键"><a href="#23-1-快捷键" class="headerlink" title="23.1. 快捷键"></a>23.1. 快捷键</h3><p>ctrl + d 快速复制这行到下一行</p><p>alt + insert ：自动生成get,set方法</p><p>注释<br>行注释Ctrl+/、<br>块注释Ctrl+Shift+/<br>文档注释  /**+enter</p><p>ctrl+alt+v  快速定义一个变量来接收对象</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
