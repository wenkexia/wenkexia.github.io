<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wenke</title>
  
  <subtitle>个人博客</subtitle>
  <link href="https://wenkexia.github.io/atom.xml" rel="self"/>
  
  <link href="https://wenkexia.github.io/"/>
  <updated>2022-04-20T01:36:28.000Z</updated>
  <id>https://wenkexia.github.io/</id>
  
  <author>
    <name>wenke</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>postman接口自动化测试</title>
    <link href="https://wenkexia.github.io/2022/04205354.html"/>
    <id>https://wenkexia.github.io/2022/04205354.html</id>
    <published>2022-04-20T01:36:28.000Z</published>
    <updated>2022-04-20T01:36:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>responseCode ：包含请求的返回的状态信息(如：code)<br>responseBody：为接口请求放回的数据内容（类型为字符串）<br>tests ：为键值对形式，用于表示我们的测试结果是成功与否，最终展示在 Test Results 中。<br>key ：（如：code 200）我们可以用来当做结果的一个描述<br>value：其值为布尔型，ture 表示测试通过， false 表示测试失败。<br>所以上述代码应该不难理解了，而有了返回结果的数据以及表示结果成功与否</p><h1 id="预请求脚本-Pre-request-Script"><a href="#预请求脚本-Pre-request-Script" class="headerlink" title="(预请求脚本)Pre-request Script"></a>(预请求脚本)Pre-request Script</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;responseCode ：包含请求的返回的状态信息(如：code)&lt;br&gt;responseBody：为接口请求放回的数据内容（类型为字符串）&lt;br&gt;tests ：为键值对形式，用于表示我们的测试结果是成功与否，最终展示在 Test Results 中。&lt;br&gt;key ：（</summary>
      
    
    
    
    <category term="web" scheme="https://wenkexia.github.io/categories/web/"/>
    
    
    <category term="postman" scheme="https://wenkexia.github.io/tags/postman/"/>
    
  </entry>
  
  <entry>
    <title>数据库-redis</title>
    <link href="https://wenkexia.github.io/2022/041918402.html"/>
    <id>https://wenkexia.github.io/2022/041918402.html</id>
    <published>2022-04-19T01:23:48.000Z</published>
    <updated>2022-04-19T01:23:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><p>Redis 是键值对(Key-Value)存储数据库，并提供多种语言的 API。</p><h1 id="安装-Redis"><a href="#安装-Redis" class="headerlink" title="安装 Redis"></a>安装 Redis</h1><h2 id="安装-Redis的docker环境"><a href="#安装-Redis的docker环境" class="headerlink" title="安装 Redis的docker环境"></a>安装 Redis的docker环境</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 要确保docker环境已经安装成功</span></span><br><span class="line">docker --version</span><br><span class="line"></span><br><span class="line">docker search redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">拉取最新版本</span></span><br><span class="line">docker pull redis</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -d：使用指定的镜像在后台运行容器，（使用守护进程运行）通过 docker ps查看不到的。因为在 docker 中，后台服务必须要有一个前台服务才能运行（前台服务即使用 -it 选项启动的服务）</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -it 表示已交互模式运行容器,为容器重新分配一个伪输入终端</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -p 6379:6379 将容器的6379端口映射到主机的6379端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --name=<span class="string">"myredis"</span> 表示自定义容器名</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --requirepass <span class="string">"root"</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -v /docker/redis/data:/data: 将主机中当前目录下的data挂载到容器的/data</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> redis-server : 在容器执行redis-server启动命令，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> --appendonly yes  打开redis持久化配置</span></span><br><span class="line">docker run -d redis:latest -p 6379:6379  redis-server --appendonly yes --name="myredis" --requirepass "root"</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker start 容器名或容器id</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">docker ps</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入redis容器并启动一个redis交互式会话</span></span><br><span class="line">docker exec -it redis容器名 /bin/bash</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在redis交互式会话中连接 redis 服务</span></span><br><span class="line">redis-cli</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 清理容器(停止 docker-redis 容器并删除)：</span></span><br><span class="line"></span><br><span class="line">docker stop redis容器名</span><br><span class="line">docker rm redis容器名</span><br></pre></td></tr></tbody></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">redis-cli  #在redis交互式会话中连接 redis 服务</span><br><span class="line"></span><br><span class="line">config get requirepass  #查看现有的redis密码</span><br><span class="line"></span><br><span class="line">config set requirepass pass_123456 #设置redis密码</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;redis&quot;&gt;&lt;a href=&quot;#redis&quot; class=&quot;headerlink&quot; title=&quot;redis&quot;&gt;&lt;/a&gt;redis&lt;/h1&gt;&lt;p&gt;Redis 是键值对(Key-Value)存储数据库，并提供多种语言的 API。&lt;/p&gt;
&lt;h1 id=&quot;安装-Re</summary>
      
    
    
    
    <category term="数据库" scheme="https://wenkexia.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="redis" scheme="https://wenkexia.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>springboot学习</title>
    <link href="https://wenkexia.github.io/2022/040423525.html"/>
    <id>https://wenkexia.github.io/2022/040423525.html</id>
    <published>2022-04-04T10:57:26.000Z</published>
    <updated>2022-04-04T10:57:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习框架首先要先了解它是干什么的，然后了解它的项目结构即每个文件有什么用</p><h1 id="springboot"><a href="#springboot" class="headerlink" title="springboot"></a>springboot</h1><p>springboot是一个用来简化spring应用的初始搭建以及开发过程的框架<br>简化依赖配置，简化常用工程相关配置，内置服务器</p><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><p>1.通过idea创建，可以更改成阿里云镜像服务：<a href="https://start.aliyun.com/">https://start.aliyun.com</a><br>spring默认服务器：<a href="https://start.spring.io/">https://start.spring.io</a></p><p>2.若idea不能联网，通过spring boot官网创建</p><h2 id="Druid连接池"><a href="#Druid连接池" class="headerlink" title="Druid连接池"></a>Druid连接池</h2><h3 id="数据源与数据库连接池"><a href="#数据源与数据库连接池" class="headerlink" title="数据源与数据库连接池"></a>数据源与数据库连接池</h3><h4 id="什么是数据源？"><a href="#什么是数据源？" class="headerlink" title="什么是数据源？"></a>什么是数据源？</h4><p>JDBC2.0提供了javax.sql.DataSource接口，它负责建立与数据库的连接，当在应用程序中访问数据库时，不必编写连接数据库的代码，直接引用DataSource获取数据库的连接对象即可。用于获取操作数据的Connection对象。</p><h4 id="什么是数据库连接池？"><a href="#什么是数据库连接池？" class="headerlink" title="什么是数据库连接池？"></a>什么是数据库连接池？</h4><p>数据库连接池的思想就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。可通过设定连接池的最大连接数来防止系统无尽的与数据库连接。更重要的是我们可以通过连接池的管理机制监视数据库的连接的数量、使用情况，为系统开发、测试以及性能调整提供依据。</p><h4 id="数据源和数据库连接池的关系？"><a href="#数据源和数据库连接池的关系？" class="headerlink" title="数据源和数据库连接池的关系？"></a>数据源和数据库连接池的关系？</h4><p>数据源建立多个数据库连接，这些数据库连接将会保存在数据库连接池中，当需要访问数据库时，只需要从数据库连接池中获取空闲的数据库连接，当程序访问数据库结束时，数据库连接会放回数据库连接池中。</p><h4 id="为什么要使用数据库连接池？"><a href="#为什么要使用数据库连接池？" class="headerlink" title="为什么要使用数据库连接池？"></a>为什么要使用数据库连接池？</h4><p>传统的JDBC访问数据库技术，每次访问数据库都需要通过数据库驱动器Driver和数据库名称以及密码等等资源建立数据库连接。</p><p>如此就会存在两大问题：</p><p>频繁的建立与断开数据库连接，会降低执行效率，增加系统资源的开销。<br>数据库的连接需要用户名和密码等资源，这些也需要一定的内存和CPU的开销。<br>而数据库连接池很好地解决了这些问题。</p><h3 id="加载依赖"><a href="#加载依赖" class="headerlink" title="加载依赖"></a>加载依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><p>数据库框架：Mybatis Plus &gt; Mybatis<br>代码生成器：Mybatis Plus Generator &gt; Mybatis Generator</p><p>Mybatis Plus 针对单表的基本CRUD操作，只需要创建好实体类，并创建一个继承自BaseMapper的接口即可，可谓非常简洁。并且，我们注意到，User类中的managerId，createTime属性，自动和数据库表中的manager_id，create_time对应了起来，这是因为mp自动做了数据库下划线命名，到Java类的驼峰命名之间的转化。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.导入依赖<br>2.配置application.yml<br>3.在数据库中创建表<br>4.在entity层根据数据库表创建相应实体类<br>5.在dao层创建对应mapper接口<br>6.在SpringBoot启动类上配置mapper接口的扫描路径<br>7.编写一个SpringBoot测试类</p><h3 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># application.yml  </span></span><br><span class="line">   <span class="attr">spring:</span>  </span><br><span class="line">     <span class="attr">datasource:</span>  </span><br><span class="line">       <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span>  </span><br><span class="line">       <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/数据库名?serverTimezone=Asia/Shanghai</span>  </span><br><span class="line">       <span class="attr">username:</span> <span class="string">root</span>  </span><br><span class="line">       <span class="attr">password:</span> <span class="string">root</span>  </span><br><span class="line">         </span><br><span class="line">   <span class="attr">mybatis-plus:</span>  </span><br><span class="line">     <span class="attr">configuration:</span>  </span><br><span class="line">       <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span> <span class="comment">#开启SQL语句打印</span></span><br></pre></td></tr></tbody></table></figure><h3 id="mybatisplus分页工具类-IPage"><a href="#mybatisplus分页工具类-IPage" class="headerlink" title="mybatisplus分页工具类 IPage"></a>mybatisplus分页工具类 IPage</h3><h2 id="lombok"><a href="#lombok" class="headerlink" title="lombok"></a>lombok</h2><p>最常用的用法就是在实体类中使用它的@Data注解，这样实体类就不用写set、get、toString等方法</p><p>@Data注解包含了 @ToString、@EqualsAndHashCode、@Getter / @Setter和@RequiredArgsConstructor的功能</p><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- pom.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.16.14<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="REST风格"><a href="#REST风格" class="headerlink" title="REST风格"></a>REST风格</h2><p>REST(Representational State Transfer),表现形式状态转换。它是一种针对网络应用的设计风格</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.隐藏资源的访问行为，无法通过地址得知对资源是何种操作<br>2.书写简化</p><h3 id="RESTful"><a href="#RESTful" class="headerlink" title="RESTful"></a>RESTful</h3><p>根据REST风格对资源进行访问称为RESTful</p><h6 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h6><p>类型：类注解<br>位置：springMVC控制器类定义上方<br>作用：设置当前控制器类为RESTful风格，等同于@Controller + @ResponseBody两个注解组合功能</p><h6 id="请求动作映射"><a href="#请求动作映射" class="headerlink" title="请求动作映射"></a>请求动作映射</h6><p>名称：@GetMapping   @PostMapping  @PutMapping  @DeleteMapping<br>类型：方法注解<br>位置：基于SpringMVC的RESTful开发控制器方法定义上方<br>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求</p><h6 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h6><p>类型：形参注解<br>位置：springMVC控制器方法形参定义前面<br>作用：绑定路径参数与处理器方法形参间的关系</p><h3 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h3><p>区别<br>@RequestParam用于接收url地址传参或表单传参<br>@RequestBody用于接收json数据<br>@PathVariable用于接收路径参数，使用{参数名称）描述路径参数</p><p>应用<br>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody,应用较广<br>如果发送非json格式数据，选用@RequestParam接收请求参数<br>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><p>1.设定http请求动作</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = "/users",method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">save</span><span class="params">(<span class="meta">@ResponseBody</span> User user)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"user save"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'save'}"</span>;</span><br></pre></td></tr></tbody></table></figure><p>2.设定请求参数(路径变量)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 路径上要有参数占位{id}</span></span><br><span class="line"><span class="meta">@RequestMapping(value = "/users/{id}",method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 在形参上加@PathVariable</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"user save"</span>+id);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"{'module':'delete'}"</span>;</span><br></pre></td></tr></tbody></table></figure><p>controller调用service,service调用dao</p><h2 id="数据层"><a href="#数据层" class="headerlink" title="数据层"></a>数据层</h2><p>DAO(Data Access Object) 是数据访问层，也被称为mapper层。<br>即数据持久层，对数据做持久化操作。dao层的作用为访问数据库，向数据库发送sql语句，完成数据的增删改查任务。</p><p>使用mybatis-plus后不用写mapper.xml文件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dao/接口名.java</span></span><br><span class="line"><span class="comment">// 定义数据层接口与映射配置，继承BaseMapper&lt;把实体类作为泛型传入&gt;</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 接口名 <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;实体类&gt; </span>{       </span><br><span class="line"> </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="entity层"><a href="#entity层" class="headerlink" title="entity层"></a>entity层</h2><p>即数据库实体层，也被称为model层，pojo层，domain层存放的是实体类，属性值与数据库中的属性值保持一致。 实现set和get方法。</p><p>一般数据库一张表对应一个实体类，类属性同表字段一一对应</p><p>使用了 Lombok 简化代码</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// entity:</span></span><br><span class="line"><span class="meta">@TableName(value = "user")</span>  <span class="comment">//value指定表名</span></span><br><span class="line"><span class="meta">@Date</span>     <span class="comment">//使用Lombok插件，这样实体类就不用写set、get、toString等方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="comment">//value与数据库主键列名一致，若实体类属性名与表主键列名一致可省略value</span></span><br><span class="line">    <span class="meta">@TableId(value = "id", type = IdType.AUTO)</span>  <span class="comment">//指定自增策略</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">     <span class="comment">//若没有开启驼峰命名，或者表中列名不符合驼峰规则，可通过该注解指定数据库表中的列名，exist标明数据表中有没有对应列</span></span><br><span class="line">    <span class="meta">@TableField(value = "last_name",exist = true)</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">  </span><br><span class="line">    }</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="业务层-service"><a href="#业务层-service" class="headerlink" title="业务层(service)"></a>业务层(service)</h2><p>业务层，service层的作用为完成功能设计。存放业务逻辑处理，不直接对数据库进行操作，有接口和接口实现类(定义一个接口，然后再一个或多个类去实现),提供controller层调用的方法。调用dao层接口，接收dao层返回的数据，完成项目的基本功能设计。（也就是说对于项目中的功能的需求就是在这里完成的）</p><h4 id="快速开发方案"><a href="#快速开发方案" class="headerlink" title="快速开发方案"></a>快速开发方案</h4><p>使用MyBatisPlus提供有业务层通用接口(ISerivce<t>)与业务层通用实现类(ServiceImpl&lt;M,T&gt;)<br>在通用类基础上做功能重载或功能追加<br>注意重载时不要覆盖原始操作，避免原始提供的功能丢失</t></p><h4 id="创建接口"><a href="#创建接口" class="headerlink" title="创建接口"></a>创建接口</h4><p>在java内的项目包下 新建 service包（一般接口都放在其中） 然后再其中新建XXXService接口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于mybatisplus快速开发，ctrl+o查看mp帮你重写或覆盖的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IBookService</span> <span class="keyword">extends</span> <span class="title">IService</span> &lt;实体类&gt;</span>{ }</span><br></pre></td></tr></tbody></table></figure><h4 id="创建接口实现类"><a href="#创建接口实现类" class="headerlink" title="创建接口实现类"></a>创建接口实现类</h4><p>service 包内 新建 impl 包（实现类全部在impl包内）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 继承的类需要传入两个泛型，一个是数据层接口，另一个是实体类</span></span><br><span class="line"><span class="comment">// extends ServiceImpl&lt;BookDao,Book&gt;  //传入两个泛型(dao层,实体类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IBookServiceImpl</span>  <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">BookDao</span>,<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">IBookService</span> </span>{}</span><br></pre></td></tr></tbody></table></figure><h4 id="单元测试类"><a href="#单元测试类" class="headerlink" title="单元测试类"></a>单元测试类</h4><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ke.bookm.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wenke</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Classname</span> BookServiceTestCasde</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> TODO</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2022/4/7 20:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookServiceTestCase</span> </span>{</span><br><span class="line">    <span class="comment">// 接口有多个实现类时使用@Qualifier注解指定实现类：</span></span><br><span class="line">    <span class="comment">// @Qualifier("qualifierServiceImpl2")</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetById</span><span class="params">()</span></span>{</span><br><span class="line">        bookService.getById(<span class="number">4</span>);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="控制器层-controller"><a href="#控制器层-controller" class="headerlink" title="控制器层(controller)"></a>控制器层(controller)</h2><p>表现层，控制器层，controller层的功能为请求和响应控制。controller层负责前后端交互，接受前端请求，调用service层，接收service层返回的数据，最后返回具体的页面和数据到客户端。</p><h3 id="Controller和-ResponseBody注解"><a href="#Controller和-ResponseBody注解" class="headerlink" title="@Controller和@ResponseBody注解"></a>@Controller和@ResponseBody注解</h3><p>在一个类上添加@Controller注解，表明了这个类是一个控制器类<br>在对应的方法上，视图解析器可以解析return 的jsp,html页面，并且跳转到相应页面,若返回json等内容到页面，则需要加@ResponseBody注解</p><p>@ResponseBody表示方法的返回值直接以指定的格式写入Http response body中，而不是解析为跳转路径。<br>格式的转换是通过HttpMessageConverter中的方法实现的，因为它是一个接口，因此由其实现类完成转换。</p><h3 id="RestController-1"><a href="#RestController-1" class="headerlink" title="@RestController"></a>@RestController</h3><p>如果需要返回的是数据（如：JSON、XML或自定义的metatype等数据类型）时，@RestController完全等同于@Controller+@Responsebody<br>如果要求方法返回的是json格式数据，而不是跳转页面，可以直接在类上标注@RestController，而不用在每个方法中标注@ResponseBody，简化了开发过程。但使用@RestController这个注解，就不能返回jsp,html页面，视图解析器无法解析jsp,html页面</p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h3><p>@RequestMapping注解是用来映射请求的，即指明处理器可以处理哪些URL请求，该注解既可以用在类上，也可以用在方法上。</p><p>当使用@RequestMapping标记控制器类时，方法的请求地址是相对类的请求地址而言的；当没有使用@RequestMapping标记类时，方法的请求地址是绝对路径。</p><p>@RequestMapping的地址可以是url变量，并且通过@PathVariable注解获取作为方法的参数。也可以是通配符来筛选请求地址。</p><h3 id="Autowired"><a href="#Autowired" class="headerlink" title="@Autowired"></a>@Autowired</h3><p>@Autowired 注释，它可以对类成员变量、方法及构造函数进行标注，完成自动装配的工作。 通过 @Autowired的使用来消除 set ，get方法。</p><p>在使用@Autowired时，首先在容器中查询对应类型的bean<br>如果查询结果刚好为一个，就将该bean装配给@Autowired指定的数据<br>如果查询的结果不止一个，那么@Autowired会根据名称来查找。</p><h3 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h3><p>@Override 注解是用来指定方法重写的，只能修饰方法并且只能用于方法重写，不能修饰其它的元素。它可以强制一个子类必须重写父类方法或者实现接口的方法。</p><h3 id="创建控制器类"><a href="#创建控制器类" class="headerlink" title="创建控制器类"></a>创建控制器类</h3><p>创建控制器类com.controller.UserController.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/users")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{ </span><br><span class="line">    <span class="comment">// 添加业务层对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IUserService userService;        </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="controller-utils"><a href="#controller-utils" class="headerlink" title="controller.utils"></a>controller.utils</h3><p>表现层数据一致性处理</p><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.mp;  </span><br><span class="line">   <span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;  </span><br><span class="line">   <span class="keyword">import</span> org.springframework.boot.SpringApplication;  </span><br><span class="line">   <span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;  </span><br><span class="line">   <span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="comment">//    在SpringBoot启动类上配置mapper接口的扫描路径</span></span><br><span class="line">   <span class="meta">@MapperScan("com.example.mp.mappers")</span>  </span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusApplication</span> </span>{  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{  </span><br><span class="line">        <span class="comment">//        定义容器对象，并启动</span></span><br><span class="line">     SpringApplication.run(MybatisPlusApplication.class, args);  </span><br><span class="line">    }  </span><br><span class="line">   }</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>SpringBoot的引导类是Boot工程的执行入口，运行main方法就可以启动项目<br>SpringBoot工程运行后初始化Spring容器，扫描引导类所在包加载bean</p><h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Springboot04JunitApplicationTests</span> </span>{</span><br><span class="line">    <span class="comment">//注入你要测试的对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//执行要测试的对象对应的方法</span></span><br><span class="line">        bookDao.save();</span><br><span class="line">        System.out.println(<span class="string">"two..."</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h2><p>在官方文档里找到application.properties文件，可查看可修改的配置<br><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/">官方文档</a></p><p>默认是application.properties，我们将application.properties改为application.yaml</p><h2 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h2><p>后缀使用.yml或者.yaml都行</p><h3 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h3><p>易阅读<br>易于脚本语言交互<br>以数据为核心，重数据轻格式</p><h3 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h3><p>大小写敏感<br>属性层级关系使用多行描述，每行结尾使用冒号结束<br>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格(不允许使用Tab键)<br>属性值前面添加空格(属性名与属性值之间使用冒号+空格作为分隔)<br>#表示注释<br>使用” “括住的内容可以使用转义字符</p><h3 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h3><p>用$进行变量引用<br>path: c:\user\bin</p><p>temp: ${path}\temp</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><h4 id="对象："><a href="#对象：" class="headerlink" title="对象："></a>对象：</h4><p>键值对的集合，又称为映射(mapping)/ 哈希(hashes) / 字典(dictionary)</p><h4 id="数组："><a href="#数组：" class="headerlink" title="数组："></a>数组：</h4><p>一组按次序排列的值，又称为序列(sequence) / 列表(list)</p><p>使用一个短横线加一个空格代表一个数组项：<br>hobby:</p><ul><li>Java<br>jdk</li><li>python<br>py<h4 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h4>(scalars)：单个的、不可再分的值</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习框架首先要先了解它是干什么的，然后了解它的项目结构即每个文件有什么用&lt;/p&gt;
&lt;h1 id=&quot;springboot&quot;&gt;&lt;a href=&quot;#springboot&quot; class=&quot;headerlink&quot; title=&quot;springboot&quot;&gt;&lt;/a&gt;springboot&lt;/</summary>
      
    
    
    
    <category term="java" scheme="https://wenkexia.github.io/categories/java/"/>
    
    
    <category term="web" scheme="https://wenkexia.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>前端学习</title>
    <link href="https://wenkexia.github.io/2022/040312750.html"/>
    <id>https://wenkexia.github.io/2022/040312750.html</id>
    <published>2022-04-03T14:07:51.000Z</published>
    <updated>2022-04-03T14:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><p>HTML:（HyperText Markup Language）【超文本标记语言】<br>狭义的HTML指的是网页；<br>广义的HTML指的是前端技术（html,css,js,以及各种框架）——网页，移动端网页，小程序，公众号，移动端的app，快应用等。</p><p>HTML是一门标记语言，标记语言由一套标记标签组成，学习HTML，就是学习标签。</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>HTML注释符号是以 &lt;– 开始以 –&gt; 结束的</p><h2 id="vscode编辑html"><a href="#vscode编辑html" class="headerlink" title="vscode编辑html"></a>vscode编辑html</h2><p>open in brower<br>按下快捷键ALT+B 即可在浏览器运行html</p><p>HTMLHint<br>错误提示</p><p>html snippets<br>常用html代码片段模板</p><p>live server<br>实时预览html文件</p><p>beautify<br>格式化代码工具，美化javascript，JSON，CSS，Sass，和HTML</p><h2 id="HTML文件的规范"><a href="#HTML文件的规范" class="headerlink" title="HTML文件的规范"></a>HTML文件的规范</h2><p>html文件以开始，以结尾，其他任何标签，需要写在和之间；<br>Html标签只包含两个子标签：head和body；<br>和网页设置相关的内容都写在head标签里；<br>需要显示的内容都写在body标签里；</p><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p><code>由尖括号包裹单词构成，如：&lt;html&gt;，所以标签不可能以数字开头。</code><br>标签不区分大小写，但推荐小写。<br>标签也称为元素。</p><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">单标签有两种写法：</span><br><span class="line">   写法一：只写开标签即可&lt;br&gt;</span><br><span class="line">   写法二：在开标签的结尾写一个/，如&lt;br/&gt;</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="双标签："><a href="#双标签：" class="headerlink" title="双标签："></a>双标签：</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开始标签又称开放标签<span class="tag">&lt;<span class="name">a</span>&gt;</span>标签体<span class="tag">&lt;/<span class="name">a</span>&gt;</span>结束标签又称闭合标签或关标签</span><br><span class="line">自闭合标签/单标签，如：<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>，<span class="tag">&lt;<span class="name">br</span>&gt;</span>等</span><br></pre></td></tr></tbody></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>指向 w3school 的超链接：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.w3school.com.cn"</span>  &gt;</span>文字说明<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">rel：规定当前文档与被链接文档之间的关系。</span><br></pre></td></tr></tbody></table></figure><h2 id="HTML-表单"><a href="#HTML-表单" class="headerlink" title="HTML 表单"></a>HTML 表单</h2><p>method 属性规定如何发送表单数据（表单数据发送到 action 属性所规定的页面）。</p><p>表单数据可以作为 URL 变量（method=”get”）或者 HTTP post （method=”post”）的方式来发送。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 一个简单的 HTML 表单，包含两个文本输入框和一个提交按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"form_action.asp"</span> <span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">  First name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"fname"</span> /&gt;</span></span><br><span class="line">  Last name: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"lname"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="input标签"><a href="#input标签" class="headerlink" title="input标签"></a>input标签</h3><p>input 标签用于搜集用户信息。<br>根据不同的 type 属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。<br><code>&lt;input type="表单元素的类型" name="名称" value="默认值" size="宽度"&gt; </code></p><h4 id="type属性"><a href="#type属性" class="headerlink" title="type属性"></a>type属性</h4><p>text    单行文本框    省略时默认就是text<br>password    密码框    输入时以点号显示，安全<br>redio    单选按钮    只能选择其中一个<br>checkbox    复选框    可以同时选择多个<br>submit    提交按钮    提交表单数据<br>reset    重置按钮    重置表单元素的初始值<br>image    图像按钮    可以使用图片作为按钮<br>button    普通按钮    默认情况下无功能<br>file    文件选择器    选择要上传的文件<br>hidden    隐藏域    在页面上不显示，但是会提交，可以用来存储数据</p><h4 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h4><p>placeholder属性提供可描述输入字段预期值的提示信息</p><h1 id="CSS基础"><a href="#CSS基础" class="headerlink" title="CSS基础"></a>CSS基础</h1><h2 id="div标签中id、class属性的使用与区别"><a href="#div标签中id、class属性的使用与区别" class="headerlink" title="div标签中id、class属性的使用与区别"></a>div标签中id、class属性的使用与区别</h2><p>div用于标示块级元素，而span标示行内元素。</p><p>1、语法区别<br>id对应CSS是用样式选择符“#”（井号）；<br>class对应CSS是用样式选择符“.”(英文半角输入句号)。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"abc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br></pre></td></tr></tbody></table></figure><p>对应CSS应该是：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#header</span>{...} </span><br><span class="line"><span class="selector-class">.abc</span>{...} </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>id：在同一个页面，只可以被调用一次，在CSS里用“#”表示。<br>class：是类标签，在同一个页面可以调用无数次（没限制的），在CSS里用“.”表示。</p><h3 id="使用css"><a href="#使用css" class="headerlink" title="使用css"></a>使用css</h3><p>三种使用 CSS 的方法</p><p>外部 CSS<br>内部 CSS<br>行内 CSS</p><h3 id="外部-CSS"><a href="#外部-CSS" class="headerlink" title="外部 CSS"></a>外部 CSS</h3><p>外部样式表可以在任何文本编辑器中编写，并且必须以 .css 扩展名保存。<br>外部样式在 HTML 页面  部分内的 <link> 元素中进行定义：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"mystyle.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p>CSS 选择器用于“查找”（或选取）要设置样式的 HTML 元素。</p><h3 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器:"></a>id选择器:</h3><p>#id</p><p>id 名称不能以数字开头。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 这条CSS 规则将应用于 id="para1" 的 HTML 元素 */</span></span><br><span class="line"><span class="selector-id">#para1</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器:"></a>类选择器:</h3><p>如需选择拥有特定 class 的元素，请写一个句点（.）字符，后面跟类名。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在此例中，所有带有 class="center" 的 HTML 元素将为红色且居中对齐： */</span></span><br><span class="line"><span class="selector-class">.center</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="CSS-通用选择器"><a href="#CSS-通用选择器" class="headerlink" title="CSS 通用选择器"></a>CSS 通用选择器</h4><p>通用选择器（*）选择页面上的所有的 HTML 元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 下面的 CSS 规则会影响页面上的每个 HTML 元素： */</span></span><br><span class="line"></span><br><span class="line">* {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="CSS-分组选择器"><a href="#CSS-分组选择器" class="headerlink" title="CSS 分组选择器"></a>CSS 分组选择器</h4><p>分组选择器选取所有具有相同样式定义的 HTML 元素。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">p</span> {</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="组合器选择器（根据它们之间的特定关系来选取元素）"><a href="#组合器选择器（根据它们之间的特定关系来选取元素）" class="headerlink" title="组合器选择器（根据它们之间的特定关系来选取元素）"></a>组合器选择器（根据它们之间的特定关系来选取元素）</h2><h2 id="伪类选择器（根据特定状态选取元素）"><a href="#伪类选择器（根据特定状态选取元素）" class="headerlink" title="伪类选择器（根据特定状态选取元素）"></a>伪类选择器（根据特定状态选取元素）</h2><h2 id="伪元素选择器（选取元素的一部分并设置其样式）"><a href="#伪元素选择器（选取元素的一部分并设置其样式）" class="headerlink" title="伪元素选择器（选取元素的一部分并设置其样式）"></a>伪元素选择器（选取元素的一部分并设置其样式）</h2><h2 id="属性选择器（根据属性或属性值来选取元素）"><a href="#属性选择器（根据属性或属性值来选取元素）" class="headerlink" title="属性选择器（根据属性或属性值来选取元素）"></a>属性选择器（根据属性或属性值来选取元素）</h2><h2 id="css基础属性"><a href="#css基础属性" class="headerlink" title="css基础属性"></a>css基础属性</h2><h3 id="文字类"><a href="#文字类" class="headerlink" title="文字类"></a>文字类</h3><p>color<br>font-size<br>text-decoration<br>text-align</p><h3 id="尺寸类"><a href="#尺寸类" class="headerlink" title="尺寸类"></a>尺寸类</h3><p>width<br>height</p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><p>background-color<br>background-image<br>background-size:cover</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="谷歌浏览器"><a href="#谷歌浏览器" class="headerlink" title="谷歌浏览器"></a>谷歌浏览器</h3><h4 id="CSS-Overview"><a href="#CSS-Overview" class="headerlink" title="CSS Overview"></a>CSS Overview</h4><p>在 Chrome 的管理面板中，开启CSS Overview面板之后，就可以查看当前网站的样式信息了，包括颜色信息、字体信息、媒体查询等</p><p>1.在任意页面打开 Chrome 浏览器的 DevTools；<br>2.单击更多选项 -&gt; More tools -&gt; CSS Overview。</p><h4 id="新的字体编辑器工具"><a href="#新的字体编辑器工具" class="headerlink" title="新的字体编辑器工具"></a>新的字体编辑器工具</h4><p>Chrome DevTools 提供了一个实验性的字体编辑器工具，可以用来改变字体设置。可以用它来改变字体、大小、粗细、行高、字符间距，并实时看到变化</p><p>1.在任意页面打开 Chrome 浏览器的 DevTools；<br>2.点击右上角设置图标 -&gt; 选中左侧 Experiments -&gt; 勾选 Enable New Font Editor Tools within Styles Pane；<br>3.重启浏览器的 DevTools；<br>4.选择HTML元素，其中包括想改变的字体，点击字体图标即可。</p><h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><p>JavaScript是一种轻量级的脚本语言。</p><p>JavaScript 插入 HTML 页面后，由浏览器执行。JavaScript 控制了网页的行为</p><p>推荐<a href="https://www.w3school.com.cn/js/index.asp">w3school</a>或者<a href="https://www.runoob.com/js/js-tutorial.html">runoob</a></p><h2 id="JavaScript的组成："><a href="#JavaScript的组成：" class="headerlink" title="JavaScript的组成："></a>JavaScript的组成：</h2><p>ECMAScript(语言基础，如：语法、数据类型结构以及一些内置对象)</p><p>DOM（一些操作页面元素的方法）</p><p>BOM（一些操作浏览器的方法）</p><p>HTML 定义了网页的内容<br>CSS 描述了网页的布局</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> length = <span class="number">7</span>;                             <span class="comment">// 数字</span></span><br><span class="line"><span class="keyword">var</span> lastName = <span class="string">"Gates"</span>;                      <span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">var</span> cars = [<span class="string">"Porsche"</span>, <span class="string">"Volvo"</span>, <span class="string">"BMW"</span>];         <span class="comment">// 数组</span></span><br><span class="line"><span class="keyword">var</span> x = {<span class="attr">firstName</span>:<span class="string">"Bill"</span>, <span class="attr">lastName</span>:<span class="string">"Gates"</span>};    <span class="comment">// 对象</span></span><br></pre></td></tr></tbody></table></figure><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成 [ n, m ) 范围内的随机数（大于等于n，小于m）</span></span><br><span class="line"><span class="comment">// var random = Math.random()*(m-n)+n</span></span><br><span class="line">    a=<span class="built_in">Math</span>.random()*<span class="number">5</span>+<span class="number">1</span></span><br><span class="line">    toastLog (a)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 生成 [ min, max ] 范围内的随机整数（大于等于min，小于等于max）</span></span><br><span class="line"><span class="comment">// var random =Math.floor(Math.random()*(max-min+1))+min</span></span><br><span class="line">    b=<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*(<span class="number">5</span>))+<span class="number">1</span></span><br><span class="line">    toastLog(b)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>在字符串中换行，需要加一个反斜杠(非ECMAScript标准）：</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>).innerHTML = <span class="string">"Hello \</span></span><br><span class="line"><span class="string">Kitty!"</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>String</code>和<code>Number</code>相加时，会将数字转为字符串；<code>String</code>和<code>Number</code>相减时，会将字符串转为数字；</p></li></ul><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>JavaScript 对象是变量的容器。但是，我们通常认为 “JavaScript 对象是键值对的容器”。<br>对象也是一个变量，但对象可以包含多个值（多个变量），每个值以 name:value 对呈现。<br>总结：JavaScript 对象是属性和方法的容器。</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> car = {<span class="attr">name</span>:<span class="string">"Fiat"</span>, <span class="attr">model</span>:<span class="number">500</span>, <span class="attr">color</span>:<span class="string">"white"</span>};</span><br></pre></td></tr></tbody></table></figure><ul><li><p><code>null</code>：类型是对象，不存在的事物。</p>  <figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span>            <span class="comment">// false</span></span><br><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span>             <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></li></ul><h4 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h4><p>键值对在 JavaScript 对象通常称为 对象属性。<br>访问对象属性<br>你可以通过两种方式访问对象属性:</p><figure class="highlight javascript"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>person.lastName;</span><br><span class="line"><span class="number">2.</span>person[<span class="string">"lastName"</span>];</span><br></pre></td></tr></tbody></table></figure><h4 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h4><pre><code><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//也可以通过person.firstName="..."的方式初始化</span></span><br><span class="line"><span class="keyword">var</span> person = {</span><br><span class="line"><span class="attr">firstName</span>: <span class="string">"Bill"</span>,</span><br><span class="line"><span class="attr">lastName</span> : <span class="string">"Gates"</span>,</span><br><span class="line"><span class="attr">id</span>       : <span class="number">678</span>,</span><br><span class="line"><span class="attr">fullName</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{   <span class="comment">//成员函数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">" "</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">}</span><br><span class="line">};</span><br></pre></td></tr></tbody></table></figure></code></pre><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p>脚本放置 HTML 的  或  部分中，或者同时存在于两个部分中。位于<script> 与 </script> 标签之间。</p><p>也可以把脚本保存到外部文件中，在 <script> 标签的 "src" 属性中设置该 .js 文件：</p><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//单行注释</span><br><span class="line">多行注释以 /* 开始，以 */ 结尾。</span><br></pre></td></tr></table></figure><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>变量必须以字母开头<br>变量也能以 $ 和 _ 符号开头（不过我们不推荐这么做）<br>变量名称对大小写敏感（y 和 Y 是不同的变量）<br>1.声明（创建） JavaScript 变量<br>我们使用 var 关键词来声明变量：</p><p>2.一条语句，多个变量<br>您可以在一条语句中声明很多变量。该语句以 var 开头，并使用逗号分隔变量即可：</p><p>var lastname=”Doe”, age=30, job=”carpenter”;</p><ul><li><p><code>undefined</code>：只声明过但未赋值的变量。</p></li><li><p><code>==</code>与<code>===</code>： 前者是<code>equality</code>、后者为<code>identity</code>，即后者不会进行类型转换，类型不同的结果一定不等。</p></li></ul><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><p>在 JavaScript 函数内部声明的变量（使用 var）是局部变量，所以只能在函数内部访问它</p><p>局部变量生命期从被声明的时间开始。在函数运行以后被删除。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数就是包裹在花括号中的代码块，前面使用了关键词 function：<br>当您声明函数时，请把参数作为变量来声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params">var1,var2</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//经典格式： 函数名 = ( 参数 ) =&gt; &#123; 方法体 &#125; </span></span><br><span class="line"><span class="keyword">const</span> sum3 = <span class="function">(<span class="params">x,y</span>)=&gt;</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> x+y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(sum3) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当方法体只有一行时，花括号可以省略： </span></span><br><span class="line"><span class="keyword">const</span> sum4 = <span class="function">(<span class="params">x,y</span>) =&gt;</span> x+y;  </span><br><span class="line"> </span><br><span class="line"><span class="built_in">console</span>.log(sum4) </span><br><span class="line"> </span><br><span class="line"><span class="comment">//当只有一个参数时，括号可以省略： </span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (condition1)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 <span class="number">1</span> 为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (condition2)</span><br><span class="line">&#123;</span><br><span class="line">    当条件 <span class="number">2</span> 为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">  当条件 <span class="number">1</span> 和 条件 <span class="number">2</span> 都不为 <span class="literal">true</span> 时执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><p>for - 循环代码块一定的次数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for (语句 1; 语句 2; 语句 3)</span><br><span class="line">&#123;</span><br><span class="line">    被执行的代码块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>for/in - 循环遍历对象的属性<br>while - 当指定的条件为 true 时循环指定的代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while (条件)</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>do/while - 同样当指定的条件为 true 时循环指定的代码块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">    需要执行的代码</span><br><span class="line">&#125;</span><br><span class="line">while (条件);</span><br></pre></td></tr></table></figure><h2 id="模块系统"><a href="#模块系统" class="headerlink" title="模块系统"></a>模块系统</h2><p>module.exports 对象是由模块系统创建的。在我们自己写模块的时候，需要在模块最后写好模块接口，声明这个模块对外暴露什么内容，module.exports 提供了暴露接口的方法。<br>第一种：返回一个实例对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//CLASS.js</span></span><br><span class="line"><span class="keyword">var</span> CLASS = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">this</span>.name = <span class="string">&quot;class&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">CLASS .func = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">alert(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">new</span> CLASS();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="built_in">require</span>(<span class="string">&#x27;./CLASS.js&#x27;</span>);</span><br><span class="line">c.func();<span class="comment">//&quot;class&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Thymeleaf模板引擎"><a href="#Thymeleaf模板引擎" class="headerlink" title="Thymeleaf模板引擎"></a>Thymeleaf模板引擎</h1><p><a href="https://developer.aliyun.com/article/769977">https://developer.aliyun.com/article/769977</a></p><h2 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h2><p>模板引擎（这里特指用于Web开发的模板引擎）是为了使用户界面与业务数据（内容）分离而产生的，它可以生成特定格式的文档，用于网站的模板引擎就会生成一个标准的html文档。</p><p>将模板设计好之后直接填充数据即可而不需要重新设计整个页面。让网站实现界面和数据分离，提高页面、代码的复用性。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Thymeleaf是适用于Web和独立环境的现代服务器端Java模板引擎</p><p>特点<br>1.动静分离： Thymeleaf选用html作为模板页，这是任何一款其他模板引擎做不到的！Thymeleaf使用html通过一些特定标签语法代表其含义，但并未破坏html结构，即使无网络、不通过后端渲染也能在浏览器成功打开，大大方便界面的测试和修改。</p><p>2.开箱即用： Thymeleaf提供标准和Spring标准两种方言，可以直接套用模板实现JSTL、 OGNL表达式效果，避免每天套模板、改JSTL、改标签的困扰。同时开发人员也可以扩展和创建自定义的方言。</p><p>3.Springboot官方大力推荐和支持，Springboot官方做了很多默认配置，开发者只需编写对应html即可，大大减轻了上手难度和配置复杂度。</p><h2 id="第一个Thymeleaf程序"><a href="#第一个Thymeleaf程序" class="headerlink" title="第一个Thymeleaf程序"></a>第一个Thymeleaf程序</h2><p>步骤</p><h2 id="创建程序，添加依赖"><a href="#创建程序，添加依赖" class="headerlink" title="创建程序，添加依赖"></a>创建程序，添加依赖</h2><p>首先，打开你的IDEA创建新项目，选择Spring Initializr方式创建Springboot项目 ，然后点击next，然后填写项目名</p><p>勾选其中Web 模块的Spring web依赖以及Template 模块的Thymeleaf依赖。finish 即可：</p><p>如果你创建项目时没有勾选依赖也不要紧，在pom.xml中添加以下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="文件说明"><a href="#文件说明" class="headerlink" title="文件说明"></a>文件说明</h2><p>pom.xml：是项目中的Maven依赖，因为Springboot使用Maven来管理外部jar包依赖，我们只需填写依赖名称配置即可引入该依赖，在本系统中引入Spring web模块(Springmvc)和Thymeleaf的依赖.我们不需要自己去招相关jar包。<br>application.properties: 编写Springboot与各框架整合的一些配置内容。<br>controller：用来编写控制器，主要负责处理请求以及和视图(Thymeleaf)绑定。<br>static：用于存放静态资源，例如html、JavaScript、css以及图片等。<br>templates：用来存放模板引擎Thymeleaf(本质依然是.html文件)</p><h2 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h2><p>项目基于Springboot框架，且选了Spring web(Springmvc)作为mvc框架，其中Thymeleaf就是v(view)视图层，我们需要在controller中指定Thymeleaf页面的url，然后再Model中绑定数据。</p><p>我们在com.Thymeleaf文件下创建controller文件夹，在其中创建urlController.java的controller文件，文件内容(代码)为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.Thymeleaf.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">urlController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;index&quot;)</span><span class="comment">//页面的url地址</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getindex</span><span class="params">(Model model)</span><span class="comment">//对应函数</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;bigsai&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;<span class="comment">//与templates中index.html对应</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部分含义如下：<br>@controller 注解的意思就是声明这个java文件为一个controller控制器。<br>@GetMapping(“index”) 其中@GetMapping的意思是请求的方式为get方式(即可通过浏览器直接请求)，而里面的index表示这个页面(接口)的url地址(路径)。即在浏览器对项目网页访问的地址。<br>getindex() 是@GetMapping(“index”)注解对应的函数，其类型为String类型返回一个字符串，参数Model类型即用来储存数据供我们Thymeleaf页面使用。<br>model.addAttribute(“name”,”bigsai”) 就是Model存入数据的书写方式，Model是一个特殊的类，相当于维护一个Map一样，而Model中的数据通过controller层的关联绑定在view层(即Thymeleaf中)可以直接使用。<br>return “hello”：这个index就是在templates目录下对应模板(本次为Thymeleaf模板)的名称，即应该对应hello.html这个Thymeleaf文件(与页面关联默认规则为：templates目录下返回字符串.html)。</p><h2 id="编写Thymeleaf页面"><a href="#编写Thymeleaf页面" class="headerlink" title="编写Thymeleaf页面"></a>编写Thymeleaf页面</h2><p>咱们在项目的resources目录下的templates文件夹下面创建一个叫index.html的文件，咱们在这个html文件中的<html>标签修改为<html xmlns:th="http://www.thymeleaf.org">这样在Thymeleaf中就可以使用Thymeleaf的语法和规范啦。</p><p>对于第一个Thymelaf程序，你只需将index.html文件改成这样即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>  <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">hello 第一个Thymeleaf程序</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;name&#125;&quot;</span>&gt;</span>name是bigsai(我是离线数据)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Thymeleaf语法详解"><a href="#Thymeleaf语法详解" class="headerlink" title="Thymeleaf语法详解"></a>Thymeleaf语法详解</h2><h2 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h2><h2 id="链接表达式-…"><a href="#链接表达式-…" class="headerlink" title="链接表达式: @{…}"></a>链接表达式: @{…}</h2><h2 id="变量表达式-…"><a href="#变量表达式-…" class="headerlink" title="变量表达式: ${…}"></a>变量表达式: ${…}</h2><h2 id="选择变量表达式-…"><a href="#选择变量表达式-…" class="headerlink" title="选择变量表达式: *{…}"></a>选择变量表达式: *{…}</h2><h2 id="消息表达-…"><a href="#消息表达-…" class="headerlink" title="消息表达: #{…}"></a>消息表达: #{…}</h2><h1 id="Bootstrap前端框架"><a href="#Bootstrap前端框架" class="headerlink" title="Bootstrap前端框架"></a>Bootstrap前端框架</h1><p><a href="https://www.runoob.com/bootstrap/bootstrap-tutorial.html">教程</a></p><p><a href="https://www.runoob.com/try/bootstrap/layoutit/">Bootstrap 可视化布局系统！</a></p><p>Bootstrap:前端页面框架，用于快速开发响应式页面，一套代码就可以适应平板和PC</p><h2 id="引入bootstrap框架"><a href="#引入bootstrap框架" class="headerlink" title="引入bootstrap框架"></a>引入bootstrap框架</h2><p>1、直接引入：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/css/bootstrap.min.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.staticfile.org/twitter-bootstrap/3.3.7/js/bootstrap.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>优点：方便，简单；</p><p>缺点：使网页加载缓慢，需要有网络的情况；</p><p>2.下载好库再进行引入：<br>优点：加载网页会快点，没有网络的情况也可用；</p><h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><p><a href="https://www.runoob.com/jquery/jquery-tutorial.html">jQuery菜鸟教程</a><br>jQuery ：是一个 JavaScript 函数库。使用选择器（$）选取DOM对象，并对其进行赋值、取值、事件绑定等操作；主要是操作DOM</p><h2 id="获取"><a href="#获取" class="headerlink" title="获取"></a>获取</h2><p>国内用百度CDN</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="jQuery-语法"><a href="#jQuery-语法" class="headerlink" title="jQuery 语法"></a>jQuery 语法</h2><p>基础语法： $(selector).action()</p><p>美元符号定义 jQuery<br>选择符（selector）”查询”和”查找” HTML 元素<br>jQuery 的 action() 执行对元素的操作</p><h2 id="jQuery-选择器"><a href="#jQuery-选择器" class="headerlink" title="jQuery 选择器"></a>jQuery 选择器</h2><h2 id="jQuery-事件"><a href="#jQuery-事件" class="headerlink" title="jQuery 事件"></a>jQuery 事件</h2><h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>可实现页面无刷新更新数据</p><p>Ajax相当于浏览器发送请求与接受响应的代理人，以实现在不重新加载整个页面下，与服务器交换数据并局部更新网页数据</p><h2 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h2><p>open(method,url,async)<br>规定请求的类型、URL 以及是否异步处理请求。<br>参数<br>    method：请求的类型；GET 或 POST<br>    url：文件在服务器上的位置<br>    async：true（异步）或 false（同步）</p><p>send(string)<br>    将请求发送到服务器。</p><pre><code>string：仅用于 POST 请求</code></pre><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">loadXMLDoc</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> xmlhttp;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (<span class="built_in">window</span>.XMLHttpRequest)</span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 创建 XMLHttpRequest 对象</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"><span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript"><span class="comment">// IE6, IE5 浏览器执行代码</span></span></span><br><span class="line"><span class="javascript">xmlhttp=<span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">xmlhttp.onreadystatechange=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span></span></span><br><span class="line"><span class="function"><span class="javascript"></span>&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span> (xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)</span></span><br><span class="line"><span class="javascript">&#123;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;myDiv&quot;</span>).innerHTML=xmlhttp.responseText;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript">xmlhttp.open(<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;/try/ajax/ajax_info.txt&quot;</span>,<span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">xmlhttp.send();</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;myDiv&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用 AJAX 修改该文本内容<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;loadXMLDoc()&quot;</span>&gt;</span>修改内容<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h1><p>axios实现了对ajax的封装。<br>Axios 是可以发出 http 请求的 JavaScript 库，在 浏览器 和 node.js 环境中都可以运行。</p><h2 id="axios与ajax的优缺点"><a href="#axios与ajax的优缺点" class="headerlink" title="axios与ajax的优缺点"></a>axios与ajax的优缺点</h2><p>1.axios优点：<br>（1）从浏览器中创建 XMLHttpRequest；<br>（2）支持 Promise API；<br>（3）从 node.js 创建 http 请求；<br>（4）转换请求和响应数据；<br>（5）自动转换JSON数据。</p><p>1.ajax缺点:<br>（1）基于原生的XHR开发，XHR本身的架构不清晰；<br>（2）JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理；<br>（3）不符合关注分离（Separation of Concerns）的原则；<br>（4）配置和调用方式非常混乱，而且基于事件的异步模型不友好。</p><h2 id="GET-请求和POST-请求"><a href="#GET-请求和POST-请求" class="headerlink" title="GET 请求和POST 请求"></a>GET 请求和POST 请求</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../js/axios-0.18.0.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 1、向给定ID的用户发起GET 请求</span></span></span><br><span class="line"><span class="javascript">axios.get(<span class="string">&#x27;/user?ID=12345&#x27;</span>)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理成功情况</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 处理错误情况</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 总是会执行</span></span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="comment">// 2.POST 请求</span></span></span><br><span class="line"><span class="javascript">axios.post(<span class="string">&#x27;/user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">    <span class="attr">firstName</span>: <span class="string">&#x27;Fred&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    <span class="attr">lastName</span>: <span class="string">&#x27;Flintstone&#x27;</span></span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(response);</span></span><br><span class="line"><span class="javascript">  &#125;)</span></span><br><span class="line"><span class="javascript">  .catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">  &#125;);</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h1><p>官方文档：<a href="http://vuejs.org/v2/guide/syntax.html">http://vuejs.org/v2/guide/syntax.html</a></p><p>中文文档: <a href="https://cn.vuejs.org/v2/guide/syntax.html">https://cn.vuejs.org/v2/guide/syntax.html</a></p><h2 id="vscode配置"><a href="#vscode配置" class="headerlink" title="vscode配置"></a>vscode配置</h2><p>Vetur - 格式化vue 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    vscode保存后的动作</span></span><br><span class="line">    <span class="string">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 保存后自动格式化js,css代码，需要安装插件(ESLint,StyleLint)</span></span><br><span class="line">        <span class="attr">&quot;source.fixAll.eslint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">&quot;source.fixAll.stylelint&quot;</span>: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h2 id="js表达式与js代码-语句-的区别"><a href="#js表达式与js代码-语句-的区别" class="headerlink" title="js表达式与js代码(语句)的区别"></a>js表达式与js代码(语句)的区别</h2><p>1.表达式：一个表达式会生成一个值<br>  (1)a+b<br>  (2)x===y ‘a’ ? ‘b’</p><p>2.代码<br>  (1)if (){}  </p><h2 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h2><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><p>功能：用于解析标签体内容<br>写法：容器中的是js表达式，可以自动读取vue实例中data的所有属性 </p><h3 id="指令语法"><a href="#指令语法" class="headerlink" title="指令语法"></a>指令语法</h3><p>功能：用于解析标签(包括标签属性，标签体内容，绑定事件)</p><h4 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind:"></a>v-bind:</h4><p>v-bind用于单向绑定数据和元素属性</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可简写为： --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;url&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="v-model"><a href="#v-model" class="headerlink" title="v-model"></a>v-model</h4><p>双向数据绑定,一般用在表单类元素如：input，select</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">双向<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model:value</span>=<span class="string">&quot;school.name&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 因为v-model默认收集的就是value值，所以可简写为 --&gt;</span></span><br><span class="line">双向<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;school.name&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 定义一个容器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &#123;&#123; &#125;&#125; 用于输出对象属性和函数返回值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>site : &#123;&#123;site&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>url : &#123;&#123;url&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;details()&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 对于制作原型或学习，你可以这样引入最新版本： --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// vue实例</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// el 参数的两种写法</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// vm.$mount(&#x27;#rood&#x27;),</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">el</span>: <span class="string">&#x27;#rood&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// data参数用于定义属性</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// 1.data参数的对象式写法</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">data</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">site</span>: <span class="string">&quot;菜鸟教程&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">url</span>: <span class="string">&quot;www.runoob.com&quot;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">alexa</span>: <span class="string">&quot;10000&quot;</span></span></span><br><span class="line"><span class="javascript">        &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 2.data参数的函数式写法(vue管理的函数，不能用箭头函数)</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// data:function()&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   return&#123;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//     name:&#x27;菜鸟&#x27;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="comment">// methods参数用于定义函数</span></span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">details</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>  <span class="built_in">this</span>.site + <span class="string">&quot; - 学的不仅是技术，更是梦想！&quot;</span>;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;)</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="钩子函数"><a href="#钩子函数" class="headerlink" title="钩子函数"></a>钩子函数</h2><p>created() {}<br>VUE对象初始化完成后自动执行</p><h1 id="Element-UI"><a href="#Element-UI" class="headerlink" title="Element UI"></a>Element UI</h1><p>Element UI 是一套采用 Vue 2.0 作为基础框架实现的组件库</p><p><a href="https://element.eleme.cn/#/zh-CN/component/installation">组件</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/theme-chalk/index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入组件库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/element-ui/lib/index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><p>Layout 布局<br>Container 布局容器<br>Color 色彩<br>Typography 字体<br>Border 边框<br>Icon 图标<br>Button 按钮<br>Link 文字链接<br>Form</p><h2 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h2><p>Radio 单选框<br>Checkbox 多选框<br>Input 输入框<br>InputNumber 计数器<br>Select 选择器<br>Cascader 级联选择器<br>Switch 开关<br>Slider 滑块<br>TimePicker 时间选择器<br>DatePicker 日期选择器<br>DateTimePicker 日期时间选择器<br>Upload 上传<br>Rate 评分<br>ColorPicker 颜色选择器<br>Transfer 穿梭框<br>Form 表单</p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>Table 表格<br>Tag 标签<br>Progress 进度条<br>Tree 树形控件<br>Pagination 分页<br>Badge 标记<br>Avatar 头像<br>Skeleton 骨架屏<br>Empty 空状态<br>Descriptions 描述列表<br>Result 结果</p><h3 id="输入框"><a href="#输入框" class="headerlink" title="输入框"></a>输入框</h3><p><code>  &lt;el-input v-model=&quot;input1&quot;&gt;&lt;/el-input&gt; 输入内容为：&#123;&#123;input1&#125;&#125;</code></p><h3 id="Table表格组件"><a href="#Table表格组件" class="headerlink" title="Table表格组件"></a>Table表格组件</h3><h4 id="el-table"><a href="#el-table" class="headerlink" title="el-table"></a>el-table</h4><p>:data属性   单向数据绑定</p><p>stripe属性可以创建带斑马纹的表格</p><p>Table 组件提供了单选的支持，只需要配置highlight-current-row属性即可实现单选。之后由current-change事件来管理选中时触发的事件，它会传入currentRow，oldCurrentRow。如果需要显示索引，可以增加一列el-table-column，设置type属性为index即可显示从 1 开始的索引号。</p><h4 id="el-table-column"><a href="#el-table-column" class="headerlink" title="el-table-column"></a>el-table-column</h4><p>prop属性来对应对象中的键名即可填入数据，<br>label属性来定义表格的列名。<br>width属性来定义列宽。<br>align=“center”：设置表格内居中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">current-row-key</span>=<span class="string">&quot;id&quot;</span> <span class="attr">:data</span>=<span class="string">&quot;dataList&quot;</span> <span class="attr">stripe</span> <span class="attr">highlight-current-row</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">type</span>=<span class="string">&quot;index&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">label</span>=<span class="string">&quot;序号&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;type&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书类别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图书名称&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;description&quot;</span> <span class="attr">label</span>=<span class="string">&quot;描述&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>Alert 警告<br>Loading 加载<br>Message 消息提示<br>MessageBox 弹框<br>Notification 通知<br>Navigation<br>NavMenu 导航菜单<br>Tabs 标签页<br>Breadcrumb 面包屑<br>PageHeader 页头<br>Dropdown 下拉菜单<br>Steps 步骤条</p><h2 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>Dialog 对话框<br>Tooltip 文字提示<br>Popover 弹出框<br>Popconfirm 气泡确认框<br>Card 卡片<br>Carousel 走马灯<br>Collapse 折叠面板<br>Timeline 时间线<br>Divider 分割线<br>Calendar 日历<br>Image 图片<br>Backtop 回到顶部<br>InfiniteScroll 无限滚动<br>Drawer 抽屉<br>¶Button 按钮</p><h2 id="通过js触发按钮的点击事件"><a href="#通过js触发按钮的点击事件" class="headerlink" title="通过js触发按钮的点击事件"></a>通过js触发按钮的点击事件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//弹出编辑窗口</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">handleUpdate</span>(<span class="params">row</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        axios.get(<span class="string">&quot;/books/&quot;</span>+row.id).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(res.data.flag &amp;&amp; res.data.data != <span class="literal">null</span> )&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.dialogFormVisible4Edit = <span class="literal">true</span>;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.formData = res.data.data;</span></span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.$message.error(<span class="string">&quot;数据同步失败，自动刷新&quot;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;).finally(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">//2.重新加载数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.getAll();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Nodejs"><a href="#Nodejs" class="headerlink" title="Nodejs"></a>Nodejs</h1><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。电脑安装了Node.js后， Node.js 相当于浏览器，也可以在里面运行 JavaScript 了！</p><h2 id="Nodejs的组成："><a href="#Nodejs的组成：" class="headerlink" title="Nodejs的组成："></a>Nodejs的组成：</h2><p>ECMAScript(语言基础，如：语法、数据类型结构以及一些内置对象)</p><p>os(操作系统)</p><p>file(文件系统)</p><p>net(网络系统)</p><p>database(数据库)</p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><a href="https://nodejs.org/en/">Node.js下载地址</a></p><p>打开cmd输入命令检查是否安装成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node -v 查看node版本</span><br><span class="line">npm -v 查看npm版本</span><br></pre></td></tr></table></figure><p>Node.js 安装成功时也默认安装了 npm， npm 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。是用来安装/卸载Node.js需要装的东西</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>1.修改全局模块路径和缓存路径<br>当我们在执行<code>npm install express -g</code>命令时，会默认下载到c盘，更改下载盘<br>在nodejs安装目录下创建创建两个文件夹，名称分别为：node_global(全局模块)和node_cache(缓存)，在node_global文件夹下再建一个node_modules文件夹，配置环境变量用</p><p>2.win+R打开运行窗口，输入cmd，再输入以下两条指令<br>npm config set prefix “创建的node_global文件夹所在路径”<br>npm config set cache “创建的node_cache文件夹所在路径”</p><p>3.修改完毕后，再配置环境变量<br>右键此电脑——&gt;高级系统设置——&gt;环境变量<br>在系统变量中，新建，变量名：NODE_PATH<br>变量值：node_global文件夹下的node_modules文件夹。如：E:\develop\nodejs\node_global\node_modules</p><p>修改用户变量中的Path变量，将默认的npm路径修改为新建的node_global路径<br>如：D:\ruanjian\nodejs\node_global</p><h2 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h2><p><a href="https://yafine-blog.cn/posts/8094.html">参考</a><br>npm (node package manager) 是 JavaScript 世界的包管理工具，是 Node.js 平台的默认包管理工具，简单地说，就是通过 npm 下载模块，复用已有的代码，提高工作效率。</p><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><p>npm 由三个独立的部分组成：</p><ul><li>网站</li><li>注册表（registry）</li><li>命令行工具 (CLI)</li></ul><p><a href="https://www.npmjs.com/">网站</a> 是开发者查找包（package）、设置参数以及管理 npm 使用体验的主要途径。</p><p>注册表 是一个巨大的数据库，保存了每个包（package）的信息。</p><p>CLI 通过命令行或终端运行。开发者通过 CLI 与 npm 打交道。<br> <a href="https://www.axihe.com/api/npm/api/api.html">npm中文文档</a> </p><h3 id="切换为-taobao-镜像源"><a href="#切换为-taobao-镜像源" class="headerlink" title="切换为 taobao 镜像源"></a>切换为 taobao 镜像源</h3><p>国内使用 npm 可能很慢。你可以考虑切换为 taobao 镜像源。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment"># 卸载</span></span><br><span class="line">npm uninstall</span><br><span class="line"><span class="comment"># 清理缓存</span></span><br><span class="line">npm cache clean -f</span><br></pre></td></tr></table></figure><h2 id="cnpm-是什么？"><a href="#cnpm-是什么？" class="headerlink" title="cnpm 是什么？"></a>cnpm 是什么？</h2><p>简单的讲就是中国版的 NPM，因为 npm 安装插件是从国外服务器下载，受网络影响大，可能出现异常，<br>需要安装 cnpm 模块，命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>cnpm 支持可以使用支持 npm 除 publish 之外的所有命令。</p><p>因为 cnpm 的仓库只是 npm 仓库的一个拷贝，它不承担 publish 工作，所以执行 cnpm publish 命令会失败的。</p><h2 id="yarn-是什么？"><a href="#yarn-是什么？" class="headerlink" title="yarn 是什么？"></a>yarn 是什么？</h2><p>Yarn 是一个软件包管理器，还可以作为项目管理工具，你可以通过它使用全世界开发者的代码， 或者分享自己的代码。</p><p>从 npm 安装软件包并保持相同的包管理流程。</p><h3 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h3><p>1.速度超快。<br>Yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。 同时利用并行下载以最大化资源利用率，因此安装速度更快。</p><p>2.超级安全<br>在执行代码之前，Yarn 会通过算法校验每个安装包的完整性。</p><p>3.超级可靠<br>使用详细、简洁的锁文件格式和明确的安装算法，Yarn 能够保证在不同系统上无差异的工作。<br>通过命令安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yarn</span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><p>yarn init：初始化项目，会在根目录下生成一个 package.json，与 npm 类似具体不做解释</p><p>yarn add <Package name>：安装依赖包，会自动安装最新版本，会覆盖指定版本号</p><p>yarn add <Package name1> <Package name1>：一次性添加多个包</p><p>yarn add <Package name>@version：添加指定版本的包</p><p>yarn upgrade <Package name>@version：将包更新到指定版本</p><p>yarn upgrade –latest <Package name>：将包更新到最新版本</p><p>yarn remove <Package name>：删除包</p><p>yarn remove <Package name1> <Package name2>：一次性删除多个包</p><p>yarn info <Packagename> ：可以用来查看某个模块的最新版本信息</p><p>yarn install：安装 package.json 里所有包，并将包及它的所有依赖项保存进 yarn.lock</p><p>yarn install –force ：强制重新下载所有包</p><p>yarn install –flat：安装一个包的单一版本</p><p>yarn install –production：只安装 dependencies 里的包</p><p>yarn install –no-lockfile：不读取或生成 yarn.lock</p><p>yarn install –pure-lockfile：不生成 yarn.lock</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>安装npm模块时，没有权限<br>解决方法：打开nodejs安装目录的属性把权限全部勾上 </p><p>npm的包安装分为本地安装（local）、全局安装（global）两种<br> 本地安装: npm install xxx 安装到命令行所在目录的node_module目录。<br> 全局安装: npm install xxx -g 安装到 \AppData\Roaming\npm\node_modules目录。</p></script></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HTML&quot;&gt;&lt;a href=&quot;#HTML&quot; class=&quot;headerlink&quot; title=&quot;HTML&quot;&gt;&lt;/a&gt;HTML&lt;/h1&gt;&lt;p&gt;HTML:（HyperText Markup Language）【超文本标记语言】&lt;br&gt;狭义的HTML指的是网页；&lt;br&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://wenkexia.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="框架" scheme="https://wenkexia.github.io/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>qq机器人</title>
    <link href="https://wenkexia.github.io/2022/032659541.html"/>
    <id>https://wenkexia.github.io/2022/032659541.html</id>
    <published>2022-03-26T09:09:00.000Z</published>
    <updated>2022-03-26T09:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md">https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md</a></p><h1 id="Mirai"><a href="#Mirai" class="headerlink" title="Mirai"></a>Mirai</h1><p>使用 Kotlin 编写的高效率 QQ 机器人框架<br><a href="https://github.com/mamoe/mirai">github地址</a></p><p><a href="https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md">mirai官方生态文档</a></p><h2 id="下载-Mirai"><a href="#下载-Mirai" class="headerlink" title="下载 Mirai"></a>下载 Mirai</h2><p><a href="https://github.com/iTXTech/mcl-installer">MCL Installer</a><br>支持自动下载Java运行环境 和 Mirai Console Loader </p><h2 id="了解运行环境"><a href="#了解运行环境" class="headerlink" title="了解运行环境"></a>了解运行环境</h2><p>MCL Installer安装时自动下载了 Mirai Console Loader（简称 MCL）。<br>启动器会帮你准备运行环境，下载和更新 Mirai 核心</p><p>文件夹名称    用途<br>scripts    存放启动器的脚本，一般不需要在意他们<br>plugins    存放插件<br>data    存放插件的数据，一般不需要在意它们<br>config    存放插件的配置，可以打开并修改配置<br>logs    存放运行时的日志，日志默认保留 7 天</p><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>刚刚装好的 Mirai Console 是没有任何功能的。功能将由插件提供。</p><p><a href="https://mirai.mamoe.net/category/11/%E6%8F%92%E4%BB%B6%E5%8F%91%E5%B8%83">插件发布</a><br>如果是 JAR 文件的插件，放入 plugins 即可。其他插件一般都有特殊说明如何使用，请参考它们的说明。</p><h2 id="自动定义回复插件"><a href="#自动定义回复插件" class="headerlink" title="自动定义回复插件"></a>自动定义回复插件</h2><p><a href="https://mirai.mamoe.net/topic/636/console-%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D%E6%8F%92%E4%BB%B6">https://mirai.mamoe.net/topic/636/console-%E8%87%AA%E5%8A%A8%E5%AE%9A%E4%B9%89%E5%9B%9E%E5%A4%8D%E6%8F%92%E4%BB%B6</a></p><p>浏览器进入<a href="http://localhost:20044/index.html">http://localhost:20044/index.html</a></p><h2 id="思知机器人插件"><a href="#思知机器人插件" class="headerlink" title="思知机器人插件"></a>思知机器人插件</h2><p><a href="https://github.com/thetbw/my-bot">https://github.com/thetbw/my-bot</a> </p><h1 id="滑动验证助手"><a href="#滑动验证助手" class="headerlink" title="滑动验证助手"></a>滑动验证助手</h1><p><a href="https://github.com/mzdluo123/TxCaptchaHelper">https://github.com/mzdluo123/TxCaptchaHelper</a></p><p>下载手机客户端<br>在mcl控制台中使用命令<code>login &lt;qq&gt; [password] [protocol]</code><br>会弹出url,把它复制到滑动验证助手app中</p><p>第二种登录方式（将弹出的链接发送给手机QQ打开，会得到一个二维码，使用手机QQ扫码验证）</p><p>ANDROID_PAD是ipad</p><p>login 3385642151 密码 ANDROID_PAD</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="解决libc-so-6-version-GLIBC-2-18’-not-found问题"><a href="#解决libc-so-6-version-GLIBC-2-18’-not-found问题" class="headerlink" title="解决libc.so.6: version `GLIBC_2.18’ not found问题"></a>解决libc.so.6: version `GLIBC_2.18’ not found问题</h2><p><a href="https://www.cnblogs.com/music-liang/p/13029205.html">https://www.cnblogs.com/music-liang/p/13029205.html</a></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/411513359">https://zhuanlan.zhihu.com/p/411513359</a></p><h1 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h1><p>下载插件：Mirai Console</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md&quot;&gt;https://github.com/mamoe/mirai/blob/dev/docs/mirai-ecology.md&lt;/a&gt;</summary>
      
    
    
    
    <category term="工具" scheme="https://wenkexia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="qq" scheme="https://wenkexia.github.io/tags/qq/"/>
    
  </entry>
  
  <entry>
    <title>python高级</title>
    <link href="https://wenkexia.github.io/2022/03267198.html"/>
    <id>https://wenkexia.github.io/2022/03267198.html</id>
    <published>2022-03-26T01:55:02.000Z</published>
    <updated>2022-03-26T01:55:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="re正则模块"><a href="#re正则模块" class="headerlink" title="re正则模块"></a>re正则模块</h1><p>Python提供了re模块来支持正则表达式相关操作<br><a href="https://deerchao.net/tutorials/regex/regex.htm">《正则表达式30分钟入门教程》</a></p><p>正则表达式是一种工具，它定义了字符串的匹配模式（如何检查一个字符串是否有跟某种模式匹配的部分或者从一个字符串中将与模式匹配的部分提取出来或者替换掉）</p><table><thead><tr><th>符号</th><th>解释</th><th>示例</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配任意字符</td><td>b.t</td><td>可以匹配bat / but / b#t / b1t等</td></tr><tr><td>\w</td><td>匹配字母/数字/下划线</td><td>b\wt</td><td>可以匹配bat / b1t / b_t等<br>但不能匹配b#t</td></tr><tr><td>\s</td><td>匹配空白字符（包括\r、\n、\t等）</td><td>love\syou</td><td>可以匹配love you</td></tr><tr><td>\d</td><td>匹配数字</td><td>\d\d</td><td>可以匹配01 / 23 / 99等</td></tr><tr><td>\b</td><td>匹配单词的边界</td><td>\bThe\b</td><td></td></tr><tr><td>^  脱字符</td><td>表示字符串的开始</td><td>^The</td><td>可以匹配The开头的字符串</td></tr><tr><td>$</td><td>表示字符串的结束</td><td>.exe$</td><td>可以匹配.exe结尾的字符串</td></tr><tr><td>[^]</td><td>匹配不在字符集中的任意单一字符，^在[]表示取反</td><td>[^aeiou]</td><td>可以匹配任一非元音字母字符</td></tr><tr><td>\W</td><td>匹配非字母/数字/下划线</td><td>b\Wt</td><td>可以匹配b#t / b@t等<br>但不能匹配but / b1t / b_t等</td></tr><tr><td>\S</td><td>匹配非空白字符</td><td>love\Syou</td><td>可以匹配love#you等<br>但不能匹配love you</td></tr><tr><td>\D</td><td>匹配非数字</td><td>\d\D</td><td>可以匹配9a / 3# / 0F等</td></tr><tr><td>\B</td><td>匹配非单词边界</td><td>\Bio\B</td><td></td></tr><tr><td>[]</td><td>匹配来自字符集的任意单一字符</td><td>[aeiou]</td><td>可以匹配任一元音字母字符</td></tr></tbody></table><blockquote><p><strong>说明：</strong> 如果需要匹配的字符是正则表达式中的特殊字符，那么可以使用\进行转义处理，例如想匹配小数点可以写成\.就可以了，因为直接写.会匹配任意字符；同理，想匹配圆括号必须写成\(和\)，否则圆括号被视为正则表达式中的分组。</p></blockquote><h2 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h2><h3 id="re-compile"><a href="#re-compile" class="headerlink" title="re.compile()"></a>re.compile()</h3><p>compile(pattern, flags=0)<br>re.compile()是用来优化正则的，它将正则表达式转化为对象。单独使用没有任何意义，需要和findall(), search(), match(）搭配使用<br>re.search(pattern, string)的调用方式就转换为 pattern.search(string)的调用方式，多次调用一个正则表达式就重复利用这个正则对象，可以实现更有效率的匹配<br>参数：<br>    pattern : 一个字符串形式的正则表达式<br>    flags : 可选，表示匹配模式，        </p><h3 id="re-search"><a href="#re-search" class="headerlink" title="re.search()"></a>re.search()</h3><p>search(pattern, string, flags=0)<br>搜索字符串中第一次出现正则表达式的模式 成功返回匹配对象 否则返回None </p><p>pattern: 匹配的规则,</p><p>string : 要匹配的内容</p><p>flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：<br>    re.I 忽略大小写<br>    re.L 表示特殊字符集 w, W, 方形, B, s, S 依赖于当前环境<br>    re.M 多行模式<br>    re.S 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）<br>    re.U 表示特殊字符集 w, W,方形, B, d, D, s, S 依赖于 Unicode 字符属性数据库<br>    re.X 为了增加可读性，忽略空格和 # 后面的注释</p><h3 id="re-findall"><a href="#re-findall" class="headerlink" title="re.findall()"></a>re.findall()</h3><p>findall(pattern, string, flags=0)<br>查找字符串所有与正则表达式匹配的模式 返回字符串的列表        </p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><table><thead><tr><th>函数</th><th>说明</th></tr></thead></table><p>| match(pattern, string, flags=0)              | 用正则表达式匹配字符串 成功返回匹配对象 否则返回None         |</p><p>| split(pattern, string, maxsplit=0, flags=0)  | 用正则表达式指定的模式分隔符拆分字符串 返回列表              |<br>| sub(pattern, repl, string, count=0, flags=0) | 用指定的字符串替换原字符串中与正则表达式匹配的模式 可以用count指定替换的次数 |<br>| fullmatch(pattern, string, flags=0)          | match函数的完全匹配（从字符串开头到结尾）版本                |</p><p>| finditer(pattern, string, flags=0)           | 查找字符串所有与正则表达式匹配的模式 返回一个迭代器          |<br>| purge()                                      | 清除隐式编译的正则表达式的缓存                               |<br>| re.I / re.IGNORECASE                         | 忽略大小写匹配标记                                           |<br>| re.M / re.MULTILINE                          | 多行匹配标记                                                 |</p><blockquote><p><strong>说明：</strong> 上面提到的re模块中的这些函数，实际开发中也可以用正则表达式对象的方法替代对这些函数的使用，如果一个正则表达式需要重复的使用，那么先通过compile函数编译正则表达式并创建出正则表达式对象无疑是更为明智的选择。</p></blockquote><p>下面我们通过一系列的例子来告诉大家在Python中如何使用正则表达式。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><h3 id="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"><a href="#例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。" class="headerlink" title="例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。"></a>例子1：验证输入用户名和QQ号是否有效并给出对应的提示信息。</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">验证输入用户名和QQ号是否有效并给出对应的提示信息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">要求：用户名必须由字母、数字或下划线构成且长度在6~20个字符之间，QQ号是5~12的数字且首位不能为0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    username = <span class="built_in">input</span>(<span class="string">'请输入用户名: '</span>)</span><br><span class="line">    qq = <span class="built_in">input</span>(<span class="string">'请输入QQ号: '</span>)</span><br><span class="line">    <span class="comment"># match函数的第一个参数是正则表达式字符串或正则表达式对象</span></span><br><span class="line">    <span class="comment"># 第二个参数是要跟正则表达式做匹配的字符串对象</span></span><br><span class="line">    m1 = re.match(<span class="string">r'^[0-9a-zA-Z_]{6,20}$'</span>, username)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m1:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'请输入有效的用户名.'</span>)</span><br><span class="line">    m2 = re.match(<span class="string">r'^[1-9]\d{4,11}$'</span>, qq)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> m2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'请输入有效的QQ号.'</span>)</span><br><span class="line">    <span class="keyword">if</span> m1 <span class="keyword">and</span> m2:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'你输入的信息是有效的!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>提示：</strong> 上面在书写正则表达式时使用了“原始字符串”的写法（在字符串前面加上了r），所谓“原始字符串”就是字符串中的每个字符都是它原始的意义，说得更直接一点就是字符串中没有所谓的转义字符啦。因为正则表达式中有很多元字符和需要进行转义的地方，如果不使用原始字符串就需要将反斜杠写作\\，例如表示数字的\d得书写成\\d，这样不仅写起来不方便，阅读的时候也会很吃力。</p></blockquote><h3 id="例子2：从一段文字中提取出国内手机号码。"><a href="#例子2：从一段文字中提取出国内手机号码。" class="headerlink" title="例子2：从一段文字中提取出国内手机号码。"></a>例子2：从一段文字中提取出国内手机号码。</h3><p>下面这张图是截止到2017年底，国内三家运营商推出的手机号段。</p><p><img src="./res/tel-start-number.png"></p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    <span class="comment"># 创建正则表达式对象 使用了前瞻和回顾来保证手机号前后不应该出现数字</span></span><br><span class="line">    pattern = re.<span class="built_in">compile</span>(<span class="string">r'(?&lt;=\D)1[34578]\d{9}(?=\D)'</span>)</span><br><span class="line">    sentence = <span class="string">'''</span></span><br><span class="line"><span class="string">    重要的事情说8130123456789遍，我的手机号是13512346789这个靓号，</span></span><br><span class="line"><span class="string">    不是15600998765，也是110或119，王大锤的手机号才是15600998765。</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="comment"># 查找所有匹配并保存到一个列表中</span></span><br><span class="line">    mylist = re.findall(pattern, sentence)</span><br><span class="line">    <span class="built_in">print</span>(mylist)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'--------华丽的分隔线--------'</span>)</span><br><span class="line">    <span class="comment"># 通过迭代器取出匹配对象并获得匹配的内容</span></span><br><span class="line">    <span class="keyword">for</span> temp <span class="keyword">in</span> pattern.finditer(sentence):</span><br><span class="line">        <span class="built_in">print</span>(temp.group())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'--------华丽的分隔线--------'</span>)</span><br><span class="line">    <span class="comment"># 通过search函数指定搜索位置找出所有匹配</span></span><br><span class="line">    m = pattern.search(sentence)</span><br><span class="line">    <span class="keyword">while</span> m:</span><br><span class="line">        <span class="built_in">print</span>(m.group())</span><br><span class="line">        m = pattern.search(sentence, m.end())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明：</strong> 上面匹配国内手机号的正则表达式并不够好，因为像14开头的号码只有145或147，而上面的正则表达式并没有考虑这种情况，要匹配国内手机号，更好的正则表达式的写法是：<code>(?&lt;=\D)(1[38]\d{9}|14[57]\d{8}|15[0-35-9]\d{8}|17[678]\d{8})(?=\D)</code>，国内最近好像有19和16开头的手机号了，但是这个暂时不在我们考虑之列。</p></blockquote><h3 id="例子3：替换字符串中的不良内容"><a href="#例子3：替换字符串中的不良内容" class="headerlink" title="例子3：替换字符串中的不良内容"></a>例子3：替换字符串中的不良内容</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    sentence = <span class="string">'你丫是傻叉吗? 我操你大爷的. Fuck you.'</span></span><br><span class="line">    purified = re.sub(<span class="string">'[操肏艹]|fuck|shit|傻[比屄逼叉缺吊屌]|煞笔'</span>,</span><br><span class="line">                      <span class="string">'*'</span>, sentence, flags=re.IGNORECASE)</span><br><span class="line">    <span class="built_in">print</span>(purified)  <span class="comment"># 你丫是*吗? 我*你大爷的. * you.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>说明：</strong> re模块的正则表达式相关函数中都有一个flags参数，它代表了正则表达式的匹配标记，可以通过该标记来指定匹配时是否忽略大小写、是否进行多行匹配、是否显示调试信息等。如果需要为flags参数指定多个值，可以使用<a href="http://www.runoob.com/python/python-operators.html#ysf5">按位或运算符</a>进行叠加，如<code>flags=re.I | re.M</code>。</p></blockquote><h3 id="例子4：拆分长字符串"><a href="#例子4：拆分长字符串" class="headerlink" title="例子4：拆分长字符串"></a>例子4：拆分长字符串</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    poem = <span class="string">'窗前明月光，疑是地上霜。举头望明月，低头思故乡。'</span></span><br><span class="line">    sentence_list = re.split(<span class="string">r'[，。, .]'</span>, poem)</span><br><span class="line">    <span class="keyword">while</span> <span class="string">''</span> <span class="keyword">in</span> sentence_list:</span><br><span class="line">        sentence_list.remove(<span class="string">''</span>)</span><br><span class="line">    <span class="built_in">print</span>(sentence_list)  <span class="comment"># ['窗前明月光', '疑是地上霜', '举头望明月', '低头思故乡']</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="校验数字的表达式"><a href="#校验数字的表达式" class="headerlink" title="校验数字的表达式"></a>校验数字的表达式</h2><p>数字：^[0-9]*$</p><p>n位的数字：^\d{n}$</p><p>至少n位的数字：^\d{n,}$</p><p>m-n位的数字：^\d{m,n}$</p><p>零和非零开头的数字：^(0|[1-9][0-9]*)$</p><p>非零开头的最多带两位小数的数字：^([1-9][0-9]*)+(.[0-9]{1,2})?$</p><p>带1-2位小数的正数或负数：^(-)?\d+(.\d{1,2})?$</p><p>正数、负数、和小数：^(-|+)?\d+(.\d+)?$</p><p>有两位小数的正实数：^[0-9]+(.[0-9]{2})?$</p><p>有1~3位小数的正实数：^[0-9]+(.[0-9]{1,3})?$</p><p>非零的正整数：^[1-9]\d*$ 或 ^([1-9][0-9]<em>){1,3}$ 或 ^+?[1-9][0-9]</em>$</p><p>非零的负整数：^-[1-9][]0-9”<em>$ 或 ^-[1-9]\d</em>$</p><p>非负整数：^\d+$ 或 ^[1-9]\d*|0$</p><p>非正整数：^-[1-9]\d*|0$ 或 ^((-\d+)|(0+))$</p><p>非负浮点数：^\d+(.\d+)?$ 或 ^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0$</p><p>非正浮点数：^((-\d+(.\d+)?)|(0+(.0+)?))$ 或 ^(-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*))|0?.0+|0$</p><p>正浮点数：^[1-9]\d<em>.\d</em>|0.\d*[1-9]\d*$ 或 ^(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>))$</p><p>负浮点数：^-([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*)$ 或 ^(-(([0-9]+.[0-9]<em>[1-9][0-9]</em>)|([0-9]<em>[1-9][0-9]<em>.[0-9]+)|([0-9]</em>[1-9][0-9]</em>)))$</p><p>浮点数：^(-?\d+)(.\d+)?$ 或 ^-?([1-9]\d<em>.\d</em>|0.\d*[1-9]\d*|0?.0+|0)$</p><h2 id="校验字符的表达式"><a href="#校验字符的表达式" class="headerlink" title="校验字符的表达式"></a>校验字符的表达式</h2><p>汉字：^[\u4e00-\u9fa5]{0,}$</p><p>表示匹配1个数字或1个字母：^[0-9a-zA-Z]$<br>表示匹配至少1个数字或字母        ^[0-9a-zA-Z]+$<br>“+”表示匹配前面的子表达式一次或多次(大于等于1次）</p><p>英文和数字：^[A-Za-z0-9]+$ 或 ^[A-Za-z0-9]{4,40}$</p><p>长度为3-20的所有字符：^.{3,20}$</p><p>由数字、26个英文字母或者下划线组成的字符串：^\w+$ 或 ^\w{3,20}</p><p>中文、英文、数字包括下划线：^[\u4E00-\u9FA5A-Za-z0-9_]+$</p><p>中文、英文、数字但不包括下划线等符号：^[\u4E00-\u9FA5A-Za-z0-9]+$ 或 ^[\u4E00-\u9FA5A-Za-z0-9]{2,20}$</p><p>可以输入含有^%&amp;’,;=?$"等字符：[^%&amp;’,;=?$\x22]+</p><p>禁止输入含有<del>的字符[^</del>\x22]+<br>其它：</p><p>.*匹配除&nbsp;\n&nbsp;以外的任何字符。</p><p>/[\uFF00-\uFFFF]/&nbsp;全角符号<br>/[\u0000-\u00FF]/&nbsp;半角符号</p><h2 id="特殊需求表达式"><a href="#特殊需求表达式" class="headerlink" title="特殊需求表达式"></a>特殊需求表达式</h2><p>Email地址：^\w+([-+.]\w+)*@\w+([-.]\w+)<em>.\w+([-.]\w+)</em>$</p><p>域名：[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?</p><p>InternetURL：[a-zA-z]+://[^\s]* 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=]*)?$</p><p>手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$</p><p>电话号码(“XXX-XXXXXXX”、”XXXX-XXXXXXXX”、”XXX-XXXXXXX”、”XXX-XXXXXXXX”、”XXXXXXX”和”XXXXXXXX)：^((\d{3,4}-)|\d{3.4}-)?\d{7,8}$</p><p>国内电话号码(0511-4405222、021-87888822)：\d{3}-\d{8}|\d{4}-\d{7}</p><p>身份证号(15位、18位数字)：^\d{15}|\d{18}$</p><p>短身份证号码(数字、字母x结尾)：^([0-9]){7,18}(x|X)?$ 或 ^\d{8,18}|[0-9x]{8,18}|[0-9X]{8,18}?$</p><p>帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$</p><p>密码(以字母开头，长度在6~18之间，只能包含字母、数字和下划线)：^[a-zA-Z]\w{5,17}$</p><p>强密码(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间)：^(?=.<em>\d)(?=.</em>[a-z])(?=.*[A-Z]).{8,10}$</p><p>日期格式：^\d{4}-\d{1,2}-\d{1,2}</p><p>一年的12个月(01～09和1～12)：^(0?[1-9]|1[0-2])$</p><p>一个月的31天(01～09和1～31)：^((0?[1-9])|((1|2)[0-9])|30|31)$</p><p>钱的输入格式：<br>1.有四种钱的表示形式我们可以接受:”10000.00” 和 “10,000.00”, 和没有 “分” 的 “10000” 和 “10,000”：^[1-9][0-9]*$</p><p>2.这表示任意一个不以0开头的数字,但是,这也意味着一个字符”0”不通过,所以我们采用下面的形式：^(0|[1-9][0-9]*)$</p><p>3.一个0或者一个不以0开头的数字.我们还可以允许开头有一个负号：^(0|-?[1-9][0-9]*)$</p><p>4.这表示一个0或者一个可能为负的开头不为0的数字.让用户以0开头好了.把负号的也去掉,因为钱总不能是负的吧.下面我们要加的是说明可能的小数部分：^[0-9]+(.[0-9]+)?$</p><p>5.必须说明的是,小数点后面至少应该有1位数,所以”10.”是不通过的,但是 “10” 和 “10.2” 是通过的：^[0-9]+(.[0-9]{2})?$</p><p>6.这样我们规定小数点后面必须有两位,如果你认为太苛刻了,可以这样：^[0-9]+(.[0-9]{1,2})?$</p><p>7.这样就允许用户只写一位小数.下面我们该考虑数字中的逗号了,我们可以这样：^[0-9]{1,3}(,[0-9]{3})*(.[0-9]{1,2})?$</p><p>8.1到3个数字,后面跟着任意个 逗号+3个数字,逗号成为可选,而不是必须：^([0-9]+|[0-9]{1,3}(,[0-9]{3})<em>)(.[0-9]{1,2})?$<br>（搜索公众号Java后端，回复“2021”，送你一份Java面试题宝典）<br>备注：这就是最终结果了,别忘了+可以用</em>替代如果你觉得空字符串也可以接受的话(奇怪,为什么?)最后,别忘了在用函数时去掉去掉那个反斜杠,一般的错误都在这里</p><p>xml文件：^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$</p><p>中文字符的正则表达式：[\u4e00-\u9fa5]</p><p>双字节字符：[^\x00-\xff]&nbsp;(包括汉字在内，可以用来计算字符串的长度(一个双字节字符长度计2，ASCII字符计1))</p><p>空白行的正则表达式：\n\s*\r&nbsp;(可以用来删除空白行)</p><p>HTML标记的正则表达式：&lt;(\S*?)[^&gt;]<em>&gt;.</em>?&lt;/\1&gt;|&lt;.*? /&gt;&nbsp;(网上流传的版本太糟糕，上面这个也仅仅能部分，对于复杂的嵌套标记依旧无能为力)</p><p>首尾空白字符的正则表达式：^\s*|\s*$或(^\s*)|(\s*$)&nbsp;(可以用来删除行首行尾的空白字符(包括空格、制表符、换页符等等)，非常有用的表达式)</p><p>腾讯QQ号：[1-9][0-9]{4,}&nbsp;(腾讯QQ号从10000开始)</p><p>中国邮政编码：[1-9]\d{5}(?!\d)&nbsp;(中国邮政编码为6位数字)</p><p>IP地址：\d+.\d+.\d+.\d+&nbsp;(提取IP地址时有用)</p><p>IP地址：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</p><p>IP-v4地址：\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b&nbsp;(提取IP地址时有用)</p><p>校验IP-v6地址:(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))</p><p>子网掩码：((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))</p><p>校验日期:^(?:(?!0000)[0-9]{4}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1[0-9]|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)-02-29)$(“yyyy-mm-dd“ 格式的日期校验，已考虑平闰年。)</p><p>抽取注释：<!--(.*?)--></p><p>查找CSS属性:^\s*[a-zA-Z\-]+\s*[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1}</p><p>提取页面超链接:(&lt;a\s*(?!.<em>\brel=)[^&gt;]</em>)(href=”https?:\/\/)((?!(?:(?:www\.)?’.implode(‘|(?:www\.)?’, $follow_list).’))[^” rel=”external nofollow” ]+)”((?!.<em>\brel=)[^&gt;]</em>)(?:[^&gt;]*)&gt;</p><p>提取网页图片:\&lt; <em>[img][^\\&gt;]</em>[src] *= <em>[\“\‘]{0,1}([^\“\‘\ &gt;]</em>)</p><p>提取网页颜色代码:^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$</p><p>文件扩展名效验:^([a-zA-Z]\:|\\)\\([^\\]+\\)<em>[^\/:</em>?”&lt;&gt;|]+\.txt(l)?$</p><p>判断IE版本：^.*MSIE <a href="?:%5C.%5B0-9%5D+">5-8</a>?(?!.<em>Trident\/[5-9]\.0).</em>$</p><h1 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h1><p>今天我们使用的计算机早已进入多CPU或多核时代，而我们使用的操作系统都是支持“多任务”的操作系统，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务并发的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此在当下不管是用什么编程语言进行开发，实现让程序同时执行多个任务也就是常说的“并发编程”，应该是程序员必备技能之一。为此，我们需要先讨论两个概念，一个叫进程，一个叫线程。</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>进程就是操作系统中执行的一个程序，操作系统以进程为单位分配存储空间，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据，操作系统管理所有进程的执行，为它们合理的分配资源。进程可以通过fork或spawn的方式来创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此必须通过进程间通信机制（IPC，Inter-Process Communication）来实现数据共享，具体的方式包括管道、信号、套接字、共享内存区等。</p><p>一个进程还可以拥有多个并发的执行线索，简单的说就是拥有多个可以获得CPU调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核CPU系统中，真正的并发是不可能的，因为在某个时刻能够获得CPU的只有唯一的一个线程，多个线程共享了CPU的执行时间。使用多线程实现并发编程为程序带来的好处是不言而喻的，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如macOS中的“活动监视器”、Windows中的“任务管理器”）来证实，如下图所示。</p><p><img src="./res/macos-monitor.png"></p><p>当然多线程也并不是没有坏处，站在其他进程的角度，多线程的程序对其他程序并不友好，因为它占用了更多的CPU执行时间，导致其他程序无法获得足够的CPU执行时间；另一方面，站在开发者的角度，编写和调试多线程的程序都对开发者有较高的要求，对于初学者来说更加困难。</p><p>Python既支持多进程又支持多线程，因此使用Python实现并发编程主要有3种方式：多进程、多线程、多进程+多线程。</p><h2 id="Python中的多进程"><a href="#Python中的多进程" class="headerlink" title="Python中的多进程"></a>Python中的多进程</h2><p>Unix和Linux操作系统上提供了<code>fork()</code>系统调用来创建进程，调用<code>fork()</code>函数的是父进程，创建出的是子进程，子进程是父进程的一个拷贝，但是子进程拥有自己的PID。<code>fork()</code>函数非常特殊它会返回两次，父进程中可以通过<code>fork()</code>函数的返回值得到子进程的PID，而子进程中的返回值永远都是0。Python的os模块提供了<code>fork()</code>函数。由于Windows系统没有<code>fork()</code>调用，因此要实现跨平台的多进程编程，可以使用multiprocessing模块的<code>Process</code>类来创建子进程，而且该模块还提供了更高级的封装，例如批量启动进程的进程池（<code>Pool</code>）、用于进程间通信的队列（<code>Queue</code>）和管道（<code>Pipe</code>）等。</p><p>下面用一个下载文件的例子来说明使用多进程和不使用多进程到底有什么差别，先看看下面的代码。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    download_task(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    download_task(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>下面是运行程序得到的一次运行结果。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了6秒</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">总共耗费了13.01秒.</span><br></pre></td></tr></tbody></table></figure><p>从上面的例子可以看出，如果程序中的代码只能按顺序一点点的往下执行，那么即使执行两个毫不相关的下载任务，也需要先等待一个文件下载完成后才能开始下一个下载任务，很显然这并不合理也没有效率。接下来我们使用多进程的方式将两个下载任务放到不同的进程中，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> getpid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download_task</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'启动下载进程，进程号[%d].'</span> % getpid())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    p1 = Process(target=download_task, args=(<span class="string">'Python从入门到住院.pdf'</span>, ))</span><br><span class="line">    p1.start()</span><br><span class="line">    p2 = Process(target=download_task, args=(<span class="string">'Peking Hot.avi'</span>, ))</span><br><span class="line">    p2.start()</span><br><span class="line">    p1.join()</span><br><span class="line">    p2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我们通过<code>Process</code>类创建了进程对象，通过<code>target</code>参数我们传入一个函数来表示进程启动后要执行的代码，后面的<code>args</code>是一个元组，它代表了传递给函数的参数。<code>Process</code>对象的<code>start</code>方法用来启动进程，而<code>join</code>方法表示等待进程执行结束。运行上面的代码可以明显发现两个下载任务“同时”启动了，而且程序的执行时间将大大缩短，不再是两个任务的时间总和。下面是程序的一次执行结果。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">启动下载进程，进程号[1530].</span><br><span class="line">开始下载Python从入门到住院.pdf...</span><br><span class="line">启动下载进程，进程号[1531].</span><br><span class="line">开始下载Peking Hot.avi...</span><br><span class="line">Peking Hot.avi下载完成! 耗费了7秒</span><br><span class="line">Python从入门到住院.pdf下载完成! 耗费了10秒</span><br><span class="line">总共耗费了10.01秒.</span><br></pre></td></tr></tbody></table></figure><p>我们也可以使用subprocess模块中的类和函数来创建和启动子进程，然后通过管道来和子进程通信，这些内容我们不在此进行讲解，有兴趣的读者可以自己了解这些知识。接下来我们将重点放在如何实现两个进程间的通信。我们启动两个进程，一个输出Ping，一个输出Pong，两个进程输出的Ping和Pong加起来一共10个。听起来很简单吧，但是如果这样写可是错的哦。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">counter = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub_task</span>(<span class="params">string</span>):</span></span><br><span class="line">    <span class="keyword">global</span> counter</span><br><span class="line">    <span class="keyword">while</span> counter &lt; <span class="number">10</span>:</span><br><span class="line">        <span class="built_in">print</span>(string, end=<span class="string">''</span>, flush=<span class="literal">True</span>)</span><br><span class="line">        counter += <span class="number">1</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Ping'</span>, )).start()</span><br><span class="line">    Process(target=sub_task, args=(<span class="string">'Pong'</span>, )).start()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>看起来没毛病，但是最后的结果是Ping和Pong各输出了10个，Why？当我们在程序中创建进程的时候，子进程复制了父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个<code>counter</code>变量，所以结果也就可想而知了。要解决这个问题比较简单的办法是使用multiprocessing模块中的<code>Queue</code>类，它是可以被多个进程共享的队列，底层是通过管道和<a href="">信号量（semaphore）</a>机制来实现的，有兴趣的读者可以自己尝试一下。</p><h2 id="Python中的多线程"><a href="#Python中的多线程" class="headerlink" title="Python中的多线程"></a>Python中的多线程</h2><p>在Python早期的版本中就引入了thread模块（现在名为_thread）来实现多线程编程，然而该模块过于底层，而且很多功能都没有提供，因此目前的多线程开发我们推荐使用threading模块，该模块对多线程编程提供了更好的面向对象的封装。我们把刚才下载文件的例子用多线程的方式来实现一遍。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">filename</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % filename)</span><br><span class="line">    time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">    sleep(time_to_download)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = Thread(target=download, args=(<span class="string">'Python从入门到住院.pdf'</span>,))</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = Thread(target=download, args=(<span class="string">'Peking Hot.avi'</span>,))</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.3f秒'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>我们可以直接使用threading模块的<code>Thread</code>类来创建线程，但是我们之前讲过一个非常重要的概念叫“继承”，我们可以从已有的类创建新类，因此也可以通过继承<code>Thread</code>类的方式来创建自定义的线程类，然后再创建线程对象并启动线程。代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time, sleep</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, filename</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._filename = filename</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'开始下载%s...'</span> % self._filename)</span><br><span class="line">        time_to_download = randint(<span class="number">5</span>, <span class="number">10</span>)</span><br><span class="line">        sleep(time_to_download)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'%s下载完成! 耗费了%d秒'</span> % (self._filename, time_to_download))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    start = time()</span><br><span class="line">    t1 = DownloadTask(<span class="string">'Python从入门到住院.pdf'</span>)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2 = DownloadTask(<span class="string">'Peking Hot.avi'</span>)</span><br><span class="line">    t2.start()</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'总共耗费了%.2f秒.'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>因为多个线程可以共享进程的内存空间，因此要实现多个线程间的通信相对简单，大家能想到的最直接的办法就是设置一个全局变量，多个线程共享这个全局变量即可。但是当多个线程共享同一个变量（我们通常称之为“资源”）的时候，很有可能产生不可控的结果从而导致程序失效甚至崩溃。如果一个资源被多个线程竞争使用，那么我们通常称之为“临界资源”，对“临界资源”的访问需要加上保护，否则资源会处于“混乱”的状态。下面的例子演示了100个线程向同一个银行账户转账（转入1元钱）的场景，在这个例子中，银行账户就是一个临界资源，在没有保护的情况下我们很有可能会得到错误的结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, money</span>):</span></span><br><span class="line">        <span class="comment"># 计算存款后的余额</span></span><br><span class="line">        new_balance = self._balance + money</span><br><span class="line">        <span class="comment"># 模拟受理存款业务需要0.01秒的时间</span></span><br><span class="line">        sleep(<span class="number">0.01</span>)</span><br><span class="line">        <span class="comment"># 修改账户余额</span></span><br><span class="line">        self._balance = new_balance</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account, money</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="comment"># 创建100个存款的线程向同一个账户中存钱</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="comment"># 等所有存款的线程都执行完毕</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行上面的程序，结果让人大跌眼镜，100个线程分别向账户中转入1元钱，结果居然远远小于100元。之所以出现这种情况是因为我们没有对银行账户这个“临界资源”加以保护，多个线程同时向账户中存钱时，会一起执行到<code>new_balance = self._balance + money</code>这行代码，多个线程得到的账户余额都是初始状态下的<code>0</code>，所以都是<code>0</code>上面做了+1的操作，因此得到了错误的结果。在这种情况下，“锁”就可以派上用场了。我们可以通过“锁”来保护“临界资源”，只有获得“锁”的线程才能访问“临界资源”，而其他没有得到“锁”的线程只能被阻塞起来，直到获得“锁”的线程释放了“锁”，其他线程才有机会获得“锁”，进而访问被保护的“临界资源”。下面的代码演示了如何使用“锁”来保护对银行账户的操作，从而获得正确的结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread, Lock</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._balance = <span class="number">0</span></span><br><span class="line">        self._lock = Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deposit</span>(<span class="params">self, money</span>):</span></span><br><span class="line">        <span class="comment"># 先获取锁才能执行后续的代码</span></span><br><span class="line">        self._lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            new_balance = self._balance + money</span><br><span class="line">            sleep(<span class="number">0.01</span>)</span><br><span class="line">            self._balance = new_balance</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 在finally中执行释放锁的操作保证正常异常锁都能释放</span></span><br><span class="line">            self._lock.release()</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">balance</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self._balance</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AddMoneyThread</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, account, money</span>):</span></span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line">        self._account = account</span><br><span class="line">        self._money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._account.deposit(self._money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    account = Account()</span><br><span class="line">    threads = []</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        t = AddMoneyThread(account, <span class="number">1</span>)</span><br><span class="line">        threads.append(t)</span><br><span class="line">        t.start()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> threads:</span><br><span class="line">        t.join()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'账户余额为: ￥%d元'</span> % account.balance)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>比较遗憾的一件事情是Python的多线程并不能发挥CPU的多核特性，这一点只要启动几个执行死循环的线程就可以得到证实了。之所以如此，是因为Python的解释器有一个“全局解释器锁”（GIL）的东西，任何线程执行前必须先获得GIL锁，然后每执行100条字节码，解释器就自动释放GIL锁，让别的线程有机会执行，这是一个历史遗留问题，但是即便如此，就如我们之前举的例子，使用多线程在提升执行效率和改善用户体验方面仍然是有积极意义的。</p><h2 id="多进程还是多线程"><a href="#多进程还是多线程" class="headerlink" title="多进程还是多线程"></a>多进程还是多线程</h2><p>无论是多进程还是多线程，只要数量一多，效率肯定上不去，为什么呢？我们打个比方，假设你不幸正在准备中考，每天晚上需要做语文、数学、英语、物理、化学这5科的作业，每项作业耗时1小时。如果你先花1小时做语文作业，做完了，再花1小时做数学作业，这样，依次全部做完，一共花5小时，这种方式称为单任务模型。如果你打算切换到多任务模型，可以先做1分钟语文，再切换到数学作业，做1分钟，再切换到英语，以此类推，只要切换速度足够快，这种方式就和单核CPU执行多任务是一样的了，以旁观者的角度来看，你就正在同时写5科作业。</p><p>但是，切换作业是有代价的，比如从语文切到数学，要先收拾桌子上的语文书本、钢笔（这叫保存现场），然后，打开数学课本、找出圆规直尺（这叫准备新环境），才能开始做数学作业。操作系统在切换进程或者线程时也是一样的，它需要先保存当前执行的现场环境（CPU寄存器状态、内存页等），然后，把新任务的执行环境准备好（恢复上次的寄存器状态，切换内存页等），才能开始执行。这个切换过程虽然很快，但是也需要耗费时间。如果有几千个任务同时进行，操作系统可能就主要忙着切换任务，根本没有多少时间去执行任务了，这种情况最常见的就是硬盘狂响，点窗口无反应，系统处于假死状态。所以，多任务一旦多到一个限度，反而会使得系统性能急剧下降，最终导致所有任务都做不好。</p><p>是否采用多任务的第二个考虑是任务的类型，可以把任务分为计算密集型和I/O密集型。计算密集型任务的特点是要进行大量的计算，消耗CPU资源，比如对视频进行编码解码或者格式转换等等，这种任务全靠CPU的运算能力，虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低。计算密集型任务由于主要消耗CPU资源，这类任务用Python这样的脚本语言去执行效率通常很低，最能胜任这类任务的是C语言，我们之前提到过Python中有嵌入C/C++代码的机制。</p><p>除了计算密集型任务，其他的涉及到网络、存储介质I/O的任务都可以视为I/O密集型任务，这类任务的特点是CPU消耗很少，任务的大部分时间都在等待I/O操作完成（因为I/O的速度远远低于CPU和内存的速度）。对于I/O密集型任务，如果启动多任务，就可以减少I/O等待时间从而让CPU高效率的运转。有一大类的任务都属于I/O密集型任务，这其中包括了我们很快会涉及到的网络应用和Web应用。</p><blockquote><p><strong>说明：</strong> 上面的内容和例子来自于<a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000">廖雪峰官方网站的《Python教程》</a>，因为对作者文中的某些观点持有不同的看法，对原文的文字描述做了适当的调整。</p></blockquote><h2 id="单线程-异步I-O"><a href="#单线程-异步I-O" class="headerlink" title="单线程+异步I/O"></a>单线程+异步I/O</h2><p>现代操作系统对I/O操作的改进中最为重要的就是支持异步I/O。如果充分利用操作系统提供的异步I/O支持，就可以用单进程单线程模型来执行多任务，这种全新的模型称为事件驱动模型。Nginx就是支持异步I/O的Web服务器，它在单核CPU上采用单进程模型就可以高效地支持多任务。在多核CPU上，可以运行多个进程（数量与CPU核心数相同），充分利用多核CPU。用Node.js开发的服务器端程序也使用了这种工作模式，这也是当下并发编程的一种流行方案。</p><p>在Python语言中，单线程+异步I/O的编程模型称为协程，有了协程的支持，就可以基于事件驱动编写高效的多任务程序。协程最大的优势就是极高的执行效率，因为子程序切换不是线程切换，而是由程序自身控制，因此，没有线程切换的开销。协程的第二个优势就是不需要多线程的锁机制，因为只有一个线程，也不存在同时写变量冲突，在协程中控制共享资源不用加锁，只需要判断状态就好了，所以执行效率比多线程高很多。如果想要充分利用CPU的多核特性，最简单的方法是多进程+协程，既充分利用多核，又充分发挥协程的高效率，可获得极高的性能。关于这方面的内容，在后续的课程中会进行讲解。</p><h2 id="应用案例"><a href="#应用案例" class="headerlink" title="应用案例"></a>应用案例</h2><h2 id="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"><a href="#例子1：将耗时间的任务放到线程中以获得更好的用户体验。" class="headerlink" title="例子1：将耗时间的任务放到线程中以获得更好的用户体验。"></a>例子1：将耗时间的任务放到线程中以获得更好的用户体验。</h2><p>如下所示的界面中，有“下载”和“关于”两个按钮，用休眠的方式模拟点击“下载”按钮会联网下载文件需要耗费10秒的时间，如果不使用“多线程”，我们会发现，当点击“下载”按钮后整个程序的其他部分都被这个耗时间的任务阻塞而无法执行了，这显然是非常糟糕的用户体验，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">    <span class="comment"># 模拟下载任务需要花费10秒钟时间</span></span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'下载完成!'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_about</span>():</span></span><br><span class="line">    tkinter.messagebox.showinfo(<span class="string">'关于'</span>, <span class="string">'作者: 骆昊(v1.0)'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200x150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'下载'</span>, command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'关于'</span>, command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>如果使用多线程将耗时间的任务放到一个独立的线程中执行，这样就不会因为执行耗时间的任务而阻塞了主线程，修改后的代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tkinter</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Thread</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadTaskHandler</span>(<span class="params">Thread</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">run</span>(<span class="params">self</span>):</span></span><br><span class="line">            time.sleep(<span class="number">10</span>)</span><br><span class="line">            tkinter.messagebox.showinfo(<span class="string">'提示'</span>, <span class="string">'下载完成!'</span>)</span><br><span class="line">            <span class="comment"># 启用下载按钮</span></span><br><span class="line">            button1.config(state=tkinter.NORMAL)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">download</span>():</span></span><br><span class="line">        <span class="comment"># 禁用下载按钮</span></span><br><span class="line">        button1.config(state=tkinter.DISABLED)</span><br><span class="line">        <span class="comment"># 通过daemon参数将线程设置为守护线程(主程序退出就不再保留执行)</span></span><br><span class="line">        <span class="comment"># 在线程中处理耗时间的下载任务</span></span><br><span class="line">        DownloadTaskHandler(daemon=<span class="literal">True</span>).start()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show_about</span>():</span></span><br><span class="line">        tkinter.messagebox.showinfo(<span class="string">'关于'</span>, <span class="string">'作者: 骆昊(v1.0)'</span>)</span><br><span class="line"></span><br><span class="line">    top = tkinter.Tk()</span><br><span class="line">    top.title(<span class="string">'单线程'</span>)</span><br><span class="line">    top.geometry(<span class="string">'200x150'</span>)</span><br><span class="line">    top.wm_attributes(<span class="string">'-topmost'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    panel = tkinter.Frame(top)</span><br><span class="line">    button1 = tkinter.Button(panel, text=<span class="string">'下载'</span>, command=download)</span><br><span class="line">    button1.pack(side=<span class="string">'left'</span>)</span><br><span class="line">    button2 = tkinter.Button(panel, text=<span class="string">'关于'</span>, command=show_about)</span><br><span class="line">    button2.pack(side=<span class="string">'right'</span>)</span><br><span class="line">    panel.pack(side=<span class="string">'bottom'</span>)</span><br><span class="line"></span><br><span class="line">    tkinter.mainloop()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><h2 id="例子2：使用多进程对复杂任务进行“分而治之”。"><a href="#例子2：使用多进程对复杂任务进行“分而治之”。" class="headerlink" title="例子2：使用多进程对复杂任务进行“分而治之”。"></a>例子2：使用多进程对复杂任务进行“分而治之”。</h2><p>我们来完成1~100000000求和的计算密集型任务，这个问题本身非常简单，有点循环的知识就能解决，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> number_list:</span><br><span class="line">        total += number</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Execution time: %.3fs'</span> % (end - start))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>在上面的代码中，我故意先去创建了一个列表容器然后填入了100000000个数，这一步其实是比较耗时间的，所以为了公平起见，当我们将这个任务分解到8个进程中去执行的时候，我们暂时也不考虑列表切片操作花费的时间，只是把做运算和合并运算结果的时间统计出来，代码如下所示。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process, Queue</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> randint</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task_handler</span>(<span class="params">curr_list, result_queue</span>):</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> curr_list:</span><br><span class="line">        total += number</span><br><span class="line">    result_queue.put(total)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    processes = []</span><br><span class="line">    number_list = [x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">100000001</span>)]</span><br><span class="line">    result_queue = Queue()</span><br><span class="line">    index = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 启动8个进程将数据切片后进行运算</span></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        p = Process(target=task_handler,</span><br><span class="line">                    args=(number_list[index:index + <span class="number">12500000</span>], result_queue))</span><br><span class="line">        index += <span class="number">12500000</span></span><br><span class="line">        processes.append(p)</span><br><span class="line">        p.start()</span><br><span class="line">    <span class="comment"># 开始记录所有进程执行完成花费的时间</span></span><br><span class="line">    start = time()</span><br><span class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> processes:</span><br><span class="line">        p.join()</span><br><span class="line">    <span class="comment"># 合并执行结果</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> result_queue.empty():</span><br><span class="line">        total += result_queue.get()</span><br><span class="line">    <span class="built_in">print</span>(total)</span><br><span class="line">    end = time()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Execution time: '</span>, (end - start), <span class="string">'s'</span>, sep=<span class="string">''</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>比较两段代码的执行结果（在我目前使用的MacBook上，上面的代码需要大概6秒左右的时间，而下面的代码只需要不到1秒的时间，再强调一次我们只是比较了运算的时间，不考虑列表创建及切片操作花费的时间），使用多进程后由于获得了更多的CPU执行时间以及更好的利用了CPU的多核特性，明显的减少了程序的执行时间，而且计算量越大效果越明显。当然，如果愿意还可以将多个进程部署在不同的计算机上，做成分布式进程，具体的做法就是通过<code>multiprocessing.managers</code>模块中提供的管理器将<code>Queue</code>对象通过网络共享出来（注册到网络上让其他计算机可以访问），这部分内容也留到爬虫的专题再进行讲解。</p><h1 id="处理Excel电子表格"><a href="#处理Excel电子表格" class="headerlink" title="处理Excel电子表格"></a>处理Excel电子表格</h1><p>Python的openpyxl模块让我们可以在Python程序中读取和修改Excel电子表格，由于微软从Office 2007开始使用了新的文件格式，这使得Office Excel和LibreOffice Calc、OpenOffice Calc是完全兼容的，这就意味着openpyxl模块也能处理来自这些软件生成的电子表格。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> Workbook</span><br><span class="line"></span><br><span class="line">wb = Workbook()</span><br><span class="line">ws = wb.active</span><br><span class="line"></span><br><span class="line">ws[<span class="string">'A1'</span>] = <span class="number">42</span></span><br><span class="line">ws.append([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">ws[<span class="string">'A2'</span>] = datetime.datetime.now()</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">"sample.xlsx"</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="处理Word文档"><a href="#处理Word文档" class="headerlink" title="处理Word文档"></a>处理Word文档</h1><p>利用python-docx模块，Python可以创建和修改Word文档，当然这里的Word文档不仅仅是指通过微软的Office软件创建的扩展名为docx的文档，LibreOffice Writer和OpenOffice Writer都是免费的字处理软件。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> docx <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> docx.shared <span class="keyword">import</span> Inches</span><br><span class="line"></span><br><span class="line">document = Document()</span><br><span class="line"></span><br><span class="line">document.add_heading(<span class="string">'Document Title'</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">p = document.add_paragraph(<span class="string">'A plain paragraph having some '</span>)</span><br><span class="line">p.add_run(<span class="string">'bold'</span>).bold = <span class="literal">True</span></span><br><span class="line">p.add_run(<span class="string">' and some '</span>)</span><br><span class="line">p.add_run(<span class="string">'italic.'</span>).italic = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">document.add_heading(<span class="string">'Heading, level 1'</span>, level=<span class="number">1</span>)</span><br><span class="line">document.add_paragraph(<span class="string">'Intense quote'</span>, style=<span class="string">'Intense Quote'</span>)</span><br><span class="line"></span><br><span class="line">document.add_paragraph(</span><br><span class="line">    <span class="string">'first item in unordered list'</span>, style=<span class="string">'List Bullet'</span></span><br><span class="line">)</span><br><span class="line">document.add_paragraph(</span><br><span class="line">    <span class="string">'first item in ordered list'</span>, style=<span class="string">'List Number'</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">document.add_picture(<span class="string">'monty-truth.png'</span>, width=Inches(<span class="number">1.25</span>))</span><br><span class="line"></span><br><span class="line">records = (</span><br><span class="line">    (<span class="number">3</span>, <span class="string">'101'</span>, <span class="string">'Spam'</span>),</span><br><span class="line">    (<span class="number">7</span>, <span class="string">'422'</span>, <span class="string">'Eggs'</span>),</span><br><span class="line">    (<span class="number">4</span>, <span class="string">'631'</span>, <span class="string">'Spam, spam, eggs, and spam'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">table = document.add_table(rows=<span class="number">1</span>, cols=<span class="number">3</span>)</span><br><span class="line">hdr_cells = table.rows[<span class="number">0</span>].cells</span><br><span class="line">hdr_cells[<span class="number">0</span>].text = <span class="string">'Qty'</span></span><br><span class="line">hdr_cells[<span class="number">1</span>].text = <span class="string">'Id'</span></span><br><span class="line">hdr_cells[<span class="number">2</span>].text = <span class="string">'Desc'</span></span><br><span class="line"><span class="keyword">for</span> qty, <span class="built_in">id</span>, desc <span class="keyword">in</span> records:</span><br><span class="line">    row_cells = table.add_row().cells</span><br><span class="line">    row_cells[<span class="number">0</span>].text = <span class="built_in">str</span>(qty)</span><br><span class="line">    row_cells[<span class="number">1</span>].text = <span class="built_in">id</span></span><br><span class="line">    row_cells[<span class="number">2</span>].text = desc</span><br><span class="line"></span><br><span class="line">document.add_page_break()</span><br><span class="line"></span><br><span class="line">document.save(<span class="string">'demo.docx'</span>)</span><br></pre></td></tr></tbody></table></figure><h1 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回当前时间的时间戳</span></span><br><span class="line">time.time()</span><br><span class="line"></span><br><span class="line">time.loaltime() <span class="comment">#本地时间  Sat Apr 16 22:34:40 2022</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#格式化时间</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>, time.localtime()))</span><br></pre></td></tr></tbody></table></figure><h1 id="命令行模块-click"><a href="#命令行模块-click" class="headerlink" title="命令行模块 click"></a>命令行模块 click</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> click </span><br><span class="line"><span class="comment"># 装饰器@click.command()会将函数包装成 click 对象</span></span><br><span class="line"><span class="meta">@click.command() </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    click.echo(<span class="string">"hello click"</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;re正则模块&quot;&gt;&lt;a href=&quot;#re正则模块&quot; class=&quot;headerlink&quot; title=&quot;re正则模块&quot;&gt;&lt;/a&gt;re正则模块&lt;/h1&gt;&lt;p&gt;Python提供了re模块来支持正则表达式相关操作&lt;br&gt;&lt;a href=&quot;https://deerchao</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="python" scheme="https://wenkexia.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python-图像处理</title>
    <link href="https://wenkexia.github.io/2022/032217173.html"/>
    <id>https://wenkexia.github.io/2022/032217173.html</id>
    <published>2022-03-22T14:44:39.000Z</published>
    <updated>2022-03-22T14:44:39.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机图像相关知识"><a href="#计算机图像相关知识" class="headerlink" title="计算机图像相关知识"></a>计算机图像相关知识</h1><p>我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决定了透过这个图像的像素，也就是透明度）。</p><table><thead><tr><th align="center">名称</th><th align="center">RGBA值</th><th align="center">名称</th><th align="center">RGBA值</th></tr></thead><tbody><tr><td align="center">White</td><td align="center">(255, 255, 255, 255)</td><td align="center">Red</td><td align="center">(255, 0, 0, 255)</td></tr><tr><td align="center">Green</td><td align="center">(0, 255, 0, 255)</td><td align="center">Blue</td><td align="center">(0, 0, 255, 255)</td></tr><tr><td align="center">Gray</td><td align="center">(128, 128, 128, 255)</td><td align="center">Yellow</td><td align="center">(255, 255, 0, 255)</td></tr><tr><td align="center">Black</td><td align="center">(0, 0, 0, 255)</td><td align="center">Purple</td><td align="center">(128, 0, 128, 255)</td></tr></tbody></table><ol start="2"><li>像素。对于一个由数字序列表示的图像来说，最小的单位就是图像上单一颜色的小方格，这些小方块都有一个明确的位置和被分配的色彩数值，而这些一小方格的颜色和位置决定了该图像最终呈现出来的样子，它们是不可分割的单位，我们通常称之为像素（pixel）。每一个图像都包含了一定量的像素，这些像素决定图像在屏幕上所呈现的大小。</li></ol><h1 id="PIL，cv2，plt的使用与区别"><a href="#PIL，cv2，plt的使用与区别" class="headerlink" title="PIL，cv2，plt的使用与区别"></a>PIL，cv2，plt的使用与区别</h1><ol><li>建议使用opencv的库来进行图像处理的基本操作，数据格式为numpy，可以直接进行numpy的处理；</li><li>进行折线图这类图绘制的时候，一般使用matplotlib库。</li><li>Opencv默认为 BGR顺序，而其他软件（PIL、scopy.misc）一般使用RGB。</li></ol><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 比较三者的打开图片、显示图片、打开图片的类型</span></span><br><span class="line"><span class="comment"># ************PIL************</span></span><br><span class="line">PIL_img = Image.<span class="built_in">open</span>(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(PIL_img))  <span class="comment"># &lt;class 'PIL.JpegImagePlugin.JpegImageFile'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(PIL_img.size)   <span class="comment"># (1152, 720) (w,h)</span></span><br><span class="line"><span class="built_in">print</span>(np.array(PIL_img).shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">PIL_img.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ************cv2************</span></span><br><span class="line">cv2_img = cv2.imread(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(cv2_img))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(cv2_img.shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">cv2.imshow(<span class="string">'cv2'</span>, cv2_img)</span><br><span class="line"><span class="comment"># cv2.waitKey()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ************plt***********</span></span><br><span class="line">plt_img = plt.imread(<span class="string">'D:/images/Rimi.jpg'</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(plt_img))  <span class="comment"># &lt;class 'numpy.ndarray'&gt;</span></span><br><span class="line"><span class="built_in">print</span>(plt_img.shape)  <span class="comment"># (720, 1152, 3) (h,w,c)</span></span><br><span class="line">plt.imshow(plt_img)  <span class="comment"># PIL_img也可以显示</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h1><p>OpenCV中已经包含如下应用领域功能：二维和三维特征工具箱、运动估算、人脸识别系统、姿势识别、人机交互、移动机器人、运动理解、对象鉴别、分割与识别、立体视觉、运动跟踪、增强现实（AR技术）。基于上述功能实现需要，OpenCV中还包括以下基于统计学机器学习库：Boosting算法、Decision Tree(决策树)学习、Gradient Boosting算法、EM算法(期望最大化)、KNN算法、朴素贝叶斯分类、人工神经网络、随机森林、支掌向量机。</p><p>cv2默认为 BGR顺序，而其他（PIL、scopy.misc）一般使用RGB</p><p>导入的时候采用 import cv2。</p><h2 id="基本库函数"><a href="#基本库函数" class="headerlink" title="基本库函数"></a>基本库函数</h2><p>cv2.imread(filepath,flags) #读入一张图像</p><p>filepath：要读入图片的完整路径<br>flags：读入图片的标志<br>cv2.IMREAD_COLOR：默认参数，读入一副彩色图片，忽略alpha通道<br>cv2.IMREAD_GRAYSCALE：读入灰度图片<br>cv2.IMREAD_UNCHANGED：顾名思义，读入完整图片，包括alpha通道</p><p>cv2.imshow(wname,img) #显示图像</p><p>第一个参数是显示图像的窗口的名字<br>第二个参数是要显示的图像（imread读入的图像），窗口大小自动调整为图片大小<br>cv2.imshow(‘image’,img) cv2.waitKey(0) #等待键盘输入，单位为毫秒，即等待指定的毫秒数看是否有键盘输入，若在等待时间内按下任意键则返回按键的ASCII码，程序继续运行。 #若没有按下任何键，超时后返回-1。参数为0表示无限等待。不调用waitKey的话，窗口会一闪而逝，看不到显示的图片。 cv2.destroyAllWindow() #销毁所有窗口 cv2.destroyWindow(wname) #销毁指定窗口</p><p>cv2.imwrite(file，img，num) #保存一张图像</p><p>第一个参数是要保存的文件名<br>第二个参数是要保存的图像。可选的第三个参数，它针对特定的格式：对于JPEG，其表示的是图像的质量，用0 - 100的整数表示，默认95。<br>第三个参数表示的是压缩级别。默认为3.<br>img.copy() #图像复制</p><p>cv2.cvtColor() #图像颜色空间转换</p><p>img2 = cv2.cvtColor(img,cv2.COLOR_RGB2GRAY) #灰度化：彩色图像转为灰度图像<br>img3 = cv2.cvtColor(img,cv2.COLOR_GRAY2RGB) #彩色化：灰度图像转为彩色图像</p><h3 id="cv2-COLOR-X2Y，其中X-Y-RGB-BGR-GRAY-HSV-YCrCb-XYZ-Lab-Luv-HLS"><a href="#cv2-COLOR-X2Y，其中X-Y-RGB-BGR-GRAY-HSV-YCrCb-XYZ-Lab-Luv-HLS" class="headerlink" title="cv2.COLOR_X2Y，其中X,Y = RGB, BGR, GRAY, HSV, YCrCb, XYZ, Lab, Luv, HLS"></a>cv2.COLOR_X2Y，其中X,Y = RGB, BGR, GRAY, HSV, YCrCb, XYZ, Lab, Luv, HLS</h3><p>cv2.resize(image, image2,dsize) #图像缩放：(输入原始图像，输出新图像，图像的大小)<br>cv2.flip(img,flipcode) #图像翻转，flipcode控制翻转效果。</p><p>flipcode = 0：沿x轴翻转；flipcode &gt; 0：沿y轴翻转；flipcode &lt; 0：x,y轴同时翻转<br>cv2.warpAffine(img, M, (400, 600)) #图像仿射变换 ：平移；裁剪、剪切、旋转、仿射变换，<br>M、M_crop、M_shear、M_rotate</p><p>cv2.putText(img,’text’,(50,150) #图像添加文字：(照片，添加的文字，左上角坐标，字体，字体大小，颜色，字体粗细)</p><p>cv2.putText(image, caption, (b[0], b[1] - 10), cv2.FONT_HERSHEY_PLAIN, 1, (255, 0, 0), 1) cv2.putText(I,’there 0 error(s):’,(50,150),cv2.FONT_HERSHEY_COMPLEX,6,(0,0,255),25)</p><p>cv2.rectangle(img, (x,y), (x+w,y+h), (0,255,0), 2) #画出矩行：img原图、(x，y)是矩阵的左上点坐标、(x+w，y+h)是矩阵的右下点坐标、(0,255,0)是画线对应的rgb颜色、2是所画的线的宽度。</p><p>cv2.boundingRect(img) #返回图像的四值属性：img是一个二值图，即是它的参数； 返回四个值，分别是x，y，w，h； x，y是矩阵左上点的坐标，w，h是矩阵的宽和高。</p><h1 id="PIL库"><a href="#PIL库" class="headerlink" title="PIL库"></a>PIL库</h1><p>PIL（Python Imaging Library）是Python常用的图像处理库，而Pillow是PIL的一个友好Fork，提供了了广泛的文件格式支持，强大的图像处理能力，主要包括图像储存、图像显示、格式转换以及基本的图像处理操作等。相比opencv更为轻巧。Image模块是在Python PIL图像处理中常见的模块，对图像进行基础操作的功能基本都包含于此模块内。如open、save、show等功能。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>#安装pillow<br>pip install pillow</p><p>from PIL import Image<br>Image 是 PIL 库中代表一个图像的类（对象）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 1. 剪裁图像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">rect = <span class="number">80</span>, <span class="number">20</span>, <span class="number">310</span>, <span class="number">360</span></span><br><span class="line">image.crop(rect).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成缩略图</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">size = <span class="number">128</span>, <span class="number">128</span></span><br><span class="line">image.thumbnail(size)</span><br><span class="line">image.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 缩放和黏贴图像</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">image1 = Image.<span class="built_in">open</span>(<span class="string">'./res/luohao.png'</span>)</span><br><span class="line">image2 = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">rect = <span class="number">80</span>, <span class="number">20</span>, <span class="number">310</span>, <span class="number">360</span></span><br><span class="line">guido_head = image2.crop(rect)</span><br><span class="line">width, height = guido_head.size</span><br><span class="line">image1.paste(guido_head.resize((<span class="built_in">int</span>(width / <span class="number">1.5</span>), <span class="built_in">int</span>(height / <span class="number">1.5</span>))), (<span class="number">172</span>, <span class="number">40</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 旋转和翻转</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.png'</span>)</span><br><span class="line">     image.rotate(<span class="number">180</span>).show()</span><br><span class="line">     image.transpose(Image.FLIP_LEFT_RIGHT).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 操作像素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">     <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">80</span>, <span class="number">310</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>, <span class="number">360</span>):</span><br><span class="line">          image.putpixel((x, y), (<span class="number">128</span>, <span class="number">128</span>, <span class="number">128</span>))</span><br><span class="line"></span><br><span class="line">     image.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 滤镜效果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageFilter</span><br><span class="line"></span><br><span class="line">image = Image.<span class="built_in">open</span>(<span class="string">'./res/guido.jpg'</span>)</span><br><span class="line">image.<span class="built_in">filter</span>(ImageFilter.CONTOUR).show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="Matplotlib库"><a href="#Matplotlib库" class="headerlink" title="Matplotlib库"></a>Matplotlib库</h1><p>Matplotlib是一个Python 2D绘图库，它可以在不同的平台上以各种硬拷贝格式和交互环境生成发布质量数据。Matplotlib可以用于Python脚本、Python和IPython shell、Jupyter notebook、web应用服务器和四个图形用户界面工具包。对于简单的绘图，pyplot模块提供了一个类似于matlab的接口，特别是与IPython结合使用时。对于power用户，您可以通过面向对象的界面或通过MATLAB用户熟悉的一组函数来完全控制线样式、字体属性、轴属性等.</p><p>matplotlib.pylot是绘制各类可视化图形的命令字库</p><p>更多学习，可参考Matplotlib中文网：<a href="https://www.matplotlib.org.cn/">https://www.matplotlib.org.cn</a></p><p>#安装<br>pip install matplotlib<br>#导库<br>import matplotlib.pyplot as plt</p><h2 id="pyplot模块方法"><a href="#pyplot模块方法" class="headerlink" title="pyplot模块方法"></a>pyplot模块方法</h2><p>1.plt.imread(fname， format=None)<br>将图像从文件读取到数组中。返回一个numpy.array<br>  fname:<br>    要读取的图像文件：文件名、URL 或以读取二进制模式打开的类似文件的对象。<br>    不推荐传递 URL。请打开URL进行阅读并将结果传递给Pillow<br>  format:<br>    用于读取数据而假定的图像文件格式。如果格式设置为”png”，如果 fname 是扩展名为”.png”的路径或打开的文件，或者如果它是 URL，则图像将作为 PNG 文件加载。在所有其他情况下，格式将被忽略，PIL 会自动检测格式</p><p>2.plt.imshow(numpy.array)<br>将数据显示为图像<br>3.plt.show()<br>显示所有打开的图表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算机图像相关知识&quot;&gt;&lt;a href=&quot;#计算机图像相关知识&quot; class=&quot;headerlink&quot; title=&quot;计算机图像相关知识&quot;&gt;&lt;/a&gt;计算机图像相关知识&lt;/h1&gt;&lt;p&gt;我们通常会将一个颜色表示为一个RGB值或RGBA值（其中的A表示Alpha通道，它决</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="图像" scheme="https://wenkexia.github.io/tags/%E5%9B%BE%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>python-pandas</title>
    <link href="https://wenkexia.github.io/2022/03226351.html"/>
    <id>https://wenkexia.github.io/2022/03226351.html</id>
    <published>2022-03-22T13:29:33.000Z</published>
    <updated>2022-03-22T13:29:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>pandas是python第三方库，提供高性能易用数据类型和分析工具。</p><p>pandas基于numpy实现，常与numpy和matplotlib一同使用</p><p>更多学习，请参考pandas中文网：<a href="https://www.pypandas.cn/">https://www.pypandas.cn/</a></p><h1 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h1><p>Series是一种类似于一维数组的对象，它由一维数组（各种numpy数据类型）以及一组与之相关的数据标签（即索引）组成.</p><p>可理解为带标签的一维数组，可存储整数、浮点数、字符串、Python 对象等类型的数据。</p><p>Seris中可以使用index设置索引列表。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#与字典不同的是：Series允许索引重复</span></span><br><span class="line">s = pd.Series([<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>,<span class="string">'e'</span>],index=[<span class="number">100</span>,<span class="number">200</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#Series 可以用字典实例化</span></span><br><span class="line">d = {<span class="string">'b'</span>: <span class="number">1</span>, <span class="string">'a'</span>: <span class="number">0</span>, <span class="string">'c'</span>: <span class="number">2</span>}</span><br><span class="line">pd.Series(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过Series的values和index属性获取其数组表示形式和索引对象</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(s.values)</span><br><span class="line"><span class="built_in">print</span>(s.index)</span><br></pre></td></tr></tbody></table></figure><h1 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>DataFrame是一个表格型的数据结构，类似于Excel或sql表</p><p>它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔值等）<br>DataFrame可以进行行索引和列索引，它可以被看做由Series组成的字典（共用同一个索引）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用多维数组字典、列表字典生成 DataFrame</span></span><br><span class="line">data = {<span class="string">'state'</span>: [<span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>, <span class="string">'Ohio'</span>, <span class="string">'Nevada'</span>, <span class="string">'Nevada'</span>], <span class="string">'year'</span>: [<span class="number">2000</span>, <span class="number">2001</span>, <span class="number">2002</span>, <span class="number">2001</span>, <span class="number">2002</span>], <span class="string">'pop'</span>: [<span class="number">1.5</span>, <span class="number">1.7</span>, <span class="number">3.6</span>, <span class="number">2.4</span>, <span class="number">2.9</span>]}</span><br><span class="line">frame = pd.DataFrame(data) </span><br><span class="line"><span class="built_in">print</span>(frame)</span><br><span class="line"></span><br><span class="line">frame2 = pd.DataFrame(data, columns=[<span class="string">'year'</span>, <span class="string">'state'</span>, <span class="string">'pop'</span>, <span class="string">'debt'</span>], index=[<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>, <span class="string">'four'</span>, <span class="string">'five'</span>])</span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#列可以通过赋值的方式进行修改,例如，给那个空的“delt”列赋上一个标量值或一组值</span></span><br><span class="line">frame2[<span class="string">'debt'</span>] = <span class="number">16.5</span></span><br><span class="line"><span class="built_in">print</span>(frame2)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;pandas是python第三方库，提供高性能易用数据类型和分析工具。&lt;/p&gt;
&lt;p&gt;pandas基于numpy实现，常与numpy和matplotlib一同使用&lt;/p&gt;
&lt;p&gt;更多学习，请参考pandas中文网：&lt;a href=&quot;https://www.pypandas.</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="pandas" scheme="https://wenkexia.github.io/tags/pandas/"/>
    
  </entry>
  
  <entry>
    <title>python-NumPy</title>
    <link href="https://wenkexia.github.io/2022/032261592.html"/>
    <id>https://wenkexia.github.io/2022/032261592.html</id>
    <published>2022-03-22T06:42:45.000Z</published>
    <updated>2022-03-22T06:42:45.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数学矩阵知识"><a href="#数学矩阵知识" class="headerlink" title="数学矩阵知识"></a>数学矩阵知识</h1><p><a href="https://paul.pub/the-matrix/#id-%E6%A0%87%E9%87%8F%E5%90%91%E9%87%8F%E7%9F%A9%E9%98%B5%E5%92%8C%E5%BC%A0%E9%87%8F">https://paul.pub/the-matrix/#id-%E6%A0%87%E9%87%8F%E5%90%91%E9%87%8F%E7%9F%A9%E9%98%B5%E5%92%8C%E5%BC%A0%E9%87%8F</a></p><h2 id="矩阵算术"><a href="#矩阵算术" class="headerlink" title="矩阵算术"></a>矩阵算术</h2><h3 id="加减法"><a href="#加减法" class="headerlink" title="加减法"></a>加减法</h3><p>矩阵的加减法只在两个矩阵具有相同大小时才有意义。</p><p>两个矩阵的加（减）法通过对应元素相加（减）得到</p><h3 id="标量乘法"><a href="#标量乘法" class="headerlink" title="标量乘法"></a>标量乘法</h3><p>设A为一矩阵，b为一标量，则bA为将A中的每一个元素乘以b而构成的一个矩阵</p><h3 id="转置"><a href="#转置" class="headerlink" title="转置"></a>转置</h3><p>矩阵的转置是以对角线为轴的镜像。</p><p>这条从左上角到右下角的对角线被称之为主对角线</p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>第一个矩阵的列要等于第二个矩阵的行，则两矩阵可以相乘。<br>一个m∗n的的A矩阵，和一个n∗p的B矩阵相乘，将得到一个m∗p的矩阵C</p><h2 id="逆"><a href="#逆" class="headerlink" title="逆"></a>逆</h2><p>逆(Inverse)<br>设A为n阶方阵，如果存在一个n阶方阵B，使得<br>AB=BA=In<br>AB=BA=In</p><p>则称A为可逆矩阵，B为A的逆阵，记作 B=A−1B=A−1<br>(A−1)−1=A(A−1)−1=A<br>(kA)−1=1kA−1(k≠0)(kA)−1=1kA−1(k≠0)<br>A、B均是同阶可逆矩阵，则(AB)−1=B−1A−1A、B均是同阶可逆矩阵，则(AB)−1=B−1A−1<br>(A−1)T=(AT)−1(A−1)T=(AT)−1</p><h3 id="求逆矩阵一般有三种方法。"><a href="#求逆矩阵一般有三种方法。" class="headerlink" title="求逆矩阵一般有三种方法。"></a>求逆矩阵一般有三种方法。</h3><p>1、方阵的逆矩阵等于方阵的伴随矩阵与方阵对应的行列式的值的倒数的积；</p><p>即A^-1=A*/(|A|).</p><p>只有当|A|≠0时，方阵A才可逆。</p><p>这种方法并不简便。</p><p>2、利用初等变换求逆矩阵；</p><p>一般是将矩阵(A,E)化为(E,A^-1)的形式；从而得到A逆矩阵；</p><h1 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h1><p>为了创建一个2D（二维）数组，我们传递一个列表的列表（或者是一个序列的序列）给array()函数。如果我们想要一个3D（三维）数组，我们就要传递一个列表的列表的列表，如果是一个4D（四维）数组，那就是列表的列表的列表的列表，以此类推。</p><h2 id="多维数组切片"><a href="#多维数组切片" class="headerlink" title="多维数组切片"></a>多维数组切片</h2><p>通过对每个以逗号分隔的维度执行单独的切片，你可以对多维数组进行切片。因此，对于2D数组，我们的第一片定义了行的切片，第二片定义了列的切片。</p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>np.zeros():可以创建指定长度或者形状的全0数组</p><p>ones():可以创建指定长度或者形状的全1数组</p><p>empty():创建一个数组，其初始内容是随机的,取决于内存的状态</p><p>为了创建数字组成的数组，NumPy提供了一个类似于range的函数，该函数返回数组而不是列表。<br>array = np.arange( 10, 31,5 )   -&gt;array([10, 15, 20, 25, 30])</p><h2 id="数组属性"><a href="#数组属性" class="headerlink" title="数组属性"></a>数组属性</h2><p>array = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])</p><p>#数组维度<br>print(array.ndim)</p><p>#数组形状<br>print(array.shape)</p><p>#数组元素个数<br>print(array.size)</p><p>#数组元素类型<br>print(array.dtype)</p><h2 id="数组的计算"><a href="#数组的计算" class="headerlink" title="数组的计算"></a>数组的计算</h2><p>数组很重要，因为它可以使我们不用编写循环即可对数据执行批量运算。这通常叫做矢量化</p><h3 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h3><p>对应位置的数相运算</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">arr1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">arr2 = np.ones([<span class="number">2</span>,<span class="number">3</span>],dtype=np.int64)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 - arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 / arr2)</span><br><span class="line"><span class="built_in">print</span>(arr1 ** <span class="number">2</span>)</span><br></pre></td></tr></tbody></table></figure><p>print(np.dot(arr3,arr4))</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数学矩阵知识&quot;&gt;&lt;a href=&quot;#数学矩阵知识&quot; class=&quot;headerlink&quot; title=&quot;数学矩阵知识&quot;&gt;&lt;/a&gt;数学矩阵知识&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://paul.pub/the-matrix/#id-%E6%A0%87%E9%</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="numpy" scheme="https://wenkexia.github.io/tags/numpy/"/>
    
  </entry>
  
  <entry>
    <title>python-selenium</title>
    <link href="https://wenkexia.github.io/2022/031841897.html"/>
    <id>https://wenkexia.github.io/2022/031841897.html</id>
    <published>2022-03-18T14:31:09.000Z</published>
    <updated>2022-03-18T14:31:09.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定位页面元素"><a href="#定位页面元素" class="headerlink" title="定位页面元素"></a>定位页面元素</h1><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"></span><br><span class="line"><span class="comment">#定位一个元素</span></span><br><span class="line">ele = driver.find_element(By.XPATH,<span class="string">''</span>)</span><br><span class="line"><span class="comment">#表示定位一组元素(元素相同时使用)</span></span><br><span class="line">lis = driver.find_elements(By.XPATH,<span class="string">''</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(lis)&gt;<span class="number">0</span>:</span><br><span class="line">  lis[<span class="number">0</span>].click()</span><br><span class="line"><span class="keyword">else</span>：</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'没有元素'</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="id-定位"><a href="#id-定位" class="headerlink" title="id 定位"></a>id 定位</h2><h2 id="name-定位"><a href="#name-定位" class="headerlink" title="name 定位"></a>name 定位</h2><h2 id="class-定位"><a href="#class-定位" class="headerlink" title="class 定位"></a>class 定位</h2><h2 id="tag-定位"><a href="#tag-定位" class="headerlink" title="tag 定位"></a>tag 定位</h2><h2 id="xpath"><a href="#xpath" class="headerlink" title="xpath"></a>xpath</h2><p>xpath 是一种在 XML 文档中定位元素的语言，它拥有多种定位方式</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span>...<span class="tag">&lt;<span class="name">head</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"csdn-toolbar"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-inside"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container-left"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-container-middle"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-search onlySearch"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"toolbar-search-container"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"toolbar-search-input"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">placeholder</span>=<span class="string">"C++难在哪里？"</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>根据上面的标签需要定位 最后一行 input 标签，以下列出了四种方式，xpath 定位的方式多样并不唯一，使用时根据情况进行解析即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 绝对路径（层级关系）定位  （绝对路径以/开头）</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"/html/body/div/div/div/div[2]/div/div/input[1]"</span>)</span><br><span class="line"><span class="comment"># 利用元素属性定位     （相对路径以//开头）</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='toolbar-search-input']"</span>))</span><br><span class="line"><span class="comment"># 层级+元素属性定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//div[@id='csdn-toolbar']/div/div/div[2]/div/div/input[1]"</span>)</span><br><span class="line"><span class="comment"># 逻辑运算符定位</span></span><br><span class="line">driver.find_element_by_xpath(<span class="string">"//*[@id='toolbar-search-input' and @autocomplete='off']"</span>)</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>1.相对路径+索引<br>先定位要找的元素，再找它唯一的父标签<br>2.相对路径+属性<br>3.相对路径+通配符定位<br>4.相对路径+部分属性值<br>5.相对路径+文本<br>css 定位<br>link 定位<br>partial_link 定位</p><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><h2 id="下拉框的处理"><a href="#下拉框的处理" class="headerlink" title="下拉框的处理"></a>下拉框的处理</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--select标签--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"city"</span> <span class="attr">size</span>=<span class="string">"5"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">tabindex</span>=<span class="string">"1"</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">tabindex</span>=<span class="string">"2"</span> <span class="attr">selected</span>=<span class="string">"selected"</span>&gt;</span>河南<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.select <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line">ele = driver.find_element_by_name(<span class="string">"city"</span>)</span><br><span class="line"><span class="comment">#创建Select类对象</span></span><br><span class="line">sel = Select(ele)</span><br><span class="line">sel.select_by_value(<span class="string">"3"</span>)  </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="select类中的函数列表"><a href="#select类中的函数列表" class="headerlink" title="select类中的函数列表"></a>select类中的函数列表</h3><p>options    返回select元素所有的options<br>all_selected_options    返回select元素中所有已选中的选项<br>first_selected_option    返回select元素中选中的第一个选项<br>select_by_index(index)    通过索引定位，index索引是从“0”开始<br>select_by_value(value)    通过value属性值定位<br>select_by_visible_text(text)t    通过文本值定位，visible_text是在option标签中间的值，即显示在下拉框的值；<br>deselect_all()    取消全部的已选择项<br>deselect_by_index(index)    取消已选中的索引项<br>deselect_by_value(value)    取消已选中的value值<br>deselect_by_visible_text(text)    取消已选中的文本值</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>定位到元素后用.send_keys(r’文件路径’)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_name(<span class="string">"city"</span>).send_keys(<span class="string">r'文件路径'</span>)</span><br></pre></td></tr></tbody></table></figure><h2 id="处理弹窗"><a href="#处理弹窗" class="headerlink" title="处理弹窗"></a>处理弹窗</h2><p>alert(只有确定)，confirm(有确认和取消)，prompt(有确认取消还可以输入值)</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">#alert是一个属性</span></span><br><span class="line"><span class="comment">#创建一个alert对象</span></span><br><span class="line">ale = driver.switch_to.alert</span><br><span class="line"></span><br><span class="line"><span class="comment">#点击确定</span></span><br><span class="line">ale.accept()</span><br><span class="line"><span class="comment">#点击取消</span></span><br><span class="line">ale.dismiss() </span><br><span class="line"><span class="comment">#获得文本</span></span><br><span class="line">ale.text()</span><br><span class="line"><span class="comment">#输入值</span></span><br><span class="line">ale.send_keys()</span><br></pre></td></tr></tbody></table></figure><h1 id="设计模式（封装）"><a href="#设计模式（封装）" class="headerlink" title="设计模式（封装）"></a>设计模式（封装）</h1><p>pom(page object model)页面对象模式</p><p>分三层<br>1.基础层：base 主要放seleni原生的方法<br>2.页面对象层：主要用于放页面的元素和页面的动作<br>3.测试用例层:testcase存放测试用例，测试数据</p><p>页面对象层调用基础层的方法，测试用例层调用页面对象的方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;定位页面元素&quot;&gt;&lt;a href=&quot;#定位页面元素&quot; class=&quot;headerlink&quot; title=&quot;定位页面元素&quot;&gt;&lt;/a&gt;定位页面元素&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td cl</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="web自动化" scheme="https://wenkexia.github.io/tags/web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫学习</title>
    <link href="https://wenkexia.github.io/2022/031717083.html"/>
    <id>https://wenkexia.github.io/2022/031717083.html</id>
    <published>2022-03-16T23:56:59.000Z</published>
    <updated>2022-03-16T23:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络数据采集概述"><a href="#网络数据采集概述" class="headerlink" title="网络数据采集概述"></a>网络数据采集概述</h1><p>爬虫（crawler）也经常被称为网络蜘蛛（spider），是按照一定的规则自动浏览网站并获取所需信息的机器人程序（自动化脚本代码），被广泛的应用于互联网搜索引擎和数据采集。使用过互联网和浏览器的人都知道，网页中除了供用户阅读的文字信息之外，还包含一些超链接，网络爬虫正是通过网页中的超链接信息，不断获得网络上其它页面的地址，然后持续的进行数据采集。正因如此，网络数据采集的过程就像一个爬虫或者蜘蛛在网络上漫游，所以才被形象的称为爬虫或者网络蜘蛛。</p><h2 id="爬虫的应用领域"><a href="#爬虫的应用领域" class="headerlink" title="爬虫的应用领域"></a>爬虫的应用领域</h2><p>爬虫的应用领域其实非常广泛，下面我们列举了其中的一部分</p><ol><li>搜索引擎</li><li>新闻聚合</li><li>社交应用</li><li>舆情监控</li><li>行业数据<h2 id="爬虫合法性探讨"><a href="#爬虫合法性探讨" class="headerlink" title="爬虫合法性探讨"></a>爬虫合法性探讨</h2></li></ol><p>经常听人说起“爬虫写得好，牢饭吃到饱”，那么编程爬虫程序是否违法呢？关于这个问题，我们可以从以下几个角度进行解读。</p><ol><li>网络爬虫这个领域目前还属于拓荒阶段，虽然互联网世界已经通过自己的游戏规则建立起了一定的道德规范，即 Robots 协议（全称是“网络爬虫排除标准”），但法律部分还在建立和完善中，也就是说，现在这个领域暂时还是灰色地带。</li><li>“法不禁止即为许可”，如果爬虫就像浏览器一样获取的是前端显示的数据（网页上的公开信息）而不是网站后台的私密敏感信息，就不太担心法律法规的约束，因为目前大数据产业链的发展速度远远超过了法律的完善程度。</li><li>在爬取网站的时候，需要限制自己的爬虫遵守 Robots 协议，同时控制网络爬虫程序的抓取数据的速度；在使用数据的时候，必须要尊重网站的知识产权（从Web 2.0时代开始，虽然Web上的数据很多都是由用户提供的，但是网站平台是投入了运营成本的，当用户在注册和发布内容时，平台通常就已经获得了对数据的所有权、使用权和分发权）。如果违反了这些规定，在打官司的时候败诉几率相当高。</li><li>适当的隐匿自己的身份在编写爬虫程序时必要的，而且最好不要被对方举证你的爬虫有破坏别人动产（例如服务器）的行为。</li><li>不要在公网（如代码托管平台）上去开源或者展示你的爬虫代码，这些行为通常会给自己带来不必要的麻烦。</li></ol><h2 id="相关工具"><a href="#相关工具" class="headerlink" title="相关工具"></a>相关工具</h2><p>下面我们先介绍一些开发爬虫程序的辅助工具，这些工具相信能帮助你事半功倍。</p><ol><li><p>Chrome Developer Tools：谷歌浏览器内置的开发者工具。该工具最常用的几个功能模块是：</p><ul><li>元素（ELements）：用于查看或修改 HTML 元素的属性、CSS 属性、监听事件等。CSS 可以即时修改，即时显示，大大方便了开发者调试页面。</li><li>控制台（Console）：用于执行一次性代码，查看 JavaScript 对象，查看调试日志信息或异常信息。控制台其实就是一个执行 JavaScript 代码的交互式环境。</li><li>源代码（Sources）：用于查看页面的 HTML 文件源代码、JavaScript 源代码、CSS 源代码，此外最重要的是可以调试 JavaScript 源代码，可以给代码添加断点和单步执行。</li><li>网络（Network）：用于 HTTP 请求、HTTP 响应以及与网络连接相关的信息。</li><li>应用（Application）：用于查看浏览器本地存储、后台任务等内容，本地存储主要包括Cookie、Local Storage、Session Storage等。</li></ul><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004034.png" alt="chrome-developer-tools"></p></li><li><p>Postman：功能强大的网页调试与 RESTful 请求工具。Postman可以帮助我们模拟请求，非常方便的定制我们的请求以及查看服务器的响应。</p><p><img src="https://gitee.com/jackfrued/mypic/raw/master/20210824004048.png" alt="postman"></p></li><li><p>HTTPie：命令行HTTP客户端。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install httpie</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">http --header http --header https://movie.douban.com/</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br><span class="line">Date: Tue, 24 Aug 2021 16:48:00 GMT</span><br><span class="line">Keep-Alive: timeout=30</span><br><span class="line">Server: dae</span><br><span class="line">Set-Cookie: bid=58h4BdKC9lM; Expires=Wed, 24-Aug-22 16:48:00 GMT; Domain=.douban.com; Path=/</span><br><span class="line">Strict-Transport-Security: max-age=15552000</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">X-DOUBAN-NEWBID: 58h4BdKC9lM</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>builtwith</code>库：识别网站所用技术的工具。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install builtwith</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ssl</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> builtwith</span><br><span class="line"></span><br><span class="line">ssl._create_default_https_context = ssl._create_unverified_context</span><br><span class="line"><span class="built_in">print</span>(builtwith.parse(<span class="string">'http://www.bootcss.com/'</span>))</span><br></pre></td></tr></tbody></table></figure></li><li><p><code>python-whois</code>库：查询网站所有者的工具。</p><p>安装。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install python-whois</span><br></pre></td></tr></tbody></table></figure><p>使用。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> whois</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(whois.whois(<span class="string">'https://www.bootcss.com'</span>))</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="爬虫的基本工作流程"><a href="#爬虫的基本工作流程" class="headerlink" title="爬虫的基本工作流程"></a>爬虫的基本工作流程</h2><h3 id="获取网页"><a href="#获取网页" class="headerlink" title="获取网页"></a>获取网页</h3><p>获取网页源代码</p><h3 id="提取信息"><a href="#提取信息" class="headerlink" title="提取信息"></a>提取信息</h3><p>获取网也源代码后，接下来就是分析网页源代码，从中提取我们想要的数据。首先，最通用的方法便是采用正则表达式提取，这是一个万能的方法，但是在构造正则表达式时比较复杂且容易出错。</p><p>由于网页的结构有一定的规侧，所以还有一些根据网页节点属性、CSS选择器或XPath来提取网顶信息的库，如Beautifu1Soup、<br>pyquery、1xm1等。使用这些库，我们可以高效快速地从中提取网页信息，如节点的属性、文本值等。<br>提取信息是爬虫非常重要的部分，它可以使杂乱的数据变得条理清晰，以便我们后续处理和分析数据。</p><h3 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h3><p>提取信息后，我们一般会将提取到的数据保存到某处以便后续使用。这里保存形式有多种多样，如可以简单保存为TXT文本或json文本，也可以保存到数据库，如MySQL和MongoDB等，也可保存至远程服务器，如借助SFTP进行操作等。</p><h1 id="代理ip"><a href="#代理ip" class="headerlink" title="代理ip"></a>代理ip</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>代理实际上指的就是代理服务器，英文叫作proxy server，它的功能是代理网络用户去取得网络信息。形象地说，它是网络信息的中转站。在我们正常请求一个网站时，是发送了请求给Web服务器，Web服务器把响应传回给我们。如果设置了代理服务器，实际上就是在本机和服务器之间搭建了一个桥，此时本机不是直接向Web服务器发起请求，而是向代理服务器发出请求，请求会发送给代理服务器，然后由代理服务器再发送给Web服务器，接着由代理服务器再把Web服务器返回的响应转发给本机。这样我们同样可以正常访问网页，但这个过程中Web服务器识别出的真实IP就不再是我们本机的IP了，就成功实现了IP伪装，这就是代理的基本原理。</p><h2 id="代理的作用"><a href="#代理的作用" class="headerlink" title="代理的作用"></a>代理的作用</h2><p>突破自身IP访问限制，访问一些平时不能访问的站点。<br>访问一些单位或团体内部资源：比如使用教育网内地址段免费代理服务器，就可以用于对教育网开放的各类FTP下载上传，以及各类资料查询共享等服务。<br>提高访问速度：通常代理服务器都设置一个较大的硬盘缓冲区，当有外界的信息通过时，同时也将其保存到缓冲区中，当其他用户再访问相同的信息时，则直接由缓冲区中取出信息，传给用户，以提高访问速度。<br>隐藏真实IP：上网者也可以通过这种方法隐藏自己的IP，免受攻击。对于爬虫来说，我们用代理就是为了隐藏自身IP，防止自身的IP被封锁。</p><h1 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h1><h2 id="添加请求头"><a href="#添加请求头" class="headerlink" title="添加请求头"></a>添加请求头</h2><p>在发起一个 HTTP 请求的时候，会有一个请求头 Request Headers，<br>如果不设置Request Headers 信息，某些网站会发现这不是一个正常的浏览器发起的请求，网站可能会返回异常的结果，导致网页抓取失败。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">使用 headers 参数来指定请求头</span><br><span class="line">headers = {</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36'</span>,</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">requests.get(url, headers=headers)</span><br></pre></td></tr></tbody></table></figure><h2 id="Response对象"><a href="#Response对象" class="headerlink" title="Response对象"></a>Response对象</h2><p>r = requests.get(url)<br>是构造一个向服务器请求资源的Request对象 ,返回一个包含服务器资源的Response对象。</p><h2 id="Response对象的方法"><a href="#Response对象的方法" class="headerlink" title="Response对象的方法"></a>Response对象的方法</h2><p>r.text()</p><h3 id="Response对象的属性"><a href="#Response对象的属性" class="headerlink" title="Response对象的属性"></a>Response对象的属性</h3><p>r.status_code： HTTP请求的返回状态，200表示连接成功，404表示失败<br>r.text： HTTP响应内容的字符串形式，即，ur对应的页面内容</p><p>r.encoding：从HTTP header中猜测的响应内容编码方式</p><p>r.apparent_encoding：从内容中分析出的响应内容编码方式（备选编码方式）</p><p>r.content： HTTP响应内容的二进制形式</p><h2 id="抓取二进制数据"><a href="#抓取二进制数据" class="headerlink" title="抓取二进制数据"></a>抓取二进制数据</h2><p>图片、音频、视频这些文件本质上都是由二进制码组成的，由于有特定的保存格式和对应的解析方式，我们才可以看到这些形形色色的多媒体。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests r = requests.get(<span class="string">'https://github.com/favicon.ico'</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">   f.write(r.content)</span><br></pre></td></tr></tbody></table></figure><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files = {<span class="string">'file'</span>: <span class="built_in">open</span>(<span class="string">'favicon.ico'</span>, <span class="string">'rb'</span>)} </span><br><span class="line">r = requests.post(<span class="string">'http://httpbin.org/post'</span>, files=files) </span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></tbody></table></figure><h2 id="获取和设置-Cookies"><a href="#获取和设置-Cookies" class="headerlink" title="获取和设置 Cookies"></a>获取和设置 Cookies</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="comment"># 获取</span></span><br><span class="line">r = requests.get(<span class="string">'http://www.baidu.com'</span>) </span><br><span class="line"><span class="comment"># 先调用 cookies 属性即可成功得到 Cookies，可以发现它是 RequestCookieJar 类型</span></span><br><span class="line"><span class="built_in">print</span>(r.cookies) </span><br><span class="line"><span class="comment"># 用 items 方法将其转化为元组组成的列表，遍历输出每一个 Cookie 的名称和值，实现 Cookie 的遍历解析。</span></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> r.cookies.items(): </span><br><span class="line">   <span class="built_in">print</span>(key + <span class="string">'='</span> + value)</span><br></pre></td></tr></tbody></table></figure><h2 id="Session维持"><a href="#Session维持" class="headerlink" title="Session维持"></a>Session维持</h2><p>在 requests 中，如果直接利用 get 或 post 等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的 Session，相当于你用两个浏览器打开了不同的页面。 设想这样一个场景，第一个请求利用 post 方法登录了某个网站，第二次想获取成功登录后的自己的个人信息，你又用了一次 get 方法去请求个人信息页面。实际上，这相当于打开了两个浏览器，是两个完全不 相关的 Session，能成功获取个人信息吗？当然不能。 有人会问，我在两次请求时设置一样的 Cookies 不就行了？可以，但这样做起来很烦琐，我们有更简单的解决方法。 解决这个问题的主要方法就是维持同一个 Session，相当于打开一个新的浏览器选项卡而不是新开一个浏览器。但我又不想每次设置 Cookies，那该怎么办呢？这时候就有了新的利器 ——Session对象。 利用它，我们可以方便地维护一个 Session，而且不用担心 Cookies 的问题，它会帮我们自动处理好。</p><h1 id="Beautifulsoup"><a href="#Beautifulsoup" class="headerlink" title="Beautifulsoup"></a>Beautifulsoup</h1><p><a href="https://beautifulsoup.cn/">Beautiful Soup 4.4.0 文档</a><br>一个灵活又方便的HTML解析库，处理高效，支持多种解析器，利用它不使用正则表达式也能抓取网页内容。<br>from bs4 import BeautifulSoup</p><h2 id="BeautifulSoup对象"><a href="#BeautifulSoup对象" class="headerlink" title="BeautifulSoup对象"></a>BeautifulSoup对象</h2><p>Tag , NavigableString ,  , Comment .</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;网络数据采集概述&quot;&gt;&lt;a href=&quot;#网络数据采集概述&quot; class=&quot;headerlink&quot; title=&quot;网络数据采集概述&quot;&gt;&lt;/a&gt;网络数据采集概述&lt;/h1&gt;&lt;p&gt;爬虫（crawler）也经常被称为网络蜘蛛（spider），是按照一定的规则自动浏览网站并获</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="爬虫" scheme="https://wenkexia.github.io/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>matlab学习</title>
    <link href="https://wenkexia.github.io/2022/031551719.html"/>
    <id>https://wenkexia.github.io/2022/031551719.html</id>
    <published>2022-03-15T07:15:30.000Z</published>
    <updated>2022-03-15T07:15:30.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.w3cschool.cn/matlab/matlab-5use28gb.html">https://www.w3cschool.cn/matlab/matlab-5use28gb.html</a></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p><a href="https://www.w3cschool.cn/matlab/matlab-by7428gf.html">matlab常用命令</a></p><p>% 这是一行注释  ,ctrl +r  快捷注释</p><p>在命令行中，以逗号或分号分隔多条命令</p><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量名长度不超过63位<br>区分大小写<br>在使用变量之前，必须进行赋值。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">MATLAB可以多个赋值</span><br><span class="line">`a = 2; b = 7; c = a * b`</span><br><span class="line"></span><br><span class="line">显示所有已经使用的变量名。</span><br><span class="line">who</span><br><span class="line"></span><br><span class="line">显示变量信息</span><br><span class="line">whos</span><br><span class="line"></span><br><span class="line">删除所有（或指定）从内存中的变量（S）。</span><br><span class="line">clear</span><br><span class="line">clear s</span><br></pre></td></tr></tbody></table></figure><h1 id="matlab数据类型"><a href="#matlab数据类型" class="headerlink" title="matlab数据类型"></a>matlab数据类型</h1><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><h2 id="字符和字符串"><a href="#字符和字符串" class="headerlink" title="字符和字符串"></a>字符和字符串</h2><p>单引号括起来</p><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><p>Matlab中结构体数组与python中字典概念差不多，使用方法也类似</p><h3 id="直接定义"><a href="#直接定义" class="headerlink" title="直接定义"></a>直接定义</h3><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">students.name = 'John';</span><br><span class="line">students.sex = 'Boy';</span><br><span class="line"></span><br><span class="line">%输出结果为 包含以下字段的 struct:</span><br><span class="line"></span><br><span class="line">name: 'John'</span><br><span class="line">sex: 'Boy'</span><br></pre></td></tr></tbody></table></figure><h2 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h2><p><a href="https://blog.csdn.net/weixin_49167174/article/details/119939748">https://blog.csdn.net/weixin_49167174/article/details/119939748</a></p><h3 id="矩阵的规则"><a href="#矩阵的规则" class="headerlink" title="矩阵的规则"></a>矩阵的规则</h3><p>矩阵元素必须在”[ ]”内；</p><p>矩阵的同行元素之间用空格（或”,”）隔开；</p><p>矩阵的行与行之间用”;”（或回车符）隔开；</p><p>矩阵的元素可以是数值、变量、表达式或函数；</p><h3 id="利用函数创建矩阵"><a href="#利用函数创建矩阵" class="headerlink" title="利用函数创建矩阵"></a>利用函数创建矩阵</h3><p>(1) ones()函数：产生全为1的矩阵，ones(n)：产生n<em>n维的全1矩阵，ones(m,n)：产生m</em>n维的全1矩阵；</p><p>(2) zeros()函数：产生全为0的矩阵；</p><p>(3) rand()函数：产生在（0，1）区间均匀分布的随机阵；</p><p>(4) eye()函数：产生单位阵；</p><p>(5) randn()函数：产生均值为0，方差为1的标准正态分布随机矩阵。</p><p>冒号表达式<br>(初始值：步长：终止值）</p><p>linspace(a, b, n)产生行向量<br>（a：第一个元素, b：最后一个元素, n：元素总数）<br>若元素总数n省略，则自动默认产生100个元素</p><h3 id="矩阵元素的引用"><a href="#矩阵元素的引用" class="headerlink" title="矩阵元素的引用"></a>矩阵元素的引用</h3><p>1.通过下标引用矩阵元素：第几行，第几列</p><p>2.通过序号引用矩阵元素<br>在matlab中，矩阵的元素是按列存储的即首先存储第一列元素、第二列…一直到最后一列。</p><p>矩阵元素的序号就是矩阵元素在内存中的排列顺序。</p><h3 id="矩阵拆分"><a href="#矩阵拆分" class="headerlink" title="矩阵拆分"></a>矩阵拆分</h3><p>利用冒号表达式获得子矩阵：</p><p>(1) A(:,j)表示取A矩阵的第j列全部元素；A(i,:)表示A矩阵第i行的全部元素；A(i,j)表示取A矩阵第i行、第j列的元素。</p><p>(2) A(i:i+m,:)表示取A矩阵第i<del>i+m行的全部元素；A(:,k:k+m)表示取A矩阵第k</del>k+m列的全部元素，A(i:i+m,k:k+m)表示取A矩阵第i<del>i+m行内，并在第k</del>k+m列中的所有元素。此外，还可利用一般向量和end运算符来表示矩阵下标，从而获得子矩阵。end表示某一维的末尾元素下标。</p><p>利用空矩阵[]删除矩阵的元素：</p><p>在MATLAB中，定义[]为空矩阵。给变量X赋空矩阵的语句为X=[]。注意，X=[]与clear X不同，clear是将X从工作空间中删除，而空矩阵则存在于工作空间中，只是维数为0。</p><h3 id="常用命令-1"><a href="#常用命令-1" class="headerlink" title="常用命令"></a>常用命令</h3><p>求矩阵的大小<br>size()</p><p>求矩阵某个元素的下标<br>[row,col]=find(a==5)</p><p>(下标变序号)<br>D=sub2ind(size(a),[I],[J])  I是行下标，J是列下标   </p><p>(序号变下标)<br>[I,J]=ind2sub(S,D)<br>D是序号   </p><h3 id="结构矩阵"><a href="#结构矩阵" class="headerlink" title="结构矩阵"></a>结构矩阵</h3><p>结构矩阵名.成员名=表达式</p><h2 id="元胞数组-cell"><a href="#元胞数组-cell" class="headerlink" title="元胞数组(cell)"></a>元胞数组(cell)</h2><p>是由可以包括任何数据类型的元胞组成的数组。也叫单元矩阵通过元胞数组的使用，可以在同一个变量中存储不同数据类型的数据。<br>单元矩阵元素用大括号括起来</p><p>当要将数据放入一个元胞数组中时，请使用元胞数组构造运算符 {} 创建该数组。</p><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><h1 id="函数文件"><a href="#函数文件" class="headerlink" title="函数文件"></a>函数文件</h1><p>文件第一行必须以function开头，文件名字必须以函数名.m命名<br>function 应变量名= 函数名(自变量名)</p><h1 id="基本绘图函数"><a href="#基本绘图函数" class="headerlink" title="基本绘图函数"></a>基本绘图函数</h1><p>plot(xn,yn,sn,…)<br>s参数为线型</p><h2 id="图形标注"><a href="#图形标注" class="headerlink" title="图形标注"></a>图形标注</h2><p>在绘制图形时，可以对图形加上一些说明，如图形的名称、坐标轴说明以及图形某一部分的含义等，这些操作称为添加图形标注。<br>title(‘图的题目’)<br>xlabel(‘横轴的名称’)<br>ylabel(‘纵轴的名称’)<br>text(0.5,25,’说明示例’)</p><h2 id="坐标、图形和图层窗口控制"><a href="#坐标、图形和图层窗口控制" class="headerlink" title="坐标、图形和图层窗口控制"></a>坐标、图形和图层窗口控制</h2><p>在绘制图形时，Matlab可以自动根据要绘制曲线数据的范围选择合适的坐标刻度，使得曲线能够尽可能清晰的显示出来。所以，一般情况下用户不必选择坐标轴的刻度范围。但是，如果用户对坐标不满意，可以利用axis函数对其重新设定。</p><p>axis equal  %纵横坐标轴采用等长刻度<br>axis square %产生正方形坐标系（默认为矩形）<br>axis auto   %使用默认设置<br>axis off    %取消坐标轴<br>axis on     %显示坐标轴<br>grid on     %显示网格<br>grid off    %不显示网格<br>box on      %显示其他轴(上、右)<br>box off     %不显示其他轴(上、右)<br>hold on     %继续在同一图层绘图<br>figure(1)   %新生成一个图层</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.w3cschool.cn/matlab/matlab-5use28gb.html&quot;&gt;https://www.w3cschool.cn/matlab/matlab-5use28gb.html&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;常用命令&quot;</summary>
      
    
    
    
    <category term="学习" scheme="https://wenkexia.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="matlab" scheme="https://wenkexia.github.io/tags/matlab/"/>
    
  </entry>
  
  <entry>
    <title>深度学习</title>
    <link href="https://wenkexia.github.io/2022/030811061.html"/>
    <id>https://wenkexia.github.io/2022/030811061.html</id>
    <published>2022-03-08T10:41:51.000Z</published>
    <updated>2022-03-08T10:41:51.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="人工智能、机器学习、深度学习的关系"><a href="#人工智能、机器学习、深度学习的关系" class="headerlink" title="人工智能、机器学习、深度学习的关系"></a>人工智能、机器学习、深度学习的关系</h1><p>人工智能 &gt; 机器学习 &gt; 深度学习。</p><h2 id="迁移学习"><a href="#迁移学习" class="headerlink" title="迁移学习"></a>迁移学习</h2><p>神经网络需要用数据来训练，它从数据中获得信息，进而把它们转换成相应的权重。这些权重能够被提取出来，迁移到其他的神经网络中，我们“迁移”了这些学来的特征，就不需要从零开始训练一个神经网络了 </p><h2 id="预训练模型"><a href="#预训练模型" class="headerlink" title="预训练模型"></a>预训练模型</h2><p>预训练模型(pre-trained model)是前人为了解决类似问题所创造出来的模型。你在解决问题的时候，不用从零开始训练一个新模型，可以从在类似问题中训练过的模型入手。</p><p>当在训练经网络的时候我们的目标是什么？我们希望网络能够在多次正向反向迭代的过程中，找到合适的权重。</p><p>通过使用之前在大数据集上经过训练的预训练模型，我们可以直接使用相应的结构和权重，将它们应用到我们正在面对的问题上。这被称作是“迁移学习”，即将预训练的模型“迁移”到我们正在应对的特定问题中。</p><h2 id="实践平台"><a href="#实践平台" class="headerlink" title="实践平台"></a>实践平台</h2><p>如果学员想了解更多关于飞桨、深度学习、机器学习或Python课程，可以通过如下三个途径获取。</p><p>AI Studio：<a href="https://aistudio.baidu.com/">https://aistudio.baidu.com/</a><br>飞桨官网：<a href="https://www.paddlepaddle.org.cn/">https://www.paddlepaddle.org.cn/</a><br>百度技术学院：<a href="http://bit.baidu.com/index">http://bit.baidu.com/index</a></p><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>机器学习是专门研究计算机怎样模拟或实现人类的学习行为，以获取新的知识或技能，重新组织已有的知识结构，使之不断改善自身的性能。</p><p>机器学习的实现<br>机器学习的实现可以分成两步：训练和预测，类似于归纳和演绎：</p><p>归纳： 从具体案例中抽象一般规律，机器学习中的“训练”亦是如此。从一定数量的样本（已知模型输入XXX和模型输出YYY）中，学习输出YYY与输入XXX的关系（可以想象成是某种表达式）。<br>演绎： 从一般规律推导出具体案例的结果，机器学习中的“预测”亦是如此。基于训练得到的YYY与XXX之间的关系，如出现新的输入XXX，计算出输出YYY。通常情况下，如果通过模型计算的输出和真实场景的输出一致，则说明模型是有效的。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>人工神经网络包括多个神经网络层，如：卷积层、全连接层、LSTM等，每一层又包括很多神经元，超过三层的非线性神经网络都可以被称为深度神经网络。通俗的讲，深度学习的模型可以视为是输入到输出的映射函数，如图像到高级语义（美女）的映射，足够深的神经网络理论上可以拟合任何复杂的函数。因此神经网络非常适合学习样本数据的内在规律和表示层次，对文字、图像和语音任务有很好的适用性。这几个领域的任务是人工智能的基础模块，因此深度学习被称为实现人工智能的基础也就不足为奇了。</p><p>神经元： 神经网络中每个节点称为神经元，由两部分组成：<br>  加权和：将所有输入加权求和。<br>  非线性变换（激活函数）：加权和的结果经过一个非线性函数变换，让神经元计算具备非线性的能力。</p><p>多层连接： 大量这样的节点按照不同的层次排布，形成多层的结构连接起来，即称为神经网络。</p><p>前向计算： 从输入计算输出的过程，顺序从网络前至后。</p><p>计算图： 以图形化的方式展现神经网络的计算逻辑又称为计算图，也可以将神经网络的计算图以公式的方式表达：<br>Y=f3(f2(f1(w1⋅x1+w2⋅x2+w3⋅x3+b)+…)…)…)<br>​神经网络并没有那么神秘，它的本质是一个含有很多参数的“大公式”</p><h3 id="构建神经网络-深度学习模型的基本步骤"><a href="#构建神经网络-深度学习模型的基本步骤" class="headerlink" title="构建神经网络/深度学习模型的基本步骤"></a>构建神经网络/深度学习模型的基本步骤</h3><h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>数据导入、</p><p>数据形状变换、</p><p>数据集划分、</p><p>数据归一化处理</p><p>封装load data函数</p><h4 id="模型设计"><a href="#模型设计" class="headerlink" title="模型设计"></a>模型设计</h4><p>（模型要素1）网络结构设计，相当于模型假设空间，即模型能够表达的关系集合。</p><h4 id="训练配置"><a href="#训练配置" class="headerlink" title="训练配置"></a>训练配置</h4><p>模型要素2）设定模型采用的寻解方法，即优化器，并指定计算资源。<br>PS：神经网络学习的目的是寻找合适的参数，使得损失函数的值尽可能小。解决这个问题的过程为称为最优化。解决这个问题使用的算法叫做优化器。接触到的优化器有：随机梯度下降法（Stachastic gradient desent 简称 SGD）和AdaGrad </p><p>AdaGard主要是为了解决 SGD 遇到鞍点或者极小值点后学习变慢的问题。我们知道超参数学习率是一个很重要的参数，不同的参数对学习结果的影响很大，如果设置的值较小，会导致学习花费较多的时间，学习率大了就会导致学习发散而不能正常的进行。所以我们可以考虑避免人为的介入，根据需要让程序自己动态地设置学习率。例如对于遇到鞍点的情况，参数变化很小，基本不会改变，那么这个方法就会设置一个较大的学习率，跨过鞍点。</p><h4 id="训练过程"><a href="#训练过程" class="headerlink" title="训练过程"></a>训练过程</h4><p>模型要素3）循环调用训练过程，每轮都包括前向计算、损失函数（优化目标）和后向传播三个步骤。</p><p>PS：前向计算是指把输入数据传入模型，然后得到输出；后向传播是指根据前向计算得到的输出通过梯度下降，从后向前优化网络中的参数。（因为梯度下降就是从后向前计算）</p><h4 id="模型保存"><a href="#模型保存" class="headerlink" title="模型保存"></a>模型保存</h4><p>将训练好的模型保存，模型预测是调用。</p><h1 id="预测问题"><a href="#预测问题" class="headerlink" title="预测问题"></a>预测问题</h1><p>对于预测问题，可以根据预测输出的类型是连续的实数值，还是离散的标签，区分为回归任务和分类任务。因为房价是一个连续值，所以房价预测显然是一个回归任务。下面我们尝试用最简单的线性回归模型解决这个问题，并用神经网络来实现这个模型。</p><h1 id="构建模型"><a href="#构建模型" class="headerlink" title="构建模型"></a>构建模型</h1><p><img src="https://gitee.com/wenkex/blogimage/raw/master/img/%E6%9E%84%E5%BB%BA%E6%A8%A1%E5%9E%8B5%E6%AD%A5-2022-3-1813:21:11.png"></p><p>模型结构三要素<br>（模型假设、评价函数和优化算法）</p><h1 id="paddleHub工具"><a href="#paddleHub工具" class="headerlink" title="paddleHub工具"></a>paddleHub工具</h1><p>端到端的预训练模型管理与迁移学习工具<br>模型一键下载、管理、预测,十行代码完成迁移学习,一键自动超参搜索,一键模型服务化部署</p><p>精选效果优秀的算法，提供了百亿级大数据训练的预训练模型，方便用户不用花费大量精力从头开始训练<br>一个模型。</p><p>#安装 -i指定镜像源<br>pip install paddlehub -i <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a><br>#更新<br>pip install –upgrade paddlehub -i <a href="http://pypi.douban.com/simple/">http://pypi.douban.com/simple/</a></p><h1 id="自然语言处理-NLP"><a href="#自然语言处理-NLP" class="headerlink" title="自然语言处理(NLP)"></a>自然语言处理(NLP)</h1><h2 id="NLP-的4个典型应用"><a href="#NLP-的4个典型应用" class="headerlink" title="NLP 的4个典型应用"></a>NLP 的4个典型应用</h2><p>情感分析</p><p>聊天机器人</p><p>语音识别</p><p>机器翻译</p><h2 id="paddlenlp"><a href="#paddlenlp" class="headerlink" title="paddlenlp"></a>paddlenlp</h2><p>安装<br>pip install –upgrade paddlenlp<br><a href="https://aistudio.baidu.com/aistudio/projectdetail/3696243?channelType=0&amp;channel=0">https://aistudio.baidu.com/aistudio/projectdetail/3696243?channelType=0&amp;channel=0</a></p><h3 id="中文分词"><a href="#中文分词" class="headerlink" title="中文分词"></a>中文分词</h3><p>分词作为许多NLP任务的第一道工序,Taskflow提供了多种中文分词模式供大家选择</p><h4 id="文档级输入"><a href="#文档级输入" class="headerlink" title="文档级输入"></a>文档级输入</h4><p>支持超长文本输入，无需担心『文本截断』问题</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次调用会有模型下载的额外时间开销</span></span><br><span class="line">seg = Taskflow(<span class="string">"word_segmentation"</span>)</span><br><span class="line"></span><br><span class="line">doc = <span class="string">"苏锦一直记得那个午后，明晃晃的光线穿过教室的窗玻璃洒到自己脸上，有种特别暖和的感觉。那阳光仿佛是能够钻进人的"</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"1. 输入长度："</span>, <span class="built_in">len</span>(doc))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">"2. 分词结果："</span>, seg(doc))</span><br></pre></td></tr></tbody></table></figure><h4 id="快速模式分词"><a href="#快速模式分词" class="headerlink" title="快速模式分词"></a>快速模式分词</h4><p>示例如何通过快速模式分词对数据集进行词频统计、构建词表</p><h4 id="精确模式分词"><a href="#精确模式分词" class="headerlink" title="精确模式分词"></a>精确模式分词</h4><h4 id="用户词典"><a href="#用户词典" class="headerlink" title="用户词典"></a>用户词典</h4><p>快速配置用户词典来对分词结果进行干预</p><h3 id="词性标注，，依存句法分析"><a href="#词性标注，，依存句法分析" class="headerlink" title="词性标注，，依存句法分析"></a>词性标注，，依存句法分析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 基于百度词法分析工具LAC，训练语料包含近2200万句子，覆盖多种场景</span></span><br><span class="line"><span class="comment"># 词性标注</span></span><br><span class="line">tag = Taskflow(<span class="string">"pos_tagging"</span>)</span><br><span class="line"><span class="built_in">print</span>(tag(<span class="string">"第十四届全运会在西安举办"</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="命名实体识别"><a href="#命名实体识别" class="headerlink" title="命名实体识别"></a>命名实体识别</h3><p>基于百度解语的精确模式：最全中文实体标签的命名实体识别工具</p><h4 id="精确模式"><a href="#精确模式" class="headerlink" title="精确模式"></a>精确模式</h4><p>基于百度解语的精确模式：最全中文实体标签的命名实体识别工具，不仅适用于通用领域，也适用于生物医疗、教育等垂类领域。包含66种词性及专名类别标签（同类产品的标签数是15个左右）</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">ner = Taskflow(<span class="string">"ner"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ner([<span class="string">"李伟拿出具有科学性、可操作性的《陕西省高校管理体制改革实施方案》"</span>, <span class="string">"诺戴商务咨询（上海）有限公司于2016年08月22日成立"</span>]))</span><br></pre></td></tr></tbody></table></figure><h4 id="快速模式"><a href="#快速模式" class="headerlink" title="快速模式"></a>快速模式</h4><p>基于百度词法分析工具LAC，训练语料包含近2200万句子，覆盖多种场景</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">ner_fast = Taskflow(<span class="string">"ner"</span>, mode=<span class="string">"fast"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ner_fast(<span class="string">"三亚是一个美丽的城市"</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="依存句法分析"><a href="#依存句法分析" class="headerlink" title="依存句法分析"></a>依存句法分析</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用BiLSTM作为编码器，速度最快</span></span><br><span class="line">ddp = Taskflow(<span class="string">"dependency_parsing"</span>)</span><br><span class="line"><span class="built_in">print</span>(ddp(<span class="string">"2月8日谷爱凌夺得北京冬奥会第三金"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># # 编码器部分将BiLSTM替换为ERNIE，模型准确率更高！</span></span><br><span class="line"><span class="comment"># ddp = Taskflow("dependency_parsing", model="ddparser-ernie-1.0")</span></span><br><span class="line"><span class="comment"># print(ddp("2月8日谷爱凌夺得北京冬奥会第三金"))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出概率值和词性标签</span></span><br><span class="line">ddp = Taskflow(<span class="string">"dependency_parsing"</span>, prob=<span class="literal">True</span>, use_pos=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ddp(<span class="string">"2月8日谷爱凌夺得北京冬奥会第三金"</span>))</span><br></pre></td></tr></tbody></table></figure><h3 id="定制化训练"><a href="#定制化训练" class="headerlink" title="定制化训练"></a>定制化训练</h3><p>利用自己的数据训练/微调模型，通过Taskflow一键装载并使用</p><h4 id="数据准备和训练"><a href="#数据准备和训练" class="headerlink" title="数据准备和训练"></a>数据准备和训练</h4><p><a href="https://github.com/PaddlePaddle/PaddleNLP/tree/develop/examples/sentiment_analysis/skep">参考PaddleNLP SKEP情感分析训练示例</a>完成数据准备和模型训练。</p><h4 id="使用定制化模型"><a href="#使用定制化模型" class="headerlink" title="使用定制化模型"></a>使用定制化模型</h4><p>通过task_path指定自定义模型路径一键加载即可。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> paddlenlp <span class="keyword">import</span> Taskflow</span><br><span class="line"></span><br><span class="line">my_senta = Taskflow(<span class="string">"sentiment_analysis"</span>, model=<span class="string">"skep_ernie_1.0_large_ch"</span>, task_path=<span class="string">"/home/aistudio/custom_model"</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_senta(<span class="string">"不错的酒店,服务还可以,下次还会入住的~"</span>))</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;人工智能、机器学习、深度学习的关系&quot;&gt;&lt;a href=&quot;#人工智能、机器学习、深度学习的关系&quot; class=&quot;headerlink&quot; title=&quot;人工智能、机器学习、深度学习的关系&quot;&gt;&lt;/a&gt;人工智能、机器学习、深度学习的关系&lt;/h1&gt;&lt;p&gt;人工智能 &amp;gt; </summary>
      
    
    
    
    <category term="工具" scheme="https://wenkexia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="深度学习" scheme="https://wenkexia.github.io/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>django学习</title>
    <link href="https://wenkexia.github.io/2022/030664874.html"/>
    <id>https://wenkexia.github.io/2022/030664874.html</id>
    <published>2022-03-06T13:02:52.000Z</published>
    <updated>2022-03-06T13:02:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python 加 Django 是快速开发、设计、部署网站的最佳组合。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p><code>pip install django -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p><h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><p>在想要创建的文件夹中，进入终端<br>执行命令创建项目<code>'django-admin startproject 项目名称 </code></p><h1 id="项目文件介绍"><a href="#项目文件介绍" class="headerlink" title="项目文件介绍"></a>项目文件介绍</h1><p>manage.py  项目的管理，启动项目，创建app,数据管理<br>urls.py  url和函数的对应关系<br>asgi.py 和wsgi.py  接受网络请求</p><h1 id="创建一个app"><a href="#创建一个app" class="headerlink" title="创建一个app"></a>创建一个app</h1><p>python manage.py startapp 名称 </p><h1 id="Uvicorn-运行-django"><a href="#Uvicorn-运行-django" class="headerlink" title="Uvicorn 运行 django"></a>Uvicorn 运行 django</h1><p>django 内置的开发服务器在修改代码后的热重载非常缓慢，我发现 uvicorn 的重载速度要快得多，所以新项目第一件事，就是使用在开发环境下使用 uvicorn 运行 django。</p><p>首先当然要安装 uvicorn。<br><code>pip install uvicorn</code></p><p>Uvicorn 安装好后，可以在命令行使用 uvicorn 命令来运行 django。但是，每次输命令启动 django 会非常麻烦！最好的做法是创建一个脚本，启动 django 只需要执行脚本就可以了。</p><p>在 项目根目录 创建一个 run_uvicorn.py 的脚本（脚本名可以自己随便取），代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> uvicorn</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    os.environ.setdefault(<span class="string">"DJANGO_SETTINGS_MODULE"</span>, <span class="string">"mysite.settings"</span>)</span><br><span class="line">    uvicorn.run(</span><br><span class="line">        <span class="string">"mysite.asgi:application"</span>,</span><br><span class="line">        host=<span class="string">"0.0.0.0"</span>,</span><br><span class="line">        port=<span class="number">8000</span>,</span><br><span class="line">        log_level=<span class="string">"debug"</span>,</span><br><span class="line">        reload=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></tbody></table></figure><p>运行脚本后，应用已在 8000 端口启动，现在访问 localhost:8000，可以看到熟悉的 django 项目初始页面。</p><h1 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h1><p>views.py  写函数</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Python 加 Django 是快速开发、设计、部署网站的最佳组合。&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;&lt;code&gt;pip install django -i</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="web" scheme="https://wenkexia.github.io/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Linux</title>
    <link href="https://wenkexia.github.io/2022/022615691.html"/>
    <id>https://wenkexia.github.io/2022/022615691.html</id>
    <published>2022-02-26T12:50:16.000Z</published>
    <updated>2022-02-26T12:50:16.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用linux的好处"><a href="#使用linux的好处" class="headerlink" title="使用linux的好处"></a>使用linux的好处</h1><p><a href="https://mp.weixin.qq.com/s/MP6gWfkyKaBLNCpEOHhk_g">使用linux的好处</a><br>在 linux 下，apt install 或者 yum install 之类的命令，就能搞定整个软件安装。</p><p>Linux 不需要选择软件是放 c 盘还是 d 盘，已经定义好了哪些文件该放在哪些地方，<br>不需要杀毒软件，不需要清理垃圾，不需要释放内存，不需要激活系统，它是开源免费的，不需要磁盘优化，没有烦人的弹窗，没有强制更新。</p><h1 id="linux环境"><a href="#linux环境" class="headerlink" title="linux环境"></a>linux环境</h1><h2 id="VMware搭建linux"><a href="#VMware搭建linux" class="headerlink" title="VMware搭建linux"></a>VMware搭建linux</h2><h3 id="VMWare-和-Hyper-V-共存"><a href="#VMWare-和-Hyper-V-共存" class="headerlink" title="VMWare 和 Hyper-V 共存"></a>VMWare 和 Hyper-V 共存</h3><p>将 Windows 版本升级到 Windows 10 20H1 或更高版本。<br>将 VMWare Workstation/Player 升级到 15.5.5 或更高版本<br>在安装时，勾选“自动安装 Windows Hypervisor Platform (WHP)”。<br>打开虚拟机的设置选项，找到“处理器”，去掉如图所示的三个选项前面的钩，点击“确定”</p><h3 id="网络连接方式"><a href="#网络连接方式" class="headerlink" title="网络连接方式"></a>网络连接方式</h3><p>NAT模式（默认）：网络地址转换方式，linux可以访问外网，不会造成ip冲突</p><p>桥接模式：可以与其它系统进行通信，但可能造成ip冲突</p><p>主机模式：你的Linux是一个独立的主机，不能访问外网</p><h2 id="WSL2搭建Linux"><a href="#WSL2搭建Linux" class="headerlink" title="WSL2搭建Linux"></a>WSL2搭建Linux</h2><p><a href="https://docs.microsoft.com/zh-cn/windows/wsl/">官方文档</a><br>WSL2采用在Hyper-V虚拟机中运行的方案,实现了与 windows 的高度集成,wsl2 的开启速度有了非常明显的提升，几乎无需等待。</p><p>启用适用于 Linux 的 Windows 子系统</p><p><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</code></p><p>启用虚拟机平台功能</p><p><code>dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</code></p><p>以管理者模式进入cmd安装<br><code>wsl --install</code> </p><p>切换WSL的默认版本为WSL2。<br><code>wsl --set-default-version 2 </code></p><p>以管理者cmd进行更新操作<br><code>wsl --update</code> </p><p>重启，更新才能生效<br><code>wsl --shutdown</code></p><p>Microsoft Store 中找一个 Linux 发行版进行安装</p><p>查看系统版本<br><code>wsl -l -v</code></p><h3 id="修改默认安装目录"><a href="#修改默认安装目录" class="headerlink" title="修改默认安装目录"></a>修改默认安装目录</h3><p>命令格式：wsl –import <distributionname>  &lt;文件位置&gt; &lt;安装位置&gt;  </distributionname></p><ol><li>查看已安装的linux发行版本<br> <code>wsl -l --all -v</code></li><li> 导出分发版为tar文件到d盘<br><code>wsl --export Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04.tar</code></li><li>注销当前分发版<br><code>wsl --unregister Ubuntu-20.04</code></li><li>重新导入并安装WSL在D盘<br><code>wsl --import Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04 D:\data\WSL2\Ubuntu-20.04.tar --version 2 </code></li><li>设置默认登陆用户为安装时用户名<br><code>ubuntu config --default-user USERNAME</code></li><li>删除wsl-ubuntu20.04.tar<br><code>del d:\wsl-ubuntu.tar</code></li></ol><h3 id="设置-Linux-用户名和密码"><a href="#设置-Linux-用户名和密码" class="headerlink" title="设置 Linux 用户名和密码"></a>设置 Linux 用户名和密码</h3><p>若要更改或重置密码，请打开 Linux 发行版并输入命令：<code>passwd</code><br>如果忘记了 Linux 分发版的密码：<br>1.请打开 PowerShell，并使用以下命令进入默认 WSL 分发版的根目录：wsl -u root</p><p>如果需要在非默认分发版中更新忘记的密码，请使用命令：wsl -d Debian -u root，并将 Debian 替换为目标分发版的名称。</p><p>2.在 PowerShell 内的根级别打开 WSL 发行版后，可使用此命令更新密码：passwd <username>，其中 <username> 是发行版中帐户的用户名，而你忘记了它的密码。</username></username></p><h3 id="关闭WSL2"><a href="#关闭WSL2" class="headerlink" title="关闭WSL2"></a>关闭WSL2</h3><p>WSL2实际上是在虚拟机中运行。我们一旦进入WSL2 Linux的命令行，虚拟机会自动启动运行。如果我们查看任务管理器，会发现一个Vmmem进程,它比较占内存。不使用WSL2的时候我们可以关闭它以节省内存。关闭WSL2 Linux的方法如下。使用管理员打开CMD，运行：<code>wsl --shutdown</code></p><h3 id="为发行版linux更换国内源"><a href="#为发行版linux更换国内源" class="headerlink" title="为发行版linux更换国内源"></a>为发行版linux更换国内源</h3><p><a href="https://blog.csdn.net/weixin_41529012/article/details/117226884">https://blog.csdn.net/weixin_41529012/article/details/117226884</a></p><p>打开\wsl.localhost\Ubuntu\etc\apt地址下的sources.list文件，更改国内源<br>中科大</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src https://mirrors.ustc.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">sudo apt update &amp;&amp; sudo apt upgrade  #更新镜像源列表</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="使用vscode操作wsl"><a href="#使用vscode操作wsl" class="headerlink" title="使用vscode操作wsl"></a>使用vscode操作wsl</h3><p>在window的vscode上安装Remote Development扩展包<br>包括Remote - SSH ， Remote - Containers ，Remote - WSL扩展</p><p>Remote - WSL 扩展：使你能够打开容器中、远程计算机上或 WSL 中的任何文件夹。</p><h4 id="打开-WSL-项目"><a href="#打开-WSL-项目" class="headerlink" title="打开 WSL 项目"></a>打开 WSL 项目</h4><p>1.从 WSL 发行版打开项目，请打开发行版的命令行并输入：code .</p><p>2.从 VS Code 中打开项目，通过使用 VS Code 中的快捷方式 CTRL+SHIFT+P 调出命令面板，以访问更多 VS Code 远程选项。 如果随后键入 Remote-WSL，将看到可用的 VS Code 远程选项列表，使你可以在远程会话中重新打开文件夹，指定要在哪个发行版中打开，等等。</p><h3 id="wsl安装Docker"><a href="#wsl安装Docker" class="headerlink" title="wsl安装Docker"></a>wsl安装Docker</h3><p>1.下载 <a href="https://docs.docker.com/desktop/windows/wsl/">Docker Desktop</a> 并按照安装说明进行操作。</p><p>2.安装后，从 Windows 开始菜单启动 Docker Desktop，然后从任务栏的隐藏图标菜单中选择 Docker 图标。 右键单击该图标以显示 Docker 命令菜单，然后选择“设置”。</p><p>3.确保在“设置”“常规”中选中“使用基于 WSL 2 的引擎”。</p><p>4.通过转到“设置”“资源”“WSL 集成”，从要启用 Docker 集成的已安装 WSL 2 发行版中进行选择。</p><p>5.若要确认已安装 Docker，请打开 WSL 发行版（例如 Ubuntu），并通过输入 docker –version 来显示版本和内部版本号</p><h2 id="linux云服务器"><a href="#linux云服务器" class="headerlink" title="linux云服务器"></a>linux云服务器</h2><p><a href="https://developer.aliyun.com/article/767041">云服务器可以做什么</a></p><p>云服务器（Elastic Compute Service, 简称ECS），是一种简单高效，处理能力可以弹性伸缩的计算服务。ECS的相关术语说明如下：</p><p>实例（Instance）：是一个虚拟的计算环境，由CPU、内存、系统盘和运行的操作系统组成；ECS实例作为云服务器最为核心的概念，其他资源，比如磁盘、IP、镜像、快照等，只有与ECS结合后才具有使用意义。</p><p>地域（Region）：指ECS实例所在的物理位置。地域内的ECS实例内网是互通的，不同的地域之间ECS实例内网不互通。</p><p>可用区（Zone）：指在同一地域内，电力和网络互相独立的物理区域。</p><p>磁盘（Disk）：是为ECS实例提供数据块级别的数据存储。可以分为4类： 普通云盘、SSD云盘、高效云盘和本地SSD磁盘</p><p>快照（Snapshot）：是某一个时间点上某个磁盘的数据拷贝。</p><p>镜像（Image）：是ECS实例运行环境的模板，一般包括操作系统和预装的软件。</p><p>安全组（Security Group）：是一种虚拟防火墙，具备状态检测包过滤功能。每个实例至少属于一个安全组。同一个安全组内的实例之间网络互通，不同安全组的实例之间默认内网不通，但是可以授权两个安全组之间互访。</p><h3 id="虚拟主机、ECS云服务器、VPS区别汇总"><a href="#虚拟主机、ECS云服务器、VPS区别汇总" class="headerlink" title="虚拟主机、ECS云服务器、VPS区别汇总"></a>虚拟主机、ECS云服务器、VPS区别汇总</h3><p>1、虚拟主机</p><p>虚拟主机就是利用虚拟化的技术，将一台服务器划分出一定大小的空间，每个空间都给予单独的 FTP 权限和 Web 访问权限，多个用户共同平均使用这台服务器的硬件资源。不同配置的虚拟主机主要是在磁盘空间、数据库大小、流量上面的区别。虚拟主机也有可以分为独享的虚拟主机，和共享的虚拟主机。顾名思义，两者之间的区别在于服务器资源的独享和共享。网站主机、空间、都是一个意思。这一类的主机用户的权限很低，没有远程桌面，只有FTP权限供用户上传文档等操作。优势是比较价格便宜。</p><p>2、VPS</p><p>先说一下vps，Virtual Private Server 虚拟专用服务器,一般是将一个独立服务器通过虚拟化技术虚拟成多个虚拟专用服务器。与虚拟主机不同的是，你拥有的是一台虚拟的服务器，类似于Windows上的虚拟机一样，虽然是虚拟的，但是使用起来，和使用客户机没有什么区别。同理，VPS可以使用远程桌面登录对服务器进行维护操作。</p><p>3、ECS云服务器</p><p>现在的主流的服务器解决方案，一般理解云服务器和VPS一样，同样是虚拟化的技术虚拟出来的服务器。也有人说以前的VPS就是现在的ECS，其实不然，云服务器是一个计算，网络，存储的组合。简单点说就是通过多个CPU，内存，硬盘组成的计算池和存储池和网络的组合；在这样的平台上虚拟出的服务器，用户可以根据自己的运算需要选择配置不同的云服务器。具体区别总结如下：<br><img src="https://gitee.com/wenkex/blogimage/raw/master/img/%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA%E3%80%81ECS%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E3%80%81VPS%E5%8C%BA%E5%88%AB-2022-3-1809:16:23.png"></p><h3 id="使用VScode连接阿里云远程服务器"><a href="#使用VScode连接阿里云远程服务器" class="headerlink" title="使用VScode连接阿里云远程服务器"></a>使用VScode连接阿里云远程服务器</h3><p>安装Remote-ssh插件<br>在云服务器控制台选择安全组配置，加入ssh(22)的端口</p><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><h2 id="linux文件目录"><a href="#linux文件目录" class="headerlink" title="linux文件目录"></a>linux文件目录</h2><h3 id="home"><a href="#home" class="headerlink" title="/home"></a>/home</h3><p>存放所有用户文件的根目录，是用户主目录的基点</p><p>比如用户user的主目录就是/home/user，可以用~user表示</p><h3 id="usr"><a href="#usr" class="headerlink" title="/usr"></a>/usr</h3><p>用于存放系统应用程序，可以理解为C:/Windows/ </p><h4 id="usr-local"><a href="#usr-local" class="headerlink" title="/usr/local"></a>/usr/local</h4><p>用户级的程序目录，可以理解为C:/Progrem Files/</p><p>用户自己编译的软件默认会安装到这个目录下</p><p>本地系统管理员软件安装目录（安装系统级的应用）</p><p>这是最庞大的目录，要用到的应用程序和文件几乎都在这个目录</p><p>用的是root的空间。</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看当前目录下所有文件权限</span></span><br><span class="line">ls -l      #简写 ll </span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看指定文件权限</span></span><br><span class="line">ll |grep 文件名</span><br></pre></td></tr></tbody></table></figure><p>在linux下，文件权限分为三种：可读权限(read)、可写权限(write)以及可执行权限(execute)，三者分别对应的字符为r、w和x；</p><p>文件权限身份也分三种：文件所有者（user）、文件所有者所在组（group）以及其他（others）</p><h3 id="10个字符"><a href="#10个字符" class="headerlink" title="10个字符"></a>10个字符</h3><p>每一个文件的第一个字段都是由r、w、x等10个字符构成</p><p>①第1个字符。描述文件\目录 类型，如果为‘-’则表示这是一个文件，如果为’d’表示这是一个目录；</p><p>②第2~4个字符。这3个字符为一组，按照顺序描述了文件所有者对该文件的可读、可写和可执行权限；</p><p>②第5~7个字符。这3个字符为一组，按照顺序描述了文件所有者所在组对该文件的可读、可写和可执行权限；</p><p>②第8~10个字符。这3个字符为一组，按照顺序描述了其他身份对该文件的可读、可写和可执行权限；</p><p>第1个字符反映了文件类型，后面9个字符每3个字符为一组，分别反映了文件所有者、文件所有者所在组和其他身份对该文件的可读、可写和可执行权限，如果为‘r’表示可读，为’w’表示可写，为’x’表示可执行，为’-‘表示无相应权限。</p><h3 id="修改文件权限"><a href="#修改文件权限" class="headerlink" title="修改文件权限"></a>修改文件权限</h3><p>要通过su进入到root权限中<br><code>chmod abc filename</code></p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 777</span><br></pre></td></tr></tbody></table></figure><p>指令中的a、b、c分别表示一个数字，其中a对应文件所有者权限，b对应文件所有者所在组权限，c对应其他身份权限。</p><p>对于a、b、c各自来讲，它们都是0~7的数字，对应r、w、x三个二进制位按序组成的二进制数，举个例子，如果是只可读，对应的二进制数就是“100”，也就是4；如果是可读可写不可执行，那么对应二进制数为“110”，也就是6……</p><p>再举个最常见的chmod 777 xxxx指令，这里有3个7，但是每个7的含义是不同的。7的二进制形式为111，表示可读可写可执行，第1个7表示文件对于文件所有者来说可读可写可执行；第2个7表示文件对于文件所有者所在组来说可读可写可执行；第3个7表示文件对于其他身份的用户来说可读可写可执行。也就是说，通过chmod 777，文件就没有了读写执行权限限制了。</p><h2 id="Linux用户管理"><a href="#Linux用户管理" class="headerlink" title="Linux用户管理"></a>Linux用户管理</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加用户，并创建主目录</span></span><br><span class="line">useradd -m 用户名</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除用户，并删除主目录</span></span><br><span class="line">userdel -r 用户名</span><br></pre></td></tr></tbody></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Linux删除文件夹命令</span></span><br><span class="line"></span><br><span class="line">rm -rf /var/log/httpd/access</span><br><span class="line">将会删除/var/log/httpd/access目录以及其下所有文件、文件夹</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Linux删除文件命令</span></span><br><span class="line"></span><br><span class="line">rm -f /var/log/httpd/access.log</span><br><span class="line">将会强制删除/var/log/httpd/access.log这个文件</span><br></pre></td></tr></tbody></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>linux系统基本上分两大类：</p><ol><li><p>RedHat系列：Redhat、Centos、Fedora等<br>常见的安装包格式 rpm 包，安装rpm包的命令是 “rpm -参数”<br>包管理工具 yum<br>支持tar包</p></li><li><p>Debian系列：Debian、Ubuntu等<br>常见的安装包格式 deb 包，安装deb包的命令是 “dpkg -参数”<br>包管理工具 apt-get<br>支持tar包</p></li></ol><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>yum（ Yellow dog Updater, Modified）是一个在 Fedora 和 RedHat 以及 SUSE 中的 Shell 前端软件包管理器。<br>yum 提供了查找、安装、删除某一个、一组甚至全部软件包的命令</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1. 列出所有可更新的软件清单命令：yum check-update</span><br><span class="line"></span><br><span class="line">2. 更新所有软件命令：yum update</span><br><span class="line"></span><br><span class="line">3. 仅安装指定的软件命令：yum install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">4. 仅更新指定的软件命令：yum update &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">5. 列出所有可安裝的软件清单命令：yum list</span><br><span class="line"></span><br><span class="line">6. 删除软件包命令：yum remove &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line">7. 查找软件包命令：yum search &lt;keyword&gt;</span><br><span class="line"></span><br><span class="line">8. 清除缓存命令:</span><br><span class="line"></span><br><span class="line">yum clean packages: 清除缓存目录下的软件包</span><br><span class="line">yum clean headers: 清除缓存目录下的 headers</span><br><span class="line">yum clean oldheaders: 清除缓存目录下旧的 headers</span><br><span class="line">yum clean, yum clean all (= yum clean packages; yum clean oldheaders) :清除缓存目录下的软件包及旧的 headers</span><br></pre></td></tr></tbody></table></figure><h4 id="配置yum仓库"><a href="#配置yum仓库" class="headerlink" title="配置yum仓库"></a>配置yum仓库</h4><p>yum就是一个硕大的软件仓库，里面保存了几乎所有的常用工具，只需要为系统提供软件包名称即可。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先切换到yum源中的配置目录</span></span><br><span class="line">cd /etc/yum.repos.d/ </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="yum无法使用"><a href="#yum无法使用" class="headerlink" title="yum无法使用"></a>yum无法使用</h4><p>yum服务使用的默认python版本是python2<br>更换yum源</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/bin/yum  #先看下/usr/bin/yum文件内容</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">查看系统默认安装的yum</span></span><br><span class="line">rpm -qa|grep yum</span><br><span class="line"></span><br><span class="line">yum update</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h3><p>wget是Linux中的一个下载文件的工具，后来被移植到包括Windows在内的各个平台上。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">安装wget</span></span><br><span class="line">yum install -y wget</span><br><span class="line"><span class="meta">#</span><span class="bash">查看帮助手册</span></span><br><span class="line">wget --help</span><br></pre></td></tr></tbody></table></figure><h2 id="linux压缩文件"><a href="#linux压缩文件" class="headerlink" title="linux压缩文件"></a>linux压缩文件</h2><h3 id="gzip命令"><a href="#gzip命令" class="headerlink" title="gzip命令"></a>gzip命令</h3><p>gzip是用来压缩和解压.gz文件的命令。<br>gzip命令只能压缩单个文件，而不能把一个文件夹压缩成一个文件（与打包命令的区别）</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">会将文件压缩为文件 test.txt.gz，原来的文件则没有了</span></span><br><span class="line">gzip /home/aistudio/work/test.txt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">解压文件,原来的文件则没有了</span></span><br><span class="line">gzip -d /home/aistudio/test.gz</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-r或--recursive：递归压缩指定文件夹下的文件（该文件夹下的所有文件被压缩成单独的.gz文件）；</span><br><span class="line">-v或--verbose：显示指令执行过程。</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h3><p>用来打包或者解包后缀名为.tar</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">参数</span></span><br><span class="line">-c或--create：建立新的备份文件；</span><br><span class="line">-x或--extract或--get：从备份文件中还原文件；</span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-f或--file：指定备份文件；</span><br><span class="line">-C：指定目的目录；</span><br><span class="line">-z：通过gzip指令处理备份文件；</span><br><span class="line">-j：通过bzip2指令处理备份文件。</span><br></pre></td></tr></tbody></table></figure><h3 id="zip和unzip"><a href="#zip和unzip" class="headerlink" title="zip和unzip"></a>zip和unzip</h3><p>zip命令和unzip命令用在在Linux上处理.zip的压缩文件。</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">常用参数</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">zip:</span></span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-m：不保留原文件；</span><br><span class="line">-r：递归处理。</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">unzip:</span></span><br><span class="line">-v：显示指令执行过程；</span><br><span class="line">-d：解压到指定目录。</span><br></pre></td></tr></tbody></table></figure><h2 id="vim使用"><a href="#vim使用" class="headerlink" title="vim使用"></a>vim使用</h2><p><a href="https://www.jianshu.com/p/8b679b35c9d5">https://www.jianshu.com/p/8b679b35c9d5</a><br>Vim可以分为三种模式，分别为：</p><h3 id="命令行模式（Command-mode）"><a href="#命令行模式（Command-mode）" class="headerlink" title="命令行模式（Command mode）"></a>命令行模式（Command mode）</h3><p>控制屏幕光标的移动，字符、字或行的删除，移动复制某区段及进入Insert mode下，或者到 last line mode。<br>进入vim之后，是处于「命令行模式」，要按i切换到「插入模式」才能够输入文字。</p><h3 id="插入模式（Insert-mode）"><a href="#插入模式（Insert-mode）" class="headerlink" title="插入模式（Insert mode）"></a>插入模式（Insert mode）</h3><p>只有在插入模式下，才可以做文字输入，按「ESC」键可回到命令行模式。</p><h3 id="底行模式（Lastline-mode）"><a href="#底行模式（Lastline-mode）" class="headerlink" title="底行模式（Lastline mode）"></a>底行模式（Lastline mode）</h3><p>将文件保存或退出vim，也可以设置编辑环境，如寻找字符串、列出行号……等。<br>在命令行模式下，按冒号「:」键，进入底行模式</p><p>:w filename 文件以filename为文件名保存</p><p>:wq 文件存盘并退出vim</p><p>:q 文件不存盘并退出vim</p><p>:q! 文件不存盘强制退出vim</p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p>1、修改 /etc/profile 文件，如果你的计算机仅仅作为开发使用时推存使用这种方法，因为所有用户的shell都有权使用这个环境变量，可能会给系统带来安全性问题。这里是针对所有的用户的，所有的shell</p><p>vi /etc/profile</p><p>在/etc/profile的最下面添加：  export  PATH=”$PATH:/NEW_PATH”</p><p>针对当前特定的用户起作用的环境变量</p><p>2、修改bashrc文件，这种方法更为安全，它可以把使用这些环境变量的权限控制到用户级别，这里是针对某一特定的用户，如果你需要给某个用户权限使用这些环境变量，你只需要修改其个人用户主目录下的 .bashrc文件就可以了。</p><p>vi ~/.bashrc</p><p>在下面添加：</p><p>Export  PATH=”$PATH:/NEW_PATH”</p><h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><p>常见的 Shell 有 sh、bash、csh、tcsh、ash 等。<br>#!/bin/bash是指此脚本使用/bin/bash来解释执行。<br>脚本文件后缀是.sh<br><a href="https://mp.weixin.qq.com/s/A_K9Uikkq6OHHthj1EIbVQ">100个shell脚本</a></p><h1 id="linux使用"><a href="#linux使用" class="headerlink" title="linux使用"></a>linux使用</h1><h2 id="用户操作"><a href="#用户操作" class="headerlink" title="用户操作"></a>用户操作</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su root  #切换到 root 用户</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h2><p>linux区分大小写，使用tab来自动补全命令</p><p>如果想要输入和执行多条命令，用分号分隔命令</p><h2 id="Linux开机自动启动软件-可执行程序"><a href="#Linux开机自动启动软件-可执行程序" class="headerlink" title="Linux开机自动启动软件/可执行程序"></a>Linux开机自动启动软件/可执行程序</h2><h3 id="首先关注几个脚本"><a href="#首先关注几个脚本" class="headerlink" title="首先关注几个脚本"></a>首先关注几个脚本</h3><p>/etc/rc.d/rc.local：该脚本在系统启动时被执行一次；<br>/etc/profile:该脚本在所有用户登陆时会被执行一次；<br>~/.bashrc:该脚本在用户登陆时被执行一次，与/etc/profile不同的是，bashrc文件每个用户拥有独立的一个。</p><p>若设置开机启动，应该修改：/etc/rc.d/rc.local文件。</p><h2 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h2><p>XShell是一个强大的安全终端模拟软件,可以在Windows界面下用来访问远端不同系统下的服务器，从而比较好的达到远程控制终端的目的。<br><a href="https://xshell.en.softonic.com/">安装</a><br><a href="https://www.jianshu.com/p/4716cc35750f">参考</a></p><h2 id="远程连接"><a href="#远程连接" class="headerlink" title="远程连接"></a>远程连接</h2><p>选择导航菜单的文件 –&gt; 新建，输入名称和主机IP，协议默认SSH，端口默认22，如果不知道主机IP可以登录虚拟机的Linux系统，输入命令ifconfig查看(inet addr)</p><p>然后在左侧用户身份验证中输入用户名和密码，这样下次就可以直接连接了，当然如果为了安全考虑也可以不输入密码，在每次连接时再输入。</p><h3 id="Xshell怎么与云服务器连接"><a href="#Xshell怎么与云服务器连接" class="headerlink" title="Xshell怎么与云服务器连接"></a>Xshell怎么与云服务器连接</h3><p>打开Xshell，新建一个会话</p><p>主机填服务器ip,点击连接</p><p>用户名默认为root,而不是实例名，也不是你服务器中Linux的用户名；<br>密码则为服务器实例密码</p><h2 id="centos内核"><a href="#centos内核" class="headerlink" title="centos内核"></a>centos内核</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  版本信息</span></span><br><span class="line">cat /etc/centos-release </span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看Linux内核信息</span></span><br><span class="line">uname -a  </span><br></pre></td></tr></tbody></table></figure><h2 id="NAT配置"><a href="#NAT配置" class="headerlink" title="NAT配置"></a>NAT配置</h2><h3 id="检查环境-能上网，安装了net-tools"><a href="#检查环境-能上网，安装了net-tools" class="headerlink" title="检查环境: 能上网，安装了net-tools."></a>检查环境: 能上网，安装了net-tools.</h3><p>（1）能否上网（ping <a href="http://www.baidu.com/">www.baidu.com</a>)<br>如不能上网。配置/etc/sysconfig/network-scripts/ifcfg-ens33<br>（2）是否安装了 net-tools.  (因为需要使用命令 route )<br>如没有， yum -y install net-tools</p><h3 id="搭建网络"><a href="#搭建网络" class="headerlink" title="搭建网络"></a>搭建网络</h3><p>一台Sever (2张网卡） + 一台 Client（一张网卡）</p><p>安装（或克隆）一台虚拟机名为：Client. 原来那台可改名叫（Server)。<br>Server 上再安装一张网卡，并配成“仅主机模式”。（原来应该那一张应该为NAT模式）。<br>Client 网卡配成 “仅主机模式”</p><h3 id="配置NAT"><a href="#配置NAT" class="headerlink" title="配置NAT"></a>配置NAT</h3><p>（1）开启Server 和 Client, 用 root 登录。<br>（2）在Server 上运行： <code>ip addr</code>记录下 ens37 (也就是Server 的第二张网卡） 的ip：192.168.221.128<br>（3）设置Client网关，在Client 上 运行:<br><code>route add default gw 192.168.221.128  #添加一条默认网关</code><br>（如要查看网关 是否设置成功，可以运行：route -n)</p><p>（4）在Server设置地址伪装 ， 运行：</p><p>(5）重启防火墙<code>systemctl restart firewalld.service</code></p><p>(6)在Client 上ping测试是否成功</p><p>(7)在Client上配置本地DNS:去到目录 /etc 下， 用vi 编辑 文件 “resolv.conf” </p><h1 id="搭建云上博客"><a href="#搭建云上博客" class="headerlink" title="搭建云上博客"></a>搭建云上博客</h1><p>不知道教程是不是太旧了，跟着做，都是报错</p><h2 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h2><h3 id="安装Apache服务及其扩展包"><a href="#安装Apache服务及其扩展包" class="headerlink" title="安装Apache服务及其扩展包"></a>安装Apache服务及其扩展包</h3><p>跟着官网做发现安装失败</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum -y install httpd httpd-manual mod_ssl mod_perl mod_auth_mysql</span><br><span class="line"></span><br><span class="line">Last metadata expiration check: 0:30:48 ago on Thu 17 Mar 2022 08:21:43 AM CST.</span><br><span class="line">No match for argument: mod_auth_mysql</span><br><span class="line">Error: Unable to find a match: mod_auth_mysql</span><br></pre></td></tr></tbody></table></figure><p>搜索到的解决方案</p><ol><li><p> yum -y install httpd httpd-manual mod_ssl mod_perl</p></li><li><p> yum -y install httpd httpd-devel</p><h3 id="启动Apache服务。"><a href="#启动Apache服务。" class="headerlink" title="启动Apache服务。"></a>启动Apache服务。</h3><p>systemctl start httpd.service</p><h3 id="设置安全组"><a href="#设置安全组" class="headerlink" title="设置安全组"></a>设置安全组</h3><p>教程上没有说清楚</p></li></ol><p>进入实例，点击安全组链接进去</p><p>然后点击快速添加<br>选端口范围为http(80)</p><p>打开浏览器输入ECS服务器的公网IP，显示测试页面表示Apache服务安装成功。</p><h1 id="搭建网盘Cloudreve"><a href="#搭建网盘Cloudreve" class="headerlink" title="搭建网盘Cloudreve"></a>搭建网盘Cloudreve</h1><h2 id="官网"><a href="#官网" class="headerlink" title="官网"></a>官网</h2><p>官网：</p><p>cloudreve.org</p><p>github：</p><p><a href="https://github.com/cloudreve/Cloudreve">https://github.com/cloudreve/Cloudreve</a></p><p>下载：</p><p><a href="https://github.com/cloudreve/Cloudreve/releases">https://github.com/cloudreve/Cloudreve/releases</a></p><p>安装文档：</p><p><a href="https://docs.cloudreve.org/getting-started/install">https://docs.cloudreve.org/getting-started/install</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cd /opt #选定/opt作为安装目录</span><br><span class="line">wget https://github.com/cloudreve/Cloudreve/releases/download/3.1.1/cloudreve_3.1.1_linux_amd64.tar.gz</span><br><span class="line">tar -zxvf cloudreve_3.1.1_linux_amd64.tar.gz   #解压获取到的主程序</span><br><span class="line">chmod +x ./cloudreve  #赋予执行权限</span><br><span class="line">./cloudreve   #启动 Cloudreve</span><br></pre></td></tr></tbody></table></figure><p>Cloudreve 在首次启动时，会创建初始管理员账号，请注意保管管理员密码，此密码只会在首次启动时出现。如果您忘记初始管理员密码，需要删除同级目录下的“cloudreve.db”，重新启动主程序以初始化新的管理员账户。</p><p>Cloudreve 默认会监听“5212”端口。你可以在浏览器中访问  http://服务器ip:5212  进入 Cloudreve。如果宝塔面板需要在安全中放行“5212”端口。注意用默认的管理账号和密码登录。</p><h2 id="添加守护进程"><a href="#添加守护进程" class="headerlink" title="添加守护进程"></a>添加守护进程</h2><p>软件商店→系统工具 ，找到Supervisor管理器安装<br>打开Supervisor管理器添加守护进程</p><h2 id="什么是反向代理"><a href="#什么是反向代理" class="headerlink" title="什么是反向代理"></a>什么是反向代理</h2><p>反向代理是充当Web服务器网关的代理服务器。当您将请求发送到使用反向代理的Web服务器时，他们将先转到反向代理，由该代理将确定是将其路由到Web服务器还是将其阻止。</p><p>这意味着有了反向代理，您永远不会与使用它的Web服务器进行直接通信。可以将它们看作web服务器或服务器集群的某种包装器。通过负载平衡和缓存，它们可以保护web免遭攻击，并提供更好的web性能。</p><h1 id="宝塔Linux面板"><a href="#宝塔Linux面板" class="headerlink" title="宝塔Linux面板"></a>宝塔Linux面板</h1><p><a href="https://blog.csdn.net/vpssws/article/details/117136583?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3">https://blog.csdn.net/vpssws/article/details/117136583?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_utm_term~default-0.pc_relevant_paycolumn_v3&amp;spm=1001.2101.3001.4242.1&amp;utm_relevant_index=3</a></p><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Centos安装命令：</span></span><br><span class="line">yum install -y wget &amp;&amp; wget -O install.sh http://download.bt.cn/install/install_6.0.sh &amp;&amp; sh install.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu/Deepin安装命令：</span></span><br><span class="line">wget -O install.sh http://download.bt.cn/install/install-ubuntu_6.0.sh &amp;&amp; sudo bash install.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">显示面板的使用帮助菜单选项。</span></span><br><span class="line">bt</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">卸载面板</span></span><br><span class="line">wget http://download.bt.cn/install/bt-uninstall.sh</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">执行脚本：</span></span><br><span class="line">sh bt-uninstall.sh</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>安装软件时，推荐使用编译安装</p><h2 id="面板特色功能："><a href="#面板特色功能：" class="headerlink" title="面板特色功能："></a>面板特色功能：</h2><p>一键配置服务器环境（LAMP/LNMP）<br>一键安全重启<br>一键创建管理网站、ftp、数据库<br>一键部署SSL证书<br>一键部署源码（discuz、wordpress、dedecms、z-blog、微擎等等）<br>一键配置（定期备份、数据导入、伪静态、301、SSL、子目录、反向代理、切换PHP版本）<br>一键安装常用PHP扩展(fileinfo、intl、opcache、imap、memcache、apc、redis、ioncube、imagick)<br>数据库一键导入导出<br>系统监控（CPU、内存、磁盘IO、网络IO）<br>防火墙端口放行<br>SSH开启与关闭及SSH端口更改<br>禁PING开启或关闭<br>方便高效的文件管理器（上传、下载、压缩、解压、查看、编辑等等）<br>计划任务（定期备份、日志切割、shell脚本）<br>软件管理（一键安装、卸载、版本切换）</p><h2 id="添加站点"><a href="#添加站点" class="headerlink" title="添加站点"></a>添加站点</h2><p>添加站点就是添加一个域名进去，通过这个域名可以访问你的网页，或者直接填写你的ip进去，然后浏览器输入你的ip访问一下就看到结果了</p><h2 id="LNMP-环境"><a href="#LNMP-环境" class="headerlink" title="LNMP 环境"></a>LNMP 环境</h2><p>LNMP 是 Linux、Nginx、MariaDB 和 PHP 的缩写，这个组合是最常见的 Web 服务器的运行环境之一。用宝塔面板一键安装</p><h2 id="ftp服务"><a href="#ftp服务" class="headerlink" title="ftp服务"></a>ftp服务</h2><h1 id="python自动化部署"><a href="#python自动化部署" class="headerlink" title="python自动化部署"></a>python自动化部署</h1><p>Python提供了一个paramiko库，能够支持SSH和SFTP协议，可以取代Xshell和Xftp，下面是把本机的jar文件上传到服务器并运行的Python脚本：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> paramiko</span><br><span class="line"> </span><br><span class="line">IP = <span class="string">'106.14.19.127'</span></span><br><span class="line">user = <span class="string">'root'</span></span><br><span class="line">password = <span class="string">'server-pwd'</span></span><br><span class="line"> </span><br><span class="line">local_jar = <span class="string">'/target/ser1-1.0.jar'</span></span><br><span class="line">server_jar = <span class="string">'/root/ser1-1.0.jar'</span></span><br><span class="line">server_property = <span class="string">'/root/ser1.properties'</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">execute_cmds</span>(<span class="params">ip, name, pwd, cmd</span>):</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        ssh = paramiko.SSHClient()</span><br><span class="line">        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())</span><br><span class="line">        ssh.connect(ip, <span class="number">22</span>, name, pwd, timeout=<span class="number">5</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'连接成功'</span></span><br><span class="line">        sftp = ssh.open_sftp()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'正在上传...'</span></span><br><span class="line">        sftp.put(local_jar, server_jar)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'jar上传成功'</span></span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> cmd:</span><br><span class="line">            <span class="built_in">print</span> m</span><br><span class="line">            stdin, stdout, stderr = ssh.exec_command(m)</span><br><span class="line">            out = stdout.readlines()</span><br><span class="line">            <span class="keyword">for</span> o <span class="keyword">in</span> out:</span><br><span class="line">                <span class="built_in">print</span> o,</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'运行成功'</span></span><br><span class="line">        ssh.close()</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'关闭连接'</span></span><br><span class="line">    <span class="keyword">except</span> Exception, error:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">'错误:  %s'</span> % (error)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="built_in">print</span> <span class="string">'Start deploying %s to server %s'</span> % (server_jar, IP)</span><br><span class="line">    cmd = [</span><br><span class="line">        <span class="string">'echo Start spring...'</span>,</span><br><span class="line">        <span class="string">'nohup java -jar -Dspring.config.location='</span> + server_property + <span class="string">' '</span> + server_jar + <span class="string">' &amp;'</span>,</span><br><span class="line">        <span class="string">'echo All done.'</span></span><br><span class="line">    ]</span><br><span class="line">    a = threading.Thread(target=execute_cmds, args=(IP, user, password, cmd))</span><br><span class="line">    a.start()</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用linux的好处&quot;&gt;&lt;a href=&quot;#使用linux的好处&quot; class=&quot;headerlink&quot; title=&quot;使用linux的好处&quot;&gt;&lt;/a&gt;使用linux的好处&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/MP</summary>
      
    
    
    
    <category term="工具" scheme="https://wenkexia.github.io/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="linux" scheme="https://wenkexia.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>python数据结构</title>
    <link href="https://wenkexia.github.io/2022/02191106.html"/>
    <id>https://wenkexia.github.io/2022/02191106.html</id>
    <published>2022-02-19T04:04:47.000Z</published>
    <updated>2022-02-19T04:04:47.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.yiibai.com/python/py_data_structure/python_data_structure_introduction.html">https://www.yiibai.com/python/py_data_structure/python_data_structure_introduction.html</a></p><h1 id="线性数据结构"><a href="#线性数据结构" class="headerlink" title="线性数据结构"></a>线性数据结构</h1><p>这些是以顺序方式存储数据元素的数据结构。例如 - </p><h2 id="数组-它是与数据元素的索引配对的数据元素的顺序排列。"><a href="#数组-它是与数据元素的索引配对的数据元素的顺序排列。" class="headerlink" title="数组: 它是与数据元素的索引配对的数据元素的顺序排列。"></a>数组: 它是与数据元素的索引配对的数据元素的顺序排列。</h2><h2 id="链表-每个数据元素都包含一个指向另一个元素的链接及其中的数据。"><a href="#链表-每个数据元素都包含一个指向另一个元素的链接及其中的数据。" class="headerlink" title="链表: 每个数据元素都包含一个指向另一个元素的链接及其中的数据。"></a>链表: 每个数据元素都包含一个指向另一个元素的链接及其中的数据。</h2><p>链表相较于数组，除了数据域，还增加了指针域用于构建链式的存储数据。链表中每一个节点都包含此节点的数据和指向下一节点地址的指针。由于是通过指针进行下一个数据元素的查找和访问，使得链表的自由度更高。</p><p>这表现在对节点进行增加和删除时，只需要对上一节点的指针地址进行修改，而无需变动其它的节点。不过事物皆有两极，指针带来高自由度的同时，自然会牺牲数据查找的效率和多余空间的使用。</p><p>一般常见的是有头有尾的单链表，对指针域进行反向链接，还可以形成双向链表或者循环链表。</p><p>链表和数组对比<br>链表和数组在实际的使用过程中需要根据自身的优劣势进行选择。链表和数组的异同点也是面试中高频的考察点之一。这里对单链表和数组的区别进行了对比和总结。</p><h2 id="堆栈-这是一种仅遵循特定操作顺序的数据结构。LIFO-后进先出-或FILO-先进先出-。"><a href="#堆栈-这是一种仅遵循特定操作顺序的数据结构。LIFO-后进先出-或FILO-先进先出-。" class="headerlink" title="堆栈: 这是一种仅遵循特定操作顺序的数据结构。LIFO(后进先出)或FILO(先进先出)。"></a>堆栈: 这是一种仅遵循特定操作顺序的数据结构。LIFO(后进先出)或FILO(先进先出)。</h2><p>队列: 与堆栈(Stack)类似，但操作顺序仅为FIFO(先进先出)。<br>矩阵: 它是二维数据结构，其中数据元素由一对索引引用。</p><h1 id="非线性数据结构"><a href="#非线性数据结构" class="headerlink" title="非线性数据结构"></a>非线性数据结构</h1><p>这些数据结构中没有数据元素的顺序链接。任何一对或一组数据元素都可以相互关联，并且可以在没有严格顺序的情况下进行访问。</p><p>二叉树:它是一个数据结构，每个数据元素可以连接到最多两个其他数据元素，并以一个根节点开始。<br>堆: 这是树形数据结构的特殊情况，其中父节点中的数据严格大于/等于子节点或严格小于其子节点。<br>哈希表: 它是一个数据结构，它由使用散列函数相互关联的数组构成。它使用键而不是数据元素的索引来检索值。<br>图: 它是顶点和节点的排列，其中一些节点通过链接彼此连接。</p><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><p>数组可以说是最基本最常见的数据结构。数组一般用来存储相同类型的数据，可通过数组名和下标进行数据的访问和更新。数组中元素的存储是按照先后顺序进行的，同时在内存中也是按照这个顺序进行连续存放。数组相邻元素之间的内存地址的间隔一般就是数组数据类型的大小。</p><h1 id="跳表"><a href="#跳表" class="headerlink" title="跳表"></a>跳表</h1><p>从上面的对比中可以看出，链表虽然通过增加指针域提升了自由度，但是却导致数据的查询效率恶化。特别是当链表长度很长的时候，对数据的查询还得从头依次查询，这样的效率会更低。跳表的产生就是为了解决链表过长的问题，通过增加链表的多级索引来加快原始链表的查询效率。这样的方式可以让查询的时间复杂度从O(n)提升至O(logn)。</p><p>图片</p><p>跳表通过增加的多级索引能够实现高效的动态插入和删除，其效率和红黑树和平衡二叉树不相上下。目前redis和levelDB都有用到跳表。</p><p>从上图可以看出，索引级的指针域除了指向下一个索引位置的指针，还有一个down指针指向低一级的链表位置，这样才能实现跳跃查询的目的。</p><h1 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h1><p>栈是一种比较简单的数据结构，常用一句话描述其特性，后进先出。栈本身是一个线性表，但是在这个表中只有一个口子允许数据的进出。这种模式可以参考腔肠动物…即进食和排泄都用一个口…</p><p>栈的常用操作包括入栈push和出栈pop，对应于数据的压入和压出。还有访问栈顶数据、判断栈是否为空和判断栈的大小等。由于栈后进先出的特性，常可以作为数据操作的临时容器，对数据的顺序进行调控，与其它数据结构相结合可获得许多灵活的处理。</p><p>图片</p><h1 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h1><p>队列是栈的兄弟结构，与栈的后进先出相对应，队列是一种先进先出的数据结构。顾名思义，队列的数据存储是如同排队一般，先存入的数据先被压出。常与栈一同配合，可发挥最大的实力。</p><p>图片</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><p>树作为一种树状的数据结构，其数据节点之间的关系也如大树一样，将有限个节点根据不同层次关系进行排列，从而形成数据与数据之间的父子关系。常见的数的表示形式更接近“倒挂的树”，因为它将根朝上，叶朝下。</p><p>树的数据存储在结点中，每个结点有零个或者多个子结点。没有父结点的结点在最顶端，成为根节点；没有非根结点有且只有一个父节点；每个非根节点又可以分为多个不相交的子树。</p><p>这意味着树是具备层次关系的，父子关系清晰，家庭血缘关系明朗；这也是树与图之间最主要的区别。</p><p>图片</p><p>别看树好像很高级，其实可看作是链表的高配版。树的实现就是对链表的指针域进行了扩充，增加了多个地址指向子结点。同时将“链表”竖起来，从而凸显了结点之间的层次关系，更便于分析和理解。</p><p>树可以衍生出许多的结构，若将指针域设置为双指针，那么即可形成最常见的二叉树，即每个结点最多有两个子树的树结构。二叉树根据结点的排列和数量还可进一度划分为完全二叉树、满二叉树、平衡二叉树、红黑树等。</p><p>图片</p><p>完全二叉树：除了最后一层结点，其它层的结点数都达到了最大值；同时最后一层的结点都是按照从左到右依次排布。</p><p>满二叉树：除了最后一层，其它层的结点都有两个子结点。</p><p>平衡二叉树<br>平衡二叉树又被称为AVL树，它是一棵二叉排序树，且具有以下性质：它是一棵空树或它的左右两个子树的高度差的绝对值不超过1，并且左右两个子树都是一棵平衡二叉树。</p><p>二叉排序树：是一棵空树，或者：若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值；若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；它的左、右子树也分别为二叉排序树。</p><p>树的高度：结点层次的最大值</p><p>平衡因子：左子树高度 - 右子树高度</p><p>二叉排序树意味着二叉树中的数据是排好序的，顺序为左结点&lt;根节点&lt;右结点，这表明二叉排序树的中序遍历结果是有序的。（还不懂二叉树四种遍历方式[前序遍历、中序遍历、后序遍历、层序遍历]的同学赶紧补习！）</p><p>图片</p><p>平衡二叉树的产生是为了解决二叉排序树在插入时发生线性排列的现象。由于二叉排序树本身为有序，当插入一个有序程度十分高的序列时，生成的二叉排序树会持续在某个方向的字数上插入数据，导致最终的二叉排序树会退化为链表，从而使得二叉树的查询和插入效率恶化。</p><p>图片</p><p>平衡二叉树的出现能够解决上述问题，但是在构造平衡二叉树时，却需要采用不同的调整方式，使得二叉树在插入数据后保持平衡。主要的四种调整方式有LL（左旋）、RR（右旋）、LR（先左旋再右旋）、RL（先右旋再左旋）。这里先给大家介绍下简单的单旋转操作，左旋和右旋。LR和RL本质上只是LL和RR的组合。</p><p>在插入一个结点后应该沿搜索路径将路径上的结点平衡因子进行修改，当平衡因子大于1时，就需要进行平衡化处理。从发生不平衡的结点起，沿刚才回溯的路径取直接下两层的结点，如果这三个结点在一条直线上，则采用单旋转进行平衡化，如果这三个结点位于一条折线上，则采用双旋转进行平衡化。</p><p>左旋：S为当前需要左旋的结点，E为当前结点的父节点。</p><p>图片</p><p>左旋的操作可以用一句话简单表示：将当前结点S的左孩子旋转为当前结点父结点E的右孩子，同时将父结点E旋转为当前结点S的左孩子。可用动画表示：</p><p>图片</p><p>右旋：S为当前需要左旋的结点，E为当前结点的父节点。右单旋是左单旋的镜像旋转。</p><p>图片</p><p>左旋的操作同样可以用一句话简单表示：将当前结点S的左孩子E的右孩子旋转为当前结点S的左孩子，同时将当前结点S旋转为左孩子E的右孩子。可用动画表示：</p><p>图片</p><p>红黑树<br>平衡二叉树（AVL）为了追求高度平衡，需要通过平衡处理使得左右子树的高度差必须小于等于1。高度平衡带来的好处是能够提供更高的搜索效率，其最坏的查找时间复杂度都是O(logN)。但是由于需要维持这份高度平衡，所付出的代价就是当对树种结点进行插入和删除时，需要经过多次旋转实现复衡。这导致AVL的插入和删除效率并不高。</p><p>为了解决这样的问题，能不能找一种结构能够兼顾搜索和插入删除的效率呢？这时候红黑树便申请出战了。</p><p>红黑树具有五个特性：</p><p>每个结点要么是红的要么是黑的。<br>根结点是黑的。<br>每个叶结点（叶结点即指树尾端NIL指针或NULL结点）都是黑的。<br>如果一个结点是红的，那么它的两个儿子都是黑的。<br>对于任意结点而言，其到叶结点树尾端NIL指针的每条路径都包含相同数目的黑结点。<br>图片红黑树通过将结点进行红黑着色，使得原本高度平衡的树结构被稍微打乱，平衡程度降低。红黑树不追求完全平衡，只要求达到部分平衡。这是一种折中的方案，大大提高了结点删除和插入的效率。C++中的STL就常用到红黑树作为底层的数据结构。</p><p>红黑树VS平衡二叉树<br>图片</p><p>除了上面所提及的树结构，还有许多广泛应用在数据库、磁盘存储等场景下的树结构。比如B树、B+树等。这里就先不介绍了诶，下次在讲述相关存储原理的时候将会着重介绍。（其实是因为懒）</p><p> 7  堆<br>了解完二叉树，再来理解堆就不是什么难事了。堆通常是一个可以被看做一棵树的数组对象。堆的具体实现一般不通过指针域，而是通过构建一个一维数组与二叉树的父子结点进行对应，因此堆总是一颗完全二叉树。</p><p>对于任意一个父节点的序号n来说（这里n从0算），它的子节点的序号一定是2n+1，2n+2，因此可以直接用数组来表示一个堆。</p><p>不仅如此，堆还有一个性质：堆中某个节点的值总是不大于或不小于其父节点的值。将根节点最大的堆叫做最大堆或大根堆，根节点最小的堆叫做最小堆或小根堆。</p><p>图片</p><p>堆常用来实现优先队列，在面试中经常考的问题都是与排序有关，比如堆排序、topK问题等。由于堆的根节点是序列中最大或者最小值，因而可以在建堆以及重建堆的过程中，筛选出数据序列中的极值，从而达到排序或者挑选topK值的目的。</p><p> 8  散列表<br>散列表也叫哈希表，是一种通过键值对直接访问数据的机构。在初中，我们就学过一种能够将一个x值通过一个函数获得对应的一个y值的操作，叫做映射。散列表的实现原理正是映射的原理，通过设定的一个关键字和一个映射函数，就可以直接获得访问数据的地址，实现O(1)的数据访问效率。在映射的过程中，事先设定的函数就是一个映射表，也可以称作散列函数或者哈希函数。</p><p>图片</p><p>散列表的实现最关键的就是散列函数的定义和选择。一般常用的有以下几种散列函数：</p><p>直接寻址法：取关键字或关键字的某个线性函数值为散列地址。</p><p>数字分析法：通过对数据的分析，发现数据中冲突较少的部分，并构造散列地址。例如同学们的学号，通常同一届学生的学号，其中前面的部分差别不太大，所以用后面的部分来构造散列地址。</p><p>平方取中法：当无法确定关键字里哪几位的分布相对比较均匀时，可以先求出关键字的平方值，然后按需要取平方值的中间几位作为散列地址。这是因为：计算平方之后的中间几位和关键字中的每一位都相关，所以不同的关键字会以较高的概率产生不同的散列地址。</p><p>取随机数法：使用一个随机函数，取关键字的随机值作为散列地址，这种方式通常用于关键字长度不同的场合。</p><p>除留取余法：取关键字被某个不大于散列表的表长 n 的数 m 除后所得的余数 p 为散列地址。这种方式也可以在用过其他方法后再使用。该函数对 m 的选择很重要，一般取素数或者直接用 n。</p><p>确定好散列函数之后，通过某个key值的确会得到一个唯一的value地址。但是却会出现一些特殊情况。即通过不同的key值可能会访问到同一个地址，这个现象称之为冲突。</p><p>冲突在发生之后，当在对不同的key值进行操作时会使得造成相同地址的数据发生覆盖或者丢失，是非常危险的。所以在设计散列表往往还需要采用冲突解决的办法。</p><p>常用的冲突处理方式有很多，常用的包括以下几种：</p><p>开放地址法（也叫开放寻址法）：实际上就是当需要存储值时，对Key哈希之后，发现这个地址已经有值了，这时该怎么办？不能放在这个地址，不然之前的映射会被覆盖。这时对计算出来的地址进行一个探测再哈希，比如往后移动一个地址，如果没人占用，就用这个地址。如果超过最大长度，则可以对总长度取余。这里移动的地址是产生冲突时的增列序量。</p><p>再哈希法：在产生冲突之后，使用关键字的其他部分继续计算地址，如果还是有冲突，则继续使用其他部分再计算地址。这种方式的缺点是时间增加了。</p><p>链地址法：链地址法其实就是对Key通过哈希之后落在同一个地址上的值，做一个链表。其实在很多高级语言的实现当中，也是使用这种方式处理冲突的。</p><p>公共溢出区：这种方式是建立一个公共溢出区，当地址存在冲突时，把新的地址放在公共溢出区里。</p><p>目前比较常用的冲突解决方法是链地址法，一般可以通过数组和链表的结合达到冲突数据缓存的目的。</p><p>图片</p><p>左侧数组的每个成员包括一个指针，指向一个链表的头。每发生一个冲突的数据，就将该数据作为链表的节点链接到链表尾部。这样一来，就可以保证冲突的数据能够区分并顺利访问。<br>考虑到链表过长造成的问题，还可以使用红黑树替换链表进行冲突数据的处理操作，来提高散列表的查询稳定性。</p><p> 9  图<br>图相较于上文的几个结构可能接触的不多，但是在实际的应用场景中却经常出现。比方说交通中的线路图，常见的思维导图都可以看作是图的具体表现形式。</p><p>图结构一般包括顶点和边，顶点通常用圆圈来表示，边就是这些圆圈之间的连线。边还可以根据顶点之间的关系设置不同的权重，默认权重相同皆为1。此外根据边的方向性，还可将图分为有向图和无向图。</p><p>图片</p><p>图结构用抽象的图线来表示十分简单，顶点和边之间的关系非常清晰明了。但是在具体的代码实现中，为了将各个顶点和边的关系存储下来，却不是一件易事。</p><p>邻接矩阵<br>目前常用的图存储方式为邻接矩阵，通过所有顶点的二维矩阵来存储两个顶点之间是否相连，或者存储两顶点间的边权重。</p><p>图片</p><p>无向图的邻接矩阵是一个对称矩阵，是因为边不具有方向性，若能从此顶点能够到达彼顶点，那么彼顶点自然也能够达到此顶点。此外，由于顶点本身与本身相连没有意义，所以在邻接矩阵中对角线上皆为0。</p><p>图片</p><p>有向图由于边具有方向性，因此彼此顶点之间并不能相互达到，所以其邻接矩阵的对称性不再。<br>用邻接矩阵可以直接从二维关系中获得任意两个顶点的关系，可直接判断是否相连。但是在对矩阵进行存储时，却需要完整的一个二维数组。若图中顶点数过多，会导致二维数组的大小剧增，从而占用大量的内存空间。</p><p>而根据实际情况可以分析得，图中的顶点并不是任意两个顶点间都会相连，不是都需要对其边上权重进行存储。那么存储的邻接矩阵实际上会存在大量的0。虽然可以通过稀疏表示等方式对稀疏性高的矩阵进行关键信息的存储，但是却增加了图存储的复杂性。</p><p>因此，为了解决上述问题，一种可以只存储相连顶点关系的邻接表应运而生。</p><p>邻接表<br>在邻接表中，图的每一个顶点都是一个链表的头节点，其后连接着该顶点能够直接达到的相邻顶点。相较于无向图，有向图的情况更为复杂，因此这里采用有向图进行实例分析。</p><p>图片在邻接表中，每一个顶点都对应着一条链表，链表中存储的是顶点能够达到的相邻顶点。存储的顺序可以按照顶点的编号顺序进行。比如上图中对于顶点B来说，其通过有向边可以到达顶点A和顶点E，那么其对应的邻接表中的顺序即B-&gt;A-&gt;E，其它顶点亦如此。</p><p>通过邻接表可以获得从某个顶点出发能够到达的顶点，从而省去了对不相连顶点的存储空间。然而，这还不够。对于有向图而言，图中有效信息除了从顶点“指出去”的信息，还包括从别的顶点“指进来”的信息。这里的“指出去”和“指进来”可以用出度和入度来表示。</p><p>入度：有向图的某个顶点作为终点的次数和。</p><p>出度：有向图的某个顶点作为起点的次数和。</p><p>由此看出，在对有向图进行表示时，邻接表只能求出图的出度，而无法求出入度。这个问题很好解决，那就是增加一个表用来存储能够到达某个顶点的相邻顶点。这个表称作逆邻接表。</p><p>逆邻接表<br>逆邻接表与邻接表结构类似，只不过图的顶点链接着能够到达该顶点的相邻顶点。也就是说，邻接表时顺着图中的箭头寻找相邻顶点，而逆邻接表时逆着图中的箭头寻找相邻顶点。</p><p>图片</p><p>邻接表和逆邻接表的共同使用下，就能够把一个完整的有向图结构进行表示。可以发现，邻接表和逆邻接表实际上有一部分数据时重合的，因此可以将两个表合二为一，从而得到了所谓的十字链表。</p><p>十字链表<br>十字链表似乎很简单，只需要通过相同的顶点分别链向以该顶点为终点和起点的相邻顶点即可。</p><p>图片</p><p>但这并不是最优的表示方式。虽然这样的方式共用了中间的顶点存储空间，但是邻接表和逆邻接表的链表节点中重复出现的顶点并没有得到重复利用，反而是进行了再次存储。因此，上图的表示方式还可以进行进一步优化。</p><p>十字链表优化后，可通过扩展的顶点结构和边结构来进行正逆邻接表的存储：（下面的弧头可看作是边的箭头那端，弧尾可看作是边的圆点那端）</p><p>data：用于存储该顶点中的数据；</p><p>firstin指针：用于连接以当前顶点为弧头的其他顶点构成的链表，即从别的顶点指进来的顶点；</p><p>firstout指针：用于连接以当前顶点为弧尾的其他顶点构成的链表，即从该顶点指出去的顶点；</p><p>边结构通过存储两个顶点来确定一条边，同时通过分别代表这两个顶点的指针来与相邻顶点进行链接：</p><p>tailvex：用于存储作为弧尾的顶点的编号；</p><p>headvex：用于存储作为弧头的顶点的编号；</p><p>headlink 指针：用于链接下一个存储作为弧头的顶点的节点；</p><p>taillink 指针：用于链接下一个存储作为弧尾的顶点的节点；</p><p>图片</p><p>以上图为例子，对于顶点A而言，其作为起点能够到达顶点E。因此在邻接表中顶点A要通过边AE（即边04）指向顶点E，顶点A的firstout指针需要指向边04的tailvex。同时，从B出发能够到达A，所以在逆邻接表中顶点A要通过边AB（即边10）指向B，顶点A的firstin指针需要指向边10的弧头，即headlink指针。依次类推。</p><p>十字链表采用了一种看起来比较繁乱的方式对边的方向性进行了表示，能够在尽可能降低存储空间的情况下增加指针保留顶点之间的方向性。具体的操作可能一时间不好弄懂，建议多看几次上图，弄清指针指向的意义，明白正向和逆向邻接表的表示。</p><p> 10  总结<br>数据结构博大精深，没有高等数学的讳莫如深，也没有量子力学的玄乎其神，但是其在计算机科学的各个领域都具有强大的力量。本文试图采用图解的方式对九种数据结构进行理论上的介绍，但是其实这都是不够的。</p><p>即便是简单的数组、栈、队列等结构，在实际使用以及底层实现上都会有许多优化设计以及使用技巧，这意味着还需要真正把它们灵活的用起来，才能够算是真正意义上的熟悉和精通。但是本文可以作为常见数据结构的一个总结，当你对某些结构有些淡忘的时候，不妨重新回来看看。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.yiibai.com/python/py_data_structure/python_data_structure_introduction.html&quot;&gt;https://www.yiibai.com/python/py_data_s</summary>
      
    
    
    
    <category term="pytohn" scheme="https://wenkexia.github.io/categories/pytohn/"/>
    
    
    <category term="数据结构" scheme="https://wenkexia.github.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序</title>
    <link href="https://wenkexia.github.io/2022/012435506.html"/>
    <id>https://wenkexia.github.io/2022/012435506.html</id>
    <published>2022-01-24T09:33:43.000Z</published>
    <updated>2022-01-24T09:33:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p>pages用来存放所有小程序的页面<br>utils用来存放工具性质的模块(例如：格式化时间的自定义模块)<br>app. js小程序项目的入口文件<br>app.json小程序项目的全局配置文件<br>app.Wxss小程序项目的全局样式文件<br>project. config. json项目的配置文件<br>sitemap json用来配置小程序及其页面是否允许被微信索引 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目录结构&quot;&gt;&lt;a href=&quot;#目录结构&quot; class=&quot;headerlink&quot; title=&quot;目录结构&quot;&gt;&lt;/a&gt;目录结构&lt;/h1&gt;&lt;p&gt;pages用来存放所有小程序的页面&lt;br&gt;utils用来存放工具性质的模块(例如：格式化时间的自定义模块)&lt;br&gt;app. </summary>
      
    
    
    
    <category term="知识" scheme="https://wenkexia.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="小程序" scheme="https://wenkexia.github.io/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>window使用</title>
    <link href="https://wenkexia.github.io/2022/012246677.html"/>
    <id>https://wenkexia.github.io/2022/012246677.html</id>
    <published>2022-01-22T01:09:49.000Z</published>
    <updated>2022-01-22T01:09:49.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h1><h2 id="不认识的汉字怎么打"><a href="#不认识的汉字怎么打" class="headerlink" title="不认识的汉字怎么打"></a>不认识的汉字怎么打</h2><p>u+汉字各部分的拼音</p><h1 id="扩展屏幕"><a href="#扩展屏幕" class="headerlink" title="扩展屏幕"></a>扩展屏幕</h1><p>如何在笔记本盖上盖子时，扩展显示屏也能显示。<br>在设置中搜索打开控制面板，然后找到电源选项打开，找到选择关闭笔记本计算机盖的功能<br><img src="https://gitee.com/wenkex/blogimage/raw/master/Quicker_20220122_091908.png"></p><h1 id="文件无法删除"><a href="#文件无法删除" class="headerlink" title="文件无法删除"></a>文件无法删除</h1><p>解决Windows10中“其中文件夹或文件已在另一程序中打开”引起的文件删不掉问题</p><h2 id="打开任务管理器"><a href="#打开任务管理器" class="headerlink" title="打开任务管理器"></a>打开任务管理器</h2><h2 id="打开资源监视器"><a href="#打开资源监视器" class="headerlink" title="打开资源监视器"></a>打开资源监视器</h2><p>1.切换任务管理器到“性能”选项页，点击最下方的“打开资源监视器”字。<br><img src="https://gitee.com/wenkex/blogimage/raw/master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20220104192240.png"><br>2.搜索与该文件关联的程序并关闭</p><p>以删除word文件“文件123.docx”为例：删除桌面上“文件123.docx”文件，显示该文件已被其他程序打开，暂时无法删除。</p><p>此时在资源监视器搜索句柄处填上文件123，即可搜索与这个文件相关联的应用程序句柄。<br><img src="https://gitee.com/wenkex/blogimage/raw/master/v2-48385ce4a09d453981e9b06b1202065d_r.jpg"><br>点击与文件123相关联的句柄，然后点击鼠标右键，选择结束进程<br>此时会弹出结束进程确认对话框。<br>点击“结束进程”关闭与“文件123.docx”关联的进程。</p><p>怎样关闭Win10安装软件、改变设置时的弹窗？<br>打开更改用户账户设置  </p><p>Windows系统hosts文件路径为：C:\Windows\System32\drivers\etc</p><p>Win10电脑设置定时关机命令：<br>Win +r  输入：shutdown -s -t 3600            一小时后关机</p><p>Win10进入开机自启文件夹<br>Win+r进入运行，输入shell:startup</p><h1 id="快捷键汇总"><a href="#快捷键汇总" class="headerlink" title="快捷键汇总"></a>快捷键汇总</h1><p>win+上下箭头键：【最大化】【还原】【最小化】当前窗口</p><p>win+左右箭头键：将窗口靠左、靠右。如果有两个窗口则并列</p><p>按住ctrl 可多选文件</p><p>Win+Shift+S 截图、</p><p>Win+g  截图录屏</p><p>在英文输入状态下，按住shift输入字母可以大写</p><p>按住alt双击文件   快速打开属性</p><p>Ctrl+shift+Esc 一键打开任务管理器</p><p>Ctrl +shift+n 快速新建文件夹</p><p>按住ctrl拖动文件 就是复制</p><p>Alt+F4键：关闭当前窗口，如果没有活动窗口就带开【关闭计算机】对话框</p><p>win+A键：快速打开【系统通知和控制中心】</p><p>Win+E键：快速打开【资源管理器】</p><p>win+G键：快速打开【Xbox工具】，这个工具非常实用，包含了截图、录屏等功能</p><p>win+I键：快速打开【计算机设置】</p><p>win+K键：快速打开【无线连接】</p><p>win+L键：快速【锁定屏幕】，如果你要暂时离开电脑，这个快捷键一定要知道</p><p>win+P键：快速打开【投影】，如果你要连接第二块屏幕或投影，这是最快捷的方法</p><p>win+Q键或者win+S键：快速打开【搜索】</p><p>win+R键：快速打开【运行】</p><p>win+T键：在【任务栏程序】中进行切换</p><p>win+V键：快速打开【剪贴板】</p><p>win+W键：快速打开【全屏截图】</p><p>win+X键：打开【系统快捷菜单】，这个菜单继承了巨大部分的系统功能。</p><p>win+数字键：打开【任务栏】上相应顺序的应用程序</p><p>win+加号：启动【放大镜】，加号放大，减号缩小</p><p>win+Tab键：打开【任务视图】，还可以按时间线查看近期任务</p><p>Alt+Tab键：在打开的程序间进行切换，这是笔者最常用的快捷键</p><h2 id="网页"><a href="#网页" class="headerlink" title="网页"></a>网页</h2><p>ctrl + w      关闭一个网页<br>Ctrl + Tab    切换网页<br>Ctrl+h 打开历史记录</p><h1 id="远程"><a href="#远程" class="headerlink" title="远程"></a>远程</h1><h2 id="微软自带的远程连接"><a href="#微软自带的远程连接" class="headerlink" title="微软自带的远程连接"></a>微软自带的远程连接</h2><p>联想小新pro16<br>win10专业版<br>两台设备都连着校园网，测试时，控制端不能连着电脑的热点。<br>控制端要下载：RDclient<br>成功后，你就可以不用带上你的电脑去机房上课了，直接在机房控制你的电脑，体验感翻倍</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>1.window要用微软账号登录<br>2.用户名是自己设置的，可以是中文，打开图二密码中的更新安全问题选项也可以看到<br>3. 密码是你的账户密码，不是PIN码哦<br>4. 显示屏关闭后，微软远程就连接不上的原因</p><ul><li>联想小新pro16可能是因为开了智能感知功能的原因，因此显示屏关闭或者盖上屏幕，控制端就无法连接上电脑</li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><p>打开远程桌面，win+r 输入mstsc<br>查询ip地址：win+r进入cmd,输入ipconfig</p><h2 id="ToDesk"><a href="#ToDesk" class="headerlink" title="ToDesk"></a>ToDesk</h2><p>ToDesk目前还是免费的且支持三台设备，而且界面简洁大气。</p><h2 id="向日葵"><a href="#向日葵" class="headerlink" title="向日葵"></a>向日葵</h2><p>特点<br>1.控制端和被控制端使用同一账号即可<br>2.可以实时查看远程主机摄像头周围的情况<br>3.方便快捷的让远程文件或本地文件互相传输和同步，安全稳定。<br>4.无需内网穿透即可实现外网连接。<br>需求<br>①是在需要被控的电脑上安装被控端;<br>②在手机上安装向日葵主控端<br>③注册一个向日葵账号。在两端同时登录就可以远程控制了。</p><h1 id="Windows-Terminal"><a href="#Windows-Terminal" class="headerlink" title="Windows Terminal"></a>Windows Terminal</h1><p>是管理各种命令行的工具，它把目前 Windows 上的 PowerShell、CMD 以及 Windows Linux 子系统（WSL）三大环境实现了统一。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>打开系统自带的 Microsoft Store，搜索 Windows Terminal 直接安装就可以了。</p><h1 id="PowerShell"><a href="#PowerShell" class="headerlink" title="PowerShell"></a>PowerShell</h1><p>是命令行程序，真正执行指令的程序，</p><h2 id="在-Windows-上安装-PowerShell"><a href="#在-Windows-上安装-PowerShell" class="headerlink" title="在 Windows 上安装 PowerShell"></a>在 Windows 上安装 PowerShell</h2><p><a href="https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.1">https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-powershell-on-windows?view=powershell-7.1</a></p><h2 id="安装-oh-my-posh-和-posh-git"><a href="#安装-oh-my-posh-和-posh-git" class="headerlink" title="安装 oh-my-posh 和 posh-git"></a>安装 oh-my-posh 和 posh-git</h2><p>oh-my-posh 是 PowerShell 主题管理工具<br>posh-git 可以实现类似 oh-my-zsh 一样的 Git 命令增强工具（命令别名和显示分支信息等）</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git</span><br><span class="line">Install-Module oh-my-posh</span><br></pre></td></tr></tbody></table></figure><h2 id="配置-PowerShell"><a href="#配置-PowerShell" class="headerlink" title="配置 PowerShell"></a>配置 PowerShell</h2><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 这是开启默认配置的</span><br><span class="line">Set-Prompt</span><br><span class="line"># 设置主题，Agnoster 是主题名</span><br><span class="line">Set-Theme Agnoster</span><br></pre></td></tr></tbody></table></figure><h1 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h1><h2 id="安装Scoop"><a href="#安装Scoop" class="headerlink" title="安装Scoop"></a>安装Scoop</h2><p>强大的 Windows 包管理工具 Scoop<br>Scoop 可以帮你一行命令安装 git 工具、java 环境、chrome 浏览器、vscode 等等，统一目录管理，而且自动配置环境变量，卸载也只需要一行命令，方便的不能在方便了<br>设置安装路径（可选）。默认 Scoop 是安装在 C 盘的，以及通过 Scoop 安装的软件也是在 C 盘的。如果你的 C 盘空间不够或想安装到其他盘，可以执行以下操作。</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 设置 scoop 安装路径为 D:\scoop</span><br><span class="line">$env:SCOOP='D:\scoop'</span><br><span class="line">[environment]::setEnvironmentVariable('SCOOP',$env:SCOOP,'User')</span><br></pre></td></tr></tbody></table></figure><p>安装 Scoop</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 将执行权限改为本地无需签名</span><br><span class="line">Set-ExecutionPolicy RemoteSigned -scope CurrentUser</span><br><span class="line"># 下载并执行脚本</span><br><span class="line">iwr -useb get.scoop.sh | iex</span><br></pre></td></tr></tbody></table></figure><h1 id="git-bash"><a href="#git-bash" class="headerlink" title="git bash"></a>git bash</h1><p>是Windows下的命令行工具。有git分布式版本控制工具，也主要用于git。</p><p>1 在windows下使用linux命令操作</p><p>2 登陆远程linux服务器&nbsp;ssh</p><h2 id="在window-terminal中添加git-bash"><a href="#在window-terminal中添加git-bash" class="headerlink" title="在window terminal中添加git bash"></a>在window terminal中添加git bash</h2><p><a href="https://www.cnblogs.com/cong-wang/p/15026535.html">https://www.cnblogs.com/cong-wang/p/15026535.html</a><br>打开设置文件settings.json，在profiles的list中添加一项：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"guid"</span> : <span class="string">"{5D1F95DF-36E8-56AD-C203-EA75CE06422C}"</span>,</span><br><span class="line">  <span class="attr">"name"</span> : <span class="string">"Git Bash"</span>,</span><br><span class="line">  <span class="attr">"commandline"</span> : <span class="string">"D:\\ruanjian\\Git\\bin\\bash.exe --login -i"</span>,</span><br><span class="line">  <span class="attr">"icon"</span> : <span class="string">"D:\\ruanjian\\Git\\git-bash.png"</span></span><br><span class="line">},</span><br></pre></td></tr></tbody></table></figure><p>guid：唯一标识本命令行配置，可以使用在线guid工具随机生成一个和list中其他配置不一样的guid即可<br>name：本命令行配置的名字，会显示在菜单中<br>commandline：表示怎么启动一个命令行，这里填的是”E:\Git\bin\bash.exe –login -i”，需要找到你的Git的安装目录，将E:\Git\bin\bash.exe替换成你自己的路径<br>icon：显示在菜单中的图标</p><h1 id="沙盒"><a href="#沙盒" class="headerlink" title="沙盒"></a>沙盒</h1><p>控制面板-&gt;程序和功能-&gt;启用或关闭Windows功能</p><p>打开沙盒（在开始菜单中）,直接将要运行的程序，不确定安全性的程序复制粘贴进去就行,关机就清空数据了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;输入法&quot;&gt;&lt;a href=&quot;#输入法&quot; class=&quot;headerlink&quot; title=&quot;输入法&quot;&gt;&lt;/a&gt;输入法&lt;/h1&gt;&lt;h2 id=&quot;不认识的汉字怎么打&quot;&gt;&lt;a href=&quot;#不认识的汉字怎么打&quot; class=&quot;headerlink&quot; title=&quot;不认识</summary>
      
    
    
    
    <category term="知识" scheme="https://wenkexia.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="window" scheme="https://wenkexia.github.io/tags/window/"/>
    
  </entry>
  
  <entry>
    <title>python自动化办公库</title>
    <link href="https://wenkexia.github.io/2022/012151162.html"/>
    <id>https://wenkexia.github.io/2022/012151162.html</id>
    <published>2022-01-21T13:57:05.000Z</published>
    <updated>2022-01-21T13:57:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://mp.weixin.qq.com/s/WYni01nzv2lbG4VK59U0nA">原文</a></p><h1 id="微信自动化库"><a href="#微信自动化库" class="headerlink" title="微信自动化库"></a>微信自动化库</h1><p>wxpy 库<br>官网：<br><a href="https://wxpy.readthedocs.io/zh/latest/">https://wxpy.readthedocs.io/zh/latest/</a></p><p>特点：微信机器人/可能是最优雅的微信个人号API，wxpy 在 itchat 的基础上，通过大量接口优化提升了模块的易用性，并进行丰富的功能扩展。<br>Excel自动化库</p><p>//  1.xlwings 库<br>官网：<br><a href="https://www.xlwings.org/">https://www.xlwings.org/</a></p><p>特点：xlwings 是开源且免费的，预装了 Anaconda 和 WinPython，可在 Windows 和 macOS 上运行。通过 Python 脚本或 Jupyter notebook 自动化 Excel，通过宏从 Excel 调用 Python，并编写用户定义的函数（UDF 仅适用于 Windows）</p><p>//  2.openpyxl 库<br>官网：<br><a href="https://openpyxl.readthedocs.io/">https://openpyxl.readthedocs.io</a></p><p>特点：openpyxl 是一个用于读取 / 编写 Excel 2010 xlsx/xlsm/xltx/xltm 文件的 Python 库。它是由于缺乏从 Python 中读取 / 编写 Office Open XML 格式的现有库而诞生的。</p><p>//  3.xlrd 库<br>官网：<br><a href="https://pypi.python.org/pypi/xlrd">https://pypi.python.org/pypi/xlrd</a></p><p>特点：在 python 中，xlrd 库是一个很常用的读取 excel 文件的库，其对 excel 文件的读取可以实现比较精细的控制。</p><p>//  4.xlwt 库<br>官网：<br><a href="https://pypi.org/project/xlwt/">https://pypi.org/project/xlwt/</a></p><p>特点：类比于 xlrd 的 reader，那么 xlwt 就相对于 writer，而且很纯正的一点就是它只能对 Excel 进行写操作。xlwt 和 xlrd 不光名字像，连很多函数和操作格式也是完全相同。</p><p>//  5.xlutils 库<br>官网：<br><a href="https://pypi.org/project/xlutils/">https://pypi.org/project/xlutils/</a></p><p>特点：xlutils（excel utilities）是一个提供了许多操作修改 excel 文件方法的库。xlutils 库也仅仅是通过复制一个副本进行操作后保存一个新文件，xlutils 库就像是 xlrd 库和 xlwt 库之间的一座桥梁，因此，xlutils 库是依赖于 xlrd 和 xlwt 两个库的。</p><p>//  6.xlsxwriter 库<br>官网：<br><a href="https://xlsxwriter.readthedocs.io/">https://xlsxwriter.readthedocs.io/</a></p><p>特点：xlsxwriter 是用于创建 Excel XLSX 文件的 Python 模块，可用于将文本、数字、公式和超链接写入 Excel2007 + XLSX 文件中的多个工作表。它支持格式化等功能。可以说除了 Excel 本身，就属这个功能最齐全了。</p><p>//  7.pandas 库<br>官网：<br><a href="https://www.pypandas.cn/docs/">https://www.pypandas.cn/docs/</a></p><p>特点：pandas 是基于 NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。</p><p>//  8.Marmir 库<br>官网：<br><a href="https://github.com/brianray/mm">https://github.com/brianray/mm</a></p><p>特点：Marmir 采用 Python 数据结构并将其转换为电子表格。它是类固醇上的 xlwt 和 google 电子表格。目标是使用最少的配置轻松生成多种类型的有用表文件。</p><p>Python</p><p>Word自动化库</p><p>//  9.python-docx 库<br>官网：<br><a href="https://python-docx.readthedocs.io/en/latest/">https://python-docx.readthedocs.io/en/latest/</a></p><p>特点：python-docx 是一个用于创建和更新 Microsoft Word (.docx) 文件的 Python 库。快速开始、处理文档、处理文本、使用截面、使用页眉和页脚、API基础理、解样式、使用样式理解图片和其他形状。只对 windows 平台有效。</p><p>//  10.textract 库<br>官网：<br><a href="https://gitee.com/mirrors/textract">https://gitee.com/mirrors/textract</a></p><p>特点：它同时兼顾 “doc” 和 “docx”，但安装过程需要一些依赖。你可以批量的用 python 生成 word 文件，推荐使用 docx，不需要会太多。</p><p>Python</p><p>PPT自动化库</p><p>//  11.python-pptx 库<br>官网：<br><a href="https://python-pptx.readthedocs.io/">https://python-pptx.readthedocs.io</a></p><p>特点：python-pptx 是一个用于创建和更新 PowerPoint (.pptx) 文件的 Python 库。典型用途是从数据库内容生成自定义 PowerPoint 演示文稿，可通过单击 Web 应用程序中的链接下载。</p><p>Python</p><p>ODF自动化库</p><p>//  12.Relatorio 库<br>官网：<br><a href="https://pypi.org/project/relatorio/">https://pypi.org/project/relatorio/</a></p><p>特点：Relatorio 是一个模板库，它提供了一种轻松输出多种文件（odt、ods、png、svg 等）的方法。通过为它们创建插件可以轻松添加对更多文件类型的支持。Relatorio 还提供了一个报告存储库，允许您将 python 对象和报告链接在一起，按 mimetype/name/python 对象查找报告。ODF：开放文档格式（外文名：OpenDocument Format，外语简称：ODF）是一种规范，基于 XML（标准通用标记语言的子集）的文件格式，因应试算表、图表、演示稿和文字处理文件等电子文件而设置。</p><p>Python</p><p>PDF自动化库</p><p>//  13.PyPDF2 库<br>官网：<br><a href="https://github.com/mstamy2/PyPDF2">https://github.com/mstamy2/PyPDF2</a></p><p>特点：PyPDF2 是一个纯 Python PDF 库，能够拆分、合并、裁剪和转换 PDF 文件的页面。它还可以向 PDF 文件添加自定义数据、查看选项和密码。它可以从 PDF 中检索文本和元数据，也可以将整个文件合并在一起。</p><p>//  14.ReportLab 库<br>官网：<br><a href="https://www.reportlab.com/opensource/">https://www.reportlab.com/opensource/</a></p><p>特点：ReportLab 是久经考验、超强大的开源引擎，用于创建复杂的、数据驱动的 PDF 文档和自定义矢量图形。它是免费的、开源的，并且是用 Python 编写的。</p><p>//  15.PDFminer 库<br>官网：<br><a href="https://github.com/euske/pdfminer">https://github.com/euske/pdfminer</a></p><p>特点：PDFMiner 是一款用于 PDF 文档的文本提取工具。</p><p>Python</p><p>邮件自动化库</p><p>//  16.Django Celery SES 库<br>官网：<br><a href="https://github.com/StreetVoice/django-celery-ses">https://github.com/StreetVoice/django-celery-ses</a></p><p>特点：这个包提供了一个 EmailBackend 来利用 django-celery 发送电子邮件。您可以将 EmailBackend 插入您的项目中，而无需对代码进行任何修改。</p><p>//  17.Envelopes 库<br>官网：<br><a href="http://tomekwojcik.github.io/envelopes/">http://tomekwojcik.github.io/envelopes/</a></p><p>特点：Envelopes 是 Python 的电子邮件和 smtplib 模块的包装器。它旨在使在 Python 中处理外发电子邮件变得简单而有趣。</p><p>//  18.Flanker 库<br>官网：<br><a href="https://github.com/mailgun/flanker">https://github.com/mailgun/flanker</a></p><p>特点：由 mailgun 开源的 Flanker - email address and MIME parsing for Python 是一个解析高效、容错率不错的 python 第三方扩展库。python 3 也可以正常使用，该库包含了邮件地址解析和邮件 mime 格式解析。</p><p>//  19.imbox 库<br>官网：<br><a href="https://github.com/martinrusev/imbox">https://github.com/martinrusev/imbox</a></p><p>特点：用于读取 IMAP 邮箱并将电子邮件内容转换为机器可读数据的 Python 库</p><p>//  20.inbox.py 库<br>官网：<br><a href="https://github.com/billzhong/inbox.py">https://github.com/billzhong/inbox.py</a></p><p>特点：这是您见过的最简单的 SMTP 服务器。它是异步的。一个实例每秒应该处理一千多封电子邮件。</p><p>//  21.sync-engine 库<br>官网：<br><a href="https://github.com/nylas/sync-engine">https://github.com/nylas/sync-engine</a></p><p>特点：Nylas 同步引擎在强大的电子邮件同步平台之上提供了一个 RESTful API，可以轻松地在电子邮件之上构建应用程序。</p><p>//  22.Lamson 库<br>官网：<br><a href="https://github.com/zedshaw/lamson">https://github.com/zedshaw/lamson</a></p><p>特点：Lamson 是一个纯 Python SMTP 服务器，旨在以现代 Web 框架（如 Django）的风格创建强大而复杂的邮件应用程序。</p><p>//  23.Marrow Mailer 库<br>官网：<br><a href="https://github.com/marrow/mailer">https://github.com/marrow/mailer</a></p><p>特点：Marrow Mailer 是一个 Python 库，可以轻松地从您的应用程序发送电子邮件。通过使用 Marrow Mailer，您可以：轻松构建纯文本和 HTML 电子邮件；提高电子邮件传递的可测试性；使用不同的邮件投递管理策略；例如立即，延迟，甚至多服务器等。</p><p>//  24.Modoboa 库<br>官网：<br><a href="https://github.com/modoboa/modoboa">https://github.com/modoboa/modoboa</a></p><p>特点：Modoboa 是一个邮件托管和管理平台，包括一个现代和简化的 Web 用户界面。它提供了有用的组件，例如管理面板或网络邮件。</p><p>//  25.smtplib 库<br>官网：<br><a href="https://docs.python.org/zh-cn/3/library/smtplib.html">https://docs.python.org/zh-cn/3/library/smtplib.html</a></p><p>特点：smtplib 模块是 python 中 smtp (简单邮件传输协议) 的客户端实现。我们可以使用 smtplib 模块，轻松的发送电子邮件。</p><p>Python</p><p>文件处理自动化库</p><p>//  27.os 库<br>官网：<br><a href="https://docs.python.org/zh-cn/3/library/os.html?highlight=os#module-os">https://docs.python.org/zh-cn/3/library/os.html?highlight=os#module-os</a></p><p>特点：本模块提供了一种使用与操作系统相关的功能的便捷式途径。如果你只是想读写一个文件，请参阅 open()，如果你想操作文件路径，请参阅 os.path 模块，如果你想读取通过命令行给出的所有文件中的所有行，请参阅 fileinput 模块。为了创建临时文件和目录，请参阅 tempfile 模块，对于高级文件和目录处理，请参阅 shutil 模块。</p><p>Python</p><p>综合功能自动化库</p><p>//  28.win32com 库<br>官网：<br><a href="https://pypi.org/project/pywin32/">https://pypi.org/project/pywin32/</a></p><p>特点：win32com 模块主要为 Python 提供调用 windows 底层组件对 word 、Excel、PPT 等进行操作的功能，只能在 Windows 环境下使用，并且需要安装 office 相关软件才行（WPS 也行）。</p><p>//  29.unoconv 库<br>官网：<br><a href="https://github.com/unoconv/unoconv">https://github.com/unoconv/unoconv</a></p><p>特点：是一个命令行工具，可以将 LibreOffice 可以导入的任何文档格式转换为 LibreOffice 可以导出的任何文档格式。它利用 LibreOffice 的 UNO 绑定进行文档的非交互式转换，也支持 OpenOffice。</p><p>//  30.Tablib 库<br>官网：<br><a href="https://www.osgeo.cn/tablib/">https://www.osgeo.cn/tablib/</a></p><p>特点：Python tablib 模块是第三方模块，主要作用是将数据导出为各种不同的格式，包括 excel，json，html，yaml，csv，tsv 等格式，怎么样，有点心动了吧，当然这个模块使用起来也是超级简单的。</p><p>//  31.SnowNLP 库<br>官网：<br><a href="https://github.com/isnowfy/snownlp">https://github.com/isnowfy/snownlp</a></p><p>特点：SnowNLP 是一个 python 写的类库，可以方便的处理中文文本内容，是受到了 TextBlob 的启发而写的，由于现在大部分的自然语言处理库基本都是针对英文的，于是写了一个方便处理中文的类库，并且和 TextBlob 不同的是，这里没有用 NLTK，所有的算法都是自己实现的，并且自带了一些训练好的字典。注意本程序都是处理的 unicode 编码，所以使用时请自行 decode 成 unicode。</p><p>//  32.TextBlob 库<br>官网：<br><a href="https://textblob.readthedocs.io/">https://textblob.readthedocs.io</a></p><p>特点：TextBlob 是一个用于处理文本数据的 Python（2 和 3）库。它提供了一个简单的 API，用于深入研究常见的自然语言处理 (NLP) 任务，例如词性标注、名词短语提取、情感分析、分类、翻译等。</p><p>//  33.TextGrocery 库<br>官网：<br><a href="https://textgrocery.readthedocs.io/">https://textgrocery.readthedocs.io</a></p><p>特点：TextGrocery 是一个基于 LibLinear 和结巴分词的短文本分类工具，特点是高效易用，同时支持中文和英文语料。</p><p>//  34.NumPy 库<br>官网：<br><a href="https://www.numpy.org.cn/">https://www.numpy.org.cn/</a></p><p>特点：NumPy 是 Python 中科学计算的基础包。它是一个 Python 库，提供多维数组对象，各种派生对象（如掩码数组和矩阵），以及用于数组快速操作的各种 API，有包括数学、逻辑、形状操作、排序、选择、输入输出、离散傅立叶变换、基本线性代数，基本统计运算和随机模拟等等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/WYni01nzv2lbG4VK59U0nA&quot;&gt;原文&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;微信自动化库&quot;&gt;&lt;a href=&quot;#微信自动化库&quot; class=&quot;headerlink&quot; title=&quot;微信自动化库</summary>
      
    
    
    
    <category term="python" scheme="https://wenkexia.github.io/categories/python/"/>
    
    
    <category term="自动化" scheme="https://wenkexia.github.io/tags/%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>markdown语法</title>
    <link href="https://wenkexia.github.io/2022/010947193.html"/>
    <id>https://wenkexia.github.io/2022/010947193.html</id>
    <published>2022-01-09T03:24:32.000Z</published>
    <updated>2022-01-09T03:24:32.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://markdown.com.cn/basic-syntax/">官方文档</a></p><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>Markdown是一种轻量级标记语言，排版语法简洁，让人们更多地关注内容本身而非排版。它使用易读易写的纯文本格式编写文档，可与HTML混编，可导出 HTML、PDF 以及本身的 .md 格式的文件。因简洁、高效、易读、易写，Markdown被大量使用，如Github、Wikipedia、简书等。</p><p>Markdown 是 HTML 的一种简写，在显示时会『解压缩』成 HTML。理论上你可以在 Markdown 里直接插入合法的 HTML 块，他们会成为最终的 HTML 的一部分，做到 Markdown 本身做不到的事。<br>Markdown 的格式可以由 CSS 描述</p><h1 id="标题语法"><a href="#标题语法" class="headerlink" title="标题语法"></a>标题语法</h1><p>要创建标题，请在单词或短语前面添加# 。#的数量代表了标题的级别<br>用一个空格在#和标题之间进行分隔。</p><h1 id="强调语法"><a href="#强调语法" class="headerlink" title="强调语法"></a>强调语法</h1><p>粗体（Bold）加斜体（Italic）</p><p>要加粗文本，请在单词或短语的前后各添加三个星号（asterisks）</p><h1 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h1><p>删除线就是给文本加上删除线，在文本两端使用两个波浪线~</p><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~文本~~</span><br></pre></td></tr></tbody></table></figure><p><del>文本</del></p><h1 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h1><p>要创建块引用，请在段落前添加一个&gt;符号。</p><h1 id="列表语法"><a href="#列表语法" class="headerlink" title="列表语法"></a>列表语法</h1><p>要创建无序列表，请在每个列表项前面添加破折号 (-)、星号 (*) 或加号 (+) 。缩进一个或多个列表项可创建嵌套列表。</p><h1 id="围栏代码块"><a href="#围栏代码块" class="headerlink" title="围栏代码块"></a>围栏代码块</h1><p>在代码块之前和之后的行上使用三个反引号（(```）或三个波浪号（~~~）。</p><p>在反引号后面加上语言的名字就可以享受到对应语言的语法高亮。</p><p>用反引号括起来，反引号是英文输入下，tab的上一个键</p><h1 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h1><p>在单独一行上使用三个或多个星号 (***)、破折号 (—) 或下划线 (___) ，并且不能包含其他内容。为了兼容性，请在分隔线的前后均添加空白行</p><h1 id="链接语法"><a href="#链接语法" class="headerlink" title="链接语法"></a>链接语法</h1><p>超链接Markdown语法代码：[超链接显示名](超链接地址 “超链接title”)<br>使用尖括号可以很方便地把URL或者email地址变成可点击的链接。</p><h1 id="转义字符语法"><a href="#转义字符语法" class="headerlink" title="转义字符语法"></a>转义字符语法</h1><p>要显示原本用于格式化 Markdown 文档的字符，请在字符前面添加反斜杠字符 \ 。</p><h1 id="图片语法"><a href="#图片语法" class="headerlink" title="图片语法"></a>图片语法</h1><figure class="highlight plaintext"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![ddfdfd](图片链接 "图片title")</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p><a href="https://tableconvert.com/zh-CN/">Markdown表格工具</a><br>Markdown 制作表格使用 | 来分隔不同的单元格，使用 - 来分隔表头和其他行。</p><h2 id="hexo文章"><a href="#hexo文章" class="headerlink" title="hexo文章"></a>hexo文章</h2><p>表格要与正文空两行才可以渲染</p><h2 id="表格的对齐方式"><a href="#表格的对齐方式" class="headerlink" title="表格的对齐方式"></a>表格的对齐方式</h2><p>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。</p><figure class="highlight markdown"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">| 左对齐 | 右对齐 | 居中对齐 |</span><br><span class="line">| :-----| ----: | :----: |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br><span class="line">| 单元格 | 单元格 | 单元格 |</span><br></pre></td></tr></tbody></table></figure><h1 id="任务列表"><a href="#任务列表" class="headerlink" title="任务列表"></a>任务列表</h1><p>任务列表项之前添加破折号-和方括号[ ]，并在[ ]前面加上空格。要选择一个复选框，请在方括号[x]之间添加 x 。</p><ul><li><input checked="" disabled="" type="checkbox"> Write the press release</li><li><input disabled="" type="checkbox"> Update the website</li><li><input disabled="" type="checkbox"> Contact the media<h1 id="使用-Emoji-表情"><a href="#使用-Emoji-表情" class="headerlink" title="使用 Emoji 表情"></a>使用 Emoji 表情</h1>复制使用<br><a href="https://emojipedia.org/">https://emojipedia.org/</a></li></ul><p><a href="https://gist.github.com/rxaviers/7360908">https://gist.github.com/rxaviers/7360908</a></p><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><h2 id="vscode"><a href="#vscode" class="headerlink" title="vscode"></a>vscode</h2><h2 id="微信Markdown编辑器"><a href="#微信Markdown编辑器" class="headerlink" title="微信Markdown编辑器"></a>微信Markdown编辑器</h2><p>这个项目名doocs-md，在编写时，Markdown 文档自动即时渲染为微信图文，让你不再为微信文章排版而发愁！<br>项目地址：<a href="https://github.com/doocs/md">https://github.com/doocs/md</a></p><p>在线体验地址：</p><p>• Gitee Pages：<a href="https://doocs.gitee.io/md">https://doocs.gitee.io/md</a></p><p>• GitHub Pages：<a href="https://doocs.github.io/md">https://doocs.github.io/md</a></p><h3 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h3><p>• 支持自定义 CSS 样式</p><p>• 支持 Markdown 所有基础语法</p><p>• 支持浅色、暗黑两种主题模式</p><p>• 支持 Ctrl + F 快速格式化文档</p><p>• 支持色盘取色，快速替换文章整体色调</p><p>• 支持多图上传，可自定义配置图床</p><p>• 支持自定义上传逻辑</p><p>• 支持在编辑框右键弹出功能选项卡</p><p>• 支持批量转换本地图片为线上图片</p><h3 id="使用-Docker-镜像"><a href="#使用-Docker-镜像" class="headerlink" title="使用 Docker 镜像"></a>使用 Docker 镜像</h3><p><code>docker run -d -p 8080:80 doocs/md:latest</code><br>容器运行起来之后，打开浏览器，访问 <a href="http://localhost:8080/">http://localhost:8080</a> 即可。</p><h3 id="使用-npm-cli"><a href="#使用-npm-cli" class="headerlink" title="使用 npm cli"></a>使用 npm cli</h3><p>通过我们的 npm cli 你可以轻易搭建属于自己的微信 Markdown 编辑器。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm i -g @doocs/md-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动</span></span><br><span class="line">md-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">open http://127.0.0.1:8800/md/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动并指定端口</span></span><br><span class="line">md-cli port=8899</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问</span></span><br><span class="line">open http://127.0.0.1:8899/md/</span><br></pre></td></tr></tbody></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://markdown.com.cn/basic-syntax/&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;Markdo</summary>
      
    
    
    
    <category term="知识" scheme="https://wenkexia.github.io/categories/%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="markdown" scheme="https://wenkexia.github.io/tags/markdown/"/>
    
  </entry>
  
</feed>
